/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 46);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var fbpGraph, ports;

  fbpGraph = __webpack_require__(13);

  exports.graph = fbpGraph.graph;

  exports.Graph = fbpGraph.Graph;

  exports.journal = fbpGraph.journal;

  exports.Journal = fbpGraph.Journal;

  exports.Network = __webpack_require__(23).Network;

  exports.isBrowser = __webpack_require__(9).isBrowser;

  exports.ComponentLoader = __webpack_require__(15).ComponentLoader;

  exports.Component = __webpack_require__(39).Component;

  exports.AsyncComponent = __webpack_require__(403).AsyncComponent;

  exports.helpers = __webpack_require__(404);

  exports.streams = __webpack_require__(21);

  ports = __webpack_require__(40);

  exports.InPorts = ports.InPorts;

  exports.OutPorts = ports.OutPorts;

  exports.InPort = __webpack_require__(41);

  exports.OutPort = __webpack_require__(43);

  exports.Port = __webpack_require__(20).Port;

  exports.ArrayPort = __webpack_require__(405).ArrayPort;

  exports.internalSocket = __webpack_require__(12);

  exports.IP = __webpack_require__(7);

  exports.createNetwork = function(graph, callback, options) {
    var network, networkReady;
    if (typeof options !== 'object') {
      options = {
        delay: options
      };
    }
    if (typeof callback !== 'function') {
      callback = function(err) {
        if (err) {
          throw err;
        }
      };
    }
    network = new exports.Network(graph, options);
    networkReady = function(network) {
      return network.start(function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null, network);
      });
    };
    network.loader.listComponents(function(err) {
      if (err) {
        return callback(err);
      }
      if (graph.nodes.length === 0) {
        return networkReady(network);
      }
      if (options.delay) {
        callback(null, network);
        return;
      }
      return network.connect(function(err) {
        if (err) {
          return callback(err);
        }
        return networkReady(network);
      });
    });
    return network;
  };

  exports.loadFile = function(file, options, callback) {
    var baseDir;
    if (!callback) {
      callback = options;
      baseDir = null;
    }
    if (callback && typeof options !== 'object') {
      options = {
        baseDir: options
      };
    }
    return exports.graph.loadFile(file, function(err, net) {
      if (err) {
        return callback(err);
      }
      if (options.baseDir) {
        net.baseDir = options.baseDir;
      }
      return exports.createNetwork(net, callback, options);
    });
  };

  exports.saveFile = function(graph, file, callback) {
    return exports.graph.save(file, callback);
  };

  exports.asCallback = __webpack_require__(406).asCallback;

}).call(this);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, noflo, uniqueId,
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

uniqueId = function(length) {
  var id;
  if (length == null) {
    length = 8;
  }
  id = "";
  while (id.length < length) {
    id += Math.random().toString(36).substr(2);
  }
  return id.substr(0, length);
};

module.exports = ArrayableHelper = function(component, type, ports, options) {
  var c, compute, expandToArray, prepareProps, setProperty, setPropertyIndexed;
  if (options == null) {
    options = {};
  }
  c = component;
  c.inPorts = new noflo.InPorts(ports);
  c.outPorts = new noflo.OutPorts();
  c.outPorts.add(type, {
    datatype: 'object'
  });
  c.props = {};
  c.tearDown = function(callback) {
    var props;
    props = {};
    return callback();
  };
  c.forwardBrackets = {};
  prepareProps = function() {
    var name, port, props;
    props = {
      type: type
    };
    props.id = uniqueId();
    for (name in ports) {
      if (!hasProp.call(ports, name)) continue;
      port = ports[name];
      if (port.addressable === true) {
        props[name] = [];
        continue;
      }
      if ((port.value != null) || port.required !== false) {
        props[name] = port.value;
      }
    }
    return props;
  };
  setProperty = function(props, name, data, output) {
    var result;
    props[name] = data;
    result = compute.bind(component)(props);
    if (!result) {
      return;
    }
    return output.send(result);
  };
  setPropertyIndexed = function(props, name, data, i, output) {
    var result;
    props[name][i] = data;
    result = compute.bind(component)(props);
    if (!result) {
      return;
    }
    return output.send(result);
  };
  compute = options.compute || component.compute || function(props) {
    var name, out, prop;
    out = {};
    for (name in props) {
      if (!hasProp.call(props, name)) continue;
      prop = props[name];
      if ((c.inPorts[name] != null) && c.inPorts[name].options.addressable) {
        out[name] = expandToArray(prop);
      } else {
        out[name] = prop;
      }
    }
    out = expandToArray(out);
    return out;
  };
  expandToArray = options.expandToArray || function(props) {
    var arr, i, j, k, keys, l, len, len1, length, name, obj, prop, ref;
    length = 0;
    keys = Object.keys(props);
    for (j = 0, len = keys.length; j < len; j++) {
      name = keys[j];
      prop = props[name];
      if (prop == null) {
        return null;
      }
      if (prop instanceof Array) {
        if (!(prop.length > 0)) {
          return null;
        }
        if (length < prop.length) {
          length = prop.length;
        }
      }
    }
    if (length === 0) {
      return props;
    }
    if (length > 0) {
      arr = [];
      for (i = k = 0, ref = length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        if (props instanceof Array) {
          obj = [];
        } else {
          obj = {};
          obj.type = props.type;
          obj.id = props.id;
        }
        keys = Object.keys(props);
        for (l = 0, len1 = keys.length; l < len1; l++) {
          name = keys[l];
          prop = props[name];
          if (prop instanceof Array) {
            obj[name] = prop[i] != null ? prop[i] : prop[i % prop.length];
          } else {
            obj[name] = prop;
          }
        }
        arr.push(obj);
      }
      return arr;
    }
  };
  c.expandToArray = expandToArray;
  return c.process(function(input, output) {
    var props;
    if (!c.props[input.scope]) {
      c.props[input.scope] = prepareProps();
    }
    props = c.props[input.scope];
    Object.keys(ports).forEach(function(name) {
      var data, idx, indexesWithData, j, len, port;
      port = ports[name];
      if (port.addressable === true) {
        indexesWithData = input.attached(name).filter(function(idx) {
          return input.hasData([name, idx]);
        });
        if (!indexesWithData.length) {
          return;
        }
        for (j = 0, len = indexesWithData.length; j < len; j++) {
          idx = indexesWithData[j];
          data = input.getData([name, idx]);
          setPropertyIndexed(props, name, data, idx, output);
        }
        return;
      }
      if (!input.hasData(name)) {
        return;
      }
      data = input.getData(name);
      setProperty(props, name, data, output);
    });
    output.done();
  });
};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (true) {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}.call(this));


/***/ }),
/* 4 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(56);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {



/***/ }),
/* 7 */
/***/ (function(module, exports) {

(function() {
  var IP;

  module.exports = IP = (function() {
    IP.types = ['data', 'openBracket', 'closeBracket'];

    IP.isIP = function(obj) {
      return obj && typeof obj === 'object' && obj._isIP === true;
    };

    function IP(type, data, options) {
      var key, val;
      this.type = type != null ? type : 'data';
      this.data = data != null ? data : null;
      if (options == null) {
        options = {};
      }
      this._isIP = true;
      this.scope = null;
      this.owner = null;
      this.clonable = false;
      this.index = null;
      this.schema = null;
      this.datatype = 'all';
      for (key in options) {
        val = options[key];
        this[key] = val;
      }
    }

    IP.prototype.clone = function() {
      var ip, key, val;
      ip = new IP(this.type);
      for (key in this) {
        val = this[key];
        if (['owner'].indexOf(key) !== -1) {
          continue;
        }
        if (val === null) {
          continue;
        }
        if (typeof val === 'object') {
          ip[key] = JSON.parse(JSON.stringify(val));
        } else {
          ip[key] = val;
        }
      }
      return ip;
    };

    IP.prototype.move = function(owner) {
      this.owner = owner;
    };

    IP.prototype.drop = function() {
      var key, results, val;
      results = [];
      for (key in this) {
        val = this[key];
        results.push(delete this[key]);
      }
      return results;
    };

    return IP;

  })();

}).call(this);


/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  exports.isBrowser = function() {
    if (typeof process !== 'undefined' && process.execPath && process.execPath.match(/node|iojs/)) {
      return false;
    }
    return true;
  };

  exports.deprecated = function(message) {
    if (exports.isBrowser()) {
      if (window.NOFLO_FATAL_DEPRECATED) {
        throw new Error(message);
      }
      console.warn(message);
      return;
    }
    if (process.env.NOFLO_FATAL_DEPRECATED) {
      throw new Error(message);
    }
    return console.warn(message);
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var BaseRuntime, platform,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  platform = __webpack_require__(26);

  BaseRuntime = (function(superClass) {
    extend(BaseRuntime, superClass);

    function BaseRuntime(definition) {
      this.definition = definition;
      if (!this.definition.capabilities) {
        this.definition.capabilities = [];
      }
      this.graph = null;
    }

    BaseRuntime.prototype.setMain = function(graph) {
      this.graph = graph;
    };

    BaseRuntime.prototype.getType = function() {
      return this.definition.protocol;
    };

    BaseRuntime.prototype.getAddress = function() {
      return this.definition.address;
    };

    BaseRuntime.prototype.canDo = function(capability) {
      return this.definition.capabilities.indexOf(capability) !== -1;
    };

    BaseRuntime.prototype.isConnected = function() {
      return false;
    };

    BaseRuntime.prototype.connect = function() {};

    BaseRuntime.prototype.disconnect = function() {};

    BaseRuntime.prototype.reconnect = function() {
      this.disconnect();
      return this.connect();
    };

    BaseRuntime.prototype.start = function() {
      if (!this.graph) {
        throw new Error('No graph defined for execution');
      }
      return this.sendNetwork('start', {
        graph: this.graph.name || this.graph.properties.id
      });
    };

    BaseRuntime.prototype.stop = function() {
      if (!this.graph) {
        throw new Error('No graph defined for execution');
      }
      return this.sendNetwork('stop', {
        graph: this.graph.name || this.graph.properties.id
      });
    };

    BaseRuntime.prototype.setParentElement = function(parent) {};

    BaseRuntime.prototype.getElement = function() {};

    BaseRuntime.prototype.recvRuntime = function(command, payload) {
      var key, val;
      if (command === 'runtime') {
        for (key in payload) {
          val = payload[key];
          this.definition[key] = val;
        }
        this.emit('capabilities', payload.capabilities || []);
      }
      return this.emit('runtime', {
        command: command,
        payload: payload
      });
    };

    BaseRuntime.prototype.recvComponent = function(command, payload) {
      switch (command) {
        case 'error':
          return this.emit('network', {
            command: command,
            payload: payload
          });
        default:
          return this.emit('component', {
            command: command,
            payload: payload
          });
      }
    };

    BaseRuntime.prototype.recvGraph = function(command, payload) {
      return this.emit('graph', {
        command: command,
        payload: payload
      });
    };

    BaseRuntime.prototype.recvNetwork = function(command, payload) {
      switch (command) {
        case 'started':
          return this.emit('execution', {
            running: (payload != null) && (payload.running != null) ? payload.running : true,
            started: (payload != null) && payload.started ? payload.started : true
          });
        case 'stopped':
          return this.emit('execution', {
            running: (payload != null) && (payload.running != null) ? payload.running : false,
            started: (payload != null) && payload.started ? payload.started : false
          });
        case 'status':
          return this.emit('execution', {
            running: payload.running,
            started: payload.started
          });
        case 'icon':
          return this.emit('icon', payload);
        default:
          return this.emit('network', {
            command: command,
            payload: payload
          });
      }
    };

    BaseRuntime.prototype.sendRuntime = function(command, payload) {
      if (payload == null) {
        payload = {};
      }
      payload.secret = this.definition.secret;
      return this.send('runtime', command, payload);
    };

    BaseRuntime.prototype.sendGraph = function(command, payload) {
      if (payload == null) {
        payload = {};
      }
      payload.secret = this.definition.secret;
      return this.send('graph', command, payload);
    };

    BaseRuntime.prototype.sendNetwork = function(command, payload) {
      if (payload == null) {
        payload = {};
      }
      payload.secret = this.definition.secret;
      return this.send('network', command, payload);
    };

    BaseRuntime.prototype.sendComponent = function(command, payload) {
      if (payload == null) {
        payload = {};
      }
      payload.secret = this.definition.secret;
      return this.send('component', command, payload);
    };

    BaseRuntime.prototype.send = function(protocol, command, payload) {};

    return BaseRuntime;

  })(platform.EventEmitter);

  module.exports = BaseRuntime;

}).call(this);


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(48)
var ieee754 = __webpack_require__(49)
var isArray = __webpack_require__(50)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var EventEmitter, IP, InternalSocket,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = __webpack_require__(4).EventEmitter;

  IP = __webpack_require__(7);

  InternalSocket = (function(superClass) {
    extend(InternalSocket, superClass);

    InternalSocket.prototype.regularEmitEvent = function(event, data) {
      return this.emit(event, data);
    };

    InternalSocket.prototype.debugEmitEvent = function(event, data) {
      var error, error1;
      try {
        return this.emit(event, data);
      } catch (error1) {
        error = error1;
        if (error.id && error.metadata && error.error) {
          if (this.listeners('error').length === 0) {
            throw error.error;
          }
          this.emit('error', error);
          return;
        }
        if (this.listeners('error').length === 0) {
          throw error;
        }
        return this.emit('error', {
          id: this.to.process.id,
          error: error,
          metadata: this.metadata
        });
      }
    };

    function InternalSocket(metadata) {
      this.metadata = metadata != null ? metadata : {};
      this.brackets = [];
      this.connected = false;
      this.dataDelegate = null;
      this.debug = false;
      this.emitEvent = this.regularEmitEvent;
    }

    InternalSocket.prototype.connect = function() {
      if (this.connected) {
        return;
      }
      this.connected = true;
      return this.emitEvent('connect', null);
    };

    InternalSocket.prototype.disconnect = function() {
      if (!this.connected) {
        return;
      }
      this.connected = false;
      return this.emitEvent('disconnect', null);
    };

    InternalSocket.prototype.isConnected = function() {
      return this.connected;
    };

    InternalSocket.prototype.send = function(data) {
      if (data === void 0 && typeof this.dataDelegate === 'function') {
        data = this.dataDelegate();
      }
      return this.handleSocketEvent('data', data);
    };

    InternalSocket.prototype.post = function(ip, autoDisconnect) {
      if (autoDisconnect == null) {
        autoDisconnect = true;
      }
      if (ip === void 0 && typeof this.dataDelegate === 'function') {
        ip = this.dataDelegate();
      }
      if (!this.isConnected() && this.brackets.length === 0) {
        this.connect();
      }
      this.handleSocketEvent('ip', ip, false);
      if (autoDisconnect && this.isConnected() && this.brackets.length === 0) {
        return this.disconnect();
      }
    };

    InternalSocket.prototype.beginGroup = function(group) {
      return this.handleSocketEvent('begingroup', group);
    };

    InternalSocket.prototype.endGroup = function() {
      return this.handleSocketEvent('endgroup');
    };

    InternalSocket.prototype.setDataDelegate = function(delegate) {
      if (typeof delegate !== 'function') {
        throw Error('A data delegate must be a function.');
      }
      return this.dataDelegate = delegate;
    };

    InternalSocket.prototype.setDebug = function(active) {
      this.debug = active;
      return this.emitEvent = this.debug ? this.debugEmitEvent : this.regularEmitEvent;
    };

    InternalSocket.prototype.getId = function() {
      var fromStr, toStr;
      fromStr = function(from) {
        return from.process.id + "() " + (from.port.toUpperCase());
      };
      toStr = function(to) {
        return (to.port.toUpperCase()) + " " + to.process.id + "()";
      };
      if (!(this.from || this.to)) {
        return "UNDEFINED";
      }
      if (this.from && !this.to) {
        return (fromStr(this.from)) + " -> ANON";
      }
      if (!this.from) {
        return "DATA -> " + (toStr(this.to));
      }
      return (fromStr(this.from)) + " -> " + (toStr(this.to));
    };

    InternalSocket.prototype.legacyToIp = function(event, payload) {
      if (IP.isIP(payload)) {
        return payload;
      }
      switch (event) {
        case 'begingroup':
          return new IP('openBracket', payload);
        case 'endgroup':
          return new IP('closeBracket');
        case 'data':
          return new IP('data', payload);
        default:
          return null;
      }
    };

    InternalSocket.prototype.ipToLegacy = function(ip) {
      var legacy;
      switch (ip.type) {
        case 'openBracket':
          return legacy = {
            event: 'begingroup',
            payload: ip.data
          };
        case 'data':
          return legacy = {
            event: 'data',
            payload: ip.data
          };
        case 'closeBracket':
          return legacy = {
            event: 'endgroup',
            payload: ip.data
          };
      }
    };

    InternalSocket.prototype.handleSocketEvent = function(event, payload, autoConnect) {
      var ip, isIP, legacy;
      if (autoConnect == null) {
        autoConnect = true;
      }
      isIP = event === 'ip' && IP.isIP(payload);
      ip = isIP ? payload : this.legacyToIp(event, payload);
      if (!ip) {
        return;
      }
      if (!this.isConnected() && autoConnect && this.brackets.length === 0) {
        this.connect();
      }
      if (event === 'begingroup') {
        this.brackets.push(payload);
      }
      if (isIP && ip.type === 'openBracket') {
        this.brackets.push(ip.data);
      }
      if (event === 'endgroup') {
        if (this.brackets.length === 0) {
          return;
        }
        ip.data = this.brackets.pop();
        payload = ip.data;
      }
      if (isIP && payload.type === 'closeBracket') {
        if (this.brackets.length === 0) {
          return;
        }
        this.brackets.pop();
      }
      this.emitEvent('ip', ip);
      if (!(ip && ip.type)) {
        return;
      }
      if (isIP) {
        legacy = this.ipToLegacy(ip);
        event = legacy.event;
        payload = legacy.payload;
      }
      if (event === 'connect') {
        this.connected = true;
      }
      if (event === 'disconnect') {
        this.connected = false;
      }
      return this.emitEvent(event, payload);
    };

    return InternalSocket;

  })(EventEmitter);

  exports.InternalSocket = InternalSocket;

  exports.createSocket = function() {
    return new InternalSocket;
  };

}).call(this);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

exports.graph = __webpack_require__(47);
exports.Graph = exports.graph.Graph;

exports.journal = __webpack_require__(54);
exports.Journal = exports.journal.Journal;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * This file can be used for general library features of noflo-canvas.
 *
 * The library features can be made available as CommonJS modules that the
 * components in this project utilize.
 */
exports.canvas = __webpack_require__(211);


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var ComponentLoader, EventEmitter, fbpGraph, internalSocket, registerLoader,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  internalSocket = __webpack_require__(12);

  fbpGraph = __webpack_require__(13);

  EventEmitter = __webpack_require__(4).EventEmitter;

  registerLoader = __webpack_require__(55);

  ComponentLoader = (function(superClass) {
    extend(ComponentLoader, superClass);

    function ComponentLoader(baseDir, options) {
      this.baseDir = baseDir;
      this.options = options != null ? options : {};
      this.components = null;
      this.libraryIcons = {};
      this.processing = false;
      this.ready = false;
      if (typeof this.setMaxListeners === 'function') {
        this.setMaxListeners(0);
      }
    }

    ComponentLoader.prototype.getModulePrefix = function(name) {
      if (!name) {
        return '';
      }
      if (name === 'noflo') {
        return '';
      }
      if (name[0] === '@') {
        name = name.replace(/\@[a-z\-]+\//, '');
      }
      return name.replace('noflo-', '');
    };

    ComponentLoader.prototype.listComponents = function(callback) {
      if (this.processing) {
        this.once('ready', (function(_this) {
          return function() {
            return callback(null, _this.components);
          };
        })(this));
        return;
      }
      if (this.components) {
        return callback(null, this.components);
      }
      this.ready = false;
      this.processing = true;
      this.components = {};
      registerLoader.register(this, (function(_this) {
        return function(err) {
          if (err) {
            if (callback) {
              return callback(err);
            }
            throw err;
          }
          _this.processing = false;
          _this.ready = true;
          _this.emit('ready', true);
          if (callback) {
            return callback(null, _this.components);
          }
        };
      })(this));
    };

    ComponentLoader.prototype.load = function(name, callback, metadata) {
      var component, componentName;
      if (!this.ready) {
        this.listComponents((function(_this) {
          return function(err) {
            if (err) {
              return callback(err);
            }
            return _this.load(name, callback, metadata);
          };
        })(this));
        return;
      }
      component = this.components[name];
      if (!component) {
        for (componentName in this.components) {
          if (componentName.split('/')[1] === name) {
            component = this.components[componentName];
            break;
          }
        }
        if (!component) {
          callback(new Error("Component " + name + " not available with base " + this.baseDir));
          return;
        }
      }
      if (this.isGraph(component)) {
        if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
          process.nextTick((function(_this) {
            return function() {
              return _this.loadGraph(name, component, callback, metadata);
            };
          })(this));
        } else {
          setTimeout((function(_this) {
            return function() {
              return _this.loadGraph(name, component, callback, metadata);
            };
          })(this), 0);
        }
        return;
      }
      return this.createComponent(name, component, metadata, (function(_this) {
        return function(err, instance) {
          if (err) {
            return callback(err);
          }
          if (!instance) {
            callback(new Error("Component " + name + " could not be loaded."));
            return;
          }
          if (name === 'Graph') {
            instance.baseDir = _this.baseDir;
          }
          if (typeof name === 'string') {
            instance.componentName = name;
          }
          _this.setIcon(name, instance);
          return callback(null, instance);
        };
      })(this));
    };

    ComponentLoader.prototype.createComponent = function(name, component, metadata, callback) {
      var implementation, instance;
      implementation = component;
      if (!implementation) {
        return callback(new Error("Component " + name + " not available"));
      }
      if (typeof implementation === 'string') {
        if (typeof registerLoader.dynamicLoad === 'function') {
          registerLoader.dynamicLoad(name, implementation, metadata, callback);
          return;
        }
        return callback(Error("Dynamic loading of " + implementation + " for component " + name + " not available on this platform."));
      }
      if (typeof implementation.getComponent === 'function') {
        instance = implementation.getComponent(metadata);
      } else if (typeof implementation === 'function') {
        instance = implementation(metadata);
      } else {
        callback(new Error("Invalid type " + (typeof implementation) + " for component " + name + "."));
        return;
      }
      return callback(null, instance);
    };

    ComponentLoader.prototype.isGraph = function(cPath) {
      if (typeof cPath === 'object' && cPath instanceof fbpGraph.Graph) {
        return true;
      }
      if (typeof cPath === 'object' && cPath.processes && cPath.connections) {
        return true;
      }
      if (typeof cPath !== 'string') {
        return false;
      }
      return cPath.indexOf('.fbp') !== -1 || cPath.indexOf('.json') !== -1;
    };

    ComponentLoader.prototype.loadGraph = function(name, component, callback, metadata) {
      this.createComponent(name, this.components['Graph'], metadata, (function(_this) {
        return function(err, graph) {
          var graphSocket;
          if (err) {
            return callback(err);
          }
          graphSocket = internalSocket.createSocket();
          graph.loader = _this;
          graph.baseDir = _this.baseDir;
          graph.inPorts.remove('graph');
          graph.setGraph(component, function(err) {
            if (err) {
              return callback(err);
            }
            _this.setIcon(name, graph);
            return callback(null, graph);
          });
        };
      })(this));
    };

    ComponentLoader.prototype.setIcon = function(name, instance) {
      var componentName, library, ref;
      if (!instance.getIcon || instance.getIcon()) {
        return;
      }
      ref = name.split('/'), library = ref[0], componentName = ref[1];
      if (componentName && this.getLibraryIcon(library)) {
        instance.setIcon(this.getLibraryIcon(library));
        return;
      }
      if (instance.isSubgraph()) {
        instance.setIcon('sitemap');
        return;
      }
      instance.setIcon('square');
    };

    ComponentLoader.prototype.getLibraryIcon = function(prefix) {
      if (this.libraryIcons[prefix]) {
        return this.libraryIcons[prefix];
      }
      return null;
    };

    ComponentLoader.prototype.setLibraryIcon = function(prefix, icon) {
      return this.libraryIcons[prefix] = icon;
    };

    ComponentLoader.prototype.normalizeName = function(packageId, name) {
      var fullName, prefix;
      prefix = this.getModulePrefix(packageId);
      fullName = prefix + "/" + name;
      if (!packageId) {
        fullName = name;
      }
      return fullName;
    };

    ComponentLoader.prototype.registerComponent = function(packageId, name, cPath, callback) {
      var fullName;
      fullName = this.normalizeName(packageId, name);
      this.components[fullName] = cPath;
      if (callback) {
        return callback();
      }
    };

    ComponentLoader.prototype.registerGraph = function(packageId, name, gPath, callback) {
      return this.registerComponent(packageId, name, gPath, callback);
    };

    ComponentLoader.prototype.registerLoader = function(loader, callback) {
      return loader(this, callback);
    };

    ComponentLoader.prototype.setSource = function(packageId, name, source, language, callback) {
      if (!registerLoader.setSource) {
        return callback(new Error('setSource not allowed'));
      }
      if (!this.ready) {
        this.listComponents((function(_this) {
          return function(err) {
            if (err) {
              return callback(err);
            }
            return _this.setSource(packageId, name, source, language, callback);
          };
        })(this));
        return;
      }
      return registerLoader.setSource(this, packageId, name, source, language, callback);
    };

    ComponentLoader.prototype.getSource = function(name, callback) {
      if (!registerLoader.getSource) {
        return callback(new Error('getSource not allowed'));
      }
      if (!this.ready) {
        this.listComponents((function(_this) {
          return function(err) {
            if (err) {
              return callback(err);
            }
            return _this.getSource(name, callback);
          };
        })(this));
        return;
      }
      return registerLoader.getSource(this, name, callback);
    };

    ComponentLoader.prototype.clear = function() {
      this.components = null;
      this.ready = false;
      return this.processing = false;
    };

    return ComponentLoader;

  })(EventEmitter);

  exports.ComponentLoader = ComponentLoader;

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {

exports.sendGraph = function(graph, runtime, callback, main) {
  var edge, graphId, i, iip, j, k, len, len1, len2, node, priv, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6;
  if ((ref = graph.properties.environment) != null ? ref.type : void 0) {
    if ((ref1 = graph.properties.environment.type) !== 'all' && ref1 !== runtime.definition.type) {
      return callback(new Error("Graph type " + graph.properties.environment.type + " doesn't match runtime type " + runtime.definition.type));
    }
  }
  if (!runtime.canDo('protocol:graph')) {
    return callback(new Error('Runtime doesn\'t support graph protocol'));
  }
  graphId = graph.name || graph.properties.id;
  runtime.sendGraph('clear', {
    id: graphId,
    name: graph.name,
    main: main,
    library: graph.properties.project,
    icon: graph.properties.icon || '',
    description: graph.properties.description || ''
  });
  ref2 = graph.nodes;
  for (i = 0, len = ref2.length; i < len; i++) {
    node = ref2[i];
    runtime.sendGraph('addnode', {
      id: node.id,
      component: node.component,
      metadata: node.metadata,
      graph: graphId
    });
  }
  ref3 = graph.edges;
  for (j = 0, len1 = ref3.length; j < len1; j++) {
    edge = ref3[j];
    runtime.sendGraph('addedge', {
      src: {
        node: edge.from.node,
        port: edge.from.port
      },
      tgt: {
        node: edge.to.node,
        port: edge.to.port
      },
      metadata: edge.metadata,
      graph: graphId
    });
  }
  ref4 = graph.initializers;
  for (k = 0, len2 = ref4.length; k < len2; k++) {
    iip = ref4[k];
    runtime.sendGraph('addinitial', {
      src: {
        data: iip.from.data
      },
      tgt: {
        node: iip.to.node,
        port: iip.to.port
      },
      metadata: iip.metadata,
      graph: graphId
    });
  }
  if (graph.inports) {
    ref5 = graph.inports;
    for (pub in ref5) {
      priv = ref5[pub];
      runtime.sendGraph('addinport', {
        "public": pub,
        node: priv.process,
        port: priv.port,
        graph: graphId
      });
    }
  }
  if (graph.outports) {
    ref6 = graph.outports;
    for (pub in ref6) {
      priv = ref6[pub];
      runtime.sendGraph('addoutport', {
        "public": pub,
        node: priv.process,
        port: priv.port,
        graph: graphId
      });
    }
  }
  return callback();
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var debug = __webpack_require__(5)('fbp-protocol-client');
exports.transports = {
  'websocket': __webpack_require__(58),
  'iframe': __webpack_require__(62),
  'opener': __webpack_require__(63),
  'webrtc': __webpack_require__(64),
  'base': __webpack_require__(10)
};
exports.connection = __webpack_require__(65);

try {
  exports.transports.microflo = __webpack_require__(66);
} catch (e) {
  debug('MicroFlo transport unavailable: ' + e.message);
}

exports.getTransport = function (transport) {
  return exports.transports[transport];
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* This file is part of OWL JavaScript Utilities.

OWL JavaScript Utilities is free software: you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

OWL JavaScript Utilities is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public 
License along with OWL JavaScript Utilities.  If not, see 
<http://www.gnu.org/licenses/>.
*/

/*
  Hey, so, this deep copy is still the only attempt at a truly
  comprehensive approach, even years later. Kudos to the original
  author, one 'Oran Looney' (or, at least, that's what his blog
  sez'.

  All I did was lift it out of the closure wrapper to make it
  CommonJS requireable.
*/


function Clone() {}

// clone objects, skip other types.
function clone(target) {
  if ( typeof target == 'object' ) {
    Clone.prototype = target;
    return new Clone();
  } else {
    return target;
  }
}


// Shallow Copy 
function copy(target) {
  if (typeof target !== 'object' ) {
    return target;  // non-object have value sematics, so target is already a copy.
  } else {
    var value = target.valueOf();
    if (target != value) { 
      // the object is a standard object wrapper for a native type, say String.
      // we can make a copy by instantiating a new object around the value.
      return new target.constructor(value);
    } else {
      // ok, we have a normal object. If possible, we'll clone the original's prototype 
      // (not the original) to get an empty object with the same prototype chain as
      // the original.  If just copy the instance properties.  Otherwise, we have to 
      // copy the whole thing, property-by-property.
      if ( target instanceof target.constructor && target.constructor !== Object ) { 
	var c = clone(target.constructor.prototype);
	
	// give the copy all the instance properties of target.  It has the same
	// prototype as target, so inherited properties are already there.
	for ( var property in target) { 
	  if (target.hasOwnProperty(property)) {
	    c[property] = target[property];
	  } 
	}
      } else {
	var c = {};
	for ( var property in target ) c[property] = target[property];
      }
      
      return c;
    }
  }
}

// Deep Copy
var deepCopiers = [];

function DeepCopier(config) {
  for ( var key in config ) this[key] = config[key];
}
DeepCopier.prototype = {
  constructor: DeepCopier,
  
  // determines if this DeepCopier can handle the given object.
  canCopy: function(source) { return false; },
  
  // starts the deep copying process by creating the copy object.  You
  // can initialize any properties you want, but you can't call recursively
  // into the DeeopCopyAlgorithm.
  create: function(source) { },
  
  // Completes the deep copy of the source object by populating any properties
  // that need to be recursively deep copied.  You can do this by using the
  // provided deepCopyAlgorithm instance's deepCopy() method.  This will handle
  // cyclic references for objects already deepCopied, including the source object
  // itself.  The "result" passed in is the object returned from create().
  populate: function(deepCopyAlgorithm, source, result) {}
};

function DeepCopyAlgorithm() {
  // copiedObjects keeps track of objects already copied by this
  // deepCopy operation, so we can correctly handle cyclic references.
  this.copiedObjects = [];
  var thisPass = this;
  this.recursiveDeepCopy = function(source) {
    return thisPass.deepCopy(source);
  }
  this.depth = 0;
}
DeepCopyAlgorithm.prototype = {
  constructor: DeepCopyAlgorithm,
  
  maxDepth: 256,
  
  // add an object to the cache.  No attempt is made to filter duplicates;
  // we always check getCachedResult() before calling it.
  cacheResult: function(source, result) {
    this.copiedObjects.push([source, result]);
  },
  
  // Returns the cached copy of a given object, or undefined if it's an
  // object we haven't seen before.
  getCachedResult: function(source) {
    var copiedObjects = this.copiedObjects;
    var length = copiedObjects.length;
    for ( var i=0; i<length; i++ ) {
      if ( copiedObjects[i][0] === source ) {
	return copiedObjects[i][1];
      }
    }
    return undefined;
  },
  
  // deepCopy handles the simple cases itself: non-objects and object's we've seen before.
  // For complex cases, it first identifies an appropriate DeepCopier, then calls
  // applyDeepCopier() to delegate the details of copying the object to that DeepCopier.
  deepCopy: function(source) {
    // null is a special case: it's the only value of type 'object' without properties.
    if ( source === null ) return null;
    
    // All non-objects use value semantics and don't need explict copying.
    if ( typeof source !== 'object' ) return source;
    
    var cachedResult = this.getCachedResult(source);
    
    // we've already seen this object during this deep copy operation
    // so can immediately return the result.  This preserves the cyclic
    // reference structure and protects us from infinite recursion.
    if ( cachedResult ) return cachedResult;
    
    // objects may need special handling depending on their class.  There is
    // a class of handlers call "DeepCopiers"  that know how to copy certain
    // objects.  There is also a final, generic deep copier that can handle any object.
    for ( var i=0; i<deepCopiers.length; i++ ) {
      var deepCopier = deepCopiers[i];
      if ( deepCopier.canCopy(source) ) {
	return this.applyDeepCopier(deepCopier, source);
      }
    }
    // the generic copier can handle anything, so we should never reach this line.
    throw new Error("no DeepCopier is able to copy " + source);
  },
  
  // once we've identified which DeepCopier to use, we need to call it in a very
  // particular order: create, cache, populate.  This is the key to detecting cycles.
  // We also keep track of recursion depth when calling the potentially recursive
  // populate(): this is a fail-fast to prevent an infinite loop from consuming all
  // available memory and crashing or slowing down the browser.
  applyDeepCopier: function(deepCopier, source) {
    // Start by creating a stub object that represents the copy.
    var result = deepCopier.create(source);
    
    // we now know the deep copy of source should always be result, so if we encounter
    // source again during this deep copy we can immediately use result instead of
    // descending into it recursively.  
    this.cacheResult(source, result);
    
    // only DeepCopier::populate() can recursively deep copy.  So, to keep track
    // of recursion depth, we increment this shared counter before calling it,
    // and decrement it afterwards.
    this.depth++;
    if ( this.depth > this.maxDepth ) {
      throw new Error("Exceeded max recursion depth in deep copy.");
    }
    
    // It's now safe to let the deepCopier recursively deep copy its properties.
    deepCopier.populate(this.recursiveDeepCopy, source, result);
    
    this.depth--;
    
    return result;
  }
};

// entry point for deep copy.
//   source is the object to be deep copied.
//   maxDepth is an optional recursion limit. Defaults to 256.
function deepCopy(source, maxDepth) {
  var deepCopyAlgorithm = new DeepCopyAlgorithm();
  if ( maxDepth ) deepCopyAlgorithm.maxDepth = maxDepth;
  return deepCopyAlgorithm.deepCopy(source);
}

// publicly expose the DeepCopier class.
deepCopy.DeepCopier = DeepCopier;

// publicly expose the list of deepCopiers.
deepCopy.deepCopiers = deepCopiers;

// make deepCopy() extensible by allowing others to 
// register their own custom DeepCopiers.
deepCopy.register = function(deepCopier) {
  if ( !(deepCopier instanceof DeepCopier) ) {
    deepCopier = new DeepCopier(deepCopier);
  }
  deepCopiers.unshift(deepCopier);
}

// Generic Object copier
// the ultimate fallback DeepCopier, which tries to handle the generic case.  This
// should work for base Objects and many user-defined classes.
deepCopy.register({
  canCopy: function(source) { return true; },

  create: function(source) {
    if ( source.hasOwnProperty && source instanceof source.constructor ) {
      return clone(source.constructor.prototype);
    } else {
      return {};
    }
  },

  populate: function(deepCopy, source, result) {
    for ( var key in source ) {
      if ( source.hasOwnProperty && source.hasOwnProperty(key) ) {
    result[key] = deepCopy(source[key]);
      }
    }
    return result;
  }
});

// Array copier
deepCopy.register({
  canCopy: function(source) {
    return ( source instanceof Array );
  },
  
  create: function(source) {
    return new source.constructor();
  },
  
  populate: function(deepCopy, source, result) {
    for ( var i=0; i<source.length; i++) {
      result.push( deepCopy(source[i]) );
    }
    return result;
  }
});

// Date copier
deepCopy.register({
  canCopy: function(source) {
    return ( source instanceof Date );
  },
  
  create: function(source) {
    return new Date(source);
  }
});

// EventEmitter copier
// EventEmitters have a property which is an object, but doesn't 
// have an object prototype, so instanceof doesn't work on them
var EventEmitter = __webpack_require__(4).EventEmitter;
deepCopy.register({
  canCopy: function(source) { return source instanceof EventEmitter; },
  
  create: function(source) {
    if ( source.hasOwnProperty && source instanceof source.constructor ) {
      return clone(source.constructor.prototype);
    } else {
      return {};
    }
  },
  
  populate: function(deepCopy, source, result) {
    for ( var key in source ) {
      if ( !source.hasOwnProperty || source.hasOwnProperty(key) ) {
        result[key] = deepCopy(source[key]);
      }
    }
    return result;
  }
});

// HTML DOM Node

// utility function to detect Nodes.  In particular, we're looking
// for the cloneNode method.  The global document is also defined to
// be a Node, but is a special case in many ways.
function isNode(source) {
  return false; // LJF change here -- I don't care that I am breaking
  // this for the browser. at all.
  if ( window.Node ) {
    return source instanceof Node;
  } else {
    // the document is a special Node and doesn't have many of
    // the common properties so we use an identity check instead.
    if ( source === document ) return true;
    return (
      typeof source.nodeType === 'number' &&
	source.attributes &&
	source.childNodes &&
	source.cloneNode
    );
  }
}

// Node copier
deepCopy.register({
  canCopy: function(source) { return isNode(source); },
  
  create: function(source) {
    // there can only be one (document).
    if ( source === document ) return document;
    
    // start with a shallow copy.  We'll handle the deep copy of
    // its children ourselves.
    return source.cloneNode(false);
  },
  
  populate: function(deepCopy, source, result) {
    // we're not copying the global document, so don't have to populate it either.
    if ( source === document ) return document;
    
    // if this Node has children, deep copy them one-by-one.
    if ( source.childNodes && source.childNodes.length ) {
      for ( var i=0; i<source.childNodes.length; i++ ) {
	var childCopy = deepCopy(source.childNodes[i]);
	result.appendChild(childCopy);
      }
    }
  }
});

exports.DeepCopyAlgorithm = DeepCopyAlgorithm;
exports.copy = copy;
exports.clone = clone;
exports.deepCopy = deepCopy;



/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var EventEmitter, Port, platform,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = __webpack_require__(4).EventEmitter;

  platform = __webpack_require__(9);

  Port = (function(superClass) {
    extend(Port, superClass);

    Port.prototype.description = '';

    Port.prototype.required = true;

    function Port(type) {
      this.type = type;
      platform.deprecated('noflo.Port is deprecated. Please port to noflo.InPort/noflo.OutPort');
      if (!this.type) {
        this.type = 'all';
      }
      if (this.type === 'integer') {
        this.type = 'int';
      }
      this.sockets = [];
      this.from = null;
      this.node = null;
      this.name = null;
    }

    Port.prototype.getId = function() {
      if (!(this.node && this.name)) {
        return 'Port';
      }
      return this.node + " " + (this.name.toUpperCase());
    };

    Port.prototype.getDataType = function() {
      return this.type;
    };

    Port.prototype.getSchema = function() {
      return null;
    };

    Port.prototype.getDescription = function() {
      return this.description;
    };

    Port.prototype.attach = function(socket) {
      this.sockets.push(socket);
      return this.attachSocket(socket);
    };

    Port.prototype.attachSocket = function(socket, localId) {
      if (localId == null) {
        localId = null;
      }
      this.emit("attach", socket, localId);
      this.from = socket.from;
      if (socket.setMaxListeners) {
        socket.setMaxListeners(0);
      }
      socket.on("connect", (function(_this) {
        return function() {
          return _this.emit("connect", socket, localId);
        };
      })(this));
      socket.on("begingroup", (function(_this) {
        return function(group) {
          return _this.emit("begingroup", group, localId);
        };
      })(this));
      socket.on("data", (function(_this) {
        return function(data) {
          return _this.emit("data", data, localId);
        };
      })(this));
      socket.on("endgroup", (function(_this) {
        return function(group) {
          return _this.emit("endgroup", group, localId);
        };
      })(this));
      return socket.on("disconnect", (function(_this) {
        return function() {
          return _this.emit("disconnect", socket, localId);
        };
      })(this));
    };

    Port.prototype.connect = function() {
      var i, len, ref, results, socket;
      if (this.sockets.length === 0) {
        throw new Error((this.getId()) + ": No connections available");
      }
      ref = this.sockets;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        socket = ref[i];
        results.push(socket.connect());
      }
      return results;
    };

    Port.prototype.beginGroup = function(group) {
      if (this.sockets.length === 0) {
        throw new Error((this.getId()) + ": No connections available");
      }
      return this.sockets.forEach(function(socket) {
        if (socket.isConnected()) {
          return socket.beginGroup(group);
        }
        socket.once('connect', function() {
          return socket.beginGroup(group);
        });
        return socket.connect();
      });
    };

    Port.prototype.send = function(data) {
      if (this.sockets.length === 0) {
        throw new Error((this.getId()) + ": No connections available");
      }
      return this.sockets.forEach(function(socket) {
        if (socket.isConnected()) {
          return socket.send(data);
        }
        socket.once('connect', function() {
          return socket.send(data);
        });
        return socket.connect();
      });
    };

    Port.prototype.endGroup = function() {
      var i, len, ref, results, socket;
      if (this.sockets.length === 0) {
        throw new Error((this.getId()) + ": No connections available");
      }
      ref = this.sockets;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        socket = ref[i];
        results.push(socket.endGroup());
      }
      return results;
    };

    Port.prototype.disconnect = function() {
      var i, len, ref, results, socket;
      if (this.sockets.length === 0) {
        throw new Error((this.getId()) + ": No connections available");
      }
      ref = this.sockets;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        socket = ref[i];
        results.push(socket.disconnect());
      }
      return results;
    };

    Port.prototype.detach = function(socket) {
      var index;
      if (this.sockets.length === 0) {
        return;
      }
      if (!socket) {
        socket = this.sockets[0];
      }
      index = this.sockets.indexOf(socket);
      if (index === -1) {
        return;
      }
      if (this.isAddressable()) {
        this.sockets[index] = void 0;
        this.emit('detach', socket, index);
        return;
      }
      this.sockets.splice(index, 1);
      return this.emit("detach", socket);
    };

    Port.prototype.isConnected = function() {
      var connected;
      connected = false;
      this.sockets.forEach(function(socket) {
        if (socket.isConnected()) {
          return connected = true;
        }
      });
      return connected;
    };

    Port.prototype.isAddressable = function() {
      return false;
    };

    Port.prototype.isRequired = function() {
      return this.required;
    };

    Port.prototype.isAttached = function() {
      if (this.sockets.length > 0) {
        return true;
      }
      return false;
    };

    Port.prototype.listAttached = function() {
      var attached, i, idx, len, ref, socket;
      attached = [];
      ref = this.sockets;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        socket = ref[idx];
        if (!socket) {
          continue;
        }
        attached.push(idx);
      }
      return attached;
    };

    Port.prototype.canAttach = function() {
      return true;
    };

    Port.prototype.clear = function() {};

    return Port;

  })(EventEmitter);

  exports.Port = Port;

}).call(this);


/***/ }),
/* 21 */
/***/ (function(module, exports) {

(function() {
  var IP, StreamReceiver, StreamSender, Substream;

  IP = (function() {
    function IP(data1) {
      this.data = data1;
    }

    IP.prototype.sendTo = function(port) {
      return port.send(this.data);
    };

    IP.prototype.getValue = function() {
      return this.data;
    };

    IP.prototype.toObject = function() {
      return this.data;
    };

    return IP;

  })();

  exports.IP = IP;

  Substream = (function() {
    function Substream(key) {
      this.key = key;
      this.value = [];
    }

    Substream.prototype.push = function(value) {
      return this.value.push(value);
    };

    Substream.prototype.sendTo = function(port) {
      var i, ip, len, ref;
      port.beginGroup(this.key);
      ref = this.value;
      for (i = 0, len = ref.length; i < len; i++) {
        ip = ref[i];
        if (ip instanceof Substream || ip instanceof IP) {
          ip.sendTo(port);
        } else {
          port.send(ip);
        }
      }
      return port.endGroup(this.key);
    };

    Substream.prototype.getKey = function() {
      return this.key;
    };

    Substream.prototype.getValue = function() {
      var hasKeys, i, ip, len, obj, ref, res, val;
      switch (this.value.length) {
        case 0:
          return null;
        case 1:
          if (typeof this.value[0].getValue === 'function') {
            if (this.value[0] instanceof Substream) {
              obj = {};
              obj[this.value[0].key] = this.value[0].getValue();
              return obj;
            } else {
              return this.value[0].getValue();
            }
          } else {
            return this.value[0];
          }
          break;
        default:
          res = [];
          hasKeys = false;
          ref = this.value;
          for (i = 0, len = ref.length; i < len; i++) {
            ip = ref[i];
            val = typeof ip.getValue === 'function' ? ip.getValue() : ip;
            if (ip instanceof Substream) {
              obj = {};
              obj[ip.key] = ip.getValue();
              res.push(obj);
            } else {
              res.push(val);
            }
          }
          return res;
      }
    };

    Substream.prototype.toObject = function() {
      var obj;
      obj = {};
      obj[this.key] = this.getValue();
      return obj;
    };

    return Substream;

  })();

  exports.Substream = Substream;

  StreamSender = (function() {
    function StreamSender(port1, ordered) {
      this.port = port1;
      this.ordered = ordered != null ? ordered : false;
      this.q = [];
      this.resetCurrent();
      this.resolved = false;
    }

    StreamSender.prototype.resetCurrent = function() {
      this.level = 0;
      this.current = null;
      return this.stack = [];
    };

    StreamSender.prototype.beginGroup = function(group) {
      var stream;
      this.level++;
      stream = new Substream(group);
      this.stack.push(stream);
      this.current = stream;
      return this;
    };

    StreamSender.prototype.endGroup = function() {
      var parent, value;
      if (this.level > 0) {
        this.level--;
      }
      value = this.stack.pop();
      if (this.level === 0) {
        this.q.push(value);
        this.resetCurrent();
      } else {
        parent = this.stack[this.stack.length - 1];
        parent.push(value);
        this.current = parent;
      }
      return this;
    };

    StreamSender.prototype.send = function(data) {
      if (this.level === 0) {
        this.q.push(new IP(data));
      } else {
        this.current.push(new IP(data));
      }
      return this;
    };

    StreamSender.prototype.done = function() {
      if (this.ordered) {
        this.resolved = true;
      } else {
        this.flush();
      }
      return this;
    };

    StreamSender.prototype.disconnect = function() {
      this.q.push(null);
      return this;
    };

    StreamSender.prototype.flush = function() {
      var i, ip, len, ref, res;
      res = false;
      if (this.q.length > 0) {
        ref = this.q;
        for (i = 0, len = ref.length; i < len; i++) {
          ip = ref[i];
          if (ip === null) {
            if (this.port.isConnected()) {
              this.port.disconnect();
            }
          } else {
            ip.sendTo(this.port);
          }
        }
        res = true;
      }
      this.q = [];
      return res;
    };

    StreamSender.prototype.isAttached = function() {
      return this.port.isAttached();
    };

    return StreamSender;

  })();

  exports.StreamSender = StreamSender;

  StreamReceiver = (function() {
    function StreamReceiver(port1, buffered, process) {
      this.port = port1;
      this.buffered = buffered != null ? buffered : false;
      this.process = process != null ? process : null;
      this.q = [];
      this.resetCurrent();
      this.port.process = (function(_this) {
        return function(event, payload, index) {
          var stream;
          switch (event) {
            case 'connect':
              if (typeof _this.process === 'function') {
                return _this.process('connect', index);
              }
              break;
            case 'begingroup':
              _this.level++;
              stream = new Substream(payload);
              if (_this.level === 1) {
                _this.root = stream;
                _this.parent = null;
              } else {
                _this.parent = _this.current;
              }
              return _this.current = stream;
            case 'endgroup':
              if (_this.level > 0) {
                _this.level--;
              }
              if (_this.level === 0) {
                if (_this.buffered) {
                  _this.q.push(_this.root);
                  _this.process('readable', index);
                } else {
                  if (typeof _this.process === 'function') {
                    _this.process('data', _this.root, index);
                  }
                }
                return _this.resetCurrent();
              } else {
                _this.parent.push(_this.current);
                return _this.current = _this.parent;
              }
              break;
            case 'data':
              if (_this.level === 0) {
                return _this.q.push(new IP(payload));
              } else {
                return _this.current.push(new IP(payload));
              }
              break;
            case 'disconnect':
              if (typeof _this.process === 'function') {
                return _this.process('disconnect', index);
              }
          }
        };
      })(this);
    }

    StreamReceiver.prototype.resetCurrent = function() {
      this.level = 0;
      this.root = null;
      this.current = null;
      return this.parent = null;
    };

    StreamReceiver.prototype.read = function() {
      if (this.q.length === 0) {
        return void 0;
      }
      return this.q.shift();
    };

    return StreamReceiver;

  })();

  exports.StreamReceiver = StreamReceiver;

}).call(this);


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var clone = (function() {
'use strict';

function _instanceof(obj, type) {
  return type != null && obj instanceof type;
}

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (_instanceof(parent, nativeMap)) {
      child = new nativeMap();
    } else if (_instanceof(parent, nativeSet)) {
      child = new nativeSet();
    } else if (_instanceof(parent, nativePromise)) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      child = new Buffer(parent.length);
      parent.copy(child);
      return child;
    } else if (_instanceof(parent, Error)) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (_instanceof(parent, nativeMap)) {
      parent.forEach(function(value, key) {
        var keyChild = _clone(key, depth - 1);
        var valueChild = _clone(value, depth - 1);
        child.set(keyChild, valueChild);
      });
    }
    if (_instanceof(parent, nativeSet)) {
      parent.forEach(function(value) {
        var entryChild = _clone(value, depth - 1);
        child.add(entryChild);
      });
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).Buffer))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var EventEmitter, IP, Network, componentLoader, graph, internalSocket, platform, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  internalSocket = __webpack_require__(12);

  graph = __webpack_require__(13);

  EventEmitter = __webpack_require__(4).EventEmitter;

  platform = __webpack_require__(9);

  componentLoader = __webpack_require__(15);

  utils = __webpack_require__(38);

  IP = __webpack_require__(7);

  Network = (function(superClass) {
    extend(Network, superClass);

    Network.prototype.processes = {};

    Network.prototype.connections = [];

    Network.prototype.initials = [];

    Network.prototype.defaults = [];

    Network.prototype.graph = null;

    Network.prototype.startupDate = null;

    function Network(graph, options) {
      this.options = options != null ? options : {};
      this.processes = {};
      this.connections = [];
      this.initials = [];
      this.nextInitials = [];
      this.defaults = [];
      this.graph = graph;
      this.started = false;
      this.stopped = true;
      this.debug = true;
      this.eventBuffer = [];
      if (!platform.isBrowser()) {
        this.baseDir = graph.baseDir || process.cwd();
      } else {
        this.baseDir = graph.baseDir || '/';
      }
      this.startupDate = null;
      if (graph.componentLoader) {
        this.loader = graph.componentLoader;
      } else {
        this.loader = new componentLoader.ComponentLoader(this.baseDir, this.options);
      }
    }

    Network.prototype.uptime = function() {
      if (!this.startupDate) {
        return 0;
      }
      return new Date() - this.startupDate;
    };

    Network.prototype.getActiveProcesses = function() {
      var active, name, process, ref;
      active = [];
      if (!this.started) {
        return active;
      }
      ref = this.processes;
      for (name in ref) {
        process = ref[name];
        if (process.component.load > 0) {
          active.push(name);
        }
        if (process.component.__openConnections > 0) {
          active.push(name);
        }
      }
      return active;
    };

    Network.prototype.bufferedEmit = function(event, payload) {
      var ev, i, len, ref;
      if (event === 'error' || event === 'process-error' || event === 'end') {
        this.emit(event, payload);
        return;
      }
      if (!this.isStarted() && event !== 'end') {
        this.eventBuffer.push({
          type: event,
          payload: payload
        });
        return;
      }
      this.emit(event, payload);
      if (event === 'start') {
        ref = this.eventBuffer;
        for (i = 0, len = ref.length; i < len; i++) {
          ev = ref[i];
          this.emit(ev.type, ev.payload);
        }
        return this.eventBuffer = [];
      }
    };

    Network.prototype.load = function(component, metadata, callback) {
      return this.loader.load(component, callback, metadata);
    };

    Network.prototype.addNode = function(node, callback) {
      var process;
      if (this.processes[node.id]) {
        callback(null, this.processes[node.id]);
        return;
      }
      process = {
        id: node.id
      };
      if (!node.component) {
        this.processes[process.id] = process;
        callback(null, process);
        return;
      }
      return this.load(node.component, node.metadata, (function(_this) {
        return function(err, instance) {
          var inPorts, name, outPorts, port;
          if (err) {
            return callback(err);
          }
          instance.nodeId = node.id;
          process.component = instance;
          process.componentName = node.component;
          inPorts = process.component.inPorts.ports || process.component.inPorts;
          outPorts = process.component.outPorts.ports || process.component.outPorts;
          for (name in inPorts) {
            port = inPorts[name];
            port.node = node.id;
            port.nodeInstance = instance;
            port.name = name;
          }
          for (name in outPorts) {
            port = outPorts[name];
            port.node = node.id;
            port.nodeInstance = instance;
            port.name = name;
          }
          if (instance.isSubgraph()) {
            _this.subscribeSubgraph(process);
          }
          _this.subscribeNode(process);
          _this.processes[process.id] = process;
          return callback(null, process);
        };
      })(this));
    };

    Network.prototype.removeNode = function(node, callback) {
      if (!this.processes[node.id]) {
        return callback(new Error("Node " + node.id + " not found"));
      }
      return this.processes[node.id].component.shutdown((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          delete _this.processes[node.id];
          return callback(null);
        };
      })(this));
    };

    Network.prototype.renameNode = function(oldId, newId, callback) {
      var inPorts, name, outPorts, port, process;
      process = this.getNode(oldId);
      if (!process) {
        return callback(new Error("Process " + oldId + " not found"));
      }
      process.id = newId;
      inPorts = process.component.inPorts.ports || process.component.inPorts;
      outPorts = process.component.outPorts.ports || process.component.outPorts;
      for (name in inPorts) {
        port = inPorts[name];
        if (!port) {
          continue;
        }
        port.node = newId;
      }
      for (name in outPorts) {
        port = outPorts[name];
        if (!port) {
          continue;
        }
        port.node = newId;
      }
      this.processes[newId] = process;
      delete this.processes[oldId];
      return callback(null);
    };

    Network.prototype.getNode = function(id) {
      return this.processes[id];
    };

    Network.prototype.connect = function(done) {
      var callStack, edges, initializers, nodes, serialize, setDefaults, subscribeGraph;
      if (done == null) {
        done = function() {};
      }
      callStack = 0;
      serialize = (function(_this) {
        return function(next, add) {
          return function(type) {
            return _this["add" + type](add, function(err) {
              if (err) {
                return done(err);
              }
              callStack++;
              if (callStack % 100 === 0) {
                setTimeout(function() {
                  return next(type);
                }, 0);
                return;
              }
              return next(type);
            });
          };
        };
      })(this);
      subscribeGraph = (function(_this) {
        return function() {
          _this.subscribeGraph();
          return done();
        };
      })(this);
      setDefaults = utils.reduceRight(this.graph.nodes, serialize, subscribeGraph);
      initializers = utils.reduceRight(this.graph.initializers, serialize, function() {
        return setDefaults("Defaults");
      });
      edges = utils.reduceRight(this.graph.edges, serialize, function() {
        return initializers("Initial");
      });
      nodes = utils.reduceRight(this.graph.nodes, serialize, function() {
        return edges("Edge");
      });
      return nodes("Node");
    };

    Network.prototype.connectPort = function(socket, process, port, index, inbound, callback) {
      if (inbound) {
        socket.to = {
          process: process,
          port: port,
          index: index
        };
        if (!(process.component.inPorts && process.component.inPorts[port])) {
          callback(new Error("No inport '" + port + "' defined in process " + process.id + " (" + (socket.getId()) + ")"));
          return;
        }
        if (process.component.inPorts[port].isAddressable()) {
          process.component.inPorts[port].attach(socket, index);
          callback();
          return;
        }
        process.component.inPorts[port].attach(socket);
        callback();
        return;
      }
      socket.from = {
        process: process,
        port: port,
        index: index
      };
      if (!(process.component.outPorts && process.component.outPorts[port])) {
        callback(new Error("No outport '" + port + "' defined in process " + process.id + " (" + (socket.getId()) + ")"));
        return;
      }
      if (process.component.outPorts[port].isAddressable()) {
        process.component.outPorts[port].attach(socket, index);
        callback();
        return;
      }
      process.component.outPorts[port].attach(socket);
      callback();
    };

    Network.prototype.subscribeGraph = function() {
      var graphOps, processOps, processing, registerOp;
      graphOps = [];
      processing = false;
      registerOp = function(op, details) {
        return graphOps.push({
          op: op,
          details: details
        });
      };
      processOps = (function(_this) {
        return function(err) {
          var cb, op;
          if (err) {
            if (_this.listeners('process-error').length === 0) {
              throw err;
            }
            _this.bufferedEmit('process-error', err);
          }
          if (!graphOps.length) {
            processing = false;
            return;
          }
          processing = true;
          op = graphOps.shift();
          cb = processOps;
          switch (op.op) {
            case 'renameNode':
              return _this.renameNode(op.details.from, op.details.to, cb);
            default:
              return _this[op.op](op.details, cb);
          }
        };
      })(this);
      this.graph.on('addNode', function(node) {
        registerOp('addNode', node);
        if (!processing) {
          return processOps();
        }
      });
      this.graph.on('removeNode', function(node) {
        registerOp('removeNode', node);
        if (!processing) {
          return processOps();
        }
      });
      this.graph.on('renameNode', function(oldId, newId) {
        registerOp('renameNode', {
          from: oldId,
          to: newId
        });
        if (!processing) {
          return processOps();
        }
      });
      this.graph.on('addEdge', function(edge) {
        registerOp('addEdge', edge);
        if (!processing) {
          return processOps();
        }
      });
      this.graph.on('removeEdge', function(edge) {
        registerOp('removeEdge', edge);
        if (!processing) {
          return processOps();
        }
      });
      this.graph.on('addInitial', function(iip) {
        registerOp('addInitial', iip);
        if (!processing) {
          return processOps();
        }
      });
      return this.graph.on('removeInitial', function(iip) {
        registerOp('removeInitial', iip);
        if (!processing) {
          return processOps();
        }
      });
    };

    Network.prototype.subscribeSubgraph = function(node) {
      var emitSub;
      if (!node.component.isReady()) {
        node.component.once('ready', (function(_this) {
          return function() {
            return _this.subscribeSubgraph(node);
          };
        })(this));
        return;
      }
      if (!node.component.network) {
        return;
      }
      node.component.network.setDebug(this.debug);
      emitSub = (function(_this) {
        return function(type, data) {
          if (type === 'process-error' && _this.listeners('process-error').length === 0) {
            if (data.id && data.metadata && data.error) {
              throw data.error;
            }
            throw data;
          }
          if (!data) {
            data = {};
          }
          if (data.subgraph) {
            if (!data.subgraph.unshift) {
              data.subgraph = [data.subgraph];
            }
            data.subgraph = data.subgraph.unshift(node.id);
          } else {
            data.subgraph = [node.id];
          }
          return _this.bufferedEmit(type, data);
        };
      })(this);
      node.component.network.on('connect', function(data) {
        return emitSub('connect', data);
      });
      node.component.network.on('begingroup', function(data) {
        return emitSub('begingroup', data);
      });
      node.component.network.on('data', function(data) {
        return emitSub('data', data);
      });
      node.component.network.on('endgroup', function(data) {
        return emitSub('endgroup', data);
      });
      node.component.network.on('disconnect', function(data) {
        return emitSub('disconnect', data);
      });
      node.component.network.on('ip', function(data) {
        return emitSub('ip', data);
      });
      return node.component.network.on('process-error', function(data) {
        return emitSub('process-error', data);
      });
    };

    Network.prototype.subscribeSocket = function(socket, source) {
      socket.on('ip', (function(_this) {
        return function(ip) {
          return _this.bufferedEmit('ip', {
            id: socket.getId(),
            type: ip.type,
            socket: socket,
            data: ip.data,
            metadata: socket.metadata
          });
        };
      })(this));
      socket.on('connect', (function(_this) {
        return function() {
          if (source && source.component.isLegacy()) {
            if (!source.component.__openConnections) {
              source.component.__openConnections = 0;
            }
            source.component.__openConnections++;
          }
          return _this.bufferedEmit('connect', {
            id: socket.getId(),
            socket: socket,
            metadata: socket.metadata
          });
        };
      })(this));
      socket.on('begingroup', (function(_this) {
        return function(group) {
          return _this.bufferedEmit('begingroup', {
            id: socket.getId(),
            socket: socket,
            group: group,
            metadata: socket.metadata
          });
        };
      })(this));
      socket.on('data', (function(_this) {
        return function(data) {
          return _this.bufferedEmit('data', {
            id: socket.getId(),
            socket: socket,
            data: data,
            metadata: socket.metadata
          });
        };
      })(this));
      socket.on('endgroup', (function(_this) {
        return function(group) {
          return _this.bufferedEmit('endgroup', {
            id: socket.getId(),
            socket: socket,
            group: group,
            metadata: socket.metadata
          });
        };
      })(this));
      socket.on('disconnect', (function(_this) {
        return function() {
          _this.bufferedEmit('disconnect', {
            id: socket.getId(),
            socket: socket,
            metadata: socket.metadata
          });
          if (source && source.component.isLegacy()) {
            source.component.__openConnections--;
            if (source.component.__openConnections < 0) {
              source.component.__openConnections = 0;
            }
            if (source.component.__openConnections === 0) {
              return _this.checkIfFinished();
            }
          }
        };
      })(this));
      return socket.on('error', (function(_this) {
        return function(event) {
          if (_this.listeners('process-error').length === 0) {
            if (event.id && event.metadata && event.error) {
              throw event.error;
            }
            throw event;
          }
          return _this.bufferedEmit('process-error', event);
        };
      })(this));
    };

    Network.prototype.subscribeNode = function(node) {
      node.component.on('deactivate', (function(_this) {
        return function(load) {
          if (load > 0) {
            return;
          }
          return _this.checkIfFinished();
        };
      })(this));
      if (!node.component.getIcon) {
        return;
      }
      return node.component.on('icon', (function(_this) {
        return function() {
          return _this.bufferedEmit('icon', {
            id: node.id,
            icon: node.component.getIcon()
          });
        };
      })(this));
    };

    Network.prototype.addEdge = function(edge, callback) {
      var from, socket, to;
      socket = internalSocket.createSocket(edge.metadata);
      socket.setDebug(this.debug);
      from = this.getNode(edge.from.node);
      if (!from) {
        return callback(new Error("No process defined for outbound node " + edge.from.node));
      }
      if (!from.component) {
        return callback(new Error("No component defined for outbound node " + edge.from.node));
      }
      if (!from.component.isReady()) {
        from.component.once("ready", (function(_this) {
          return function() {
            return _this.addEdge(edge, callback);
          };
        })(this));
        return;
      }
      to = this.getNode(edge.to.node);
      if (!to) {
        return callback(new Error("No process defined for inbound node " + edge.to.node));
      }
      if (!to.component) {
        return callback(new Error("No component defined for inbound node " + edge.to.node));
      }
      if (!to.component.isReady()) {
        to.component.once("ready", (function(_this) {
          return function() {
            return _this.addEdge(edge, callback);
          };
        })(this));
        return;
      }
      this.subscribeSocket(socket, from);
      return this.connectPort(socket, to, edge.to.port, edge.to.index, true, (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return _this.connectPort(socket, from, edge.from.port, edge.from.index, false, function(err) {
            if (err) {
              return callback(err);
            }
            _this.connections.push(socket);
            return callback();
          });
        };
      })(this));
    };

    Network.prototype.removeEdge = function(edge, callback) {
      var connection, i, len, ref, results;
      ref = this.connections;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        connection = ref[i];
        if (!connection) {
          continue;
        }
        if (!(edge.to.node === connection.to.process.id && edge.to.port === connection.to.port)) {
          continue;
        }
        connection.to.process.component.inPorts[connection.to.port].detach(connection);
        if (edge.from.node) {
          if (connection.from && edge.from.node === connection.from.process.id && edge.from.port === connection.from.port) {
            connection.from.process.component.outPorts[connection.from.port].detach(connection);
          }
        }
        this.connections.splice(this.connections.indexOf(connection), 1);
        results.push(callback());
      }
      return results;
    };

    Network.prototype.addDefaults = function(node, callback) {
      var key, port, process, ref, socket;
      process = this.processes[node.id];
      if (!process.component.isReady()) {
        if (process.component.setMaxListeners) {
          process.component.setMaxListeners(0);
        }
        process.component.once("ready", (function(_this) {
          return function() {
            return _this.addDefaults(process, callback);
          };
        })(this));
        return;
      }
      ref = process.component.inPorts.ports;
      for (key in ref) {
        port = ref[key];
        if (typeof port.hasDefault === 'function' && port.hasDefault() && !port.isAttached()) {
          socket = internalSocket.createSocket();
          socket.setDebug(this.debug);
          this.subscribeSocket(socket);
          this.connectPort(socket, process, key, void 0, true, function() {});
          this.connections.push(socket);
          this.defaults.push(socket);
        }
      }
      return callback();
    };

    Network.prototype.addInitial = function(initializer, callback) {
      var socket, to;
      socket = internalSocket.createSocket(initializer.metadata);
      socket.setDebug(this.debug);
      this.subscribeSocket(socket);
      to = this.getNode(initializer.to.node);
      if (!to) {
        return callback(new Error("No process defined for inbound node " + initializer.to.node));
      }
      if (!(to.component.isReady() || to.component.inPorts[initializer.to.port])) {
        if (to.component.setMaxListeners) {
          to.component.setMaxListeners(0);
        }
        to.component.once("ready", (function(_this) {
          return function() {
            return _this.addInitial(initializer, callback);
          };
        })(this));
        return;
      }
      return this.connectPort(socket, to, initializer.to.port, initializer.to.index, true, (function(_this) {
        return function(err) {
          var init;
          if (err) {
            return callback(err);
          }
          _this.connections.push(socket);
          init = {
            socket: socket,
            data: initializer.from.data
          };
          _this.initials.push(init);
          _this.nextInitials.push(init);
          if (_this.isRunning()) {
            _this.sendInitials();
          } else if (!_this.isStopped()) {
            _this.setStarted(true);
            _this.sendInitials();
          }
          return callback();
        };
      })(this));
    };

    Network.prototype.removeInitial = function(initializer, callback) {
      var connection, i, init, j, k, len, len1, len2, ref, ref1, ref2;
      ref = this.connections;
      for (i = 0, len = ref.length; i < len; i++) {
        connection = ref[i];
        if (!connection) {
          continue;
        }
        if (!(initializer.to.node === connection.to.process.id && initializer.to.port === connection.to.port)) {
          continue;
        }
        connection.to.process.component.inPorts[connection.to.port].detach(connection);
        this.connections.splice(this.connections.indexOf(connection), 1);
        ref1 = this.initials;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          init = ref1[j];
          if (!init) {
            continue;
          }
          if (init.socket !== connection) {
            continue;
          }
          this.initials.splice(this.initials.indexOf(init), 1);
        }
        ref2 = this.nextInitials;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          init = ref2[k];
          if (!init) {
            continue;
          }
          if (init.socket !== connection) {
            continue;
          }
          this.nextInitials.splice(this.nextInitials.indexOf(init), 1);
        }
      }
      return callback();
    };

    Network.prototype.sendInitial = function(initial) {
      return initial.socket.post(new IP('data', initial.data, {
        initial: true
      }));
    };

    Network.prototype.sendInitials = function(callback) {
      var send;
      if (!callback) {
        callback = function() {};
      }
      send = (function(_this) {
        return function() {
          var i, initial, len, ref;
          ref = _this.initials;
          for (i = 0, len = ref.length; i < len; i++) {
            initial = ref[i];
            _this.sendInitial(initial);
          }
          _this.initials = [];
          return callback();
        };
      })(this);
      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
        return process.nextTick(send);
      } else {
        return setTimeout(send, 0);
      }
    };

    Network.prototype.isStarted = function() {
      return this.started;
    };

    Network.prototype.isStopped = function() {
      return this.stopped;
    };

    Network.prototype.isRunning = function() {
      if (!this.started) {
        return false;
      }
      return this.getActiveProcesses().length > 0;
    };

    Network.prototype.startComponents = function(callback) {
      var count, id, length, onProcessStart, process, ref, results;
      if (!callback) {
        callback = function() {};
      }
      count = 0;
      length = this.processes ? Object.keys(this.processes).length : 0;
      onProcessStart = function(err) {
        if (err) {
          return callback(err);
        }
        count++;
        if (count === length) {
          return callback();
        }
      };
      if (!(this.processes && Object.keys(this.processes).length)) {
        return callback();
      }
      ref = this.processes;
      results = [];
      for (id in ref) {
        process = ref[id];
        if (process.component.isStarted()) {
          onProcessStart();
          continue;
        }
        if (process.component.start.length === 0) {
          platform.deprecated('component.start method without callback is deprecated');
          process.component.start();
          onProcessStart();
          continue;
        }
        results.push(process.component.start(onProcessStart));
      }
      return results;
    };

    Network.prototype.sendDefaults = function(callback) {
      var i, len, ref, socket;
      if (!callback) {
        callback = function() {};
      }
      if (!this.defaults.length) {
        return callback();
      }
      ref = this.defaults;
      for (i = 0, len = ref.length; i < len; i++) {
        socket = ref[i];
        if (socket.to.process.component.inPorts[socket.to.port].sockets.length !== 1) {
          continue;
        }
        socket.connect();
        socket.send();
        socket.disconnect();
      }
      return callback();
    };

    Network.prototype.start = function(callback) {
      if (!callback) {
        platform.deprecated('Calling network.start() without callback is deprecated');
        callback = function() {};
      }
      if (this.debouncedEnd) {
        this.abortDebounce = true;
      }
      if (this.started) {
        this.stop((function(_this) {
          return function(err) {
            if (err) {
              return callback(err);
            }
            return _this.start(callback);
          };
        })(this));
        return;
      }
      this.initials = this.nextInitials.slice(0);
      this.eventBuffer = [];
      return this.startComponents((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return _this.sendInitials(function(err) {
            if (err) {
              return callback(err);
            }
            return _this.sendDefaults(function(err) {
              if (err) {
                return callback(err);
              }
              _this.setStarted(true);
              return callback(null);
            });
          });
        };
      })(this));
    };

    Network.prototype.stop = function(callback) {
      var connection, count, i, id, len, length, onProcessEnd, process, ref, ref1, results;
      if (!callback) {
        platform.deprecated('Calling network.stop() without callback is deprecated');
        callback = function() {};
      }
      if (this.debouncedEnd) {
        this.abortDebounce = true;
      }
      if (!this.started) {
        this.stopped = true;
        return callback(null);
      }
      ref = this.connections;
      for (i = 0, len = ref.length; i < len; i++) {
        connection = ref[i];
        if (!connection.isConnected()) {
          continue;
        }
        connection.disconnect();
      }
      count = 0;
      length = this.processes ? Object.keys(this.processes).length : 0;
      onProcessEnd = (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          count++;
          if (count === length) {
            _this.setStarted(false);
            _this.stopped = true;
            return callback();
          }
        };
      })(this);
      if (!(this.processes && Object.keys(this.processes).length)) {
        this.setStarted(false);
        this.stopped = true;
        return callback();
      }
      ref1 = this.processes;
      results = [];
      for (id in ref1) {
        process = ref1[id];
        if (!process.component.isStarted()) {
          onProcessEnd();
          continue;
        }
        if (process.component.shutdown.length === 0) {
          platform.deprecated('component.shutdown method without callback is deprecated');
          process.component.shutdown();
          onProcessEnd();
          continue;
        }
        results.push(process.component.shutdown(onProcessEnd));
      }
      return results;
    };

    Network.prototype.setStarted = function(started) {
      if (this.started === started) {
        return;
      }
      if (!started) {
        this.started = false;
        this.bufferedEmit('end', {
          start: this.startupDate,
          end: new Date,
          uptime: this.uptime()
        });
        return;
      }
      if (!this.startupDate) {
        this.startupDate = new Date;
      }
      this.started = true;
      this.stopped = false;
      return this.bufferedEmit('start', {
        start: this.startupDate
      });
    };

    Network.prototype.checkIfFinished = function() {
      if (this.isRunning()) {
        return;
      }
      delete this.abortDebounce;
      if (!this.debouncedEnd) {
        this.debouncedEnd = utils.debounce((function(_this) {
          return function() {
            if (_this.abortDebounce) {
              return;
            }
            if (_this.isRunning()) {
              return;
            }
            return _this.setStarted(false);
          };
        })(this), 50);
      }
      return this.debouncedEnd();
    };

    Network.prototype.getDebug = function() {
      return this.debug;
    };

    Network.prototype.setDebug = function(active) {
      var i, instance, len, process, processId, ref, ref1, results, socket;
      if (active === this.debug) {
        return;
      }
      this.debug = active;
      ref = this.connections;
      for (i = 0, len = ref.length; i < len; i++) {
        socket = ref[i];
        socket.setDebug(active);
      }
      ref1 = this.processes;
      results = [];
      for (processId in ref1) {
        process = ref1[processId];
        instance = process.component;
        if (instance.isSubgraph()) {
          results.push(instance.network.setDebug(active));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Network;

  })(EventEmitter);

  exports.Network = Network;

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var RemoteSubGraph, fs, getRuntimesBrowser, getRuntimesNode, loadBrowserPackage, noflo, path, registerComponent;

noflo = __webpack_require__(0);

RemoteSubGraph = __webpack_require__(25);

if (!noflo.isBrowser()) {
  path = __webpack_require__(18);
  fs = __webpack_require__(6);
}

registerComponent = function(loader, prefix, runtime) {
  var bound, name;
  bound = RemoteSubGraph.getComponentForRuntime(runtime, loader.baseDir);
  name = runtime.id;
  return loader.registerComponent(prefix, name, bound);
};

getRuntimesNode = function(baseDir, callback) {
  var packageFile;
  packageFile = path.resolve(baseDir, 'package.json');
  return fs.readFile(packageFile, 'utf-8', function(err, def) {
    var e, packageDef, ref, runtimes;
    if (err) {
      return callback(err);
    }
    try {
      packageDef = JSON.parse(def);
    } catch (error) {
      e = error;
      return callback(e);
    }
    runtimes = [];
    if (((ref = packageDef.noflo) != null ? ref.runtimes : void 0) != null) {
      runtimes = packageDef.noflo.runtimes;
    }
    return callback(null, runtimes);
  });
};

loadBrowserPackage = function(baseDir, callback) {
  var e, packageDef, packagePath, req;
  packagePath = baseDir + "/component.json";
  try {
    packageDef = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
    return callback(null, packageDef);
  } catch (error) {
    e = error;
    req = new XMLHttpRequest;
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status !== 200) {
        return callback(new Error("Failed to load " + packagePath + ": HTTP " + req.status));
      }
      return callback(null, JSON.parse(req.responseText));
    };
    req.open('GET', packagePath, true);
    return req.send();
  }
};

getRuntimesBrowser = function(baseDir, callback) {
  return loadBrowserPackage(baseDir, function(err, packageDef) {
    var ref, runtimes;
    if (err) {
      return callback(null, []);
    }
    runtimes = [];
    if (((ref = packageDef.noflo) != null ? ref.runtimes : void 0) != null) {
      runtimes = packageDef.noflo.runtimes;
    }
    return callback(null, runtimes);
  });
};

module.exports = function(loader, done) {
  var getRuntimes;
  getRuntimes = noflo.isBrowser() ? getRuntimesBrowser : getRuntimesNode;
  return getRuntimes(loader.baseDir, function(err, runtimes) {
    var i, len, prefix, runtime;
    if (err) {
      return done(err);
    }
    prefix = loader.getModulePrefix('runtime');
    for (i = 0, len = runtimes.length; i < len; i++) {
      runtime = runtimes[i];
      registerComponent(loader, prefix, runtime);
    }
    return done(null);
  });
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var RemoteSubGraph, connection, debug, fbpClient, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

noflo = __webpack_require__(0);

connection = __webpack_require__(16);

fbpClient = __webpack_require__(17);

debug = __webpack_require__(5)('noflo-runtime:remotesubgraph');

RemoteSubGraph = (function(superClass) {
  extend(RemoteSubGraph, superClass);

  function RemoteSubGraph(metadata) {
    if (!metadata) {
      metadata = {};
    }
    this.runtime = null;
    this.ready = false;
    this.graph = null;
    this.graphName = null;
    RemoteSubGraph.__super__.constructor.call(this);
  }

  RemoteSubGraph.prototype.isReady = function() {
    return this.ready;
  };

  RemoteSubGraph.prototype.setReady = function(ready) {
    debug(this.nodeId + " setting ready to " + ready);
    this.ready = ready;
    if (ready) {
      return this.emit('ready');
    }
  };

  RemoteSubGraph.prototype.setUp = function(callback) {
    this.runtime.start();
    return callback();
  };

  RemoteSubGraph.prototype.tearDown = function(callback) {
    this.runtime.stop();
    this.runtime.disconnect();
    return callback();
  };

  RemoteSubGraph.prototype.setDefinition = function(definition) {
    var Runtime, e;
    this.definition = definition;
    try {
      Runtime = fbpClient.getTransport(this.definition.protocol);
    } catch (error) {
      e = error;
      throw new Error(("'" + this.definition.protocol + "' protocol not supported: ") + e.message);
    }
    this.runtime = new Runtime(this.definition);
    this.description = definition.description || '';
    if (definition.icon) {
      this.setIcon(definition.icon);
    }
    this.runtime.on('runtime', (function(_this) {
      return function(msg) {
        if (msg.command === 'runtime') {
          _this.handleRuntime(definition, msg.payload);
        }
        if (msg.command === 'ports') {
          return _this.setupPorts(msg.payload);
        } else if (msg.command === 'packet') {
          return _this.onPacketReceived(msg.payload);
        }
      };
    })(this));
    this.runtime.on('error', function(err) {
      return console.error(err);
    });
    return this.runtime.connect();
  };

  RemoteSubGraph.prototype.handleRuntime = function(definition, payload) {
    if (indexOf.call(payload.capabilities, 'protocol:runtime') < 0) {
      throw new Error("runtime " + definition.id + " does not allow protocol:runtime");
    }
    if (payload.graph && payload.graph === definition.graph) {
      debug(this.nodeId + " runtime is already running desired graph " + payload.graph);
      this.graphName = payload.graph;
      this.graph = new noflo.Graph(payload.graph);
      this.runtime.setMain(this.graph);
      return;
    }
    if (!definition.graph) {
      return;
    }
    if (indexOf.call(payload.capabilities, 'protocol:graph') < 0) {
      throw new Error("runtime " + definition.id + " does not allow protocol:graph");
    }
    debug(this.nodeId + " sending graph " + definition.graph + " to runtime (had " + payload.graph + ")");
    return noflo.graph.loadFile(definition.graph, (function(_this) {
      return function(err, graph) {
        if (err) {
          throw err;
        }
        if (!graph.properties.id) {
          graph.properties.id = definition.graph;
        }
        return _this.setGraph(graph, function(err) {
          if (err) {
            throw err;
          }
        });
      };
    })(this));
  };

  RemoteSubGraph.prototype.setGraph = function(graph, callback) {
    this.graph = graph;
    this.graphName = graph.name || graph.properties.id;
    this.runtime.setMain(graph);
    return connection.sendGraph(graph, this.runtime, callback, true);
  };

  RemoteSubGraph.prototype.setupPorts = function(ports) {
    var exported, i, inportNames, j, len, len1, matching, metadata, outportNames, port, ref, ref1, ref2, ref3, ref4;
    if (((ref = this.definition) != null ? ref.graph : void 0) && !this.graph) {
      return;
    }
    if (this.graph) {
      ref1 = this.graph.inports;
      for (exported in ref1) {
        metadata = ref1[exported];
        matching = ports.inPorts.filter(function(port) {
          return port.id === exported;
        });
        if (!matching.length) {
          return;
        }
      }
      ref2 = this.graph.outports;
      for (exported in ref2) {
        metadata = ref2[exported];
        matching = ports.outPorts.filter(function(port) {
          return port.id === exported;
        });
        if (!matching.length) {
          return;
        }
      }
    }
    inportNames = ports.inPorts.map(function(p) {
      return p.id;
    });
    outportNames = ports.outPorts.map(function(p) {
      return p.id;
    });
    debug(this.nodeId + " received inports " + (inportNames.join(', ')));
    debug(this.nodeId + " received outports " + (outportNames.join(', ')));
    this.setReady(false);
    ref3 = ports.inPorts;
    for (i = 0, len = ref3.length; i < len; i++) {
      port = ref3[i];
      this.prepareInport(port);
    }
    ref4 = ports.outPorts;
    for (j = 0, len1 = ref4.length; j < len1; j++) {
      port = ref4[j];
      this.prepareOutport(port);
    }
    return this.setReady(true);
  };

  RemoteSubGraph.prototype.normalizePort = function(definition) {
    var def, type;
    type = definition.type || 'all';
    if (type === 'any') {
      type = 'all';
    }
    return def = {
      datatype: type,
      required: definition.required || false,
      addressable: definition.addressable || false
    };
  };

  RemoteSubGraph.prototype.prepareInport = function(definition) {
    var name;
    name = definition.id;
    if (this.inPorts.ports[name]) {
      return;
    }
    this.inPorts.add(name, this.normalizePort(definition));
    return this.inPorts.ports[name].on('ip', (function(_this) {
      return function(ip) {
        var event;
        switch (ip.type) {
          case 'data':
            event = 'data';
            break;
          case 'openBracket':
            event = 'begingroup';
            break;
          case 'closeBracket':
            event = 'endgroup';
        }
        return _this.runtime.sendRuntime('packet', {
          port: name,
          event: event,
          payload: ip.data,
          graph: _this.graphName
        });
      };
    })(this));
  };

  RemoteSubGraph.prototype.prepareOutport = function(definition) {
    var name, port;
    name = definition.id;
    return port = this.outPorts.add(name, this.normalizePort(definition));
  };

  RemoteSubGraph.prototype.onPacketReceived = function(packet) {
    var name, port;
    name = packet.port;
    port = this.outPorts[name];
    switch (packet.event) {
      case 'connect':
        return port.connect();
      case 'begingroup':
        return port.beginGroup(packet.payload);
      case 'data':
        return port.send(packet.payload);
      case 'endgroup':
        return port.endGroup(packet.payload);
      case 'disconnect':
        return port.disconnect();
    }
  };

  return RemoteSubGraph;

})(noflo.Component);

exports.RemoteSubGraph = RemoteSubGraph;

exports.getComponent = function(metadata) {
  return new RemoteSubGraph(metadata);
};

exports.getComponentForRuntime = function(runtime, baseDir) {
  return function(metadata) {
    var instance;
    instance = exports.getComponent(metadata);
    instance.baseDir = baseDir;
    instance.setDefinition(runtime);
    return instance;
  };
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var EventEmitter, NodeWebSocketClient, debug, isBrowser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isBrowser = function() {
    return !(typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1);
  };

  EventEmitter = __webpack_require__(4).EventEmitter;

  if (!isBrowser()) {
    debug = __webpack_require__(5)('fbp-protocol-client:platform');
    NodeWebSocketClient = (function(superClass) {
      extend(NodeWebSocketClient, superClass);

      function NodeWebSocketClient(address, protocol) {
        var WebSocketClient;
        WebSocketClient = __webpack_require__(59).client;
        this.client = new WebSocketClient;
        this.connection = null;
        this.client.on('connectFailed', (function(_this) {
          return function(error) {
            return _this.emit('error', error);
          };
        })(this));
        this.client.on('connect', (function(_this) {
          return function(connection) {
            if (_this.connection) {
              debug('WARNING: multiple connections for one NodeWebSocketClient');
            }
            _this.connection = connection;
            connection.on('error', function(error) {
              _this.connection = null;
              return _this.emit('error', error);
            });
            connection.on('close', function() {
              _this.connection = null;
              return _this.emit('close');
            });
            connection.on('message', function(message) {
              message.data = message.utf8Data;
              return _this.emit('message', message);
            });
            return _this.emit('open');
          };
        })(this));
        this.client.connect(address, protocol);
      }

      NodeWebSocketClient.prototype.addEventListener = function(event, listener, capture, wantsUntrusted) {
        return this.on(event, listener);
      };

      NodeWebSocketClient.prototype.close = function() {
        if (!this.connection) {
          return;
        }
        this.connection.close();
        return this.connection = null;
      };

      NodeWebSocketClient.prototype.send = function(msg) {
        return this.connection.sendUTF(msg);
      };

      return NodeWebSocketClient;

    })(EventEmitter);
  }

  module.exports = {
    isBrowser: isBrowser,
    EventEmitter: EventEmitter,
    WebSocket: isBrowser() ? window.WebSocket : NodeWebSocketClient
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(128);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(129);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(2)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
var rng;

var crypto = global.crypto || global.msCrypto; // for IE 11
if (crypto && crypto.getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 29 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 30 */
/***/ (function(module, exports) {

/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 */

// namespace ?
var jsfeat = jsfeat || { REVISION: 'ALPHA' };
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 */

(function(global) {
    "use strict";
    //

    // CONSTANTS
    var EPSILON = 0.0000001192092896;
    var FLT_MIN = 1E-37;

    // implementation from CCV project
    // currently working only with u8,s32,f32
    var U8_t = 0x0100,
        S32_t = 0x0200,
        F32_t = 0x0400,
        S64_t = 0x0800,
        F64_t = 0x1000;

    var C1_t = 0x01,
        C2_t = 0x02,
        C3_t = 0x03,
        C4_t = 0x04;

    var _data_type_size = new Int32Array([ -1, 1, 4, -1, 4, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8 ]);

    var get_data_type = (function () {
        return function(type) {
            return (type & 0xFF00);
        }
    })();

    var get_channel = (function () {
        return function(type) {
            return (type & 0xFF);
        }
    })();

    var get_data_type_size = (function () {
        return function(type) {
            return _data_type_size[(type & 0xFF00) >> 8];
        }
    })();

    // color conversion
    var COLOR_RGBA2GRAY = 0;
    var COLOR_RGB2GRAY = 1;
    var COLOR_BGRA2GRAY = 2;
    var COLOR_BGR2GRAY = 3;

    // box blur option
    var BOX_BLUR_NOSCALE = 0x01;
    // svd options
    var SVD_U_T = 0x01;
    var SVD_V_T = 0x02;

    var data_t = (function () {
        function data_t(size_in_bytes, buffer) {
            // we need align size to multiple of 8
            this.size = ((size_in_bytes + 7) | 0) & -8;
            if (typeof buffer === "undefined") { 
                this.buffer = new ArrayBuffer(this.size);
            } else {
                this.buffer = buffer;
                this.size = buffer.length;
            }
            this.u8 = new Uint8Array(this.buffer);
            this.i32 = new Int32Array(this.buffer);
            this.f32 = new Float32Array(this.buffer);
            this.f64 = new Float64Array(this.buffer);
        }
        return data_t;
    })();

    var matrix_t = (function () {
        // columns, rows, data_type
        function matrix_t(c, r, data_type, data_buffer) {
            this.type = get_data_type(data_type)|0;
            this.channel = get_channel(data_type)|0;
            this.cols = c|0;
            this.rows = r|0;
            if (typeof data_buffer === "undefined") { 
                this.allocate();
            } else {
                this.buffer = data_buffer;
                // data user asked for
                this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));
            }
        }
        matrix_t.prototype.allocate = function() {
            // clear references
            delete this.data;
            delete this.buffer;
            //
            this.buffer = new data_t((this.cols * get_data_type_size(this.type) * this.channel) * this.rows);
            this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));
        }
        matrix_t.prototype.copy_to = function(other) {
            var od = other.data, td = this.data;
            var i = 0, n = (this.cols*this.rows*this.channel)|0;
            for(; i < n-4; i+=4) {
                od[i] = td[i];
                od[i+1] = td[i+1];
                od[i+2] = td[i+2];
                od[i+3] = td[i+3];
            }
            for(; i < n; ++i) {
                od[i] = td[i];
            }
        }
        matrix_t.prototype.resize = function(c, r, ch) {
            if (typeof ch === "undefined") { ch = this.channel; }
            // relocate buffer only if new size doesnt fit
            var new_size = (c * get_data_type_size(this.type) * ch) * r;
            if(new_size > this.buffer.size) {
                this.cols = c;
                this.rows = r;
                this.channel = ch;
                this.allocate();
            } else {
                this.cols = c;
                this.rows = r;
                this.channel = ch;
            }
        }

        return matrix_t;
    })();

    var pyramid_t = (function () {

        function pyramid_t(levels) {
            this.levels = levels|0;
            this.data = new Array(levels);
            this.pyrdown = jsfeat.imgproc.pyrdown;
        }

        pyramid_t.prototype.allocate = function(start_w, start_h, data_type) {
            var i = this.levels;
            while(--i >= 0) {
                this.data[i] = new matrix_t(start_w >> i, start_h >> i, data_type);
            }
        }

        pyramid_t.prototype.build = function(input, skip_first_level) {
            if (typeof skip_first_level === "undefined") { skip_first_level = true; }
            // just copy data to first level
            var i = 2, a = input, b = this.data[0];
            if(!skip_first_level) {
                var j=input.cols*input.rows;
                while(--j >= 0) {
                    b.data[j] = input.data[j];
                }
            }
            b = this.data[1];
            this.pyrdown(a, b);
            for(; i < this.levels; ++i) {
                a = b;
                b = this.data[i];
                this.pyrdown(a, b);
            }
        }

        return pyramid_t;
    })();

    var keypoint_t = (function () {
        function keypoint_t(x,y,score,level,angle) {
            if (typeof x === "undefined") { x=0; }
            if (typeof y === "undefined") { y=0; }
            if (typeof score === "undefined") { score=0; }
            if (typeof level === "undefined") { level=0; }
            if (typeof angle === "undefined") { angle=-1.0; }

            this.x = x;
            this.y = y;
            this.score = score;
            this.level = level;
            this.angle = angle;
        }
        return keypoint_t;
    })();


    // data types
    global.U8_t = U8_t;
    global.S32_t = S32_t;
    global.F32_t = F32_t;
    global.S64_t = S64_t;
    global.F64_t = F64_t;
    // data channels
    global.C1_t = C1_t;
    global.C2_t = C2_t;
    global.C3_t = C3_t;
    global.C4_t = C4_t;

    // popular formats
    global.U8C1_t = U8_t | C1_t;
    global.U8C3_t = U8_t | C3_t;
    global.U8C4_t = U8_t | C4_t;

    global.F32C1_t = F32_t | C1_t;
    global.F32C2_t = F32_t | C2_t;
    global.S32C1_t = S32_t | C1_t;
    global.S32C2_t = S32_t | C2_t;

    // constants
    global.EPSILON = EPSILON;
    global.FLT_MIN = FLT_MIN;

    // color convert
    global.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;
    global.COLOR_RGB2GRAY = COLOR_RGB2GRAY;
    global.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;
    global.COLOR_BGR2GRAY = COLOR_BGR2GRAY;

    // options
    global.BOX_BLUR_NOSCALE = BOX_BLUR_NOSCALE;
    global.SVD_U_T = SVD_U_T;
    global.SVD_V_T = SVD_V_T;

    global.get_data_type = get_data_type;
    global.get_channel = get_channel;
    global.get_data_type_size = get_data_type_size;

    global.data_t = data_t;
    global.matrix_t = matrix_t;
    global.pyramid_t = pyramid_t;
    global.keypoint_t = keypoint_t;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 */

(function(global) {
    "use strict";
    //

    var cache = (function() {

        // very primitive array cache, still need testing if it helps
        // of course V8 has its own powerful cache sys but i'm not sure
        // it caches several multichannel 640x480 buffer creations each frame

        var _pool_node_t = (function () {
            function _pool_node_t(size_in_bytes) {
                this.next = null;
                this.data = new jsfeat.data_t(size_in_bytes);
                this.size = this.data.size;
                this.buffer = this.data.buffer;
                this.u8 = this.data.u8;
                this.i32 = this.data.i32;
                this.f32 = this.data.f32;
                this.f64 = this.data.f64;
            }
            _pool_node_t.prototype.resize = function(size_in_bytes) {
                delete this.data;
                this.data = new jsfeat.data_t(size_in_bytes);
                this.size = this.data.size;
                this.buffer = this.data.buffer;
                this.u8 = this.data.u8;
                this.i32 = this.data.i32;
                this.f32 = this.data.f32;
                this.f64 = this.data.f64;
            }
            return _pool_node_t;
        })();

        var _pool_head, _pool_tail;
        var _pool_size = 0;

        return {

            allocate: function(capacity, data_size) {
                _pool_head = _pool_tail = new _pool_node_t(data_size);
                for (var i = 0; i < capacity; ++i) {
                    var node = new _pool_node_t(data_size);
                    _pool_tail = _pool_tail.next = node;

                    _pool_size++;
                }
            },

            get_buffer: function(size_in_bytes) {
                // assume we have enough free nodes
                var node = _pool_head;
                _pool_head = _pool_head.next;
                _pool_size--;

                if(size_in_bytes > node.size) {
                    node.resize(size_in_bytes);
                }

                return node;
            },

            put_buffer: function(node) {
                _pool_tail = _pool_tail.next = node;
                _pool_size++;
            }
        };
    })();

    global.cache = cache;
    // for now we dont need more than 30 buffers
    // if having cache sys really helps we can add auto extending sys
    cache.allocate(30, 640*4);

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 */

(function(global) {
    "use strict";
    //

    var math = (function() {

        var qsort_stack = new Int32Array(48*2);

        return {
            get_gaussian_kernel: function(size, sigma, kernel, data_type) {
                var i=0,x=0.0,t=0.0,sigma_x=0.0,scale_2x=0.0;
                var sum = 0.0;
                var kern_node = jsfeat.cache.get_buffer(size<<2);
                var _kernel = kern_node.f32;//new Float32Array(size);

                if((size&1) == 1 && size <= 7 && sigma <= 0) {
                    switch(size>>1) {
                        case 0:
                        _kernel[0] = 1.0;
                        sum = 1.0;
                        break;
                        case 1:
                        _kernel[0] = 0.25, _kernel[1] = 0.5, _kernel[2] = 0.25;
                        sum = 0.25+0.5+0.25;
                        break;
                        case 2:
                        _kernel[0] = 0.0625, _kernel[1] = 0.25, _kernel[2] = 0.375, 
                        _kernel[3] = 0.25, _kernel[4] = 0.0625;
                        sum = 0.0625+0.25+0.375+0.25+0.0625;
                        break;
                        case 3:
                        _kernel[0] = 0.03125, _kernel[1] = 0.109375, _kernel[2] = 0.21875, 
                        _kernel[3] = 0.28125, _kernel[4] = 0.21875, _kernel[5] = 0.109375, _kernel[6] = 0.03125;
                        sum = 0.03125+0.109375+0.21875+0.28125+0.21875+0.109375+0.03125;
                        break;
                    }
                } else {
                    sigma_x = sigma > 0 ? sigma : ((size-1)*0.5 - 1.0)*0.3 + 0.8;
                    scale_2x = -0.5/(sigma_x*sigma_x);

                    for( ; i < size; ++i )
                    {
                        x = i - (size-1)*0.5;
                        t = Math.exp(scale_2x*x*x);

                        _kernel[i] = t;
                        sum += t;
                    }
                }

                if(data_type & jsfeat.U8_t) {
                    // int based kernel
                    sum = 256.0/sum;
                    for (i = 0; i < size; ++i) {
                        kernel[i] = (_kernel[i] * sum + 0.5)|0;
                    }
                } else {
                    // classic kernel
                    sum = 1.0/sum;
                    for (i = 0; i < size; ++i) {
                        kernel[i] = _kernel[i] * sum;
                    }
                }

                jsfeat.cache.put_buffer(kern_node);
            },

            // model is 3x3 matrix_t
            perspective_4point_transform: function(model, src_x0, src_y0, dst_x0, dst_y0,
                                                        src_x1, src_y1, dst_x1, dst_y1,
                                                        src_x2, src_y2, dst_x2, dst_y2,
                                                        src_x3, src_y3, dst_x3, dst_y3) {
                var t1 = src_x0;
                var t2 = src_x2;
                var t4 = src_y1;
                var t5 = t1 * t2 * t4;
                var t6 = src_y3;
                var t7 = t1 * t6;
                var t8 = t2 * t7;
                var t9 = src_y2;
                var t10 = t1 * t9;
                var t11 = src_x1;
                var t14 = src_y0;
                var t15 = src_x3;
                var t16 = t14 * t15;
                var t18 = t16 * t11;
                var t20 = t15 * t11 * t9;
                var t21 = t15 * t4;
                var t24 = t15 * t9;
                var t25 = t2 * t4;
                var t26 = t6 * t2;
                var t27 = t6 * t11;
                var t28 = t9 * t11;
                var t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);
                var t32 = t1 * t15;
                var t35 = t14 * t11;
                var t41 = t4 * t1;
                var t42 = t6 * t41;
                var t43 = t14 * t2;
                var t46 = t16 * t9;
                var t48 = t14 * t9 * t11;
                var t51 = t4 * t6 * t2;
                var t55 = t6 * t14;
                var Hr0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;
                var Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;
                var Hr2 = t1;
                var Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;
                var Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;
                var Hr5 = t14;
                var Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;
                var Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;
                
                t1 = dst_x0;
                t2 = dst_x2;
                t4 = dst_y1;
                t5 = t1 * t2 * t4;
                t6 = dst_y3;
                t7 = t1 * t6;
                t8 = t2 * t7;
                t9 = dst_y2;
                t10 = t1 * t9;
                t11 = dst_x1;
                t14 = dst_y0;
                t15 = dst_x3;
                t16 = t14 * t15;
                t18 = t16 * t11;
                t20 = t15 * t11 * t9;
                t21 = t15 * t4;
                t24 = t15 * t9;
                t25 = t2 * t4;
                t26 = t6 * t2;
                t27 = t6 * t11;
                t28 = t9 * t11;
                t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);
                t32 = t1 * t15;
                t35 = t14 * t11;
                t41 = t4 * t1;
                t42 = t6 * t41;
                t43 = t14 * t2;
                t46 = t16 * t9;
                t48 = t14 * t9 * t11;
                t51 = t4 * t6 * t2;
                t55 = t6 * t14;
                var Hl0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;
                var Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;
                var Hl2 = t1;
                var Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;
                var Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;
                var Hl5 = t14;
                var Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;
                var Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;

                // the following code computes R = Hl * inverse Hr
                t2 = Hr4-Hr7*Hr5;
                t4 = Hr0*Hr4;
                t5 = Hr0*Hr5;
                t7 = Hr3*Hr1;
                t8 = Hr2*Hr3;
                t10 = Hr1*Hr6;
                var t12 = Hr2*Hr6;
                t15 = 1.0 / (t4-t5*Hr7-t7+t8*Hr7+t10*Hr5-t12*Hr4);
                t18 = -Hr3+Hr5*Hr6;
                var t23 = -Hr3*Hr7+Hr4*Hr6;
                t28 = -Hr1+Hr2*Hr7;
                var t31 = Hr0-t12;
                t35 = Hr0*Hr7-t10;
                t41 = -Hr1*Hr5+Hr2*Hr4;
                var t44 = t5-t8;
                var t47 = t4-t7;
                t48 = t2*t15;
                var t49 = t28*t15;
                var t50 = t41*t15;
                var mat = model.data;
                mat[0] = Hl0*t48+Hl1*(t18*t15)-Hl2*(t23*t15);
                mat[1] = Hl0*t49+Hl1*(t31*t15)-Hl2*(t35*t15);
                mat[2] = -Hl0*t50-Hl1*(t44*t15)+Hl2*(t47*t15);
                mat[3] = Hl3*t48+Hl4*(t18*t15)-Hl5*(t23*t15);
                mat[4] = Hl3*t49+Hl4*(t31*t15)-Hl5*(t35*t15);
                mat[5] = -Hl3*t50-Hl4*(t44*t15)+Hl5*(t47*t15);
                mat[6] = Hl6*t48+Hl7*(t18*t15)-t23*t15;
                mat[7] = Hl6*t49+Hl7*(t31*t15)-t35*t15;
                mat[8] = -Hl6*t50-Hl7*(t44*t15)+t47*t15;
            },

            // The current implementation was derived from *BSD system qsort():
            // Copyright (c) 1992, 1993
            // The Regents of the University of California.  All rights reserved.
            qsort: function(array, low, high, cmp) {
                var isort_thresh = 7;
                var t,ta,tb,tc;
                var sp = 0,left=0,right=0,i=0,n=0,m=0,ptr=0,ptr2=0,d=0;
                var left0=0,left1=0,right0=0,right1=0,pivot=0,a=0,b=0,c=0,swap_cnt=0;

                var stack = qsort_stack;

                if( (high-low+1) <= 1 ) return;

                stack[0] = low;
                stack[1] = high;

                while( sp >= 0 ) {
                
                    left = stack[sp<<1];
                    right = stack[(sp<<1)+1];
                    sp--;

                    for(;;) {
                        n = (right - left) + 1;

                        if( n <= isort_thresh ) {
                        //insert_sort:
                            for( ptr = left + 1; ptr <= right; ptr++ ) {
                                for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {
                                    t = array[ptr2];
                                    array[ptr2] = array[ptr2-1];
                                    array[ptr2-1] = t;
                                }
                            }
                            break;
                        } else {
                            swap_cnt = 0;

                            left0 = left;
                            right0 = right;
                            pivot = left + (n>>1);

                            if( n > 40 ) {
                                d = n >> 3;
                                a = left, b = left + d, c = left + (d<<1);
                                ta = array[a],tb = array[b],tc = array[c];
                                left = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))
                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));

                                a = pivot - d, b = pivot, c = pivot + d;
                                ta = array[a],tb = array[b],tc = array[c];
                                pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))
                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));

                                a = right - (d<<1), b = right - d, c = right;
                                ta = array[a],tb = array[b],tc = array[c];
                                right = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))
                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));
                            }

                            a = left, b = pivot, c = right;
                            ta = array[a],tb = array[b],tc = array[c];
                            pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))   
                                               : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));
                            if( pivot != left0 ) {
                                t = array[pivot];
                                array[pivot] = array[left0];
                                array[left0] = t;
                                pivot = left0;
                            }
                            left = left1 = left0 + 1;
                            right = right1 = right0;

                            ta = array[pivot];
                            for(;;) {
                                while( left <= right && !cmp(ta, array[left]) ) {
                                    if( !cmp(array[left], ta) ) {
                                        if( left > left1 ) {
                                            t = array[left1];
                                            array[left1] = array[left];
                                            array[left] = t;
                                        }
                                        swap_cnt = 1;
                                        left1++;
                                    }
                                    left++;
                                }

                                while( left <= right && !cmp(array[right], ta) ) {
                                    if( !cmp(ta, array[right]) ) {
                                        if( right < right1 ) {
                                            t = array[right1];
                                            array[right1] = array[right];
                                            array[right] = t;
                                        }
                                        swap_cnt = 1;
                                        right1--;
                                    }
                                    right--;
                                }

                                if( left > right ) break;
                                
                                t = array[left];
                                array[left] = array[right];
                                array[right] = t;
                                swap_cnt = 1;
                                left++;
                                right--;
                            }

                            if( swap_cnt == 0 ) {
                                left = left0, right = right0;
                                //goto insert_sort;
                                for( ptr = left + 1; ptr <= right; ptr++ ) {
                                    for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {
                                        t = array[ptr2];
                                        array[ptr2] = array[ptr2-1];
                                        array[ptr2-1] = t;
                                    }
                                }
                                break;
                            }

                            n = Math.min( (left1 - left0), (left - left1) );
                            m = (left-n)|0;
                            for( i = 0; i < n; ++i,++m ) {
                                t = array[left0+i];
                                array[left0+i] = array[m];
                                array[m] = t;
                            }

                            n = Math.min( (right0 - right1), (right1 - right) );
                            m = (right0-n+1)|0;
                            for( i = 0; i < n; ++i,++m ) {
                                t = array[left+i];
                                array[left+i] = array[m];
                                array[m] = t;
                            }
                            n = (left - left1);
                            m = (right1 - right);
                            if( n > 1 ) {
                                if( m > 1 ) {
                                    if( n > m ) {
                                        ++sp;
                                        stack[sp<<1] = left0;
                                        stack[(sp<<1)+1] = left0 + n - 1;
                                        left = right0 - m + 1, right = right0;
                                    } else {
                                        ++sp;
                                        stack[sp<<1] = right0 - m + 1;
                                        stack[(sp<<1)+1] = right0;
                                        left = left0, right = left0 + n - 1;
                                    }
                                } else {
                                    left = left0, right = left0 + n - 1;
                                }
                            }
                            else if( m > 1 )
                                left = right0 - m + 1, right = right0;
                            else
                                break;
                        }
                    }
                }
            },

            median: function(array, low, high) {
                var w;
                var middle=0,ll=0,hh=0,median=(low+high)>>1;
                for (;;) {
                    if (high <= low) return array[median];
                    if (high == (low + 1)) {
                        if (array[low] > array[high]) {
                            w = array[low];
                            array[low] = array[high];
                            array[high] = w;
                        }
                        return array[median];
                    }
                    middle = ((low + high) >> 1);
                    if (array[middle] > array[high]) {
                        w = array[middle];
                        array[middle] = array[high];
                        array[high] = w;
                    }
                    if (array[low] > array[high]) {
                        w = array[low];
                        array[low] = array[high];
                        array[high] = w;
                    }
                    if (array[middle] > array[low]) {
                        w = array[middle];
                        array[middle] = array[low];
                        array[low] = w;
                    }
                    ll = (low + 1);
                    w = array[middle];
                    array[middle] = array[ll];
                    array[ll] = w;
                    hh = high;
                    for (;;) {
                        do ++ll; while (array[low] > array[ll]);
                        do --hh; while (array[hh] > array[low]);
                        if (hh < ll) break;
                        w = array[ll];
                        array[ll] = array[hh];
                        array[hh] = w;
                    }
                    w = array[low];
                    array[low] = array[hh];
                    array[hh] = w;
                    if (hh <= median)
                        low = ll;
                    else if (hh >= median)
                        high = (hh - 1);
                }
                return 0;
            }
        };

    })();

    global.math = math;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 */

(function(global) {
    "use strict";
    //

    var matmath = (function() {
        
        return {
            identity: function(M, value) {
                if (typeof value === "undefined") { value=1; }
                var src=M.data;
                var rows=M.rows, cols=M.cols, cols_1=(cols+1)|0;
                var len = rows * cols;
                var k = len;
                while(--len >= 0) src[len] = 0.0;
                len = k;
                k = 0;
                while(k < len)  {
                    src[k] = value;
                    k = k + cols_1;
                }
            },

            transpose: function(At, A) {
                var i=0,j=0,nrows=A.rows,ncols=A.cols;
                var Ai=0,Ati=0,pAt=0;
                var ad=A.data,atd=At.data;

                for (; i < nrows; Ati += 1, Ai += ncols, i++) {
                    pAt = Ati;
                    for (j = 0; j < ncols; pAt += nrows, j++) atd[pAt] = ad[Ai+j];
                }
            },

            // C = A * B
            multiply: function(C, A, B) {
                var i=0,j=0,k=0;
                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;
                var ncols=A.cols,nrows=A.rows,mcols=B.cols;
                var ad=A.data,bd=B.data,cd=C.data;
                var sum=0.0;

                for (; i < nrows; Ap += ncols, i++) {
                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {
                        pB = p_B;
                        pA = Ap;
                        sum = 0.0;
                        for (k = 0; k < ncols; pA++, pB += mcols, k++) {
                            sum += ad[pA] * bd[pB];
                        }
                        cd[Cp] = sum;
                    }
                }
            },

            // C = A * B'
            multiply_ABt: function(C, A, B) {
                var i=0,j=0,k=0;
                var Ap=0,pA=0,pB=0,Cp=0;
                var ncols=A.cols,nrows=A.rows,mrows=B.rows;
                var ad=A.data,bd=B.data,cd=C.data;
                var sum=0.0;

                for (; i < nrows; Ap += ncols, i++) {
                    for (pB = 0, j = 0; j < mrows; Cp++, j++) {
                        pA = Ap;
                        sum = 0.0;
                        for (k = 0; k < ncols; pA++, pB++, k++) {
                            sum += ad[pA] * bd[pB];
                        }
                        cd[Cp] = sum;
                    }
                }
            },

            // C = A' * B
            multiply_AtB: function(C, A, B) {
                var i=0,j=0,k=0;
                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;
                var ncols=A.cols,nrows=A.rows,mcols=B.cols;
                var ad=A.data,bd=B.data,cd=C.data;
                var sum=0.0;

                for (; i < ncols; Ap++, i++) {
                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {
                        pB = p_B;
                        pA = Ap;
                        sum = 0.0;
                        for (k = 0; k < nrows; pA += ncols, pB += mcols, k++) {
                            sum += ad[pA] * bd[pB];
                        }
                        cd[Cp] = sum;
                    }
                }
            },

            // C = A * A'
            multiply_AAt: function(C, A) {
                var i=0,j=0,k=0;
                var pCdiag=0,p_A=0,pA=0,pB=0,pC=0,pCt=0;
                var ncols=A.cols,nrows=A.rows;
                var ad=A.data,cd=C.data;
                var sum=0.0;

                for (; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {
                    pC = pCdiag;
                    pCt = pCdiag;
                    pB = p_A; 
                    for (j = i; j < nrows; pC++, pCt += nrows, j++) {
                        pA = p_A;
                        sum = 0.0;
                        for (k = 0; k < ncols; k++) {
                            sum += ad[pA++] * ad[pB++];
                        }
                        cd[pC] = sum
                        cd[pCt] = sum;
                    }
                }
            },

            // C = A' * A
            multiply_AtA: function(C, A) {
                var i=0,j=0,k=0;
                var p_A=0,pA=0,pB=0,p_C=0,pC=0,p_CC=0;
                var ncols=A.cols,nrows=A.rows;
                var ad=A.data,cd=C.data;
                var sum=0.0;

                for (; i < ncols; p_C += ncols, i++) {
                    p_A = i;
                    p_CC = p_C + i;
                    pC = p_CC;
                    for (j = i; j < ncols; pC++, p_CC += ncols, j++) {
                        pA = p_A;
                        pB = j;
                        sum = 0.0;
                        for (k = 0; k < nrows; pA += ncols, pB += ncols, k++) {
                            sum += ad[pA] * ad[pB];
                        }
                        cd[pC] = sum
                        cd[p_CC] = sum;
                    }
                }
            },

            // various small matrix operations
            identity_3x3: function(M, value) {
                if (typeof value === "undefined") { value=1; }
                var dt=M.data;
                dt[0] = dt[4] = dt[8] = value;
                dt[1] = dt[2] = dt[3] = 0;
                dt[5] = dt[6] = dt[7] = 0;
            },

            invert_3x3: function(from, to) {
                var A = from.data, invA = to.data;
                var t1 = A[4];
                var t2 = A[8];
                var t4 = A[5];
                var t5 = A[7];
                var t8 = A[0];

                var t9 = t8*t1;
                var t11 = t8*t4;
                var t13 = A[3];
                var t14 = A[1];
                var t15 = t13*t14;
                var t17 = A[2];
                var t18 = t13*t17;
                var t20 = A[6];
                var t21 = t20*t14;
                var t23 = t20*t17;
                var t26 = 1.0/(t9*t2-t11*t5-t15*t2+t18*t5+t21*t4-t23*t1);
                invA[0] = (t1*t2-t4*t5)*t26;
                invA[1] = -(t14*t2-t17*t5)*t26;
                invA[2] = -(-t14*t4+t17*t1)*t26;
                invA[3] = -(t13*t2-t4*t20)*t26;
                invA[4] = (t8*t2-t23)*t26;
                invA[5] = -(t11-t18)*t26;
                invA[6] = -(-t13*t5+t1*t20)*t26;
                invA[7] = -(t8*t5-t21)*t26;
                invA[8] = (t9-t15)*t26;
            },
            // C = A * B
            multiply_3x3: function(C, A, B) {
                var Cd=C.data, Ad=A.data, Bd=B.data;
                var m1_0 = Ad[0], m1_1 = Ad[1], m1_2 = Ad[2];
                var m1_3 = Ad[3], m1_4 = Ad[4], m1_5 = Ad[5];
                var m1_6 = Ad[6], m1_7 = Ad[7], m1_8 = Ad[8];

                var m2_0 = Bd[0], m2_1 = Bd[1], m2_2 = Bd[2];
                var m2_3 = Bd[3], m2_4 = Bd[4], m2_5 = Bd[5];
                var m2_6 = Bd[6], m2_7 = Bd[7], m2_8 = Bd[8];

                Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;
                Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;
                Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;
                Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;
                Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;
                Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;
                Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;
                Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;
                Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;
            },

            mat3x3_determinant: function(M) {
                var md=M.data;
                return  md[0] * md[4] * md[8] -
                        md[0] * md[5] * md[7] -
                        md[3] * md[1] * md[8] +
                        md[3] * md[2] * md[7] +
                        md[6] * md[1] * md[5] -
                        md[6] * md[2] * md[4];
            },

            determinant_3x3: function(M11, M12, M13, 
                                      M21, M22, M23, 
                                      M31, M32, M33) {
                return  M11 * M22 * M33 - M11 * M23 * M32 -
                          M21 * M12 * M33 + M21 * M13 * M32 +
                          M31 * M12 * M23 - M31 * M13 * M22;
            }
        };

    })();

    global.matmath = matmath;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 */

(function(global) {
    "use strict";
    //

    var linalg = (function() {

        var swap = function(A, i0, i1, t) {
            t = A[i0];
            A[i0] = A[i1];
            A[i1] = t;
        }

        var hypot = function(a, b) {
            a = Math.abs(a);
            b = Math.abs(b);
            if( a > b ) {
                b /= a;
                return a*Math.sqrt(1.0 + b*b);
            }
            if( b > 0 ) {
                a /= b;
                return b*Math.sqrt(1.0 + a*a);
            }
            return 0.0;
        }

        var JacobiImpl = function(A, astep, W, V, vstep, n) {
            var eps = jsfeat.EPSILON;
            var i=0,j=0,k=0,m=0,l=0,idx=0,_in=0,_in2=0;
            var iters=0,max_iter=n*n*30;
            var mv=0.0,val=0.0,p=0.0,y=0.0,t=0.0,s=0.0,c=0.0,a0=0.0,b0=0.0;

            var indR_buff = jsfeat.cache.get_buffer(n<<2);
            var indC_buff = jsfeat.cache.get_buffer(n<<2);
            var indR = indR_buff.i32;
            var indC = indC_buff.i32;

            if(V) {
                for(; i < n; i++) {
                    k = i*vstep;
                    for(j = 0; j < n; j++) {
                        V[k + j] = 0.0;
                    }
                    V[k + i] = 1.0;
                }
            }

            for(k = 0; k < n; k++) {
                W[k] = A[(astep + 1)*k];
                if(k < n - 1) {
                    for(m = k+1, mv = Math.abs(A[astep*k + m]), i = k+2; i < n; i++) {
                        val = Math.abs(A[astep*k+i]);
                        if(mv < val)
                            mv = val, m = i;
                    }
                    indR[k] = m;
                }
                if(k > 0) {
                    for(m = 0, mv = Math.abs(A[k]), i = 1; i < k; i++) {
                        val = Math.abs(A[astep*i+k]);
                        if(mv < val)
                            mv = val, m = i;
                    }
                    indC[k] = m;
                }
            }

            if(n > 1) for( ; iters < max_iter; iters++) {
                // find index (k,l) of pivot p
                for(k = 0, mv = Math.abs(A[indR[0]]), i = 1; i < n-1; i++) {
                    val = Math.abs(A[astep*i + indR[i]]);
                    if( mv < val )
                        mv = val, k = i;
                }
                l = indR[k];
                for(i = 1; i < n; i++) {
                    val = Math.abs(A[astep*indC[i] + i]);
                    if( mv < val )
                        mv = val, k = indC[i], l = i;
                }
                
                p = A[astep*k + l];

                if(Math.abs(p) <= eps) break;

                y = (W[l] - W[k])*0.5;
                t = Math.abs(y) + hypot(p, y);
                s = hypot(p, t);
                c = t/s;
                s = p/s; t = (p/t)*p;
                if(y < 0)
                    s = -s, t = -t;
                A[astep*k + l] = 0;
                
                W[k] -= t;
                W[l] += t;
                
                // rotate rows and columns k and l
                for (i = 0; i < k; i++) {
                    _in = (astep * i + k);
                    _in2 = (astep * i + l);
                    a0 = A[_in];
                    b0 = A[_in2];
                    A[_in] = a0 * c - b0 * s;
                    A[_in2] = a0 * s + b0 * c;
                }
                for (i = (k + 1); i < l; i++) {
                    _in = (astep * k + i);
                    _in2 = (astep * i + l);
                    a0 = A[_in];
                    b0 = A[_in2];
                    A[_in] = a0 * c - b0 * s;
                    A[_in2] = a0 * s + b0 * c;
                }
                i = l + 1;
                _in = (astep * k + i);
                _in2 = (astep * l + i);
                for (; i < n; i++, _in++, _in2++) {
                    a0 = A[_in];
                    b0 = A[_in2];
                    A[_in] = a0 * c - b0 * s;
                    A[_in2] = a0 * s + b0 * c;
                }
                
                // rotate eigenvectors
                if (V) {
                    _in = vstep * k;
                    _in2 = vstep * l;
                    for (i = 0; i < n; i++, _in++, _in2++) {
                        a0 = V[_in];
                        b0 = V[_in2];
                        V[_in] = a0 * c - b0 * s;
                        V[_in2] = a0 * s + b0 * c;
                    }
                }
                
                for(j = 0; j < 2; j++) {
                    idx = j == 0 ? k : l;
                    if(idx < n - 1) {
                        for(m = idx+1, mv = Math.abs(A[astep*idx + m]), i = idx+2; i < n; i++) {
                            val = Math.abs(A[astep*idx+i]);
                            if( mv < val )
                                mv = val, m = i;
                        }
                        indR[idx] = m;
                    }
                    if(idx > 0) {
                        for(m = 0, mv = Math.abs(A[idx]), i = 1; i < idx; i++) {
                            val = Math.abs(A[astep*i+idx]);
                            if( mv < val )
                                mv = val, m = i;
                        }
                        indC[idx] = m;
                    }
                }
            }

            // sort eigenvalues & eigenvectors
            for(k = 0; k < n-1; k++) {
                m = k;
                for(i = k+1; i < n; i++) {
                    if(W[m] < W[i])
                        m = i;
                }
                if(k != m) {
                    swap(W, m, k, mv);
                    if(V) {
                        for(i = 0; i < n; i++) {
                            swap(V, vstep*m + i, vstep*k + i, mv);
                        }
                    }
                }
            }


            jsfeat.cache.put_buffer(indR_buff);
            jsfeat.cache.put_buffer(indC_buff);
        }

        var JacobiSVDImpl = function(At, astep, _W, Vt, vstep, m, n, n1) {
            var eps = jsfeat.EPSILON * 2.0;
            var minval = jsfeat.FLT_MIN;
            var i=0,j=0,k=0,iter=0,max_iter=Math.max(m, 30);
            var Ai=0,Aj=0,Vi=0,Vj=0,changed=0;
            var c=0.0, s=0.0, t=0.0;
            var t0=0.0,t1=0.0,sd=0.0,beta=0.0,gamma=0.0,delta=0.0,a=0.0,p=0.0,b=0.0;
            var seed = 0x1234;
            var val=0.0,val0=0.0,asum=0.0;

            var W_buff = jsfeat.cache.get_buffer(n<<3);
            var W = W_buff.f64;
            
            for(; i < n; i++) {
                for(k = 0, sd = 0; k < m; k++) {
                    t = At[i*astep + k];
                    sd += t*t;
                }
                W[i] = sd;
                
                if(Vt) {
                    for(k = 0; k < n; k++) {
                        Vt[i*vstep + k] = 0;
                    }
                    Vt[i*vstep + i] = 1;
                }
            }
            
            for(; iter < max_iter; iter++) {
                changed = 0;
                
                for(i = 0; i < n-1; i++) {
                    for(j = i+1; j < n; j++) {
                        Ai = (i*astep)|0, Aj = (j*astep)|0;
                        a = W[i], p = 0, b = W[j];
                        
                        k = 2;
                        p += At[Ai]*At[Aj];
                        p += At[Ai+1]*At[Aj+1];

                        for(; k < m; k++)
                            p += At[Ai+k]*At[Aj+k];
                        
                        if(Math.abs(p) <= eps*Math.sqrt(a*b)) continue;
                        
                        p *= 2.0;
                        beta = a - b, gamma = hypot(p, beta);
                        if( beta < 0 ) {
                            delta = (gamma - beta)*0.5;
                            s = Math.sqrt(delta/gamma);
                            c = (p/(gamma*s*2.0));
                        } else {
                            c = Math.sqrt((gamma + beta)/(gamma*2.0));
                            s = (p/(gamma*c*2.0));
                        }
                        
                        a=0.0, b=0.0;
                        
                        k = 2; // unroll
                        t0 = c*At[Ai] + s*At[Aj];
                        t1 = -s*At[Ai] + c*At[Aj];
                        At[Ai] = t0; At[Aj] = t1;
                        a += t0*t0; b += t1*t1;

                        t0 = c*At[Ai+1] + s*At[Aj+1];
                        t1 = -s*At[Ai+1] + c*At[Aj+1];
                        At[Ai+1] = t0; At[Aj+1] = t1;
                        a += t0*t0; b += t1*t1;

                        for( ; k < m; k++ )
                        {
                            t0 = c*At[Ai+k] + s*At[Aj+k];
                            t1 = -s*At[Ai+k] + c*At[Aj+k];
                            At[Ai+k] = t0; At[Aj+k] = t1;
                            
                            a += t0*t0; b += t1*t1;
                        }
                        
                        W[i] = a; W[j] = b;
                        
                        changed = 1;
                        
                        if(Vt) {
                            Vi = (i*vstep)|0, Vj = (j*vstep)|0;

                            k = 2;
                            t0 = c*Vt[Vi] + s*Vt[Vj];
                            t1 = -s*Vt[Vi] + c*Vt[Vj];
                            Vt[Vi] = t0; Vt[Vj] = t1;

                            t0 = c*Vt[Vi+1] + s*Vt[Vj+1];
                            t1 = -s*Vt[Vi+1] + c*Vt[Vj+1];
                            Vt[Vi+1] = t0; Vt[Vj+1] = t1;

                            for(; k < n; k++) {
                                t0 = c*Vt[Vi+k] + s*Vt[Vj+k];
                                t1 = -s*Vt[Vi+k] + c*Vt[Vj+k];
                                Vt[Vi+k] = t0; Vt[Vj+k] = t1;
                            }
                        }
                    }
                }
                if(changed == 0) break;
            }
            
            for(i = 0; i < n; i++) {
                for(k = 0, sd = 0; k < m; k++) {
                    t = At[i*astep + k];
                    sd += t*t;
                }
                W[i] = Math.sqrt(sd);
            }
            
            for(i = 0; i < n-1; i++) {
                j = i;
                for(k = i+1; k < n; k++) {
                    if(W[j] < W[k])
                        j = k;
                }
                if(i != j) {
                    swap(W, i, j, sd);
                    if(Vt) {
                        for(k = 0; k < m; k++) {
                            swap(At, i*astep + k, j*astep + k, t);
                        }
                        
                        for(k = 0; k < n; k++) {
                            swap(Vt, i*vstep + k, j*vstep + k, t);
                        }
                    }
                }
            }
            
            for(i = 0; i < n; i++) {
                _W[i] = W[i];
            }
            
            if(!Vt) {
                jsfeat.cache.put_buffer(W_buff);
                return;
            }

            for(i = 0; i < n1; i++) {

                sd = i < n ? W[i] : 0;
                
                while(sd <= minval) {
                    // if we got a zero singular value, then in order to get the corresponding left singular vector
                    // we generate a random vector, project it to the previously computed left singular vectors,
                    // subtract the projection and normalize the difference.
                    val0 = (1.0/m);
                    for(k = 0; k < m; k++) {
                        seed = (seed * 214013 + 2531011);
                        val = (((seed >> 16) & 0x7fff) & 256) != 0 ? val0 : -val0;
                        At[i*astep + k] = val;
                    }
                    for(iter = 0; iter < 2; iter++) {
                        for(j = 0; j < i; j++) {
                            sd = 0;
                            for(k = 0; k < m; k++) {
                                sd += At[i*astep + k]*At[j*astep + k];
                            }
                            asum = 0.0;
                            for(k = 0; k < m; k++) {
                                t = (At[i*astep + k] - sd*At[j*astep + k]);
                                At[i*astep + k] = t;
                                asum += Math.abs(t);
                            }
                            asum = asum ? 1.0/asum : 0;
                            for(k = 0; k < m; k++) {
                                At[i*astep + k] *= asum;
                            }
                        }
                    }
                    sd = 0;
                    for(k = 0; k < m; k++) {
                        t = At[i*astep + k];
                        sd += t*t;
                    }
                    sd = Math.sqrt(sd);
                }
                
                s = (1.0/sd);
                for(k = 0; k < m; k++) {
                    At[i*astep + k] *= s;
                }
            }

            jsfeat.cache.put_buffer(W_buff);
        }
        
        return {

            lu_solve: function(A, B) {
                var i=0,j=0,k=0,p=1,astep=A.cols;
                var ad=A.data, bd=B.data;
                var t,alpha,d,s;

                for(i = 0; i < astep; i++) {
                    k = i;                    
                    for(j = i+1; j < astep; j++) {
                        if(Math.abs(ad[j*astep + i]) > Math.abs(ad[k*astep+i])) {
                            k = j;
                        }
                    }
                    
                    if(Math.abs(ad[k*astep+i]) < jsfeat.EPSILON) {
                        return 0; // FAILED
                    }
                    
                    if(k != i) {
                        for(j = i; j < astep; j++ ) {
                            swap(ad, i*astep+j, k*astep+j, t);
                        }
                        
                        swap(bd, i, k, t);
                        p = -p;
                    }
                    
                    d = -1.0/ad[i*astep+i];
                    
                    for(j = i+1; j < astep; j++) {
                        alpha = ad[j*astep+i]*d;
                        
                        for(k = i+1; k < astep; k++) {
                            ad[j*astep+k] += alpha*ad[i*astep+k];
                        }
                        
                        bd[j] += alpha*bd[i];
                    }
                    
                    ad[i*astep+i] = -d;
                }
                
                for(i = astep-1; i >= 0; i--) {
                    s = bd[i];
                    for(k = i+1; k < astep; k++) {
                        s -= ad[i*astep+k]*bd[k];
                    }
                    bd[i] = s*ad[i*astep+i];
                }

                return 1; // OK
            },

            cholesky_solve: function(A, B) {
                var col=0,row=0,col2=0,cs=0,rs=0,i=0,j=0;
                var size = A.cols;
                var ad=A.data, bd=B.data;
                var val,inv_diag;

                for (col = 0; col < size; col++) {
                    inv_diag = 1.0;
                    cs = (col * size);
                    rs = cs;
                    for (row = col; row < size; row++)
                    {
                        // correct for the parts of cholesky already computed
                        val = ad[(rs+col)];
                        for (col2 = 0; col2 < col; col2++) {
                            val -= ad[(col2*size+col)] * ad[(rs+col2)];
                        }
                        if (row == col) {
                            // this is the diagonal element so don't divide
                            ad[(rs+col)] = val;
                            if(val == 0) {
                                return 0;
                            }
                            inv_diag = 1.0 / val;
                        } else {
                            // cache the value without division in the upper half
                            ad[(cs+row)] = val;
                            // divide my the diagonal element for all others
                            ad[(rs+col)] = val * inv_diag;
                        }
                        rs = (rs + size);
                    }
                }

                // first backsub through L
                cs = 0;
                for (i = 0; i < size; i++) {
                    val = bd[i];
                    for (j = 0; j < i; j++) {
                        val -= ad[(cs+j)] * bd[j];
                    }
                    bd[i] = val;
                    cs = (cs + size);
                }
                // backsub through diagonal
                cs = 0;
                for (i = 0; i < size; i++) {
                    bd[i] /= ad[(cs + i)];
                    cs = (cs + size);
                }
                // backsub through L Transpose
                i = (size-1);
                for (; i >= 0; i--) {
                    val = bd[i];
                    j = (i + 1);
                    cs = (j * size);
                    for (; j < size; j++) {
                        val -= ad[(cs + i)] * bd[j];
                        cs = (cs + size);
                    }
                    bd[i] = val;
                }

                return 1;
            },

            svd_decompose: function(A, W, U, V, options) {
                if (typeof options === "undefined") { options = 0; };
                var at=0,i=0,j=0,_m=A.rows,_n=A.cols,m=_m,n=_n;
                var dt = A.type | jsfeat.C1_t; // we only work with single channel

                if(m < n) {
                    at = 1;
                    i = m;
                    m = n;
                    n = i;
                }

                var a_buff = jsfeat.cache.get_buffer((m*m)<<3);
                var w_buff = jsfeat.cache.get_buffer(n<<3);
                var v_buff = jsfeat.cache.get_buffer((n*n)<<3);

                var a_mt = new jsfeat.matrix_t(m, m, dt, a_buff.data);
                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);
                var v_mt = new jsfeat.matrix_t(n, n, dt, v_buff.data);

                if(at == 0) {
                    // transpose
                    jsfeat.matmath.transpose(a_mt, A);
                } else {
                    for(i = 0; i < _n*_m; i++) {
                        a_mt.data[i] = A.data[i];
                    }
                    for(; i < n*m; i++) {
                        a_mt.data[i] = 0;
                    }
                }

                JacobiSVDImpl(a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m);

                if(W) {
                    for(i=0; i < n; i++) {
                        W.data[i] = w_mt.data[i];
                    }
                    for(; i < _n; i++) {
                        W.data[i] = 0;
                    }
                }

                if (at == 0) {
                    if(U && (options & jsfeat.SVD_U_T)) {
                        i = m*m;
                        while(--i >= 0) {
                            U.data[i] = a_mt.data[i];
                        }
                    } else if(U) {
                        jsfeat.matmath.transpose(U, a_mt);
                    }

                    if(V && (options & jsfeat.SVD_V_T)) {
                        i = n*n;
                        while(--i >= 0) {
                            V.data[i] = v_mt.data[i];
                        }
                    } else if(V) {
                        jsfeat.matmath.transpose(V, v_mt);
                    }
                } else {
                    if(U && (options & jsfeat.SVD_U_T)) {
                        i = n*n;
                        while(--i >= 0) {
                            U.data[i] = v_mt.data[i];
                        }
                    } else if(U) {
                        jsfeat.matmath.transpose(U, v_mt);
                    }

                    if(V && (options & jsfeat.SVD_V_T)) {
                        i = m*m;
                        while(--i >= 0) {
                            V.data[i] = a_mt.data[i];
                        }
                    } else if(V) {
                        jsfeat.matmath.transpose(V, a_mt);
                    }
                }

                jsfeat.cache.put_buffer(a_buff);
                jsfeat.cache.put_buffer(w_buff);
                jsfeat.cache.put_buffer(v_buff);

            },

            svd_solve: function(A, X, B) {
                var i=0,j=0,k=0;
                var pu=0,pv=0;
                var nrows=A.rows,ncols=A.cols;
                var sum=0.0,xsum=0.0,tol=0.0;
                var dt = A.type | jsfeat.C1_t;

                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);
                var w_buff = jsfeat.cache.get_buffer(ncols<<3);
                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);

                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);
                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);
                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);

                var bd = B.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;

                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);

                tol = jsfeat.EPSILON * wd[0] * ncols;

                for (; i < ncols; i++, pv += ncols) {
                    xsum = 0.0;
                    for(j = 0; j < ncols; j++) {
                        if(wd[j] > tol) {
                            for(k = 0, sum = 0.0, pu = 0; k < nrows; k++, pu += ncols) {
                                sum += ud[pu + j] * bd[k];
                            }
                            xsum += sum * vd[pv + j] / wd[j];
                        }
                    }
                    X.data[i] = xsum;
                }

                jsfeat.cache.put_buffer(u_buff);
                jsfeat.cache.put_buffer(w_buff);
                jsfeat.cache.put_buffer(v_buff);
            },

            svd_invert: function(Ai, A) {
                var i=0,j=0,k=0;
                var pu=0,pv=0,pa=0;
                var nrows=A.rows,ncols=A.cols;
                var sum=0.0,tol=0.0;
                var dt = A.type | jsfeat.C1_t;

                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);
                var w_buff = jsfeat.cache.get_buffer(ncols<<3);
                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);

                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);
                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);
                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);

                var id = Ai.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;

                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);

                tol = jsfeat.EPSILON * wd[0] * ncols;

                for (; i < ncols; i++, pv += ncols) {
                    for (j = 0, pu = 0; j < nrows; j++, pa++) {
                        for (k = 0, sum = 0.0; k < ncols; k++, pu++) {
                            if (wd[k] > tol) sum += vd[pv + k] * ud[pu] / wd[k];
                        }
                        id[pa] = sum;
                    }
                }

                jsfeat.cache.put_buffer(u_buff);
                jsfeat.cache.put_buffer(w_buff);
                jsfeat.cache.put_buffer(v_buff);
            },

            eigenVV: function(A, vects, vals) {
                var n=A.cols,i=n*n;
                var dt = A.type | jsfeat.C1_t;

                var a_buff = jsfeat.cache.get_buffer((n*n)<<3);
                var w_buff = jsfeat.cache.get_buffer(n<<3);
                var a_mt = new jsfeat.matrix_t(n, n, dt, a_buff.data);
                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);

                while(--i >= 0) {
                    a_mt.data[i] = A.data[i];
                }

                JacobiImpl(a_mt.data, n, w_mt.data, vects ? vects.data : null, n, n);

                if(vals) {
                    while(--n >= 0) {
                        vals.data[n] = w_mt.data[n];
                    }
                }

                jsfeat.cache.put_buffer(a_buff);
                jsfeat.cache.put_buffer(w_buff);
            }

        };

    })();

    global.linalg = linalg;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 */

(function(global) {
    "use strict";
    //

    var motion_model = (function() {

    	var sqr = function(x) {
    		return x*x;
    	}

    	// does isotropic normalization
    	var iso_normalize_points = function(from, to, T0, T1, count) {
			var i=0;
		    var cx0=0.0, cy0=0.0, d0=0.0, s0=0.0;
		    var cx1=0.0, cy1=0.0, d1=0.0, s1=0.0;
		    var dx=0.0,dy=0.0;

		    for (; i < count; ++i) {
		        cx0 += from[i].x;
		        cy0 += from[i].y;
		        cx1 += to[i].x;
		        cy1 += to[i].y;
		    }

		    cx0 /= count; cy0 /= count;
		    cx1 /= count; cy1 /= count;

		    for (i = 0; i < count; ++i) {
		        dx = from[i].x - cx0;
		        dy = from[i].y - cy0;
		        d0 += Math.sqrt(dx*dx + dy*dy);
		        dx = to[i].x - cx1;
		        dy = to[i].y - cy1;
		        d1 += Math.sqrt(dx*dx + dy*dy);
		    }

		    d0 /= count; d1 /= count;

		    s0 = Math.SQRT2 / d0; s1 = Math.SQRT2 / d1;

		    T0[0] = T0[4] = s0;
		    T0[2] = -cx0*s0;
		    T0[5] = -cy0*s0;
		    T0[1] = T0[3] = T0[6] = T0[7] = 0.0;
		    T0[8] = 1.0;

		    T1[0] = T1[4] = s1;
		    T1[2] = -cx1*s1;
		    T1[5] = -cy1*s1;
		    T1[1] = T1[3] = T1[6] = T1[7] = 0.0;
		    T1[8] = 1.0;
		}

		var have_collinear_points = function(points, count) {
		    var j=0,k=0,i=(count-1)|0;
		    var dx1=0.0,dy1=0.0,dx2=0.0,dy2=0.0;

		    // check that the i-th selected point does not belong
		    // to a line connecting some previously selected points
		    for(; j < i; ++j) {
		        dx1 = points[j].x - points[i].x;
		        dy1 = points[j].y - points[i].y;
		        for(k = 0; k < j; ++k) {
		            dx2 = points[k].x - points[i].x;
		            dy2 = points[k].y - points[i].y;
		            if( Math.abs(dx2*dy1 - dy2*dx1) <= jsfeat.EPSILON*(Math.abs(dx1) + Math.abs(dy1) + Math.abs(dx2) + Math.abs(dy2)))
		                return true;
		        }
		    }
		    return false;
		}

		var T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);
    	var T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);
    	var AtA = new jsfeat.matrix_t(6, 6, jsfeat.F32_t|jsfeat.C1_t);
    	var AtB = new jsfeat.matrix_t(6, 1, jsfeat.F32_t|jsfeat.C1_t);
    	
    	var affine2d = (function () {

	        function affine2d() {
	        	// empty constructor
	        }

	        affine2d.prototype.run = function(from, to, model, count) {
	        	var i=0,j=0;
	        	var dt=model.type|jsfeat.C1_t;
	        	var md=model.data, t0d=T0.data, t1d=T1.data;
	        	var pt0,pt1,px=0.0,py=0.0;

	            iso_normalize_points(from, to, t0d, t1d, count);

	            var a_buff = jsfeat.cache.get_buffer((2*count*6)<<3);
                var b_buff = jsfeat.cache.get_buffer((2*count)<<3);

                var a_mt = new jsfeat.matrix_t(6, 2*count, dt, a_buff.data);
                var b_mt = new jsfeat.matrix_t(1, 2*count, dt, b_buff.data);
                var ad=a_mt.data, bd=b_mt.data;

			    for (; i < count; ++i) {
			    	pt0 = from[i];
			        pt1 = to[i];

			        px = t0d[0]*pt0.x + t0d[1]*pt0.y + t0d[2];
			        py = t0d[3]*pt0.x + t0d[4]*pt0.y + t0d[5];

			        j = i*2*6;
			        ad[j]=px, ad[j+1]=py, ad[j+2]=1.0, ad[j+3]=0.0, ad[j+4]=0.0, ad[j+5]=0.0;

			        j += 6;
			        ad[j]=0.0, ad[j+1]=0.0, ad[j+2]=0.0, ad[j+3]=px, ad[j+4]=py, ad[j+5]=1.0;

			        bd[i<<1] = t1d[0]*pt1.x + t1d[1]*pt1.y + t1d[2];
			        bd[(i<<1)+1] = t1d[3]*pt1.x + t1d[4]*pt1.y + t1d[5];
			    }

			    jsfeat.matmath.multiply_AtA(AtA, a_mt);
			    jsfeat.matmath.multiply_AtB(AtB, a_mt, b_mt);

			    jsfeat.linalg.lu_solve(AtA, AtB);

			    md[0] = AtB.data[0], md[1]=AtB.data[1], md[2]=AtB.data[2];
			    md[3] = AtB.data[3], md[4]=AtB.data[4], md[5]=AtB.data[5];
			    md[6] = 0.0, md[7] = 0.0, md[8] = 1.0; // fill last row

			    // denormalize
			    jsfeat.matmath.invert_3x3(T1, T1);
			    jsfeat.matmath.multiply_3x3(model, T1, model);
			    jsfeat.matmath.multiply_3x3(model, model, T0);

			    // free buffer
			    jsfeat.cache.put_buffer(a_buff);
			    jsfeat.cache.put_buffer(b_buff);

			    return 1;
	        }

	        affine2d.prototype.error = function(from, to, model, err, count) {
	        	var i=0;
	        	var pt0,pt1;
	        	var m=model.data;

			    for (; i < count; ++i) {
			        pt0 = from[i];
			        pt1 = to[i];

			        err[i] = sqr(pt1.x - m[0]*pt0.x - m[1]*pt0.y - m[2]) +
			                 sqr(pt1.y - m[3]*pt0.x - m[4]*pt0.y - m[5]);
			    }
	        }

	        affine2d.prototype.check_subset = function(from, to, count) {
	            return true; // all good
	        }

	        return affine2d;
	    })();

	    var mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);
	    var Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);

	    var homography2d = (function () {

	        function homography2d() {
	        	// empty constructor
	        	//this.T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);
	        	//this.T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);
	        	//this.mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);
	        	//this.Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);
	        }

	        homography2d.prototype.run = function(from, to, model, count) {
	        	var i=0,j=0;
	        	var md=model.data, t0d=T0.data, t1d=T1.data;
	        	var LtL=mLtL.data, evd=Evec.data;
	        	var x=0.0,y=0.0,X=0.0,Y=0.0;

			    // norm
				var smx=0.0, smy=0.0, cmx=0.0, cmy=0.0, sMx=0.0, sMy=0.0, cMx=0.0, cMy=0.0;

				for(; i < count; ++i) {
				    cmx += to[i].x;
				    cmy += to[i].y;
				    cMx += from[i].x;
				    cMy += from[i].y;
				}

			    cmx /= count; cmy /= count;
			    cMx /= count; cMy /= count;

			    for(i = 0; i < count; ++i)
			    {
				    smx += Math.abs(to[i].x - cmx);
				    smy += Math.abs(to[i].y - cmy);
				    sMx += Math.abs(from[i].x - cMx);
				    sMy += Math.abs(from[i].y - cMy);
				}

			    if( Math.abs(smx) < jsfeat.EPSILON 
			    	|| Math.abs(smy) < jsfeat.EPSILON 
			    	|| Math.abs(sMx) < jsfeat.EPSILON 
			    	|| Math.abs(sMy) < jsfeat.EPSILON ) return 0;

			    smx = count/smx; smy = count/smy;
			    sMx = count/sMx; sMy = count/sMy;

			    t0d[0] = sMx; 	t0d[1] = 0; 	t0d[2] = -cMx*sMx; 
			    t0d[3] = 0; 	t0d[4] = sMy; 	t0d[5] = -cMy*sMy; 
			    t0d[6] = 0; 	t0d[7] = 0; 	t0d[8] = 1;

				t1d[0] = 1.0/smx; 	t1d[1] = 0; 		t1d[2] = cmx;
				t1d[3] = 0; 		t1d[4] = 1.0/smy; 	t1d[5] = cmy;
				t1d[6] = 0; 		t1d[7] = 0; 		t1d[8] = 1;
				//

				// construct system
				i = 81;
				while(--i >= 0) {
					LtL[i] = 0.0;
				}
				for(i = 0; i < count; ++i) {
					x = (to[i].x - cmx) * smx;
					y = (to[i].y - cmy) * smy;
					X = (from[i].x - cMx) * sMx;
					Y = (from[i].y - cMy) * sMy;

					LtL[0] += X*X;
					LtL[1] += X*Y;
					LtL[2] += X;

					LtL[6] += X*-x*X;
					LtL[7] += X*-x*Y;
					LtL[8] += X*-x;
					LtL[10] += Y*Y;
					LtL[11] += Y;

					LtL[15] += Y*-x*X;
					LtL[16] += Y*-x*Y;
					LtL[17] += Y*-x;
					LtL[20] += 1.0;

					LtL[24] += -x*X;
					LtL[25] += -x*Y;
					LtL[26] += -x;
					LtL[30] += X*X;
					LtL[31] += X*Y;
					LtL[32] += X;
					LtL[33] += X*-y*X;
					LtL[34] += X*-y*Y;
					LtL[35] += X*-y;
					LtL[40] += Y*Y;
					LtL[41] += Y;
					LtL[42] += Y*-y*X;
					LtL[43] += Y*-y*Y;
					LtL[44] += Y*-y;
					LtL[50] += 1.0;
					LtL[51] += -y*X;
					LtL[52] += -y*Y;
					LtL[53] += -y;
					LtL[60] += -x*X*-x*X + -y*X*-y*X;
					LtL[61] += -x*X*-x*Y + -y*X*-y*Y;
					LtL[62] += -x*X*-x + -y*X*-y;
					LtL[70] += -x*Y*-x*Y + -y*Y*-y*Y;
					LtL[71] += -x*Y*-x + -y*Y*-y;
					LtL[80] += -x*-x + -y*-y;
				}
				//

				// symmetry
			    for(i = 0; i < 9; ++i) {
			        for(j = 0; j < i; ++j)
			            LtL[i*9+j] = LtL[j*9+i];
			    }

				jsfeat.linalg.eigenVV(mLtL, Evec);

				md[0]=evd[72], md[1]=evd[73], md[2]=evd[74];
			    md[3]=evd[75], md[4]=evd[76], md[5]=evd[77];
			    md[6]=evd[78], md[7]=evd[79], md[8]=evd[80];

				// denormalize
			    jsfeat.matmath.multiply_3x3(model, T1, model);
			    jsfeat.matmath.multiply_3x3(model, model, T0);

			    // set bottom right to 1.0
			    x = 1.0/md[8];
			    md[0] *= x; md[1] *= x; md[2] *= x;
			    md[3] *= x; md[4] *= x; md[5] *= x;
			    md[6] *= x; md[7] *= x; md[8] = 1.0;

			    return 1;
	        }

	        homography2d.prototype.error = function(from, to, model, err, count) {
	        	var i=0;
	        	var pt0,pt1,ww=0.0,dx=0.0,dy=0.0;
	        	var m=model.data;

			    for (; i < count; ++i) {
			        pt0 = from[i];
			        pt1 = to[i];

			        ww = 1.0/(m[6]*pt0.x + m[7]*pt0.y + 1.0);
			        dx = (m[0]*pt0.x + m[1]*pt0.y + m[2])*ww - pt1.x;
			        dy = (m[3]*pt0.x + m[4]*pt0.y + m[5])*ww - pt1.y;
			        err[i] = (dx*dx + dy*dy);
			    }
	        }

	        homography2d.prototype.check_subset = function(from, to, count) {
	        	// seems to reject good subsets actually
	        	//if( have_collinear_points(from, count) || have_collinear_points(to, count) ) {
        			//return false;
        		//}
        		if( count == 4 ) {
			        var negative = 0;

			        var fp0=from[0],fp1=from[1],fp2=from[2],fp3=from[3];
			        var tp0=to[0],tp1=to[1],tp2=to[2],tp3=to[3];

			        // set1
			        var A11=fp0.x, A12=fp0.y, A13=1.0;
			        var A21=fp1.x, A22=fp1.y, A23=1.0;
			        var A31=fp2.x, A32=fp2.y, A33=1.0;

			        var B11=tp0.x, B12=tp0.y, B13=1.0;
			        var B21=tp1.x, B22=tp1.y, B23=1.0;
			        var B31=tp2.x, B32=tp2.y, B33=1.0;

			        var detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);
					var detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);

					if(detA*detB < 0) negative++;

					// set2
					A11=fp1.x, A12=fp1.y;
			        A21=fp2.x, A22=fp2.y;
			        A31=fp3.x, A32=fp3.y;

			        B11=tp1.x, B12=tp1.y;
			        B21=tp2.x, B22=tp2.y;
			        B31=tp3.x, B32=tp3.y;

			        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);
					detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);

					if(detA*detB < 0) negative++;

					// set3
					A11=fp0.x, A12=fp0.y;
			        A21=fp2.x, A22=fp2.y;
			        A31=fp3.x, A32=fp3.y;

			        B11=tp0.x, B12=tp0.y;
			        B21=tp2.x, B22=tp2.y;
			        B31=tp3.x, B32=tp3.y;

			        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);
					detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);

					if(detA*detB < 0) negative++;

					// set4
					A11=fp0.x, A12=fp0.y;
			        A21=fp1.x, A22=fp1.y;
			        A31=fp3.x, A32=fp3.y;

			        B11=tp0.x, B12=tp0.y;
			        B21=tp1.x, B22=tp1.y;
			        B31=tp3.x, B32=tp3.y;

			        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);
					detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);

					if(detA*detB < 0) negative++;

			        if(negative != 0 && negative != 4) {
			        	return false;
			        }
			    }
	            return true; // all good
	        }

	        return homography2d;
	    })();

	    return {

    		affine2d:affine2d,
    		homography2d:homography2d

    	};

    })();

    var ransac_params_t = (function () {
        function ransac_params_t(size, thresh, eps, prob) {
            if (typeof size === "undefined") { size=0; }
            if (typeof thresh === "undefined") { thresh=0.5; }
            if (typeof eps === "undefined") { eps=0.5; }
            if (typeof prob === "undefined") { prob=0.99; }

            this.size = size;
            this.thresh = thresh;
            this.eps = eps;
            this.prob = prob;
        };
        ransac_params_t.prototype.update_iters = function(_eps, max_iters) {
	        var num = Math.log(1 - this.prob);
	        var denom = Math.log(1 - Math.pow(1 - _eps, this.size));
	        return (denom >= 0 || -num >= max_iters*(-denom) ? max_iters : Math.round(num/denom))|0;
        };
        return ransac_params_t;
    })();

    var motion_estimator = (function() {

    	var get_subset = function(kernel, from, to, need_cnt, max_cnt, from_sub, to_sub) {
    		var max_try = 1000;
    		var indices = [];
		    var i=0, j=0, ssiter=0, idx_i=0, ok=false;
		    for(; ssiter < max_try; ++ssiter)  {
		        i = 0;
		        for (; i < need_cnt && ssiter < max_try;) {
		            ok = false;
		            idx_i = 0;
		            while (!ok) {
		                ok = true;
		                idx_i = indices[i] = Math.floor(Math.random() * max_cnt)|0;
		                for (j = 0; j < i; ++j) {
		                    if (idx_i == indices[j])
		                    { ok = false; break; }
		                }
		            }
		            from_sub[i] = from[idx_i];
		            to_sub[i] = to[idx_i];
		            if( !kernel.check_subset( from_sub, to_sub, i+1 ) ) {
		                ssiter++;
		                continue;
		            }
		            ++i;
		        }
		        break;
		    }

		    return (i == need_cnt && ssiter < max_try);
    	}

    	var find_inliers = function(kernel, model, from, to, count, thresh, err, mask) {
    		var numinliers = 0, i=0, f=0;
    		var t = thresh*thresh;

    		kernel.error(from, to, model, err, count);

		    for(; i < count; ++i) {
		        f = err[i] <= t;
		        mask[i] = f;
		        numinliers += f;
		    }
		    return numinliers;
    	}

    	return {

    		ransac: function(params, kernel, from, to, count, model, mask, max_iters) {
    			if (typeof max_iters === "undefined") { max_iters=1000; }

    			if(count < params.size) return false;

    			var model_points = params.size;
			    var niters = max_iters, iter=0;
			    var result = false;

			    var subset0 = [];
			    var subset1 = [];
			    var found = false;

			    var mc=model.cols,mr=model.rows;
                var dt = model.type | jsfeat.C1_t;

			    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);
			    var ms_buff = jsfeat.cache.get_buffer(count);
			    var err_buff = jsfeat.cache.get_buffer(count<<2);
			    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);
			    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8C1_t, ms_buff.data);

			    var inliers_max = -1, numinliers=0;
			    var nmodels = 0;

			    var err = err_buff.f32;

			    // special case
			    if(count == model_points) {
			        if(kernel.run(from, to, M, count) <= 0) {
			        	jsfeat.cache.put_buffer(m_buff);
			        	jsfeat.cache.put_buffer(ms_buff);
			        	jsfeat.cache.put_buffer(err_buff);
			        	return false;
			        }

			        M.copy_to(model);
			        if(mask) {
			        	while(--count >= 0) {
			        		mask.data[count] = 1;
			        	}
			        }
			        jsfeat.cache.put_buffer(m_buff);
			        jsfeat.cache.put_buffer(ms_buff);
			        jsfeat.cache.put_buffer(err_buff);
			        return true;
			    }

			    for (; iter < niters; ++iter) {
			        // generate subset
			        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);
			        if(!found) {
			            if(iter == 0) {
			            	jsfeat.cache.put_buffer(m_buff);
			            	jsfeat.cache.put_buffer(ms_buff);
			            	jsfeat.cache.put_buffer(err_buff);
			                return false;
			            }
			            break;
			        }

			        nmodels = kernel.run( subset0, subset1, M, model_points );
			        if(nmodels <= 0)
			            continue;

			        // TODO handle multimodel output

			        numinliers = find_inliers(kernel, M, from, to, count, params.thresh, err, curr_mask.data);

			        if( numinliers > Math.max(inliers_max, model_points-1) ) {
			            M.copy_to(model);
			            inliers_max = numinliers;
			            if(mask) curr_mask.copy_to(mask);
			            niters = params.update_iters((count - numinliers)/count, niters);
			            result = true;
			        }
			    }

			    jsfeat.cache.put_buffer(m_buff);
			    jsfeat.cache.put_buffer(ms_buff);
			    jsfeat.cache.put_buffer(err_buff);

			    return result;
    		},

    		lmeds: function(params, kernel, from, to, count, model, mask, max_iters) {
    			if (typeof max_iters === "undefined") { max_iters=1000; }

    			if(count < params.size) return false;

    			var model_points = params.size;
			    var niters = max_iters, iter=0;
			    var result = false;

			    var subset0 = [];
			    var subset1 = [];
			    var found = false;

			    var mc=model.cols,mr=model.rows;
                var dt = model.type | jsfeat.C1_t;

			    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);
			    var ms_buff = jsfeat.cache.get_buffer(count);
			    var err_buff = jsfeat.cache.get_buffer(count<<2);
			    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);
			    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8_t|jsfeat.C1_t, ms_buff.data);

			    var numinliers=0;
			    var nmodels = 0;

			    var err = err_buff.f32;
			    var min_median = 1000000000.0, sigma=0.0, median=0.0;

			    params.eps = 0.45;
			    niters = params.update_iters(params.eps, niters);

			    // special case
			    if(count == model_points) {
			        if(kernel.run(from, to, M, count) <= 0) {
			        	jsfeat.cache.put_buffer(m_buff);
			        	jsfeat.cache.put_buffer(ms_buff);
			        	jsfeat.cache.put_buffer(err_buff);
			        	return false;
			        }

			        M.copy_to(model);
			        if(mask) {
			        	while(--count >= 0) {
			        		mask.data[count] = 1;
			        	}
			        }
			        jsfeat.cache.put_buffer(m_buff);
			        jsfeat.cache.put_buffer(ms_buff);
			        jsfeat.cache.put_buffer(err_buff);
			        return true;
			    }

			    for (; iter < niters; ++iter) {
			        // generate subset
			        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);
			        if(!found) {
			            if(iter == 0) {
			            	jsfeat.cache.put_buffer(m_buff);
			            	jsfeat.cache.put_buffer(ms_buff);
			            	jsfeat.cache.put_buffer(err_buff);
			                return false;
			            }
			            break;
			        }

			        nmodels = kernel.run( subset0, subset1, M, model_points );
			        if(nmodels <= 0)
			            continue;

			        // TODO handle multimodel output

			        kernel.error(from, to, M, err, count);
			        median = jsfeat.math.median(err, 0, count-1);

			        if(median < min_median) {
			            min_median = median;
			            M.copy_to(model);
			            result = true;
			        }
			    }

			    if(result) {
			        sigma = 2.5*1.4826*(1 + 5.0/(count - model_points))*Math.sqrt(min_median);
			        sigma = Math.max(sigma, 0.001);

			        numinliers = find_inliers(kernel, model, from, to, count, sigma, err, curr_mask.data);
			        if(mask) curr_mask.copy_to(mask);
			        
			        result = numinliers >= model_points;
			    }

			    jsfeat.cache.put_buffer(m_buff);
			    jsfeat.cache.put_buffer(ms_buff);
			    jsfeat.cache.put_buffer(err_buff);

			    return result;
    		}

    	};

    })();

    global.ransac_params_t = ransac_params_t;
    global.motion_model = motion_model;
    global.motion_estimator = motion_estimator;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 */

(function(global) {
    "use strict";
    //

    var imgproc = (function() {

        var _resample_u8 = function(src, dst, nw, nh) {
            var xofs_count=0;
            var ch=src.channel,w=src.cols,h=src.rows;
            var src_d=src.data,dst_d=dst.data;
            var scale_x = w / nw, scale_y = h / nh;
            var inv_scale_256 = (scale_x * scale_y * 0x10000)|0;
            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;
            var a=0,b=0,dxn=0,alpha=0,beta=0,beta1=0;

            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);
            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);
            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);

            var buf = buf_node.i32;
            var sum = sum_node.i32;
            var xofs = xofs_node.i32;

            for (; dx < nw; dx++) {
                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;
                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;
                sx1 = Math.min(sx1, w - 1);
                sx2 = Math.min(sx2, w - 1);

                if(sx1 > fsx1) {
                    xofs[k++] = (dx * ch)|0;
                    xofs[k++] = ((sx1 - 1)*ch)|0; 
                    xofs[k++] = ((sx1 - fsx1) * 0x100)|0;
                    xofs_count++;
                }
                for(sx = sx1; sx < sx2; sx++){
                    xofs_count++;
                    xofs[k++] = (dx * ch)|0;
                    xofs[k++] = (sx * ch)|0;
                    xofs[k++] = 256;
                }
                if(fsx2 - sx2 > 1e-3) {
                    xofs_count++;
                    xofs[k++] = (dx * ch)|0;
                    xofs[k++] = (sx2 * ch)|0;
                    xofs[k++] = ((fsx2 - sx2) * 256)|0;
                }
            }

            for (dx = 0; dx < nw * ch; dx++) {
                buf[dx] = sum[dx] = 0;
            }
            dy = 0;
            for (sy = 0; sy < h; sy++) {
                a = w * sy;
                for (k = 0; k < xofs_count; k++) {
                    dxn = xofs[k*3];
                    sx1 = xofs[k*3+1];
                    alpha = xofs[k*3+2];
                    for (i = 0; i < ch; i++) {
                        buf[dxn + i] += src_d[a+sx1+i] * alpha;
                    }
                }
                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {
                    beta = (Math.max(sy + 1 - (dy + 1) * scale_y, 0.0) * 256)|0;
                    beta1 = 256 - beta;
                    b = nw * dy;
                    if (beta <= 0) {
                        for (dx = 0; dx < nw * ch; dx++) {
                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * 256) / inv_scale_256, 0), 255);
                            sum[dx] = buf[dx] = 0;
                        }
                    } else {
                        for (dx = 0; dx < nw * ch; dx++) {
                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * beta1) / inv_scale_256, 0), 255);
                            sum[dx] = buf[dx] * beta;
                            buf[dx] = 0;
                        }
                    }
                    dy++;
                } else {
                    for(dx = 0; dx < nw * ch; dx++) {
                        sum[dx] += buf[dx] * 256;
                        buf[dx] = 0;
                    }
                }
            }

            jsfeat.cache.put_buffer(sum_node);
            jsfeat.cache.put_buffer(buf_node);
            jsfeat.cache.put_buffer(xofs_node);
        }

        var _resample = function(src, dst, nw, nh) {
            var xofs_count=0;
            var ch=src.channel,w=src.cols,h=src.rows;
            var src_d=src.data,dst_d=dst.data;
            var scale_x = w / nw, scale_y = h / nh;
            var scale = 1.0 / (scale_x * scale_y);
            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;
            var a=0,b=0,dxn=0,alpha=0.0,beta=0.0,beta1=0.0;

            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);
            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);
            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);

            var buf = buf_node.f32;
            var sum = sum_node.f32;
            var xofs = xofs_node.f32;

            for (; dx < nw; dx++) {
                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;
                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;
                sx1 = Math.min(sx1, w - 1);
                sx2 = Math.min(sx2, w - 1);

                if(sx1 > fsx1) {
                    xofs_count++;
                    xofs[k++] = ((sx1 - 1)*ch)|0;
                    xofs[k++] = (dx * ch)|0;
                    xofs[k++] = (sx1 - fsx1) * scale;
                }
                for(sx = sx1; sx < sx2; sx++){
                    xofs_count++;
                    xofs[k++] = (sx * ch)|0;
                    xofs[k++] = (dx * ch)|0; 
                    xofs[k++] = scale;
                }
                if(fsx2 - sx2 > 1e-3) {
                    xofs_count++;
                    xofs[k++] = (sx2 * ch)|0;
                    xofs[k++] = (dx * ch)|0;
                    xofs[k++] = (fsx2 - sx2) * scale;
                }
            }

            for (dx = 0; dx < nw * ch; dx++) {
                buf[dx] = sum[dx] = 0;
            }
            dy = 0;
            for (sy = 0; sy < h; sy++) {
                a = w * sy;
                for (k = 0; k < xofs_count; k++) {
                    sx1 = xofs[k*3]|0;
                    dxn = xofs[k*3+1]|0;
                    alpha = xofs[k*3+2];
                    for (i = 0; i < ch; i++) {
                        buf[dxn + i] += src_d[a+sx1+i] * alpha;
                    }
                }
                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {
                    beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0);
                    beta1 = 1.0 - beta;
                    b = nw * dy;
                    if (Math.abs(beta) < 1e-3) {
                        for (dx = 0; dx < nw * ch; dx++) {
                            dst_d[b+dx] = sum[dx] + buf[dx];
                            sum[dx] = buf[dx] = 0;
                        }
                    } else {
                        for (dx = 0; dx < nw * ch; dx++) {
                            dst_d[b+dx] = sum[dx] + buf[dx] * beta1;
                            sum[dx] = buf[dx] * beta;
                            buf[dx] = 0;
                        }
                    }
                    dy++;
                } else {
                    for(dx = 0; dx < nw * ch; dx++) {
                        sum[dx] += buf[dx]; 
                        buf[dx] = 0;
                    }
                }
            }
            jsfeat.cache.put_buffer(sum_node);
            jsfeat.cache.put_buffer(buf_node);
            jsfeat.cache.put_buffer(xofs_node);
        }

        var _convol_u8 = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {
            var i=0,j=0,k=0,sp=0,dp=0,sum=0,sum1=0,sum2=0,sum3=0,f0=filter[0],fk=0;
            var w2=w<<1,w3=w*3,w4=w<<2;
            // hor pass
            for (; i < h; ++i) { 
                sum = src_d[sp];
                for (j = 0; j < half_kernel; ++j) {
                    buf[j] = sum;
                }
                for (j = 0; j <= w-2; j+=2) {
                    buf[j + half_kernel] = src_d[sp+j];
                    buf[j + half_kernel+1] = src_d[sp+j+1];
                }
                for (; j < w; ++j) {
                    buf[j + half_kernel] = src_d[sp+j];
                }
                sum = src_d[sp+w-1];
                for (j = w; j < half_kernel + w; ++j) {
                    buf[j + half_kernel] = sum;
                }
                for (j = 0; j <= w-4; j+=4) {
                    sum = buf[j] * f0, 
                    sum1 = buf[j+1] * f0,
                    sum2 = buf[j+2] * f0,
                    sum3 = buf[j+3] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        fk = filter[k];
                        sum += buf[k + j] * fk;
                        sum1 += buf[k + j+1] * fk;
                        sum2 += buf[k + j+2] * fk;
                        sum3 += buf[k + j+3] * fk;
                    }
                    dst_d[dp+j] = Math.min(sum >> 8, 255);
                    dst_d[dp+j+1] = Math.min(sum1 >> 8, 255);
                    dst_d[dp+j+2] = Math.min(sum2 >> 8, 255);
                    dst_d[dp+j+3] = Math.min(sum3 >> 8, 255);
                }
                for (; j < w; ++j) {
                    sum = buf[j] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        sum += buf[k + j] * filter[k];
                    }
                    dst_d[dp+j] = Math.min(sum >> 8, 255);
                }
                sp += w;
                dp += w;
            }

            // vert pass
            for (i = 0; i < w; ++i) {
                sum = dst_d[i];
                for (j = 0; j < half_kernel; ++j) {
                    buf[j] = sum;
                }
                k = i;
                for (j = 0; j <= h-2; j+=2, k+=w2) {
                    buf[j+half_kernel] = dst_d[k];
                    buf[j+half_kernel+1] = dst_d[k+w];
                }
                for (; j < h; ++j, k+=w) {
                    buf[j+half_kernel] = dst_d[k];
                }
                sum = dst_d[(h-1)*w + i];
                for (j = h; j < half_kernel + h; ++j) {
                    buf[j + half_kernel] = sum;
                }
                dp = i;
                for (j = 0; j <= h-4; j+=4, dp+=w4) { 
                    sum = buf[j] * f0, 
                    sum1 = buf[j+1] * f0,
                    sum2 = buf[j+2] * f0,
                    sum3 = buf[j+3] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        fk = filter[k];
                        sum += buf[k + j] * fk;
                        sum1 += buf[k + j+1] * fk;
                        sum2 += buf[k + j+2] * fk;
                        sum3 += buf[k + j+3] * fk;
                    }
                    dst_d[dp] = Math.min(sum >> 8, 255);
                    dst_d[dp+w] = Math.min(sum1 >> 8, 255);
                    dst_d[dp+w2] = Math.min(sum2 >> 8, 255);
                    dst_d[dp+w3] = Math.min(sum3 >> 8, 255);
                }
                for (; j < h; ++j, dp+=w) {
                    sum = buf[j] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        sum += buf[k + j] * filter[k];
                    }
                    dst_d[dp] = Math.min(sum >> 8, 255);
                }
            }
        }

        var _convol = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {
            var i=0,j=0,k=0,sp=0,dp=0,sum=0.0,sum1=0.0,sum2=0.0,sum3=0.0,f0=filter[0],fk=0.0;
            var w2=w<<1,w3=w*3,w4=w<<2;
            // hor pass
            for (; i < h; ++i) { 
                sum = src_d[sp];
                for (j = 0; j < half_kernel; ++j) {
                    buf[j] = sum;
                }
                for (j = 0; j <= w-2; j+=2) {
                    buf[j + half_kernel] = src_d[sp+j];
                    buf[j + half_kernel+1] = src_d[sp+j+1];
                }
                for (; j < w; ++j) {
                    buf[j + half_kernel] = src_d[sp+j];
                }
                sum = src_d[sp+w-1];
                for (j = w; j < half_kernel + w; ++j) {
                    buf[j + half_kernel] = sum;
                }
                for (j = 0; j <= w-4; j+=4) {
                    sum = buf[j] * f0, 
                    sum1 = buf[j+1] * f0,
                    sum2 = buf[j+2] * f0,
                    sum3 = buf[j+3] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        fk = filter[k];
                        sum += buf[k + j] * fk;
                        sum1 += buf[k + j+1] * fk;
                        sum2 += buf[k + j+2] * fk;
                        sum3 += buf[k + j+3] * fk;
                    }
                    dst_d[dp+j] = sum;
                    dst_d[dp+j+1] = sum1;
                    dst_d[dp+j+2] = sum2;
                    dst_d[dp+j+3] = sum3;
                }
                for (; j < w; ++j) {
                    sum = buf[j] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        sum += buf[k + j] * filter[k];
                    }
                    dst_d[dp+j] = sum;
                }
                sp += w;
                dp += w;
            }

            // vert pass
            for (i = 0; i < w; ++i) {
                sum = dst_d[i];
                for (j = 0; j < half_kernel; ++j) {
                    buf[j] = sum;
                }
                k = i;
                for (j = 0; j <= h-2; j+=2, k+=w2) {
                    buf[j+half_kernel] = dst_d[k];
                    buf[j+half_kernel+1] = dst_d[k+w];
                }
                for (; j < h; ++j, k+=w) {
                    buf[j+half_kernel] = dst_d[k];
                }
                sum = dst_d[(h-1)*w + i];
                for (j = h; j < half_kernel + h; ++j) {
                    buf[j + half_kernel] = sum;
                }
                dp = i;
                for (j = 0; j <= h-4; j+=4, dp+=w4) { 
                    sum = buf[j] * f0, 
                    sum1 = buf[j+1] * f0,
                    sum2 = buf[j+2] * f0,
                    sum3 = buf[j+3] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        fk = filter[k];
                        sum += buf[k + j] * fk;
                        sum1 += buf[k + j+1] * fk;
                        sum2 += buf[k + j+2] * fk;
                        sum3 += buf[k + j+3] * fk;
                    }
                    dst_d[dp] = sum;
                    dst_d[dp+w] = sum1;
                    dst_d[dp+w2] = sum2;
                    dst_d[dp+w3] = sum3;
                }
                for (; j < h; ++j, dp+=w) {
                    sum = buf[j] * f0;
                    for (k = 1; k < kernel_size; ++k) {
                        sum += buf[k + j] * filter[k];
                    }
                    dst_d[dp] = sum;
                }
            }
        }

        return {
            // TODO: add support for RGB/BGR order
            // for raw arrays
            grayscale: function(src, w, h, dst, code) {
                // this is default image data representation in browser
                if (typeof code === "undefined") { code = jsfeat.COLOR_RGBA2GRAY; }
                var x=0, y=0, i=0, j=0, ir=0,jr=0;
                var coeff_r = 4899, coeff_g = 9617, coeff_b = 1868, cn = 4;

                if(code == jsfeat.COLOR_BGRA2GRAY || code == jsfeat.COLOR_BGR2GRAY) {
                    coeff_r = 1868;
                    coeff_b = 4899;
                }
                if(code == jsfeat.COLOR_RGB2GRAY || code == jsfeat.COLOR_BGR2GRAY) {
                    cn = 3;
                }
                var cn2 = cn<<1, cn3 = (cn*3)|0;

                dst.resize(w, h, 1);
                var dst_u8 = dst.data;

                for(y = 0; y < h; ++y, j+=w, i+=w*cn) {
                    for(x = 0, ir = i, jr = j; x <= w-4; x+=4, ir+=cn<<2, jr+=4) {
                        dst_u8[jr]     = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;
                        dst_u8[jr + 1] = (src[ir+cn] * coeff_r + src[ir+cn+1] * coeff_g + src[ir+cn+2] * coeff_b + 8192) >> 14;
                        dst_u8[jr + 2] = (src[ir+cn2] * coeff_r + src[ir+cn2+1] * coeff_g + src[ir+cn2+2] * coeff_b + 8192) >> 14;
                        dst_u8[jr + 3] = (src[ir+cn3] * coeff_r + src[ir+cn3+1] * coeff_g + src[ir+cn3+2] * coeff_b + 8192) >> 14;
                    }
                    for (; x < w; ++x, ++jr, ir+=cn) {
                        dst_u8[jr] = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;
                    }
                }
            },
            // derived from CCV library
            resample: function(src, dst, nw, nh) {
                var h=src.rows,w=src.cols;
                if (h > nh && w > nw) {
                    dst.resize(nw, nh, src.channel);
                    // using the fast alternative (fix point scale, 0x100 to avoid overflow)
                    if (src.type&jsfeat.U8_t && dst.type&jsfeat.U8_t && h * w / (nh * nw) < 0x100) {
                        _resample_u8(src, dst, nw, nh);
                    } else {
                        _resample(src, dst, nw, nh);
                    }
                }
            },

            box_blur_gray: function(src, dst, radius, options) {
                if (typeof options === "undefined") { options = 0; }
                var w=src.cols, h=src.rows, h2=h<<1, w2=w<<1;
                var i=0,x=0,y=0,end=0;
                var windowSize = ((radius << 1) + 1)|0;
                var radiusPlusOne = (radius + 1)|0, radiusPlus2 = (radiusPlusOne+1)|0;
                var scale = options&jsfeat.BOX_BLUR_NOSCALE ? 1 : (1.0 / (windowSize*windowSize));

                var tmp_buff = jsfeat.cache.get_buffer((w*h)<<2);

                var sum=0, dstIndex=0, srcIndex = 0, nextPixelIndex=0, previousPixelIndex=0;
                var data_i32 = tmp_buff.i32; // to prevent overflow
                var data_u8 = src.data;
                var hold=0;

                dst.resize(w, h, src.channel);

                // first pass
                // no need to scale 
                //data_u8 = src.data;
                //data_i32 = tmp;
                for (y = 0; y < h; ++y) {
                    dstIndex = y;
                    sum = radiusPlusOne * data_u8[srcIndex];

                    for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {
                        sum += data_u8[i];
                    }

                    nextPixelIndex = (srcIndex + radiusPlusOne)|0;
                    previousPixelIndex = srcIndex;
                    hold = data_u8[previousPixelIndex];
                    for(x = 0; x < radius; ++x, dstIndex += h) {
                        data_i32[dstIndex] = sum;
                        sum += data_u8[nextPixelIndex]- hold;
                        nextPixelIndex ++;
                    }
                    for(; x < w-radiusPlus2; x+=2, dstIndex += h2) {
                        data_i32[dstIndex] = sum;
                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];

                        data_i32[dstIndex+h] = sum;
                        sum += data_u8[nextPixelIndex+1]- data_u8[previousPixelIndex+1];

                        nextPixelIndex +=2;
                        previousPixelIndex +=2;
                    }
                    for(; x < w-radiusPlusOne; ++x, dstIndex += h) {
                        data_i32[dstIndex] = sum;
                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];

                        nextPixelIndex ++;
                        previousPixelIndex ++;
                    }
                    
                    hold = data_u8[nextPixelIndex-1];
                    for(; x < w; ++x, dstIndex += h) {
                        data_i32[dstIndex] = sum;

                        sum += hold- data_u8[previousPixelIndex];
                        previousPixelIndex ++;
                    }

                    srcIndex += w;
                }
                //
                // second pass
                srcIndex = 0;
                //data_i32 = tmp; // this is a transpose
                data_u8 = dst.data;

                // dont scale result
                if(scale == 1) {
                    for (y = 0; y < w; ++y) {
                        dstIndex = y;
                        sum = radiusPlusOne * data_i32[srcIndex];

                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {
                            sum += data_i32[i];
                        }

                        nextPixelIndex = srcIndex + radiusPlusOne;
                        previousPixelIndex = srcIndex;
                        hold = data_i32[previousPixelIndex];

                        for(x = 0; x < radius; ++x, dstIndex += w) {
                            data_u8[dstIndex] = sum;
                            sum += data_i32[nextPixelIndex]- hold;
                            nextPixelIndex ++;
                        }
                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {
                            data_u8[dstIndex] = sum;
                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];

                            data_u8[dstIndex+w] = sum;
                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];

                            nextPixelIndex +=2;
                            previousPixelIndex +=2;
                        }
                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {
                            data_u8[dstIndex] = sum;

                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];
                            nextPixelIndex ++;
                            previousPixelIndex ++;
                        }
                        hold = data_i32[nextPixelIndex-1];
                        for(; x < h; ++x, dstIndex += w) {
                            data_u8[dstIndex] = sum;

                            sum += hold- data_i32[previousPixelIndex];
                            previousPixelIndex ++;
                        }

                        srcIndex += h;
                    }
                } else {
                    for (y = 0; y < w; ++y) {
                        dstIndex = y;
                        sum = radiusPlusOne * data_i32[srcIndex];

                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {
                            sum += data_i32[i];
                        }

                        nextPixelIndex = srcIndex + radiusPlusOne;
                        previousPixelIndex = srcIndex;
                        hold = data_i32[previousPixelIndex];

                        for(x = 0; x < radius; ++x, dstIndex += w) {
                            data_u8[dstIndex] = sum*scale;
                            sum += data_i32[nextPixelIndex]- hold;
                            nextPixelIndex ++;
                        }
                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {
                            data_u8[dstIndex] = sum*scale;
                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];

                            data_u8[dstIndex+w] = sum*scale;
                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];

                            nextPixelIndex +=2;
                            previousPixelIndex +=2;
                        }
                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {
                            data_u8[dstIndex] = sum*scale;

                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];
                            nextPixelIndex ++;
                            previousPixelIndex ++;
                        }
                        hold = data_i32[nextPixelIndex-1];
                        for(; x < h; ++x, dstIndex += w) {
                            data_u8[dstIndex] = sum*scale;

                            sum += hold- data_i32[previousPixelIndex];
                            previousPixelIndex ++;
                        }

                        srcIndex += h;
                    }
                }

                jsfeat.cache.put_buffer(tmp_buff);
            },

            gaussian_blur: function(src, dst, kernel_size, sigma) {
                if (typeof sigma === "undefined") { sigma = 0.0; }
                if (typeof kernel_size === "undefined") { kernel_size = 0; }
                kernel_size = kernel_size == 0 ? (Math.max(1, (4.0 * sigma + 1.0 - 1e-8)) * 2 + 1)|0 : kernel_size;
                var half_kernel = kernel_size >> 1;
                var w = src.cols, h = src.rows;
                var data_type = src.type, is_u8 = data_type&jsfeat.U8_t;

                dst.resize(w, h, src.channel);

                var src_d = src.data, dst_d = dst.data;
                var buf,filter,buf_sz=(kernel_size + Math.max(h, w))|0;

                var buf_node = jsfeat.cache.get_buffer(buf_sz<<2);
                var filt_node = jsfeat.cache.get_buffer(kernel_size<<2);

                if(is_u8) {
                    buf = buf_node.i32;
                    filter = filt_node.i32;
                } else if(data_type&jsfeat.S32_t) {
                    buf = buf_node.i32;
                    filter = filt_node.f32;
                } else {
                    buf = buf_node.f32;
                    filter = filt_node.f32;
                }

                jsfeat.math.get_gaussian_kernel(kernel_size, sigma, filter, data_type);

                if(is_u8) {
                    _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);
                } else {
                    _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);
                }

                jsfeat.cache.put_buffer(buf_node);
                jsfeat.cache.put_buffer(filt_node);
            },
            // assume we always need it for u8 image
            pyrdown: function(src, dst, sx, sy) {
                // this is needed for bbf
                if (typeof sx === "undefined") { sx = 0; }
                if (typeof sy === "undefined") { sy = 0; }

                var w = src.cols, h = src.rows;
                var w2 = w >> 1, h2 = h >> 1;
                var _w2 = w2 - (sx << 1), _h2 = h2 - (sy << 1);
                var x=0,y=0,sptr=sx+sy*w,sline=0,dptr=0,dline=0;

                dst.resize(w2, h2, src.channel);

                var src_d = src.data, dst_d = dst.data;

                for(y = 0; y < _h2; ++y) {
                    sline = sptr;
                    dline = dptr;
                    for(x = 0; x <= _w2-2; x+=2, dline+=2, sline += 4) {
                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +
                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;
                        dst_d[dline+1] = (src_d[sline+2] + src_d[sline+3] +
                                            src_d[sline+w+2] + src_d[sline+w+3] + 2) >> 2;
                    }
                    for(; x < _w2; ++x, ++dline, sline += 2) {
                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +
                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;
                    }
                    sptr += w << 1;
                    dptr += w2;
                }
            },

            // dst: [gx,gy,...]
            scharr_derivatives: function(src, dst) {
                var w = src.cols, h = src.rows;
                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;
                var srow0=0,srow1=0,srow2=0,drow=0;
                var trow0,trow1;

                dst.resize(w, h, 2); // 2 channel output gx, gy

                var img = src.data, gxgy=dst.data;

                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);
                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);

                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {
                    trow0 = buf0_node.i32;
                    trow1 = buf1_node.i32;
                } else {
                    trow0 = buf0_node.f32;
                    trow1 = buf1_node.f32;
                }

                for(; y < h; ++y, srow1+=w) {
                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;
                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;
                    drow = (y*dstep)|0;
                    // do vertical convolution
                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {
                        a = img[srow0+x], b = img[srow2+x];
                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );
                        trow1[x1] = ( b - a );
                        //
                        a = img[srow0+x+1], b = img[srow2+x+1];
                        trow0[x1+1] = ( (a + b)*3 + (img[srow1+x+1])*10 );
                        trow1[x1+1] = ( b - a );
                    }
                    for(; x < w; ++x, ++x1) {
                        a = img[srow0+x], b = img[srow2+x];
                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );
                        trow1[x1] = ( b - a );
                    }
                    // make border
                    x = (w + 1)|0;
                    trow0[0] = trow0[1]; trow0[x] = trow0[w];
                    trow1[0] = trow1[1]; trow1[x] = trow1[w];
                    // do horizontal convolution, interleave the results and store them
                    for(x = 0; x <= w-4; x+=4) {
                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],
                        e = trow0[x+2], f = trow0[x+3];
                        gxgy[drow++] = ( e - trow0[x] );
                        gxgy[drow++] = ( (a + trow1[x])*3 + b*10 );
                        gxgy[drow++] = ( f - trow0[x+1] );
                        gxgy[drow++] = ( (c + b)*3 + a*10 );

                        gxgy[drow++] = ( (trow0[x+4] - e) );
                        gxgy[drow++] = ( ((d + a)*3 + c*10) );
                        gxgy[drow++] = ( (trow0[x+5] - f) );
                        gxgy[drow++] = ( ((trow1[x+5] + c)*3 + d*10) );
                    }
                    for(; x < w; ++x) {
                        gxgy[drow++] = ( (trow0[x+2] - trow0[x]) );
                        gxgy[drow++] = ( ((trow1[x+2] + trow1[x])*3 + trow1[x+1]*10) );
                    }
                }
                jsfeat.cache.put_buffer(buf0_node);
                jsfeat.cache.put_buffer(buf1_node);
            },

            // compute gradient using Sobel kernel [1 2 1] * [-1 0 1]^T
            // dst: [gx,gy,...]
            sobel_derivatives: function(src, dst) {
                var w = src.cols, h = src.rows;
                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;
                var srow0=0,srow1=0,srow2=0,drow=0;
                var trow0,trow1;

                dst.resize(w, h, 2); // 2 channel output gx, gy

                var img = src.data, gxgy=dst.data;

                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);
                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);

                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {
                    trow0 = buf0_node.i32;
                    trow1 = buf1_node.i32;
                } else {
                    trow0 = buf0_node.f32;
                    trow1 = buf1_node.f32;
                }

                for(; y < h; ++y, srow1+=w) {
                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;
                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;
                    drow = (y*dstep)|0;
                    // do vertical convolution
                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {
                        a = img[srow0+x], b = img[srow2+x];
                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );
                        trow1[x1] = ( b - a );
                        //
                        a = img[srow0+x+1], b = img[srow2+x+1];
                        trow0[x1+1] = ( (a + b) + (img[srow1+x+1]*2) );
                        trow1[x1+1] = ( b - a );
                    }
                    for(; x < w; ++x, ++x1) {
                        a = img[srow0+x], b = img[srow2+x];
                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );
                        trow1[x1] = ( b - a );
                    }
                    // make border
                    x = (w + 1)|0;
                    trow0[0] = trow0[1]; trow0[x] = trow0[w];
                    trow1[0] = trow1[1]; trow1[x] = trow1[w];
                    // do horizontal convolution, interleave the results and store them
                    for(x = 0; x <= w-4; x+=4) {
                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],
                        e = trow0[x+2], f = trow0[x+3];
                        gxgy[drow++] = ( e - trow0[x] );
                        gxgy[drow++] = ( a + trow1[x] + b*2 );
                        gxgy[drow++] = ( f - trow0[x+1] );
                        gxgy[drow++] = ( c + b + a*2 );

                        gxgy[drow++] = ( trow0[x+4] - e );
                        gxgy[drow++] = ( d + a + c*2 );
                        gxgy[drow++] = ( trow0[x+5] - f );
                        gxgy[drow++] = ( trow1[x+5] + c + d*2 );
                    }
                    for(; x < w; ++x) {
                        gxgy[drow++] = ( trow0[x+2] - trow0[x] );
                        gxgy[drow++] = ( trow1[x+2] + trow1[x] + trow1[x+1]*2 );
                    }
                }
                jsfeat.cache.put_buffer(buf0_node);
                jsfeat.cache.put_buffer(buf1_node);
            },

            // please note: 
            // dst_(type) size should be cols = src.cols+1, rows = src.rows+1
            compute_integral_image: function(src, dst_sum, dst_sqsum, dst_tilted) {
                var w0=src.cols|0,h0=src.rows|0,src_d=src.data;
                var w1=(w0+1)|0;
                var s=0,s2=0,p=0,pup=0,i=0,j=0,v=0,k=0;

                if(dst_sum && dst_sqsum) {
                    // fill first row with zeros
                    for(; i < w1; ++i) {
                        dst_sum[i] = 0, dst_sqsum[i] = 0;
                    }
                    p = (w1+1)|0, pup = 1;
                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {
                        s = s2 = 0;
                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {
                            v = src_d[k];
                            s += v, s2 += v*v;
                            dst_sum[p] = dst_sum[pup] + s;
                            dst_sqsum[p] = dst_sqsum[pup] + s2;

                            v = src_d[k+1];
                            s += v, s2 += v*v;
                            dst_sum[p+1] = dst_sum[pup+1] + s;
                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;
                        }
                        for(; j < w0; ++j, ++k, ++p, ++pup) {
                            v = src_d[k];
                            s += v, s2 += v*v;
                            dst_sum[p] = dst_sum[pup] + s;
                            dst_sqsum[p] = dst_sqsum[pup] + s2;
                        }
                    }
                } else if(dst_sum) {
                    // fill first row with zeros
                    for(; i < w1; ++i) {
                        dst_sum[i] = 0;
                    }
                    p = (w1+1)|0, pup = 1;
                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {
                        s = 0;
                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {
                            s += src_d[k];
                            dst_sum[p] = dst_sum[pup] + s;
                            s += src_d[k+1];
                            dst_sum[p+1] = dst_sum[pup+1] + s;
                        }
                        for(; j < w0; ++j, ++k, ++p, ++pup) {
                            s += src_d[k];
                            dst_sum[p] = dst_sum[pup] + s;
                        }
                    }
                } else if(dst_sqsum) {
                    // fill first row with zeros
                    for(; i < w1; ++i) {
                        dst_sqsum[i] = 0;
                    }
                    p = (w1+1)|0, pup = 1;
                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {
                        s2 = 0;
                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {
                            v = src_d[k];
                            s2 += v*v;
                            dst_sqsum[p] = dst_sqsum[pup] + s2;
                            v = src_d[k+1];
                            s2 += v*v;
                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;
                        }
                        for(; j < w0; ++j, ++k, ++p, ++pup) {
                            v = src_d[k];
                            s2 += v*v;
                            dst_sqsum[p] = dst_sqsum[pup] + s2;
                        }
                    }
                }

                if(dst_tilted) {
                    // fill first row with zeros
                    for(i = 0; i < w1; ++i) {
                        dst_tilted[i] = 0;
                    }
                    // diagonal
                    p = (w1+1)|0, pup = 0;
                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {
                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {
                            dst_tilted[p] = src_d[k] + dst_tilted[pup];
                            dst_tilted[p+1] = src_d[k+1] + dst_tilted[pup+1];
                        }
                        for(; j < w0; ++j, ++k, ++p, ++pup) {
                            dst_tilted[p] = src_d[k] + dst_tilted[pup];
                        }
                    }
                    // diagonal
                    p = (w1+w0)|0, pup = w0;
                    for(i = 0; i < h0; ++i, p+=w1, pup+=w1) {
                        dst_tilted[p] += dst_tilted[pup];
                    }

                    for(j = w0-1; j > 0; --j) {
                        p = j+h0*w1, pup=p-w1;
                        for(i = h0; i > 0; --i, p-=w1, pup-=w1) {
                            dst_tilted[p] += dst_tilted[pup] + dst_tilted[pup+1];
                        }
                    }
                }
            },
            equalize_histogram: function(src, dst) {
                var w=src.cols,h=src.rows,src_d=src.data;

                dst.resize(w, h, src.channel);

                var dst_d=dst.data,size=w*h;
                var i=0,prev=0,hist0,norm;

                var hist0_node = jsfeat.cache.get_buffer(256<<2);
                hist0 = hist0_node.i32;
                for(; i < 256; ++i) hist0[i] = 0;
                for (i = 0; i < size; ++i) {
                    ++hist0[src_d[i]];
                }

                prev = hist0[0];
                for (i = 1; i < 256; ++i) {
                    prev = hist0[i] += prev;
                }

                norm = 255 / size;
                for (i = 0; i < size; ++i) {
                    dst_d[i] = (hist0[src_d[i]] * norm + 0.5)|0;
                }
                jsfeat.cache.put_buffer(hist0_node);
            },

            canny: function(src, dst, low_thresh, high_thresh) {
                var w=src.cols,h=src.rows,src_d=src.data;

                dst.resize(w, h, src.channel);
                
                var dst_d=dst.data;
                var i=0,j=0,grad=0,w2=w<<1,_grad=0,suppress=0,f=0,x=0,y=0,s=0;
                var tg22x=0,tg67x=0;

                // cache buffers
                var dxdy_node = jsfeat.cache.get_buffer((h * w2)<<2);
                var buf_node = jsfeat.cache.get_buffer((3 * (w + 2))<<2);
                var map_node = jsfeat.cache.get_buffer(((h+2) * (w + 2))<<2);
                var stack_node = jsfeat.cache.get_buffer((h * w)<<2);
                

                var buf = buf_node.i32;
                var map = map_node.i32;
                var stack = stack_node.i32;
                var dxdy = dxdy_node.i32;
                var dxdy_m = new jsfeat.matrix_t(w, h, jsfeat.S32C2_t, dxdy_node.data);
                var row0=1,row1=(w+2+1)|0,row2=(2*(w+2)+1)|0,map_w=(w+2)|0,map_i=(map_w+1)|0,stack_i=0;

                this.sobel_derivatives(src, dxdy_m);

                if(low_thresh > high_thresh) {
                    i = low_thresh;
                    low_thresh = high_thresh;
                    high_thresh = i;
                }

                i = (3 * (w + 2))|0;
                while(--i>=0) {
                    buf[i] = 0;
                }

                i = ((h+2) * (w + 2))|0;
                while(--i>=0) {
                    map[i] = 0;
                }

                for (; j < w; ++j, grad+=2) {
                    //buf[row1+j] = Math.abs(dxdy[grad]) + Math.abs(dxdy[grad+1]);
                    x = dxdy[grad], y = dxdy[grad+1];
                    //buf[row1+j] = x*x + y*y;
                    buf[row1+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));
                }

                for(i=1; i <= h; ++i, grad+=w2) {
                    if(i == h) {
                        j = row2+w;
                        while(--j>=row2) {
                            buf[j] = 0;
                        }
                    } else {
                        for (j = 0; j < w; j++) {
                            //buf[row2+j] =  Math.abs(dxdy[grad+(j<<1)]) + Math.abs(dxdy[grad+(j<<1)+1]);
                            x = dxdy[grad+(j<<1)], y = dxdy[grad+(j<<1)+1];
                            //buf[row2+j] = x*x + y*y;
                            buf[row2+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));
                        }
                    }
                    _grad = (grad - w2)|0;
                    map[map_i-1] = 0;
                    suppress = 0;
                    for(j = 0; j < w; ++j, _grad+=2) {
                        f = buf[row1+j];
                        if (f > low_thresh) {
                            x = dxdy[_grad];
                            y = dxdy[_grad+1];
                            s = x ^ y;
                            // seems ot be faster than Math.abs
                            x = ((x ^ (x >> 31)) - (x >> 31))|0;
                            y = ((y ^ (y >> 31)) - (y >> 31))|0;
                            //x * tan(22.5) x * tan(67.5) == 2 * x + x * tan(22.5)
                            tg22x = x * 13573;
                            tg67x = tg22x + ((x + x) << 15);
                            y <<= 15;
                            if (y < tg22x) {
                                if (f > buf[row1+j-1] && f >= buf[row1+j+1]) {
                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {
                                        map[map_i+j] = 2;
                                        suppress = 1;
                                        stack[stack_i++] = map_i + j;
                                    } else {
                                        map[map_i+j] = 1;
                                    }
                                    continue;
                                }
                            } else if (y > tg67x) {
                                if (f > buf[row0+j] && f >= buf[row2+j]) {
                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {
                                        map[map_i+j] = 2;
                                        suppress = 1;
                                        stack[stack_i++] = map_i + j;
                                    } else {
                                        map[map_i+j] = 1;
                                    }
                                    continue;
                                }
                            } else {
                                s = s < 0 ? -1 : 1;
                                if (f > buf[row0+j-s] && f > buf[row2+j+s]) {
                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {
                                        map[map_i+j] = 2;
                                        suppress = 1;
                                        stack[stack_i++] = map_i + j;
                                    } else {
                                        map[map_i+j] = 1;
                                    }
                                    continue;
                                }
                            }
                        }
                        map[map_i+j] = 0;
                        suppress = 0;
                    }
                    map[map_i+w] = 0;
                    map_i += map_w;
                    j = row0;
                    row0 = row1;
                    row1 = row2;
                    row2 = j;
                }

                j = map_i - map_w - 1;
                for(i = 0; i < map_w; ++i, ++j) {
                    map[j] = 0;
                }
                // path following
                while(stack_i > 0) {
                    map_i = stack[--stack_i];
                    map_i -= map_w+1;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i += 1;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i += 1;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i += map_w;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i -= 2;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i += map_w;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i += 1;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                    map_i += 1;
                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;
                }

                map_i = map_w + 1;
                row0 = 0;
                for(i = 0; i < h; ++i, map_i+=map_w) {
                    for(j = 0; j < w; ++j) {
                        dst_d[row0++] = (map[map_i+j] == 2) * 0xff;
                    }
                }

                // free buffers
                jsfeat.cache.put_buffer(dxdy_node);
                jsfeat.cache.put_buffer(buf_node);
                jsfeat.cache.put_buffer(map_node);
                jsfeat.cache.put_buffer(stack_node);
            },
            // transform is 3x3 matrix_t
            warp_perspective: function(src, dst, transform, fill_value) {
                if (typeof fill_value === "undefined") { fill_value = 0; }
                var src_width=src.cols|0, src_height=src.rows|0, dst_width=dst.cols|0, dst_height=dst.rows|0;
                var src_d=src.data, dst_d=dst.data;
                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,xs0=0.0,ys0=0.0,ws=0.0,sc=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;
                var td=transform.data;
                var m00=td[0],m01=td[1],m02=td[2],
                    m10=td[3],m11=td[4],m12=td[5],
                    m20=td[6],m21=td[7],m22=td[8];

                for(var dptr = 0; y < dst_height; ++y) {
                    xs0 = m01 * y + m02,
                    ys0 = m11 * y + m12,
                    ws  = m21 * y + m22;
                    for(x = 0; x < dst_width; ++x, ++dptr, xs0+=m00, ys0+=m10, ws+=m20) {
                        sc = 1.0 / ws;
                        xs = xs0 * sc, ys = ys0 * sc;
                        ixs = xs | 0, iys = ys | 0;

                        if(xs > 0 && ys > 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {
                            a = Math.max(xs - ixs, 0.0);
                            b = Math.max(ys - iys, 0.0);
                            off = (src_width*iys + ixs)|0;

                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);
                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);

                            dst_d[dptr] = p0 + b * (p1 - p0);
                        }
                        else dst_d[dptr] = fill_value;
                    }
                }
            },
            // transform is 3x3 or 2x3 matrix_t only first 6 values referenced
            warp_affine: function(src, dst, transform, fill_value) {
                if (typeof fill_value === "undefined") { fill_value = 0; }
                var src_width=src.cols, src_height=src.rows, dst_width=dst.cols, dst_height=dst.rows;
                var src_d=src.data, dst_d=dst.data;
                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;
                var td=transform.data;
                var m00=td[0],m01=td[1],m02=td[2],
                    m10=td[3],m11=td[4],m12=td[5];

                for(var dptr = 0; y < dst_height; ++y) {
                    xs = m01 * y + m02;
                    ys = m11 * y + m12;
                    for(x = 0; x < dst_width; ++x, ++dptr, xs+=m00, ys+=m10) {
                        ixs = xs | 0; iys = ys | 0;

                        if(ixs >= 0 && iys >= 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {
                            a = xs - ixs;
                            b = ys - iys;
                            off = src_width*iys + ixs;

                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);
                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);

                            dst_d[dptr] = p0 + b * (p1 - p0);
                        }
                        else dst_d[dptr] = fill_value;
                    }
                }
            },
            
            // Basic RGB Skin detection filter
            // from http://popscan.blogspot.fr/2012/08/skin-detection-in-digital-images.html
            skindetector: function(src,dst) {
                var r,g,b,j;
                var i = src.width*src.height;
                while(i--){
                    j = i*4;
                    r = src.data[j];
                    g = src.data[j+1];
                    b = src.data[j+2];
                    if((r>95)&&(g>40)&&(b>20)
                     &&(r>g)&&(r>b)
                     &&(r-Math.min(g,b)>15)
                     &&(Math.abs(r-g)>15)){
                         dst[i] = 255;
                    } else {
                        dst[i] = 0;
                    }
                }                
            }
        };
    })();

    global.imgproc = imgproc;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * This is FAST corner detector, contributed to OpenCV by the author, Edward Rosten.
 */

/*
The references are:
 * Machine learning for high-speed corner detection,
   E. Rosten and T. Drummond, ECCV 2006
 * Faster and better: A machine learning approach to corner detection
   E. Rosten, R. Porter and T. Drummond, PAMI, 2009  
*/

(function(global) {
    "use strict";
    //
    var fast_corners = (function() {

        var offsets16 = new Int32Array([0, 3, 1, 3, 2, 2, 3, 1, 3, 0, 3, -1, 2, -2, 1, -3, 0, -3, -1, -3, -2, -2, -3, -1, -3, 0, -3, 1, -2, 2, -1, 3]);

        var threshold_tab = new Uint8Array(512);
        var pixel_off = new Int32Array(25);
        var score_diff = new Int32Array(25);

        // private functions
        var _cmp_offsets = function(pixel, step, pattern_size) {
            var k = 0;
            var offsets = offsets16;
            for( ; k < pattern_size; ++k ) {
                pixel[k] = offsets[k<<1] + offsets[(k<<1)+1] * step;
            }
            for( ; k < 25; ++k ) {
                pixel[k] = pixel[k - pattern_size];
            }
        },

        _cmp_score_16 = function(src, off, pixel, d, threshold) {
            var N = 25, k = 0, v = src[off];
            var a0 = threshold,a=0,b0=0,b=0;

            for( ; k < N; ++k ) {
                d[k] = v - src[off+pixel[k]];
            }

            for( k = 0; k < 16; k += 2 ) {
                a = Math.min(d[k+1], d[k+2]);
                a = Math.min(a, d[k+3]);

                if( a <= a0 ) continue;

                a = Math.min(a, d[k+4]);
                a = Math.min(a, d[k+5]);
                a = Math.min(a, d[k+6]);
                a = Math.min(a, d[k+7]);
                a = Math.min(a, d[k+8]);
                a0 = Math.max(a0, Math.min(a, d[k]));
                a0 = Math.max(a0, Math.min(a, d[k+9]));
            }

            b0 = -a0;
            for( k = 0; k < 16; k += 2 ) {
                b = Math.max(d[k+1], d[k+2]);
                b = Math.max(b, d[k+3]);
                b = Math.max(b, d[k+4]);
                b = Math.max(b, d[k+5]);

                if( b >= b0 ) continue;
                b = Math.max(b, d[k+6]);
                b = Math.max(b, d[k+7]);
                b = Math.max(b, d[k+8]);
                b0 = Math.min(b0, Math.max(b, d[k]));
                b0 = Math.min(b0, Math.max(b, d[k+9]));
            }

            return -b0-1;
        };

        var _threshold = 20;

        return {
            set_threshold: function(threshold) {
                _threshold = Math.min(Math.max(threshold, 0), 255);
                for (var i = -255; i <= 255; ++i) {
                    threshold_tab[(i + 255)] = (i < -_threshold ? 1 : (i > _threshold ? 2 : 0));
                }
                return _threshold;
            },
            
            detect: function(src, corners, border) {
                if (typeof border === "undefined") { border = 3; }

                var K = 8, N = 25;
                var img = src.data, w = src.cols, h = src.rows;
                var i=0, j=0, k=0, vt=0, x=0, m3=0;
                var buf_node = jsfeat.cache.get_buffer(3 * w);
                var cpbuf_node = jsfeat.cache.get_buffer(((w+1)*3)<<2);
                var buf = buf_node.u8;
                var cpbuf = cpbuf_node.i32;
                var pixel = pixel_off;
                var sd = score_diff;
                var sy = Math.max(3, border);
                var ey = Math.min((h-2), (h-border));
                var sx = Math.max(3, border);
                var ex = Math.min((w - 3), (w - border));
                var _count = 0, corners_cnt = 0, pt;
                var score_func = _cmp_score_16;
                var thresh_tab = threshold_tab;
                var threshold = _threshold;

                var v=0,tab=0,d=0,ncorners=0,cornerpos=0,curr=0,ptr=0,prev=0,pprev=0;
                var jp1=0,jm1=0,score=0;

                _cmp_offsets(pixel, w, 16);

                // local vars are faster?
                var pixel0 = pixel[0];
                var pixel1 = pixel[1];
                var pixel2 = pixel[2];
                var pixel3 = pixel[3];
                var pixel4 = pixel[4];
                var pixel5 = pixel[5];
                var pixel6 = pixel[6];
                var pixel7 = pixel[7];
                var pixel8 = pixel[8];
                var pixel9 = pixel[9];
                var pixel10 = pixel[10];
                var pixel11 = pixel[11];
                var pixel12 = pixel[12];
                var pixel13 = pixel[13];
                var pixel14 = pixel[14];
                var pixel15 = pixel[15];

                for(i = 0; i < w*3; ++i) {
                    buf[i] = 0;
                }

                for(i = sy; i < ey; ++i) {
                    ptr = ((i * w) + sx)|0;
                    m3 = (i - 3)%3;
                    curr = (m3*w)|0;
                    cornerpos = (m3*(w+1))|0;
                    for (j = 0; j < w; ++j) buf[curr+j] = 0;
                    ncorners = 0;
                    
                    if( i < (ey - 1) ) {
                        j = sx;
                        
                        for( ; j < ex; ++j, ++ptr ) {
                            v = img[ptr];
                            tab = ( - v + 255 );
                            d = ( thresh_tab[tab+img[ptr+pixel0]] | thresh_tab[tab+img[ptr+pixel8]] );
                            
                            if( d == 0 ) {
                                continue;
                            }
                            
                            d &= ( thresh_tab[tab+img[ptr+pixel2]] | thresh_tab[tab+img[ptr+pixel10]] );
                            d &= ( thresh_tab[tab+img[ptr+pixel4]] | thresh_tab[tab+img[ptr+pixel12]] );
                            d &= ( thresh_tab[tab+img[ptr+pixel6]] | thresh_tab[tab+img[ptr+pixel14]] );
                            
                            if( d == 0 ) {
                                continue;
                            }
                            
                            d &= ( thresh_tab[tab+img[ptr+pixel1]] | thresh_tab[tab+img[ptr+pixel9]] );
                            d &= ( thresh_tab[tab+img[ptr+pixel3]] | thresh_tab[tab+img[ptr+pixel11]] );
                            d &= ( thresh_tab[tab+img[ptr+pixel5]] | thresh_tab[tab+img[ptr+pixel13]] );
                            d &= ( thresh_tab[tab+img[ptr+pixel7]] | thresh_tab[tab+img[ptr+pixel15]] );
                            
                            if( d & 1 ) {
                                vt = (v - threshold);
                                _count = 0;
                                
                                for( k = 0; k < N; ++k ) {
                                    x = img[(ptr+pixel[k])];
                                    if(x < vt) {
                                        ++_count;
                                        if( _count > K ) {
                                            ++ncorners;
                                            cpbuf[cornerpos+ncorners] = j;
                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);
                                            break;
                                        }
                                    }
                                    else {
                                        _count = 0;
                                    }
                                }
                            }
                            
                            if( d & 2 ) {
                                vt = (v + threshold);
                                _count = 0;
                                
                                for( k = 0; k < N; ++k ) {
                                    x = img[(ptr+pixel[k])];
                                    if(x > vt) {
                                        ++_count;
                                        if( _count > K ) {
                                            ++ncorners;
                                            cpbuf[cornerpos+ncorners] = j;
                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);
                                            break;
                                        }
                                    }
                                    else {
                                        _count = 0;
                                    }
                                }
                            }
                        }
                    }
                    
                    cpbuf[cornerpos+w] = ncorners;
            
                    if ( i == sy ) {
                        continue;
                    }
                    
                    m3 = (i - 4 + 3)%3;
                    prev = (m3*w)|0;
                    cornerpos = (m3*(w+1))|0;
                    m3 = (i - 5 + 3)%3;
                    pprev = (m3*w)|0;

                    ncorners = cpbuf[cornerpos+w];
                    
                    for( k = 0; k < ncorners; ++k ) {
                        j = cpbuf[cornerpos+k];
                        jp1 = (j+1)|0;
                        jm1 = (j-1)|0;
                        score = buf[prev+j];
                        if( (score > buf[prev+jp1] && score > buf[prev+jm1] &&
                            score > buf[pprev+jm1] && score > buf[pprev+j] && score > buf[pprev+jp1] &&
                            score > buf[curr+jm1] && score > buf[curr+j] && score > buf[curr+jp1]) ) {
                            // save corner
                            pt = corners[corners_cnt];
                            pt.x = j, pt.y = (i-1), pt.score = score;
                            corners_cnt++;
                        }
                    }
                } // y loop
                jsfeat.cache.put_buffer(buf_node);
                jsfeat.cache.put_buffer(cpbuf_node);
                return corners_cnt;
            }
        };
    })();

    global.fast_corners = fast_corners;
    fast_corners.set_threshold(20); // set default

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * Copyright 2007 Computer Vision Lab,
 * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.
 * @author Vincent Lepetit (http://cvlab.epfl.ch/~lepetit)
 */

(function(global) {
    "use strict";
    //

    var yape06 = (function() {
        
        var compute_laplacian = function(src, dst, w, h, Dxx, Dyy, sx,sy, ex,ey) {
            var y=0,x=0,yrow=(sy*w+sx)|0,row=yrow;

            for(y = sy; y < ey; ++y, yrow+=w, row = yrow) {
                for(x = sx; x < ex; ++x, ++row) {
                    dst[row] = -4 * src[row] + src[row+Dxx] + src[row-Dxx] + src[row+Dyy] + src[row-Dyy];
                }
            }
        }

        var hessian_min_eigen_value = function(src, off, tr, Dxx, Dyy, Dxy, Dyx) {
            var Ixx = -2 * src[off] + src[off + Dxx] + src[off - Dxx];
            var Iyy = -2 * src[off] + src[off + Dyy] + src[off - Dyy];
            var Ixy = src[off + Dxy] + src[off - Dxy] - src[off + Dyx] - src[off - Dyx];
            var sqrt_delta = ( Math.sqrt(((Ixx - Iyy) * (Ixx - Iyy) + 4 * Ixy * Ixy) ) )|0;

            return Math.min(Math.abs(tr - sqrt_delta), Math.abs(-(tr + sqrt_delta)));
        }

        return {

            laplacian_threshold: 30,
            min_eigen_value_threshold: 25,

            detect: function(src, points, border) {
                if (typeof border === "undefined") { border = 5; }
                var x=0,y=0;
                var w=src.cols, h=src.rows, srd_d=src.data;
                var Dxx = 5, Dyy = (5 * w)|0;
                var Dxy = (3 + 3 * w)|0, Dyx = (3 - 3 * w)|0;
                var lap_buf = jsfeat.cache.get_buffer((w*h)<<2);
                var laplacian = lap_buf.i32;
                var lv=0, row=0,rowx=0,min_eigen_value=0,pt;
                var number_of_points = 0;
                var lap_thresh = this.laplacian_threshold;
                var eigen_thresh = this.min_eigen_value_threshold;

                var sx = Math.max(5, border)|0;
                var sy = Math.max(3, border)|0;
                var ex = Math.min(w-5, w-border)|0;
                var ey = Math.min(h-3, h-border)|0;

                x = w*h;
                while(--x>=0) {laplacian[x]=0;}
                compute_laplacian(srd_d, laplacian, w, h, Dxx, Dyy, sx,sy, ex,ey);

                row = (sy*w+sx)|0;
                for(y = sy; y < ey; ++y, row += w) {
                    for(x = sx, rowx=row; x < ex; ++x, ++rowx) {

                        lv = laplacian[rowx];
                        if ((lv < -lap_thresh &&
                            lv < laplacian[rowx - 1]      && lv < laplacian[rowx + 1] &&
                            lv < laplacian[rowx - w]     && lv < laplacian[rowx + w] &&
                            lv < laplacian[rowx - w - 1] && lv < laplacian[rowx + w - 1] &&
                            lv < laplacian[rowx - w + 1] && lv < laplacian[rowx + w + 1])
                            ||
                            (lv > lap_thresh &&
                            lv > laplacian[rowx - 1]      && lv > laplacian[rowx + 1] &&
                            lv > laplacian[rowx - w]     && lv > laplacian[rowx + w] &&
                            lv > laplacian[rowx - w - 1] && lv > laplacian[rowx + w - 1] &&
                            lv > laplacian[rowx - w + 1] && lv > laplacian[rowx + w + 1])
                            ) {

                            min_eigen_value = hessian_min_eigen_value(srd_d, rowx, lv, Dxx, Dyy, Dxy, Dyx);
                            if (min_eigen_value > eigen_thresh) {
                                pt = points[number_of_points];
                                pt.x = x, pt.y = y, pt.score = min_eigen_value;
                                ++number_of_points;
                                ++x, ++rowx; // skip next pixel since this is maxima in 3x3
                            }
                        }
                    }
                }

                jsfeat.cache.put_buffer(lap_buf);

                return number_of_points;
            }

        };
    })();

    global.yape06 = yape06;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * Copyright 2007 Computer Vision Lab,
 * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.
 */

(function(global) {
    "use strict";
    //

    var yape = (function() {

        var precompute_directions = function(step, dirs, R) {
            var i = 0;
            var x, y;

            x = R;
            for(y = 0; y < x; y++, i++)
            {
                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for(x-- ; x < y && x >= 0; x--, i++)
            {
                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for( ; -x < y; x--, i++)
            {
                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for(y-- ; y >= 0; y--, i++)
            {
                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for(; y > x; y--, i++)
            {
                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for(x++ ; x <= 0; x++, i++)
            {
                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for( ; x < -y; x++, i++)
            {
                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;
                dirs[i] = (x + step * y);
            }
            for(y++ ; y < 0; y++, i++)
            {
                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;
                dirs[i] = (x + step * y);
            }

            dirs[i] = dirs[0];
            dirs[i + 1] = dirs[1];
            return i;
        }

        var third_check = function (Sb, off, step) {
            var n = 0;
            if(Sb[off+1]   != 0) n++;
            if(Sb[off-1]   != 0) n++;
            if(Sb[off+step]   != 0) n++;
            if(Sb[off+step+1] != 0) n++;
            if(Sb[off+step-1] != 0) n++;
            if(Sb[off-step]   != 0) n++;
            if(Sb[off-step+1] != 0) n++;
            if(Sb[off-step-1] != 0) n++;

            return n;
        }

        var is_local_maxima = function(p, off, v, step, neighborhood) {
            var x, y;

            if (v > 0) {
                off -= step*neighborhood;
                for (y= -neighborhood; y<=neighborhood; ++y) {
                    for (x= -neighborhood; x<=neighborhood; ++x) {
                        if (p[off+x] > v) return false;
                    }
                    off += step;
                }
            } else {
                off -= step*neighborhood;
                for (y= -neighborhood; y<=neighborhood; ++y) {
                    for (x= -neighborhood; x<=neighborhood; ++x) {
                        if (p[off+x] < v) return false;
                    }
                    off += step;
                }
            }
            return true;
        }

        var perform_one_point = function(I, x, Scores, Im, Ip, dirs, opposite, dirs_nb) {
          var score = 0;
          var a = 0, b = (opposite - 1)|0;
          var A=0, B0=0, B1=0, B2=0;
          var state=0;

          // WE KNOW THAT NOT(A ~ I0 & B1 ~ I0):
          A = I[x+dirs[a]];
          if ((A <= Ip)) {
            if ((A >= Im)) { // A ~ I0
              B0 = I[x+dirs[b]];
              if ((B0 <= Ip)) {
                if ((B0 >= Im)) { Scores[x] = 0; return; }
                else {
                  b++; B1 = I[x+dirs[b]];
                  if ((B1 > Ip)) {
                    b++; B2 = I[x+dirs[b]];
                    if ((B2 > Ip)) state = 3;
                    else if ((B2 < Im)) state = 6;
                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0
                  }
                  else/* if ((B1 < Im))*/ {
                    b++; B2 = I[x+dirs[b]];
                    if ((B2 > Ip)) state = 7;
                    else if ((B2 < Im)) state = 2;
                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0
                  }
                  //else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0
                }
              }
              else { // B0 < I0
                b++; B1 = I[x+dirs[b]];
                if ((B1 > Ip)) {
                  b++; B2 = I[x+dirs[b]];
                  if ((B2 > Ip)) state = 3;
                  else if ((B2 < Im)) state = 6;
                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0
                }
                else if ((B1 < Im)) {
                  b++; B2 = I[x+dirs[b]];
                  if ((B2 > Ip)) state = 7;
                  else if ((B2 < Im)) state = 2;
                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0
                }
                else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0
              }
            }
            else { // A > I0
              B0 = I[x+dirs[b]];
              if ((B0 > Ip)) { Scores[x] = 0; return; }
                b++; B1 = I[x+dirs[b]];
              if ((B1 > Ip)) { Scores[x] = 0; return; }
                b++; B2 = I[x+dirs[b]];
              if ((B2 > Ip)) { Scores[x] = 0; return; }
                state = 1;
            }
          }
          else // A < I0
          {
            B0 = I[x+dirs[b]];
            if ((B0 < Im)) { Scores[x] = 0; return; }
              b++; B1 = I[x+dirs[b]];
            if ((B1 < Im)) { Scores[x] = 0; return; }
              b++; B2 = I[x+dirs[b]];
            if ((B2 < Im)) { Scores[x] = 0; return; }
              state = 0;
          }

          for(a = 1; a <= opposite; a++)
          {
            A = I[x+dirs[a]];

            switch(state)
            {
            case 0:
              if ((A > Ip)) {
                B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 < Im)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 0; break; };
              }
              if ((A < Im)) {
                if ((B1 > Ip)) { Scores[x] = 0; return; }
                  if ((B2 > Ip)) { Scores[x] = 0; return; }
                    B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 > Ip)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 8; break; };
              } 
              // A ~ I0
              if ((B1 <= Ip)) { Scores[x] = 0; return; }
                if ((B2 <= Ip)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };
              if ((B2 < Im)) { score -= A + B1; state = 6; break; };
              { Scores[x] = 0; return; }

            case 1:
              if ((A < Im)) {
                B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 > Ip)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 1; break; };
              }
              if ((A > Ip)) {
                if ((B1 < Im)) { Scores[x] = 0; return; }
                  if ((B2 < Im)) { Scores[x] = 0; return; }
                    B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 < Im)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 9; break; };
              }
              // A ~ I0
              if ((B1 >= Im)) { Scores[x] = 0; return; }
                if ((B2 >= Im)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
              if ((B2 < Im)) { score -= A + B1; state = 2; break; };
              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };
              { Scores[x] = 0; return; }

            case 2:
              if ((A > Ip)) { Scores[x] = 0; return; }
                B1 = B2; b++; B2 = I[x+dirs[b]];
              if ((A < Im))
              {
                if ((B2 > Ip)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 4; break; };
              } 
              // A ~ I0
              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };
              if ((B2 < Im)) { score -= A + B1; state = 2; break; };
              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0

            case 3:
              if ((A < Im)) { Scores[x] = 0; return; }
                B1 = B2; b++; B2 = I[x+dirs[b]];
              if ((A > Ip)) {
                if ((B2 < Im)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 5; break; };
              }
              // A ~ I0
              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };
              if ((B2 < Im)) { score -= A + B1; state = 6; break; };
              { Scores[x] = 0; return; }

            case 4:
              if ((A > Ip)) { Scores[x] = 0; return; }
                if ((A < Im)) {
                  B1 = B2; b++; B2 = I[x+dirs[b]];
                  if ((B2 > Ip)) { Scores[x] = 0; return; }
                    { score -= A + B1; state = 1; break; };
                }
                if ((B2 >= Im)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 < Im)) { score -= A + B1; state = 2; break; };
                if ((B2 > Ip)) { score -= A + B1; state = 7; break; };
                { Scores[x] = 0; return; }

            case 5:
              if ((A < Im)) { Scores[x] = 0; return; }
                if ((A > Ip)) {
                  B1 = B2; b++; B2 = I[x+dirs[b]];
                  if ((B2 < Im)) { Scores[x] = 0; return; }
                    { score -= A + B1; state = 0; break; };
                }
                // A ~ I0
                if ((B2 <= Ip)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 > Ip)) { score -= A + B1; state = 3; break; };
                if ((B2 < Im)) { score -= A + B1; state = 6; break; };
                { Scores[x] = 0; return; }

            case 7:
              if ((A > Ip)) { Scores[x] = 0; return; }
                if ((A < Im)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
              // A ~ I0
              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };
              if ((B2 < Im)) { score -= A + B1; state = 6; break; };
              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0

            case 6:
              if ((A > Ip)) { Scores[x] = 0; return; }
                if ((A < Im)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
              // A ~ I0
              if ((B2 < Im)) { score -= A + B1; state = 2; break; };
              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };
              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0

            case 8:
              if ((A > Ip)) {
                if ((B2 < Im)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 < Im)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 9; break; };
              }
              if ((A < Im)) {
                B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 > Ip)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 1; break; };
              }
              { Scores[x] = 0; return; }

            case 9:
              if ((A < Im)) {
                if ((B2 > Ip)) { Scores[x] = 0; return; }
                  B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 > Ip)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 8; break; };
              }
              if ((A > Ip)) {
                B1 = B2; b++; B2 = I[x+dirs[b]];
                if ((B2 < Im)) { Scores[x] = 0; return; }
                  { score -= A + B1; state = 0; break; };
              }
              { Scores[x] = 0; return; }

            default:
              //"PB default";
              break;
            } // switch(state)
          } // for(a...)

          Scores[x] = (score + dirs_nb * I[x]);
        }

        var lev_table_t = (function () {
            function lev_table_t(w, h, r) {
                this.dirs = new Int32Array(1024);
                this.dirs_count = precompute_directions(w, this.dirs, r)|0;
                this.scores = new Int32Array(w*h);
                this.radius = r|0;
            }
            return lev_table_t;
        })();
        
        return {

            level_tables: [],
            tau: 7,

            init: function(width, height, radius, pyramid_levels) {
                if (typeof pyramid_levels === "undefined") { pyramid_levels = 1; }
                var i;
                radius = Math.min(radius, 7);
                radius = Math.max(radius, 3);
                for(i = 0; i < pyramid_levels; ++i) {
                    this.level_tables[i] = new lev_table_t(width>>i, height>>i, radius);
                }
            },

            detect: function(src, points, border) {
                if (typeof border === "undefined") { border = 4; }
                var t = this.level_tables[0];
                var R = t.radius|0, Rm1 = (R-1)|0;
                var dirs = t.dirs;
                var dirs_count = t.dirs_count|0;
                var opposite = dirs_count >> 1;
                var img = src.data, w=src.cols|0, h=src.rows|0,hw=w>>1;
                var scores = t.scores;
                var x=0,y=0,row=0,rowx=0,ip=0,im=0,abs_score=0, score=0;
                var tau = this.tau|0;
                var number_of_points = 0, pt;

                var sx = Math.max(R+1, border)|0;
                var sy = Math.max(R+1, border)|0;
                var ex = Math.min(w-R-2, w-border)|0;
                var ey = Math.min(h-R-2, h-border)|0;

                row = (sy*w+sx)|0;
                for(y = sy; y < ey; ++y, row+=w) {
                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {
                        ip = img[rowx] + tau, im = img[rowx] - tau;

                        if (im<img[rowx+R] && img[rowx+R]<ip && im<img[rowx-R] && img[rowx-R]<ip) {
                            scores[rowx] = 0;
                        } else {
                            perform_one_point(img, rowx, scores, im, ip, dirs, opposite, dirs_count);
                        }
                    }
                }

                // local maxima
                row = (sy*w+sx)|0;
                for(y = sy; y < ey; ++y, row+=w) {
                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {
                        score = scores[rowx];
                        abs_score = Math.abs(score);
                        if(abs_score < 5) {
                            // if this pixel is 0, the next one will not be good enough. Skip it.
                            ++x, ++rowx;
                        } else {
                            if(third_check(scores, rowx, w) >= 3 && is_local_maxima(scores, rowx, score, hw, R)) {
                                pt = points[number_of_points];
                                pt.x = x, pt.y = y, pt.score = abs_score;
                                ++number_of_points;

                                x += Rm1, rowx += Rm1;
                            }
                        }
                    }
                }

                return number_of_points;
            }
        };

    })();

    global.yape = yape;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * Original implementation derived from OpenCV,
 * @authors Ethan Rublee, Vincent Rabaud, Gary Bradski
 */

(function(global) {
    "use strict";
    //

    var orb = (function() {

    	var bit_pattern_31_ = new Int32Array([
		    8,-3, 9,5/*mean (0), correlation (0)*/,
		    4,2, 7,-12/*mean (1.12461e-05), correlation (0.0437584)*/,
		    -11,9, -8,2/*mean (3.37382e-05), correlation (0.0617409)*/,
		    7,-12, 12,-13/*mean (5.62303e-05), correlation (0.0636977)*/,
		    2,-13, 2,12/*mean (0.000134953), correlation (0.085099)*/,
		    1,-7, 1,6/*mean (0.000528565), correlation (0.0857175)*/,
		    -2,-10, -2,-4/*mean (0.0188821), correlation (0.0985774)*/,
		    -13,-13, -11,-8/*mean (0.0363135), correlation (0.0899616)*/,
		    -13,-3, -12,-9/*mean (0.121806), correlation (0.099849)*/,
		    10,4, 11,9/*mean (0.122065), correlation (0.093285)*/,
		    -13,-8, -8,-9/*mean (0.162787), correlation (0.0942748)*/,
		    -11,7, -9,12/*mean (0.21561), correlation (0.0974438)*/,
		    7,7, 12,6/*mean (0.160583), correlation (0.130064)*/,
		    -4,-5, -3,0/*mean (0.228171), correlation (0.132998)*/,
		    -13,2, -12,-3/*mean (0.00997526), correlation (0.145926)*/,
		    -9,0, -7,5/*mean (0.198234), correlation (0.143636)*/,
		    12,-6, 12,-1/*mean (0.0676226), correlation (0.16689)*/,
		    -3,6, -2,12/*mean (0.166847), correlation (0.171682)*/,
		    -6,-13, -4,-8/*mean (0.101215), correlation (0.179716)*/,
		    11,-13, 12,-8/*mean (0.200641), correlation (0.192279)*/,
		    4,7, 5,1/*mean (0.205106), correlation (0.186848)*/,
		    5,-3, 10,-3/*mean (0.234908), correlation (0.192319)*/,
		    3,-7, 6,12/*mean (0.0709964), correlation (0.210872)*/,
		    -8,-7, -6,-2/*mean (0.0939834), correlation (0.212589)*/,
		    -2,11, -1,-10/*mean (0.127778), correlation (0.20866)*/,
		    -13,12, -8,10/*mean (0.14783), correlation (0.206356)*/,
		    -7,3, -5,-3/*mean (0.182141), correlation (0.198942)*/,
		    -4,2, -3,7/*mean (0.188237), correlation (0.21384)*/,
		    -10,-12, -6,11/*mean (0.14865), correlation (0.23571)*/,
		    5,-12, 6,-7/*mean (0.222312), correlation (0.23324)*/,
		    5,-6, 7,-1/*mean (0.229082), correlation (0.23389)*/,
		    1,0, 4,-5/*mean (0.241577), correlation (0.215286)*/,
		    9,11, 11,-13/*mean (0.00338507), correlation (0.251373)*/,
		    4,7, 4,12/*mean (0.131005), correlation (0.257622)*/,
		    2,-1, 4,4/*mean (0.152755), correlation (0.255205)*/,
		    -4,-12, -2,7/*mean (0.182771), correlation (0.244867)*/,
		    -8,-5, -7,-10/*mean (0.186898), correlation (0.23901)*/,
		    4,11, 9,12/*mean (0.226226), correlation (0.258255)*/,
		    0,-8, 1,-13/*mean (0.0897886), correlation (0.274827)*/,
		    -13,-2, -8,2/*mean (0.148774), correlation (0.28065)*/,
		    -3,-2, -2,3/*mean (0.153048), correlation (0.283063)*/,
		    -6,9, -4,-9/*mean (0.169523), correlation (0.278248)*/,
		    8,12, 10,7/*mean (0.225337), correlation (0.282851)*/,
		    0,9, 1,3/*mean (0.226687), correlation (0.278734)*/,
		    7,-5, 11,-10/*mean (0.00693882), correlation (0.305161)*/,
		    -13,-6, -11,0/*mean (0.0227283), correlation (0.300181)*/,
		    10,7, 12,1/*mean (0.125517), correlation (0.31089)*/,
		    -6,-3, -6,12/*mean (0.131748), correlation (0.312779)*/,
		    10,-9, 12,-4/*mean (0.144827), correlation (0.292797)*/,
		    -13,8, -8,-12/*mean (0.149202), correlation (0.308918)*/,
		    -13,0, -8,-4/*mean (0.160909), correlation (0.310013)*/,
		    3,3, 7,8/*mean (0.177755), correlation (0.309394)*/,
		    5,7, 10,-7/*mean (0.212337), correlation (0.310315)*/,
		    -1,7, 1,-12/*mean (0.214429), correlation (0.311933)*/,
		    3,-10, 5,6/*mean (0.235807), correlation (0.313104)*/,
		    2,-4, 3,-10/*mean (0.00494827), correlation (0.344948)*/,
		    -13,0, -13,5/*mean (0.0549145), correlation (0.344675)*/,
		    -13,-7, -12,12/*mean (0.103385), correlation (0.342715)*/,
		    -13,3, -11,8/*mean (0.134222), correlation (0.322922)*/,
		    -7,12, -4,7/*mean (0.153284), correlation (0.337061)*/,
		    6,-10, 12,8/*mean (0.154881), correlation (0.329257)*/,
		    -9,-1, -7,-6/*mean (0.200967), correlation (0.33312)*/,
		    -2,-5, 0,12/*mean (0.201518), correlation (0.340635)*/,
		    -12,5, -7,5/*mean (0.207805), correlation (0.335631)*/,
		    3,-10, 8,-13/*mean (0.224438), correlation (0.34504)*/,
		    -7,-7, -4,5/*mean (0.239361), correlation (0.338053)*/,
		    -3,-2, -1,-7/*mean (0.240744), correlation (0.344322)*/,
		    2,9, 5,-11/*mean (0.242949), correlation (0.34145)*/,
		    -11,-13, -5,-13/*mean (0.244028), correlation (0.336861)*/,
		    -1,6, 0,-1/*mean (0.247571), correlation (0.343684)*/,
		    5,-3, 5,2/*mean (0.000697256), correlation (0.357265)*/,
		    -4,-13, -4,12/*mean (0.00213675), correlation (0.373827)*/,
		    -9,-6, -9,6/*mean (0.0126856), correlation (0.373938)*/,
		    -12,-10, -8,-4/*mean (0.0152497), correlation (0.364237)*/,
		    10,2, 12,-3/*mean (0.0299933), correlation (0.345292)*/,
		    7,12, 12,12/*mean (0.0307242), correlation (0.366299)*/,
		    -7,-13, -6,5/*mean (0.0534975), correlation (0.368357)*/,
		    -4,9, -3,4/*mean (0.099865), correlation (0.372276)*/,
		    7,-1, 12,2/*mean (0.117083), correlation (0.364529)*/,
		    -7,6, -5,1/*mean (0.126125), correlation (0.369606)*/,
		    -13,11, -12,5/*mean (0.130364), correlation (0.358502)*/,
		    -3,7, -2,-6/*mean (0.131691), correlation (0.375531)*/,
		    7,-8, 12,-7/*mean (0.160166), correlation (0.379508)*/,
		    -13,-7, -11,-12/*mean (0.167848), correlation (0.353343)*/,
		    1,-3, 12,12/*mean (0.183378), correlation (0.371916)*/,
		    2,-6, 3,0/*mean (0.228711), correlation (0.371761)*/,
		    -4,3, -2,-13/*mean (0.247211), correlation (0.364063)*/,
		    -1,-13, 1,9/*mean (0.249325), correlation (0.378139)*/,
		    7,1, 8,-6/*mean (0.000652272), correlation (0.411682)*/,
		    1,-1, 3,12/*mean (0.00248538), correlation (0.392988)*/,
		    9,1, 12,6/*mean (0.0206815), correlation (0.386106)*/,
		    -1,-9, -1,3/*mean (0.0364485), correlation (0.410752)*/,
		    -13,-13, -10,5/*mean (0.0376068), correlation (0.398374)*/,
		    7,7, 10,12/*mean (0.0424202), correlation (0.405663)*/,
		    12,-5, 12,9/*mean (0.0942645), correlation (0.410422)*/,
		    6,3, 7,11/*mean (0.1074), correlation (0.413224)*/,
		    5,-13, 6,10/*mean (0.109256), correlation (0.408646)*/,
		    2,-12, 2,3/*mean (0.131691), correlation (0.416076)*/,
		    3,8, 4,-6/*mean (0.165081), correlation (0.417569)*/,
		    2,6, 12,-13/*mean (0.171874), correlation (0.408471)*/,
		    9,-12, 10,3/*mean (0.175146), correlation (0.41296)*/,
		    -8,4, -7,9/*mean (0.183682), correlation (0.402956)*/,
		    -11,12, -4,-6/*mean (0.184672), correlation (0.416125)*/,
		    1,12, 2,-8/*mean (0.191487), correlation (0.386696)*/,
		    6,-9, 7,-4/*mean (0.192668), correlation (0.394771)*/,
		    2,3, 3,-2/*mean (0.200157), correlation (0.408303)*/,
		    6,3, 11,0/*mean (0.204588), correlation (0.411762)*/,
		    3,-3, 8,-8/*mean (0.205904), correlation (0.416294)*/,
		    7,8, 9,3/*mean (0.213237), correlation (0.409306)*/,
		    -11,-5, -6,-4/*mean (0.243444), correlation (0.395069)*/,
		    -10,11, -5,10/*mean (0.247672), correlation (0.413392)*/,
		    -5,-8, -3,12/*mean (0.24774), correlation (0.411416)*/,
		    -10,5, -9,0/*mean (0.00213675), correlation (0.454003)*/,
		    8,-1, 12,-6/*mean (0.0293635), correlation (0.455368)*/,
		    4,-6, 6,-11/*mean (0.0404971), correlation (0.457393)*/,
		    -10,12, -8,7/*mean (0.0481107), correlation (0.448364)*/,
		    4,-2, 6,7/*mean (0.050641), correlation (0.455019)*/,
		    -2,0, -2,12/*mean (0.0525978), correlation (0.44338)*/,
		    -5,-8, -5,2/*mean (0.0629667), correlation (0.457096)*/,
		    7,-6, 10,12/*mean (0.0653846), correlation (0.445623)*/,
		    -9,-13, -8,-8/*mean (0.0858749), correlation (0.449789)*/,
		    -5,-13, -5,-2/*mean (0.122402), correlation (0.450201)*/,
		    8,-8, 9,-13/*mean (0.125416), correlation (0.453224)*/,
		    -9,-11, -9,0/*mean (0.130128), correlation (0.458724)*/,
		    1,-8, 1,-2/*mean (0.132467), correlation (0.440133)*/,
		    7,-4, 9,1/*mean (0.132692), correlation (0.454)*/,
		    -2,1, -1,-4/*mean (0.135695), correlation (0.455739)*/,
		    11,-6, 12,-11/*mean (0.142904), correlation (0.446114)*/,
		    -12,-9, -6,4/*mean (0.146165), correlation (0.451473)*/,
		    3,7, 7,12/*mean (0.147627), correlation (0.456643)*/,
		    5,5, 10,8/*mean (0.152901), correlation (0.455036)*/,
		    0,-4, 2,8/*mean (0.167083), correlation (0.459315)*/,
		    -9,12, -5,-13/*mean (0.173234), correlation (0.454706)*/,
		    0,7, 2,12/*mean (0.18312), correlation (0.433855)*/,
		    -1,2, 1,7/*mean (0.185504), correlation (0.443838)*/,
		    5,11, 7,-9/*mean (0.185706), correlation (0.451123)*/,
		    3,5, 6,-8/*mean (0.188968), correlation (0.455808)*/,
		    -13,-4, -8,9/*mean (0.191667), correlation (0.459128)*/,
		    -5,9, -3,-3/*mean (0.193196), correlation (0.458364)*/,
		    -4,-7, -3,-12/*mean (0.196536), correlation (0.455782)*/,
		    6,5, 8,0/*mean (0.1972), correlation (0.450481)*/,
		    -7,6, -6,12/*mean (0.199438), correlation (0.458156)*/,
		    -13,6, -5,-2/*mean (0.211224), correlation (0.449548)*/,
		    1,-10, 3,10/*mean (0.211718), correlation (0.440606)*/,
		    4,1, 8,-4/*mean (0.213034), correlation (0.443177)*/,
		    -2,-2, 2,-13/*mean (0.234334), correlation (0.455304)*/,
		    2,-12, 12,12/*mean (0.235684), correlation (0.443436)*/,
		    -2,-13, 0,-6/*mean (0.237674), correlation (0.452525)*/,
		    4,1, 9,3/*mean (0.23962), correlation (0.444824)*/,
		    -6,-10, -3,-5/*mean (0.248459), correlation (0.439621)*/,
		    -3,-13, -1,1/*mean (0.249505), correlation (0.456666)*/,
		    7,5, 12,-11/*mean (0.00119208), correlation (0.495466)*/,
		    4,-2, 5,-7/*mean (0.00372245), correlation (0.484214)*/,
		    -13,9, -9,-5/*mean (0.00741116), correlation (0.499854)*/,
		    7,1, 8,6/*mean (0.0208952), correlation (0.499773)*/,
		    7,-8, 7,6/*mean (0.0220085), correlation (0.501609)*/,
		    -7,-4, -7,1/*mean (0.0233806), correlation (0.496568)*/,
		    -8,11, -7,-8/*mean (0.0236505), correlation (0.489719)*/,
		    -13,6, -12,-8/*mean (0.0268781), correlation (0.503487)*/,
		    2,4, 3,9/*mean (0.0323324), correlation (0.501938)*/,
		    10,-5, 12,3/*mean (0.0399235), correlation (0.494029)*/,
		    -6,-5, -6,7/*mean (0.0420153), correlation (0.486579)*/,
		    8,-3, 9,-8/*mean (0.0548021), correlation (0.484237)*/,
		    2,-12, 2,8/*mean (0.0616622), correlation (0.496642)*/,
		    -11,-2, -10,3/*mean (0.0627755), correlation (0.498563)*/,
		    -12,-13, -7,-9/*mean (0.0829622), correlation (0.495491)*/,
		    -11,0, -10,-5/*mean (0.0843342), correlation (0.487146)*/,
		    5,-3, 11,8/*mean (0.0929937), correlation (0.502315)*/,
		    -2,-13, -1,12/*mean (0.113327), correlation (0.48941)*/,
		    -1,-8, 0,9/*mean (0.132119), correlation (0.467268)*/,
		    -13,-11, -12,-5/*mean (0.136269), correlation (0.498771)*/,
		    -10,-2, -10,11/*mean (0.142173), correlation (0.498714)*/,
		    -3,9, -2,-13/*mean (0.144141), correlation (0.491973)*/,
		    2,-3, 3,2/*mean (0.14892), correlation (0.500782)*/,
		    -9,-13, -4,0/*mean (0.150371), correlation (0.498211)*/,
		    -4,6, -3,-10/*mean (0.152159), correlation (0.495547)*/,
		    -4,12, -2,-7/*mean (0.156152), correlation (0.496925)*/,
		    -6,-11, -4,9/*mean (0.15749), correlation (0.499222)*/,
		    6,-3, 6,11/*mean (0.159211), correlation (0.503821)*/,
		    -13,11, -5,5/*mean (0.162427), correlation (0.501907)*/,
		    11,11, 12,6/*mean (0.16652), correlation (0.497632)*/,
		    7,-5, 12,-2/*mean (0.169141), correlation (0.484474)*/,
		    -1,12, 0,7/*mean (0.169456), correlation (0.495339)*/,
		    -4,-8, -3,-2/*mean (0.171457), correlation (0.487251)*/,
		    -7,1, -6,7/*mean (0.175), correlation (0.500024)*/,
		    -13,-12, -8,-13/*mean (0.175866), correlation (0.497523)*/,
		    -7,-2, -6,-8/*mean (0.178273), correlation (0.501854)*/,
		    -8,5, -6,-9/*mean (0.181107), correlation (0.494888)*/,
		    -5,-1, -4,5/*mean (0.190227), correlation (0.482557)*/,
		    -13,7, -8,10/*mean (0.196739), correlation (0.496503)*/,
		    1,5, 5,-13/*mean (0.19973), correlation (0.499759)*/,
		    1,0, 10,-13/*mean (0.204465), correlation (0.49873)*/,
		    9,12, 10,-1/*mean (0.209334), correlation (0.49063)*/,
		    5,-8, 10,-9/*mean (0.211134), correlation (0.503011)*/,
		    -1,11, 1,-13/*mean (0.212), correlation (0.499414)*/,
		    -9,-3, -6,2/*mean (0.212168), correlation (0.480739)*/,
		    -1,-10, 1,12/*mean (0.212731), correlation (0.502523)*/,
		    -13,1, -8,-10/*mean (0.21327), correlation (0.489786)*/,
		    8,-11, 10,-6/*mean (0.214159), correlation (0.488246)*/,
		    2,-13, 3,-6/*mean (0.216993), correlation (0.50287)*/,
		    7,-13, 12,-9/*mean (0.223639), correlation (0.470502)*/,
		    -10,-10, -5,-7/*mean (0.224089), correlation (0.500852)*/,
		    -10,-8, -8,-13/*mean (0.228666), correlation (0.502629)*/,
		    4,-6, 8,5/*mean (0.22906), correlation (0.498305)*/,
		    3,12, 8,-13/*mean (0.233378), correlation (0.503825)*/,
		    -4,2, -3,-3/*mean (0.234323), correlation (0.476692)*/,
		    5,-13, 10,-12/*mean (0.236392), correlation (0.475462)*/,
		    4,-13, 5,-1/*mean (0.236842), correlation (0.504132)*/,
		    -9,9, -4,3/*mean (0.236977), correlation (0.497739)*/,
		    0,3, 3,-9/*mean (0.24314), correlation (0.499398)*/,
		    -12,1, -6,1/*mean (0.243297), correlation (0.489447)*/,
		    3,2, 4,-8/*mean (0.00155196), correlation (0.553496)*/,
		    -10,-10, -10,9/*mean (0.00239541), correlation (0.54297)*/,
		    8,-13, 12,12/*mean (0.0034413), correlation (0.544361)*/,
		    -8,-12, -6,-5/*mean (0.003565), correlation (0.551225)*/,
		    2,2, 3,7/*mean (0.00835583), correlation (0.55285)*/,
		    10,6, 11,-8/*mean (0.00885065), correlation (0.540913)*/,
		    6,8, 8,-12/*mean (0.0101552), correlation (0.551085)*/,
		    -7,10, -6,5/*mean (0.0102227), correlation (0.533635)*/,
		    -3,-9, -3,9/*mean (0.0110211), correlation (0.543121)*/,
		    -1,-13, -1,5/*mean (0.0113473), correlation (0.550173)*/,
		    -3,-7, -3,4/*mean (0.0140913), correlation (0.554774)*/,
		    -8,-2, -8,3/*mean (0.017049), correlation (0.55461)*/,
		    4,2, 12,12/*mean (0.01778), correlation (0.546921)*/,
		    2,-5, 3,11/*mean (0.0224022), correlation (0.549667)*/,
		    6,-9, 11,-13/*mean (0.029161), correlation (0.546295)*/,
		    3,-1, 7,12/*mean (0.0303081), correlation (0.548599)*/,
		    11,-1, 12,4/*mean (0.0355151), correlation (0.523943)*/,
		    -3,0, -3,6/*mean (0.0417904), correlation (0.543395)*/,
		    4,-11, 4,12/*mean (0.0487292), correlation (0.542818)*/,
		    2,-4, 2,1/*mean (0.0575124), correlation (0.554888)*/,
		    -10,-6, -8,1/*mean (0.0594242), correlation (0.544026)*/,
		    -13,7, -11,1/*mean (0.0597391), correlation (0.550524)*/,
		    -13,12, -11,-13/*mean (0.0608974), correlation (0.55383)*/,
		    6,0, 11,-13/*mean (0.065126), correlation (0.552006)*/,
		    0,-1, 1,4/*mean (0.074224), correlation (0.546372)*/,
		    -13,3, -9,-2/*mean (0.0808592), correlation (0.554875)*/,
		    -9,8, -6,-3/*mean (0.0883378), correlation (0.551178)*/,
		    -13,-6, -8,-2/*mean (0.0901035), correlation (0.548446)*/,
		    5,-9, 8,10/*mean (0.0949843), correlation (0.554694)*/,
		    2,7, 3,-9/*mean (0.0994152), correlation (0.550979)*/,
		    -1,-6, -1,-1/*mean (0.10045), correlation (0.552714)*/,
		    9,5, 11,-2/*mean (0.100686), correlation (0.552594)*/,
		    11,-3, 12,-8/*mean (0.101091), correlation (0.532394)*/,
		    3,0, 3,5/*mean (0.101147), correlation (0.525576)*/,
		    -1,4, 0,10/*mean (0.105263), correlation (0.531498)*/,
		    3,-6, 4,5/*mean (0.110785), correlation (0.540491)*/,
		    -13,0, -10,5/*mean (0.112798), correlation (0.536582)*/,
		    5,8, 12,11/*mean (0.114181), correlation (0.555793)*/,
		    8,9, 9,-6/*mean (0.117431), correlation (0.553763)*/,
		    7,-4, 8,-12/*mean (0.118522), correlation (0.553452)*/,
		    -10,4, -10,9/*mean (0.12094), correlation (0.554785)*/,
		    7,3, 12,4/*mean (0.122582), correlation (0.555825)*/,
		    9,-7, 10,-2/*mean (0.124978), correlation (0.549846)*/,
		    7,0, 12,-2/*mean (0.127002), correlation (0.537452)*/,
		    -1,-6, 0,-11/*mean (0.127148), correlation (0.547401)*/
		]);

	    var H = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);
	    var patch_img = new jsfeat.matrix_t(32, 32, jsfeat.U8_t|jsfeat.C1_t);

	    var rectify_patch = function(src, dst, angle, px, py, psize) {
	    	var cosine = Math.cos(angle);
	    	var sine   = Math.sin(angle);

	        H.data[0] = cosine, H.data[1] = -sine,    H.data[2] = (-cosine + sine  ) * psize*0.5 + px,
	        H.data[3] = sine,   H.data[4] =  cosine,  H.data[5] = (-sine   - cosine) * psize*0.5 + py;

	        jsfeat.imgproc.warp_affine(src, dst, H, 128);
	    }

    	return {

    		describe: function(src, corners, count, descriptors) {
    			var DESCR_SIZE = 32; // bytes;
				var i=0,b=0,px=0.0,py=0.0,angle=0.0;
				var t0=0, t1=0, val=0;
				var img = src.data, w = src.cols, h = src.rows;
				var patch_d = patch_img.data;
				var patch_off = 16*32 + 16; // center of patch
				var patt=0;

				if(!(descriptors.type&jsfeat.U8_t)) {
					// relocate to U8 type
					descriptors.type = jsfeat.U8_t;
					descriptors.cols = DESCR_SIZE;
	                descriptors.rows = count;
	                descriptors.channel = 1;
					descriptors.allocate();
				} else {
					descriptors.resize(DESCR_SIZE, count, 1);
				}

				var descr_d = descriptors.data;
				var descr_off = 0;

				for(i = 0; i < count; ++i) {
					px = corners[i].x;
					py = corners[i].y;
					angle = corners[i].angle;

					rectify_patch(src, patch_img, angle, px, py, 32);

					// describe the patch
					patt = 0;
					for (b = 0; b < DESCR_SIZE; ++b) {
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val = (t0 < t1)|0;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 1;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 2;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 3;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 4;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 5;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 6;
			            
			            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2
			            val |= (t0 < t1) << 7;
			            
			            descr_d[descr_off+b] = val;
			        }
			        descr_off += DESCR_SIZE;
				}
    		}
    	};
    })();

    global.orb = orb;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * this code is a rewrite from OpenCV's Lucas-Kanade optical flow implementation
 */

(function(global) {
    "use strict";
    //
    var optical_flow_lk = (function() {

        // short link to shar deriv
        var scharr_deriv = jsfeat.imgproc.scharr_derivatives;

        return {
            track: function(prev_pyr, curr_pyr, prev_xy, curr_xy, count, win_size, max_iter, status, eps, min_eigen_threshold) {
                if (typeof max_iter === "undefined") { max_iter = 30; }
                if (typeof status === "undefined") { status = new Uint8Array(count); }
                if (typeof eps === "undefined") { eps = 0.01; }
                if (typeof min_eigen_threshold === "undefined") { min_eigen_threshold = 0.0001; }

                var half_win = (win_size-1)*0.5;
                var win_area = (win_size*win_size)|0;
                var win_area2 = win_area << 1;
                var prev_imgs = prev_pyr.data, next_imgs = curr_pyr.data;
                var img_prev=prev_imgs[0].data,img_next=next_imgs[0].data;
                var w0 = prev_imgs[0].cols, h0 = prev_imgs[0].rows,lw=0,lh=0;

                var iwin_node = jsfeat.cache.get_buffer(win_area<<2);
                var deriv_iwin_node = jsfeat.cache.get_buffer(win_area2<<2);
                var deriv_lev_node = jsfeat.cache.get_buffer((h0*(w0<<1))<<2);

                var deriv_m = new jsfeat.matrix_t(w0, h0, jsfeat.S32C2_t, deriv_lev_node.data);

                var iwin_buf = iwin_node.i32;
                var deriv_iwin = deriv_iwin_node.i32;
                var deriv_lev = deriv_lev_node.i32;

                var dstep=0,src=0,dsrc=0,iptr=0,diptr=0,jptr=0;
                var lev_sc=0.0,prev_x=0.0,prev_y=0.0,next_x=0.0,next_y=0.0;
                var prev_delta_x=0.0,prev_delta_y=0.0,delta_x=0.0,delta_y=0.0;
                var iprev_x=0,iprev_y=0,inext_x=0,inext_y=0;
                var i=0,j=0,x=0,y=0,level=0,ptid=0,iter=0;
                var brd_tl=0,brd_r=0,brd_b=0;
                var a=0.0,b=0.0,b1=0.0,b2=0.0;

                // fixed point math
                var W_BITS14 = 14;
                var W_BITS4 = 14;
                var W_BITS1m5 = W_BITS4 - 5;
                var W_BITS1m51 = (1 << ((W_BITS1m5) - 1));
                var W_BITS14_ = (1 << W_BITS14);
                var W_BITS41 = (1 << ((W_BITS4) - 1));
                var FLT_SCALE = 1.0/(1 << 20);
                var iw00=0,iw01=0,iw10=0,iw11=0,ival=0,ixval=0,iyval=0;
                var A11=0.0,A12=0.0,A22=0.0,D=0.0,min_eig=0.0;

                var FLT_EPSILON = 0.00000011920929;
                eps *= eps;

                // reset status
                for(; i < count; ++i) {
                    status[i] = 1;
                }

                var max_level = (prev_pyr.levels - 1)|0;
                level = max_level;

                for(; level >= 0; --level) {
                    lev_sc = (1.0/(1 << level));
                    lw = w0 >> level;
                    lh = h0 >> level;
                    dstep = lw << 1;
                    img_prev = prev_imgs[level].data;
                    img_next = next_imgs[level].data;
                    
                    brd_r = (lw - win_size)|0;
                    brd_b = (lh - win_size)|0;

                    // calculate level derivatives
                    scharr_deriv(prev_imgs[level], deriv_m);

                    // iterate through points
                    for(ptid = 0; ptid < count; ++ptid) {
                        i = ptid << 1;
                        j = i + 1;
                        prev_x = prev_xy[i]*lev_sc;
                        prev_y = prev_xy[j]*lev_sc;

                        if( level == max_level ) {
                            next_x = prev_x;
                            next_y = prev_y;
                        } else {
                            next_x = curr_xy[i]*2.0;
                            next_y = curr_xy[j]*2.0;
                        }
                        curr_xy[i] = next_x;
                        curr_xy[j] = next_y;

                        prev_x -= half_win;
                        prev_y -= half_win;
                        iprev_x = prev_x|0;
                        iprev_y = prev_y|0;

                        // border check
                        x = (iprev_x <= brd_tl)|(iprev_x >= brd_r)|(iprev_y <= brd_tl)|(iprev_y >= brd_b);
                        if( x != 0 ) {
                            if( level == 0 ) {
                                status[ptid] = 0;
                            }
                            continue;
                        }

                        a = prev_x - iprev_x;
                        b = prev_y - iprev_y;
                        iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;
                        iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;
                        iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;
                        iw11 = (W_BITS14_ - iw00 - iw01 - iw10);

                        A11 = 0.0, A12 = 0.0, A22 = 0.0;

                        // extract the patch from the first image, compute covariation matrix of derivatives
                        for( y = 0; y < win_size; ++y ) {
                            src = ( (y + iprev_y)*lw + iprev_x )|0;
                            dsrc = src << 1;

                            iptr = (y*win_size)|0;
                            diptr = iptr << 1;
                            for(x = 0 ; x < win_size; ++x, ++src, ++iptr, dsrc += 2) {
                                ival = ( (img_prev[src])*iw00 + (img_prev[src+1])*iw01 +
                                        (img_prev[src+lw])*iw10 + (img_prev[src+lw+1])*iw11 );
                                ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));

                                ixval = ( deriv_lev[dsrc]*iw00 + deriv_lev[dsrc+2]*iw01 +
                                        deriv_lev[dsrc+dstep]*iw10 + deriv_lev[dsrc+dstep+2]*iw11 );
                                ixval = (((ixval) + W_BITS41) >> (W_BITS4));

                                iyval = ( deriv_lev[dsrc+1]*iw00 + deriv_lev[dsrc+3]*iw01 + deriv_lev[dsrc+dstep+1]*iw10 +
                                        deriv_lev[dsrc+dstep+3]*iw11 );
                                iyval = (((iyval) + W_BITS41) >> (W_BITS4));

                                iwin_buf[iptr] = ival;
                                deriv_iwin[diptr++] = ixval;
                                deriv_iwin[diptr++] = iyval;

                                A11 += ixval*ixval;
                                A12 += ixval*iyval;
                                A22 += iyval*iyval;
                            }
                        }

                        A11 *= FLT_SCALE; A12 *= FLT_SCALE; A22 *= FLT_SCALE;

                        D = A11*A22 - A12*A12;
                        min_eig = (A22 + A11 - Math.sqrt((A11-A22)*(A11-A22) + 4.0*A12*A12)) / win_area2;

                        if( min_eig < min_eigen_threshold || D < FLT_EPSILON )
                        {
                            if( level == 0 ) {
                                status[ptid] = 0;
                            }
                            continue;
                        }

                        D = 1.0/D;

                        next_x -= half_win;
                        next_y -= half_win;
                        prev_delta_x = 0.0;
                        prev_delta_y = 0.0;

                        for( iter = 0; iter < max_iter; ++iter ) {
                            inext_x = next_x|0;
                            inext_y = next_y|0;

                            x = (inext_x <= brd_tl)|(inext_x >= brd_r)|(inext_y <= brd_tl)|(inext_y >= brd_b);
                            if( x != 0 ) {
                                if( level == 0 ) {
                                    status[ptid] = 0;
                                }
                                break;
                            }

                            a = next_x - inext_x;
                            b = next_y - inext_y;
                            iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;
                            iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;
                            iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;
                            iw11 = (W_BITS14_ - iw00 - iw01 - iw10);
                            b1 = 0.0, b2 = 0.0;

                            for( y = 0; y < win_size; ++y ) {
                                jptr = ( (y + inext_y)*lw + inext_x )|0;

                                iptr = (y*win_size)|0;
                                diptr = iptr << 1;
                                for( x = 0 ; x < win_size; ++x, ++jptr, ++iptr ) {
                                    ival = ( (img_next[jptr])*iw00 + (img_next[jptr+1])*iw01 +
                                            (img_next[jptr+lw])*iw10 + (img_next[jptr+lw+1])*iw11 );
                                    ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));
                                    ival = (ival - iwin_buf[iptr]);

                                    b1 += ival * deriv_iwin[diptr++];
                                    b2 += ival * deriv_iwin[diptr++];
                                }
                            }

                            b1 *= FLT_SCALE;
                            b2 *= FLT_SCALE;

                            delta_x = ((A12*b2 - A22*b1) * D);
                            delta_y = ((A12*b1 - A11*b2) * D);

                            next_x += delta_x;
                            next_y += delta_y;
                            curr_xy[i] = next_x + half_win;
                            curr_xy[j] = next_y + half_win;

                            if( delta_x*delta_x + delta_y*delta_y <= eps ) {
                                break;
                            }

                            if( iter > 0 && Math.abs(delta_x + prev_delta_x) < 0.01 &&
                                            Math.abs(delta_y + prev_delta_y) < 0.01 ) {
                                curr_xy[i] -= delta_x*0.5;
                                curr_xy[j] -= delta_y*0.5;
                                break;
                            }

                            prev_delta_x = delta_x;
                            prev_delta_y = delta_y;
                        }
                    } // points loop
                } // levels loop

                jsfeat.cache.put_buffer(iwin_node);
                jsfeat.cache.put_buffer(deriv_iwin_node);
                jsfeat.cache.put_buffer(deriv_lev_node);
            }
        };
    })();

    global.optical_flow_lk = optical_flow_lk;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * this code is a rewrite from https://github.com/mtschirs/js-objectdetect implementation
 * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t
 */

(function(global) {
    "use strict";
    //
    var haar = (function() {

        var _group_func = function(r1, r2) {
            var distance = (r1.width * 0.25 + 0.5)|0;

            return r2.x <= r1.x + distance &&
                   r2.x >= r1.x - distance &&
                   r2.y <= r1.y + distance &&
                   r2.y >= r1.y - distance &&
                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&
                   (r2.width * 1.5 + 0.5)|0 >= r1.width;
        }
        
        return {

            edges_density: 0.07,

            detect_single_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale, classifier) {
                var win_w = (classifier.size[0] * scale)|0,
                    win_h = (classifier.size[1] * scale)|0,
                    step_x = (0.5 * scale + 1.5)|0,
                    step_y = step_x;
                var i,j,k,x,y,ex=(width-win_w)|0,ey=(height-win_h)|0;
                var w1=(width+1)|0,edge_dens,mean,variance,std;
                var inv_area = 1.0 / (win_w * win_h);
                var stages,stage,trees,tree,sn,tn,fn,found=true,stage_thresh,stage_sum,tree_sum,feature,features;
                var fi_a,fi_b,fi_c,fi_d,fw,fh;

                var ii_a=0,ii_b=win_w,ii_c=win_h*w1,ii_d=ii_c+win_w;
                var edges_thresh = ((win_w*win_h) * 0xff * this.edges_density)|0;
                // if too much gradient we also can skip
                //var edges_thresh_high = ((win_w*win_h) * 0xff * 0.3)|0;

                var rects = [];
                for(y = 0; y < ey; y += step_y) {
                    ii_a = y * w1;
                    for(x = 0; x < ex; x += step_x, ii_a += step_x) {

                        mean =    int_sum[ii_a] 
                                - int_sum[ii_a+ii_b]
                                - int_sum[ii_a+ii_c]
                                + int_sum[ii_a+ii_d];

                        // canny prune
                        if(int_canny_sum) {
                            edge_dens = (int_canny_sum[ii_a] 
                                        - int_canny_sum[ii_a+ii_b]
                                        - int_canny_sum[ii_a+ii_c]
                                        + int_canny_sum[ii_a+ii_d]);
                            if(edge_dens < edges_thresh || mean < 20) {
                                x += step_x, ii_a += step_x;
                                continue;
                            }
                        }

                        mean *= inv_area;
                        variance = (int_sqsum[ii_a] 
                                    - int_sqsum[ii_a+ii_b]
                                    - int_sqsum[ii_a+ii_c]
                                    + int_sqsum[ii_a+ii_d]) * inv_area - mean * mean;

                        std = variance > 0. ? Math.sqrt(variance) : 1;

                        stages = classifier.complexClassifiers;
                        sn = stages.length;
                        found =  true;
                        for(i = 0; i < sn; ++i) {
                            stage = stages[i];
                            stage_thresh = stage.threshold;
                            trees = stage.simpleClassifiers;
                            tn = trees.length;
                            stage_sum = 0;
                            for(j = 0; j < tn; ++j) {
                                tree = trees[j];
                                tree_sum = 0;
                                features = tree.features;
                                fn = features.length;
                                if(tree.tilted === 1) {
                                    for(k=0; k < fn; ++k) {
                                        feature = features[k];
                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;
                                        fw = ~~(feature[2] * scale);
                                        fh = ~~(feature[3] * scale);
                                        fi_b = fw * w1;
                                        fi_c =  fh * w1;

                                        tree_sum += (int_tilted[fi_a]
                                                    - int_tilted[fi_a + fw + fi_b]
                                                    - int_tilted[fi_a - fh + fi_c]
                                                    + int_tilted[fi_a + fw - fh + fi_b + fi_c]) * feature[4];
                                    }
                                } else {
                                    for(k=0; k < fn; ++k) {
                                        feature = features[k];
                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;
                                        fw = ~~(feature[2] * scale);
                                        fh = ~~(feature[3] * scale);
                                        fi_c = fh * w1;

                                        tree_sum += (int_sum[fi_a] 
                                                    - int_sum[fi_a+fw]
                                                    - int_sum[fi_a+fi_c]
                                                    + int_sum[fi_a+fi_c+fw]) * feature[4];
                                    }
                                }
                                stage_sum += (tree_sum * inv_area < tree.threshold * std) ? tree.left_val : tree.right_val;
                            }
                            if (stage_sum < stage_thresh) {
                                found = false;
                                break;
                            }
                        }
                        
                        if(found) {
                            rects.push({"x" : x,
                                        "y" : y,
                                        "width" : win_w,
                                        "height" : win_h,
                                        "neighbor" : 1,
                                        "confidence" : stage_sum});
                            x += step_x, ii_a += step_x;
                        }
                    }
                }
                return rects;
            },

            detect_multi_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, classifier, scale_factor, scale_min) {
                if (typeof scale_factor === "undefined") { scale_factor = 1.2; }
                if (typeof scale_min === "undefined") { scale_min = 1.0; }
                var win_w = classifier.size[0];
                var win_h = classifier.size[1];
                var rects = [];
                while (scale_min * win_w < width && scale_min * win_h < height) {
                    rects = rects.concat(this.detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale_min, classifier));
                    scale_min *= scale_factor;
                }
                return rects;
            },

            // OpenCV method to group detected rectangles
            group_rectangles: function(rects, min_neighbors) {
                if (typeof min_neighbors === "undefined") { min_neighbors = 1; }
                var i, j, n = rects.length;
                var node = [];
                for (i = 0; i < n; ++i) {
                    node[i] = {"parent" : -1,
                               "element" : rects[i],
                               "rank" : 0};
                }
                for (i = 0; i < n; ++i) {
                    if (!node[i].element)
                        continue;
                    var root = i;
                    while (node[root].parent != -1)
                        root = node[root].parent;
                    for (j = 0; j < n; ++j) {
                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {
                            var root2 = j;

                            while (node[root2].parent != -1)
                                root2 = node[root2].parent;

                            if(root2 != root) {
                                if(node[root].rank > node[root2].rank)
                                    node[root2].parent = root;
                                else {
                                    node[root].parent = root2;
                                    if (node[root].rank == node[root2].rank)
                                    node[root2].rank++;
                                    root = root2;
                                }

                                /* compress path from node2 to the root: */
                                var temp, node2 = j;
                                while (node[node2].parent != -1) {
                                    temp = node2;
                                    node2 = node[node2].parent;
                                    node[temp].parent = root;
                                }

                                /* compress path from node to the root: */
                                node2 = i;
                                while (node[node2].parent != -1) {
                                    temp = node2;
                                    node2 = node[node2].parent;
                                    node[temp].parent = root;
                                }
                            }
                        }
                    }
                }
                var idx_seq = [];
                var class_idx = 0;
                for(i = 0; i < n; i++) {
                    j = -1;
                    var node1 = i;
                    if(node[node1].element) {
                        while (node[node1].parent != -1)
                            node1 = node[node1].parent;
                        if(node[node1].rank >= 0)
                            node[node1].rank = ~class_idx++;
                        j = ~node[node1].rank;
                    }
                    idx_seq[i] = j;
                }
                
                var comps = [];
                for (i = 0; i < class_idx+1; ++i) {
                    comps[i] = {"neighbors" : 0,
                                "x" : 0,
                                "y" : 0,
                                "width" : 0,
                                "height" : 0,
                                "confidence" : 0};
                }

                // count number of neighbors
                for(i = 0; i < n; ++i) {
                    var r1 = rects[i];
                    var idx = idx_seq[i];

                    if (comps[idx].neighbors == 0)
                        comps[idx].confidence = r1.confidence;

                    ++comps[idx].neighbors;

                    comps[idx].x += r1.x;
                    comps[idx].y += r1.y;
                    comps[idx].width += r1.width;
                    comps[idx].height += r1.height;
                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);
                }

                var seq2 = [];
                // calculate average bounding box
                for(i = 0; i < class_idx; ++i) {
                    n = comps[i].neighbors;
                    if (n >= min_neighbors)
                        seq2.push({"x" : (comps[i].x * 2 + n) / (2 * n),
                                   "y" : (comps[i].y * 2 + n) / (2 * n),
                                   "width" : (comps[i].width * 2 + n) / (2 * n),
                                   "height" : (comps[i].height * 2 + n) / (2 * n),
                                   "neighbors" : comps[i].neighbors,
                                   "confidence" : comps[i].confidence});
                }

                var result_seq = [];
                n = seq2.length;
                // filter out small face rectangles inside large face rectangles
                for(i = 0; i < n; ++i) {
                    var r1 = seq2[i];
                    var flag = true;
                    for(j = 0; j < n; ++j) {
                        var r2 = seq2[j];
                        var distance = (r2.width * 0.25 + 0.5)|0;

                        if(i != j &&
                           r1.x >= r2.x - distance &&
                           r1.y >= r2.y - distance &&
                           r1.x + r1.width <= r2.x + r2.width + distance &&
                           r1.y + r1.height <= r2.y + r2.height + distance &&
                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {
                            flag = false;
                            break;
                        }
                    }

                    if(flag)
                        result_seq.push(r1);
                }
                return result_seq;
            }
        };

    })();

    global.haar = haar;

})(jsfeat);
/**
 * BBF: Brightness Binary Feature
 *
 * @author Eugene Zatepyakin / http://inspirit.ru/
 *
 * this code is a rewrite from https://github.com/liuliu/ccv implementation
 * @author Liu Liu / http://liuliu.me/
 *
 * The original paper refers to: YEF∗ Real-Time Object Detection, Yotam Abramson and Bruno Steux
 */

(function(global) {
    "use strict";
    //
    var bbf = (function() {

        var _group_func = function(r1, r2) {
            var distance = (r1.width * 0.25 + 0.5)|0;

            return r2.x <= r1.x + distance &&
                   r2.x >= r1.x - distance &&
                   r2.y <= r1.y + distance &&
                   r2.y >= r1.y - distance &&
                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&
                   (r2.width * 1.5 + 0.5)|0 >= r1.width;
        }

        var img_pyr = new jsfeat.pyramid_t(1);

        return {

            interval: 4,
            scale: 1.1486,
            next: 5,
            scale_to: 1,

            // make features local copy
            // to avoid array allocation with each scale
            // this is strange but array works faster than Int32 version???
            prepare_cascade: function(cascade) {
                var sn = cascade.stage_classifier.length;
                for (var j = 0; j < sn; j++) {
                    var orig_feature = cascade.stage_classifier[j].feature;
                    var f_cnt = cascade.stage_classifier[j].count;
                    var feature = cascade.stage_classifier[j]._feature = new Array(f_cnt);
                    for (var k = 0; k < f_cnt; k++) {
                        feature[k] = {"size" : orig_feature[k].size,
                                      "px" : new Array(orig_feature[k].size),
                                      "pz" : new Array(orig_feature[k].size),
                                      "nx" : new Array(orig_feature[k].size),
                                      "nz" : new Array(orig_feature[k].size)};
                    }
                }
            },

            build_pyramid: function(src, min_width, min_height, interval) {
                if (typeof interval === "undefined") { interval = 4; }

                var sw=src.cols,sh=src.rows;
                var i=0,nw=0,nh=0;
                var new_pyr=false;
                var src0=src,src1=src;
                var data_type = jsfeat.U8_t | jsfeat.C1_t;

                this.interval = interval;
                this.scale = Math.pow(2, 1 / (this.interval + 1));
                this.next = (this.interval + 1)|0;
                this.scale_to = (Math.log(Math.min(sw / min_width, sh / min_height)) / Math.log(this.scale))|0;

                var pyr_l = ((this.scale_to + this.next * 2) * 4) | 0;
                if(img_pyr.levels != pyr_l) {
                    img_pyr.levels = pyr_l;
                    img_pyr.data = new Array(pyr_l);
                    new_pyr = true;
                    img_pyr.data[0] = src; // first is src
                }

                for (i = 1; i <= this.interval; ++i) {
                    nw = (sw / Math.pow(this.scale, i))|0;
                    nh = (sh / Math.pow(this.scale, i))|0;
                    src0 = img_pyr.data[i<<2];
                    if(new_pyr || nw != src0.cols || nh != src0.rows) {
                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);
                        src0 = img_pyr.data[i<<2];
                    }
                    jsfeat.imgproc.resample(src, src0, nw, nh);
                }
                for (i = this.next; i < this.scale_to + this.next * 2; ++i) {
                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];
                    src0 = img_pyr.data[i<<2];
                    nw = src1.cols >> 1;
                    nh = src1.rows >> 1;
                    if(new_pyr || nw != src0.cols || nh != src0.rows) {
                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);
                        src0 = img_pyr.data[i<<2];
                    }
                    jsfeat.imgproc.pyrdown(src1, src0);
                }
                for (i = this.next * 2; i < this.scale_to + this.next * 2; ++i) {
                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];
                    nw = src1.cols >> 1;
                    nh = src1.rows >> 1;
                    src0 = img_pyr.data[(i<<2)+1];
                    if(new_pyr || nw != src0.cols || nh != src0.rows) {
                        img_pyr.data[(i<<2)+1] = new jsfeat.matrix_t(nw, nh, data_type);
                        src0 = img_pyr.data[(i<<2)+1];
                    }
                    jsfeat.imgproc.pyrdown(src1, src0, 1, 0);
                    //
                    src0 = img_pyr.data[(i<<2)+2];
                    if(new_pyr || nw != src0.cols || nh != src0.rows) {
                        img_pyr.data[(i<<2)+2] = new jsfeat.matrix_t(nw, nh, data_type);
                        src0 = img_pyr.data[(i<<2)+2];
                    }
                    jsfeat.imgproc.pyrdown(src1, src0, 0, 1);
                    //
                    src0 = img_pyr.data[(i<<2)+3];
                    if(new_pyr || nw != src0.cols || nh != src0.rows) {
                        img_pyr.data[(i<<2)+3] = new jsfeat.matrix_t(nw, nh, data_type);
                        src0 = img_pyr.data[(i<<2)+3];
                    }
                    jsfeat.imgproc.pyrdown(src1, src0, 1, 1);
                }
                return img_pyr;
            },

            detect: function(pyramid, cascade) {
                var interval = this.interval;
                var scale = this.scale;
                var next = this.next;
                var scale_upto = this.scale_to;
                var i=0,j=0,k=0,n=0,x=0,y=0,q=0,sn=0,f_cnt=0,q_cnt=0,p=0,pmin=0,nmax=0,f=0,i4=0,qw=0,qh=0;
                var sum=0.0, alpha, feature, orig_feature, feature_k, feature_o, flag = true, shortcut=true;
                var scale_x = 1.0, scale_y = 1.0;
                var dx = [0, 1, 0, 1];
                var dy = [0, 0, 1, 1];
                var seq = [];
                var pyr=pyramid.data, bpp = 1, bpp2 = 2, bpp4 = 4;

                var u8 = [], u8o = [0,0,0];
                var step = [0,0,0];
                var paddings = [0,0,0];

                for (i = 0; i < scale_upto; i++) {
                    i4 = (i<<2);
                    qw = pyr[i4 + (next << 3)].cols - (cascade.width >> 2);
                    qh = pyr[i4 + (next << 3)].rows - (cascade.height >> 2);
                    step[0] = pyr[i4].cols * bpp;
                    step[1] = pyr[i4 + (next << 2)].cols * bpp;
                    step[2] = pyr[i4 + (next << 3)].cols * bpp;
                    paddings[0] = (pyr[i4].cols * bpp4) - (qw * bpp4);
                    paddings[1] = (pyr[i4 + (next << 2)].cols * bpp2) - (qw * bpp2);
                    paddings[2] = (pyr[i4 + (next << 3)].cols * bpp) - (qw * bpp);
                    sn = cascade.stage_classifier.length;
                    for (j = 0; j < sn; j++) {
                        orig_feature = cascade.stage_classifier[j].feature;
                        feature = cascade.stage_classifier[j]._feature;
                        f_cnt = cascade.stage_classifier[j].count;
                        for (k = 0; k < f_cnt; k++) {
                            feature_k = feature[k];
                            feature_o = orig_feature[k];
                            q_cnt = feature_o.size|0;
                            for (q = 0; q < q_cnt; q++) {
                                feature_k.px[q] = (feature_o.px[q] * bpp) + feature_o.py[q] * step[feature_o.pz[q]];
                                feature_k.pz[q] = feature_o.pz[q];
                                feature_k.nx[q] = (feature_o.nx[q] * bpp) + feature_o.ny[q] * step[feature_o.nz[q]];
                                feature_k.nz[q] = feature_o.nz[q];
                            }
                        }
                    }
                    u8[0] = pyr[i4].data; u8[1] = pyr[i4 + (next<<2)].data;
                    for (q = 0; q < 4; q++) {
                        u8[2] = pyr[i4 + (next<<3) + q].data;
                        u8o[0] = (dx[q]*bpp2) + dy[q] * (pyr[i4].cols*bpp2); 
                        u8o[1] = (dx[q]*bpp) + dy[q] * (pyr[i4 + (next<<2)].cols*bpp); 
                        u8o[2] = 0;
                        for (y = 0; y < qh; y++) {
                            for (x = 0; x < qw; x++) {
                                sum = 0;
                                flag = true;
                                sn = cascade.stage_classifier.length;
                                for (j = 0; j < sn; j++) {
                                    sum = 0;
                                    alpha = cascade.stage_classifier[j].alpha;
                                    feature = cascade.stage_classifier[j]._feature;
                                    f_cnt = cascade.stage_classifier[j].count;
                                    for (k = 0; k < f_cnt; k++) {
                                        feature_k = feature[k];
                                        pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];
                                        nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];
                                        if (pmin <= nmax) {
                                            sum += alpha[k << 1];
                                        } else {
                                            shortcut = true;
                                            q_cnt = feature_k.size;
                                            for (f = 1; f < q_cnt; f++) {
                                                if (feature_k.pz[f] >= 0) {
                                                    p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];
                                                    if (p < pmin) {
                                                        if (p <= nmax) {
                                                            shortcut = false;
                                                            break;
                                                        }
                                                        pmin = p;
                                                    }
                                                }
                                                if (feature_k.nz[f] >= 0) {
                                                    n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];
                                                    if (n > nmax) {
                                                        if (pmin <= n) {
                                                            shortcut = false;
                                                            break;
                                                        }
                                                        nmax = n;
                                                    }
                                                }
                                            }
                                            sum += (shortcut) ? alpha[(k << 1) + 1] : alpha[k << 1];
                                        }
                                    }
                                    if (sum < cascade.stage_classifier[j].threshold) {
                                        flag = false;
                                        break;
                                    }
                                }
                                if (flag) {
                                    seq.push({"x" : (x * 4 + dx[q] * 2) * scale_x,
                                              "y" : (y * 4 + dy[q] * 2) * scale_y,
                                              "width" : cascade.width * scale_x,
                                              "height" : cascade.height * scale_y,
                                              "neighbor" : 1,
                                              "confidence" : sum});
                                    ++x;
                                    u8o[0] += bpp4;
                                    u8o[1] += bpp2;
                                    u8o[2] += bpp;
                                }
                                u8o[0] += bpp4;
                                u8o[1] += bpp2;
                                u8o[2] += bpp;
                            }
                            u8o[0] += paddings[0];
                            u8o[1] += paddings[1];
                            u8o[2] += paddings[2];
                        }
                    }
                    scale_x *= scale;
                    scale_y *= scale;
                }

                return seq;
            },

            // OpenCV method to group detected rectangles
            group_rectangles: function(rects, min_neighbors) {
                if (typeof min_neighbors === "undefined") { min_neighbors = 1; }
                var i, j, n = rects.length;
                var node = [];
                for (i = 0; i < n; ++i) {
                    node[i] = {"parent" : -1,
                               "element" : rects[i],
                               "rank" : 0};
                }
                for (i = 0; i < n; ++i) {
                    if (!node[i].element)
                        continue;
                    var root = i;
                    while (node[root].parent != -1)
                        root = node[root].parent;
                    for (j = 0; j < n; ++j) {
                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {
                            var root2 = j;

                            while (node[root2].parent != -1)
                                root2 = node[root2].parent;

                            if(root2 != root) {
                                if(node[root].rank > node[root2].rank)
                                    node[root2].parent = root;
                                else {
                                    node[root].parent = root2;
                                    if (node[root].rank == node[root2].rank)
                                    node[root2].rank++;
                                    root = root2;
                                }

                                /* compress path from node2 to the root: */
                                var temp, node2 = j;
                                while (node[node2].parent != -1) {
                                    temp = node2;
                                    node2 = node[node2].parent;
                                    node[temp].parent = root;
                                }

                                /* compress path from node to the root: */
                                node2 = i;
                                while (node[node2].parent != -1) {
                                    temp = node2;
                                    node2 = node[node2].parent;
                                    node[temp].parent = root;
                                }
                            }
                        }
                    }
                }
                var idx_seq = [];
                var class_idx = 0;
                for(i = 0; i < n; i++) {
                    j = -1;
                    var node1 = i;
                    if(node[node1].element) {
                        while (node[node1].parent != -1)
                            node1 = node[node1].parent;
                        if(node[node1].rank >= 0)
                            node[node1].rank = ~class_idx++;
                        j = ~node[node1].rank;
                    }
                    idx_seq[i] = j;
                }
                
                var comps = [];
                for (i = 0; i < class_idx+1; ++i) {
                    comps[i] = {"neighbors" : 0,
                                "x" : 0,
                                "y" : 0,
                                "width" : 0,
                                "height" : 0,
                                "confidence" : 0};
                }

                // count number of neighbors
                for(i = 0; i < n; ++i) {
                    var r1 = rects[i];
                    var idx = idx_seq[i];

                    if (comps[idx].neighbors == 0)
                        comps[idx].confidence = r1.confidence;

                    ++comps[idx].neighbors;

                    comps[idx].x += r1.x;
                    comps[idx].y += r1.y;
                    comps[idx].width += r1.width;
                    comps[idx].height += r1.height;
                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);
                }

                var seq2 = [];
                // calculate average bounding box
                for(i = 0; i < class_idx; ++i) {
                    n = comps[i].neighbors;
                    if (n >= min_neighbors)
                        seq2.push({"x" : (comps[i].x * 2 + n) / (2 * n),
                                   "y" : (comps[i].y * 2 + n) / (2 * n),
                                   "width" : (comps[i].width * 2 + n) / (2 * n),
                                   "height" : (comps[i].height * 2 + n) / (2 * n),
                                   "neighbors" : comps[i].neighbors,
                                   "confidence" : comps[i].confidence});
                }

                var result_seq = [];
                n = seq2.length;
                // filter out small face rectangles inside large face rectangles
                for(i = 0; i < n; ++i) {
                    var r1 = seq2[i];
                    var flag = true;
                    for(j = 0; j < n; ++j) {
                        var r2 = seq2[j];
                        var distance = (r2.width * 0.25 + 0.5)|0;

                        if(i != j &&
                           r1.x >= r2.x - distance &&
                           r1.y >= r2.y - distance &&
                           r1.x + r1.width <= r2.x + r2.width + distance &&
                           r1.y + r1.height <= r2.y + r2.height + distance &&
                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {
                            flag = false;
                            break;
                        }
                    }

                    if(flag)
                        result_seq.push(r1);
                }
                return result_seq;
            }

        };

    })();

    global.bbf = bbf;

})(jsfeat);
/**
 * @author Eugene Zatepyakin / http://inspirit.ru/
 */

(function(lib) {
    "use strict";

    if (typeof module === "undefined" || typeof module.exports === "undefined") {
        // in a browser, define its namespaces in global
        window.jsfeat = lib;
    } else {
        // in commonjs, or when AMD wrapping has been applied, define its namespaces as exports
        module.exports = lib;
    }
})(jsfeat);


/***/ }),
/* 31 */
/***/ (function(module, exports) {

/*
* Copyright (c) 2015, Leon Sorokin
* All rights reserved. (MIT Licensed)
*
* RgbQuant.js - an image quantization lib
*/

(function(){
	function RgbQuant(opts) {
		opts = opts || {};

		// 1 = by global population, 2 = subregion population threshold
		this.method = opts.method || 2;
		// desired final palette size
		this.colors = opts.colors || 256;
		// # of highest-frequency colors to start with for palette reduction
		this.initColors = opts.initColors || 4096;
		// color-distance threshold for initial reduction pass
		this.initDist = opts.initDist || 0.01;
		// subsequent passes threshold
		this.distIncr = opts.distIncr || 0.005;
		// palette grouping
		this.hueGroups = opts.hueGroups || 10;
		this.satGroups = opts.satGroups || 10;
		this.lumGroups = opts.lumGroups || 10;
		// if > 0, enables hues stats and min-color retention per group
		this.minHueCols = opts.minHueCols || 0;
		// HueStats instance
		this.hueStats = this.minHueCols ? new HueStats(this.hueGroups, this.minHueCols) : null;

		// subregion partitioning box size
		this.boxSize = opts.boxSize || [64,64];
		// number of same pixels required within box for histogram inclusion
		this.boxPxls = opts.boxPxls || 2;
		// palette locked indicator
		this.palLocked = false;
		// palette sort order
//		this.sortPal = ['hue-','lum-','sat-'];

		// dithering/error diffusion kernel name
		this.dithKern = opts.dithKern || null;
		// dither serpentine pattern
		this.dithSerp = opts.dithSerp || false;
		// minimum color difference (0-1) needed to dither
		this.dithDelta = opts.dithDelta || 0;

		// accumulated histogram
		this.histogram = {};
		// palette - rgb triplets
		this.idxrgb = opts.palette ? opts.palette.slice(0) : [];
		// palette - int32 vals
		this.idxi32 = [];
		// reverse lookup {i32:idx}
		this.i32idx = {};
		// {i32:rgb}
		this.i32rgb = {};
		// enable color caching (also incurs overhead of cache misses and cache building)
		this.useCache = opts.useCache !== false;
		// min color occurance count needed to qualify for caching
		this.cacheFreq = opts.cacheFreq || 10;
		// allows pre-defined palettes to be re-indexed (enabling palette compacting and sorting)
		this.reIndex = opts.reIndex || this.idxrgb.length == 0;
		// selection of color-distance equation
		this.colorDist = opts.colorDist == "manhattan" ? distManhattan : distEuclidean;

		// if pre-defined palette, build lookups
		if (this.idxrgb.length > 0) {
			var self = this;
			this.idxrgb.forEach(function(rgb, i) {
				var i32 = (
					(255    << 24) |	// alpha
					(rgb[2] << 16) |	// blue
					(rgb[1] <<  8) |	// green
					 rgb[0]				// red
				) >>> 0;

				self.idxi32[i]		= i32;
				self.i32idx[i32]	= i;
				self.i32rgb[i32]	= rgb;
			});
		}
	}

	// gathers histogram info
	RgbQuant.prototype.sample = function sample(img, width) {
		if (this.palLocked)
			throw "Cannot sample additional images, palette already assembled.";

		var data = getImageData(img, width);

		switch (this.method) {
			case 1: this.colorStats1D(data.buf32); break;
			case 2: this.colorStats2D(data.buf32, data.width); break;
		}
	};

	// image quantizer
	// todo: memoize colors here also
	// @retType: 1 - Uint8Array (default), 2 - Indexed array, 3 - Match @img type (unimplemented, todo)
	RgbQuant.prototype.reduce = function reduce(img, retType, dithKern, dithSerp) {
		if (!this.palLocked)
			this.buildPal();

		dithKern = dithKern || this.dithKern;
		dithSerp = typeof dithSerp != "undefined" ? dithSerp : this.dithSerp;

		retType = retType || 1;

		// reduce w/dither
		if (dithKern)
			var out32 = this.dither(img, dithKern, dithSerp);
		else {
			var data = getImageData(img),
				buf32 = data.buf32,
				len = buf32.length,
				out32 = new Uint32Array(len);

			for (var i = 0; i < len; i++) {
				var i32 = buf32[i];
				out32[i] = this.nearestColor(i32);
			}
		}

		if (retType == 1)
			return new Uint8Array(out32.buffer);

		if (retType == 2) {
			var out = [],
				len = out32.length;

			for (var i = 0; i < len; i++) {
				var i32 = out32[i];
				out[i] = this.i32idx[i32];
			}

			return out;
		}
	};

	// adapted from http://jsbin.com/iXofIji/2/edit by PAEz
	RgbQuant.prototype.dither = function(img, kernel, serpentine) {
		// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/
		var kernels = {
			FloydSteinberg: [
				[7 / 16, 1, 0],
				[3 / 16, -1, 1],
				[5 / 16, 0, 1],
				[1 / 16, 1, 1]
			],
			FalseFloydSteinberg: [
				[3 / 8, 1, 0],
				[3 / 8, 0, 1],
				[2 / 8, 1, 1]
			],
			Stucki: [
				[8 / 42, 1, 0],
				[4 / 42, 2, 0],
				[2 / 42, -2, 1],
				[4 / 42, -1, 1],
				[8 / 42, 0, 1],
				[4 / 42, 1, 1],
				[2 / 42, 2, 1],
				[1 / 42, -2, 2],
				[2 / 42, -1, 2],
				[4 / 42, 0, 2],
				[2 / 42, 1, 2],
				[1 / 42, 2, 2]
			],
			Atkinson: [
				[1 / 8, 1, 0],
				[1 / 8, 2, 0],
				[1 / 8, -1, 1],
				[1 / 8, 0, 1],
				[1 / 8, 1, 1],
				[1 / 8, 0, 2]
			],
			Jarvis: [			// Jarvis, Judice, and Ninke / JJN?
				[7 / 48, 1, 0],
				[5 / 48, 2, 0],
				[3 / 48, -2, 1],
				[5 / 48, -1, 1],
				[7 / 48, 0, 1],
				[5 / 48, 1, 1],
				[3 / 48, 2, 1],
				[1 / 48, -2, 2],
				[3 / 48, -1, 2],
				[5 / 48, 0, 2],
				[3 / 48, 1, 2],
				[1 / 48, 2, 2]
			],
			Burkes: [
				[8 / 32, 1, 0],
				[4 / 32, 2, 0],
				[2 / 32, -2, 1],
				[4 / 32, -1, 1],
				[8 / 32, 0, 1],
				[4 / 32, 1, 1],
				[2 / 32, 2, 1],
			],
			Sierra: [
				[5 / 32, 1, 0],
				[3 / 32, 2, 0],
				[2 / 32, -2, 1],
				[4 / 32, -1, 1],
				[5 / 32, 0, 1],
				[4 / 32, 1, 1],
				[2 / 32, 2, 1],
				[2 / 32, -1, 2],
				[3 / 32, 0, 2],
				[2 / 32, 1, 2],
			],
			TwoSierra: [
				[4 / 16, 1, 0],
				[3 / 16, 2, 0],
				[1 / 16, -2, 1],
				[2 / 16, -1, 1],
				[3 / 16, 0, 1],
				[2 / 16, 1, 1],
				[1 / 16, 2, 1],
			],
			SierraLite: [
				[2 / 4, 1, 0],
				[1 / 4, -1, 1],
				[1 / 4, 0, 1],
			],
		};

		if (!kernel || !kernels[kernel]) {
			throw 'Unknown dithering kernel: ' + kernel;
		}

		var ds = kernels[kernel];

		var data = getImageData(img),
//			buf8 = data.buf8,
			buf32 = data.buf32,
			width = data.width,
			height = data.height,
			len = buf32.length;

		var dir = serpentine ? -1 : 1;

		for (var y = 0; y < height; y++) {
			if (serpentine)
				dir = dir * -1;

			var lni = y * width;

			for (var x = (dir == 1 ? 0 : width - 1), xend = (dir == 1 ? width : 0); x !== xend; x += dir) {
				// Image pixel
				var idx = lni + x,
					i32 = buf32[idx],
					r1 = (i32 & 0xff),
					g1 = (i32 & 0xff00) >> 8,
					b1 = (i32 & 0xff0000) >> 16;

				// Reduced pixel
				var i32x = this.nearestColor(i32),
					r2 = (i32x & 0xff),
					g2 = (i32x & 0xff00) >> 8,
					b2 = (i32x & 0xff0000) >> 16;

				buf32[idx] =
					(255 << 24)	|	// alpha
					(b2  << 16)	|	// blue
					(g2  <<  8)	|	// green
					 r2;

				// dithering strength
				if (this.dithDelta) {
					var dist = this.colorDist([r1, g1, b1], [r2, g2, b2]);
					if (dist < this.dithDelta)
						continue;
				}

				// Component distance
				var er = r1 - r2,
					eg = g1 - g2,
					eb = b1 - b2;

				for (var i = (dir == 1 ? 0 : ds.length - 1), end = (dir == 1 ? ds.length : 0); i !== end; i += dir) {
					var x1 = ds[i][1] * dir,
						y1 = ds[i][2];

					var lni2 = y1 * width;

					if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {
						var d = ds[i][0];
						var idx2 = idx + (lni2 + x1);

						var r3 = (buf32[idx2] & 0xff),
							g3 = (buf32[idx2] & 0xff00) >> 8,
							b3 = (buf32[idx2] & 0xff0000) >> 16;

						var r4 = Math.max(0, Math.min(255, r3 + er * d)),
							g4 = Math.max(0, Math.min(255, g3 + eg * d)),
							b4 = Math.max(0, Math.min(255, b3 + eb * d));

						buf32[idx2] =
							(255 << 24)	|	// alpha
							(b4  << 16)	|	// blue
							(g4  <<  8)	|	// green
							 r4;			// red
					}
				}
			}
		}

		return buf32;
	};

	// reduces histogram to palette, remaps & memoizes reduced colors
	RgbQuant.prototype.buildPal = function buildPal(noSort) {
		if (this.palLocked || this.idxrgb.length > 0 && this.idxrgb.length <= this.colors) return;

		var histG  = this.histogram,
			sorted = sortedHashKeys(histG, true);

		if (sorted.length == 0)
			throw "Nothing has been sampled, palette cannot be built.";

		switch (this.method) {
			case 1:
				var cols = this.initColors,
					last = sorted[cols - 1],
					freq = histG[last];

				var idxi32 = sorted.slice(0, cols);

				// add any cut off colors with same freq as last
				var pos = cols, len = sorted.length;
				while (pos < len && histG[sorted[pos]] == freq)
					idxi32.push(sorted[pos++]);

				// inject min huegroup colors
				if (this.hueStats)
					this.hueStats.inject(idxi32);

				break;
			case 2:
				var idxi32 = sorted;
				break;
		}

		// int32-ify values
		idxi32 = idxi32.map(function(v){return +v;});

		this.reducePal(idxi32);

		if (!noSort && this.reIndex)
			this.sortPal();

		// build cache of top histogram colors
		if (this.useCache)
			this.cacheHistogram(idxi32);

		this.palLocked = true;
	};

	RgbQuant.prototype.palette = function palette(tuples, noSort) {
		this.buildPal(noSort);
		return tuples ? this.idxrgb : new Uint8Array((new Uint32Array(this.idxi32)).buffer);
	};

	RgbQuant.prototype.prunePal = function prunePal(keep) {
		var i32;

		for (var j = 0; j < this.idxrgb.length; j++) {
			if (!keep[j]) {
				i32 = this.idxi32[j];
				this.idxrgb[j] = null;
				this.idxi32[j] = null;
				delete this.i32idx[i32];
			}
		}

		// compact
		if (this.reIndex) {
			var idxrgb = [],
				idxi32 = [],
				i32idx = {};

			for (var j = 0, i = 0; j < this.idxrgb.length; j++) {
				if (this.idxrgb[j]) {
					i32 = this.idxi32[j];
					idxrgb[i] = this.idxrgb[j];
					i32idx[i32] = i;
					idxi32[i] = i32;
					i++;
				}
			}

			this.idxrgb = idxrgb;
			this.idxi32 = idxi32;
			this.i32idx = i32idx;
		}
	};

	// reduces similar colors from an importance-sorted Uint32 rgba array
	RgbQuant.prototype.reducePal = function reducePal(idxi32) {
		// if pre-defined palette's length exceeds target
		if (this.idxrgb.length > this.colors) {
			// quantize histogram to existing palette
			var len = idxi32.length, keep = {}, uniques = 0, idx, pruned = false;

			for (var i = 0; i < len; i++) {
				// palette length reached, unset all remaining colors (sparse palette)
				if (uniques == this.colors && !pruned) {
					this.prunePal(keep);
					pruned = true;
				}

				idx = this.nearestIndex(idxi32[i]);

				if (uniques < this.colors && !keep[idx]) {
					keep[idx] = true;
					uniques++;
				}
			}

			if (!pruned) {
				this.prunePal(keep);
				pruned = true;
			}
		}
		// reduce histogram to create initial palette
		else {
			// build full rgb palette
			var idxrgb = idxi32.map(function(i32) {
				return [
					(i32 & 0xff),
					(i32 & 0xff00) >> 8,
					(i32 & 0xff0000) >> 16,
				];
			});

			var len = idxrgb.length,
				palLen = len,
				thold = this.initDist;

			// palette already at or below desired length
			if (palLen > this.colors) {
				while (palLen > this.colors) {
					var memDist = [];

					// iterate palette
					for (var i = 0; i < len; i++) {
						var pxi = idxrgb[i], i32i = idxi32[i];
						if (!pxi) continue;

						for (var j = i + 1; j < len; j++) {
							var pxj = idxrgb[j], i32j = idxi32[j];
							if (!pxj) continue;

							var dist = this.colorDist(pxi, pxj);

							if (dist < thold) {
								// store index,rgb,dist
								memDist.push([j, pxj, i32j, dist]);

								// kill squashed value
								delete(idxrgb[j]);
								palLen--;
							}
						}
					}

					// palette reduction pass
					// console.log("palette length: " + palLen);

					// if palette is still much larger than target, increment by larger initDist
					thold += (palLen > this.colors * 3) ? this.initDist : this.distIncr;
				}

				// if palette is over-reduced, re-add removed colors with largest distances from last round
				if (palLen < this.colors) {
					// sort descending
					sort.call(memDist, function(a,b) {
						return b[3] - a[3];
					});

					var k = 0;
					while (palLen < this.colors) {
						// re-inject rgb into final palette
						idxrgb[memDist[k][0]] = memDist[k][1];

						palLen++;
						k++;
					}
				}
			}

			var len = idxrgb.length;
			for (var i = 0; i < len; i++) {
				if (!idxrgb[i]) continue;

				this.idxrgb.push(idxrgb[i]);
				this.idxi32.push(idxi32[i]);

				this.i32idx[idxi32[i]] = this.idxi32.length - 1;
				this.i32rgb[idxi32[i]] = idxrgb[i];
			}
		}
	};

	// global top-population
	RgbQuant.prototype.colorStats1D = function colorStats1D(buf32) {
		var histG = this.histogram,
			num = 0, col,
			len = buf32.length;

		for (var i = 0; i < len; i++) {
			col = buf32[i];

			// skip transparent
			if ((col & 0xff000000) >> 24 == 0) continue;

			// collect hue stats
			if (this.hueStats)
				this.hueStats.check(col);

			if (col in histG)
				histG[col]++;
			else
				histG[col] = 1;
		}
	};

	// population threshold within subregions
	// FIXME: this can over-reduce (few/no colors same?), need a way to keep
	// important colors that dont ever reach local thresholds (gradients?)
	RgbQuant.prototype.colorStats2D = function colorStats2D(buf32, width) {
		var boxW = this.boxSize[0],
			boxH = this.boxSize[1],
			area = boxW * boxH,
			boxes = makeBoxes(width, buf32.length / width, boxW, boxH),
			histG = this.histogram,
			self = this;

		boxes.forEach(function(box) {
			var effc = Math.max(Math.round((box.w * box.h) / area) * self.boxPxls, 2),
				histL = {}, col;

			iterBox(box, width, function(i) {
				col = buf32[i];

				// skip transparent
				if ((col & 0xff000000) >> 24 == 0) return;

				// collect hue stats
				if (self.hueStats)
					self.hueStats.check(col);

				if (col in histG)
					histG[col]++;
				else if (col in histL) {
					if (++histL[col] >= effc)
						histG[col] = histL[col];
				}
				else
					histL[col] = 1;
			});
		});

		if (this.hueStats)
			this.hueStats.inject(histG);
	};

	// TODO: group very low lum and very high lum colors
	// TODO: pass custom sort order
	RgbQuant.prototype.sortPal = function sortPal() {
		var self = this;

		this.idxi32.sort(function(a,b) {
			var idxA = self.i32idx[a],
				idxB = self.i32idx[b],
				rgbA = self.idxrgb[idxA],
				rgbB = self.idxrgb[idxB];

			var hslA = rgb2hsl(rgbA[0],rgbA[1],rgbA[2]),
				hslB = rgb2hsl(rgbB[0],rgbB[1],rgbB[2]);

			// sort all grays + whites together
			var hueA = (rgbA[0] == rgbA[1] && rgbA[1] == rgbA[2]) ? -1 : hueGroup(hslA.h, self.hueGroups);
			var hueB = (rgbB[0] == rgbB[1] && rgbB[1] == rgbB[2]) ? -1 : hueGroup(hslB.h, self.hueGroups);

			var hueDiff = hueB - hueA;
			if (hueDiff) return -hueDiff;

			var lumDiff = lumGroup(+hslB.l.toFixed(2)) - lumGroup(+hslA.l.toFixed(2));
			if (lumDiff) return -lumDiff;

			var satDiff = satGroup(+hslB.s.toFixed(2)) - satGroup(+hslA.s.toFixed(2));
			if (satDiff) return -satDiff;
		});

		// sync idxrgb & i32idx
		this.idxi32.forEach(function(i32, i) {
			self.idxrgb[i] = self.i32rgb[i32];
			self.i32idx[i32] = i;
		});
	};

	// TOTRY: use HUSL - http://boronine.com/husl/
	RgbQuant.prototype.nearestColor = function nearestColor(i32) {
		var idx = this.nearestIndex(i32);
		return idx === null ? 0 : this.idxi32[idx];
	};

	// TOTRY: use HUSL - http://boronine.com/husl/
	RgbQuant.prototype.nearestIndex = function nearestIndex(i32) {
		// alpha 0 returns null index
		if ((i32 & 0xff000000) >> 24 == 0)
			return null;

		if (this.useCache && (""+i32) in this.i32idx)
			return this.i32idx[i32];

		var min = 1000,
			idx,
			rgb = [
				(i32 & 0xff),
				(i32 & 0xff00) >> 8,
				(i32 & 0xff0000) >> 16,
			],
			len = this.idxrgb.length;

		for (var i = 0; i < len; i++) {
			if (!this.idxrgb[i]) continue;		// sparse palettes

			var dist = this.colorDist(rgb, this.idxrgb[i]);

			if (dist < min) {
				min = dist;
				idx = i;
			}
		}

		return idx;
	};

	RgbQuant.prototype.cacheHistogram = function cacheHistogram(idxi32) {
		for (var i = 0, i32 = idxi32[i]; i < idxi32.length && this.histogram[i32] >= this.cacheFreq; i32 = idxi32[i++])
			this.i32idx[i32] = this.nearestIndex(i32);
	};

	function HueStats(numGroups, minCols) {
		this.numGroups = numGroups;
		this.minCols = minCols;
		this.stats = {};

		for (var i = -1; i < numGroups; i++)
			this.stats[i] = {num: 0, cols: []};

		this.groupsFull = 0;
	}

	HueStats.prototype.check = function checkHue(i32) {
		if (this.groupsFull == this.numGroups + 1)
			this.check = function() {return;};

		var r = (i32 & 0xff),
			g = (i32 & 0xff00) >> 8,
			b = (i32 & 0xff0000) >> 16,
			hg = (r == g && g == b) ? -1 : hueGroup(rgb2hsl(r,g,b).h, this.numGroups),
			gr = this.stats[hg],
			min = this.minCols;

		gr.num++;

		if (gr.num > min)
			return;
		if (gr.num == min)
			this.groupsFull++;

		if (gr.num <= min)
			this.stats[hg].cols.push(i32);
	};

	HueStats.prototype.inject = function injectHues(histG) {
		for (var i = -1; i < this.numGroups; i++) {
			if (this.stats[i].num <= this.minCols) {
				switch (typeOf(histG)) {
					case "Array":
						this.stats[i].cols.forEach(function(col){
							if (histG.indexOf(col) == -1)
								histG.push(col);
						});
						break;
					case "Object":
						this.stats[i].cols.forEach(function(col){
							if (!histG[col])
								histG[col] = 1;
							else
								histG[col]++;
						});
						break;
				}
			}
		}
	};

	// Rec. 709 (sRGB) luma coef
	var Pr = .2126,
		Pg = .7152,
		Pb = .0722;

	// http://alienryderflex.com/hsp.html
	function rgb2lum(r,g,b) {
		return Math.sqrt(
			Pr * r*r +
			Pg * g*g +
			Pb * b*b
		);
	}

	var rd = 255,
		gd = 255,
		bd = 255;

	var euclMax = Math.sqrt(Pr*rd*rd + Pg*gd*gd + Pb*bd*bd);
	// perceptual Euclidean color distance
	function distEuclidean(rgb0, rgb1) {
		var rd = rgb1[0]-rgb0[0],
			gd = rgb1[1]-rgb0[1],
			bd = rgb1[2]-rgb0[2];

		return Math.sqrt(Pr*rd*rd + Pg*gd*gd + Pb*bd*bd) / euclMax;
	}

	var manhMax = Pr*rd + Pg*gd + Pb*bd;
	// perceptual Manhattan color distance
	function distManhattan(rgb0, rgb1) {
		var rd = Math.abs(rgb1[0]-rgb0[0]),
			gd = Math.abs(rgb1[1]-rgb0[1]),
			bd = Math.abs(rgb1[2]-rgb0[2]);

		return (Pr*rd + Pg*gd + Pb*bd) / manhMax;
	}

	// http://rgb2hsl.nichabi.com/javascript-function.php
	function rgb2hsl(r, g, b) {
		var max, min, h, s, l, d;
		r /= 255;
		g /= 255;
		b /= 255;
		max = Math.max(r, g, b);
		min = Math.min(r, g, b);
		l = (max + min) / 2;
		if (max == min) {
			h = s = 0;
		} else {
			d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			switch (max) {
				case r: h = (g - b) / d + (g < b ? 6 : 0); break;
				case g:	h = (b - r) / d + 2; break;
				case b:	h = (r - g) / d + 4; break
			}
			h /= 6;
		}
//		h = Math.floor(h * 360)
//		s = Math.floor(s * 100)
//		l = Math.floor(l * 100)
		return {
			h: h,
			s: s,
			l: rgb2lum(r,g,b),
		};
	}

	function hueGroup(hue, segs) {
		var seg = 1/segs,
			haf = seg/2;

		if (hue >= 1 - haf || hue <= haf)
			return 0;

		for (var i = 1; i < segs; i++) {
			var mid = i*seg;
			if (hue >= mid - haf && hue <= mid + haf)
				return i;
		}
	}

	function satGroup(sat) {
		return sat;
	}

	function lumGroup(lum) {
		return lum;
	}

	function typeOf(val) {
		return Object.prototype.toString.call(val).slice(8,-1);
	}

	var sort = isArrSortStable() ? Array.prototype.sort : stableSort;

	// must be used via stableSort.call(arr, fn)
	function stableSort(fn) {
		var type = typeOf(this[0]);

		if (type == "Number" || type == "String") {
			var ord = {}, len = this.length, val;

			for (var i = 0; i < len; i++) {
				val = this[i];
				if (ord[val] || ord[val] === 0) continue;
				ord[val] = i;
			}

			return this.sort(function(a,b) {
				return fn(a,b) || ord[a] - ord[b];
			});
		}
		else {
			var ord = this.map(function(v){return v});

			return this.sort(function(a,b) {
				return fn(a,b) || ord.indexOf(a) - ord.indexOf(b);
			});
		}
	}

	// test if js engine's Array#sort implementation is stable
	function isArrSortStable() {
		var str = "abcdefghijklmnopqrstuvwxyz";

		return "xyzvwtursopqmnklhijfgdeabc" == str.split("").sort(function(a,b) {
			return ~~(str.indexOf(b)/2.3) - ~~(str.indexOf(a)/2.3);
		}).join("");
	}

	// returns uniform pixel data from various img
	// TODO?: if array is passed, createimagedata, createlement canvas? take a pxlen?
	function getImageData(img, width) {
		var can, ctx, imgd, buf8, buf32, height;

		switch (typeOf(img)) {
			case "HTMLImageElement":
				can = document.createElement("canvas");
				can.width = img.naturalWidth;
				can.height = img.naturalHeight;
				ctx = can.getContext("2d");
				ctx.drawImage(img,0,0);
			case "Canvas":
			case "HTMLCanvasElement":
				can = can || img;
				ctx = ctx || can.getContext("2d");
			case "CanvasRenderingContext2D":
				ctx = ctx || img;
				can = can || ctx.canvas;
				imgd = ctx.getImageData(0, 0, can.width, can.height);
			case "ImageData":
				imgd = imgd || img;
				width = imgd.width;
				if (typeOf(imgd.data) == "CanvasPixelArray")
					buf8 = new Uint8Array(imgd.data);
				else
					buf8 = imgd.data;
			case "Array":
			case "CanvasPixelArray":
				buf8 = buf8 || new Uint8Array(img);
			case "Uint8Array":
			case "Uint8ClampedArray":
				buf8 = buf8 || img;
				buf32 = new Uint32Array(buf8.buffer);
			case "Uint32Array":
				buf32 = buf32 || img;
				buf8 = buf8 || new Uint8Array(buf32.buffer);
				width = width || buf32.length;
				height = buf32.length / width;
		}

		return {
			can: can,
			ctx: ctx,
			imgd: imgd,
			buf8: buf8,
			buf32: buf32,
			width: width,
			height: height,
		};
	}

	// partitions a rect of wid x hgt into
	// array of bboxes of w0 x h0 (or less)
	function makeBoxes(wid, hgt, w0, h0) {
		var wnum = ~~(wid/w0), wrem = wid%w0,
			hnum = ~~(hgt/h0), hrem = hgt%h0,
			xend = wid-wrem, yend = hgt-hrem;

		var bxs = [];
		for (var y = 0; y < hgt; y += h0)
			for (var x = 0; x < wid; x += w0)
				bxs.push({x:x, y:y, w:(x==xend?wrem:w0), h:(y==yend?hrem:h0)});

		return bxs;
	}

	// iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent
	function iterBox(bbox, wid, fn) {
		var b = bbox,
			i0 = b.y * wid + b.x,
			i1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1),
			cnt = 0, incr = wid - b.w + 1, i = i0;

		do {
			fn.call(this, i);
			i += (++cnt % b.w == 0) ? incr : 1;
		} while (i <= i1);
	}

	// returns array of hash keys sorted by their values
	function sortedHashKeys(obj, desc) {
		var keys = [];

		for (var key in obj)
			keys.push(key);

		return sort.call(keys, function(a,b) {
			return desc ? obj[b] - obj[a] : obj[a] - obj[b];
		});
	}

	// expose
	this.RgbQuant = RgbQuant;

	// expose to commonJS
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = RgbQuant;
	}

}).call(this);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.0 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(232)(module), __webpack_require__(8)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // Browser globals (root is window)
    root.IPv6 = factory(root);
  }
}(this, function (root) {
  'use strict';

  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";

  console.log(_in, _out, _expected, _out === _expected);
  */

  // save current IPv6 variable, if any
  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');
      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');
      for (var j = 0; j < 3 ; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0,1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;
          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '')  {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];
      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }

    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
}));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
  }
}(this, function (root) {
  'use strict';

  // save current SecondLevelDomains variable, if any
  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac':' com gov mil net org ',
      'ae':' ac co gov mil name net org pro sch ',
      'af':' com edu gov net org ',
      'al':' com edu gov mil net org ',
      'ao':' co ed gv it og pb ',
      'ar':' com edu gob gov int mil net org tur ',
      'at':' ac co gv or ',
      'au':' asn com csiro edu gov id net org ',
      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb':' biz co com edu gov info net org store tv ',
      'bh':' biz cc com edu gov info net org ',
      'bn':' com edu gov net org ',
      'bo':' com edu gob gov int mil net org tv ',
      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs':' com edu gov net org ',
      'bz':' du et om ov rg ',
      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck':' biz co edu gen gov info net org ',
      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co':' com edu gov mil net nom org ',
      'cr':' ac c co ed fi go or sa ',
      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do':' art com edu gob gov mil net org sld web ',
      'dz':' art asso com edu gov net org pol ',
      'ec':' com edu fin gov info med mil net org pro ',
      'eg':' com edu eun gov mil name net org sci ',
      'er':' com edu gov ind mil net org rochest w ',
      'es':' com edu gob nom org ',
      'et':' biz com edu gov info name net org ',
      'fj':' ac biz com info mil name net org pro ',
      'fk':' ac co gov net nom org ',
      'fr':' asso com f gouv nom prd presse tm ',
      'gg':' co net org ',
      'gh':' com edu gov mil org ',
      'gn':' ac com gov net org ',
      'gr':' com edu gov mil net org ',
      'gt':' com edu gob ind mil net org ',
      'gu':' com edu gov net org ',
      'hk':' com edu gov idv net org ',
      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id':' ac co go mil net or sch web ',
      'il':' ac co gov idf k12 muni net org ',
      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq':' com edu gov i mil net org ',
      'ir':' ac co dnssec gov i id net org sch ',
      'it':' edu gov ',
      'je':' co net org ',
      'jo':' com edu gov mil name net org sch ',
      'jp':' ac ad co ed go gr lg ne or ',
      'ke':' ac co go info me mobi ne or sc ',
      'kh':' com edu gov mil net org per ',
      'ki':' biz com de edu gov info mob net org tel ',
      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn':' edu gov net org ',
      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw':' com edu gov net org ',
      'ky':' com edu gov net org ',
      'kz':' com edu gov mil net org ',
      'lb':' com edu gov net org ',
      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr':' com edu gov net org ',
      'lv':' asn com conf edu gov id mil net org ',
      'ly':' com edu gov id med net org plc sch ',
      'ma':' ac co gov m net org press ',
      'mc':' asso tm ',
      'me':' ac co edu gov its net org priv ',
      'mg':' com edu gov mil nom org prd tm ',
      'mk':' com edu gov inf name net org pro ',
      'ml':' com edu gov net org presse ',
      'mn':' edu gov org ',
      'mo':' com edu gov net org ',
      'mt':' com edu gov net org ',
      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw':' ac co com coop edu gov int museum net org ',
      'mx':' com edu gob net org ',
      'my':' com edu gov mil name net org sch ',
      'nf':' arts com firm info net other per rec store web ',
      'ng':' biz com edu gov mil mobi name net org sch ',
      'ni':' ac co com edu gob mil net nom org ',
      'np':' com edu gov mil net org ',
      'nr':' biz com edu gov info net org ',
      'om':' ac biz co com edu gov med mil museum net org pro sch ',
      'pe':' com edu gob mil net nom org sld ',
      'ph':' com edu gov i mil net ngo org ',
      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr':' ac biz com edu est gov info isla name net org pro prof ',
      'ps':' com edu gov net org plo sec ',
      'pw':' belau co ed go ne or ',
      'ro':' arts com firm info nom nt org rec store tm www ',
      'rs':' ac co edu gov in org ',
      'sb':' com edu gov net org ',
      'sc':' com edu gov net org ',
      'sh':' co com edu gov net nom org ',
      'sl':' com edu gov net org ',
      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv':' com edu gob org red ',
      'sz':' ac co org ',
      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw':' club com ebiz edu game gov idv mil net org ',
      'mu':' ac co com gov net or org ',
      'mz':' ac co edu gov org ',
      'na':' co com ',
      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa':' abo ac com edu gob ing med net nom org sld ',
      'pt':' com edu gov int net nome org publ ',
      'py':' com edu gov mil net org ',
      'qa':' com edu gov mil net org ',
      're':' asso com nom ',
      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw':' ac co com edu gouv gov int mil net ',
      'sa':' com edu gov med net org pub sch ',
      'sd':' com edu gov info med net org tv ',
      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg':' com edu gov idn net org per ',
      'sn':' art com edu gouv org perso univ ',
      'sy':' com edu gov mil net news org ',
      'th':' ac co go in mi net or ',
      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz':' ac co go ne or ',
      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug':' ac co go ne or org sc ',
      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us':' dni fed isa kids nsn ',
      'uy':' com edu gub mil net org ',
      've':' co com edu gob info mil net org web ',
      'vi':' co com k12 net org ',
      'vn':' ac biz com edu gov health info int name net org pro ',
      'ye':' co com gov ltd me net org plc ',
      'yu':' ac co edu gov org ',
      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm':' ac co com edu gov net org sch ',
      // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
      'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
      'net': 'gb jp se uk ',
      'org': 'ae',
      'de': 'com '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
    },
    is: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset >= 0) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return null;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return null;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return null;
      }
      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
        return null;
      }
      return domain.slice(sldOffset+1);
    },
    noConflict: function(){
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    }
  };

  return SLD;
}));


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = (function(){
  return window.overrideIndexedDB || window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
})();


/***/ }),
/* 37 */
/***/ (function(module, exports) {

var React;

React = null;

exports.getReact = function(callback) {
  if (React) {
    return callback(null, React);
  }
  if (window.React) {
    React = window.React;
    return callback(null, React);
  }
  if (typeof window.requirejs === 'function') {
    window.requirejs(['React'], function(r) {
      React = r;
      return callback(null, r);
    }, function(err) {
      return callback(err);
    });
    return;
  }
  return callback(new Error("React not found"));
};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

(function() {
  var clone, contains, createReduce, debounce, getKeys, getValues, guessLanguageFromFilename, intersection, isArray, isObject, optimizeCb, reduceRight, unique;

  clone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

  guessLanguageFromFilename = function(filename) {
    if (/.*\.coffee$/.test(filename)) {
      return 'coffeescript';
    }
    return 'javascript';
  };

  isArray = function(obj) {
    if (Array.isArray) {
      return Array.isArray(obj);
    }
    return Object.prototype.toString.call(arg) === '[object Array]';
  };

  isObject = function(obj) {
    var type;
    type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  unique = function(array) {
    var k, key, output, ref, results, value;
    output = {};
    for (key = k = 0, ref = array.length; 0 <= ref ? k < ref : k > ref; key = 0 <= ref ? ++k : --k) {
      output[array[key]] = array[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  };

  optimizeCb = function(func, context, argCount) {
    if (context === void 0) {
      return func;
    }
    switch ((argCount === null ? 3 : argCount)) {
      case 1:
        return function(value) {
          return func.call(context, value);
        };
      case 2:
        return function(value, other) {
          return func.call(context, value, other);
        };
      case 3:
        return function(value, index, collection) {
          return func.call(context, value, index, collection);
        };
      case 4:
        return function(accumulator, value, index, collection) {
          return func.call(context, accumulator, value, index, collection);
        };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  createReduce = function(dir) {
    var iterator;
    iterator = function(obj, iteratee, memo, keys, index, length) {
      var currentKey;
      while (index >= 0 && index < length) {
        currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
        index += dir;
      }
      return memo;
    };
    return function(obj, iteratee, memo, context) {
      var index, keys, length;
      iteratee = optimizeCb(iteratee, context, 4);
      keys = Object.keys(obj);
      length = (keys || obj).length;
      index = dir > 0 ? 0 : length - 1;
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  };

  reduceRight = createReduce(-1);

  debounce = function(func, wait, immediate) {
    var args, context, later, result, timeout, timestamp;
    timeout = void 0;
    args = void 0;
    context = void 0;
    timestamp = void 0;
    result = void 0;
    later = function() {
      var last;
      last = Date.now - timestamp;
      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) {
            context = args = null;
          }
        }
      }
    };
    return function() {
      var callNow;
      context = this;
      args = arguments;
      timestamp = Date.now;
      callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }
      return result;
    };
  };

  getKeys = function(obj) {
    var key, keys;
    if (!isObject(obj)) {
      return [];
    }
    if (Object.keys) {
      return Object.keys(obj);
    }
    keys = [];
    for (key in obj) {
      if (obj.has(key)) {
        keys.push(key);
      }
    }
    return keys;
  };

  getValues = function(obj) {
    var i, keys, length, values;
    keys = getKeys(obj);
    length = keys.length;
    values = Array(length);
    i = 0;
    while (i < length) {
      values[i] = obj[keys[i]];
      i++;
    }
    return values;
  };

  contains = function(obj, item, fromIndex) {
    if (!isArray(obj)) {
      obj = getValues(obj);
    }
    if (typeof fromIndex !== 'number' || guard) {
      fromIndex = 0;
    }
    return obj.indexOf(item) >= 0;
  };

  intersection = function(array) {
    var argsLength, i, item, j, k, l, ref, ref1, result;
    result = [];
    argsLength = arguments.length;
    for (i = k = 0, ref = array.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      item = array[i];
      if (contains(result, item)) {
        continue;
      }
      for (j = l = 1, ref1 = argsLength; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {
        if (!contains(arguments[j], item)) {
          break;
        }
      }
      if (j === argsLength) {
        result.push(item);
      }
    }
    return result;
  };

  exports.clone = clone;

  exports.guessLanguageFromFilename = guessLanguageFromFilename;

  exports.optimizeCb = optimizeCb;

  exports.reduceRight = reduceRight;

  exports.debounce = debounce;

  exports.unique = unique;

  exports.intersection = intersection;

  exports.getValues = getValues;

}).call(this);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var Component, EventEmitter, IP, ProcessContext, ProcessInput, ProcessOutput, debug, debugBrackets, debugSend, ports,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = __webpack_require__(4).EventEmitter;

  ports = __webpack_require__(40);

  IP = __webpack_require__(7);

  debug = __webpack_require__(5)('noflo:component');

  debugBrackets = __webpack_require__(5)('noflo:component:brackets');

  debugSend = __webpack_require__(5)('noflo:component:send');

  Component = (function(superClass) {
    extend(Component, superClass);

    Component.prototype.description = '';

    Component.prototype.icon = null;

    function Component(options) {
      this.error = bind(this.error, this);
      var ref, ref1, ref2;
      if (!options) {
        options = {};
      }
      if (!options.inPorts) {
        options.inPorts = {};
      }
      if (options.inPorts instanceof ports.InPorts) {
        this.inPorts = options.inPorts;
      } else {
        this.inPorts = new ports.InPorts(options.inPorts);
      }
      if (!options.outPorts) {
        options.outPorts = {};
      }
      if (options.outPorts instanceof ports.OutPorts) {
        this.outPorts = options.outPorts;
      } else {
        this.outPorts = new ports.OutPorts(options.outPorts);
      }
      if (options.icon) {
        this.icon = options.icon;
      }
      if (options.description) {
        this.description = options.description;
      }
      this.started = false;
      this.load = 0;
      this.ordered = (ref = options.ordered) != null ? ref : false;
      this.autoOrdering = (ref1 = options.autoOrdering) != null ? ref1 : null;
      this.outputQ = [];
      this.bracketContext = {
        "in": {},
        out: {}
      };
      this.activateOnInput = (ref2 = options.activateOnInput) != null ? ref2 : true;
      this.forwardBrackets = {
        "in": ['out', 'error']
      };
      if ('forwardBrackets' in options) {
        this.forwardBrackets = options.forwardBrackets;
      }
      if (typeof options.process === 'function') {
        this.process(options.process);
      }
    }

    Component.prototype.getDescription = function() {
      return this.description;
    };

    Component.prototype.isReady = function() {
      return true;
    };

    Component.prototype.isSubgraph = function() {
      return false;
    };

    Component.prototype.setIcon = function(icon) {
      this.icon = icon;
      return this.emit('icon', this.icon);
    };

    Component.prototype.getIcon = function() {
      return this.icon;
    };

    Component.prototype.error = function(e, groups, errorPort, scope) {
      var group, i, j, len1, len2;
      if (groups == null) {
        groups = [];
      }
      if (errorPort == null) {
        errorPort = 'error';
      }
      if (scope == null) {
        scope = null;
      }
      if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {
        for (i = 0, len1 = groups.length; i < len1; i++) {
          group = groups[i];
          this.outPorts[errorPort].openBracket(group, {
            scope: scope
          });
        }
        this.outPorts[errorPort].data(e, {
          scope: scope
        });
        for (j = 0, len2 = groups.length; j < len2; j++) {
          group = groups[j];
          this.outPorts[errorPort].closeBracket(group, {
            scope: scope
          });
        }
        return;
      }
      throw e;
    };

    Component.prototype.setUp = function(callback) {
      return callback();
    };

    Component.prototype.tearDown = function(callback) {
      return callback();
    };

    Component.prototype.start = function(callback) {
      if (this.isStarted()) {
        return callback();
      }
      return this.setUp((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          _this.started = true;
          _this.emit('start');
          return callback(null);
        };
      })(this));
    };

    Component.prototype.shutdown = function(callback) {
      var finalize;
      finalize = (function(_this) {
        return function() {
          var inPort, inPorts, portName;
          inPorts = _this.inPorts.ports || _this.inPorts;
          for (portName in inPorts) {
            inPort = inPorts[portName];
            if (typeof inPort.clear !== 'function') {
              continue;
            }
            inPort.clear();
          }
          _this.bracketContext = {
            "in": {},
            out: {}
          };
          if (!_this.isStarted()) {
            return callback();
          }
          _this.started = false;
          _this.emit('end');
          return callback();
        };
      })(this);
      return this.tearDown((function(_this) {
        return function(err) {
          var checkLoad;
          if (err) {
            return callback(err);
          }
          if (_this.load > 0) {
            checkLoad = function(load) {
              if (load > 0) {
                return;
              }
              this.removeListener('deactivate', checkLoad);
              return finalize();
            };
            _this.on('deactivate', checkLoad);
            return;
          }
          return finalize();
        };
      })(this));
    };

    Component.prototype.isStarted = function() {
      return this.started;
    };

    Component.prototype.prepareForwarding = function() {
      var i, inPort, len1, outPort, outPorts, ref, results, tmp;
      ref = this.forwardBrackets;
      results = [];
      for (inPort in ref) {
        outPorts = ref[inPort];
        if (!(inPort in this.inPorts.ports)) {
          delete this.forwardBrackets[inPort];
          continue;
        }
        tmp = [];
        for (i = 0, len1 = outPorts.length; i < len1; i++) {
          outPort = outPorts[i];
          if (outPort in this.outPorts.ports) {
            tmp.push(outPort);
          }
        }
        if (tmp.length === 0) {
          results.push(delete this.forwardBrackets[inPort]);
        } else {
          results.push(this.forwardBrackets[inPort] = tmp);
        }
      }
      return results;
    };

    Component.prototype.isLegacy = function() {
      if (this.handle) {
        return false;
      }
      if (this._wpData) {
        return false;
      }
      return true;
    };

    Component.prototype.process = function(handle) {
      var fn, name, port, ref;
      if (typeof handle !== 'function') {
        throw new Error("Process handler must be a function");
      }
      if (!this.inPorts) {
        throw new Error("Component ports must be defined before process function");
      }
      this.prepareForwarding();
      this.handle = handle;
      ref = this.inPorts.ports;
      fn = (function(_this) {
        return function(name, port) {
          if (!port.name) {
            port.name = name;
          }
          return port.on('ip', function(ip) {
            return _this.handleIP(ip, port);
          });
        };
      })(this);
      for (name in ref) {
        port = ref[name];
        fn(name, port);
      }
      return this;
    };

    Component.prototype.isForwardingInport = function(port) {
      var portName;
      if (typeof port === 'string') {
        portName = port;
      } else {
        portName = port.name;
      }
      if (portName in this.forwardBrackets) {
        return true;
      }
      return false;
    };

    Component.prototype.isForwardingOutport = function(inport, outport) {
      var inportName, outportName;
      if (typeof inport === 'string') {
        inportName = inport;
      } else {
        inportName = inport.name;
      }
      if (typeof outport === 'string') {
        outportName = outport;
      } else {
        outportName = outport.name;
      }
      if (!this.forwardBrackets[inportName]) {
        return false;
      }
      if (this.forwardBrackets[inportName].indexOf(outportName) !== -1) {
        return true;
      }
      return false;
    };

    Component.prototype.isOrdered = function() {
      if (this.ordered) {
        return true;
      }
      if (this.autoOrdering) {
        return true;
      }
      return false;
    };

    Component.prototype.handleIP = function(ip, port) {
      var buf, context, dataPackets, e, error1, input, output, result;
      if (!port.options.triggering) {
        return;
      }
      if (ip.type === 'openBracket' && this.autoOrdering === null && !this.ordered) {
        debug(this.nodeId + " port '" + port.name + "' entered auto-ordering mode");
        this.autoOrdering = true;
      }
      result = {};
      if (this.isForwardingInport(port)) {
        if (ip.type === 'openBracket') {
          return;
        }
        if (ip.type === 'closeBracket') {
          buf = port.getBuffer(ip.scope, ip.index);
          dataPackets = buf.filter(function(ip) {
            return ip.type === 'data';
          });
          if (this.outputQ.length >= this.load && dataPackets.length === 0) {
            if (buf[0] !== ip) {
              return;
            }
            port.get(ip.scope, ip.index);
            context = this.getBracketContext('in', port.name, ip.scope, ip.index).pop();
            context.closeIp = ip;
            debugBrackets(this.nodeId + " closeBracket-C from '" + context.source + "' to " + context.ports + ": '" + ip.data + "'");
            result = {
              __resolved: true,
              __bracketClosingAfter: [context]
            };
            this.outputQ.push(result);
            this.processOutputQueue();
          }
          if (!dataPackets.length) {
            return;
          }
        }
      }
      context = new ProcessContext(ip, this, port, result);
      input = new ProcessInput(this.inPorts, context);
      output = new ProcessOutput(this.outPorts, context);
      try {
        this.handle(input, output, context);
      } catch (error1) {
        e = error1;
        this.deactivate(context);
        output.sendDone(e);
      }
      if (context.activated) {
        return;
      }
      if (port.isAddressable()) {
        debug(this.nodeId + " packet on '" + port.name + "[" + ip.index + "]' didn't match preconditions: " + ip.type);
        return;
      }
      debug(this.nodeId + " packet on '" + port.name + "' didn't match preconditions: " + ip.type);
    };

    Component.prototype.getBracketContext = function(type, port, scope, idx) {
      var index, name, portsList, ref;
      ref = ports.normalizePortName(port), name = ref.name, index = ref.index;
      if (idx != null) {
        index = idx;
      }
      portsList = type === 'in' ? this.inPorts : this.outPorts;
      if (portsList[name].isAddressable()) {
        port = name + "[" + index + "]";
      }
      if (!this.bracketContext[type][port]) {
        this.bracketContext[type][port] = {};
      }
      if (!this.bracketContext[type][port][scope]) {
        this.bracketContext[type][port][scope] = [];
      }
      return this.bracketContext[type][port][scope];
    };

    Component.prototype.addToResult = function(result, port, ip, before) {
      var idx, index, method, name, ref;
      if (before == null) {
        before = false;
      }
      ref = ports.normalizePortName(port), name = ref.name, index = ref.index;
      method = before ? 'unshift' : 'push';
      if (this.outPorts[name].isAddressable()) {
        idx = index ? parseInt(index) : ip.index;
        if (!result[name]) {
          result[name] = {};
        }
        if (!result[name][idx]) {
          result[name][idx] = [];
        }
        ip.index = idx;
        result[name][idx][method](ip);
        return;
      }
      if (!result[name]) {
        result[name] = [];
      }
      return result[name][method](ip);
    };

    Component.prototype.getForwardableContexts = function(inport, outport, contexts) {
      var forwardable, index, name, ref;
      ref = ports.normalizePortName(outport), name = ref.name, index = ref.index;
      forwardable = [];
      contexts.forEach((function(_this) {
        return function(ctx, idx) {
          var outContext;
          if (!_this.isForwardingOutport(inport, name)) {
            return;
          }
          if (ctx.ports.indexOf(outport) !== -1) {
            return;
          }
          outContext = _this.getBracketContext('out', name, ctx.ip.scope, index)[idx];
          if (outContext) {
            if (outContext.ip.data === ctx.ip.data && outContext.ports.indexOf(outport) !== -1) {
              return;
            }
          }
          return forwardable.push(ctx);
        };
      })(this));
      return forwardable;
    };

    Component.prototype.addBracketForwards = function(result) {
      var context, i, ipClone, j, k, l, len1, len2, len3, len4, port, ref, ref1, ref2, ref3, ref4, ref5;
      if ((ref = result.__bracketClosingBefore) != null ? ref.length : void 0) {
        ref1 = result.__bracketClosingBefore;
        for (i = 0, len1 = ref1.length; i < len1; i++) {
          context = ref1[i];
          debugBrackets(this.nodeId + " closeBracket-A from '" + context.source + "' to " + context.ports + ": '" + context.closeIp.data + "'");
          if (!context.ports.length) {
            continue;
          }
          ref2 = context.ports;
          for (j = 0, len2 = ref2.length; j < len2; j++) {
            port = ref2[j];
            ipClone = context.closeIp.clone();
            this.addToResult(result, port, ipClone, true);
            this.getBracketContext('out', port, ipClone.scope).pop();
          }
        }
      }
      if (result.__bracketContext) {
        Object.keys(result.__bracketContext).reverse().forEach((function(_this) {
          return function(inport) {
            var ctx, datas, forwardedOpens, idx, idxIps, ip, ips, k, l, len3, len4, len5, m, outport, portIdentifier, results, unforwarded;
            context = result.__bracketContext[inport];
            if (!context.length) {
              return;
            }
            results = [];
            for (outport in result) {
              ips = result[outport];
              if (outport.indexOf('__') === 0) {
                continue;
              }
              if (_this.outPorts[outport].isAddressable()) {
                for (idx in ips) {
                  idxIps = ips[idx];
                  datas = idxIps.filter(function(ip) {
                    return ip.type === 'data';
                  });
                  if (!datas.length) {
                    continue;
                  }
                  portIdentifier = outport + "[" + idx + "]";
                  unforwarded = _this.getForwardableContexts(inport, portIdentifier, context);
                  if (!unforwarded.length) {
                    continue;
                  }
                  forwardedOpens = [];
                  for (k = 0, len3 = unforwarded.length; k < len3; k++) {
                    ctx = unforwarded[k];
                    debugBrackets(_this.nodeId + " openBracket from '" + inport + "' to '" + portIdentifier + "': '" + ctx.ip.data + "'");
                    ipClone = ctx.ip.clone();
                    ipClone.index = parseInt(idx);
                    forwardedOpens.push(ipClone);
                    ctx.ports.push(portIdentifier);
                    _this.getBracketContext('out', outport, ctx.ip.scope, idx).push(ctx);
                  }
                  forwardedOpens.reverse();
                  for (l = 0, len4 = forwardedOpens.length; l < len4; l++) {
                    ip = forwardedOpens[l];
                    _this.addToResult(result, outport, ip, true);
                  }
                }
                continue;
              }
              datas = ips.filter(function(ip) {
                return ip.type === 'data';
              });
              if (!datas.length) {
                continue;
              }
              unforwarded = _this.getForwardableContexts(inport, outport, context);
              if (!unforwarded.length) {
                continue;
              }
              forwardedOpens = [];
              for (m = 0, len5 = unforwarded.length; m < len5; m++) {
                ctx = unforwarded[m];
                debugBrackets(_this.nodeId + " openBracket from '" + inport + "' to '" + outport + "': '" + ctx.ip.data + "'");
                forwardedOpens.push(ctx.ip.clone());
                ctx.ports.push(outport);
                _this.getBracketContext('out', outport, ctx.ip.scope).push(ctx);
              }
              forwardedOpens.reverse();
              results.push((function() {
                var len6, n, results1;
                results1 = [];
                for (n = 0, len6 = forwardedOpens.length; n < len6; n++) {
                  ip = forwardedOpens[n];
                  results1.push(this.addToResult(result, outport, ip, true));
                }
                return results1;
              }).call(_this));
            }
            return results;
          };
        })(this));
      }
      if ((ref3 = result.__bracketClosingAfter) != null ? ref3.length : void 0) {
        ref4 = result.__bracketClosingAfter;
        for (k = 0, len3 = ref4.length; k < len3; k++) {
          context = ref4[k];
          debugBrackets(this.nodeId + " closeBracket-B from '" + context.source + "' to " + context.ports + ": '" + context.closeIp.data + "'");
          if (!context.ports.length) {
            continue;
          }
          ref5 = context.ports;
          for (l = 0, len4 = ref5.length; l < len4; l++) {
            port = ref5[l];
            ipClone = context.closeIp.clone();
            this.addToResult(result, port, ipClone, false);
            this.getBracketContext('out', port, ipClone.scope).pop();
          }
        }
      }
      delete result.__bracketClosingBefore;
      delete result.__bracketContext;
      return delete result.__bracketClosingAfter;
    };

    Component.prototype.processOutputQueue = function() {
      var idx, idxIps, ip, ips, port, portIdentifier, result, results;
      results = [];
      while (this.outputQ.length > 0) {
        if (!this.outputQ[0].__resolved) {
          break;
        }
        result = this.outputQ.shift();
        this.addBracketForwards(result);
        results.push((function() {
          var i, len1, results1;
          results1 = [];
          for (port in result) {
            ips = result[port];
            if (port.indexOf('__') === 0) {
              continue;
            }
            if (this.outPorts.ports[port].isAddressable()) {
              for (idx in ips) {
                idxIps = ips[idx];
                idx = parseInt(idx);
                if (!this.outPorts.ports[port].isAttached(idx)) {
                  continue;
                }
                for (i = 0, len1 = idxIps.length; i < len1; i++) {
                  ip = idxIps[i];
                  portIdentifier = port + "[" + ip.index + "]";
                  if (ip.type === 'openBracket') {
                    debugSend(this.nodeId + " sending " + portIdentifier + " < '" + ip.data + "'");
                  } else if (ip.type === 'closeBracket') {
                    debugSend(this.nodeId + " sending " + portIdentifier + " > '" + ip.data + "'");
                  } else {
                    debugSend(this.nodeId + " sending " + portIdentifier + " DATA");
                  }
                  this.outPorts[port].sendIP(ip);
                }
              }
              continue;
            }
            if (!this.outPorts.ports[port].isAttached()) {
              continue;
            }
            results1.push((function() {
              var j, len2, results2;
              results2 = [];
              for (j = 0, len2 = ips.length; j < len2; j++) {
                ip = ips[j];
                portIdentifier = port;
                if (ip.type === 'openBracket') {
                  debugSend(this.nodeId + " sending " + portIdentifier + " < '" + ip.data + "'");
                } else if (ip.type === 'closeBracket') {
                  debugSend(this.nodeId + " sending " + portIdentifier + " > '" + ip.data + "'");
                } else {
                  debugSend(this.nodeId + " sending " + portIdentifier + " DATA");
                }
                results2.push(this.outPorts[port].sendIP(ip));
              }
              return results2;
            }).call(this));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Component.prototype.activate = function(context) {
      if (context.activated) {
        return;
      }
      context.activated = true;
      context.deactivated = false;
      this.load++;
      this.emit('activate', this.load);
      if (this.ordered || this.autoOrdering) {
        return this.outputQ.push(context.result);
      }
    };

    Component.prototype.deactivate = function(context) {
      if (context.deactivated) {
        return;
      }
      context.deactivated = true;
      context.activated = false;
      if (this.isOrdered()) {
        this.processOutputQueue();
      }
      this.load--;
      return this.emit('deactivate', this.load);
    };

    return Component;

  })(EventEmitter);

  exports.Component = Component;

  ProcessContext = (function() {
    function ProcessContext(ip1, nodeInstance, port1, result1) {
      this.ip = ip1;
      this.nodeInstance = nodeInstance;
      this.port = port1;
      this.result = result1;
      this.scope = this.ip.scope;
      this.activated = false;
      this.deactivated = false;
    }

    ProcessContext.prototype.activate = function() {
      if (this.result.__resolved || this.nodeInstance.outputQ.indexOf(this.result) === -1) {
        this.result = {};
      }
      return this.nodeInstance.activate(this);
    };

    ProcessContext.prototype.deactivate = function() {
      if (!this.result.__resolved) {
        this.result.__resolved = true;
      }
      return this.nodeInstance.deactivate(this);
    };

    return ProcessContext;

  })();

  ProcessInput = (function() {
    function ProcessInput(ports1, context1) {
      this.ports = ports1;
      this.context = context1;
      this.nodeInstance = this.context.nodeInstance;
      this.ip = this.context.ip;
      this.port = this.context.port;
      this.result = this.context.result;
      this.scope = this.context.scope;
    }

    ProcessInput.prototype.activate = function() {
      if (this.context.activated) {
        return;
      }
      if (this.nodeInstance.isOrdered()) {
        this.result.__resolved = false;
      }
      this.nodeInstance.activate(this.context);
      if (this.port.isAddressable()) {
        return debug(this.nodeInstance.nodeId + " packet on '" + this.port.name + "[" + this.ip.index + "]' caused activation " + this.nodeInstance.load + ": " + this.ip.type);
      } else {
        return debug(this.nodeInstance.nodeId + " packet on '" + this.port.name + "' caused activation " + this.nodeInstance.load + ": " + this.ip.type);
      }
    };

    ProcessInput.prototype.attached = function() {
      var args, i, len1, port, res;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!args.length) {
        args = ['in'];
      }
      res = [];
      for (i = 0, len1 = args.length; i < len1; i++) {
        port = args[i];
        res.push(this.ports[port].listAttached());
      }
      if (args.length === 1) {
        return res.pop();
      }
      return res;
    };

    ProcessInput.prototype.has = function() {
      var args, i, len1, port, validate;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!args.length) {
        args = ['in'];
      }
      if (typeof args[args.length - 1] === 'function') {
        validate = args.pop();
      } else {
        validate = function() {
          return true;
        };
      }
      for (i = 0, len1 = args.length; i < len1; i++) {
        port = args[i];
        if (Array.isArray(port)) {
          if (!this.ports[port[0]].isAddressable()) {
            throw new Error("Non-addressable ports, access must be with string " + port[0]);
          }
          if (!this.ports[port[0]].has(this.scope, port[1], validate)) {
            return false;
          }
          continue;
        }
        if (this.ports[port].isAddressable()) {
          throw new Error("For addressable ports, access must be with array [" + port + ", idx]");
        }
        if (!this.ports[port].has(this.scope, validate)) {
          return false;
        }
      }
      return true;
    };

    ProcessInput.prototype.hasData = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!args.length) {
        args = ['in'];
      }
      args.push(function(ip) {
        return ip.type === 'data';
      });
      return this.has.apply(this, args);
    };

    ProcessInput.prototype.hasStream = function() {
      var args, dataBrackets, hasData, i, len1, port, portBrackets, validate, validateStream;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!args.length) {
        args = ['in'];
      }
      if (typeof args[args.length - 1] === 'function') {
        validateStream = args.pop();
      } else {
        validateStream = function() {
          return true;
        };
      }
      for (i = 0, len1 = args.length; i < len1; i++) {
        port = args[i];
        portBrackets = [];
        dataBrackets = [];
        hasData = false;
        validate = function(ip) {
          if (ip.type === 'openBracket') {
            portBrackets.push(ip.data);
            return false;
          }
          if (ip.type === 'data') {
            hasData = validateStream(ip, portBrackets);
            if (!portBrackets.length) {
              return hasData;
            }
            return false;
          }
          if (ip.type === 'closeBracket') {
            portBrackets.pop();
            if (portBrackets.length) {
              return false;
            }
            if (!hasData) {
              return false;
            }
            return true;
          }
        };
        if (!this.has(port, validate)) {
          return false;
        }
      }
      return true;
    };

    ProcessInput.prototype.get = function() {
      var args, i, idx, ip, len1, port, portname, res;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.activate();
      if (!args.length) {
        args = ['in'];
      }
      res = [];
      for (i = 0, len1 = args.length; i < len1; i++) {
        port = args[i];
        if (Array.isArray(port)) {
          portname = port[0], idx = port[1];
          if (!this.ports[portname].isAddressable()) {
            throw new Error('Non-addressable ports, access must be with string portname');
          }
        } else {
          portname = port;
          if (this.ports[portname].isAddressable()) {
            throw new Error('For addressable ports, access must be with array [portname, idx]');
          }
        }
        if (this.nodeInstance.isForwardingInport(portname)) {
          ip = this.__getForForwarding(portname, idx);
          res.push(ip);
          continue;
        }
        ip = this.ports[portname].get(this.scope, idx);
        res.push(ip);
      }
      if (args.length === 1) {
        return res[0];
      } else {
        return res;
      }
    };

    ProcessInput.prototype.__getForForwarding = function(port, idx) {
      var context, dataIp, i, ip, len1, prefix;
      prefix = [];
      dataIp = null;
      while (true) {
        ip = this.ports[port].get(this.scope, idx);
        if (!ip) {
          break;
        }
        if (ip.type === 'data') {
          dataIp = ip;
          break;
        }
        prefix.push(ip);
      }
      for (i = 0, len1 = prefix.length; i < len1; i++) {
        ip = prefix[i];
        if (ip.type === 'closeBracket') {
          if (!this.result.__bracketClosingBefore) {
            this.result.__bracketClosingBefore = [];
          }
          context = this.nodeInstance.getBracketContext('in', port, this.scope, idx).pop();
          context.closeIp = ip;
          this.result.__bracketClosingBefore.push(context);
          continue;
        }
        if (ip.type === 'openBracket') {
          this.nodeInstance.getBracketContext('in', port, this.scope, idx).push({
            ip: ip,
            ports: [],
            source: port
          });
          continue;
        }
      }
      if (!this.result.__bracketContext) {
        this.result.__bracketContext = {};
      }
      this.result.__bracketContext[port] = this.nodeInstance.getBracketContext('in', port, this.scope, idx).slice(0);
      return dataIp;
    };

    ProcessInput.prototype.getData = function() {
      var args, datas, i, len1, packet, port;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!args.length) {
        args = ['in'];
      }
      datas = [];
      for (i = 0, len1 = args.length; i < len1; i++) {
        port = args[i];
        packet = this.get(port);
        if (packet == null) {
          datas.push(packet);
          continue;
        }
        while (packet.type !== 'data') {
          packet = this.get(port);
          if (!packet) {
            break;
          }
        }
        datas.push(packet.data);
      }
      if (args.length === 1) {
        return datas.pop();
      }
      return datas;
    };

    ProcessInput.prototype.getStream = function() {
      var args, datas, hasData, i, ip, len1, port, portBrackets, portPackets;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!args.length) {
        args = ['in'];
      }
      datas = [];
      for (i = 0, len1 = args.length; i < len1; i++) {
        port = args[i];
        portBrackets = [];
        portPackets = [];
        hasData = false;
        ip = this.get(port);
        if (!ip) {
          datas.push(void 0);
        }
        while (ip) {
          if (ip.type === 'openBracket') {
            if (!portBrackets.length) {
              portPackets = [];
              hasData = false;
            }
            portBrackets.push(ip.data);
            portPackets.push(ip);
          }
          if (ip.type === 'data') {
            portPackets.push(ip);
            hasData = true;
            if (!portBrackets.length) {
              break;
            }
          }
          if (ip.type === 'closeBracket') {
            portPackets.push(ip);
            portBrackets.pop();
            if (hasData && !portBrackets.length) {
              break;
            }
          }
          ip = this.get(port);
        }
        datas.push(portPackets);
      }
      if (args.length === 1) {
        return datas.pop();
      }
      return datas;
    };

    return ProcessInput;

  })();

  ProcessOutput = (function() {
    function ProcessOutput(ports1, context1) {
      this.ports = ports1;
      this.context = context1;
      this.nodeInstance = this.context.nodeInstance;
      this.ip = this.context.ip;
      this.result = this.context.result;
      this.scope = this.context.scope;
    }

    ProcessOutput.prototype.isError = function(err) {
      return err instanceof Error || Array.isArray(err) && err.length > 0 && err[0] instanceof Error;
    };

    ProcessOutput.prototype.error = function(err) {
      var e, i, j, len1, len2, multiple, results;
      multiple = Array.isArray(err);
      if (!multiple) {
        err = [err];
      }
      if ('error' in this.ports && (this.ports.error.isAttached() || !this.ports.error.isRequired())) {
        if (multiple) {
          this.sendIP('error', new IP('openBracket'));
        }
        for (i = 0, len1 = err.length; i < len1; i++) {
          e = err[i];
          this.sendIP('error', e);
        }
        if (multiple) {
          return this.sendIP('error', new IP('closeBracket'));
        }
      } else {
        results = [];
        for (j = 0, len2 = err.length; j < len2; j++) {
          e = err[j];
          throw e;
        }
        return results;
      }
    };

    ProcessOutput.prototype.sendIP = function(port, packet) {
      var ip;
      if (!IP.isIP(packet)) {
        ip = new IP('data', packet);
      } else {
        ip = packet;
      }
      if (this.scope !== null && ip.scope === null) {
        ip.scope = this.scope;
      }
      if (this.nodeInstance.outPorts[port].isAddressable() && ip.index === null) {
        throw new Error('Sending packets to addressable ports requires specifying index');
      }
      if (this.nodeInstance.isOrdered()) {
        this.nodeInstance.addToResult(this.result, port, ip);
        return;
      }
      return this.nodeInstance.outPorts[port].sendIP(ip);
    };

    ProcessOutput.prototype.send = function(outputMap) {
      var componentPorts, i, len1, mapIsInPorts, packet, port, ref, results;
      if (this.isError(outputMap)) {
        return this.error(outputMap);
      }
      componentPorts = [];
      mapIsInPorts = false;
      ref = Object.keys(this.ports.ports);
      for (i = 0, len1 = ref.length; i < len1; i++) {
        port = ref[i];
        if (port !== 'error' && port !== 'ports' && port !== '_callbacks') {
          componentPorts.push(port);
        }
        if (!mapIsInPorts && (outputMap != null) && typeof outputMap === 'object' && Object.keys(outputMap).indexOf(port) !== -1) {
          mapIsInPorts = true;
        }
      }
      if (componentPorts.length === 1 && !mapIsInPorts) {
        this.sendIP(componentPorts[0], outputMap);
        return;
      }
      if (componentPorts.length > 1 && !mapIsInPorts) {
        throw new Error('Port must be specified for sending output');
      }
      results = [];
      for (port in outputMap) {
        packet = outputMap[port];
        results.push(this.sendIP(port, packet));
      }
      return results;
    };

    ProcessOutput.prototype.sendDone = function(outputMap) {
      this.send(outputMap);
      return this.done();
    };

    ProcessOutput.prototype.pass = function(data, options) {
      var key, val;
      if (options == null) {
        options = {};
      }
      if (!('out' in this.ports)) {
        throw new Error('output.pass() requires port "out" to be present');
      }
      for (key in options) {
        val = options[key];
        this.ip[key] = val;
      }
      this.ip.data = data;
      this.sendIP('out', this.ip);
      return this.done();
    };

    ProcessOutput.prototype.done = function(error) {
      var buf, context, contexts, ctx, ip, isLast, nodeContext, port, ref;
      this.result.__resolved = true;
      this.nodeInstance.activate(this.context);
      if (error) {
        this.error(error);
      }
      isLast = (function(_this) {
        return function() {
          var len, load, pos, resultsOnly;
          resultsOnly = _this.nodeInstance.outputQ.filter(function(q) {
            if (!q.__resolved) {
              return true;
            }
            if (Object.keys(q).length === 2 && q.__bracketClosingAfter) {
              return false;
            }
            return true;
          });
          pos = resultsOnly.indexOf(_this.result);
          len = resultsOnly.length;
          load = _this.nodeInstance.load;
          if (pos === len - 1) {
            return true;
          }
          if (pos === -1 && load === len + 1) {
            return true;
          }
          if (len <= 1 && load === 1) {
            return true;
          }
          return false;
        };
      })(this);
      if (this.nodeInstance.isOrdered() && isLast()) {
        ref = this.nodeInstance.bracketContext["in"];
        for (port in ref) {
          contexts = ref[port];
          if (!contexts[this.scope]) {
            continue;
          }
          nodeContext = contexts[this.scope];
          if (!nodeContext.length) {
            continue;
          }
          context = nodeContext[nodeContext.length - 1];
          buf = this.nodeInstance.inPorts[context.source].getBuffer(context.ip.scope, context.ip.index);
          while (true) {
            if (!buf.length) {
              break;
            }
            if (buf[0].type !== 'closeBracket') {
              break;
            }
            ip = this.nodeInstance.inPorts[context.source].get(context.ip.scope, context.ip.index);
            ctx = nodeContext.pop();
            ctx.closeIp = ip;
            if (!this.result.__bracketClosingAfter) {
              this.result.__bracketClosingAfter = [];
            }
            this.result.__bracketClosingAfter.push(ctx);
          }
        }
      }
      debug(this.nodeInstance.nodeId + " finished processing " + this.nodeInstance.load);
      return this.nodeInstance.deactivate(this.context);
    };

    return ProcessOutput;

  })();

}).call(this);


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var EventEmitter, InPort, InPorts, OutPort, OutPorts, Ports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = __webpack_require__(4).EventEmitter;

  InPort = __webpack_require__(41);

  OutPort = __webpack_require__(43);

  Ports = (function(superClass) {
    extend(Ports, superClass);

    Ports.prototype.model = InPort;

    function Ports(ports) {
      var name, options;
      this.ports = {};
      if (!ports) {
        return;
      }
      for (name in ports) {
        options = ports[name];
        this.add(name, options);
      }
    }

    Ports.prototype.add = function(name, options, process) {
      if (name === 'add' || name === 'remove') {
        throw new Error('Add and remove are restricted port names');
      }
      if (!name.match(/^[a-z0-9_\.\/]+$/)) {
        throw new Error("Port names can only contain lowercase alphanumeric characters and underscores. '" + name + "' not allowed");
      }
      if (this.ports[name]) {
        this.remove(name);
      }
      if (typeof options === 'object' && options.canAttach) {
        this.ports[name] = options;
      } else {
        this.ports[name] = new this.model(options, process);
      }
      this[name] = this.ports[name];
      this.emit('add', name);
      return this;
    };

    Ports.prototype.remove = function(name) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not defined");
      }
      delete this.ports[name];
      delete this[name];
      this.emit('remove', name);
      return this;
    };

    return Ports;

  })(EventEmitter);

  exports.InPorts = InPorts = (function(superClass) {
    extend(InPorts, superClass);

    function InPorts() {
      return InPorts.__super__.constructor.apply(this, arguments);
    }

    InPorts.prototype.on = function(name, event, callback) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].on(event, callback);
    };

    InPorts.prototype.once = function(name, event, callback) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].once(event, callback);
    };

    return InPorts;

  })(Ports);

  exports.OutPorts = OutPorts = (function(superClass) {
    extend(OutPorts, superClass);

    function OutPorts() {
      return OutPorts.__super__.constructor.apply(this, arguments);
    }

    OutPorts.prototype.model = OutPort;

    OutPorts.prototype.connect = function(name, socketId) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].connect(socketId);
    };

    OutPorts.prototype.beginGroup = function(name, group, socketId) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].beginGroup(group, socketId);
    };

    OutPorts.prototype.send = function(name, data, socketId) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].send(data, socketId);
    };

    OutPorts.prototype.endGroup = function(name, socketId) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].endGroup(socketId);
    };

    OutPorts.prototype.disconnect = function(name, socketId) {
      if (!this.ports[name]) {
        throw new Error("Port " + name + " not available");
      }
      return this.ports[name].disconnect(socketId);
    };

    return OutPorts;

  })(Ports);

  exports.normalizePortName = function(name) {
    var matched, port;
    port = {
      name: name
    };
    if (name.indexOf('[') === -1) {
      return port;
    }
    matched = name.match(/(.*)\[([0-9]+)\]/);
    if (!(matched != null ? matched.length : void 0)) {
      return name;
    }
    port.name = matched[1];
    port.index = matched[2];
    return port;
  };

}).call(this);


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var BasePort, IP, InPort, platform,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasePort = __webpack_require__(42);

  IP = __webpack_require__(7);

  platform = __webpack_require__(9);

  InPort = (function(superClass) {
    extend(InPort, superClass);

    function InPort(options, process) {
      this.process = null;
      if (!process && typeof options === 'function') {
        process = options;
        options = {};
      }
      if (options == null) {
        options = {};
      }
      if (options.buffered == null) {
        options.buffered = false;
      }
      if (options.control == null) {
        options.control = false;
      }
      if (options.scoped == null) {
        options.scoped = true;
      }
      if (options.triggering == null) {
        options.triggering = true;
      }
      if (!process && options && options.process) {
        process = options.process;
        delete options.process;
      }
      if (process) {
        platform.deprecated('InPort process callback is deprecated. Please use Process API or the InPort handle option');
        if (typeof process !== 'function') {
          throw new Error('process must be a function');
        }
        this.process = process;
      }
      if (options.handle) {
        platform.deprecated('InPort handle callback is deprecated. Please use Process API');
        if (typeof options.handle !== 'function') {
          throw new Error('handle must be a function');
        }
        this.handle = options.handle;
        delete options.handle;
      }
      InPort.__super__.constructor.call(this, options);
      this.prepareBuffer();
    }

    InPort.prototype.attachSocket = function(socket, localId) {
      if (localId == null) {
        localId = null;
      }
      if (this.hasDefault()) {
        if (this.handle) {
          socket.setDataDelegate((function(_this) {
            return function() {
              return new IP('data', _this.options["default"]);
            };
          })(this));
        } else {
          socket.setDataDelegate((function(_this) {
            return function() {
              return _this.options["default"];
            };
          })(this));
        }
      }
      socket.on('connect', (function(_this) {
        return function() {
          return _this.handleSocketEvent('connect', socket, localId);
        };
      })(this));
      socket.on('begingroup', (function(_this) {
        return function(group) {
          return _this.handleSocketEvent('begingroup', group, localId);
        };
      })(this));
      socket.on('data', (function(_this) {
        return function(data) {
          _this.validateData(data);
          return _this.handleSocketEvent('data', data, localId);
        };
      })(this));
      socket.on('endgroup', (function(_this) {
        return function(group) {
          return _this.handleSocketEvent('endgroup', group, localId);
        };
      })(this));
      socket.on('disconnect', (function(_this) {
        return function() {
          return _this.handleSocketEvent('disconnect', socket, localId);
        };
      })(this));
      return socket.on('ip', (function(_this) {
        return function(ip) {
          return _this.handleIP(ip, localId);
        };
      })(this));
    };

    InPort.prototype.handleIP = function(ip, id) {
      var buf;
      if (this.process) {
        return;
      }
      if (this.options.control && ip.type !== 'data') {
        return;
      }
      ip.owner = this.nodeInstance;
      if (this.isAddressable()) {
        ip.index = id;
      }
      if (ip.datatype === 'all') {
        ip.datatype = this.getDataType();
      }
      if (this.getSchema() && !ip.schema) {
        ip.schema = this.getSchema();
      }
      buf = this.prepareBufferForIP(ip);
      buf.push(ip);
      if (this.options.control && buf.length > 1) {
        buf.shift();
      }
      if (this.handle) {
        this.handle(ip, this.nodeInstance);
      }
      return this.emit('ip', ip, id);
    };

    InPort.prototype.handleSocketEvent = function(event, payload, id) {
      if (this.isBuffered()) {
        this.buffer.push({
          event: event,
          payload: payload,
          id: id
        });
        if (this.isAddressable()) {
          if (this.process) {
            this.process(event, id, this.nodeInstance);
          }
          this.emit(event, id);
        } else {
          if (this.process) {
            this.process(event, this.nodeInstance);
          }
          this.emit(event);
        }
        return;
      }
      if (this.process) {
        if (this.isAddressable()) {
          this.process(event, payload, id, this.nodeInstance);
        } else {
          this.process(event, payload, this.nodeInstance);
        }
      }
      if (this.isAddressable()) {
        return this.emit(event, payload, id);
      }
      return this.emit(event, payload);
    };

    InPort.prototype.hasDefault = function() {
      return this.options["default"] !== void 0;
    };

    InPort.prototype.prepareBuffer = function() {
      this.buffer = [];
      if (this.isAddressable()) {
        this.indexedBuffer = {};
      }
      this.scopedBuffer = {};
      return this.iipBuffer = this.isAddressable() ? {} : [];
    };

    InPort.prototype.prepareBufferForIP = function(ip) {
      if (this.isAddressable()) {
        if ((ip.scope != null) && this.options.scoped) {
          if (!(ip.scope in this.scopedBuffer)) {
            this.scopedBuffer[ip.scope] = [];
          }
          if (!(ip.index in this.scopedBuffer[ip.scope])) {
            this.scopedBuffer[ip.scope][ip.index] = [];
          }
          return this.scopedBuffer[ip.scope][ip.index];
        }
        if (ip.initial) {
          if (!(ip.index in this.iipBuffer)) {
            this.iipBuffer[ip.index] = [];
          }
          return this.iipBuffer[ip.index];
        }
        if (!(ip.index in this.indexedBuffer)) {
          this.indexedBuffer[ip.index] = [];
        }
        return this.indexedBuffer[ip.index];
      }
      if ((ip.scope != null) && this.options.scoped) {
        if (!(ip.scope in this.scopedBuffer)) {
          this.scopedBuffer[ip.scope] = [];
        }
        return this.scopedBuffer[ip.scope];
      }
      if (ip.initial) {
        return this.iipBuffer;
      }
      return this.buffer;
    };

    InPort.prototype.validateData = function(data) {
      if (!this.options.values) {
        return;
      }
      if (this.options.values.indexOf(data) === -1) {
        throw new Error("Invalid data='" + data + "' received, not in [" + this.options.values + "]");
      }
    };

    InPort.prototype.receive = function() {
      platform.deprecated('InPort.receive is deprecated. Use InPort.get instead');
      if (!this.isBuffered()) {
        throw new Error('Receive is only possible on buffered ports');
      }
      return this.buffer.shift();
    };

    InPort.prototype.contains = function() {
      platform.deprecated('InPort.contains is deprecated. Use InPort.has instead');
      if (!this.isBuffered()) {
        throw new Error('Contains query is only possible on buffered ports');
      }
      return this.buffer.filter(function(packet) {
        if (packet.event === 'data') {
          return true;
        }
      }).length;
    };

    InPort.prototype.getBuffer = function(scope, idx, initial) {
      if (initial == null) {
        initial = false;
      }
      if (this.isAddressable()) {
        if ((scope != null) && this.options.scoped) {
          if (!(scope in this.scopedBuffer)) {
            return void 0;
          }
          if (!(idx in this.scopedBuffer[scope])) {
            return void 0;
          }
          return this.scopedBuffer[scope][idx];
        }
        if (initial) {
          if (!(idx in this.iipBuffer)) {
            return void 0;
          }
          return this.iipBuffer[idx];
        }
        if (!(idx in this.indexedBuffer)) {
          return void 0;
        }
        return this.indexedBuffer[idx];
      }
      if ((scope != null) && this.options.scoped) {
        if (!(scope in this.scopedBuffer)) {
          return void 0;
        }
        return this.scopedBuffer[scope];
      }
      if (initial) {
        return this.iipBuffer;
      }
      return this.buffer;
    };

    InPort.prototype.getFromBuffer = function(scope, idx, initial) {
      var buf;
      if (initial == null) {
        initial = false;
      }
      buf = this.getBuffer(scope, idx, initial);
      if (!(buf != null ? buf.length : void 0)) {
        return void 0;
      }
      if (this.options.control) {
        return buf[buf.length - 1];
      } else {
        return buf.shift();
      }
    };

    InPort.prototype.get = function(scope, idx) {
      var res;
      res = this.getFromBuffer(scope, idx);
      if (res !== void 0) {
        return res;
      }
      return this.getFromBuffer(null, idx, true);
    };

    InPort.prototype.hasIPinBuffer = function(scope, idx, validate, initial) {
      var buf, i, len, packet;
      if (initial == null) {
        initial = false;
      }
      buf = this.getBuffer(scope, idx, initial);
      if (!(buf != null ? buf.length : void 0)) {
        return false;
      }
      for (i = 0, len = buf.length; i < len; i++) {
        packet = buf[i];
        if (validate(packet)) {
          return true;
        }
      }
      return false;
    };

    InPort.prototype.hasIIP = function(idx, validate) {
      return this.hasIPinBuffer(null, idx, validate, true);
    };

    InPort.prototype.has = function(scope, idx, validate) {
      if (!this.isAddressable()) {
        validate = idx;
        idx = null;
      }
      if (this.hasIPinBuffer(scope, idx, validate)) {
        return true;
      }
      if (this.hasIIP(idx, validate)) {
        return true;
      }
      return false;
    };

    InPort.prototype.length = function(scope, idx) {
      var buf;
      buf = this.getBuffer(scope, idx);
      if (!buf) {
        return 0;
      }
      return buf.length;
    };

    InPort.prototype.ready = function(scope, idx) {
      return this.length(scope) > 0;
    };

    InPort.prototype.clear = function() {
      return this.prepareBuffer();
    };

    return InPort;

  })(BasePort);

  module.exports = InPort;

}).call(this);


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var BasePort, EventEmitter, validTypes,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = __webpack_require__(4).EventEmitter;

  validTypes = ['all', 'string', 'number', 'int', 'object', 'array', 'boolean', 'color', 'date', 'bang', 'function', 'buffer', 'stream'];

  BasePort = (function(superClass) {
    extend(BasePort, superClass);

    function BasePort(options) {
      this.handleOptions(options);
      this.sockets = [];
      this.node = null;
      this.name = null;
    }

    BasePort.prototype.handleOptions = function(options) {
      if (!options) {
        options = {};
      }
      if (!options.datatype) {
        options.datatype = 'all';
      }
      if (options.required === void 0) {
        options.required = false;
      }
      if (options.datatype === 'integer') {
        options.datatype = 'int';
      }
      if (validTypes.indexOf(options.datatype) === -1) {
        throw new Error("Invalid port datatype '" + options.datatype + "' specified, valid are " + (validTypes.join(', ')));
      }
      if (options.type && !options.schema) {
        options.schema = options.type;
        delete options.type;
      }
      if (options.schema && options.schema.indexOf('/') === -1) {
        throw new Error("Invalid port schema '" + options.schema + "' specified. Should be URL or MIME type");
      }
      return this.options = options;
    };

    BasePort.prototype.getId = function() {
      if (!(this.node && this.name)) {
        return 'Port';
      }
      return this.node + " " + (this.name.toUpperCase());
    };

    BasePort.prototype.getDataType = function() {
      return this.options.datatype;
    };

    BasePort.prototype.getSchema = function() {
      return this.options.schema || null;
    };

    BasePort.prototype.getDescription = function() {
      return this.options.description;
    };

    BasePort.prototype.attach = function(socket, index) {
      if (index == null) {
        index = null;
      }
      if (!this.isAddressable() || index === null) {
        index = this.sockets.length;
      }
      this.sockets[index] = socket;
      this.attachSocket(socket, index);
      if (this.isAddressable()) {
        this.emit('attach', socket, index);
        return;
      }
      return this.emit('attach', socket);
    };

    BasePort.prototype.attachSocket = function() {};

    BasePort.prototype.detach = function(socket) {
      var index;
      index = this.sockets.indexOf(socket);
      if (index === -1) {
        return;
      }
      this.sockets[index] = void 0;
      if (this.isAddressable()) {
        this.emit('detach', socket, index);
        return;
      }
      return this.emit('detach', socket);
    };

    BasePort.prototype.isAddressable = function() {
      if (this.options.addressable) {
        return true;
      }
      return false;
    };

    BasePort.prototype.isBuffered = function() {
      if (this.options.buffered) {
        return true;
      }
      return false;
    };

    BasePort.prototype.isRequired = function() {
      if (this.options.required) {
        return true;
      }
      return false;
    };

    BasePort.prototype.isAttached = function(socketId) {
      if (socketId == null) {
        socketId = null;
      }
      if (this.isAddressable() && socketId !== null) {
        if (this.sockets[socketId]) {
          return true;
        }
        return false;
      }
      if (this.sockets.length) {
        return true;
      }
      return false;
    };

    BasePort.prototype.listAttached = function() {
      var attached, i, idx, len, ref, socket;
      attached = [];
      ref = this.sockets;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        socket = ref[idx];
        if (!socket) {
          continue;
        }
        attached.push(idx);
      }
      return attached;
    };

    BasePort.prototype.isConnected = function(socketId) {
      var connected;
      if (socketId == null) {
        socketId = null;
      }
      if (this.isAddressable()) {
        if (socketId === null) {
          throw new Error((this.getId()) + ": Socket ID required");
        }
        if (!this.sockets[socketId]) {
          throw new Error((this.getId()) + ": Socket " + socketId + " not available");
        }
        return this.sockets[socketId].isConnected();
      }
      connected = false;
      this.sockets.forEach(function(socket) {
        if (!socket) {
          return;
        }
        if (socket.isConnected()) {
          return connected = true;
        }
      });
      return connected;
    };

    BasePort.prototype.canAttach = function() {
      return true;
    };

    return BasePort;

  })(EventEmitter);

  module.exports = BasePort;

}).call(this);


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var BasePort, IP, OutPort,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasePort = __webpack_require__(42);

  IP = __webpack_require__(7);

  OutPort = (function(superClass) {
    extend(OutPort, superClass);

    function OutPort(options) {
      this.cache = {};
      OutPort.__super__.constructor.call(this, options);
    }

    OutPort.prototype.attach = function(socket, index) {
      if (index == null) {
        index = null;
      }
      OutPort.__super__.attach.call(this, socket, index);
      if (this.isCaching() && (this.cache[index] != null)) {
        return this.send(this.cache[index], index);
      }
    };

    OutPort.prototype.connect = function(socketId) {
      var i, len, results, socket, sockets;
      if (socketId == null) {
        socketId = null;
      }
      sockets = this.getSockets(socketId);
      this.checkRequired(sockets);
      results = [];
      for (i = 0, len = sockets.length; i < len; i++) {
        socket = sockets[i];
        if (!socket) {
          continue;
        }
        results.push(socket.connect());
      }
      return results;
    };

    OutPort.prototype.beginGroup = function(group, socketId) {
      var sockets;
      if (socketId == null) {
        socketId = null;
      }
      sockets = this.getSockets(socketId);
      this.checkRequired(sockets);
      return sockets.forEach(function(socket) {
        if (!socket) {
          return;
        }
        return socket.beginGroup(group);
      });
    };

    OutPort.prototype.send = function(data, socketId) {
      var sockets;
      if (socketId == null) {
        socketId = null;
      }
      sockets = this.getSockets(socketId);
      this.checkRequired(sockets);
      if (this.isCaching() && data !== this.cache[socketId]) {
        this.cache[socketId] = data;
      }
      return sockets.forEach(function(socket) {
        if (!socket) {
          return;
        }
        return socket.send(data);
      });
    };

    OutPort.prototype.endGroup = function(socketId) {
      var i, len, results, socket, sockets;
      if (socketId == null) {
        socketId = null;
      }
      sockets = this.getSockets(socketId);
      this.checkRequired(sockets);
      results = [];
      for (i = 0, len = sockets.length; i < len; i++) {
        socket = sockets[i];
        if (!socket) {
          continue;
        }
        results.push(socket.endGroup());
      }
      return results;
    };

    OutPort.prototype.disconnect = function(socketId) {
      var i, len, results, socket, sockets;
      if (socketId == null) {
        socketId = null;
      }
      sockets = this.getSockets(socketId);
      this.checkRequired(sockets);
      results = [];
      for (i = 0, len = sockets.length; i < len; i++) {
        socket = sockets[i];
        if (!socket) {
          continue;
        }
        results.push(socket.disconnect());
      }
      return results;
    };

    OutPort.prototype.sendIP = function(type, data, options, socketId, autoConnect) {
      var i, ip, len, pristine, ref, socket, sockets;
      if (autoConnect == null) {
        autoConnect = true;
      }
      if (IP.isIP(type)) {
        ip = type;
        socketId = ip.index;
      } else {
        ip = new IP(type, data, options);
      }
      sockets = this.getSockets(socketId);
      this.checkRequired(sockets);
      if (ip.datatype === 'all') {
        ip.datatype = this.getDataType();
      }
      if (this.getSchema() && !ip.schema) {
        ip.schema = this.getSchema();
      }
      if (this.isCaching() && data !== ((ref = this.cache[socketId]) != null ? ref.data : void 0)) {
        this.cache[socketId] = ip;
      }
      pristine = true;
      for (i = 0, len = sockets.length; i < len; i++) {
        socket = sockets[i];
        if (!socket) {
          continue;
        }
        if (pristine) {
          socket.post(ip, autoConnect);
          pristine = false;
        } else {
          if (ip.clonable) {
            ip = ip.clone();
          }
          socket.post(ip, autoConnect);
        }
      }
      return this;
    };

    OutPort.prototype.openBracket = function(data, options, socketId) {
      if (data == null) {
        data = null;
      }
      if (options == null) {
        options = {};
      }
      if (socketId == null) {
        socketId = null;
      }
      return this.sendIP('openBracket', data, options, socketId);
    };

    OutPort.prototype.data = function(data, options, socketId) {
      if (options == null) {
        options = {};
      }
      if (socketId == null) {
        socketId = null;
      }
      return this.sendIP('data', data, options, socketId);
    };

    OutPort.prototype.closeBracket = function(data, options, socketId) {
      if (data == null) {
        data = null;
      }
      if (options == null) {
        options = {};
      }
      if (socketId == null) {
        socketId = null;
      }
      return this.sendIP('closeBracket', data, options, socketId);
    };

    OutPort.prototype.checkRequired = function(sockets) {
      if (sockets.length === 0 && this.isRequired()) {
        throw new Error((this.getId()) + ": No connections available");
      }
    };

    OutPort.prototype.getSockets = function(socketId) {
      if (this.isAddressable()) {
        if (socketId === null) {
          throw new Error((this.getId()) + " Socket ID required");
        }
        if (!this.sockets[socketId]) {
          return [];
        }
        return [this.sockets[socketId]];
      }
      return this.sockets;
    };

    OutPort.prototype.isCaching = function() {
      if (this.options.caching) {
        return true;
      }
      return false;
    };

    return OutPort;

  })(BasePort);

  module.exports = OutPort;

}).call(this);


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

(function (context) {
  var noflo = __webpack_require__(0);
  var Base = __webpack_require__(45);

  var PostMessage = function (options) {
    if (!options) {
      options = {};
    }

    if (options.catchExceptions) {
      context.onerror = function (err) {
        if (this.client) {
          this.send('network', 'error', err, {
            href: this.context ? this.context.href : this.client.location.href
          });
        }
        console.error(err);
        return true;
      }.bind(this);
    }

    if (!options.defaultPermissions) {
      // The iframe runtime is run on user's own computer, so default to all access allowed
      options.defaultPermissions = [
        'protocol:graph',
        'protocol:component',
        'protocol:network',
        'protocol:runtime',
        'component:setsource',
        'component:getsource'
      ];
    }

    this.prototype.constructor.apply(this, arguments);
    this.receive = this.prototype.receive;
    this.canDo = this.prototype.canDo;
    this.getPermitted = this.prototype.getPermitted;
    this.client = null;
  };
  PostMessage.prototype = Base;
  PostMessage.prototype.setClient = function (client) {
    this.client = client;
  };
  PostMessage.prototype.send = function (protocol, topic, payload, ctx) {
    if (!this.client) {
      return;
    }
    if (payload instanceof Error) {
      payload = {
        message: payload.message,
        stack: payload.stack
      };
    }
    if (this.context) {
      ctx = this.context;
    }
    this.client.postMessage(JSON.stringify({
      protocol: protocol,
      command: topic,
      payload: payload
    }), ctx.href);
    this.prototype.send.apply(this, arguments);
  };
  PostMessage.prototype.sendAll = function (protocol, topic, payload) {
    this.send(protocol, topic, payload, window.context);
  };
  PostMessage.prototype.start = function () {
    // Ignored, nothing to do
  };

  PostMessage.normalizeOptions = function (options) {
    if (typeof options.catchExceptions === 'undefined') {
      options.catchExceptions = true;
      if (context.location.search && context.location.search.substring(1) === 'debug') {
        options.catchExceptions = false;
      }
    }
    return options;
  };

  PostMessage.subscribe = function (ctx, callback) {
    ctx.addEventListener('message', function (message) {
      var data;
      if (typeof message.data === 'string') {
        data = JSON.parse(message.data);
      } else {
        data = message.data;
      }
      if (!data.protocol) {
        return;
      }
      if (!data.command) {
        return;
      }
      callback(data, message);
    });
  };

  module.exports = PostMessage;
})(window);


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var BaseTransport, debugMessagingReceive, debugMessagingReceivePayload, debugMessagingSend, debugMessagingSendPayload, protocols;

  protocols = {
    Runtime: __webpack_require__(409),
    Graph: __webpack_require__(410),
    Network: __webpack_require__(411),
    Component: __webpack_require__(412)
  };

  debugMessagingReceive = __webpack_require__(5)('noflo-runtime-base:messaging:receive');

  debugMessagingReceivePayload = __webpack_require__(5)('noflo-runtime-base:messaging:receive:payload');

  debugMessagingSend = __webpack_require__(5)('noflo-runtime-base:messaging:send');

  debugMessagingSendPayload = __webpack_require__(5)('noflo-runtime-base:messaging:send:payload');

  BaseTransport = (function() {
    function BaseTransport(options) {
      var path;
      this.options = options;
      if (!this.options) {
        this.options = {};
      }
      this.version = '0.5';
      this.component = new protocols.Component(this);
      this.graph = new protocols.Graph(this);
      this.network = new protocols.Network(this);
      this.runtime = new protocols.Runtime(this);
      this.context = null;
      if (this.options.defaultGraph != null) {
        this.options.defaultGraph.baseDir = this.options.baseDir;
        path = 'default/main';
        this.context = 'none';
        this.graph.registerGraph(path, this.options.defaultGraph);
        this.network.startNetwork(this.options.defaultGraph, {
          graph: path
        }, this.context);
      }
      if ((this.options.captureOutput != null) && this.options.captureOutput) {
        this.startCapture();
      }
      if (!this.options.defaultPermissions) {
        this.options.defaultPermissions = [];
      }
      if (!this.options.permissions) {
        this.options.permissions = {};
      }
    }

    BaseTransport.prototype.canDo = function(capability, secret) {
      var permitted;
      permitted = this.getPermitted(secret);
      if (permitted.indexOf(capability) !== -1) {
        return true;
      }
      return false;
    };

    BaseTransport.prototype.getPermitted = function(secret) {
      if (!secret) {
        return this.options.defaultPermissions;
      }
      if (!this.options.permissions[secret]) {
        return [];
      }
      return this.options.permissions[secret];
    };

    BaseTransport.prototype.send = function(protocol, topic, payload, context) {
      debugMessagingSend(protocol + " " + topic);
      return debugMessagingSendPayload(payload);
    };

    BaseTransport.prototype.sendAll = function(protocol, topic, payload, context) {};

    BaseTransport.prototype.receive = function(protocol, topic, payload, context) {
      if (!payload) {
        payload = {};
      }
      debugMessagingReceive(protocol + " " + topic);
      debugMessagingReceivePayload(payload);
      this.context = context;
      switch (protocol) {
        case 'runtime':
          return this.runtime.receive(topic, payload, context);
        case 'graph':
          return this.graph.receive(topic, payload, context);
        case 'network':
          return this.network.receive(topic, payload, context);
        case 'component':
          return this.component.receive(topic, payload, context);
      }
    };

    return BaseTransport;

  })();

  module.exports = BaseTransport;

  module.exports.trace = __webpack_require__(413);

  module.exports.direct = __webpack_require__(420);

}).call(this);


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var exported = {
  'noflo': __webpack_require__(0),
'noflo-runtime-postmessage': __webpack_require__(407),
'fbp-protocol-client': __webpack_require__(17),
'noflo-runtime': __webpack_require__(422)
};

if (window) {
  window.require = function (moduleName) {
    if (exported[moduleName]) {
      return exported[moduleName];
    }
    throw new Error('Module ' + moduleName + ' not available');
  };
}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var EventEmitter, Graph, clone, mergeResolveTheirsNaive, platform, resetGraph,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = __webpack_require__(4).EventEmitter;

  clone = __webpack_require__(22);

  platform = __webpack_require__(51);

  Graph = (function(superClass) {
    extend(Graph, superClass);

    Graph.prototype.name = '';

    Graph.prototype.caseSensitive = false;

    Graph.prototype.properties = {};

    Graph.prototype.nodes = [];

    Graph.prototype.edges = [];

    Graph.prototype.initializers = [];

    Graph.prototype.exports = [];

    Graph.prototype.inports = {};

    Graph.prototype.outports = {};

    Graph.prototype.groups = [];

    function Graph(name1, options) {
      this.name = name1 != null ? name1 : '';
      if (options == null) {
        options = {};
      }
      this.properties = {};
      this.nodes = [];
      this.edges = [];
      this.initializers = [];
      this.exports = [];
      this.inports = {};
      this.outports = {};
      this.groups = [];
      this.transaction = {
        id: null,
        depth: 0
      };
      this.caseSensitive = options.caseSensitive || false;
    }

    Graph.prototype.getPortName = function(port) {
      if (this.caseSensitive) {
        return port;
      } else {
        return port.toLowerCase();
      }
    };

    Graph.prototype.startTransaction = function(id, metadata) {
      if (this.transaction.id) {
        throw Error("Nested transactions not supported");
      }
      this.transaction.id = id;
      this.transaction.depth = 1;
      return this.emit('startTransaction', id, metadata);
    };

    Graph.prototype.endTransaction = function(id, metadata) {
      if (!this.transaction.id) {
        throw Error("Attempted to end non-existing transaction");
      }
      this.transaction.id = null;
      this.transaction.depth = 0;
      return this.emit('endTransaction', id, metadata);
    };

    Graph.prototype.checkTransactionStart = function() {
      if (!this.transaction.id) {
        return this.startTransaction('implicit');
      } else if (this.transaction.id === 'implicit') {
        return this.transaction.depth += 1;
      }
    };

    Graph.prototype.checkTransactionEnd = function() {
      if (this.transaction.id === 'implicit') {
        this.transaction.depth -= 1;
      }
      if (this.transaction.depth === 0) {
        return this.endTransaction('implicit');
      }
    };

    Graph.prototype.setProperties = function(properties) {
      var before, item, val;
      this.checkTransactionStart();
      before = clone(this.properties);
      for (item in properties) {
        val = properties[item];
        this.properties[item] = val;
      }
      this.emit('changeProperties', this.properties, before);
      return this.checkTransactionEnd();
    };

    Graph.prototype.addExport = function(publicPort, nodeKey, portKey, metadata) {
      var exported;
      if (metadata == null) {
        metadata = {
          x: 0,
          y: 0
        };
      }
      platform.deprecated('fbp-graph.Graph exports is deprecated: please use specific inport or outport instead');
      if (!this.getNode(nodeKey)) {
        return;
      }
      this.checkTransactionStart();
      exported = {
        "public": this.getPortName(publicPort),
        process: nodeKey,
        port: this.getPortName(portKey),
        metadata: metadata
      };
      this.exports.push(exported);
      this.emit('addExport', exported);
      return this.checkTransactionEnd();
    };

    Graph.prototype.removeExport = function(publicPort) {
      var exported, found, i, idx, len, ref;
      platform.deprecated('fbp-graph.Graph exports is deprecated: please use specific inport or outport instead');
      publicPort = this.getPortName(publicPort);
      found = null;
      ref = this.exports;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        exported = ref[idx];
        if (exported["public"] === publicPort) {
          found = exported;
        }
      }
      if (!found) {
        return;
      }
      this.checkTransactionStart();
      this.exports.splice(this.exports.indexOf(found), 1);
      this.emit('removeExport', found);
      return this.checkTransactionEnd();
    };

    Graph.prototype.addInport = function(publicPort, nodeKey, portKey, metadata) {
      if (!this.getNode(nodeKey)) {
        return;
      }
      publicPort = this.getPortName(publicPort);
      this.checkTransactionStart();
      this.inports[publicPort] = {
        process: nodeKey,
        port: this.getPortName(portKey),
        metadata: metadata
      };
      this.emit('addInport', publicPort, this.inports[publicPort]);
      return this.checkTransactionEnd();
    };

    Graph.prototype.removeInport = function(publicPort) {
      var port;
      publicPort = this.getPortName(publicPort);
      if (!this.inports[publicPort]) {
        return;
      }
      this.checkTransactionStart();
      port = this.inports[publicPort];
      this.setInportMetadata(publicPort, {});
      delete this.inports[publicPort];
      this.emit('removeInport', publicPort, port);
      return this.checkTransactionEnd();
    };

    Graph.prototype.renameInport = function(oldPort, newPort) {
      oldPort = this.getPortName(oldPort);
      newPort = this.getPortName(newPort);
      if (!this.inports[oldPort]) {
        return;
      }
      this.checkTransactionStart();
      this.inports[newPort] = this.inports[oldPort];
      delete this.inports[oldPort];
      this.emit('renameInport', oldPort, newPort);
      return this.checkTransactionEnd();
    };

    Graph.prototype.setInportMetadata = function(publicPort, metadata) {
      var before, item, val;
      publicPort = this.getPortName(publicPort);
      if (!this.inports[publicPort]) {
        return;
      }
      this.checkTransactionStart();
      before = clone(this.inports[publicPort].metadata);
      if (!this.inports[publicPort].metadata) {
        this.inports[publicPort].metadata = {};
      }
      for (item in metadata) {
        val = metadata[item];
        if (val != null) {
          this.inports[publicPort].metadata[item] = val;
        } else {
          delete this.inports[publicPort].metadata[item];
        }
      }
      this.emit('changeInport', publicPort, this.inports[publicPort], before);
      return this.checkTransactionEnd();
    };

    Graph.prototype.addOutport = function(publicPort, nodeKey, portKey, metadata) {
      if (!this.getNode(nodeKey)) {
        return;
      }
      publicPort = this.getPortName(publicPort);
      this.checkTransactionStart();
      this.outports[publicPort] = {
        process: nodeKey,
        port: this.getPortName(portKey),
        metadata: metadata
      };
      this.emit('addOutport', publicPort, this.outports[publicPort]);
      return this.checkTransactionEnd();
    };

    Graph.prototype.removeOutport = function(publicPort) {
      var port;
      publicPort = this.getPortName(publicPort);
      if (!this.outports[publicPort]) {
        return;
      }
      this.checkTransactionStart();
      port = this.outports[publicPort];
      this.setOutportMetadata(publicPort, {});
      delete this.outports[publicPort];
      this.emit('removeOutport', publicPort, port);
      return this.checkTransactionEnd();
    };

    Graph.prototype.renameOutport = function(oldPort, newPort) {
      oldPort = this.getPortName(oldPort);
      newPort = this.getPortName(newPort);
      if (!this.outports[oldPort]) {
        return;
      }
      this.checkTransactionStart();
      this.outports[newPort] = this.outports[oldPort];
      delete this.outports[oldPort];
      this.emit('renameOutport', oldPort, newPort);
      return this.checkTransactionEnd();
    };

    Graph.prototype.setOutportMetadata = function(publicPort, metadata) {
      var before, item, val;
      publicPort = this.getPortName(publicPort);
      if (!this.outports[publicPort]) {
        return;
      }
      this.checkTransactionStart();
      before = clone(this.outports[publicPort].metadata);
      if (!this.outports[publicPort].metadata) {
        this.outports[publicPort].metadata = {};
      }
      for (item in metadata) {
        val = metadata[item];
        if (val != null) {
          this.outports[publicPort].metadata[item] = val;
        } else {
          delete this.outports[publicPort].metadata[item];
        }
      }
      this.emit('changeOutport', publicPort, this.outports[publicPort], before);
      return this.checkTransactionEnd();
    };

    Graph.prototype.addGroup = function(group, nodes, metadata) {
      var g;
      this.checkTransactionStart();
      g = {
        name: group,
        nodes: nodes,
        metadata: metadata
      };
      this.groups.push(g);
      this.emit('addGroup', g);
      return this.checkTransactionEnd();
    };

    Graph.prototype.renameGroup = function(oldName, newName) {
      var group, i, len, ref;
      this.checkTransactionStart();
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        if (!group) {
          continue;
        }
        if (group.name !== oldName) {
          continue;
        }
        group.name = newName;
        this.emit('renameGroup', oldName, newName);
      }
      return this.checkTransactionEnd();
    };

    Graph.prototype.removeGroup = function(groupName) {
      var group, i, len, ref;
      this.checkTransactionStart();
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        if (!group) {
          continue;
        }
        if (group.name !== groupName) {
          continue;
        }
        this.setGroupMetadata(group.name, {});
        this.groups.splice(this.groups.indexOf(group), 1);
        this.emit('removeGroup', group);
      }
      return this.checkTransactionEnd();
    };

    Graph.prototype.setGroupMetadata = function(groupName, metadata) {
      var before, group, i, item, len, ref, val;
      this.checkTransactionStart();
      ref = this.groups;
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        if (!group) {
          continue;
        }
        if (group.name !== groupName) {
          continue;
        }
        before = clone(group.metadata);
        for (item in metadata) {
          val = metadata[item];
          if (val != null) {
            group.metadata[item] = val;
          } else {
            delete group.metadata[item];
          }
        }
        this.emit('changeGroup', group, before);
      }
      return this.checkTransactionEnd();
    };

    Graph.prototype.addNode = function(id, component, metadata) {
      var node;
      this.checkTransactionStart();
      if (!metadata) {
        metadata = {};
      }
      node = {
        id: id,
        component: component,
        metadata: metadata
      };
      this.nodes.push(node);
      this.emit('addNode', node);
      this.checkTransactionEnd();
      return node;
    };

    Graph.prototype.removeNode = function(id) {
      var edge, exported, group, i, index, initializer, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, m, n, node, o, p, priv, pub, q, ref, ref1, ref2, ref3, ref4, ref5, toRemove;
      node = this.getNode(id);
      if (!node) {
        return;
      }
      this.checkTransactionStart();
      toRemove = [];
      ref = this.edges;
      for (i = 0, len = ref.length; i < len; i++) {
        edge = ref[i];
        if ((edge.from.node === node.id) || (edge.to.node === node.id)) {
          toRemove.push(edge);
        }
      }
      for (j = 0, len1 = toRemove.length; j < len1; j++) {
        edge = toRemove[j];
        this.removeEdge(edge.from.node, edge.from.port, edge.to.node, edge.to.port);
      }
      toRemove = [];
      ref1 = this.initializers;
      for (k = 0, len2 = ref1.length; k < len2; k++) {
        initializer = ref1[k];
        if (initializer.to.node === node.id) {
          toRemove.push(initializer);
        }
      }
      for (l = 0, len3 = toRemove.length; l < len3; l++) {
        initializer = toRemove[l];
        this.removeInitial(initializer.to.node, initializer.to.port);
      }
      toRemove = [];
      ref2 = this.exports;
      for (m = 0, len4 = ref2.length; m < len4; m++) {
        exported = ref2[m];
        if (this.getPortName(id) === exported.process) {
          toRemove.push(exported);
        }
      }
      for (n = 0, len5 = toRemove.length; n < len5; n++) {
        exported = toRemove[n];
        this.removeExport(exported["public"]);
      }
      toRemove = [];
      ref3 = this.inports;
      for (pub in ref3) {
        priv = ref3[pub];
        if (priv.process === id) {
          toRemove.push(pub);
        }
      }
      for (o = 0, len6 = toRemove.length; o < len6; o++) {
        pub = toRemove[o];
        this.removeInport(pub);
      }
      toRemove = [];
      ref4 = this.outports;
      for (pub in ref4) {
        priv = ref4[pub];
        if (priv.process === id) {
          toRemove.push(pub);
        }
      }
      for (p = 0, len7 = toRemove.length; p < len7; p++) {
        pub = toRemove[p];
        this.removeOutport(pub);
      }
      ref5 = this.groups;
      for (q = 0, len8 = ref5.length; q < len8; q++) {
        group = ref5[q];
        if (!group) {
          continue;
        }
        index = group.nodes.indexOf(id);
        if (index === -1) {
          continue;
        }
        group.nodes.splice(index, 1);
      }
      this.setNodeMetadata(id, {});
      if (-1 !== this.nodes.indexOf(node)) {
        this.nodes.splice(this.nodes.indexOf(node), 1);
      }
      this.emit('removeNode', node);
      return this.checkTransactionEnd();
    };

    Graph.prototype.getNode = function(id) {
      var i, len, node, ref;
      ref = this.nodes;
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        if (!node) {
          continue;
        }
        if (node.id === id) {
          return node;
        }
      }
      return null;
    };

    Graph.prototype.renameNode = function(oldId, newId) {
      var edge, exported, group, i, iip, index, j, k, l, len, len1, len2, len3, node, priv, pub, ref, ref1, ref2, ref3, ref4, ref5;
      this.checkTransactionStart();
      node = this.getNode(oldId);
      if (!node) {
        return;
      }
      node.id = newId;
      ref = this.edges;
      for (i = 0, len = ref.length; i < len; i++) {
        edge = ref[i];
        if (!edge) {
          continue;
        }
        if (edge.from.node === oldId) {
          edge.from.node = newId;
        }
        if (edge.to.node === oldId) {
          edge.to.node = newId;
        }
      }
      ref1 = this.initializers;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        iip = ref1[j];
        if (!iip) {
          continue;
        }
        if (iip.to.node === oldId) {
          iip.to.node = newId;
        }
      }
      ref2 = this.inports;
      for (pub in ref2) {
        priv = ref2[pub];
        if (priv.process === oldId) {
          priv.process = newId;
        }
      }
      ref3 = this.outports;
      for (pub in ref3) {
        priv = ref3[pub];
        if (priv.process === oldId) {
          priv.process = newId;
        }
      }
      ref4 = this.exports;
      for (k = 0, len2 = ref4.length; k < len2; k++) {
        exported = ref4[k];
        if (exported.process === oldId) {
          exported.process = newId;
        }
      }
      ref5 = this.groups;
      for (l = 0, len3 = ref5.length; l < len3; l++) {
        group = ref5[l];
        if (!group) {
          continue;
        }
        index = group.nodes.indexOf(oldId);
        if (index === -1) {
          continue;
        }
        group.nodes[index] = newId;
      }
      this.emit('renameNode', oldId, newId);
      return this.checkTransactionEnd();
    };

    Graph.prototype.setNodeMetadata = function(id, metadata) {
      var before, item, node, val;
      node = this.getNode(id);
      if (!node) {
        return;
      }
      this.checkTransactionStart();
      before = clone(node.metadata);
      if (!node.metadata) {
        node.metadata = {};
      }
      for (item in metadata) {
        val = metadata[item];
        if (val != null) {
          node.metadata[item] = val;
        } else {
          delete node.metadata[item];
        }
      }
      this.emit('changeNode', node, before);
      return this.checkTransactionEnd();
    };

    Graph.prototype.addEdge = function(outNode, outPort, inNode, inPort, metadata) {
      var edge, i, len, ref;
      if (metadata == null) {
        metadata = {};
      }
      outPort = this.getPortName(outPort);
      inPort = this.getPortName(inPort);
      ref = this.edges;
      for (i = 0, len = ref.length; i < len; i++) {
        edge = ref[i];
        if (edge.from.node === outNode && edge.from.port === outPort && edge.to.node === inNode && edge.to.port === inPort) {
          return;
        }
      }
      if (!this.getNode(outNode)) {
        return;
      }
      if (!this.getNode(inNode)) {
        return;
      }
      this.checkTransactionStart();
      edge = {
        from: {
          node: outNode,
          port: outPort
        },
        to: {
          node: inNode,
          port: inPort
        },
        metadata: metadata
      };
      this.edges.push(edge);
      this.emit('addEdge', edge);
      this.checkTransactionEnd();
      return edge;
    };

    Graph.prototype.addEdgeIndex = function(outNode, outPort, outIndex, inNode, inPort, inIndex, metadata) {
      var edge;
      if (metadata == null) {
        metadata = {};
      }
      if (!this.getNode(outNode)) {
        return;
      }
      if (!this.getNode(inNode)) {
        return;
      }
      outPort = this.getPortName(outPort);
      inPort = this.getPortName(inPort);
      if (inIndex === null) {
        inIndex = void 0;
      }
      if (outIndex === null) {
        outIndex = void 0;
      }
      if (!metadata) {
        metadata = {};
      }
      this.checkTransactionStart();
      edge = {
        from: {
          node: outNode,
          port: outPort,
          index: outIndex
        },
        to: {
          node: inNode,
          port: inPort,
          index: inIndex
        },
        metadata: metadata
      };
      this.edges.push(edge);
      this.emit('addEdge', edge);
      this.checkTransactionEnd();
      return edge;
    };

    Graph.prototype.removeEdge = function(node, port, node2, port2) {
      var edge, i, index, j, k, len, len1, len2, ref, ref1, toKeep, toRemove;
      this.checkTransactionStart();
      port = this.getPortName(port);
      port2 = this.getPortName(port2);
      toRemove = [];
      toKeep = [];
      if (node2 && port2) {
        ref = this.edges;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          edge = ref[index];
          if (edge.from.node === node && edge.from.port === port && edge.to.node === node2 && edge.to.port === port2) {
            this.setEdgeMetadata(edge.from.node, edge.from.port, edge.to.node, edge.to.port, {});
            toRemove.push(edge);
          } else {
            toKeep.push(edge);
          }
        }
      } else {
        ref1 = this.edges;
        for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
          edge = ref1[index];
          if ((edge.from.node === node && edge.from.port === port) || (edge.to.node === node && edge.to.port === port)) {
            this.setEdgeMetadata(edge.from.node, edge.from.port, edge.to.node, edge.to.port, {});
            toRemove.push(edge);
          } else {
            toKeep.push(edge);
          }
        }
      }
      this.edges = toKeep;
      for (k = 0, len2 = toRemove.length; k < len2; k++) {
        edge = toRemove[k];
        this.emit('removeEdge', edge);
      }
      return this.checkTransactionEnd();
    };

    Graph.prototype.getEdge = function(node, port, node2, port2) {
      var edge, i, index, len, ref;
      port = this.getPortName(port);
      port2 = this.getPortName(port2);
      ref = this.edges;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        edge = ref[index];
        if (!edge) {
          continue;
        }
        if (edge.from.node === node && edge.from.port === port) {
          if (edge.to.node === node2 && edge.to.port === port2) {
            return edge;
          }
        }
      }
      return null;
    };

    Graph.prototype.setEdgeMetadata = function(node, port, node2, port2, metadata) {
      var before, edge, item, val;
      edge = this.getEdge(node, port, node2, port2);
      if (!edge) {
        return;
      }
      this.checkTransactionStart();
      before = clone(edge.metadata);
      if (!edge.metadata) {
        edge.metadata = {};
      }
      for (item in metadata) {
        val = metadata[item];
        if (val != null) {
          edge.metadata[item] = val;
        } else {
          delete edge.metadata[item];
        }
      }
      this.emit('changeEdge', edge, before);
      return this.checkTransactionEnd();
    };

    Graph.prototype.addInitial = function(data, node, port, metadata) {
      var initializer;
      if (!this.getNode(node)) {
        return;
      }
      port = this.getPortName(port);
      this.checkTransactionStart();
      initializer = {
        from: {
          data: data
        },
        to: {
          node: node,
          port: port
        },
        metadata: metadata
      };
      this.initializers.push(initializer);
      this.emit('addInitial', initializer);
      this.checkTransactionEnd();
      return initializer;
    };

    Graph.prototype.addInitialIndex = function(data, node, port, index, metadata) {
      var initializer;
      if (!this.getNode(node)) {
        return;
      }
      if (index === null) {
        index = void 0;
      }
      port = this.getPortName(port);
      this.checkTransactionStart();
      initializer = {
        from: {
          data: data
        },
        to: {
          node: node,
          port: port,
          index: index
        },
        metadata: metadata
      };
      this.initializers.push(initializer);
      this.emit('addInitial', initializer);
      this.checkTransactionEnd();
      return initializer;
    };

    Graph.prototype.addGraphInitial = function(data, node, metadata) {
      var inport;
      inport = this.inports[node];
      if (!inport) {
        return;
      }
      return this.addInitial(data, inport.process, inport.port, metadata);
    };

    Graph.prototype.addGraphInitialIndex = function(data, node, index, metadata) {
      var inport;
      inport = this.inports[node];
      if (!inport) {
        return;
      }
      return this.addInitialIndex(data, inport.process, inport.port, index, metadata);
    };

    Graph.prototype.removeInitial = function(node, port) {
      var edge, i, index, j, len, len1, ref, toKeep, toRemove;
      port = this.getPortName(port);
      this.checkTransactionStart();
      toRemove = [];
      toKeep = [];
      ref = this.initializers;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        edge = ref[index];
        if (edge.to.node === node && edge.to.port === port) {
          toRemove.push(edge);
        } else {
          toKeep.push(edge);
        }
      }
      this.initializers = toKeep;
      for (j = 0, len1 = toRemove.length; j < len1; j++) {
        edge = toRemove[j];
        this.emit('removeInitial', edge);
      }
      return this.checkTransactionEnd();
    };

    Graph.prototype.removeGraphInitial = function(node) {
      var inport;
      inport = this.inports[node];
      if (!inport) {
        return;
      }
      return this.removeInitial(inport.process, inport.port);
    };

    Graph.prototype.toDOT = function() {
      var cleanID, cleanPort, data, dot, edge, i, id, initializer, j, k, len, len1, len2, node, ref, ref1, ref2;
      cleanID = function(id) {
        return id.replace(/\s*/g, "");
      };
      cleanPort = function(port) {
        return port.replace(/\./g, "");
      };
      dot = "digraph {\n";
      ref = this.nodes;
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        dot += "    " + (cleanID(node.id)) + " [label=" + node.id + " shape=box]\n";
      }
      ref1 = this.initializers;
      for (id = j = 0, len1 = ref1.length; j < len1; id = ++j) {
        initializer = ref1[id];
        if (typeof initializer.from.data === 'function') {
          data = 'Function';
        } else {
          data = initializer.from.data;
        }
        dot += "    data" + id + " [label=\"'" + data + "'\" shape=plaintext]\n";
        dot += "    data" + id + " -> " + (cleanID(initializer.to.node)) + "[headlabel=" + (cleanPort(initializer.to.port)) + " labelfontcolor=blue labelfontsize=8.0]\n";
      }
      ref2 = this.edges;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        edge = ref2[k];
        dot += "    " + (cleanID(edge.from.node)) + " -> " + (cleanID(edge.to.node)) + "[taillabel=" + (cleanPort(edge.from.port)) + " headlabel=" + (cleanPort(edge.to.port)) + " labelfontcolor=blue labelfontsize=8.0]\n";
      }
      dot += "}";
      return dot;
    };

    Graph.prototype.toYUML = function() {
      var edge, i, initializer, j, len, len1, ref, ref1, yuml;
      yuml = [];
      ref = this.initializers;
      for (i = 0, len = ref.length; i < len; i++) {
        initializer = ref[i];
        yuml.push("(start)[" + initializer.to.port + "]->(" + initializer.to.node + ")");
      }
      ref1 = this.edges;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        edge = ref1[j];
        yuml.push("(" + edge.from.node + ")[" + edge.from.port + "]->(" + edge.to.node + ")");
      }
      return yuml.join(",");
    };

    Graph.prototype.toJSON = function() {
      var connection, edge, exported, group, groupData, i, initializer, j, json, k, l, len, len1, len2, len3, len4, m, node, priv, property, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, value;
      json = {
        caseSensitive: this.caseSensitive,
        properties: {},
        inports: {},
        outports: {},
        groups: [],
        processes: {},
        connections: []
      };
      if (this.name) {
        json.properties.name = this.name;
      }
      ref = this.properties;
      for (property in ref) {
        value = ref[property];
        json.properties[property] = value;
      }
      ref1 = this.inports;
      for (pub in ref1) {
        priv = ref1[pub];
        json.inports[pub] = priv;
      }
      ref2 = this.outports;
      for (pub in ref2) {
        priv = ref2[pub];
        json.outports[pub] = priv;
      }
      ref3 = this.exports;
      for (i = 0, len = ref3.length; i < len; i++) {
        exported = ref3[i];
        if (!json.exports) {
          json.exports = [];
        }
        json.exports.push(exported);
      }
      ref4 = this.groups;
      for (j = 0, len1 = ref4.length; j < len1; j++) {
        group = ref4[j];
        groupData = {
          name: group.name,
          nodes: group.nodes
        };
        if (Object.keys(group.metadata).length) {
          groupData.metadata = group.metadata;
        }
        json.groups.push(groupData);
      }
      ref5 = this.nodes;
      for (k = 0, len2 = ref5.length; k < len2; k++) {
        node = ref5[k];
        json.processes[node.id] = {
          component: node.component
        };
        if (node.metadata) {
          json.processes[node.id].metadata = node.metadata;
        }
      }
      ref6 = this.edges;
      for (l = 0, len3 = ref6.length; l < len3; l++) {
        edge = ref6[l];
        connection = {
          src: {
            process: edge.from.node,
            port: edge.from.port,
            index: edge.from.index
          },
          tgt: {
            process: edge.to.node,
            port: edge.to.port,
            index: edge.to.index
          }
        };
        if (Object.keys(edge.metadata).length) {
          connection.metadata = edge.metadata;
        }
        json.connections.push(connection);
      }
      ref7 = this.initializers;
      for (m = 0, len4 = ref7.length; m < len4; m++) {
        initializer = ref7[m];
        json.connections.push({
          data: initializer.from.data,
          tgt: {
            process: initializer.to.node,
            port: initializer.to.port,
            index: initializer.to.index
          }
        });
      }
      return json;
    };

    Graph.prototype.save = function(file, callback) {
      var json;
      if (platform.isBrowser()) {
        return callback(new Error("Saving graphs not supported on browser"));
      }
      json = JSON.stringify(this.toJSON(), null, 4);
      return __webpack_require__(6).writeFile(file + ".json", json, "utf-8", function(err, data) {
        if (err) {
          throw err;
        }
        return callback(file);
      });
    };

    return Graph;

  })(EventEmitter);

  exports.Graph = Graph;

  exports.createGraph = function(name, options) {
    return new Graph(name, options);
  };

  exports.loadJSON = function(definition, callback, metadata) {
    var caseSensitive, conn, def, exported, graph, group, i, id, j, k, len, len1, len2, portId, priv, processId, properties, property, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6, split, value;
    if (metadata == null) {
      metadata = {};
    }
    if (typeof definition === 'string') {
      definition = JSON.parse(definition);
    }
    if (!definition.properties) {
      definition.properties = {};
    }
    if (!definition.processes) {
      definition.processes = {};
    }
    if (!definition.connections) {
      definition.connections = [];
    }
    caseSensitive = definition.caseSensitive || false;
    graph = new Graph(definition.properties.name, {
      caseSensitive: caseSensitive
    });
    graph.startTransaction('loadJSON', metadata);
    properties = {};
    ref = definition.properties;
    for (property in ref) {
      value = ref[property];
      if (property === 'name') {
        continue;
      }
      properties[property] = value;
    }
    graph.setProperties(properties);
    ref1 = definition.processes;
    for (id in ref1) {
      def = ref1[id];
      if (!def.metadata) {
        def.metadata = {};
      }
      graph.addNode(id, def.component, def.metadata);
    }
    ref2 = definition.connections;
    for (i = 0, len = ref2.length; i < len; i++) {
      conn = ref2[i];
      metadata = conn.metadata ? conn.metadata : {};
      if (conn.data !== void 0) {
        if (typeof conn.tgt.index === 'number') {
          graph.addInitialIndex(conn.data, conn.tgt.process, graph.getPortName(conn.tgt.port), conn.tgt.index, metadata);
        } else {
          graph.addInitial(conn.data, conn.tgt.process, graph.getPortName(conn.tgt.port), metadata);
        }
        continue;
      }
      if (typeof conn.src.index === 'number' || typeof conn.tgt.index === 'number') {
        graph.addEdgeIndex(conn.src.process, graph.getPortName(conn.src.port), conn.src.index, conn.tgt.process, graph.getPortName(conn.tgt.port), conn.tgt.index, metadata);
        continue;
      }
      graph.addEdge(conn.src.process, graph.getPortName(conn.src.port), conn.tgt.process, graph.getPortName(conn.tgt.port), metadata);
    }
    if (definition.exports && definition.exports.length) {
      ref3 = definition.exports;
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        exported = ref3[j];
        if (exported["private"]) {
          split = exported["private"].split('.');
          if (split.length !== 2) {
            continue;
          }
          processId = split[0];
          portId = split[1];
          for (id in definition.processes) {
            if (graph.getPortName(id) === graph.getPortName(processId)) {
              processId = id;
            }
          }
        } else {
          processId = exported.process;
          portId = graph.getPortName(exported.port);
        }
        graph.addExport(exported["public"], processId, portId, exported.metadata);
      }
    }
    if (definition.inports) {
      ref4 = definition.inports;
      for (pub in ref4) {
        priv = ref4[pub];
        graph.addInport(pub, priv.process, graph.getPortName(priv.port), priv.metadata);
      }
    }
    if (definition.outports) {
      ref5 = definition.outports;
      for (pub in ref5) {
        priv = ref5[pub];
        graph.addOutport(pub, priv.process, graph.getPortName(priv.port), priv.metadata);
      }
    }
    if (definition.groups) {
      ref6 = definition.groups;
      for (k = 0, len2 = ref6.length; k < len2; k++) {
        group = ref6[k];
        graph.addGroup(group.name, group.nodes, group.metadata || {});
      }
    }
    graph.endTransaction('loadJSON');
    return callback(null, graph);
  };

  exports.loadFBP = function(fbpData, callback, metadata, caseSensitive) {
    var definition, e, error;
    if (metadata == null) {
      metadata = {};
    }
    if (caseSensitive == null) {
      caseSensitive = false;
    }
    try {
      definition = __webpack_require__(52).parse(fbpData, {
        caseSensitive: caseSensitive
      });
    } catch (error) {
      e = error;
      return callback(e);
    }
    return exports.loadJSON(definition, callback, metadata);
  };

  exports.loadHTTP = function(url, callback) {
    var req;
    req = new XMLHttpRequest;
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status !== 200) {
        return callback(new Error("Failed to load " + url + ": HTTP " + req.status));
      }
      return callback(null, req.responseText);
    };
    req.open('GET', url, true);
    return req.send();
  };

  exports.loadFile = function(file, callback, metadata, caseSensitive) {
    if (metadata == null) {
      metadata = {};
    }
    if (caseSensitive == null) {
      caseSensitive = false;
    }
    if (platform.isBrowser()) {
      exports.loadHTTP(file, function(err, data) {
        var definition;
        if (err) {
          return callback(err);
        }
        if (file.split('.').pop() === 'fbp') {
          return exports.loadFBP(data, callback, metadata);
        }
        definition = JSON.parse(data);
        return exports.loadJSON(definition, callback, metadata);
      });
      return;
    }
    return __webpack_require__(6).readFile(file, "utf-8", function(err, data) {
      var definition;
      if (err) {
        return callback(err);
      }
      if (file.split('.').pop() === 'fbp') {
        return exports.loadFBP(data, callback, {}, caseSensitive);
      }
      definition = JSON.parse(data);
      return exports.loadJSON(definition, callback, {});
    });
  };

  resetGraph = function(graph) {
    var edge, exp, group, i, iip, j, k, l, len, len1, len2, len3, len4, m, node, port, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, v;
    ref = (clone(graph.groups)).reverse();
    for (i = 0, len = ref.length; i < len; i++) {
      group = ref[i];
      if (group != null) {
        graph.removeGroup(group.name);
      }
    }
    ref1 = clone(graph.outports);
    for (port in ref1) {
      v = ref1[port];
      graph.removeOutport(port);
    }
    ref2 = clone(graph.inports);
    for (port in ref2) {
      v = ref2[port];
      graph.removeInport(port);
    }
    ref3 = clone(graph.exports.reverse());
    for (j = 0, len1 = ref3.length; j < len1; j++) {
      exp = ref3[j];
      graph.removeExport(exp["public"]);
    }
    graph.setProperties({});
    ref4 = (clone(graph.initializers)).reverse();
    for (k = 0, len2 = ref4.length; k < len2; k++) {
      iip = ref4[k];
      graph.removeInitial(iip.to.node, iip.to.port);
    }
    ref5 = (clone(graph.edges)).reverse();
    for (l = 0, len3 = ref5.length; l < len3; l++) {
      edge = ref5[l];
      graph.removeEdge(edge.from.node, edge.from.port, edge.to.node, edge.to.port);
    }
    ref6 = (clone(graph.nodes)).reverse();
    results = [];
    for (m = 0, len4 = ref6.length; m < len4; m++) {
      node = ref6[m];
      results.push(graph.removeNode(node.id));
    }
    return results;
  };

  mergeResolveTheirsNaive = function(base, to) {
    var edge, exp, group, i, iip, j, k, l, len, len1, len2, len3, len4, m, node, priv, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6, results;
    resetGraph(base);
    ref = to.nodes;
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      base.addNode(node.id, node.component, node.metadata);
    }
    ref1 = to.edges;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      edge = ref1[j];
      base.addEdge(edge.from.node, edge.from.port, edge.to.node, edge.to.port, edge.metadata);
    }
    ref2 = to.initializers;
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      iip = ref2[k];
      base.addInitial(iip.from.data, iip.to.node, iip.to.port, iip.metadata);
    }
    ref3 = to.exports;
    for (l = 0, len3 = ref3.length; l < len3; l++) {
      exp = ref3[l];
      base.addExport(exp["public"], exp.node, exp.port, exp.metadata);
    }
    base.setProperties(to.properties);
    ref4 = to.inports;
    for (pub in ref4) {
      priv = ref4[pub];
      base.addInport(pub, priv.process, priv.port, priv.metadata);
    }
    ref5 = to.outports;
    for (pub in ref5) {
      priv = ref5[pub];
      base.addOutport(pub, priv.process, priv.port, priv.metadata);
    }
    ref6 = to.groups;
    results = [];
    for (m = 0, len4 = ref6.length; m < len4; m++) {
      group = ref6[m];
      results.push(base.addGroup(group.name, group.nodes, group.metadata));
    }
    return results;
  };

  exports.equivalent = function(a, b, options) {
    var A, B;
    if (options == null) {
      options = {};
    }
    A = JSON.stringify(a);
    B = JSON.stringify(b);
    return A === B;
  };

  exports.mergeResolveTheirs = mergeResolveTheirsNaive;

}).call(this);


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 49 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 50 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  exports.isBrowser = function() {
    if (typeof process !== 'undefined' && process.execPath && process.execPath.match(/node|iojs/)) {
      return false;
    }
    return true;
  };

  exports.deprecated = function(message) {
    if (exports.isBrowser()) {
      if (window.NOFLO_FATAL_DEPRECATED) {
        throw new Error(message);
      }
      console.warn(message);
      return;
    }
    if (process.env.NOFLO_FATAL_DEPRECATED) {
      throw new Error(message);
    }
    return console.warn(message);
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function() { return parser.getResult();  },
        peg$c1 = "EXPORT=",
        peg$c2 = { type: "literal", value: "EXPORT=", description: "\"EXPORT=\"" },
        peg$c3 = ":",
        peg$c4 = { type: "literal", value: ":", description: "\":\"" },
        peg$c5 = function(priv, pub) {return parser.registerExports(priv,pub)},
        peg$c6 = "INPORT=",
        peg$c7 = { type: "literal", value: "INPORT=", description: "\"INPORT=\"" },
        peg$c8 = ".",
        peg$c9 = { type: "literal", value: ".", description: "\".\"" },
        peg$c10 = function(node, port, pub) {return parser.registerInports(node,port,pub)},
        peg$c11 = "OUTPORT=",
        peg$c12 = { type: "literal", value: "OUTPORT=", description: "\"OUTPORT=\"" },
        peg$c13 = function(node, port, pub) {return parser.registerOutports(node,port,pub)},
        peg$c14 = "DEFAULT_INPORT=",
        peg$c15 = { type: "literal", value: "DEFAULT_INPORT=", description: "\"DEFAULT_INPORT=\"" },
        peg$c16 = function(name) { defaultInPort = name},
        peg$c17 = "DEFAULT_OUTPORT=",
        peg$c18 = { type: "literal", value: "DEFAULT_OUTPORT=", description: "\"DEFAULT_OUTPORT=\"" },
        peg$c19 = function(name) { defaultOutPort = name},
        peg$c20 = /^[\n\r\u2028\u2029]/,
        peg$c21 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c22 = function(edges) {return parser.registerEdges(edges);},
        peg$c23 = ",",
        peg$c24 = { type: "literal", value: ",", description: "\",\"" },
        peg$c25 = "#",
        peg$c26 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c27 = "->",
        peg$c28 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c29 = function(x, y) { return [x,y]; },
        peg$c30 = function(x, proc, y) { return [{"tgt":makeInPort(proc, x)},{"src":makeOutPort(proc, y)}]; },
        peg$c31 = function(proc, port) { return {"src":makeOutPort(proc, port)} },
        peg$c32 = function(port, proc) { return {"tgt":makeInPort(proc, port)} },
        peg$c33 = "'",
        peg$c34 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c35 = function(iip) { return {"data":iip.join("")} },
        peg$c36 = function(iip) { return {"data":iip} },
        peg$c37 = function(name) { return name},
        peg$c38 = /^[a-zA-Z_]/,
        peg$c39 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c40 = /^[a-zA-Z0-9_\-]/,
        peg$c41 = { type: "class", value: "[a-zA-Z0-9_\\-]", description: "[a-zA-Z0-9_\\-]" },
        peg$c42 = function(name) { return makeName(name)},
        peg$c43 = function(name, comp) { parser.addNode(name,comp); return name},
        peg$c44 = function(comp) { return parser.addAnonymousNode(comp, location().start.offset) },
        peg$c45 = "(",
        peg$c46 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c47 = /^[a-zA-Z\/\-0-9_]/,
        peg$c48 = { type: "class", value: "[a-zA-Z/\\-0-9_]", description: "[a-zA-Z/\\-0-9_]" },
        peg$c49 = ")",
        peg$c50 = { type: "literal", value: ")", description: "\")\"" },
        peg$c51 = function(comp, meta) { var o = {}; comp ? o.comp = comp.join("") : o.comp = ''; meta ? o.meta = meta.join("").split(',') : null; return o; },
        peg$c52 = /^[a-zA-Z\/=_,0-9]/,
        peg$c53 = { type: "class", value: "[a-zA-Z/=_,0-9]", description: "[a-zA-Z/=_,0-9]" },
        peg$c54 = function(meta) {return meta},
        peg$c55 = function(portname, portindex) {return { port: options.caseSensitive? portname : portname.toLowerCase(), index: portindex != null ? portindex : undefined }},
        peg$c56 = function(port) { return port; },
        peg$c57 = /^[a-zA-Z.0-9_]/,
        peg$c58 = { type: "class", value: "[a-zA-Z.0-9_]", description: "[a-zA-Z.0-9_]" },
        peg$c59 = function(portname) {return makeName(portname)},
        peg$c60 = "[",
        peg$c61 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c62 = /^[0-9]/,
        peg$c63 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c64 = "]",
        peg$c65 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c66 = function(portindex) {return parseInt(portindex.join(''))},
        peg$c67 = /^[^\n\r\u2028\u2029]/,
        peg$c68 = { type: "class", value: "[^\\n\\r\\u2028\\u2029]", description: "[^\\n\\r\\u2028\\u2029]" },
        peg$c69 = /^[\\]/,
        peg$c70 = { type: "class", value: "[\\\\]", description: "[\\\\]" },
        peg$c71 = /^[']/,
        peg$c72 = { type: "class", value: "[']", description: "[']" },
        peg$c73 = function() { return "'"; },
        peg$c74 = /^[^']/,
        peg$c75 = { type: "class", value: "[^']", description: "[^']" },
        peg$c76 = " ",
        peg$c77 = { type: "literal", value: " ", description: "\" \"" },
        peg$c78 = function(value) { return value; },
        peg$c79 = "{",
        peg$c80 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c81 = "}",
        peg$c82 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c83 = { type: "other", description: "whitespace" },
        peg$c84 = /^[ \t\n\r]/,
        peg$c85 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c86 = "false",
        peg$c87 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c88 = function() { return false; },
        peg$c89 = "null",
        peg$c90 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c91 = function() { return null;  },
        peg$c92 = "true",
        peg$c93 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c94 = function() { return true;  },
        peg$c95 = function(head, m) { return m; },
        peg$c96 = function(head, tail) {
                  var result = {}, i;

                  result[head.name] = head.value;

                  for (i = 0; i < tail.length; i++) {
                    result[tail[i].name] = tail[i].value;
                  }

                  return result;
                },
        peg$c97 = function(members) { return members !== null ? members: {}; },
        peg$c98 = function(name, value) {
                return { name: name, value: value };
              },
        peg$c99 = function(head, v) { return v; },
        peg$c100 = function(head, tail) { return [head].concat(tail); },
        peg$c101 = function(values) { return values !== null ? values : []; },
        peg$c102 = { type: "other", description: "number" },
        peg$c103 = function() { return parseFloat(text()); },
        peg$c104 = /^[1-9]/,
        peg$c105 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c106 = /^[eE]/,
        peg$c107 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c108 = "-",
        peg$c109 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c110 = "+",
        peg$c111 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c112 = "0",
        peg$c113 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c114 = { type: "other", description: "string" },
        peg$c115 = function(chars) { return chars.join(""); },
        peg$c116 = "\"",
        peg$c117 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c118 = "\\",
        peg$c119 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c120 = "/",
        peg$c121 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c122 = "b",
        peg$c123 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c124 = function() { return "\b"; },
        peg$c125 = "f",
        peg$c126 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c127 = function() { return "\f"; },
        peg$c128 = "n",
        peg$c129 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c130 = function() { return "\n"; },
        peg$c131 = "r",
        peg$c132 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c133 = function() { return "\r"; },
        peg$c134 = "t",
        peg$c135 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c136 = function() { return "\t"; },
        peg$c137 = "u",
        peg$c138 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c139 = function(digits) {
                    return String.fromCharCode(parseInt(digits, 16));
                  },
        peg$c140 = function(sequence) { return sequence; },
        peg$c141 = /^[^\0-\x1F"\\]/,
        peg$c142 = { type: "class", value: "[^\\0-\\x1F\\x22\\x5C]", description: "[^\\0-\\x1F\\x22\\x5C]" },
        peg$c143 = /^[0-9a-f]/i,
        peg$c144 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseline();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseline();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c1) {
          s2 = peg$c1;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c2); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseportName();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c3;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseportName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseLineTerminator();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c6) {
            s2 = peg$c6;
            peg$currPos += 7;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenode();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c8;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseportName();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s6 = peg$c3;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseportName();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseLineTerminator();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c10(s3, s5, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c11) {
              s2 = peg$c11;
              peg$currPos += 8;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenode();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c8;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseportName();
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s6 = peg$c3;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c4); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseportName();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseLineTerminator();
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c13(s3, s5, s7);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c14) {
                s2 = peg$c14;
                peg$currPos += 15;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseportName();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseLineTerminator();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c16(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 16) === peg$c17) {
                  s2 = peg$c17;
                  peg$currPos += 16;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseportName();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseLineTerminator();
                      if (s5 === peg$FAILED) {
                        s5 = null;
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c19(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecomment();
                if (s1 !== peg$FAILED) {
                  if (peg$c20.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c21); }
                  }
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  if (s1 !== peg$FAILED) {
                    if (peg$c20.test(input.charAt(peg$currPos))) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c21); }
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseconnection();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseLineTerminator();
                          if (s4 === peg$FAILED) {
                            s4 = null;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c22(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c23;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            if (peg$c20.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseanychar();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseanychar();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconnection() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesource();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c27) {
            s3 = peg$c27;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseconnection();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsedestination();
      }

      return s0;
    }

    function peg$parsesource() {
      var s0;

      s0 = peg$parsebridge();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoutport();
        if (s0 === peg$FAILED) {
          s0 = peg$parseiip();
        }
      }

      return s0;
    }

    function peg$parsedestination() {
      var s0;

      s0 = peg$parseinport();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebridge();
      }

      return s0;
    }

    function peg$parsebridge() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseport__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenode();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__port();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c30(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseport__();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenodeWithComponent();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__port();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c30(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseoutport() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenode();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__port();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinport() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseport__();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenode();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseiip() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseiipchar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseiipchar();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseJSON_text();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenode() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenodeNameAndComponent();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c37(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenodeName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c37(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenodeComponent();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsenodeName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c38.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c40.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c40.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c42(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenodeNameAndComponent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenodeName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomponent();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenodeComponent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecomponent();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c44(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenodeWithComponent() {
      var s0;

      s0 = peg$parsenodeNameAndComponent();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenodeComponent();
      }

      return s0;
    }

    function peg$parsecomponent() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecompMeta();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c49;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecompMeta() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c52.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c52.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c54(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseport() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseportName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseportIndex();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c55(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseport__() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseport();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__port() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseport();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseportName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c38.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c57.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c59(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseportIndex() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c62.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c62.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c63); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c64;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c66(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseanychar() {
      var s0;

      if (peg$c67.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }

      return s0;
    }

    function peg$parseiipchar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c69.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c73();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (peg$c74.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c76;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c76;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
      }
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c76;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c76;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseJSON_text() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevalue();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c60;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c79;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s2 = peg$c64;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c81;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsename_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c3;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalue_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c23;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c84.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c84.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parsefalse();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenull();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetrue();
          if (s0 === peg$FAILED) {
            s0 = peg$parseobject();
            if (s0 === peg$FAILED) {
              s0 = peg$parsearray();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenumber();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsestring();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefalse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetrue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseobject() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsemember();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsemember();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c95(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemember();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c95(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c96(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c97(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemember() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c98(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsevalue();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c99(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevalue();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c99(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c100(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c101(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseminus();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefrac();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexp();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c103();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }

    function peg$parsedecimal_point() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c8;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parsedigit1_9() {
      var s0;

      if (peg$c104.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }

      return s0;
    }

    function peg$parsee() {
      var s0;

      if (peg$c106.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseminus();
        if (s2 === peg$FAILED) {
          s2 = peg$parseplus();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseDIGIT();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedecimal_point();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$parsezero();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigit1_9();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDIGIT();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c108;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c109); }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c110;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }

      return s0;
    }

    function peg$parsezero() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c112;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsequotation_mark();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsechar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsechar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotation_mark();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c115(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseunescaped();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseescape();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c116;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c117); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c118;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c119); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c120;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c122;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c123); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c124();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c125;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c126); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c127();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c128;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c129); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c130();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c131;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c132); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c133();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c134;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c135); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c136();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c137;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c138); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            s6 = peg$parseHEXDIG();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG();
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            } else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c139(s4);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c140(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c118;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }

      return s0;
    }

    function peg$parsequotation_mark() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c116;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parseunescaped() {
      var s0;

      if (peg$c141.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c62.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c143.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }

      return s0;
    }


      var parser, edges, nodes;

      var defaultInPort = "IN", defaultOutPort = "OUT";

      parser = this;
      delete parser.exports;
      delete parser.inports;
      delete parser.outports;

      edges = parser.edges = [];

      nodes = {};

      var serialize, indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

      parser.serialize = function(graph) {
        var conn, getInOutName, getName, i, inPort, input, len, name, namedComponents, outPort, output, process, ref, ref1, ref2, src, srcName, srcPort, srcProcess, tgt, tgtName, tgtPort, tgtProcess;
        if (options == null) {
          options = {};
        }
        if (typeof(graph) === 'string') {
          input = JSON.parse(graph);
        } else {
          input = graph;
        }
        namedComponents = [];
        output = "";
        getName = function(name) {
          if (input.processes[name].metadata != null) {
            name = input.processes[name].metadata.label;
          }
          if (name.indexOf('/') > -1) {
            name = name.split('/').pop();
          }
          return name;
        };
        getInOutName = function(name, data) {
          if ((data.process != null) && (input.processes[data.process].metadata != null)) {
            name = input.processes[data.process].metadata.label;
          } else if (data.process != null) {
            name = data.process;
          }
          if (name.indexOf('/') > -1) {
            name = name.split('/').pop();
          }
          return name;
        };
        ref = input.inports;
        for (name in ref) {
          inPort = ref[name];
          process = getInOutName(name, inPort);
          name = name.toUpperCase();
          inPort.port = inPort.port.toUpperCase();
          output += "INPORT=" + process + "." + inPort.port + ":" + name + "\n";
        }
        ref1 = input.outports;
        for (name in ref1) {
          outPort = ref1[name];
          process = getInOutName(name, inPort);
          name = name.toUpperCase();
          outPort.port = outPort.port.toUpperCase();
          output += "OUTPORT=" + process + "." + outPort.port + ":" + name + "\n";
        }
        output += "\n";
        ref2 = input.connections;
        for (i = 0, len = ref2.length; i < len; i++) {
          conn = ref2[i];
          if (conn.data != null) {
            tgtPort = conn.tgt.port.toUpperCase();
            tgtName = conn.tgt.process;
            tgtProcess = input.processes[tgtName].component;
            tgt = getName(tgtName);
            if (indexOf.call(namedComponents, tgtProcess) < 0) {
              tgt += "(" + tgtProcess + ")";
              namedComponents.push(tgtProcess);
            }
            output += '"' + conn.data + '"' + (" -> " + tgtPort + " " + tgt + "\n");
          } else {
            srcPort = conn.src.port.toUpperCase();
            srcName = conn.src.process;
            srcProcess = input.processes[srcName].component;
            src = getName(srcName);
            if (indexOf.call(namedComponents, srcProcess) < 0) {
              src += "(" + srcProcess + ")";
              namedComponents.push(srcProcess);
            }
            tgtPort = conn.tgt.port.toUpperCase();
            tgtName = conn.tgt.process;
            tgtProcess = input.processes[tgtName].component;
            tgt = getName(tgtName);
            if (indexOf.call(namedComponents, tgtProcess) < 0) {
              tgt += "(" + tgtProcess + ")";
              namedComponents.push(tgtProcess);
            }
            output += src + " " + srcPort + " -> " + tgtPort + " " + tgt + "\n";
          }
        }
        return output;
      };

      parser.addNode = function (nodeName, comp) {
        if (!nodes[nodeName]) {
          nodes[nodeName] = {}
        }
        if (!!comp.comp) {
          nodes[nodeName].component = comp.comp;
        }
        if (!!comp.meta) {
          var metadata = {};
          for (var i = 0; i < comp.meta.length; i++) {
            var item = comp.meta[i].split('=');
            if (item.length === 1) {
              item = ['routes', item[0]];
            }
            var key = item[0];
            var value = item[1];
            if (key==='x' || key==='y') {
              value = parseFloat(value);
            }
            metadata[key] = value;
          }
          nodes[nodeName].metadata=metadata;
        }

      }

      var anonymousIndexes = {};
      var anonymousNodeNames = {};
      parser.addAnonymousNode = function(comp, offset) {
          if (!anonymousNodeNames[offset]) {
              var componentName = comp.comp.replace(/[^a-zA-Z0-9]+/, "_");
              anonymousIndexes[componentName] = (anonymousIndexes[componentName] || 0) + 1;
              anonymousNodeNames[offset] = "_" + componentName + "_" + anonymousIndexes[componentName];
              this.addNode(anonymousNodeNames[offset], comp);
          }
          return anonymousNodeNames[offset];
      }

      parser.getResult = function () {
        var result = {
          processes: nodes,
          connections: parser.processEdges(),
          exports: parser.exports,
          inports: parser.inports,
          outports: parser.outports
        };

        var validateSchema = parser.validateSchema; // default
        if (typeof(options.validateSchema) !== 'undefined') { validateSchema = options.validateSchema; } // explicit option
        if (validateSchema) {
          if (typeof(tv4) === 'undefined') {
            var tv4 = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tv4\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
          }
          var schema = __webpack_require__(53);
          var validation = tv4.validateMultiple(result, schema);
          if (!validation.valid) {
            throw new Error("fbp: Did not validate againt graph schema:\n" + JSON.stringify(validation.errors, null, 2));
          }
        }
        result.caseSensitive = options.caseSensitive;
        return result;
      }

      var flatten = function (array, isShallow) {
        var index = -1,
          length = array ? array.length : 0,
          result = [];

        while (++index < length) {
          var value = array[index];

          if (value instanceof Array) {
            Array.prototype.push.apply(result, isShallow ? value : flatten(value));
          }
          else {
            result.push(value);
          }
        }
        return result;
      }

      parser.registerExports = function (priv, pub) {
        if (!parser.exports) {
          parser.exports = [];
        }

        if (!options.caseSensitive) {
          priv = priv.toLowerCase();
          pub = pub.toLowerCase();
        }

        parser.exports.push({private:priv, public:pub});
      }
      parser.registerInports = function (node, port, pub) {
        if (!parser.inports) {
          parser.inports = {};
        }

        if (!options.caseSensitive) {
          pub = pub.toLowerCase();
          port = port.toLowerCase();
        }

        parser.inports[pub] = {process:node, port:port};
      }
      parser.registerOutports = function (node, port, pub) {
        if (!parser.outports) {
          parser.outports = {};
        }

        if (!options.caseSensitive) {
          pub = pub.toLowerCase();
          port = port.toLowerCase();
        }

        parser.outports[pub] = {process:node, port:port};
      }

      parser.registerEdges = function (edges) {
        if (Array.isArray(edges)) {
          edges.forEach(function (o, i) {
            parser.edges.push(o);
          });
        }
      }

      parser.processEdges = function () {
        var flats, grouped;
        flats = flatten(parser.edges);
        grouped = [];
        var current = {};
        for (var i = 1; i < flats.length; i += 1) {
            // skip over default ports at the beginning of lines (could also handle this in grammar)
            if (("src" in flats[i - 1] || "data" in flats[i - 1]) && "tgt" in flats[i]) {
                flats[i - 1].tgt = flats[i].tgt;
                grouped.push(flats[i - 1]);
                i++;
            }
        }
        return grouped;
      }

      function makeName(s) {
        return s[0] + s[1].join("");
      }

      function makePort(process, port, defaultPort) {
        if (!options.caseSensitive) {
          defaultPort = defaultPort.toLowerCase()
        }
        var p = {
            process: process,
            port: port ? port.port : defaultPort
        };
        if (port && port.index != null) {
            p.index = port.index;
        }
        return p;
    }

      function makeInPort(process, port) {
          return makePort(process, port, defaultInPort);
      }
      function makeOutPort(process, port) {
          return makePort(process, port, defaultOutPort);
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/draft-04/schema","id":"graph.json","title":"FBP graph","description":"A graph of FBP processes and connections between them.\nThis is the primary way of specifying FBP programs.\n","name":"graph","type":"object","additionalProperties":false,"properties":{"properties":{"type":"object","description":"User-defined properties attached to the graph.","additionalProperties":true,"properties":{"name":{"type":"string"}}},"inports":{"type":["object","undefined"],"description":"Exported inports of the graph","additionalProperties":true,"patternProperties":{"[a-z0-9]+":{"type":"object","properties":{"process":{"type":"string"},"port":{"type":"string"},"metadata":{"type":"object","additionalProperties":true}}}}},"outports":{"type":["object","undefined"],"description":"Exported outports of the graph","additionalProperties":true,"patternProperties":{"[a-z0-9]+":{"type":"object","properties":{"process":{"type":"string"},"port":{"type":"string"},"metadata":{"type":"object","additionalProperties":true}}}}},"exports":{"type":["array","undefined"],"description":"Deprecated, use inports and outports instead"},"groups":{"type":"array","description":"List of groups of processes","items":{"type":"object","additionalProperties":false,"properties":{"name":{"type":"string"},"nodes":{"type":"array","items":{"type":"string"}},"metadata":{"additionalProperties":true}}}},"processes":{"type":"object","description":"The processes of this graph.\nEach process is an instance of a component.\n","additionalProperties":false,"patternProperties":{"[a-zA-Z0-9_]+":{"type":"object","properties":{"component":{"type":"string"},"metadata":{"type":"object","additionalProperties":true}}}}},"connections":{"type":"array","description":"Connections of the graph.\nA connection either connects ports of two processes, or specifices an IIP as initial input packet to a port.\n","items":{"type":"object","additionalProperties":false,"properties":{"src":{"type":"object","additionalProperties":false,"properties":{"process":{"type":"string"},"port":{"type":"string"},"index":{"type":"integer"}}},"tgt":{"type":"object","additionalProperties":false,"properties":{"process":{"type":"string"},"port":{"type":"string"},"index":{"type":"integer"}}},"data":{},"metadata":{"type":"object","additionalProperties":true}}}}}}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var EventEmitter, Journal, JournalStore, MemoryJournalStore, calculateMeta, clone, entryToPrettyString,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EventEmitter = __webpack_require__(4).EventEmitter;

  clone = __webpack_require__(22);

  entryToPrettyString = function(entry) {
    var a;
    a = entry.args;
    switch (entry.cmd) {
      case 'addNode':
        return a.id + "(" + a.component + ")";
      case 'removeNode':
        return "DEL " + a.id + "(" + a.component + ")";
      case 'renameNode':
        return "RENAME " + a.oldId + " " + a.newId;
      case 'changeNode':
        return "META " + a.id;
      case 'addEdge':
        return a.from.node + " " + a.from.port + " -> " + a.to.port + " " + a.to.node;
      case 'removeEdge':
        return a.from.node + " " + a.from.port + " -X> " + a.to.port + " " + a.to.node;
      case 'changeEdge':
        return "META " + a.from.node + " " + a.from.port + " -> " + a.to.port + " " + a.to.node;
      case 'addInitial':
        return "'" + a.from.data + "' -> " + a.to.port + " " + a.to.node;
      case 'removeInitial':
        return "'" + a.from.data + "' -X> " + a.to.port + " " + a.to.node;
      case 'startTransaction':
        return ">>> " + entry.rev + ": " + a.id;
      case 'endTransaction':
        return "<<< " + entry.rev + ": " + a.id;
      case 'changeProperties':
        return "PROPERTIES";
      case 'addGroup':
        return "GROUP " + a.name;
      case 'renameGroup':
        return "RENAME GROUP " + a.oldName + " " + a.newName;
      case 'removeGroup':
        return "DEL GROUP " + a.name;
      case 'changeGroup':
        return "META GROUP " + a.name;
      case 'addInport':
        return "INPORT " + a.name;
      case 'removeInport':
        return "DEL INPORT " + a.name;
      case 'renameInport':
        return "RENAME INPORT " + a.oldId + " " + a.newId;
      case 'changeInport':
        return "META INPORT " + a.name;
      case 'addOutport':
        return "OUTPORT " + a.name;
      case 'removeOutport':
        return "DEL OUTPORT " + a.name;
      case 'renameOutport':
        return "RENAME OUTPORT " + a.oldId + " " + a.newId;
      case 'changeOutport':
        return "META OUTPORT " + a.name;
      default:
        throw new Error("Unknown journal entry: " + entry.cmd);
    }
  };

  calculateMeta = function(oldMeta, newMeta) {
    var k, setMeta, v;
    setMeta = {};
    for (k in oldMeta) {
      v = oldMeta[k];
      setMeta[k] = null;
    }
    for (k in newMeta) {
      v = newMeta[k];
      setMeta[k] = v;
    }
    return setMeta;
  };

  JournalStore = (function(superClass) {
    extend(JournalStore, superClass);

    JournalStore.prototype.lastRevision = 0;

    function JournalStore(graph1) {
      this.graph = graph1;
      this.lastRevision = 0;
    }

    JournalStore.prototype.putTransaction = function(revId, entries) {
      if (revId > this.lastRevision) {
        this.lastRevision = revId;
      }
      return this.emit('transaction', revId);
    };

    JournalStore.prototype.fetchTransaction = function(revId, entries) {};

    return JournalStore;

  })(EventEmitter);

  MemoryJournalStore = (function(superClass) {
    extend(MemoryJournalStore, superClass);

    function MemoryJournalStore(graph) {
      MemoryJournalStore.__super__.constructor.call(this, graph);
      this.transactions = [];
    }

    MemoryJournalStore.prototype.putTransaction = function(revId, entries) {
      MemoryJournalStore.__super__.putTransaction.call(this, revId, entries);
      return this.transactions[revId] = entries;
    };

    MemoryJournalStore.prototype.fetchTransaction = function(revId) {
      return this.transactions[revId];
    };

    return MemoryJournalStore;

  })(JournalStore);

  Journal = (function(superClass) {
    extend(Journal, superClass);

    Journal.prototype.graph = null;

    Journal.prototype.entries = [];

    Journal.prototype.subscribed = true;

    function Journal(graph, metadata, store) {
      this.endTransaction = bind(this.endTransaction, this);
      this.startTransaction = bind(this.startTransaction, this);
      var edge, group, iip, j, k, l, len, len1, len2, len3, m, n, node, ref, ref1, ref2, ref3, ref4, ref5, v;
      this.graph = graph;
      this.entries = [];
      this.subscribed = true;
      this.store = store || new MemoryJournalStore(this.graph);
      if (this.store.transactions.length === 0) {
        this.currentRevision = -1;
        this.startTransaction('initial', metadata);
        ref = this.graph.nodes;
        for (j = 0, len = ref.length; j < len; j++) {
          node = ref[j];
          this.appendCommand('addNode', node);
        }
        ref1 = this.graph.edges;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          edge = ref1[l];
          this.appendCommand('addEdge', edge);
        }
        ref2 = this.graph.initializers;
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          iip = ref2[m];
          this.appendCommand('addInitial', iip);
        }
        if (Object.keys(this.graph.properties).length > 0) {
          this.appendCommand('changeProperties', this.graph.properties, {});
        }
        ref3 = this.graph.inports;
        for (k in ref3) {
          v = ref3[k];
          this.appendCommand('addInport', {
            name: k,
            port: v
          });
        }
        ref4 = this.graph.outports;
        for (k in ref4) {
          v = ref4[k];
          this.appendCommand('addOutport', {
            name: k,
            port: v
          });
        }
        ref5 = this.graph.groups;
        for (n = 0, len3 = ref5.length; n < len3; n++) {
          group = ref5[n];
          this.appendCommand('addGroup', group);
        }
        this.endTransaction('initial', metadata);
      } else {
        this.currentRevision = this.store.lastRevision;
      }
      this.graph.on('addNode', (function(_this) {
        return function(node) {
          return _this.appendCommand('addNode', node);
        };
      })(this));
      this.graph.on('removeNode', (function(_this) {
        return function(node) {
          return _this.appendCommand('removeNode', node);
        };
      })(this));
      this.graph.on('renameNode', (function(_this) {
        return function(oldId, newId) {
          var args;
          args = {
            oldId: oldId,
            newId: newId
          };
          return _this.appendCommand('renameNode', args);
        };
      })(this));
      this.graph.on('changeNode', (function(_this) {
        return function(node, oldMeta) {
          return _this.appendCommand('changeNode', {
            id: node.id,
            "new": node.metadata,
            old: oldMeta
          });
        };
      })(this));
      this.graph.on('addEdge', (function(_this) {
        return function(edge) {
          return _this.appendCommand('addEdge', edge);
        };
      })(this));
      this.graph.on('removeEdge', (function(_this) {
        return function(edge) {
          return _this.appendCommand('removeEdge', edge);
        };
      })(this));
      this.graph.on('changeEdge', (function(_this) {
        return function(edge, oldMeta) {
          return _this.appendCommand('changeEdge', {
            from: edge.from,
            to: edge.to,
            "new": edge.metadata,
            old: oldMeta
          });
        };
      })(this));
      this.graph.on('addInitial', (function(_this) {
        return function(iip) {
          return _this.appendCommand('addInitial', iip);
        };
      })(this));
      this.graph.on('removeInitial', (function(_this) {
        return function(iip) {
          return _this.appendCommand('removeInitial', iip);
        };
      })(this));
      this.graph.on('changeProperties', (function(_this) {
        return function(newProps, oldProps) {
          return _this.appendCommand('changeProperties', {
            "new": newProps,
            old: oldProps
          });
        };
      })(this));
      this.graph.on('addGroup', (function(_this) {
        return function(group) {
          return _this.appendCommand('addGroup', group);
        };
      })(this));
      this.graph.on('renameGroup', (function(_this) {
        return function(oldName, newName) {
          return _this.appendCommand('renameGroup', {
            oldName: oldName,
            newName: newName
          });
        };
      })(this));
      this.graph.on('removeGroup', (function(_this) {
        return function(group) {
          return _this.appendCommand('removeGroup', group);
        };
      })(this));
      this.graph.on('changeGroup', (function(_this) {
        return function(group, oldMeta) {
          return _this.appendCommand('changeGroup', {
            name: group.name,
            "new": group.metadata,
            old: oldMeta
          });
        };
      })(this));
      this.graph.on('addExport', (function(_this) {
        return function(exported) {
          return _this.appendCommand('addExport', exported);
        };
      })(this));
      this.graph.on('removeExport', (function(_this) {
        return function(exported) {
          return _this.appendCommand('removeExport', exported);
        };
      })(this));
      this.graph.on('addInport', (function(_this) {
        return function(name, port) {
          return _this.appendCommand('addInport', {
            name: name,
            port: port
          });
        };
      })(this));
      this.graph.on('removeInport', (function(_this) {
        return function(name, port) {
          return _this.appendCommand('removeInport', {
            name: name,
            port: port
          });
        };
      })(this));
      this.graph.on('renameInport', (function(_this) {
        return function(oldId, newId) {
          return _this.appendCommand('renameInport', {
            oldId: oldId,
            newId: newId
          });
        };
      })(this));
      this.graph.on('changeInport', (function(_this) {
        return function(name, port, oldMeta) {
          return _this.appendCommand('changeInport', {
            name: name,
            "new": port.metadata,
            old: oldMeta
          });
        };
      })(this));
      this.graph.on('addOutport', (function(_this) {
        return function(name, port) {
          return _this.appendCommand('addOutport', {
            name: name,
            port: port
          });
        };
      })(this));
      this.graph.on('removeOutport', (function(_this) {
        return function(name, port) {
          return _this.appendCommand('removeOutport', {
            name: name,
            port: port
          });
        };
      })(this));
      this.graph.on('renameOutport', (function(_this) {
        return function(oldId, newId) {
          return _this.appendCommand('renameOutport', {
            oldId: oldId,
            newId: newId
          });
        };
      })(this));
      this.graph.on('changeOutport', (function(_this) {
        return function(name, port, oldMeta) {
          return _this.appendCommand('changeOutport', {
            name: name,
            "new": port.metadata,
            old: oldMeta
          });
        };
      })(this));
      this.graph.on('startTransaction', (function(_this) {
        return function(id, meta) {
          return _this.startTransaction(id, meta);
        };
      })(this));
      this.graph.on('endTransaction', (function(_this) {
        return function(id, meta) {
          return _this.endTransaction(id, meta);
        };
      })(this));
    }

    Journal.prototype.startTransaction = function(id, meta) {
      if (!this.subscribed) {
        return;
      }
      if (this.entries.length > 0) {
        throw Error("Inconsistent @entries");
      }
      this.currentRevision++;
      return this.appendCommand('startTransaction', {
        id: id,
        metadata: meta
      }, this.currentRevision);
    };

    Journal.prototype.endTransaction = function(id, meta) {
      if (!this.subscribed) {
        return;
      }
      this.appendCommand('endTransaction', {
        id: id,
        metadata: meta
      }, this.currentRevision);
      this.store.putTransaction(this.currentRevision, this.entries);
      return this.entries = [];
    };

    Journal.prototype.appendCommand = function(cmd, args, rev) {
      var entry;
      if (!this.subscribed) {
        return;
      }
      entry = {
        cmd: cmd,
        args: clone(args)
      };
      if (rev != null) {
        entry.rev = rev;
      }
      return this.entries.push(entry);
    };

    Journal.prototype.executeEntry = function(entry) {
      var a;
      a = entry.args;
      switch (entry.cmd) {
        case 'addNode':
          return this.graph.addNode(a.id, a.component);
        case 'removeNode':
          return this.graph.removeNode(a.id);
        case 'renameNode':
          return this.graph.renameNode(a.oldId, a.newId);
        case 'changeNode':
          return this.graph.setNodeMetadata(a.id, calculateMeta(a.old, a["new"]));
        case 'addEdge':
          return this.graph.addEdge(a.from.node, a.from.port, a.to.node, a.to.port);
        case 'removeEdge':
          return this.graph.removeEdge(a.from.node, a.from.port, a.to.node, a.to.port);
        case 'changeEdge':
          return this.graph.setEdgeMetadata(a.from.node, a.from.port, a.to.node, a.to.port, calculateMeta(a.old, a["new"]));
        case 'addInitial':
          return this.graph.addInitial(a.from.data, a.to.node, a.to.port);
        case 'removeInitial':
          return this.graph.removeInitial(a.to.node, a.to.port);
        case 'startTransaction':
          return null;
        case 'endTransaction':
          return null;
        case 'changeProperties':
          return this.graph.setProperties(a["new"]);
        case 'addGroup':
          return this.graph.addGroup(a.name, a.nodes, a.metadata);
        case 'renameGroup':
          return this.graph.renameGroup(a.oldName, a.newName);
        case 'removeGroup':
          return this.graph.removeGroup(a.name);
        case 'changeGroup':
          return this.graph.setGroupMetadata(a.name, calculateMeta(a.old, a["new"]));
        case 'addInport':
          return this.graph.addInport(a.name, a.port.process, a.port.port, a.port.metadata);
        case 'removeInport':
          return this.graph.removeInport(a.name);
        case 'renameInport':
          return this.graph.renameInport(a.oldId, a.newId);
        case 'changeInport':
          return this.graph.setInportMetadata(a.name, calculateMeta(a.old, a["new"]));
        case 'addOutport':
          return this.graph.addOutport(a.name, a.port.process, a.port.port, a.port.metadata(a.name));
        case 'removeOutport':
          return this.graph.removeOutport;
        case 'renameOutport':
          return this.graph.renameOutport(a.oldId, a.newId);
        case 'changeOutport':
          return this.graph.setOutportMetadata(a.name, calculateMeta(a.old, a["new"]));
        default:
          throw new Error("Unknown journal entry: " + entry.cmd);
      }
    };

    Journal.prototype.executeEntryInversed = function(entry) {
      var a;
      a = entry.args;
      switch (entry.cmd) {
        case 'addNode':
          return this.graph.removeNode(a.id);
        case 'removeNode':
          return this.graph.addNode(a.id, a.component);
        case 'renameNode':
          return this.graph.renameNode(a.newId, a.oldId);
        case 'changeNode':
          return this.graph.setNodeMetadata(a.id, calculateMeta(a["new"], a.old));
        case 'addEdge':
          return this.graph.removeEdge(a.from.node, a.from.port, a.to.node, a.to.port);
        case 'removeEdge':
          return this.graph.addEdge(a.from.node, a.from.port, a.to.node, a.to.port);
        case 'changeEdge':
          return this.graph.setEdgeMetadata(a.from.node, a.from.port, a.to.node, a.to.port, calculateMeta(a["new"], a.old));
        case 'addInitial':
          return this.graph.removeInitial(a.to.node, a.to.port);
        case 'removeInitial':
          return this.graph.addInitial(a.from.data, a.to.node, a.to.port);
        case 'startTransaction':
          return null;
        case 'endTransaction':
          return null;
        case 'changeProperties':
          return this.graph.setProperties(a.old);
        case 'addGroup':
          return this.graph.removeGroup(a.name);
        case 'renameGroup':
          return this.graph.renameGroup(a.newName, a.oldName);
        case 'removeGroup':
          return this.graph.addGroup(a.name, a.nodes, a.metadata);
        case 'changeGroup':
          return this.graph.setGroupMetadata(a.name, calculateMeta(a["new"], a.old));
        case 'addInport':
          return this.graph.removeInport(a.name);
        case 'removeInport':
          return this.graph.addInport(a.name, a.port.process, a.port.port, a.port.metadata);
        case 'renameInport':
          return this.graph.renameInport(a.newId, a.oldId);
        case 'changeInport':
          return this.graph.setInportMetadata(a.name, calculateMeta(a["new"], a.old));
        case 'addOutport':
          return this.graph.removeOutport(a.name);
        case 'removeOutport':
          return this.graph.addOutport(a.name, a.port.process, a.port.port, a.port.metadata);
        case 'renameOutport':
          return this.graph.renameOutport(a.newId, a.oldId);
        case 'changeOutport':
          return this.graph.setOutportMetadata(a.name, calculateMeta(a["new"], a.old));
        default:
          throw new Error("Unknown journal entry: " + entry.cmd);
      }
    };

    Journal.prototype.moveToRevision = function(revId) {
      var entries, entry, i, j, l, len, m, n, r, ref, ref1, ref2, ref3, ref4, ref5;
      if (revId === this.currentRevision) {
        return;
      }
      this.subscribed = false;
      if (revId > this.currentRevision) {
        for (r = j = ref = this.currentRevision + 1, ref1 = revId; ref <= ref1 ? j <= ref1 : j >= ref1; r = ref <= ref1 ? ++j : --j) {
          ref2 = this.store.fetchTransaction(r);
          for (l = 0, len = ref2.length; l < len; l++) {
            entry = ref2[l];
            this.executeEntry(entry);
          }
        }
      } else {
        for (r = m = ref3 = this.currentRevision, ref4 = revId + 1; m >= ref4; r = m += -1) {
          entries = this.store.fetchTransaction(r);
          for (i = n = ref5 = entries.length - 1; n >= 0; i = n += -1) {
            this.executeEntryInversed(entries[i]);
          }
        }
      }
      this.currentRevision = revId;
      return this.subscribed = true;
    };

    Journal.prototype.undo = function() {
      if (!this.canUndo()) {
        return;
      }
      return this.moveToRevision(this.currentRevision - 1);
    };

    Journal.prototype.canUndo = function() {
      return this.currentRevision > 0;
    };

    Journal.prototype.redo = function() {
      if (!this.canRedo()) {
        return;
      }
      return this.moveToRevision(this.currentRevision + 1);
    };

    Journal.prototype.canRedo = function() {
      return this.currentRevision < this.store.lastRevision;
    };

    Journal.prototype.toPrettyString = function(startRev, endRev) {
      var e, entry, j, l, len, lines, r, ref, ref1;
      startRev |= 0;
      endRev |= this.store.lastRevision;
      lines = [];
      for (r = j = ref = startRev, ref1 = endRev; ref <= ref1 ? j < ref1 : j > ref1; r = ref <= ref1 ? ++j : --j) {
        e = this.store.fetchTransaction(r);
        for (l = 0, len = e.length; l < len; l++) {
          entry = e[l];
          lines.push(entryToPrettyString(entry));
        }
      }
      return lines.join('\n');
    };

    Journal.prototype.toJSON = function(startRev, endRev) {
      var entries, entry, j, l, len, r, ref, ref1, ref2;
      startRev |= 0;
      endRev |= this.store.lastRevision;
      entries = [];
      for (r = j = ref = startRev, ref1 = endRev; j < ref1; r = j += 1) {
        ref2 = this.store.fetchTransaction(r);
        for (l = 0, len = ref2.length; l < len; l++) {
          entry = ref2[l];
          entries.push(entryToPrettyString(entry));
        }
      }
      return entries;
    };

    Journal.prototype.save = function(file, success) {
      var json;
      json = JSON.stringify(this.toJSON(), null, 4);
      return __webpack_require__(6).writeFile(file + ".json", json, "utf-8", function(err, data) {
        if (err) {
          throw err;
        }
        return success(file);
      });
    };

    return Journal;

  })(EventEmitter);

  exports.Journal = Journal;

  exports.JournalStore = JournalStore;

  exports.MemoryJournalStore = MemoryJournalStore;

}).call(this);


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var registerCustomLoaders = function (loader, loaders, callback) {
  if (!loaders.length) {
    return callback();
  }
  var customLoader = loaders.shift();
  loader.registerLoader(customLoader, function (err) {
    if (err) {
      return callback(err);
    }
    registerCustomLoaders(loader, loaders, callback);
  });
};

var sources = {
  "Graph": {"language":"javascript","source":"(function() {\n  var Graph, noflo,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  noflo = require(\"../lib/NoFlo\");\n\n  Graph = (function(superClass) {\n    extend(Graph, superClass);\n\n    function Graph(metadata1) {\n      this.metadata = metadata1;\n      this.network = null;\n      this.ready = true;\n      this.started = false;\n      this.starting = false;\n      this.baseDir = null;\n      this.loader = null;\n      this.load = 0;\n      this.inPorts = new noflo.InPorts({\n        graph: {\n          datatype: 'all',\n          description: 'NoFlo graph definition to be used with the subgraph component',\n          required: true\n        }\n      });\n      this.outPorts = new noflo.OutPorts;\n      this.inPorts.graph.on('ip', (function(_this) {\n        return function(packet) {\n          if (packet.type !== 'data') {\n            return;\n          }\n          return _this.setGraph(packet.data, function(err) {\n            if (err) {\n              return _this.error(err);\n            }\n          });\n        };\n      })(this));\n    }\n\n    Graph.prototype.setGraph = function(graph, callback) {\n      this.ready = false;\n      if (typeof graph === 'object') {\n        if (typeof graph.addNode === 'function') {\n          this.createNetwork(graph, callback);\n          return;\n        }\n        noflo.graph.loadJSON(graph, (function(_this) {\n          return function(err, instance) {\n            if (err) {\n              return callback(err);\n            }\n            instance.baseDir = _this.baseDir;\n            return _this.createNetwork(instance, callback);\n          };\n        })(this));\n        return;\n      }\n      if (graph.substr(0, 1) !== \"/\" && graph.substr(1, 1) !== \":\" && process && process.cwd) {\n        graph = (process.cwd()) + \"/\" + graph;\n      }\n      return noflo.graph.loadFile(graph, (function(_this) {\n        return function(err, instance) {\n          if (err) {\n            return callback(err);\n          }\n          instance.baseDir = _this.baseDir;\n          return _this.createNetwork(instance, callback);\n        };\n      })(this));\n    };\n\n    Graph.prototype.createNetwork = function(graph, callback) {\n      this.description = graph.properties.description || '';\n      this.icon = graph.properties.icon || this.icon;\n      if (!graph.name) {\n        graph.name = this.nodeId;\n      }\n      graph.componentLoader = this.loader;\n      return noflo.createNetwork(graph, (function(_this) {\n        return function(err, network1) {\n          _this.network = network1;\n          if (err) {\n            return callback(err);\n          }\n          _this.emit('network', _this.network);\n          _this.subscribeNetwork(_this.network);\n          return _this.network.connect(function(err) {\n            var name, node, ref;\n            if (err) {\n              return callback(err);\n            }\n            ref = _this.network.processes;\n            for (name in ref) {\n              node = ref[name];\n              _this.findEdgePorts(name, node);\n            }\n            _this.setToReady();\n            return callback();\n          });\n        };\n      })(this), true);\n    };\n\n    Graph.prototype.subscribeNetwork = function(network) {\n      var contexts;\n      contexts = [];\n      this.network.on('start', (function(_this) {\n        return function() {\n          var ctx;\n          ctx = {};\n          contexts.push(ctx);\n          return _this.activate(ctx);\n        };\n      })(this));\n      return this.network.on('end', (function(_this) {\n        return function() {\n          var ctx;\n          ctx = contexts.pop();\n          if (!ctx) {\n            return;\n          }\n          return _this.deactivate(ctx);\n        };\n      })(this));\n    };\n\n    Graph.prototype.isExportedInport = function(port, nodeName, portName) {\n      var exported, i, len, priv, pub, ref, ref1;\n      ref = this.network.graph.inports;\n      for (pub in ref) {\n        priv = ref[pub];\n        if (!(priv.process === nodeName && priv.port === portName)) {\n          continue;\n        }\n        return pub;\n      }\n      ref1 = this.network.graph.exports;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        exported = ref1[i];\n        if (!(exported.process === nodeName && exported.port === portName)) {\n          continue;\n        }\n        this.network.graph.checkTransactionStart();\n        this.network.graph.removeExport(exported[\"public\"]);\n        this.network.graph.addInport(exported[\"public\"], exported.process, exported.port, exported.metadata);\n        this.network.graph.checkTransactionEnd();\n        return exported[\"public\"];\n      }\n      return false;\n    };\n\n    Graph.prototype.isExportedOutport = function(port, nodeName, portName) {\n      var exported, i, len, priv, pub, ref, ref1;\n      ref = this.network.graph.outports;\n      for (pub in ref) {\n        priv = ref[pub];\n        if (!(priv.process === nodeName && priv.port === portName)) {\n          continue;\n        }\n        return pub;\n      }\n      ref1 = this.network.graph.exports;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        exported = ref1[i];\n        if (!(exported.process === nodeName && exported.port === portName)) {\n          continue;\n        }\n        this.network.graph.checkTransactionStart();\n        this.network.graph.removeExport(exported[\"public\"]);\n        this.network.graph.addOutport(exported[\"public\"], exported.process, exported.port, exported.metadata);\n        this.network.graph.checkTransactionEnd();\n        return exported[\"public\"];\n      }\n      return false;\n    };\n\n    Graph.prototype.setToReady = function() {\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick((function(_this) {\n          return function() {\n            _this.ready = true;\n            return _this.emit('ready');\n          };\n        })(this));\n      } else {\n        return setTimeout((function(_this) {\n          return function() {\n            _this.ready = true;\n            return _this.emit('ready');\n          };\n        })(this), 0);\n      }\n    };\n\n    Graph.prototype.findEdgePorts = function(name, process) {\n      var inPorts, outPorts, port, portName, targetPortName;\n      inPorts = process.component.inPorts.ports || process.component.inPorts;\n      outPorts = process.component.outPorts.ports || process.component.outPorts;\n      for (portName in inPorts) {\n        port = inPorts[portName];\n        targetPortName = this.isExportedInport(port, name, portName);\n        if (targetPortName === false) {\n          continue;\n        }\n        this.inPorts.add(targetPortName, port);\n        this.inPorts[targetPortName].once('connect', (function(_this) {\n          return function() {\n            if (_this.starting) {\n              return;\n            }\n            if (_this.isStarted()) {\n              return;\n            }\n            return _this.start(function() {});\n          };\n        })(this));\n      }\n      for (portName in outPorts) {\n        port = outPorts[portName];\n        targetPortName = this.isExportedOutport(port, name, portName);\n        if (targetPortName === false) {\n          continue;\n        }\n        this.outPorts.add(targetPortName, port);\n      }\n      return true;\n    };\n\n    Graph.prototype.isReady = function() {\n      return this.ready;\n    };\n\n    Graph.prototype.isSubgraph = function() {\n      return true;\n    };\n\n    Graph.prototype.setUp = function(callback) {\n      this.starting = true;\n      if (!this.isReady()) {\n        this.once('ready', (function(_this) {\n          return function() {\n            return _this.setUp(callback);\n          };\n        })(this));\n        return;\n      }\n      if (!this.network) {\n        return callback(null);\n      }\n      return this.network.start(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        this.starting = false;\n        return callback();\n      });\n    };\n\n    Graph.prototype.tearDown = function(callback) {\n      this.starting = false;\n      if (!this.network) {\n        return callback(null);\n      }\n      return this.network.stop(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback();\n      });\n    };\n\n    return Graph;\n\n  })(noflo.Component);\n\n  exports.getComponent = function(metadata) {\n    return new Graph(metadata);\n  };\n\n}).call(this);\n"},
  "adapters/ObjectToPackets": {"language":"coffeescript","source":"_ = require \"underscore\"\nnoflo = require \"noflo\"\nowl = require \"owl-deepcopy\"\n\nconvert = (object, level, output) ->\n  # Deal with data packets\n  if _.isArray object\n    for datum, i in object\n      output.send\n        out: datum\n      delete object[i]\n    # Clean up after deletion\n    object = _.compact object\n\n  # Stop if we've reached deep enough\n  if level <= 0\n    unless _.isEmpty object\n      output.send\n        out: object\n    return\n\n  # Go through the groups\n  for key, value of object\n    output.send\n      out: new noflo.IP 'openBracket', key\n\n    if _.isObject value\n      convert value, level - 1, output\n    else\n      output.send\n        out: value\n\n    output.send\n      out: new noflo.IP 'closeBracket', key\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Convert each incoming object into a stream\"\n  c.icon = 'expand'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Array/Object packets to convert'\n  c.inPorts.add 'depth',\n    datatype: 'int'\n    description: 'Maximum level of recursion when conversion incoming\n     object packet'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    description: 'Inner items from incoming array/objects with associated\n     keys as groups'\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return if input.attached('depth').length and not input.hasData 'depth'\n\n    depth = if input.hasData('depth') then input.getData('depth') else Infinity\n    data = input.getData 'in'\n    if not _.isArray(data) and not _.isObject(data)\n      # Plain value, send as-is\n      output.sendDone\n        out: data\n      return\n\n    # Deep copy because conversion is destructive\n    object = owl.deepCopy data\n    # Send data as a stream\n    output.send\n      out: new noflo.IP 'openBracket', null\n    convert object, depth, output\n    output.send\n      out: new noflo.IP 'closeBracket', null\n    output.done()\n"},
  "adapters/ObjectToString": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'font'\n  c.description = \"stringifies a simple object with configurable associator and\n    delimiter\"\n  c.inPorts.add 'in',\n    datatype: 'object'\n    description: 'Object to convert'\n  c.inPorts.add 'assoc',\n    datatype: 'string'\n    description: 'Associating string for key/value pairs'\n    control: true\n    default: ':'\n  c.inPorts.add 'delim',\n    datatype: 'string'\n    description: 'Delimiter string between object properties'\n    control: true\n    default: ','\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return if input.attached('assoc').length and not input.hasData 'assoc'\n    return if input.attached('delim').length and not input.hasData 'delim'\n\n    assoc = if input.hasData('assoc') then input.getData('assoc') else ':'\n    delim = if input.hasData('delim') then input.getData('delim') else ','\n    data = input.getData 'in'\n\n    str = []\n    for key, value of data\n      if Object::toString.apply(value) isnt \"[object String]\"\n        value = JSON.stringify value\n\n      str.push \"#{key}#{assoc}#{value}\"\n\n    output.sendDone\n      out: str.join delim\n"},
  "adapters/PacketsToArray": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'compress'\n  c.description = \"Merges incoming IPs stream into one array\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'array'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream 'in'\n    level = 0\n    data = []\n    current = data\n    for packet in stream\n      if packet.type is 'openBracket'\n        current = []\n        level++\n      if packet.type is 'data'\n        current.push packet.data\n        continue\n      if packet.type is 'closeBracket'\n        data.push current\n        level--\n    if data.length is 1 and Array.isArray data[0]\n      output.send data[0]\n    else\n      output.send data\n    output.done()\n"},
  "adapters/PacketsToObject": {"language":"coffeescript","source":"noflo = require \"noflo\"\n_ = require \"underscore\"\n\nlocate = (object, groups) ->\n  here = object\n  for group in groups\n    here = here[group]\n  here\n\nobjectify = (object) ->\n  return object unless _.isObject object\n  obj = {}\n  length = object.length\n\n  # If it's not a pure object, drop the array portion\n  if _.keys(object).length > length\n    for own key, value of object\n      unless _.isNumber key\n        obj[key] = objectify value\n  # Otherwise, use the array\n  else\n    obj = object.slice()\n\n  # Return the objectified object\n  obj\n\nexports.getComponent = -> new PacketsToObject\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'compress'\n  c.description = \"Convert the structure of a packet stream into an object\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream 'in'\n    groups = []\n    object = []\n\n    if stream[0].type is 'openBracket'\n      # Remove the surrounding brackets\n      before = stream.shift()\n      after = stream.pop()\n\n    for packet in stream\n      if packet.type is 'openBracket'\n        here = locate object, groups\n        here[packet.data] = []\n        groups.push packet.data\n        continue\n      if packet.type is 'data'\n        here = locate object, groups\n        here.push packet.data\n      if packet.type is 'closeBracket'\n        groups.pop()\n\n    result = objectify object\n    output.sendDone result\n"},
  "adapters/PairsToObject": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Assume packets at odd numbers to be keys and those at\n  even numbers to be values\"\n  c.icon = 'link'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Stream of IPs representing key(odd packets) and\n     value(even packets)'\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream('in').filter (ip) -> ip.type is 'data'\n    count = 0\n    object = {}\n    key = null\n    for packet in stream\n      count++\n      # Even numbers\n      if count % 2 is 0\n        # There's a key that is a string\n        if key?\n          object[key] = packet.data\n          key = null\n        continue\n      # Odd numbers and a string\n      else if typeof packet.data is 'string'\n        key = packet.data\n        continue\n    output.sendDone\n      out: object\n"},
  "adapters/PropertiesToObjects": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'in',\n    datatype: 'object'\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    object = input.getData 'in'\n    data = {}\n    for property, objects of object\n      for id, value of objects\n        data[id] = {} unless data[id]\n        data[id][property] = value\n    output.sendDone\n      out: data\n"},
  "ajax/CorsProxy": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nisExternal = (url) ->\n  return false if url.indexOf('data:') is 0\n  (location.href.replace(\"http://\", \"\").replace(\"https://\", \"\").split(\"/\")[0] isnt url.replace(\"http://\", \"\").replace(\"https://\", \"\").split(\"/\")[0])\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Converts a URL to use a CORS-enabling proxy'\n  c.icon = 'arrow-circle-o-right'\n  c.service = 'http://crossorigin.me/'\n  c.inPorts.add 'in',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    payload = input.getData 'in'\n    unless typeof payload is 'string'\n      return output.done new Error 'String required'\n\n    out = payload\n    if noflo.isBrowser() and isExternal payload\n      match_http = /^(https?):\\/\\//\n      path = payload.replace(match_http, '')\n      out = c.service + path\n    output.sendDone\n      out: out\n"},
  "ajax/Get": {"language":"coffeescript","source":"# @runtime noflo-browser\n\nnoflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'globe'\n  c.description = 'HTTP GET a URL'\n  c.inPorts.add 'url',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    url: ['out', 'error']\n  c.process (input, output) ->\n    return unless input.hasData 'url'\n    url = input.getData 'url'\n\n    req = new XMLHttpRequest\n    req.onreadystatechange = ->\n      return unless req.readyState is 4\n      if req.status is 200\n        output.sendDone\n          out: req.responseText\n        return\n      output.done new Error \"Error loading #{url}\"\n    req.open 'GET', url, true\n    req.send null\n"},
  "ajax/GetJsonP": {"language":"coffeescript","source":"# @runtime noflo-browser\n\nnoflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'globe'\n  c.description = 'Get contents via JSONP from a URL'\n  c.inPorts.add 'url',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    url: ['out', 'error']\n  c.process (input, output) ->\n    return unless input.hasData 'url'\n    url = input.getData 'url'\n\n    # Construct a unique identifier for the callback\n    id = 'noflo'+(Math.random()*100).toString().replace /\\./g, ''\n\n    # Get the body element\n    body = document.querySelector 'body'\n    s = document.createElement 'script'\n    s.onerror = (e) ->\n      delete window[id]\n      body.removeChild s\n      output.done e\n\n    # Register a function with the unique ID\n    window[id] = (data) ->\n      # Cleanup\n      delete window[id]\n      body.removeChild s\n\n      if data and data.meta and data.meta.status is 404\n        return output.done new Error \"#{url} not found}\"\n\n      output.sendDone\n        out: data\n\n    # Prepare a script element\n    s.type = 'application/javascript'\n\n    if url.indexOf('?') is -1\n      url = \"#{url}?callback=?\"\n\n    s.src = url.replace 'callback=?', \"callback=#{id}\"\n\n    # Place the script element into DOM\n    body.appendChild s\n"},
  "amd/Configure": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'dot-circle-o'\n  c.description = 'Configure Require.js'\n  c.inPorts.add 'config',\n    datatype: 'object'\n    description: 'Require.js configuration object'\n  c.outPorts.add 'ready',\n    datatype: 'bang'\n    required: false\n  c.outPorts.add 'error',\n    datatype: 'object'\n    required: false\n\n  noflo.helpers.WirePattern c,\n    in: 'config'\n    out: 'ready'\n    forwardGroups: true\n    async: true\n  , (data, groups, out, callback) ->\n    unless window.requirejs\n      return callback new Error 'Require.js not available'\n      return\n    window.requirejs.config data\n    out.send true\n    callback()\n"},
  "amd/Require": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'dot-circle-o'\n  c.description = 'Load an AMD module'\n\n  c.inPorts.add 'path',\n    datatype: 'string'\n    description: 'Path of the module to load'\n  c.outPorts.add 'module',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n    required: false\n\n  noflo.helpers.WirePattern c,\n    in: 'path'\n    out: 'module'\n    forwardGroups: true\n    async: true\n  , (path, groups, out, callback) ->\n    return callback new Error 'Require.js not available' unless window.requirejs\n    window.requirejs [path], (module) ->\n      out.beginGroup path\n      out.send module\n      out.endGroup path\n      do callback\n    , (err) ->\n      callback err\n"},
  "canvas/ClearRect": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass ClearRect extends noflo.Component\n  description: 'Clear rectangle'\n  icon: 'eraser'\n  constructor: ->\n    ports =\n      point:\n        datatype: 'object'\n        description: 'top left point'\n        required: true\n      width:\n        datatype: 'number'\n        required: true\n      height:\n        datatype: 'number'\n        required: true\n    \n    ArrayableHelper @, 'clearrect', ports\n\nexports.getComponent = -> new ClearRect\n"},
  "canvas/ColorArrayToCss": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Convert a RGB array to a hex value'\n  c.inPorts.add 'in',\n    datatype: 'array'\n  c.outPorts.add 'out',\n    datatype: 'string'\n  \n  hex = (n) ->\n    s = n.toString(16)\n    if s.length is 1\n      s = \"0\"+s\n    return s\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    rgb = input.getData 'in'\n    out = \"#\"+hex(rgb[0])+hex(rgb[1])+hex(rgb[2])\n    output.sendDone\n      out: out\n    return\n"},
  "canvas/Draw": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nTAU = Math.PI * 2\n\nclass DrawCommands\n  constructor: (@context, @canvas) ->\n\n  parse: (commands, clearEvery = false) ->\n    if clearEvery\n      @context.clearRect 0, 0, @canvas.width, @canvas.height\n    @parseThing commands\n\n  # Recursively parse things and arrays of things\n  parseThing: (thing, before, after) =>\n    if thing? and thing.type? and @[thing.type]?\n      if before?\n        before()\n      @[thing.type](thing)\n      if after?\n        after()\n    else if thing instanceof Array\n      for item in thing\n        continue unless item?\n        @parseThing item, before, after\n\n  clearRect: (clearRect) =>\n    x = clearRect.point.x\n    y = clearRect.point.y\n    w = clearRect.width\n    h = clearRect.height\n    @context.clearRect(x, y, w, h)\n\n  strokeStyle: (data) =>\n    @context.strokeStyle = data.value\n\n  lineWidth: (data) =>\n    @context.lineWidth = data.value\n\n  fillStyle: (data) =>\n    @context.fillStyle = data.value\n\n  stroke: (stroke) =>\n    # Cache current style\n    if stroke.strokestyle?\n      oldStyle = @context.strokeStyle\n      @context.strokeStyle = stroke.strokestyle\n    if stroke.linewidth?\n      oldWidth = @context.linewidth\n      @context.lineWidth = stroke.linewidth\n    # Stroke each thing\n    before = ->\n      @context.beginPath()\n    after = ->\n      if stroke.closepath\n        @context.closePath()\n      @context.stroke()\n    @parseThing stroke.items, before.bind(@), after.bind(@)\n    # Restore style\n    if oldStyle?\n      @context.strokeStyle = oldStyle\n    if oldWidth?\n      @context.lineWidth = oldWidth\n\n  fill: (fill) =>\n    # Cache current style\n    if fill.fillstyle?\n      oldStyle = @context.fillStyle\n      @context.fillStyle = fill.fillstyle\n    # Fill each thing\n    before = ->\n      @context.beginPath()\n    after = ->\n      @context.closePath()\n      @context.fill()\n    @parseThing fill.items, before.bind(@), after.bind(@)\n    # Restore style\n    if oldStyle?\n      @context.fillStyle = oldStyle\n\n  bezierCurve: (curve) =>\n    @context.bezierCurveTo(curve.control1.x, curve.control1.y, curve.control2.x, curve.control2.y, curve.end.x, curve.end.y)\n\n  pathItem: (thing, i) =>\n    # Handle arrays of points\n    if thing instanceof Array\n      for child, j in thing\n        @pathItem child, j\n      return\n    if thing.type?\n      switch thing.type\n        when 'point'\n          if i is 0\n            @context.moveTo thing.x, thing.y\n          else\n            @context.lineTo thing.x, thing.y\n        when 'beziercurve'\n          @bezierCurve thing\n        when 'arc'\n          @arc thing\n\n  path: (path) =>\n    # Build the path\n    for thing, i in path.items\n      continue unless thing?\n      @pathItem thing, i\n\n  group: (group) =>\n    # Apply drawing operations\n    for thing in group.groupables\n      continue unless thing? and thing.type? and @[thing.type]?\n      @[thing.type].call @, thing\n\n  transform: (transform, recurse) =>\n    # Apply transformations\n    if transform.translate?\n      @context.translate transform.translate.x, transform.translate.y\n    if transform.rotate?\n      @context.rotate transform.rotate\n    if transform.scaleboth # non-zero\n      @context.scale transform.scaleboth, transform.scaleboth\n    else if transform.scale? and transform.scale.x and transform.scale.y # non-0\n      @context.scale transform.scale.x, transform.scale.y\n    # Apply drawing operations\n    @parseThing transform.items\n    # Recurse\n    if recurse? and recurse > 0\n      @transform transform, recurse-1\n    # Undo transformations\n    if transform.scaleboth # non-zero\n      @context.scale 1/transform.scaleboth, 1/transform.scaleboth\n    else if transform.scale? and transform.scale.x and transform.scale.y # non-0\n      @context.scale 1/transform.scale.x, 1/transform.scale.y\n    if transform.rotate?\n      @context.rotate 0-transform.rotate\n    if transform.translate?\n      @context.translate 0-transform.translate.x, 0-transform.translate.y\n\n  recurse: (recurse) =>\n    for thing in recurse.recursables\n      continue unless thing?\n      if thing.type is 'transform'\n        @transform thing, recurse.count\n\n  rectangle: (rect) =>\n    x = rect.point.x\n    y = rect.point.y\n    w = rect.width\n    h = rect.height\n    @context.moveTo x, y\n    @context.lineTo x+w, y\n    @context.lineTo x+w, y+h\n    @context.lineTo x, y+h\n    @context.lineTo x, y\n\n  fillRect: (fillrect) =>\n    x = fillrect.point.x\n    y = fillrect.point.y\n    w = fillrect.width\n    h = fillrect.height\n    @context.fillRect x, y, w, h\n\n  strokeRect: (strokerect) =>\n    x = strokerect.point.x\n    y = strokerect.point.y\n    w = strokerect.width\n    h = strokerect.height\n    @context.strokeRect x, y, w, h\n\n  arc: (arc) =>\n    @context.arc(arc.center.x, arc.center.y, arc.radius, arc.start, arc.end, arc.reverse)\n\n  circle: (circle) =>\n    @context.arc(circle.center.x, circle.center.y, circle.radius, 0, TAU)\n\n  drawimage: (drawimage) =>\n    return unless drawimage.image?\n    if drawimage.sourcerect? and drawimage.destrect?\n      d = drawimage.destrect\n      s = drawimage.sourcerect\n      @context.drawImage drawimage.image, d.point.x, d.point.y, d.width, d.height, s.point.x, s.point.y, s.width, s.height\n      return\n    if drawimage.destrect?\n      d = drawimage.destrect\n      @context.drawImage drawimage.image, d.point.x, d.point.y, d.width, d.height\n      return\n    if drawimage.destpoint?\n      p = drawimage.destpoint\n      @context.drawImage drawimage.image, p.x, p.y\n      return\n    # Default\n    @context.drawImage drawimage.image, 0, 0\n                  \nexports.getComponent = -> new Draw\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Draws received drawing commands'\n  c.icon = 'pencil'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n    control: true\n  c.inPorts.add 'commands',\n    datatype: 'object'\n    addressable: true\n  c.inPorts.add 'tick',\n    datatype: 'bang'\n  c.inPorts.add 'drawevery',\n    datatype: 'boolean'\n    default: false\n    control: true\n  c.inPorts.add 'clearevery',\n    datatype: 'boolean'\n    default: false\n    control: true\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.scopes = {}\n  c.tearDown = (callback) ->\n    c.scopes = {}\n    do callback\n  ensureScope = (scope, canvas) ->\n    if c.scopes[scope]\n      unless c.scopes[scope].canvas is canvas\n        # Canvas has changed for this context\n        c.scopes[scope].canvas = canvas\n        c.scopes[scope].context = canvas.getContext '2d'\n      return c.scopes[scope]\n    c.scopes[scope] =\n      commands: []\n      context: canvas.getContext '2d'\n      canvas: canvas\n    return c.scopes[scope]\n\n  c.forwardBrackets =\n    tick: ['canvas', 'error']\n  c.process (input, output) ->\n    # We always need a canvas to operate on\n    return unless input.hasData 'canvas'\n    # Check if options are expected\n    return if input.attached('drawevery').length and not input.hasData 'drawevery'\n    return if input.attached('clearevery').length and not input.hasData 'clearevery'\n\n    if input.hasData 'tick'\n      input.getData 'tick'\n      clearEvery = false\n      if input.hasData 'clearevery'\n        clearEvery = input.getData 'clearevery'\n      canvas = input.getData 'canvas'\n      scope = ensureScope input.scope, canvas\n      # Draw all commands out\n      draw = new DrawCommands scope.context, canvas\n      draw.parse scope.commands, clearEvery\n      output.sendDone\n        canvas: canvas\n      return\n\n    # Check if we've received drawing commands\n    indexesWithData = input.attached('commands').filter (idx) ->\n      input.hasData ['commands', idx]\n    return unless indexesWithData.length\n\n    drawEvery = false\n    if input.hasData 'drawevery'\n      drawEvery = input.getData 'drawevery'\n    clearEvery = false\n    if input.hasData 'clearevery'\n      clearEvery = input.getData 'clearevery'\n\n    canvas = input.getData 'canvas'\n    scope = ensureScope input.scope, canvas\n    indexesWithData.forEach (idx) ->\n      # Read commands into scope\n      scope.commands[idx] = input.getData ['commands', idx]\n\n    unless drawEvery\n      # drawevery not enabled, wait for tick\n      output.done()\n      return\n\n    # Draw the list of commands\n    draw = new DrawCommands scope.context, canvas\n    draw.parse scope.commands, clearEvery\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "canvas/DrawImage": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass DrawImage extends noflo.Component\n  description: 'Draws the specified image'\n  icon: 'pencil-square'\n  constructor: ->\n    ports =\n      image:\n        description: 'canvas, img, or video to draw'\n        datatype: 'object'\n        required: true\n      destpoint:\n        description: 'destination point (full size)'\n        datatype: 'object'\n        default:\n          x: 0\n          y: 0\n        required: false\n      destrect:\n        description: 'destination rect, to scale'\n        datatype: 'object'\n        required: false\n      sourcerect:\n        description: 'source rect, to scale'\n        datatype: 'object'\n        required: false\n\n    ArrayableHelper @, 'drawimage', ports\n\nexports.getComponent = -> new DrawImage\n"},
  "canvas/Fill": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Fill extends noflo.Component\n  description: 'Fills the received paths, rectangles, circles, and arcs'\n  icon: 'square'\n  constructor: ->\n    ports =\n      items:\n        datatype: 'object'\n        description: 'shapes (paths, circles, and rectangles) to fill'\n        addressable: true\n        required: true\n      fillstyle:\n        datatype: 'string'\n        description: 'css color string'\n        required: false\n\n    ArrayableHelper @, 'fill', ports\n\nexports.getComponent = -> new Fill\n"},
  "canvas/FillRect": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass FillRect extends noflo.Component\n  description: 'Fills a rectangle'\n  icon: 'pencil-square'\n  constructor: ->\n    ports =\n      point:\n        datatype: 'object'\n        description: 'top left point'\n        required: true\n      width:\n        datatype: 'number'\n        required: true\n      height:\n        datatype: 'number'\n        required: true\n    \n    ArrayableHelper @, 'fillrect', ports\n\n  exports.getComponent = -> new FillRect\n"},
  "canvas/FillStyle": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Sets the global fill style'\n  c.icon = 'pencil-square-o'\n  c.inPorts.add 'style',\n    datatype: 'string'\n  c.outPorts.add 'fillstyle',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'style'\n    fillStyle =\n      type: 'fillStyle'\n      value: input.getData 'style'\n    output.sendDone\n      out: new noflo.IP 'data', fillStyle\n    return\n"},
  "canvas/Group": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Group drawing commands or primatives into a flattened array.'\n  c.icon = 'folder-o'\n  c.inPorts.add 'items',\n    datatype: 'object'\n    addressable: true\n  c.outPorts.add 'group',\n    datatype: 'array'\n  c.process (input, output) ->\n    indexesWithData = input.attached('items').filter (idx) ->\n      input.hasData ['items', idx]\n    return unless indexesWithData.length is input.attached('items').length\n    group = []\n    indexesWithData.forEach (idx) ->\n      data = input.getData ['items', idx]\n      if Array.isArray data\n        group = group.concat data\n        return\n      group.push data\n    output.sendDone\n      group: group\n"},
  "canvas/LineWidth": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Sets the line width'\n  c.icon = 'pencil-square'\n  c.inPorts.add 'width',\n    datatype: 'number'\n  c.outPorts.add 'linewidth',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'width'\n    linewidth =\n      type: 'lineWidth'\n      value: input.getData 'width'\n    output.sendDone\n      out: new noflo.IP 'data', linewidth\n    return\n"},
  "canvas/MakeArc": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeArc extends noflo.Component\n  description: 'Creates an arc or arcs'\n  icon: 'power-off'\n  constructor: ->\n    ports =\n      center:\n        datatype: 'object'\n        description: 'point for center'\n        required: true\n      radius:\n        datatype: 'number'\n        required: true\n      start:\n        datatype: 'number'\n        description: 'start angle in radians'\n        required: true\n      end:\n        datatype: 'number'\n        description: 'end angle in radians'\n        required: true\n      reverse:\n        datatype: 'boolean'\n        required: true\n        default: false\n\n    ArrayableHelper @, 'arc', ports\n\nexports.getComponent = -> new MakeArc"},
  "canvas/MakeBezierCurve": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeBezierCurve extends noflo.Component\n  description: 'Creates a Bezier curve'\n  icon: 'pencil-square'\n  constructor: ->\n    ports =\n      control1:\n        datatype: 'object'\n        type: 'noflo-canvas/point'\n        description: 'control point 1'\n        required: true\n      control2:\n        datatype: 'object'\n        type: 'noflo-canvas/point'\n        description: 'control point 2'\n        required: true\n      end:\n        datatype: 'object'\n        type: 'noflo-canvas/point'\n        description: 'end point'\n        required: true\n\n    ArrayableHelper @, 'beziercurve', ports\n\nexports.getComponent = -> new MakeBezierCurve\n"},
  "canvas/MakeCircle": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeCircle extends noflo.Component\n  description: 'Creates a circle or circles'\n  icon: 'circle-o'\n  constructor: ->\n    ports =\n      center:\n        datatype: 'object'\n        type: 'noflo-canvas/point'\n        description: 'center point'\n        required: true\n      radius:\n        datatype: 'number'\n        required: true\n\n    ArrayableHelper @, 'circle', ports\n\nexports.getComponent = -> new MakeCircle\n"},
  "canvas/MakeColor": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\ncolorToString = (color) ->\n  if color.alpha?\n    return \"hsla(#{color.hue}, #{color.saturation}%, #{color.lightness}%, #{color.alpha})\"\n  return \"hsl(#{color.hue}, #{color.saturation}%, #{color.lightness}%)\"\n\nclass MakeColor extends noflo.Component\n  description: 'Creates HSL or HSLA color or colors'\n  icon: 'tint'\n  constructor: ->\n    ports =\n      hue:\n        datatype: 'number'\n        description: 'from 0 to 360'\n        required: true\n      saturation:\n        datatype: 'number'\n        description: 'from 0 to 100'\n        required: true\n      lightness:\n        datatype: 'number'\n        description: 'from 0 to 100'\n        required: true\n      alpha:\n        datatype: 'number'\n        description: 'from 0 to 1.0'\n        required: false\n\n    compute = (props) =>\n      return unless props.hue? and props.saturation? and props.lightness?\n      color = props\n      if (props.hue instanceof Array or props.saturation instanceof Array or\n      props.lightness instanceof Array or props.alpha instanceof Array)\n        color = @expandToArray props\n        color = color.map colorToString\n      else\n        color = colorToString props\n      return color\n\n    ArrayableHelper @, 'color', ports, {compute}\n\nexports.getComponent = -> new MakeColor\n"},
  "canvas/MakeGrid": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeGrid extends noflo.Component\n  description: 'Creates a grid or line of points'\n  icon: 'crosshairs'\n  constructor: ->\n    ports =\n      x:\n        datatype: 'number'\n        required: true\n      y:\n        datatype: 'number'\n        required: true\n\n    # OVERRIDE default to make x and y dimensional\n    compute = (props) ->\n      return unless props.x? and props.y?\n      # Expand to grid\n      if props.x instanceof Array or props.y instanceof Array\n        props = expandToArray props\n      return props\n\n    ArrayableHelper @, 'point', ports, {compute}\n\n# Make x*y array\nexpandToArray = (props) ->\n  length = 0\n  xLen = 1\n  yLen = 1\n  if props.x instanceof Array\n    xLen = props.x.length\n  if props.y instanceof Array\n    yLen = props.y.length\n  length = xLen*yLen\n  arr = []\n  for y in [0..yLen-1]\n    for x in [0..xLen-1]\n      obj = {}\n      obj.type = 'point'\n      if props.x instanceof Array\n        obj.x = if props.x[x]? then props.x[x] else props.x[xLen-1]\n      else\n        obj.x = props.x\n      if props.y instanceof Array\n        obj.y = if props.y[y]? then props.y[y] else props.y[yLen-1]\n      else\n        obj.y = props.y\n      if obj.x? and obj.y?\n        arr.push obj\n  return arr\n\nexports.getComponent = -> new MakeGrid\n"},
  "canvas/MakeIncrement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Make an array of numbers by increment'\n  c.icon = 'folder-o'\n  c.inPorts.add 'from',\n    datatype: 'number'\n  c.inPorts.add 'to',\n    datatype: 'number'\n  c.inPorts.add 'increment',\n    datatype: 'int'\n    default: 1\n    control: true\n  c.outPorts.add 'range',\n    datatype: 'array'\n  c.process (input, output) ->\n    return unless input.hasData 'from', 'to'\n    return if input.attached('increment').length and not input.hasData('increment')\n    [from, to] = input.getData 'from', 'to'\n    increment = if input.hasData('increment') then input.getData('increment') else 1\n    range = []\n    f = from\n    if from <= to\n      while (f<=to)\n        range.push f\n        f += increment\n    else\n      while (f>=to)\n        range.push f\n        f -= increment\n    output.sendDone\n      range: range\n"},
  "canvas/MakePath": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\ntypeIsArray = Array.isArray || ( value ) -> return Object.toString.call( value ) is '[object Array]'\n\nclass MakePath extends noflo.Component\n  description: 'Makes a path given a number of points, curves, etc'\n  icon: 'star-o'\n  constructor: ->\n    ports =\n      items:\n        datatype: 'object'\n        description: 'points, arcs, and curves to combine to make path'\n        addressable: true\n        required: true\n\n    # OVERRIDE, discussion at noflo/noflo-canvas#24\n    compute = (props) =>\n      out =\n        type: 'path'\n        items: []\n      arrayCount = 0\n      for item in props.items\n        unless item?\n          # Short-circuit\n          return\n        if typeIsArray item\n          arrayCount++\n\n      if arrayCount is 0\n        # eg. two points\n        out.items = props.items\n      else if props.items.length is 1 and arrayCount is 1\n        # eg. one array of points\n        out.items = props.items[0]\n      else\n        # Multiple arrays, flatten combinations\n        out.items = @expandToArray props.items\n        out = @expandToArray out\n\n      return out\n\n    ArrayableHelper @, 'path', ports, {compute}\n\nexports.getComponent = -> new MakePath\n"},
  "canvas/MakePoint": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakePoint extends noflo.Component\n  description: 'Creates a point or points'\n  icon: 'crosshairs'\n  constructor: ->\n    ports =\n      x:\n        datatype: 'number'\n        required: true\n      y:\n        datatype: 'number'\n        required: true\n\n    ArrayableHelper @, 'point', ports\n\nexports.getComponent = -> new MakePoint\n"},
  "canvas/MakeRGBColor": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\ncolorToString = (color) ->\n  r = Math.round(color.red)\n  g = Math.round(color.green)\n  b = Math.round(color.blue)\n  if color.alpha?\n    a = color.alpha\n    return \"rgba(#{r}, #{g}, #{b}, #{a})\"\n  else\n    return \"rgb(#{r}, #{g}, #{b})\"\n\nclass MakeRGBColor extends noflo.Component\n  description: 'Creates RGA or RGBA color or colors'\n  icon: 'tint'\n  constructor: ->\n    ports =\n      red:\n        datatype: 'int'\n        description: 'from 0 to 255'\n        required: true\n      green:\n        datatype: 'int'\n        description: 'from 0 to 255'\n        required: true\n      blue:\n        datatype: 'int'\n        description: 'from 0 to 255'\n        required: true\n      alpha:\n        datatype: 'number'\n        description: 'optional, from 0 to 1.0'\n        required: false\n\n    compute = (props) =>\n      return unless props.red? and props.green? and props.blue?\n      color = props\n      if (props.red instanceof Array or props.green instanceof Array or\n      props.blue instanceof Array or props.alpha instanceof Array)\n        color = @expandToArray props\n        color = color.map colorToString\n      else\n        color = colorToString props\n      return color\n\n    ArrayableHelper @, 'color', ports, {compute}\n\n\nexports.getComponent = -> new MakeRGBColor\n"},
  "canvas/MakeRandom": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Make an array of random numbers'\n  c.icon = 'random'\n  c.inPorts.add 'min',\n    datatype: 'number'\n  c.inPorts.add 'max',\n    datatype: 'number'\n  c.inPorts.add 'count',\n    datatype: 'int'\n  c.outPorts.add 'numbers',\n    datatype: 'array'\n  c.process (input, output) ->\n    return unless input.hasData 'min', 'max', 'count'\n    [min, max, count] = input.getData 'min', 'max', 'count'\n    spread = max - min\n    if count is 1\n      number = min + Math.random()*spread\n      output.sendDone\n        numbers: [number]\n      return\n    numbers = []\n    for i in [0..count-1]\n      numbers[i] = min + Math.random()*spread\n    output.sendDone\n      numbers: numbers\n"},
  "canvas/MakeRange": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Make an array of evenly-spaced numbers'\n  c.icon = 'folder-o'\n  c.inPorts.add 'from',\n    datatype: 'number'\n  c.inPorts.add 'to',\n    datatype: 'number'\n  c.inPorts.add 'count',\n    datatype: 'int'\n  c.outPorts.add 'range',\n    datatype: 'array'\n  c.process (input, output) ->\n    return unless input.hasData 'from', 'to', 'count'\n    [from, to, count] = input.getData 'from', 'to', 'count'\n    if count is 1\n      output.sendDone\n        range: [from]\n      return\n    range = []\n    f = from\n    spread = to - from\n    increment = spread / (count-1)\n    for i in [0..count-1]\n      range[i] = from + increment*i\n    output.sendDone\n      range: range\n"},
  "canvas/MakeRectangle": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeRectangle extends noflo.Component\n  description: 'Creates a rectangle or rectangles'\n  icon: 'square-o'\n  constructor: ->\n    ports =\n      point:\n        datatype: 'object'\n        description: 'top left point'\n        required: true\n      width:\n        datatype: 'number'\n        required: true\n      height:\n        datatype: 'number'\n        required: true\n\n    ArrayableHelper @, 'rectangle', ports\n\nexports.getComponent = -> new MakeRectangle\n"},
  "canvas/MakeRectangleAspectRatio": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeRectangleAspectRatio extends noflo.Component\n  description: 'Creates a rectangle, maintaining original aspect ratio'\n  icon: 'square-o'\n  constructor: ->\n    ports =\n      width:\n        datatype: 'number'\n        description: '<0 for dont-care'\n        required: true\n      height:\n        datatype: 'number'\n        description: '<0 for dont-care'\n        required: true\n      origwidth:\n        datatype: 'number'\n        description: 'from 0 to 100'\n        required: true\n      origheight:\n        datatype: 'number'\n        description: 'from 0 to 1.0'\n        required: false\n\n    compute = (props) =>\n      return unless @hasAllProps(props)\n      inputs = props\n      out = @computeRectangle inputs\n      out.type = 'rectangle'\n      out.point = { type: 'point', x: 0, y: 0 }\n      return out\n\n    ArrayableHelper @, 'rectangle', ports, {compute}\n\n  hasAllProps: (props) ->\n    props.width? and props.height? and props.origwidth? and props.origheight?\n\n  computeRectangle: (inputs) ->\n    aspectRatio = inputs.origheight / inputs.origwidth\n    targetWidth = inputs.width\n    targetHeight = inputs.height\n\n    if targetWidth < 0 and targetHeight < 0\n      # Pass through original\n      targetWidth = inputs.origwidth\n      targetHeight = inputs.origheight\n    else if inputs.width < 0\n      targetWidth = targetHeight/aspectRatio\n    else if inputs.height < 0\n      targetHeight = targetWidth*aspectRatio\n\n    o =\n      height: targetHeight\n      width: targetWidth\n    return o\n\nexports.getComponent = -> new MakeRectangleAspectRatio\n"},
  "canvas/Recurse": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Makes a translation recursive.'\n  c.icon = 'retweet'\n  c.inPorts.add 'recursables',\n    datatype: 'object'\n    description: 'Only translate is recursable'\n  c.inPorts.add 'count',\n    datatype: 'number'\n  c.outPorts.add 'recurse',\n    datatype: 'object'\n  c.recurses = {}\n  c.tearDown = (callback) ->\n    c.recurses = {}\n    do callback\n  c.process (input, output) ->\n    unless c.recurses[input.scope]\n      c.recurses[input.scope] =\n        type: 'recurse'\n        recursables: []\n        count: null\n    if input.hasData 'count'\n      c.recurses[input.scope].count = input.getData 'count'\n      unless c.recurses[input.scope].recursables.length\n        output.done()\n        return\n      output.sendDone\n        recurse: c.recurses[input.scope]\n      return\n    indexesWithData = input.attached('recursables').filter (idx) ->\n      input.hasData ['recursables', idx]\n    return unless indexesWithData.length\n    indexesWithData.forEach (idx) ->\n      data = input.getData ['recursables', idx]\n      c.recurses[input.scope].recursables[idx] = data\n    output.sendDone\n      recurse: c.recurses[input.scope]\n    return\n"},
  "canvas/Stroke": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Stroke extends noflo.Component\n  description: 'Strokes lines for paths, rectangles, circles, and arcs'\n  icon: 'square-o'\n  constructor: ->\n    ports =\n      items:\n        datatype: 'object'\n        description: 'shapes (paths, circles, and rectangles) to stroke'\n        addressable: true\n        required: true\n      strokestyle:\n        datatype: 'string'\n        description: 'css color string or canvas style'\n        required: false\n      linewidth:\n        datatype: 'number'\n        description: 'stroke width in pixels'\n        required: false\n      closepath:\n        datatype: 'boolean'\n        description: 'draw line back to start point'\n        value: false\n\n    ArrayableHelper @, 'stroke', ports\n\nexports.getComponent = -> new Stroke\n"},
  "canvas/StrokeRect": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass StrokeRect extends noflo.Component\n  description: 'Strokes a rectangle'\n  icon: 'pencil-square-o'\n  constructor: ->\n    ports =\n      point:\n        datatype: 'object'\n        description: 'top left point'\n        required: true\n      width:\n        datatype: 'number'\n        required: true\n      height:\n        datatype: 'number'\n        required: true\n    \n    ArrayableHelper @, 'strokerect', ports\n\n  exports.getComponent = -> new StrokeRect\n"},
  "canvas/StrokeStyle": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Sets the global stroke style'\n  c.icon = 'pencil-square-o'\n  c.inPorts.add 'style',\n    datatype: 'string'\n  c.outPorts.add 'strokestyle',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'style'\n    strokeStyle =\n      type: 'strokeStyle'\n      value: input.getData 'style'\n    output.sendDone\n      out: new noflo.IP 'data', strokeStyle\n    return\n"},
  "canvas/Transform": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Transform extends noflo.Component\n  description: 'Translate, rotate, and/or scale passed drawing commands.'\n  icon: 'arrows'\n  constructor: ->\n    ports =\n      items:\n        datatype: 'object'\n        description: 'fill and stroke commands to transform'\n        addressable: true\n        required: true\n      translate:\n        datatype: 'object'\n        type: 'noflo-canvas/point'\n        description: 'translate by this vector'\n        required: false\n      scale:\n        datatype: 'object'\n        type: 'noflo-canvas/point'\n        description: 'stretch or mirror'\n        required: false\n      scaleboth:\n        datatype: 'number'\n        description: 'scale both x and y'\n        required: false\n      rotate:\n        datatype: 'number'\n        type: 'noflo-canvas/angle'\n        description: 'angle in radians'\n        required: false\n\n    ArrayableHelper @, 'transform', ports\n\nexports.getComponent = -> new Transform\n"},
  "canvas/CreateCanvas": {"language":"coffeescript","source":"# @runtime noflo-browser\n# @name CreateCanvas\n\nnoflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Makes a Canvas with given dimensions'\n  c.icon = 'pencil-square'\n  c.inPorts.add 'width',\n    datatype: 'int'\n  c.inPorts.add 'height',\n    datatype: 'int'\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'width', 'height'\n    [width, height] = input.getData 'width', 'height'\n    canvas = document.createElement 'canvas'\n    canvas.width = width\n    canvas.height = height\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "canvas/SaveJPEG": {"language":"coffeescript","source":"# @runtime noflo-browser\n# @name SaveJPEG\n\nnoflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Exports a canvas to JPEG'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.outPorts.add 'jpeg',\n    datatype: 'string'\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    canvas = input.getData 'canvas'\n    img = canvas.toDataURL('image/jpeg')\n    output.sendDone\n      jpeg: img\n    return\n"},
  "canvas/SavePNG": {"language":"coffeescript","source":"# @runtime noflo-browser\n# @name SavePNG\n\nnoflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Exports a canvas to PNG'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.outPorts.add 'png',\n    datatype: 'string'\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    canvas = input.getData 'canvas'\n    img = canvas.toDataURL('image/png')\n    output.sendDone\n      png: img\n    return\n"},
  "clmtrackr/TrackFace": {"language":"coffeescript","source":"# @runtime noflo-browser\n\nnoflo = require 'noflo'\nclm = require '../libs/clmtrackr.js'\npModel = require '../libs/model_pca_20_svm.js'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'meh-o'\n  c.description = 'track features in face'\n  tracker = null\n  raf = null\n  ctx = null\n  stopTracking = ->\n    if tracker\n      tracker.stop()\n      tracker = null\n    if raf\n      cancelAnimationFrame raf\n      raf = null\n    if ctx\n      ctx.deactivate()\n      ctx = null\n  c.tearDown = (callback) ->\n    do stopTracking\n    do callback\n  c.inPorts.add 'image',\n    datatype: 'object'\n    description: 'img, video, or canvas element'\n  c.outPorts.add 'points',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.process (input, output, context) ->\n    return unless input.hasData 'image'\n    imageToTrack = input.getData 'image'\n    return output.done() unless imageToTrack.tagName?\n    # Clmtrackr needs canvas or video\n    if imageToTrack.tagName is 'IMG'\n      # Convert img to canvas\n      canvas = document.createElement('canvas')\n      canvas.width = imageToTrack.width\n      canvas.height = imageToTrack.height\n      canvas.getContext('2d').drawImage(imageToTrack, 0, 0)\n      imageToTrack = canvas\n\n    # Should be canvas or video now\n    unless imageToTrack.tagName is 'CANVAS' or imageToTrack.tagName is 'VIDEO'\n      output.done new Error 'Image to track must be a canvas or video element'\n      return\n\n    # Reset if needed\n    do stopTracking\n\n    # todo: params.stopOnConvergence for still images\n    tracker = new clm.tracker()\n    tracker.init pModel\n    tracker.start imageToTrack\n    ctx = context\n\n    trackFaceLoop = ->\n      raf = requestAnimationFrame trackFaceLoop\n      return unless tracker\n      points = tracker.getCurrentPosition()\n      return unless points\n      # Convert to noflo-canvas compatible array\n      points = points.map (point) ->\n        return {\n          type: 'point'\n          x: point[0]\n          y: point[1]\n        }\n      output.send\n        points: points\n\n    raf = requestAnimationFrame trackFaceLoop\n"},
  "clmtrackr/WireframeFace": {"language":"coffeescript","source":"# @runtime noflo-browser\n\nnoflo = require 'noflo'\n\n# Voronoi version, could be hand-made\n# Indexes correspond to https://github.com/auduno/clmtrackr#clmtrackr\nwireframe = [[28,70,13],[39,12,13],[70,39,13],[14,28,13],[50,11,12],[39,50,12],[15,28,14],[50,10,11],[31,39,70],[67,28,15],[16,67,15],[51, 9,10],[50,51,10],[39,38,50],[38,49,50],[40,39,31],[29,67,16],[67,70,28],[51,52,9],[17,29,16],[69,40,31],[32,70,67],[52, 8, 9],[32,31,70],[29,32,67],[68,32,29],[17,68,29],[32,69,31],[68,69,32],[52,53, 8],[53, 7, 8],[30,40,69],[18,68,17],[49,59,50],[58,51,50],[59,58,50],[41,40,30],[68,30,69],[38,48,49],[18,30,68],[58,52,51],[43,38,39],[40,43,39],[37,48,38],[18,33,30],[33,41,30],[48,59,49],[57,52,58],[62,43,40],[43,37,38],[53,6,7],[59,60,58],[60,57,58],[41,62,40],[48,60,59],[22,33,18],[57,53,52],[54,6,53],[62,37,43],[37,47,48],[47,60,48],[33,25,41],[41,34,62],[62,42,37],[37,46,47],[57,54,53],[47,46,60],[61,56,60],[60,56,57],[56,54,57],[36,46,37],[46,61,60],[34,42,62],[42,36,37],[25,34,41],[5,6,54],[22,25,33],[25,65,34],[55,5,54],[45,61,46],[36,45,46],[64,25,22],[34,35,42],[56,55,54],[35,36,42],[45,44,61],[61,44,56],[44,55,56],[44,45,36],[35,44,36],[26,35,34],[65,26,34],[4,5,55],[21,64,22],[26,66,35],[2,44,35],[44,4,55],[2,3,44],[66,1,35],[64,65,25],[21,24,64],[1,2,35],[27,65,64],[3,4,44],[24,27,64],[27,26,65],[20,24,21],[23,1,66],[20,63,24],[24,63,27],[66,26,27],[63,66,27],[20,19,63],[19,23,63],[63,23,66],[0,1,23],[19,0,23]]\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'meh-o'\n  c.description = 'Points from TrackFace to wireframe (array of triangle paths)'\n\n  c.inPorts.add 'points',\n    datatype: 'array'\n    description: 'points from TrackFace'\n  c.outPorts.add 'paths',\n    datatype: 'array'\n\n  c.process (input, output) ->\n    return unless input.hasData 'points'\n    payload = input.getData 'points'\n    paths = []\n    for tri in wireframe\n      path =\n        type: 'path'\n        items: [\n          payload[tri[0]]\n          payload[tri[1]]\n          payload[tri[2]]\n        ]\n      paths.push path\n\n    output.sendDone\n      paths: paths\n"},
  "core/Callback": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'This component calls a given callback function for each\n  IP it receives.  The Callback component is typically used to connect\n  NoFlo with external Node.js code.'\n  c.icon = 'sign-out'\n\n  c.inPorts.add 'in',\n    description: 'Object passed as argument of the callback'\n    datatype: 'all'\n  c.inPorts.add 'callback',\n    description: 'Callback to invoke'\n    datatype: 'function'\n    control: true\n    required: true\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'callback', 'in'\n    [callback, data] = input.getData 'callback', 'in'\n    unless typeof callback is 'function'\n      output.done new Error 'The provided callback must be a function'\n      return\n\n    # Call the callback when receiving data\n    try\n      callback data\n    catch e\n      return output.done e\n    output.done()\n"},
  "core/Copy": {"language":"coffeescript","source":"noflo = require 'noflo'\nowl = require 'owl-deepcopy'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'deep (i.e. recursively) copy an object'\n  c.icon = 'copy'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be copied'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    description: 'Copy of the original packet'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n\n    copy = owl.deepCopy data\n    output.sendDone\n      out: copy\n    return\n"},
  "core/DisconnectAfterPacket": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Makes each data packet a stream of its own'\n  c.icon = 'pause'\n  c.forwardBrackets = {}\n  c.autoOrdering = false\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be forward with disconnection'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  brackets = {}\n  c.tearDown = (callback) ->\n    brackets = {}\n  c.process (input, output) ->\n    # Force auto-ordering to be off for this one\n    c.autoOrdering = false\n\n    data = input.get 'in'\n    brackets[input.scope] = [] unless brackets[input.scope]\n    if data.type is 'openBracket'\n      brackets[input.scope].push data.data\n      output.done()\n      return\n    if data.type is 'closeBracket'\n      brackets[input.scope].pop()\n      output.done()\n      return\n\n    return unless data.type is 'data'\n\n    for bracket in brackets[input.scope]\n      output.sendIP 'out', new noflo.IP 'openBracket', bracket\n    output.sendIP 'out', data\n    closes = brackets[input.scope].slice 0\n    closes.reverse()\n    for bracket in closes\n      output.sendIP 'out', new noflo.IP 'closeBracket', bracket\n\n    output.done()\n"},
  "core/Drop": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'This component drops every packet it receives with no\n  action'\n  c.icon = 'trash-o'\n\n  c.inPorts.add 'in',\n    datatypes: 'all'\n    description: 'Packet to be dropped'\n\n  c.process (input, output) ->\n    data = input.get 'in'\n    data.drop()\n    output.done()\n    return\n"},
  "core/Kick": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'This component generates a single packet and sends it to\n  the output port. Mostly usable for debugging, but can also be useful\n  for starting up networks.'\n  c.icon = 'share'\n\n  c.inPorts.add 'in',\n    datatype: 'bang'\n    description: 'Signal to send the data packet'\n  c.inPorts.add 'data',\n    datatype: 'all'\n    description: 'Packet to be sent'\n    control: true\n    default: null\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    return if input.attached('data').length and not input.hasData 'data'\n    bang = input.getData 'in'\n    data = input.getData 'data'\n    output.send\n      out: data\n    output.done()\n"},
  "core/MakeFunction": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Evaluates a function each time data hits the \"in\" port\n  and sends the return value to \"out\". Within the function \"x\" will\n  be the variable from the in port. For example, to make a ^2 function\n  input \"return x*x;\" to the function port.'\n  c.icon = 'code'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be processed'\n  c.inPorts.add 'function',\n    datatype: 'string'\n    description: 'Function to evaluate'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'function',\n    datatype: 'function'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  prepareFunction = (func, callback) ->\n    if typeof func is 'function'\n      callback null, func\n      return\n    try\n      newFunc = Function 'x', func\n    catch e\n      callback e\n      return\n    callback null, newFunc\n\n  c.process (input, output) ->\n    return if input.attached('in').length and not input.hasData 'in'\n    if input.hasData 'function', 'in'\n      # Both function and input data\n      prepareFunction input.getData('function'), (err, func) ->\n        if err\n          output.done e\n          return\n        data = input.getData 'in'\n        try\n          result = func data\n        catch e\n          output.done e\n          return\n        output.sendDone\n          function: func\n          out: result\n        return\n      return\n    return unless input.hasData 'function'\n    prepareFunction input.getData('function'), (err, func) ->\n      if err\n        output.done e\n        return\n      output.sendDone\n        function: func\n      return\n    return\n"},
  "core/Merge": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'This component receives data on multiple input ports and\n    sends the same data out to the connected output port'\n  c.icon = 'compress'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be forwarded'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    data = input.get 'in'\n    output.sendDone\n      out: data\n"},
  "core/Output": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nunless noflo.isBrowser()\n  util = require 'util'\nelse\n  util =\n    inspect: (data) -> data\n\nlog = (options, data) ->\n  if options?\n    console.log util.inspect data,\n      options.showHidden, options.depth, options.colors\n  else\n    console.log data\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Sends the data items to console.log'\n  c.icon = 'bug'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be printed through console.log'\n  c.inPorts.add 'options',\n    datatype: 'object'\n    description: 'Options to be passed to console.log'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return if input.attached('options').length and not input.hasData 'options'\n\n    options = null\n    if input.has 'options'\n      options = input.getData 'options'\n\n    data = input.getData 'in'\n    log options, data\n    output.sendDone\n      out: data\n"},
  "core/ReadGlobal": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Returns the value of a global variable.'\n  c.icon = 'usd'\n\n  # inPorts\n  c.inPorts.add 'name',\n    description: 'The name of the global variable.'\n\n  # outPorts\n  c.outPorts.add 'value',\n    description: 'The value of the variable.'\n\n  c.outPorts.add 'error',\n    description: 'Any errors that occured reading the variables value.'\n\n  c.forwardBrackets =\n    name: ['value', 'error']\n\n  c.process (input, output) ->\n    return unless input.hasData 'name'\n    data = input.getData 'name'\n\n    value = unless noflo.isBrowser() then global[data] else window[data]\n\n    if typeof value is 'undefined'\n      err = new Error \"\\\"#{data}\\\" is undefined on the global object.\"\n      output.sendDone err\n      return\n    output.sendDone\n      value: value\n"},
  "core/Repeat": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Forwards packets and metadata in the same way\n  it receives them'\n  c.icon = 'forward'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to forward'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    data = input.get 'in'\n    output.sendDone\n      out: data\n"},
  "core/RepeatAsync": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Like 'Repeat', except repeat on next tick\"\n  c.icon = 'step-forward'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to forward'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    data = input.get 'in'\n    setTimeout ->\n      output.sendDone\n        out: data\n    , 0\n"},
  "core/RepeatDelayed": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Forward packet after a set delay'\n  c.icon = 'clock-o'\n\n  c.timers = []\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be forwarded with a delay'\n  c.inPorts.add 'delay',\n    datatype: 'number'\n    description: 'How much to delay'\n    default: 500\n    control: true\n\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.tearDown = (callback) ->\n    clearTimeout timer for timer in c.timers\n    c.timers = []\n    callback()\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return if input.attached('delay').length and not input.hasData 'delay'\n\n    delay = 500\n    if input.hasData 'delay'\n      delay = input.getData 'delay'\n    payload = input.get 'in'\n\n    timer = setTimeout ->\n      c.timers.splice c.timers.indexOf(timer), 1\n      output.sendDone\n        out: payload\n    , delay\n    c.timers.push timer\n"},
  "core/RunInterval": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send a packet at the given interval'\n  c.icon = 'clock-o'\n  c.inPorts.add 'interval',\n    datatype: 'number'\n    description: 'Interval at which output packets are emitted (ms)'\n    required: true\n    control: true\n  c.inPorts.add 'start',\n    datatype: 'bang'\n    description: 'Start the emission'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n    description: 'Stop the emission'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n\n  c.timers = {}\n\n  cleanUp = (scope) ->\n    return unless c.timers[scope]\n    clearInterval c.timers[scope].interval\n    c.timers[scope].deactivate()\n    c.timers[scope] = null\n\n  c.tearDown = (callback) ->\n    for scope, context of c.timers\n      cleanUp scope\n    c.timers = {}\n    callback()\n\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'start'\n      return unless input.hasData 'interval'\n      start = input.get 'start'\n      return unless start.type is 'data'\n      interval = parseInt input.getData 'interval'\n      # Ensure we deactivate previous interval in this scope, if any\n      cleanUp start.scope\n\n      # Set up interval\n      context.interval = setInterval ->\n        bang = new noflo.IP 'data', true\n        bang.scope = start.scope\n        c.outPorts.out.sendIP bang\n      , interval\n\n      # Register scope, we keep it active until stopped\n      c.timers[start.scope] = context\n      return\n\n    if input.hasData 'stop'\n      stop = input.get 'stop'\n      return unless stop.type is 'data'\n      # Deactivate interval in this scope\n      cleanUp stop.scope\n      return\n"},
  "core/RunTimeout": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send a packet after the given time in ms'\n  c.icon = 'clock-o'\n\n  c.timer = {}\n\n  c.inPorts.add 'time',\n    datatype: 'number'\n    description: 'Time after which a packet will be sent'\n    required: true\n    control: true\n  c.inPorts.add 'start',\n    datatype: 'bang'\n    description: 'Start the timeout before sending a packet'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n\n  c.forwardBrackets =\n    start: ['out']\n\n  c.stopTimer = (scope) ->\n    return unless c.timer[scope]\n    clearTimeout c.timer[scope].timeout\n    c.timer[scope].deactivate()\n    delete c.timer[scope]\n\n  c.tearDown = (callback) ->\n    for scope, timer of c.timer\n      c.stopTimer scope\n    callback()\n\n  c.process (input, output, context) ->\n    return unless input.hasData 'time', 'start'\n    time = input.getData 'time'\n    bang = input.getData 'start'\n    # Ensure we deactivate previous timeout, if any\n    c.stopTimer input.scope\n    # Set up new timer\n    context.timeout = setTimeout ->\n      c.timer = null\n      output.sendDone\n        out: true\n    , time\n    c.timer[input.scope] = context\n    return\n"},
  "core/SendNext": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Sends next packet in buffer when receiving a bang'\n  c.icon = 'forward'\n\n  c.inPorts.add 'data',\n    datatype: 'all'\n  c.inPorts.add 'in',\n    datatype: 'bang'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'empty',\n    datatype: 'bang'\n    required: false\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    bang = input.getData 'in'\n\n    unless input.hasData 'data'\n      # No data packets in the buffer, send \"empty\"\n      output.sendDone\n        empty: true\n      return\n\n    sent = false\n    # Loop until we've either drained the buffer completely, or until\n    # we hit the next data packet\n    while input.has 'data'\n      if sent\n        # If we already sent data, we look ahead to see if next packet is data and bail out\n        buf = c.inPorts.data.getBuffer bang.scope\n        break if buf[0].type is 'data'\n\n      packet = input.get 'data'\n      output.send\n        out: packet\n      sent = true if packet.type is 'data'\n    # After the loop we can deactivate\n    output.done()\n"},
  "core/Split": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'expand'\n  c.description = 'This component receives data on a single input port and\n    sends the same data out to all connected output ports'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Packet to be forwarded'\n\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    data = input.get 'in'\n    output.sendDone\n      out: data\n"},
  "css/MoveElement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nsetPosition = (element, attr, value) ->\n  if attr in ['top', 'left']\n    value = \"#{value}px\"\n  element.style.position = 'absolute'\n  element.style[attr] = value\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Change the coordinates of a DOM element'\n  c.icon = 'arrows'\n  c.inPorts.add 'element',\n    datatype: 'object'\n    control: true\n  c.inPorts.add 'point',\n    datatype: 'object'\n  c.inPorts.add 'x',\n    datatype: 'number'\n  c.inPorts.add 'y',\n    datatype: 'number'\n  c.inPorts.add 'z',\n    datatype: 'number'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n\n  c.process (input, output) ->\n    return unless input.hasData 'element'\n    if input.hasData 'point'\n      [element, point] = input.getData 'element', 'point'\n      setPosition element, 'left', point.x\n      setPosition element, 'top', point.y\n      output.sendDone\n        out: true\n      return\n    if input.hasData 'x'\n      [element, x] = input.getData 'element', 'x'\n      setPosition element, 'left', x\n      output.sendDone\n        out: true\n      return\n    if input.hasData 'y'\n      [element, y] = input.getData 'element', 'y'\n      setPosition element, 'top', y\n      output.sendDone\n        out: true\n      return\n    if input.hasData 'z'\n      [element, z] = input.getData 'element', 'z'\n      setPosition element, 'zIndex', z\n      output.sendDone\n        out: true\n      return\n"},
  "css/ResizeElement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nsetSize = (element, attr, value) ->\n  element.style.position = 'absolute'\n  element.style[attr] = \"#{value}px\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Change the size of a DOM element'\n  c.icon = 'arrows'\n  c.inPorts.add 'element',\n    datatype: 'object'\n    control: true\n  c.inPorts.add 'size',\n    datatype: 'object'\n  c.inPorts.add 'width',\n    datatype: 'number'\n  c.inPorts.add 'height',\n    datatype: 'number'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n  c.process (input, output) ->\n    return unless input.hasData 'element'\n    if input.hasData 'size'\n      [element, size] = input.getData 'element', 'size'\n      setSize element, 'width', size.width\n      setSize element, 'height', size.height\n      output.sendDone\n        out: true\n      return\n    if input.hasData 'width'\n      [element, width] = input.getData 'element', 'width'\n      setSize element, 'width', width\n      output.sendDone\n        out: true\n      return\n    if input.hasData 'height'\n      [element, height] = input.getData 'element', 'height'\n      setSize element, 'height', height\n      output.sendDone\n        out: true\n      return\n"},
  "css/RotateElement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nsetRotation = (element, degrees, gpu) ->\n  transform = \"rotate(#{degrees}deg)\"\n  if gpu\n    transform = \"#{transform} translateZ(0px) translate3d(0px, 0px, 0px)\"\n  element.style.transform = transform\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Change the coordinates of a DOM element'\n  c.icon = 'rotate-right'\n  c.inPorts.add 'element',\n    datatype: 'object'\n    control: true\n  c.inPorts.add 'percent',\n    datatype: 'number'\n  c.inPorts.add 'degrees',\n    datatype: 'number'\n  c.inPorts.add 'gpu',\n    datatype: 'boolean'\n    control: true\n    default: true\n    description: 'Whether to GPU-accelerate the rotation'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n\n  c.process (input, output) ->\n    return unless input.hasData 'element'\n    if input.hasData 'percent'\n      [element, percent] = input.getData 'element', 'percent'\n      gpu = if input.hasData('gpu') then input.getData('gpu') else true\n      degrees = 360 * percent % 360\n      setRotation element, degrees, gpu\n      output.sendDone\n        out: true\n      return\n    if input.hasData 'degrees'\n      [element, degrees] = input.getData 'element', 'degrees'\n      gpu = if input.hasData('gpu') then input.getData('gpu') else true\n      setRotation element, degrees, gpu\n      output.sendDone\n        out: true\n      return\n"},
  "css/SetBackgroundImage": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Set element\\'s CSS background image'\n  c.icon = 'picture'\n  c.inPorts.add 'element',\n    datatype: 'object'\n    control: true\n  c.inPorts.add 'imagedata',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n\n  c.process (input, output) ->\n    return unless input.hasData 'element', 'imagedata'\n    [element, imagedata] = input.getData 'element', 'imagedata'\n    element.style.background = 'url(' + imagedata + ') no-repeat center'\n    output.sendDone\n      out: true\n"},
  "css/SetElementTop": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Set element\\'s CSS top'\n  c.icon = 'arrows-v'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'top',\n    datatype: 'number'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n  c.process (input, output) ->\n    return unless input.hasData 'element', 'top'\n    [element, top] = input.getData 'element', 'top'\n    element.style.position = 'absolute'\n    element.style.top = \"#{top}px\"\n    output.sendDone\n      out: true\n"},
  "dom/AddClass": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Add a class to an element'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'class',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'element', 'class'\n    [element, className] = input.getData 'element', 'class'\n    element.classList.add className\n    output.done()\n"},
  "dom/AppendChild": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Append elements as children of a parent element'\n  c.inPorts.add 'parent',\n    datatype: 'object'\n  c.inPorts.add 'child',\n    datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'parent', 'child'\n    [parent, child] = input.getData 'parent', 'child'\n    parent.appendChild child\n    output.done()\n"},
  "dom/CreateElement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Create a new DOM Element'\n  c.inPorts.add 'tagname',\n    datatype: 'string'\n  c.inPorts.add 'container',\n    datatype: 'object'\n  c.outPorts.add 'element',\n    datatype: 'object'\n  c.forwardBrackets =\n    tagname: ['element']\n\n  c.process (input, output) ->\n    return unless input.hasData 'tagname'\n    if c.inPorts.container.isAttached()\n      # If container is attached, we want it too\n      return unless input.hasData 'container'\n\n    tagname = input.getData 'tagname'\n    element = document.createElement tagname\n    if input.hasData 'container'\n      container = input.getData 'container'\n      container.appendChild element\n\n    output.sendDone\n      element: element\n"},
  "dom/CreateFragment": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c. description = 'Create a new DOM DocumentFragment'\n  c.inPorts.add 'in',\n    datatype: 'bang'\n  c.outPorts.add 'fragment',\n    datatype: 'object'\n\n  c.forwardBrackets =\n    in: ['fragment']\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    input.getData 'in'\n    fragment = document.createDocumentFragment()\n    output.sendDone\n      fragment: fragment\n"},
  "dom/GetAttribute": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Reads the given attribute from the DOM element on the in\n    port.\"\n\n  # Define in ports.\n  c.inPorts.add 'element',\n    datatype: 'object'\n    description: 'The element from which to read the attribute from.'\n    required: true\n\n  c.inPorts.add 'attribute',\n    datatype: 'string'\n    description: 'The attribute which is read from the DOM element.'\n    required: true\n    control: true\n\n  # Define out ports.\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Value of the attribute being read.'\n\n  c.forwardBrackets =\n    element: ['out']\n\n  # On data flow.\n  c.process (input, output) ->\n    return unless input.hasData 'element', 'attribute'\n    [element, attribute] = input.getData 'element', 'attribute'\n    value = element.getAttribute attribute\n    output.sendDone\n      out: value\n"},
  "dom/GetElement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description ='Get a DOM element matching a query'\n  c.inPorts.add 'in',\n    datatype: 'object'\n    description: 'DOM element to constrain the query to'\n  c.inPorts.add 'selector',\n    datatype: 'string'\n    description: 'CSS selector'\n  c.outPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    selector: ['element', 'error']\n  c.process (input, output) ->\n    return unless input.hasData 'selector'\n    return unless input.hasData 'in' if input.attached('in').length > 0\n    if input.hasData 'in'\n      # Element-scoped selector\n      [container, selector] = input.getData 'in', 'selector'\n      unless typeof container.querySelector is 'function'\n        output.done new Error 'Given container doesn\\'t support querySelectors'\n        return\n      el = container.querySelectorAll selector\n      unless el.length\n        output.done new Error \"No element matching '#{selector}' found under container\"\n        return\n      for element in el\n        output.send\n          element: element\n      output.done()\n      return\n    selector = input.getData 'selector'\n    el = document.querySelectorAll selector\n    unless el.length\n      output.done new Error \"No element matching '#{selector}' found under document\"\n      return\n    for element in el\n      output.send\n        element: element\n    output.done()\n"},
  "dom/HasClass": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Check if an element has a given class'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'class',\n    datatype: 'string'\n  c.outPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'missed',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'element', 'class'\n    [element, klass] = input.getData 'element', 'class'\n    if element.classList.contains klass\n      output.sendDone\n        element: element\n      return\n    output.sendDone\n      missed: element\n"},
  "dom/Listen": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'addEventListener for specified event type'\n  c.icon = 'stethoscope'\n\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'type',\n    datatype: 'string'\n  c.inPorts.add 'preventdefault',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.outPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'event',\n    datatype: 'object'\n\n  c.elements = {}\n  cleanUp = (scope) ->\n    return unless c.elements[scope]\n    {element, event, listener} = c.elements[scope]\n    element.removeEventListener event, listener\n    c.elements[scope].deactivate()\n    delete c.elements[scope]\n  c.tearDown = (callback) ->\n    for scope, element of c.elements\n      cleanUp scope\n    c.elements = {}\n    callback()\n  c.forwardBrackets = {}\n\n  c.process (input, output, context) ->\n\n    return unless input.hasData 'element', 'type'\n    [element, type] = input.getData 'element', 'type'\n\n    preventDefault = false\n    if input.hasData 'preventdefault'\n      preventDefault = input.getData 'preventdefault'\n\n    scope = null\n    cleanUp scope\n\n    context.element = element\n    context.event = type\n    context.listener = (event) ->\n      event.preventDefault() if preventDefault\n      output.send\n        element: context.element\n        event: event\n    c.elements[context] = context\n    element.addEventListener type, context.listener\n"},
  "dom/ReadHtml": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Read HTML from an existing element'\n  c.inPorts.add 'container',\n    datatype: 'object'\n  c.outPorts.add 'html',\n    datatype: 'string'\n  c.forwardBrackets =\n    container: ['html']\n  c.process (input, output) ->\n    return unless input.hasData 'container'\n    container = input.getData 'container'\n    output.sendDone\n      html: container.innerHTML\n"},
  "dom/RemoveClass": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Remove a class from an element'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'class',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'element', 'class'\n    [element, className] = input.getData 'element', 'class'\n    element.classList.remove className\n    output.done()\n"},
  "dom/RemoveElement": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Remove an element from DOM'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'element'\n    element = input.getData 'element'\n    return unless element.parentNode\n    element.parentNode.removeChild element\n    output.done()\n"},
  "dom/RequestAnimationFrame": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nrequestAnimationFrame =\n  window.requestAnimationFrame       ||\n  window.webkitRequestAnimationFrame ||\n  window.mozRequestAnimationFrame    ||\n  window.oRequestAnimationFrame      ||\n  window.msRequestAnimationFrame     ||\n  (callback, element) ->\n    window.setTimeout( ->\n      callback(+new Date())\n    , 1000 / 60)\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Sends bangs that correspond with screen refresh rate.'\n  c.icon = 'film'\n\n  c.inPorts.add 'start',\n    datatype: 'bang'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n\n  c.running = {}\n  cleanUp = (scope) ->\n    return unless c.running[scope]\n    c.running[scope].deactivate()\n    delete c.running[scope]\n  c.tearDown = (callback) ->\n    for scope, running of c.running\n      cleanUp scope\n    c.running = {}\n    callback()\n  c.animate = (scope, output) ->\n    # Stop when context has been stopped\n    return unless c.running[scope]\n    # Send bang\n    output.send true\n    # Request next frame\n    requestAnimationFrame c.animate.bind c, scope, output\n\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'start'\n      start = input.get 'start'\n      return unless start.type is 'data'\n      # Ensure previous was deactivated\n      cleanUp start.scope\n\n      # Register scope\n      c.running[start.scope] = context\n\n      # Request first frame\n      requestAnimationFrame c.animate.bind c, start.scope, output\n      return\n\n    if input.hasData 'stop'\n      stop = input.get 'stop'\n      return unless stop.type is 'data'\n      # Deactivate this scope\n      cleanUp stop.scope\n      return\n"},
  "dom/SetAttribute": {"language":"coffeescript","source":"'use strict'\n\n# @runtime noflo-browser\n\nnoflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Set the given attribute on the DOM element to the received\n    value.\"\n    \n  # Define in ports.\n  c.inPorts.add 'element',\n    datatype: 'object'\n    description: 'The element on which to set the attribute.'\n\n  c.inPorts.add 'attribute',\n    datatype: 'string'\n    description: 'The attribute which is set on the DOM element.'\n\n  c.inPorts.add 'value',\n    datatype: 'string'\n    description: 'Value of the attribute being set.'\n  \n  # Define out ports.\n  c.outPorts.add 'element',\n    datatype: 'object'\n    description: 'The element that was updated.'\n\n  c.forwardBrackets =\n    element: ['element']\n    value: ['element']\n\n  c.process (input, output) ->\n    return unless input.hasData 'element', 'attribute', 'value'\n    [element, attribute, value] = input.getData 'element', 'attribute', 'value'\n    if typeof value is 'object'\n      if toString.call(value) is '[object Array]'\n        value = value.join ' '\n      else\n        newVal = []\n        newVal.push val for key, val of value\n        value = newVal.join ' '\n    if attribute is \"value\"\n      element.value = value\n    else\n      element.setAttribute attribute, value\n\n    output.sendDone\n      element: element\n"},
  "dom/WriteHtml": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Write HTML inside an existing element'\n  c.inPorts.add 'container',\n    datatype: 'object'\n  c.inPorts.add 'html',\n    datatype: 'string'\n  c.outPorts.add 'container',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'container', 'html'\n    [container, html] = input.getData 'container', 'html'\n    container.innerHTML = html\n    output.sendDone\n      container: container\n"},
  "flow/Accept": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'accept and forward certain incoming packets'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'An IP to be forwarded if accepted'\n  c.inPorts.add 'accept',\n    datatype: 'all'\n    description: 'IP to be accepted'\n  c.inPorts.add 'reset',\n    datatype: 'bang'\n    description: 'Reset the list accepted IPs'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.accepts = {}\n  c.tearDown = (callback) ->\n    c.accepts = {}\n    do callback\n  c.process (input, output) ->\n    if input.hasData 'accept'\n      accept = input.getData 'accept'\n      c.accepts[input.scope] = [] unless c.accepts[input.scope]\n      c.accepts[input.scope].push accept\n      output.done()\n      return\n    if input.hasData 'reset'\n      input.getData 'reset'\n      c.accepts = {}\n      output.done()\n      return\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    if c.accepts[input.scope].indexOf(data) is -1\n      output.done()\n      return\n    output.sendDone\n      out: data\n"},
  "flow/All": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nprepareScope = ->\n  data =\n    results: {}\n    resolved: false\n    rejected: false\n  return data\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Like Promise.all, wait for result from all connected inputs\n   and send them or an error out'\n  c.icon = 'compress'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.inPorts.add 'error',\n    datatype: 'object'\n  c.outPorts.add 'out',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.pending = {}\n  c.tearDown = (callback) ->\n    c.pending = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'error'\n      # There is a failure in this scope, reject it\n      err = input.getData 'error'\n      unless c.pending[input.scope]\n        c.pending[input.scope] = prepareScope()\n      if c.pending[input.scope].rejected or c.pending[input.scope].resolved\n        # This scope was already resolved\n        output.done()\n        return\n      # Mark scope as rejected\n      c.pending[input.scope].rejected = true\n      # Drop any results since something failed\n      delete c.pending[input.scope].results\n      output.sendDone\n        error: err\n      return\n\n    # See if we have any input results\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStreams.length\n\n    unless c.pending[input.scope]\n      c.pending[input.scope] = prepareScope()\n\n    # Check if the execution was already resolved\n    if c.pending[input.scope].rejected or c.pending[input.scope].resolved\n      indexesWithStreams.forEach (idx) ->\n        # Drop all packets that arrive after resolution\n        stream = input.getStream ['in', idx]\n        ip.drop() for ip in stream\n      output.done()\n      return\n\n    # Read results\n    results = c.pending[input.scope].results\n    indexesWithStreams.forEach (idx) ->\n      stream = input.getStream(['in', idx]).filter (ip) -> ip.type is 'data'\n      # If this connection already sent, disregard the new stream\n      return if results[idx]\n      # Add to results\n      results[idx] = [] unless results[idx]\n      results[idx] = results[idx].concat stream\n\n    # Check if we have all results\n    for idx in input.attached('in')\n      continue if results[idx]?.length\n      # Still waiting\n      output.done()\n      return\n\n    # Mark as resolved\n    c.pending[input.scope].resolved = true\n    # Send data\n    resultData = input.attached('in').map (idx) ->\n      data = results[idx].map (ip) -> ip.data\n      if data.length is 1\n        return data[0]\n      return data\n    output.sendDone\n      out: resultData\n    # Clean packets\n    delete c.pending[input.scope].results\n"},
  "flow/CleanDisconnect": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"when several streams are nested through the array\n  in-port (i.e. a connect through one of the ports before there is a\n  disconnect), separate the streams into distinct streams with no\n  overlapping\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStreams.length\n    indexesWithStreams.forEach (idx) ->\n      stream = input.getStream ['in', idx]\n      for packet in stream\n        packet.index = idx\n        output.send\n          out: packet\n    output.done()\n"},
  "flow/CleanSplit": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'expand'\n  c.description = 'Like core/Split, but only begins sending at end of a stream'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream 'in'\n    for packet in stream\n      output.send\n        out: packet\n    output.done()\n"},
  "flow/Collate": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# The actual collation algorithm, returns a closure with the control fields\n# that can be used with Array.prototype.sort()\nsortByControlFields = (fields, a, b) ->\n  # If there are no control fields specified we can't sort\n  return 0 unless fields.length\n\n  # Comparison of a single control field\n  sort = (left, right) ->\n    # Lowercase strings to they always sort correctly\n    left = left.toLowerCase() if typeof left is 'string'\n    right = right.toLowerCase() if typeof right is 'string'\n\n    return 0 if left is right\n    return 1 if left > right\n    -1\n\n  # Traverse the fields until you find one to sort by\n  for field in fields\n    order = sort a.data[field], b.data[field]\n    return order unless order is 0\n\n  # All fields were the same, send in order of appearance\n  if @indexOf(a) < @indexOf(b)\n    return -1\n  1\n\n# Sending the collated objects to the output port together with bracket IPs\nsendWithGroups = (packets, fields, output) ->\n  previous = null\n  for packet in packets\n    # For the first packet send a bracket IP for each control field\n    for field in fields\n      break if previous\n      output.send\n        out: new noflo.IP 'openBracket', field\n\n    # For subsequent packets send ending and opening brackets for fields that\n    # are different\n    if previous\n      for field, idx in fields\n        continue if packet.data[field] is previous.data[field]\n        # Differing field found, close this bracket and all following ones\n        differing = fields.slice idx\n        closes = differing.slice(0)\n        closes.reverse()\n        for f in closes\n          output.send\n            out: new noflo.IP 'closeBracket', f\n        for f in differing\n          output.send\n            out: new noflo.IP 'openBracket', f\n        break\n\n    # Send it out\n    output.send\n      out: packet\n\n    # Provide for comparison to the next one\n    previous = packet\n\n  # Last packet sent, send closing brackets\n  closes = fields.slice(0)\n  closes.reverse()\n  for field in closes\n    output.send\n      out: new noflo.IP 'closeBracket', field\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Collate two or more streams, based on\n  a list of control field lengths'\n  c.icon = 'sort-amount-asc'\n  # Inport for accepting a comma-separated list of control fields\n  c.inPorts.add 'ctlfields',\n    datatype: 'string'\n    description: 'Comma-separated list of object keys to collate by'\n    control: true\n  # Here we accept packets from 0-n connections that will eventually be collated\n  c.inPorts.add 'in',\n    description: 'Objects to collate'\n    datatype: 'object'\n    addressable: true\n  # We send the packets in collated order with groups to the output port\n  c.outPorts.add 'out',\n    description: 'Objects in collated order'\n    datatype: 'object'\n\n  c.forwardBrackets = {}\n\n  c.process (input, output) ->\n    # We want to have a list of fields to collate by\n    return unless input.hasData 'ctlfields'\n    # To be able to sort everything we must wait until we have all the data\n    return unless input.attached('in').length\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStreams.length is input.attached('in').length\n\n    fields = input.getData 'ctlfields'\n    if typeof fields is 'string'\n      fields = fields.split ','\n\n    # Receive the packets\n    packets = []\n    for idx in indexesWithStreams\n      stream = input.getStream(['in', idx]).filter (ip) ->\n\n        ip.type is 'data'\n      packets = packets.concat stream\n    # Sort them by control fields if there are any\n    original = packets.slice 0\n    packets.sort sortByControlFields.bind original, fields\n    output.send\n      out: new noflo.IP 'openBracket', null\n    # Send them out\n    sendWithGroups packets, fields, output\n    # Send end-of-transmission\n    output.send\n      out: new noflo.IP 'closeBracket', null\n    output.done()\n"},
  "flow/CollectUntilIdle": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Collect packets and send them when input stops after a given\n  timeout'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to collect until a timeout'\n  c.inPorts.add 'timeout',\n    datatype: 'number'\n    description: 'Amount of time to hold IPs for in milliseconds'\n    default: 300\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    description: 'IPs collected until the timeout'\n  c.timeout = null\n  clear = ->\n    return unless c.timeout\n    clearTimeout c.timeout.timeout\n    c.timeout.ctx.deactivate()\n  c.tearDown = (callback) ->\n    do clear\n    do callback\n  c.process (input, output, context) ->\n    return unless input.hasData 'in'\n    return if input.attached('timeout') and not input.hasData('timeout')\n    if input.hasData 'timeout'\n      timeout = parseInt input.getData 'timeout'\n    else\n      timeout = 300\n\n    do clear\n\n    c.timeout =\n      ctx: context\n      timeout: setTimeout ->\n        while input.hasData 'in'\n          packet = input.getData 'in'\n          output.send\n            out: packet\n        output.done()\n      , timeout\n"},
  "flow/Concat": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Gathers data from all incoming connections and sends\n  them together in order of connection'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.process (input, output) ->\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStreams.length is input.attached('in').length\n    for idx in indexesWithStreams\n      stream = input.getStream ['in', idx]\n      for packet in stream\n        packet.index = idx\n        output.send\n          out: packet\n    output.done()\n"},
  "flow/CountDown": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"count down from particular number, by default 1, and\n    send an empty IP when it hits 0\"\n  c.inPorts.add 'in',\n    datatype: 'bang'\n    description: 'IPs to decrease the count down'\n  c.inPorts.add 'count',\n    datatype: 'int'\n    description: 'Count down starting number'\n    default: 1\n    control: true\n  c.inPorts.add 'repeat',\n    datatype: 'boolean'\n    description: 'Repeat the count down mechanism if true'\n    default: true\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'bang'\n    description: 'IP emitted when the count reach 0'\n  c.outPorts.add 'count',\n    datatype: 'int'\n    description: 'Number of packets received in this cycle'\n  c.received = 0\n  c.tearDown = (callback) ->\n    c.received = 0\n    do callback\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return if input.attached('count') and not input.hasData 'count'\n    return if input.attached('repeat') and not input.hasData 'repeat'\n    if input.hasData 'count'\n      count = input.getData 'count'\n    else\n      count = 1\n    if input.hasData 'repeat'\n      repeat = input.getData 'repeat'\n    else\n      repeat = true\n    input.getData 'in'\n    c.received++\n    output.send\n      count: c.received\n    if c.received is count\n      output.send\n        out: new noflo.IP 'data', null\n      c.received = 0 if repeat\n    output.done()\n"},
  "flow/CountedMerge": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Like 'core/Merge', but merge up to a specified\n  number of streams.\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IP to merge'\n  c.inPorts.add 'threshold',\n    datatype: 'int'\n    control: true\n    default: 1\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.received = 0\n  c.tearDown = (callback) ->\n    c.received = 0\n    do callback\n\n  c.forwardBrackets = {}\n\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    return if input.attached('threshold') and not input.hasData 'threshold'\n    if input.hasData 'threshold'\n      threshold = input.getData 'threshold'\n    else\n      threshold = 1\n    packets = input.getStream 'in'\n    if c.received < threshold\n      # We can still send\n      for packet in packets\n        output.send\n          out: packet\n    else\n      # Over threshold, drop packets\n      packet.drop() for packet in packets\n    c.received++\n    output.done()\n"},
  "flow/Deny": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'deny certain incoming packets'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'An IP to be forwarded if accepted'\n  c.inPorts.add 'deny',\n    datatype: 'all'\n    description: 'IP to be denied'\n  c.inPorts.add 'reset',\n    datatype: 'bang'\n    description: 'Reset the list denied IPs'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.denied = {}\n  c.tearDown = (callback) ->\n    c.denied = {}\n    do callback\n  c.process (input, output) ->\n    if input.hasData 'deny'\n      deny = input.getData 'deny'\n      c.denied[input.scope] = [] unless c.denied[input.scope]\n      c.denied[input.scope].push deny\n      output.done()\n      return\n    if input.hasData 'reset'\n      input.getData 'reset'\n      c.denied = {}\n      output.done()\n      return\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    if c.denied[input.scope].indexOf(data) isnt -1\n      output.done()\n      return\n    output.sendDone\n      out: data\n"},
  "flow/Fork": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Send the port number to 'PORT' to set where to direct IPs. It\n  acts as a 'Split' by default, sending IPs to every out-port.\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n  c.inPorts.add 'port',\n    datatype: 'number'\n    description: 'Number of ports to forward IPs to'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.indexes = []\n  c.tearDown = (callback) ->\n    c.indexes = []\n    do callback\n  c.process (input, output) ->\n    if input.hasStream 'port'\n      # New set of port indexes to work with\n      ports = input.getStream('port').filter (ip) -> ip.type is 'data'\n      c.indexes = []\n      for port in ports\n        index = parseInt port.data\n        continue if c.indexes.indexOf(index) isnt -1\n        c.indexes.push index\n      output.done()\n      return\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    if c.indexes.length is 0\n      indexes = c.outPorts.out.listAttached()\n    else\n      indexes = c.indexes.slice 0\n    for idx in indexes\n      output.send\n        out: new noflo.IP 'data', data,\n          index: idx\n    output.done()\n"},
  "flow/Gate": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Forward packets only when the gate is open'\n  c.icon = 'pause'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'open',\n    datatype: 'bang'\n    description: 'Send one IP to open the gate'\n  c.inPorts.add 'close',\n    datatype: 'bang'\n    description: 'Send one IP to close the gate'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.isOpen = false\n  c.tearDown = (callback) ->\n    c.isOpen = false\n    c.icon = 'pause'\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'open'\n      input.getData 'open'\n      c.isOpen = true\n      c.setIcon 'play'\n      output.done()\n      return\n    if input.hasData 'close'\n      input.getData 'close'\n      c.isOpen = false\n      c.setIcon 'pause'\n      output.done()\n      return\n    return unless input.has 'in'\n    packet = input.get 'in'\n    unless c.isOpen\n      packet.drop()\n      output.done()\n      return\n    output.sendDone\n      out: packet\n"},
  "flow/HasGroup": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"send connection to 'yes' if its top-level group is one\n  of the provided groups, otherwise 'no'\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to route use their groups'\n  c.inPorts.add 'regexp',\n    datatype: 'string'\n    description: 'Regexps to match groups'\n  c.inPorts.add 'group',\n    datatype: 'string'\n    description: 'List of groups (one group per IP)'\n  c.inPorts.add 'reset',\n    datatype: 'bang'\n    description: 'Reset the list of groups and regexps'\n  c.outPorts.add 'yes',\n    datatype: 'all'\n    description: 'IPs with group that match the groups or regexps provided'\n  c.outPorts.add 'no',\n    datatype: 'all'\n    description: 'IPs with group that don\\'t match the groups or regexps\n     provided'\n  c.forwardBrackets = {}\n  c.matchGroups = []\n  c.regexps = []\n  reset = ->\n    c.matchGroups = []\n    c.regexps = []\n  c.tearDown = (callback) ->\n    do reset\n    do callback\n  c.process (input, output) ->\n    if input.hasData 'group'\n      c.matchGroups.push input.getData 'group'\n      output.done()\n      return\n    if input.hasData 'regexp'\n      c.regexps.push new RegExp input.getData 'regexp'\n      output.done()\n      return\n    if input.hasData 'reset'\n      input.getData 'reset'\n      do reset\n      output.done()\n      return\n    return unless input.hasStream 'in'\n    packets = input.getStream 'in'\n    unless packets[0].type is 'openBracket'\n      # Stream doesn't start with a group, send to NO\n      for packet in packets\n        output.send\n          no: packet\n      output.done()\n      return\n    matched = false\n    group = packets[0].data\n    for matchGroup in c.matchGroups\n      continue unless group is matchGroup\n      matched = true\n    for regexp in c.regexps\n      continue unless group.match(regexp)?\n      matched = true\n    unless matched\n      for packet in packets\n        output.send\n          no: packet\n      output.done()\n      return\n    for packet in packets\n      output.send\n        yes: packet\n    output.done()\n    return\n"},
  "flow/Race": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nprepareScope = ->\n  data =\n    resolved: false\n    rejected: false\n  return data\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Like Promise.all, wait for result from all connected inputs\n   and send them or an error out'\n  c.icon = 'compress'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.inPorts.add 'error',\n    datatype: 'object'\n  c.outPorts.add 'out',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.pending = {}\n  c.tearDown = (callback) ->\n    c.pending = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'error'\n      # There is a failure in this scope, reject it\n      err = input.getData 'error'\n      unless c.pending[input.scope]\n        c.pending[input.scope] = prepareScope()\n      if c.pending[input.scope].rejected or c.pending[input.scope].resolved\n        # This scope was already resolved\n        output.done()\n        return\n      # Mark scope as rejected\n      c.pending[input.scope].rejected = true\n      output.sendDone\n        error: err\n      return\n\n    # See if we have any input results\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStreams.length\n\n    unless c.pending[input.scope]\n      c.pending[input.scope] = prepareScope()\n\n    # Check if the execution was already resolved\n    if c.pending[input.scope].rejected or c.pending[input.scope].resolved\n      indexesWithStreams.forEach (idx) ->\n        # Drop all packets that arrive after resolution\n        stream = input.getStream ['in', idx]\n        ip.drop() for ip in stream\n      output.done()\n      return\n\n    # Read results\n    results = input.getStream(['in', indexesWithStreams[0]]).filter (ip) ->\n      ip.type is 'data'\n\n    # Mark as resolved\n    c.pending[input.scope].resolved = true\n    # Send data\n    data = results.map (ip) -> ip.data\n    if data.length is 1\n      data = data[0]\n    output.sendDone\n      out: data\n"},
  "flow/Reorder": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Send packets in to outport indexes in reverse order\n   when matching number of inport indexes have received data to attached\n   outports\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    attached = c.outPorts.out.listAttached().slice 0\n    expectedStreams = attached.length\n    if input.attached('in').length < attached.length\n      # Fewer attached inputs than outputs, use their number\n      expectedStreams = input.attached('in').length\n      attached = attached.slice 0, expectedStreams\n    return if indexesWithStreams.length < expectedStreams\n    streams = []\n    for idx in indexesWithStreams\n      streams.push input.getStream ['in', idx]\n    streams.reverse()\n    attached.reverse()\n    for outIdx in attached\n      continue unless streams.length\n      stream = streams.shift()\n      for packet in stream\n        output.send new noflo.IP packet.type, packet.data,\n          index: outIdx\n          datatype: packet.datatype\n          schema: packet.schema\n          clonable: packet.clonable\n    output.done()\n"},
  "flow/ReverseSplit": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'expand'\n  c.description = \"Like core/Split, expect the last port gets forwarded\n   packets first\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.has 'in'\n    packet = input.get 'in'\n    attached = c.outPorts.out.listAttached()\n    attached.reverse()\n    for idx in attached\n      output.send\n        out: new noflo.IP packet.type, packet.data,\n          index: idx\n          datatype: packet.datatype\n          schema: packet.schema\n          clonable: packet.clonable\n    output.done()\n"},
  "flow/Stop": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Stop everything that's received and send out once we're\n  told that we're ready to send.\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to buffer until an IP arrives on the ready port'\n  c.inPorts.add 'ready',\n    datatype: 'bang'\n    description: 'Trigger the emission of all the stored IPs'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    description: 'IPs forwarded from the in port'\n  c.forwardBracets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'ready', 'in'\n    input.getData 'ready'\n    packets = []\n    while input.has 'in'\n      packets.push input.get 'in'\n    for packet in packets\n      output.send\n        out: packet\n    output.done()\n"},
  "flow/Throttle": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Throttle packets based on load and maximum accepted load'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n  c.inPorts.add 'load',\n    datatype: 'int'\n    description: 'Current load'\n  c.inPorts.add 'max',\n    datatype: 'int'\n    control: true\n    description: 'Maximum number to allow for load'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'load', 'max'\n    [load, max] = input.getData 'load', 'max'\n    unless load < max\n      # Waiting for load to decrease\n      # FIXME: Workaround for https://github.com/noflo/noflo/issues/558\n      setTimeout ->\n        output.done()\n      , 1\n      return\n    # Release one packet at a time\n    data = input.getData 'in'\n    # FIXME: Workaround for https://github.com/noflo/noflo/issues/558\n    setTimeout ->\n      output.sendDone\n        out: data\n    , 1\n"},
  "geometry/ConstrainedDelaunay": {"language":"coffeescript","source":"noflo = require 'noflo'\npoly2tri = require '../vendor/poly2tri.min.js'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'toggle-up'\n  c.description = 'Calculates de constrained Delaunay triangulation of given points'\n  c.inPorts.add 'x',\n    datatype: 'array'\n  c.inPorts.add 'y',\n    datatype: 'array'\n  c.outPorts.add 'paths',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'x', 'y'\n    [x, y] = input.getData 'x', 'y'\n    unless x.length > 2\n      output.done new Error 'x must contain more than 2 elements'\n      return\n\n    try\n      contour = (new poly2tri.Point(x[i], y[i]) for i in [0...x.length])\n      swctx = new poly2tri.SweepContext contour\n      swctx.triangulate()\n    catch error\n      output.done error\n      return\n\n    # TODO Add holes and Steiner points: https://github.com/r3mi/poly2tri.js\n    \n    triangles = swctx.getTriangles()\n\n    paths = []\n    for t in triangles\n      points = t.getPoints()\n      path =\n        type: 'path',\n        items: ({'type': 'point', 'x': p.x, 'y': p.y} for p in points)\n      paths.push path\n\n    output.sendDone\n      paths: paths\n"},
  "geometry/Delaunay": {"language":"coffeescript","source":"noflo = require 'noflo'\nDelaunay = require '../vendor/delaunay.js'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'toggle-up'\n  c.description = 'Calculates Delaunay Triangulation for given points'\n  c.inPorts.add 'points',\n    datatype: 'array'\n  c.outPorts.add 'paths',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'points'\n    points = input.getData 'points'\n    unless points.length > 2\n      output.done new Error 'points must contain more than 2 elements'\n      return\n\n    vertices = ([point.x, point.y] for point in points)\n    ids = Delaunay.triangulate vertices\n\n    v = (vertices[i] for i in ids)\n\n    paths = []\n    for i in [0...v.length] by 3\n      path =\n        type: 'path',\n        items: ({'type': 'point', 'x': v[i+j][0], 'y': v[i+j][1]} for j in [0...3])\n      paths.push path\n\n    output.sendDone\n      paths: paths\n"},
  "geometry/Voronoi": {"language":"coffeescript","source":"noflo = require 'noflo'\nVoronoi = require '../vendor/rhill-voronoi-core.js'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'location-arrow'\n  c.description = 'Calculates Voronoi Diagram for given points'\n  c.inPorts.add 'points',\n    datatype: 'array'\n  c.inPorts.add 'bbox',\n    datatype: 'object'\n    description: 'bounding box as a rectangle (default: 200x200)'\n    control: true\n  c.outPorts.add 'paths',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'points'\n    sites = input.getData 'points'\n    unless sites.length > 2\n      output.done new Error 'points must contain more than 2 elements'\n      return\n    if input.hasData 'bbox'\n      bboxData = input.getData 'bbox'\n      bbox =\n        xl: bboxData.point.x\n        xr: bboxData.width\n        yt: bboxData.point.y\n        yb: bboxData.height\n    else\n      bbox =\n        xl: 0\n        xr: 200\n        yt: 0\n        yb: 200\n\n    voronoi = new Voronoi()\n    diagram = voronoi.compute(sites, bbox)\n\n    paths = []\n    for cell in diagram.cells\n      points = []\n      for halfedge in cell.halfedges\n        endpoint = halfedge.getEndpoint()\n        points.push\n          type: 'point'\n          x: endpoint.x\n          y: endpoint.y\n      if points.length > 0\n        paths.push\n          type: 'path'\n          items: points\n\n    output.sendDone\n      paths: paths\n"},
  "groups/CollectGroups": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Collect a stream of packets into object keyed by its groups'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to collect'\n  c.outPorts.add 'out',\n    datatype: 'object'\n    description: 'An object containing input IPs sorted by their group\n     names'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream 'in'\n    if stream[0].type is 'openBracket' and stream[0].data is null\n      # Remove the surrounding brackets if they're unnamed\n      before = stream.shift()\n      after = stream.pop()\n\n    # Working variable for incoming IPs\n    data = {}\n    # Breadcrumb of incoming groups\n    groups = []\n    # Breadcrumb of each level of IPs as partitioned by groups\n    parents = []\n\n    for packet in stream\n      if packet.type is 'openBracket'\n        # We use the attribute name `$data` to indicate data IPs in the outgoing\n        # structure, so no `$data` please\n        if packet.data is '$data'\n          output.done new Error 'groups cannot be named \\'$data\\''\n          return\n        # Save whatever in the working memory right now into its own level\n        parents.push data\n        # Save the current group\n        groups.push packet.data\n        # Clear working memory for new level\n        data = {}\n        continue\n      if packet.type is 'data'\n        # Initialize our data IPs storage as an array if it doesn't exist\n        data.$data ?= []\n        # Save the IP\n        data.$data.push packet.data\n        continue\n      if packet.type is 'closeBracket'\n        # Temporarily save working memory. Yes, you read me right! This is the\n        # working memory of working memory. :)\n        oldData = data\n        # Take out the previous level\n        data = parents.pop()\n        # Take the working memory (`data`) and put it into the previous level\n        # (`@data`) by a group name (`@groups.pop()`)\n        child = groups.pop()\n        # If `child` (i.e. the group) doesn't exist, simply put working memory\n        # in as-is\n        unless child of data\n          data[child] = oldData unless child of data\n          continue\n        # *OR*, if it's already an array, append to it\n        if Array.isArray data[child]\n          data[child].push oldData\n          continue\n        # *OR*, if something already exists in place but isn't appendable, make\n        # it so by having whatever in it as the first element of the array\n        data[child] = [ data[child], oldData ]\n        # NOTE: it may sound odd that collating into working memory (`@data`)\n        # works. It does because this is ending a group (i.e. level). If what\n        # follows is a disconnect, then it flushes the working memory, which is\n        # the entire data structure anyway. If what follows is a new group, the\n        # working memory is pushed into the level breadcrumbs (`@parents`)\n        # anyway. If it's a data IP, it's saved into the `$data` attribute, not\n        # affecting the data structure.\n\n    # Flush everything down the drain\n    output.sendDone\n      out: data\n"},
  "groups/CollectObject": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Collect packets to an object identified by keys organized\n  by connection'\n  c.inPorts.add 'keys',\n    datatype: 'string'\n    description: 'Comma-separated property names to be used for data based on connection index'\n  c.inPorts.add 'allpackets',\n    datatype: 'string'\n    description: 'Comma-separated property names to collect all packets for in an array'\n  c.inPorts.add 'collect',\n    datatype: 'all'\n    addressable: true\n    description: 'Data IPs to collect'\n  c.inPorts.add 'release',\n    datatype: 'bang'\n    description: 'Release all collected packets as an object'\n  c.inPorts.add 'clear',\n    datatype: 'bang'\n    description: 'Clear all collected data'\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.context = {}\n  c.forwardBrackets = {}\n  prepareContext = (scope) ->\n    unless c.context[scope]\n      c.context[scope] =\n        data: {}\n        groups: {}\n        keys: []\n        allpackets: []\n    return c.context[scope]\n  c.tearDown = (callback) ->\n    c.context = {}\n    do callback\n  c.process (input, output) ->\n    context = prepareContext input.scope\n    if input.hasData 'keys'\n      keys = input.getData('keys').split ','\n      if keys.length > 1\n        # Providing an array clears previous keys\n        context.keys = []\n      context.keys = context.keys.concat keys\n      output.done()\n      return\n    if input.hasData 'allpackets'\n      keys = input.getData('allpackets').split ','\n      if keys.length > 1\n        # Providing an array clears previous keys\n        context.allpackets = []\n      context.allpackets = context.allpackets.concat keys\n      output.done()\n      return\n    if input.hasData 'release'\n      input.getData 'release'\n      output.send\n        out: context.data\n      context.data = {}\n      output.done()\n      return\n    if input.hasData 'clear'\n      input.getData 'clear'\n      delete c.context[input.scope]\n      output.done()\n      return\n    indexesWithIps = input.attached('collect').filter (idx) ->\n      input.has ['collect', idx]\n    return unless indexesWithIps.length\n    # Ensure we have received keys before storing data\n    return if input.attached('keys').length and not context.keys.length\n    # Ensure we have received allpackets before storing data\n    return if input.attached('allpackets').length and not context.allpackets.length\n    indexesWithIps.forEach (idx) ->\n      packet = input.get ['collect', idx]\n      # Check that we have a named key for this connection\n      return unless context.keys[idx]\n\n      context.groups[idx] = [] unless context.groups[idx]\n      if packet.type is 'openBracket'\n        context.groups[idx].push packet.data\n        return\n      if packet.type is 'data'\n        key = context.keys[idx]\n        if context.groups[idx].length\n          # First level key is the group name, if any\n          groupId = context.groups[idx][0]\n          context.data[groupId] = {} unless context.data[groupId]\n          data = context.data[groupId]\n        else\n          # Ungrouped data goes to top-level\n          data = context.data\n\n        if context.allpackets[idx]\n          # We're collecting all packets for this connection\n          data[key] = [] unless data[key]\n          data[key].push packet.data\n          return\n        data[key] = packet.data\n        return\n      if packet.type is 'closeBracket'\n        context.groups[idx].pop()\n        return\n    output.done()\n"},
  "groups/CollectTree": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Collect a stream of packets into a simple tree structure'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'level',\n    datatype: 'integer'\n    default: 0\n    description: 'Number of groups (from outermost) to skip collection of'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    return if input.attached('level').length and not input.hasData 'level'\n\n    level = if input.hasData('level') then input.getData('level') else 0\n\n    stream = input.getStream 'in'\n    if stream[0].type is 'openBracket' and stream[0].data is null\n      # Remove the surrounding brackets if they're unnamed\n      before = stream.shift()\n      after = stream.pop()\n\n    data = {}\n    currentLevel = 0\n    collectGroups = []\n    forwardGroups = []\n\n    for packet in stream\n      if packet.type is 'openBracket'\n        if currentLevel < level\n          forwardGroups.push packet.data\n        else\n          collectGroups.push packet.data\n        currentLevel += 1\n        continue\n      if packet.type is 'data'\n        continue unless collectGroups.length\n        d = data\n        for g, idx in collectGroups\n          if idx < collectGroups.length - 1\n            d[g] = {} unless d[g]\n            d = d[g]\n            continue\n        unless d[g]\n          d[g] = packet.data\n          continue\n        unless Array.isArray d[g]\n          d[g] = [d[g]]\n        d[g].push packet.data\n        continue\n      if packet.type is 'closeBracket'\n        if currentLevel < level\n          # will be sent & reset on disconnect\n        else\n          collectGroups.pop()\n        currentLevel -= 1\n        continue\n\n    unless Object.keys(data).length\n      output.done new Error 'No tree information was collected'\n      return\n\n    for group in forwardGroups\n      output.send\n        out: new noflo.IP 'openBracket', group\n    output.send\n      out: data\n    forwardGroups.reverse()\n    for group in forwardGroups\n      output.send\n        out: new noflo.IP 'closeBracket', group\n    output.done()\n    return\n"},
  "groups/FilterByGroup": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Given a RegExp string, filter out groups that do not\n  match and their children data packets/groups. Forward only the content\n  of the matching group.\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to filter groups from'\n    addressable: true\n  c.inPorts.add 'regexp',\n    datatype: 'string'\n    description: 'Regexp use as a filter for IPs'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'group',\n    datatype: 'string'\n  c.outPorts.add 'empty',\n    datatype: 'bang'\n  c.scopes = {}\n  c.tearDown = (callback) ->\n    c.scopes = {}\n    do callback\n  ensureScope = (scope, idx) ->\n    c.scopes[scope] = {} unless c.scopes[scope]\n    return c.scopes[scope][idx] if c.scopes[scope][idx]\n    c.scopes[scope][idx] =\n      level: 0\n      hasContent: false\n      matchedLevel: null\n    return c.scopes[scope][idx]\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    return unless input.hasData 'regexp'\n    regexp = new RegExp input.getData 'regexp'\n    indexesWithIps.forEach (idx) ->\n      scope = ensureScope input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        if scope.matchedLevel?\n          output.send\n            out: new noflo.IP 'openBracket', packet.data\n        scope.level++\n        if not scope.matchedLevel? and packet.data.match(regexp)?\n          scope.matchedLevel = scope.level\n          output.send\n            group: packet.data\n        return\n      if packet.type is 'data'\n        return unless scope.matchedLevel?\n        scope.hasContent = true\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        if scope.matchedLevel is scope.level\n          scope.matchedLevel = null\n        if scope.matchedLevel?\n          output.send\n            out: new noflo.IP 'closeBracket', packet.data\n        scope.level--\n        return if scope.level\n        unless scope.hasContent\n          output.send\n            empty: null\n    output.done()\n"},
  "groups/FirstGroup": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Forward incoming IPs and filter groups except the first one'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.depth = {}\n  c.tearDown = (callback) ->\n    c.depth = {}\n    do callback\n  ensureDepth = (scope, idx) ->\n    c.depth[scope] = {} unless c.depth[scope]\n    c.depth[scope][idx] = 0 unless c.depth[scope][idx]\n    return c.depth[scope][idx]\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    indexesWithIps.forEach (idx) ->\n      depth = ensureDepth input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        if depth is 0\n          output.send\n            out: new noflo.IP 'openBracket', packet.data\n        c.depth[input.scope][idx]++\n        return\n      if packet.type is 'data'\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        c.depth[input.scope][idx]--\n        if c.depth[input.scope][idx] is 0\n          output.send\n            out: new noflo.IP 'closeBracket', packet.data\n        return\n    output.done()\n"},
  "groups/GenerateGroup": {"language":"coffeescript","source":"noflo = require 'noflo'\nuuid = require 'uuid'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Wrap IPs into a random UUID generated group'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    identifier = uuid.v4()\n    output.send\n      out: new noflo.IP 'openBracket', identifier\n    output.send\n      out: data\n    output.send\n      out: new noflo.IP 'closeBracket', identifier\n    output.done()\n"},
  "groups/Group": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Surround data IPs brackets'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n  c.inPorts.add 'group',\n    datatype: 'string'\n    description: 'Groups to encapsulate incoming packets into'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    description: 'Forwarded IPs with encapsulating groups'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'group'\n    [data, group] = input.getData 'in', 'group'\n    if Array.isArray group\n      brackets = group.slice 0\n    else\n      brackets = group.split ':'\n    for bracket in brackets\n      output.send\n        out: new noflo.IP 'openBracket', bracket\n    output.send\n      out: data\n    brackets.reverse()\n    for bracket in brackets\n      output.send\n        out: new noflo.IP 'closeBracket', bracket\n    output.done()\n"},
  "groups/GroupByObjectKey": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Group IPs by a key in their payload'\n  c.inPorts.add 'in',\n    datatype: 'object'\n  c.inPorts.add 'key',\n    datatype: 'string'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'key'\n    [data, key] = input.getData 'in', 'key'\n    unless typeof data is 'object'\n      output.done new Error 'Data is not an object'\n      return\n    group = data[key]\n    unless typeof data[key] is 'string'\n      group = 'undefined'\n    if typeof data[key] is 'boolean'\n      group = key if data[key]\n    output.send\n      out: new noflo.IP 'openBracket', group\n    output.send\n      out: data\n    output.send\n      out: new noflo.IP 'closeBracket', group\n    output.done()\n"},
  "groups/GroupZip": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Group packets by a group in order received'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'group',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'group'\n    [data, group] = input.getData 'in', 'group'\n    output.send\n      out: new noflo.IP 'openBracket', group\n    output.send\n      out: data\n    output.send\n      out: new noflo.IP 'closeBracket', group\n    output.done()\n"},
  "groups/LastGroup": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Forward incoming IPs and filter groups except the last one'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.depth = {}\n  c.tearDown = (callback) ->\n    c.depth = {}\n    do callback\n  ensureDepth = (scope, idx) ->\n    c.depth[scope] = {} unless c.depth[scope]\n    return c.depth[scope][idx] if c.depth[scope][idx]\n    c.depth[scope][idx] = []\n    return c.depth[scope][idx]\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    indexesWithIps.forEach (idx) ->\n      depth = ensureDepth input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        depth.push\n          group: packet.data\n          hasData: false\n        return\n      if packet.type is 'data'\n        if depth.length\n          lastLevel = depth[depth.length - 1]\n          unless lastLevel.hasData\n            output.send\n              out: new noflo.IP 'openBracket', lastLevel.group\n            lastLevel.hasData = true\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        lastLevel = depth.pop()\n        return unless lastLevel.hasData\n        output.send\n          out: new noflo.IP 'closeBracket', lastLevel.group\n        return\n    output.done()\n"},
  "groups/MapGroup": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Replace groups based on static or regexp map'\n  c.inPorts.add 'map',\n    datatype: 'all'\n    control: true\n  c.inPorts.add 'regexp',\n    datatype: 'all'\n    control: true\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.has 'in'\n    return if input.attached('map').length and not input.hasData 'map'\n    return if input.attached('regexp').length and not input.hasData 'regexp'\n    map = {}\n    regexp = {}\n    if input.hasData 'map'\n      mapData = input.getData 'map'\n      if typeof mapData is 'object'\n        map = mapData\n      else\n        mapParts = mapData.split '='\n        map[mapParts[0]] = mapParts[1]\n    if input.hasData 'regexp'\n      regexpData = input.getData 'regexp'\n      if typeof regexpData is 'object'\n        regexp = regexpData\n      else\n        regexpParts = regexpData.split '='\n        regexp[regexpParts[0]] = regexpParts[1]\n    packet = input.get 'in'\n    if packet.type is 'data'\n      output.sendDone\n        out: packet\n      return\n    if packet.type in ['openBracket', 'closeBracket']\n      unless typeof packet.data is 'string'\n        output.sendDone\n          out: packet\n        return\n\n      if map[packet.data]\n        # Direct mapping\n        output.sendDone\n          out: new noflo.IP packet.type, map[packet.data]\n        return\n\n      group = packet.data\n      for expression, replacement of regexp\n        exp = new RegExp expression\n        matched = exp.exec group\n        continue unless matched\n        group = group.replace exp, replacement\n      output.sendDone\n        out: new noflo.IP packet.type, group\n      return\n    output.done()\n"},
  "groups/MergeGroups": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Flatten group tree to a single level'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.depth = {}\n  c.tearDown = (callback) ->\n    c.depth = {}\n    do callback\n  ensureDepth = (scope, idx) ->\n    c.depth[scope] = {} unless c.depth[scope]\n    return c.depth[scope][idx] if c.depth[scope][idx]\n    c.depth[scope][idx] =\n      groups: []\n      dataGroups: []\n    return c.depth[scope][idx]\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    indexesWithIps.forEach (idx) ->\n      depth = ensureDepth input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        # Ignore brackets arriving after data was sent\n        depth.groups.push packet.data\n        return\n      if packet.type is 'data'\n        if depth.groups.length and not depth.dataGroups.length\n          depth.dataGroups = depth.groups.slice 0\n          output.send\n            out: new noflo.IP 'openBracket', depth.dataGroups.join ':'\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        if depth.groups.join(':') is depth.dataGroups.join ':'\n          output.send\n            out: new noflo.IP 'closeBracket', depth.dataGroups.join ':'\n          depth.dataGroups = []\n        depth.groups.pop()\n        return\n    output.done()\n"},
  "groups/Objectify": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"specify a regexp string, use the first match as the key\n  of an object containing the data\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.inPorts.add 'regexp',\n    datatype: 'string'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.matches = {}\n  c.tearDown = (callback) ->\n    c.matches = {}\n    do callback\n  ensureMatches = (scope, idx) ->\n    c.matches[scope] = {} unless c.matches[scope]\n    c.matches[scope][idx] = null unless c.matches[scope][idx]\n    return c.matches[scope][idx]\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'regexp'\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    regexp = new RegExp input.getData 'regexp'\n    indexesWithIps.forEach (idx) ->\n      matches = ensureMatches input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        if typeof packet.data is 'string' and packet.data.match regexp\n          c.matches[input.scope][idx] = packet.data.match(regexp)[0]\n        output.send\n          out: packet\n        return\n      if packet.type is 'data'\n        # If there is a match, make an object out of it\n        if matches?\n          d = packet.data\n          data = {}\n          data[matches] = d\n          output.send\n            out: data\n          return\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        c.matches[input.scope][idx] = null\n        output.send\n          out: packet\n        return\n    output.done()\n"},
  "groups/ReadGroup": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send the groups surrounding a packet'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'group',\n    datatype: 'string'\n  c.groups = {}\n  ensureGroups = (scope, idx) ->\n    c.groups[scope] = {} unless c.groups[scope]\n    c.groups[scope][idx] = [] unless c.groups[scope][idx]\n    return c.groups[scope][idx]\n  c.tearDown = (callback) ->\n    c.groups = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    indexesWithIps.forEach (idx) ->\n      groups = ensureGroups input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        groups.push packet.data\n        output.send\n          out: packet\n          group: packet\n        return\n      if packet.type is 'data'\n        output.send\n          group: groups.join ':'\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        groups.pop()\n        output.send\n          out: packet\n          group: packet\n        return\n    output.done()\n"},
  "groups/ReadGroups": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send the groups surrounding a packet'\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.inPorts.add 'strip',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.inPorts.add 'threshold',\n    datatype: 'int'\n    control: true\n    default: Infinity\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'group',\n    datatype: 'string'\n  c.groups = {}\n  ensureGroups = (scope, idx) ->\n    c.groups[scope] = {} unless c.groups[scope]\n    c.groups[scope][idx] = [] unless c.groups[scope][idx]\n    return c.groups[scope][idx]\n  c.tearDown = (callback) ->\n    c.groups = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithIps = input.attached('in').filter (idx) ->\n      input.has ['in', idx]\n    return unless indexesWithIps.length\n    return if input.attached('strip').length and not input.hasData('strip')\n    return if input.attached('threshold').length and not input.hasData('threshold')\n    if input.hasData 'strip'\n      strip = String(input.getData('strip')) is 'true'\n    else\n      strip = false\n    if input.hasData 'threshold'\n      threshold = parseInt(input.getData('threshold'))\n    else\n      threshold = Infinity\n    indexesWithIps.forEach (idx) ->\n      groups = ensureGroups input.scope, idx\n      packet = input.get ['in', idx]\n      if packet.type is 'openBracket'\n        groups.push packet.data\n        if groups.length > threshold\n          output.send\n            out: packet\n          return\n        output.send\n          group: packet.data\n        return if strip\n        output.send\n          out: packet\n        return\n      if packet.type is 'data'\n        output.send\n          out: packet\n        return\n      if packet.type is 'closeBracket'\n        if groups.length > threshold or not strip\n          output.send\n            out: packet\n        groups.pop()\n        return\n    output.done()\n"},
  "groups/Regroup": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Forward all the data IPs, strip all groups, and replace\n  them with groups from another connection\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'group',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.groups = {}\n  c.tearDown = (callback) ->\n    c.groups = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'group'\n      c.groups[input.scope] = [] unless c.groups[input.scope]\n      c.groups[input.scope].push input.getData 'group'\n      output.done()\n      return\n    return unless input.hasData 'in'\n    groups = []\n    if c.groups[input.scope]?.length\n      groups = c.groups[input.scope].slice 0\n    data = input.getData 'in'\n    for group in groups\n      output.send\n        out: new noflo.IP 'openBracket', group\n    output.send\n      out: data\n    groups.reverse()\n    for group in groups\n      output.send\n        out: new noflo.IP 'closeBracket', group\n    output.done()\n"},
  "groups/RemoveGroups": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Remove groups matching a string or a regex string, or all if no regexp given\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'IPs to forward'\n  c.inPorts.add 'regexp',\n    datatype: 'string'\n    description: 'Regexp used to remove groups'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.has 'in'\n    return if input.attached('regexp').length and not input.hasData 'regexp'\n    regexp = null\n    if input.hasData 'regexp'\n      regexp = new RegExp input.getData 'regexp'\n    packet = input.get 'in'\n    if packet.type in ['openBracket', 'closeBracket']\n      unless regexp\n        # No regexp given, remove all brackets\n        output.done()\n        return\n      if typeof packet.data is 'string' and packet.data.match(regexp)\n        # Matches regexp, remove\n        output.done()\n        return\n      # Doesn't match regexp, send\n      output.sendDone\n        out: packet\n      return\n    if packet.type is 'data'\n      output.sendDone\n        out: packet\n      return\n"},
  "groups/SendByGroup": {"language":"coffeescript","source":"noflo = require 'noflo'\n\ngetIdentifier = (groups) ->\n  if groups.length\n    return groups.join ':'\n  return 'ungrouped'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send packet held in \"data\" when receiving\n  matching set of groups in \"in\"'\n  c.icon = 'share-square'\n  c.inPorts.add 'in',\n    datatype: 'bang'\n    description: 'Signal to release IPs associated with the emitted group'\n  c.inPorts.add 'data',\n    datatype: 'all'\n    description: 'IP to store by group'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    description: 'IP associated with a group received on the in port'\n  c.stored = {}\n  c.released = {}\n  c.groups = []\n  c.tearDown = (callback) ->\n    c.stored = {}\n    c.released = {}\n    c.groups = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n\n    release = (groups) ->\n      identifier = getIdentifier groups\n      c.released[input.scope] = {} unless c.released[input.scope]\n      c.released[input.scope][identifier] = true\n      return unless c.stored[input.scope]\n      return unless c.stored[input.scope][identifier]\n      for group in groups\n        output.send\n          out: new noflo.IP 'openBracket', group\n      output.send\n        out: c.stored[input.scope][identifier]\n      closes = groups.slice 0\n      closes.reverse()\n      for group in closes\n        output.send\n          out: new noflo.IP 'closeBracket', group\n      # Mark as non-released after sending\n      c.released[input.scope][identifier] = false\n      return\n    if input.hasStream 'in'\n      # Time to release some data\n      stream = input.getStream 'in'\n      brackets = []\n      for packet in stream\n        if packet.type is 'openBracket'\n          brackets.push packet.data\n          continue\n        if packet.type is 'data'\n          release brackets\n          continue\n        if packet.type is 'closeBracket'\n          brackets.pop()\n          continue\n      output.done()\n      return\n\n    # Store data to be released\n    indexesWithIps = input.attached('data').filter (idx) ->\n      input.has ['data', idx]\n    return unless indexesWithIps.length\n    indexesWithIps.forEach (idx) ->\n      c.groups[input.scope] = {} unless c.groups[input.scope]\n      c.groups[input.scope][idx] = [] unless c.groups[input.scope][idx]\n      packet = input.get ['data', idx]\n      if packet.type is 'openBracket'\n        c.groups[input.scope][idx].push packet.data\n        return\n      if packet.type is 'data'\n        identifier = getIdentifier c.groups[input.scope][idx]\n        c.stored[input.scope] = {} unless c.stored[input.scope]\n        c.stored[input.scope][identifier] = packet\n        if c.released[input.scope]?[identifier]\n          # This identifier was already released. Send right away\n          release c.groups[input.scope][idx]\n        return\n      if packet.type is 'closeBracket'\n        c.groups[input.scope][idx].pop()\n        return\n    output.done()\n"},
  "gum/GetUserMedia": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'initialize camera and/or microphone'\n  c.icon = 'video-camera'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n  c.inPorts.add 'video',\n    datatype: 'boolean'\n    control: true\n    default: true\n  c.inPorts.add 'audio',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.outPorts.add 'stream',\n    datatype: 'object'\n  c.outPorts.add 'url',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  stream = null\n  ctx = null\n  stopStream = ->\n    if stream and stream.stop\n      stream.stop()\n      stream = null\n    if ctx\n      ctx.deactivate()\n      ctx = null\n  c.tearDown = (callback) ->\n    do stopStream\n    do callback\n\n  c.process (input, output, context) ->\n    if input.hasData 'stop'\n      input.getData 'stop'\n      stopStream()\n      output.done()\n      return\n    return unless input.hasData 'start'\n    input.getData 'start'\n    # Stop previous stream, if any\n    stopStream()\n\n    unless navigator?.mediaDevices\n      output.done new Error 'navigator.mediaDevices not available.'\n      return\n    unless navigator?.mediaDevices.getUserMedia\n      # In higher-level graph should provide option to chose image\n      # with file picker here. This will make it work on mobile etc.\n      output.done new Error 'navigator.mediaDevices.getUserMedia not available.'\n      return\n\n    video = if input.hasData('video') then input.getData('video') else true\n    audio = if input.hasData('audio') then input.getData('audio') else false\n\n    navigator.mediaDevices.getUserMedia\n      video: video\n      audio: audio\n    .then (mediaStream) ->\n      stream = mediaStream\n      ctx = context\n\n      # Shim\n      unless window.URL?\n        window.URL = (\n          window.webkitURL ||\n          window.msURL ||\n          window.oURL ||\n          null)\n      if window.URL.createObjectURL\n        output.send\n          url: window.URL.createObjectURL stream\n      else\n        output.send\n          url: stream\n      output.send\n        stream: stream\n    , (err) ->\n      output.done err\n"},
  "image/AdjustBrightness": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Adjust brightness level of a given image.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'level',\n    datatype: 'number'\n    control: true\n    default: 10.0\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    return if input.attached('level').length and not input.hasData 'level'\n    level = 10.0\n    if input.hasData 'level'\n      level = input.getData 'level'\n\n    canvas = input.getData 'canvas'\n    ctx = canvas.getContext '2d'\n    width = canvas.width\n    height = canvas.height\n    imageData = ctx.getImageData 0, 0, width, height\n\n    data = imageData.data\n\n    level = Math.floor 255 * (level / 100)\n\n    for i in [0...data.length] by 4\n      # Apply the color R, G, B values to each individual pixel\n      data[i] += level\n      data[i+1] += level\n      data[i+2] += level\n\n    ctx.putImageData imageData, 0, 0\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/AdjustContrast": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Adjust contrast level of a given image.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'level',\n    datatype: 'number'\n    control: true\n    default: 1.0\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    return if input.attached('level').length and not input.hasData 'level'\n    level = 1.0\n    if input.hasData 'level'\n      level = input.getData 'level'\n\n    canvas = input.getData 'canvas'\n    ctx = canvas.getContext '2d'\n    width = canvas.width\n    height = canvas.height\n\n    imageData = ctx.getImageData 0, 0, width, height\n\n    data = imageData.data\n\n    level = (parseFloat(level) or 0) + 1.0\n \n    for i in [0...data.length] by 4\n      data[i] = ((((data[i] / 255) - 0.5) * level) + 0.5) * 255\n      data[i+1] = ((((data[i+1] / 255) - 0.5) * level) + 0.5) * 255\n      data[i+2] = ((((data[i+2] / 255) - 0.5) * level) + 0.5) * 255\n\n    ctx.putImageData imageData, 0, 0\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/AdjustSaturation": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Adjust saturation level of a given image.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'level',\n    datatype: 'number'\n    control: true\n    default: 100.0\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    return if input.attached('level').length and not input.hasData 'level'\n    level = 100.0\n    if input.hasData 'level'\n      level = input.getData 'level'\n\n    canvas = input.getData 'canvas'\n\n    ctx = canvas.getContext '2d'\n    width = canvas.width\n    height = canvas.height\n\n    imageData = ctx.getImageData 0, 0, width, height\n\n    data = imageData.data\n\n    level *= -0.01\n\n    for i in [0...data.length] by 4\n      max = Math.max data[i], data[i+1], data[i+2]\n      data[i] += (max - data[i]) * level if data[i] isnt max\n      data[i+1] += (max - data[i+1]) * level if data[i+1] isnt max\n      data[i+2] += (max - data[i+2]) * level if data[i+2] isnt max\n\n    ctx.putImageData imageData, 0, 0\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/ApplyAdjustmentCurve": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Apply a RGBA adjustment curve to a given image.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'curve',\n    datatype: 'object'\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas', 'curve'\n    [canvas, curve] = input.getData 'canvas', 'curve'\n    width = canvas.width\n    height = canvas.height\n\n    ctx = canvas.getContext '2d'\n    imageData = ctx.getImageData 0, 0, width, height\n    data = imageData.data\n\n    # From the original created by TechSlides at http://techslides.com\n    # Instagram filter from http://matthewruddy.github.io/jQuery-filter.me\n    for i in [0...data.length] by 4\n      # Apply the color R, G, B values to each individual pixel\n      data[i] = curve.r[data[i]]\n      data[i+1] = curve.g[data[i+1]]\n      data[i+2] = curve.b[data[i+2]]\n\n      # Apply the overall RGB contrast changes to each pixel\n      data[i] = curve.a[data[i]]\n      data[i+1] = curve.a[data[i+1]]\n      data[i+2] = curve.a[data[i+2]]\n\n    ctx.putImageData imageData, 0, 0\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/ApplyVignette": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Apply a vignette effect to a given image.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    canvas = input.getData 'canvas'\n\n    ctx = canvas.getContext '2d'\n    width = canvas.width\n    height = canvas.height\n\n    imageData = ctx.getImageData 0, 0, width, height\n\n    data = imageData.data\n\n    outerRadius = Math.sqrt(Math.pow(width/2, 2) + Math.pow(height/2, 2))\n\n    # Adds outer darkened blur effect\n    ctx.globalCompositeOperation = 'source-over'\n    gradient = ctx.createRadialGradient width/2, height/2, 0, width/2, height/2, outerRadius\n    gradient.addColorStop 0, 'rgba(0, 0, 0, 0)'\n    gradient.addColorStop 0.65, 'rgba(0, 0, 0, 0)'\n    gradient.addColorStop 1, 'rgba(0, 0, 0, 0.9)'\n    ctx.fillStyle = gradient\n    ctx.fillRect 0, 0, width, height\n\n    # Adds central lighten effect\n    ctx.globalCompositeOperation = 'lighter'\n    gradient = ctx.createRadialGradient width/2, height/2, 0, width/2, height/2, outerRadius\n    gradient.addColorStop 0, 'rgba(255, 255, 255, 0.1)'\n    gradient.addColorStop 0.65, 'rgba(255, 255, 255, 0)'\n    gradient.addColorStop 1, 'rgba(0, 0, 0, 0)'\n    ctx.fillStyle = gradient\n    ctx.fillRect 0, 0, width, height\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/CalculateAspectRatio": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# Recursive function for calculating greatest common divisor\ngcd = (a, b) -> (if (b is 0) then a else gcd(b, a % b))\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'file-image-o'\n  c.description = 'Calculate aspect ratio from image dimensions'\n\n  c.inPorts.add 'dimensions',\n    datatype: 'object'\n  c.outPorts.add 'ratio',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'dimensions'\n    out: 'ratio'\n    forwardGroups: true\n    async: true\n  , (packet, groups, out, callback) ->\n    unless packet?.width > 0\n      return callback new Error \"Dimension is missing width\"\n    unless packet?.height > 0\n      return callback new Error \"Dimension is missing height\"\n    divisor = gcd packet.width, packet.height\n    numerator = packet.width / divisor\n    denominator = packet.height / divisor\n    out.send\n      ratio: \"#{numerator}:#{denominator}\"\n      aspect: numerator / denominator\n    do callback\n"},
  "image/Crop": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Crop the rectangle out of a given canvas'\n  c.icon = 'file-image-o'\n  c.inPorts = new noflo.InPorts\n    canvas:\n      datatype: 'object'\n      required: true\n    rectangle:\n      datatype: 'object'\n      description: 'A rectangle to crop out'\n      required: true\n  c.outPorts = new noflo.OutPorts\n    canvas:\n      datatype: 'object'\n    error:\n      datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: ['canvas', 'rectangle']\n    out: 'canvas'\n    forwardGroups: yes\n    async: yes\n  , (input, groups, out, callback) ->\n    unless input.rectangle?\n      return callback new Error \"Error when trying to crop the canvas given a rectangle. The rectangle is missing.\"\n    unless input.canvas?\n      return callback new Error \"Error when trying to crop the canvas given a rectangle. The canvas is missing.\"\n    unless input.rectangle.x? and input.rectangle.y? and input.rectangle.width? and input.rectangle.height?\n      return callback new Error \"Error when trying to crop the canvas given a rectangle. Rectangle is missing x, y, width or height\"\n    unless input.rectangle.width > 0 and input.rectangle.height > 0\n      return callback new Error \"Error when trying to crop the canvas given a rectangle. Rectangle width or height is not a positive value\"\n    unless input.canvas.width > 0 and input.canvas.height > 0\n      return callback new Error \"Error when trying to crop the canvas given a rectangle. Canvas is missing width or height\"\n\n    originalCanvas = input.canvas\n    {x, y, width, height} = input.rectangle\n    width = Math.abs originalCanvas.width - x if width > originalCanvas.width\n    height = Math.abs originalCanvas.height - y if height > originalCanvas.height\n    x = 0 if x < 0\n    y = 0 if y < 0\n\n    if noflo.isBrowser()\n      newCanvas = document.createElement 'canvas'\n      newCanvas.width = width\n      newCanvas.height = height\n    else\n      Canvas = require('noflo-canvas').canvas\n      newCanvas = new Canvas width, height\n\n    newCtx = newCanvas.getContext '2d'\n    newCtx.drawImage originalCanvas, x, y, width, height, 0, 0, width, height\n\n    if originalCanvas.originalWidth?\n      newCanvas.originalWidth = originalCanvas.originalWidth\n    if originalCanvas.originalHeight?\n      newCanvas.originalHeight = originalCanvas.originalHeight\n\n    out.send newCanvas\n    do callback\n    return\n"},
  "image/ExtractLightness": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'file-image-o'\n  c.description = 'Extract global lightness of a given image. Light images will return values greater than zero.'\n\n  c.outPorts.add 'lightness',\n    datatype: 'number'\n\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: ['canvas']\n    out: ['lightness']\n    forwardGroups: true\n    async: true\n  , (payload, groups, out, callback) ->\n    canvas = payload\n    ctx = canvas.getContext '2d'\n    imageData = ctx.getImageData 0, 0, canvas.width, canvas.height\n    data = imageData.data\n    lightPixels = 0\n    darkPixels = 0\n    # Middle intensity\n    threshold = 127\n\n    for i in [0...data.length] by 4\n      r = data[i]\n      g = data[i+1]\n      b = data[i+2]\n      max = Math.max(Math.max(r, g), b)\n      if max >= threshold\n        lightPixels += 1\n      else\n        darkPixels += 1\n    imageArea = canvas.width * canvas.height\n    lightness = (lightPixels - darkPixels) / imageArea\n    \n    out.send lightness\n    do callback\n    return\n"},
  "image/FindFeatureFreeAreas": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# Create NxM equally spaced points within @bounds\ncalculateStartingPoints = (bounds, segments) ->\n  points = []\n  for sx in [1..segments.x]\n    for sy in [1..segments.y]\n      x = bounds.w*(sx/(segments.x+1))\n      y = bounds.h*(sy/(segments.y+1))\n      points.push {x: x, y: y}\n  return points\n\n# Create sorted array for looking up points by their X and Y coordinates\n# Note: no deduplication, two indices may refer to same X or Y coordinate\nspatialSortedIndices = (corners) ->\n  indices =\n    x: [0...corners.length]\n    y: [0...corners.length]\n  sortByX = (a,b) ->\n    return 1 if corners[a].x > corners[b].x\n    return -1 if corners[a].x < corners[b].x\n    return 0\n  sortByY = (a,b) ->\n    return 1 if corners[a].y > corners[b].y\n    return -1 if corners[a].y < corners[b].y\n    return 0\n  indices.x.sort sortByX\n  indices.y.sort sortByY\n  return indices\n\n# Find the index of @point in @indices for given @axis\n# Returns -1 if point.axis is smaller than all corners, or corners.length if bigger\nfindIndexForPoint = (corners, indices, point) ->\n  findIndexAxis = (axis) ->\n    length = indices[axis].length\n    if point[axis] > corners[indices[axis][length-1]][axis]\n      return length\n    for i in [0...length]\n      idx = indices[axis][i]\n      if corners[idx][axis] > point[axis]\n        return i-1\n    return -1\n  r =\n    x: findIndexAxis 'x'\n    y: findIndexAxis 'y'\n  return r\n\n# Grow rectangle initially sized 0,0 at @point until @threshold corners have been hit\ngrowRectangle = (corners, indices, point, bounds, threshold) ->\n  if point.x > bounds.w or point.y > point.h\n    throw new Error \"Initial point is outside bounds\"\n\n  # Find where point is in our sorted list of corners\n  pointIndex = findIndexForPoint corners, indices, point\n\n  coordinateForIndex = (axis, index) ->\n    if index < 0\n      return { x: 0, y: 0 }\n    if index >= indices[axis].length\n      return { x: bounds.w, y: bounds.h }\n    idx = indices[axis][index]\n    p = corners[idx]\n    return p\n\n  pointInRect = (p, rect) ->\n    in_x = p.x >= rect.x0 and p.x <= rect.x1\n    in_y = p.y >= rect.y0 and p.y <= rect.y1\n    #console.log in_x, in_y\n    return in_x and in_y\n\n  r = { x0: point.x, x1: point.x, y0: point.y, y1: point.y }\n  \n  # Expand\n  i = {x: pointIndex.x, y: pointIndex.y}\n  while true\n    i.x=i.x+1\n    i.y=i.y+1\n    x = coordinateForIndex 'x', i.x\n    y = coordinateForIndex 'y', i.y\n    expand = false\n    if not pointInRect x, r\n      #console.log 'expanding X', x, r\n      r.x1 = x.x\n      #if x.y > r.y1\n        #r.y1 = x.y # TEMP: needed?\n      expand = true\n    if not pointInRect y, r\n      #console.log 'expanding Y', y, r\n      r.y1 = y.y\n      #if y.x > r.x1\n#        r.x1 = y.x\n      expand = true\n    break if not expand\n    break if i.x > indices.x.length\n    break if i.y > indices.y.length\n\n#  console.log 'One phase done!'\n  ###\n  # Expand lower right\n  i = {x: pointIndex.x, y: pointIndex.y}\n  while true\n    i.x=i.x-1\n    x = coordinateForIndex 'x', i.x\n    expand = false\n    console.log i.x, 0, x\n    if not pointInRect x, r\n      r.x0 = x.x\n      expand = true\n    i.y=i.y-1\n    y = coordinateForIndex 'y', i.y\n    console.log i.y, 0, y\n    if not pointInRect y, r\n      r.y0 = y.y\n      expand = true\n    break if not expand\n    break if i.x < 0\n    break if i.y < 0\n  ###\n  r = { x: r.x0, y: r.y0, width: r.x1-r.x0, height: r.y1-r.y0 }\n#  console.log r\n  return r\n\nfindRegions = (corners, bounds, seg) ->\n  if bounds.w > bounds.h\n    segments = { x: seg, y: Math.floor(seg*(bounds.w/bounds.h)) }\n  else\n    segments = { x: Math.floor(seg*(bounds.h/bounds.w)), y: seg }\n  \n  #console.log segments\n  threshold = 1\n  indices = spatialSortedIndices corners\n\n  regions = []\n  for point in calculateStartingPoints bounds, segments\n    region = growRectangle corners, indices, point, bounds, threshold\n    regions.push region\n\n  sortByArea = (a,b) ->\n    A = a.width*a.height\n    B = b.width*b.height\n    return 1 if A > B\n    return -1 if A < B\n    return 0\n  regions.sort sortByArea\n  return regions\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Extract feature corners of image (method: YAPE)'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'corners',\n    datatype: 'array'\n  c.inPorts.add 'width',\n    datatype: 'int'\n    control: true\n    default: 0\n  c.inPorts.add 'height',\n    datatype: 'int'\n    control: true\n    default: 0\n  c.inPorts.add 'segments',\n    datatype: 'int'\n    control: true\n    default: 4\n  c.outPorts.add 'areas',\n    datatype: 'array'\n  c.outPorts.add 'corners',\n    datatype: 'array'\n  c.forwardBrackets =\n    corners: ['areas', 'corners']\n  c.process (input, output) ->\n    return unless input.hasData 'corners'\n    return if input.attached('width').length and not input.hasData 'width'\n    return if input.attached('height').length and not input.hasData 'height'\n    return if input.attached('segments').length and not input.hasData 'segments'\n    width = 0\n    if input.hasData 'width'\n      width = parseInt input.getData 'width'\n    height = 0\n    if input.hasData 'height'\n      height = parseInt input.getData 'height'\n    segments = 4\n    if input.hasData 'segments'\n      segments = parseInt input.getData 'segments'\n\n    corners = input.getData 'corners'\n    b = { w: width, h: height }\n    s = segments\n    regions = findRegions corners, b, s\n    output.send\n      areas: regions\n      corners: corners\n    output.done()\n    return\n\nexports.calculateStartingPoints = calculateStartingPoints\nexports.spatialSortedIndices = spatialSortedIndices\nexports.findIndexForPoint = findIndexForPoint\nexports.growRectangle = growRectangle\n"},
  "image/FindFreeRectangles": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nvalidGrid = []\n\n# Common font sizes (max font width * line height)\nfontAreas =\n  large: 1280 # 32 * 40\n  medium: 384 # 16 * 24\n  small: 228 # 12 * 19\n\narea = (x, y, xx, yy) ->\n  return (xx-x) * (yy-y)\n\nallOnes = (x, y, xx, yy) ->\n  for i in [x...xx]\n    for j in [y...yy]\n      if validGrid[i][j] == 0\n        return false\n  true\n\npointInPolygon = (point, polygon) ->\n  x = point[0]\n  y = point[1]\n  hit = false\n  i = 0\n  j = polygon.length - 1\n  while i < polygon.length\n    xi = polygon[i][0]\n    yi = polygon[i][1]\n    xj = polygon[j][0]\n    yj = polygon[j][1]\n    intersect = ((yi > y) != (yj > y)) and (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n    if intersect\n      hit = not hit\n    j = i++\n  hit\n\npolygonInPolygon = (polygon, otherPolygon) ->\n  x = polygon[0]\n  y = polygon[1]\n  stepX = polygon[2]\n  stepY = polygon[3]\n  points = [\n    [\n      x\n      y\n    ]\n    [\n      x + stepX\n      y\n    ]\n    [\n      x\n      y + stepY\n    ]\n    [\n      x + stepX\n      y + stepY\n    ]\n  ]\n  for i in [0...points.length]\n    if pointInPolygon(points[i], otherPolygon) is true\n      return true\n  false\n\ncompute = (canvas, polygon, threshold, max) ->\n  {width, height} = canvas\n\n  # How many rows/cols on the grid\n  n = 30\n  stepI = Math.ceil width/n\n  stepJ = Math.ceil height/n\n  rectangles = []\n\n  # Initialize the binary matrix with zeros\n  for i in [0...n]\n    validGrid[i] = []\n    for j in [0...n]\n      validGrid[i][j] = 0\n\n  # Create a binary matrix of valid (non-salient) cells\n  for i in [0...n]\n    for j in [0...n]\n      if polygonInPolygon([i*stepI, j*stepJ, stepI, stepJ], polygon) == false\n        validGrid[i][j] = 1\n  # Collect valid cells moving a pivot around the matrix. Select the\n  # non-salient regions with areas smaller than some threshold.\n  validRects = []\n  pi = 0\n  while pi < n\n    pj = 0\n    while pj < n\n      pivot = [pi, pj]\n      i = pivot[0]\n      while i < n\n        j = pivot[1]\n        while j < n\n          realArea = area(pivot[0] * stepI, pivot[1] * stepJ, i * stepI, j * stepJ)\n          if (allOnes(pivot[0], pivot[1], i, j) == true) and (realArea > threshold)\n            validRects.push\n              x: pivot[0]\n              y: pivot[1]\n              width: i - pivot[0]\n              height: j - pivot[1]\n              area: realArea\n          j += 1\n        i += 1\n      pj += 1\n    pi += 1\n\n  if validRects.length is 0\n    return []\n\n  # Sort by area\n  validRects.sort (a, b) ->\n    keyA = a.area\n    keyB = b.area\n    if keyA > keyB\n      return -1\n    if keyA < keyB\n      return 1\n    0\n\n  # We have the rectangles\n  result = []\n  i = 0\n  while (i < max) and (i < validRects.length)\n    validRect = validRects[i]\n    validArea = validRect.area\n    r =\n      x: validRect.x * stepI\n      y: validRect.y * stepJ\n      width: validRect.width * stepI\n      height: validRect.height * stepJ\n      text:\n        large: Math.round validArea / fontAreas.large\n        medium: Math.round validArea / fontAreas.medium\n        small: Math.round validArea / fontAreas.small\n    result.push r\n    i += 1\n\n  return result\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'file-image-o'\n  c.description = 'Find bounding rectangles of regions outside of the given polygon.'\n\n  c.outPorts.add 'out',\n    datatype: 'array'\n\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'polygon',\n    datatype: 'array'\n  c.inPorts.add 'threshold',\n    datatype: 'number'\n    required: yes\n  c.inPorts.add 'max',\n    datatype: 'number'\n    required: yes\n\n  noflo.helpers.WirePattern c,\n    in: ['canvas', 'polygon']\n    params: ['threshold', 'max']\n    out: 'out'\n    forwardGroups: true\n    async: true\n  , (payload, groups, out, callback) ->\n    {canvas, polygon} = payload\n    {threshold, max} = c.params\n\n    validRects = compute canvas, polygon, threshold, max\n\n    out.send validRects\n    do callback\n    return\n"},
  "image/GetBorderlessBox": {"language":"coffeescript","source":"noflo = require 'noflo'\n\ndiffBetweenNeighbourPixels = (array) ->\n  count = 0\n  max = 0\n  prev = array[0]\n\n  for element in array\n    diff = Math.abs element - prev\n    count += diff\n    prev = element\n    if diff > max\n      max = diff\n\n  mean: count / array.length\n  max: max\n\naverage = (array) ->\n  return 0 if array.length is 0\n  sum = array.reduce (s,i) -> s += i\n  sum / array.length\n\nisHomogeneous = (array, threshold) ->\n  diff = diffBetweenNeighbourPixels array\n  if diff.mean <= threshold.mean and\n  diff.max <= threshold.max\n    true\n  else\n    false\n\nisBorder = (array, prev, threshold) ->\n  avg = Math.abs average(array) - average(prev)\n  if avg > threshold.avg\n    true\n  else\n    false\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Extract a bounding box with top and bottom borders removed (according to a certain threshold)'\n  c.icon = 'file-image-o'\n  c.inPorts = new noflo.InPorts\n    canvas:\n      datatype: 'object'\n    mean:\n      datatype: 'number'\n      description: 'Mean difference between neighbours at same row'\n    max:\n      datatype: 'number'\n      description: 'Maximal difference between neighbours at same row'\n    avg:\n      datatype: 'number'\n      description: 'Average difference between columns\\' neighbours'\n  c.outPorts = new noflo.OutPorts\n    rectangle:\n      datatype: 'object'\n    error:\n      datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'canvas'\n    params: ['mean', 'max', 'avg']\n    out: 'rectangle'\n    forwardGroups: yes\n    async: yes\n  , (canvas, groups, out, callback) ->\n    unless canvas?.width > 0 and canvas?.height > 0\n      return callback new Error \"Error when trying to extract a bounding box. The canvas is missing.\"\n\n    ctx = canvas.getContext '2d'\n    imageData = ctx.getImageData 0, 0, canvas.width, canvas.height\n    data = imageData.data\n    c.params.mean = 0.1 unless c.params.mean\n    c.params.max = 10 unless c.params.max\n    c.params.avg = 10 unless c.params.avg\n    threshold = c.params\n    diffPercentual = 0.25\n    maxPercentualCrop = 0.75\n    percentualConsideredBorder = 0.05\n\n    # Convert to grayscale\n    gray = []\n    for i in [0...data.length] by 4\n      [r, g, b] = [data[i], data[i+1], data[i+2]]\n      conversion = 0.2126*r + 0.7152*g + 0.0722*b\n      gray.push conversion\n\n    bbox =\n      x: 0\n      y: 0\n      width: canvas.width\n      height: canvas.height\n\n    # Iterate through the upper lines\n    prev = gray.slice 0, canvas.width\n    for line in [canvas.width...gray.length] by canvas.width\n      next = gray.slice line, line + canvas.width\n      if isHomogeneous prev, threshold\n        bbox.y += 1\n        if isBorder prev, next, threshold\n          break\n        prev = next\n      else\n        break\n\n    # Iterate through the bottom lines\n    prev = gray.slice gray.length - canvas.width, gray.length\n    for line in [gray.length-canvas.width...0] by -canvas.width\n      next = gray.slice line - canvas.width, line\n      if isHomogeneous prev, threshold\n        bbox.height -= 1\n        if isBorder prev, next, threshold\n          break\n        prev = next\n      else\n        break\n\n    # Iterate through the left columns\n    prev = []\n    for col in [0...gray.length] by canvas.width\n      prev.push gray[col]\n    for column in [1...canvas.width]\n      next = []\n      for pos in [column...gray.length] by canvas.width\n        next.push gray[pos]\n      if isHomogeneous prev, threshold\n        bbox.x += 1\n        if isBorder prev, next, threshold\n          break\n        prev = next\n      else\n        break\n\n    # Iterate through the right columns\n    prev = []\n    for col in [gray.length - 1..0] by -canvas.width\n      prev.push gray[col]\n    for column in [1...canvas.width]\n      next = []\n      for pos in [gray.length - 1 - column..0] by -canvas.width\n        next.push gray[pos]\n      if isHomogeneous prev, threshold\n        bbox.width -= 1\n        if isBorder prev, next, threshold\n          break\n        prev = next\n      else\n        break\n\n    croppedBbox =\n      x: 0\n      y: 0\n      width: canvas.width\n      height: canvas.height\n\n    # Crop if there is not too much difference between top and bottom borders\n    if (Math.abs bbox.y - (canvas.height - bbox.height)) <\n        (Math.max bbox.y, (canvas.height - bbox.height)) * diffPercentual\n      croppedBbox.y = bbox.y\n      croppedBbox.height = bbox.height - croppedBbox.y\n\n    # Crop if there is not too much difference between left and right borders\n    if (Math.abs bbox.x - (canvas.width - bbox.width)) <\n        (Math.max bbox.x, (canvas.width - bbox.width)) * diffPercentual\n      croppedBbox.x = bbox.x\n      croppedBbox.width = bbox.width - croppedBbox.x\n\n    # Calculate maximum variation in each direction\n    verticalVariation = Math.max bbox.y, canvas.height - croppedBbox.height\n    horizontalVariation = Math.max bbox.x, canvas.width - croppedBbox.width\n\n    newLength = (croppedBbox.height - croppedBbox.y) *\n      (croppedBbox.width - croppedBbox.x)\n\n    # Do not crop if:\n    # - The new image size is low than a certain maxPercentualCrop\n    if (newLength < ((1.0 - maxPercentualCrop) * gray.length)) or\n        # - There are horizontal AND vertical borders\n        ((verticalVariation > percentualConsideredBorder * canvas.height) and\n        (horizontalVariation > percentualConsideredBorder * canvas.width)) or\n        # - All the image was cropped\n        croppedBbox.width < 0 or croppedBbox.height < 0\n      croppedBbox =\n        x: 0\n        y: 0\n        width: canvas.width\n        height: canvas.height\n\n    out.send croppedBbox\n    do callback\n  c\n"},
  "image/GetCannyEdges": {"language":"coffeescript","source":"noflo = require 'noflo'\njsfeat = require 'jsfeat'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Canny edge detector.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'low',\n    datatype: 'number'\n    control: true\n    default: 20\n  c.inPorts.add 'high',\n    datatype: 'number'\n    control: true\n    default: 50\n  c.inPorts.add 'kernel',\n    datatype: 'number'\n    control: true\n    default: 6\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    return if input.attached('low').length and not input.hasData 'low'\n    return if input.attached('high').length and not input.hasData 'high'\n    return if input.attached('kernel').length and not input.hasData 'kernel'\n    low = if input.hasData('low') then input.getData('low') else 20\n    high = if input.hasData('high') then input.getData('high') else 50\n    kernel = if input.hasData('kernel') then input.getData('kernel') else 6\n    canvas = input.getData 'canvas'\n    \n    context = canvas.getContext '2d'\n    img = context.getImageData 0, 0, canvas.width, canvas.height\n\n    img_u8 = new jsfeat.matrix_t canvas.width, canvas.height, jsfeat.U8_t|jsfeat.C1_t\n    jsfeat.imgproc.grayscale img.data, img_u8.data\n    jsfeat.imgproc.gaussian_blur img_u8, img_u8, @kernel, 0\n    jsfeat.imgproc.canny img_u8, img_u8, @low, @high\n\n    img_u32 = new Uint32Array img.data.buffer\n\n    alpha = (0xff << 24)\n    i = img_u8.cols*img_u8.rows\n    pix = 0\n    while --i >= 0\n      pix = img_u8.data[i]\n      img_u32[i] = alpha | (pix << 16) | (pix << 8) | pix\n\n    context.putImageData img, 0, 0\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/GetColors": {"language":"coffeescript","source":"noflo = require 'noflo'\nRgbQuant = require 'rgbquant'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Extract the dominant colors of an image'\n  c.icon = 'file-image-o'\n  c.inPorts = new noflo.InPorts\n    canvas:\n      datatype: 'object'\n    css:\n      datatype: 'boolean'\n      default: false\n    colors:\n      datatype: 'number'\n      default: 10\n    method:\n      datatype: 'int'\n      default: 1\n      values: [1, 2]\n  c.outPorts = new noflo.OutPorts\n    colors:\n      datatype: 'array'\n    canvas:\n      datatype: 'array'\n    error:\n      datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'canvas'\n    out: ['colors', 'canvas']\n    params: ['css', 'colors', 'method']\n    forwardGroups: yes\n    async: yes\n  , (data, groups, out, callback) ->\n    unless data?.height? > 0 and data?.width? > 0\n      return callback new Error \"Error when trying to get colors: canvas is undefined.\"\n\n    c.params.colors = 10 unless c.params.colors?\n    c.params.method = 1 unless c.params.method?\n    try\n      quant = new RgbQuant\n        colors: c.params.colors\n        method: c.params.method\n        initColors: 4096\n      # analyze histograms\n      quant.sample(data)\n      # build palette\n      outputTuples = true\n      noSort = true\n      colors = quant.palette outputTuples, noSort\n      if c.params.css\n        colors = colors.map (color) -> \"rgb(#{color[0]}, #{color[1]}, #{color[2]})\"\n    catch e\n      out.canvas.send data\n      out.colors.send []\n      console.warn \"Error when trying to get colors: #{e} Sending an empty array.\"\n      do callback\n      return\n    out.canvas.send data\n    out.colors.send colors\n    do callback\n    return\n"},
  "image/GetColorsFromCentroids": {"language":"coffeescript","source":"noflo = require 'noflo'\n\ngetColorFromPath = (imageData, width, path) ->\n  # Find the centroid\n  sumx = 0\n  sumy = 0\n  paths = path.items\n  n = paths.length\n  for point in paths\n    sumx += point.x\n    sumy += point.y\n  centroid =\n    x: Math.floor sumx / n\n    y: Math.floor sumy / n\n\n  # Get color from canvas data\n  offset = (centroid.x + centroid.y * width) * 4\n  r = imageData.data[offset]\n  g = imageData.data[offset+1]\n  b = imageData.data[offset+2]\n\n  \"rgb(#{r}, #{g}, #{b})\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'file-image-o'\n  c.description = 'Extract color of path\\'s centroid.'\n\n  c.outPorts.add 'colors',\n    datatype: 'array'\n\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'paths',\n    datatype: 'array'\n\n  noflo.helpers.WirePattern c,\n    in: ['canvas', 'paths']\n    out: ['colors']\n    forwardGroups: true\n    async: true\n  , (payload, groups, out, callback) ->\n    {canvas, paths} = payload\n\n    ctx = canvas.getContext '2d'\n    imageData = ctx.getImageData 0, 0, canvas.width, canvas.height\n\n    colors = []\n    for path in paths\n      colors.push getColorFromPath(imageData, canvas.width, path)\n\n    out.send colors\n    do callback\n    return\n"},
  "image/GetColorsFromRectangles": {"language":"coffeescript","source":"noflo = require 'noflo'\nRgbQuant = require 'rgbquant'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'file-image-o'\n  c.description = 'Extract colors from rectangle regions of a canvas.'\n\n  c.outPorts.add 'out',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.inPorts.add 'rect',\n    datatype: 'array'\n  c.inPorts.add 'css',\n    datatype: 'boolean'\n    required: yes\n  c.inPorts.add 'colors',\n    datatype: 'number'\n    required: yes\n\n  noflo.helpers.WirePattern c,\n    in: ['canvas', 'rect']\n    params: ['css', 'colors']\n    out: 'out'\n    forwardGroups: true\n    async: true\n  , (payload, groups, out, callback) ->\n    {canvas, rect} = payload\n    {css, colors} = c.params\n\n    # Stiching pieces to 200x200 for now\n    if noflo.isBrowser()\n      piece = document.createElement 'canvas'\n      piece.width = 200\n      piece.height = 200\n    else\n      Canvas = require('noflo-canvas').canvas\n      piece = new Canvas 200, 200\n    ctx = piece.getContext '2d'\n\n    pieces = []\n    for r in rect\n      ctx.drawImage canvas, r.x, r.y, r.width, r.height, 0, 0, 200, 200\n      pieces.push piece\n\n    try\n      outputTuples = true\n      noSort = true\n      piecesColors = []\n      for piece in pieces\n        quant = new RgbQuant\n          colors: colors\n          method: 1\n          initColors: 4096\n        quant.sample(piece)\n        extractedColors = quant.palette outputTuples, noSort\n        if css\n          extractedColors = extractedColors.map (color) -> \"rgb(#{color[0]}, #{color[1]}, #{color[2]})\"\n\n        piecesColors.push extractedColors\n    catch e\n      callback e\n      return\n\n    out.send piecesColors\n    do callback\n    return\n"},
  "image/GetFeaturesYAPE": {"language":"coffeescript","source":"noflo = require 'noflo'\njsfeat = require 'jsfeat'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Extract feature corners of image (method: YAPE)'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'canvas',\n    datatype: 'object'\n  c.outPorts.add 'corners',\n    datatype: 'array'\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    canvas: ['canvas', 'corners']\n  c.process (input, output) ->\n    return unless input.hasData 'canvas'\n    canvas = input.getData 'canvas'\n    context = canvas.getContext '2d'\n    img = context.getImageData 0, 0, canvas.width, canvas.height\n\n    jsfeat.yape06.laplacian_threshold = 30\n    jsfeat.yape06.min_eigen_value_threshold = 25\n\n    img_u8 = new jsfeat.matrix_t canvas.width, canvas.height, jsfeat.U8_t|jsfeat.C1_t\n    jsfeat.imgproc.grayscale img.data, canvas.width, canvas.height, img_u8\n    jsfeat.imgproc.box_blur_gray img_u8, img_u8, 2, 0\n\n    # TODO: write component which can render points onto the image\n    corners = []\n    pixels = canvas.width*canvas.height\n    for i in [0...pixels]\n      corners.push new jsfeat.keypoint_t 0,0,0,\n    count = jsfeat.yape06.detect img_u8, corners\n\n    output.sendDone\n      corners: corners.slice 0, count\n      canvas: canvas\n    return\n"},
  "image/GetOrientation": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'file-image-o'\n  c.description = 'Get orientation from image dimensions'\n\n  c.inPorts.add 'dimensions',\n    datatype: 'object'\n  c.outPorts.add 'orientation',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'dimensions'\n    out: 'orientation'\n    forwardGroups: true\n    async: true\n  , (packet, groups, out, callback) ->\n    unless packet?.width > 0\n      return callback new Error \"Dimension is missing width\"\n    unless packet?.height > 0\n      return callback new Error \"Dimension is missing height\"\n    orientation = 'square'\n    if packet.width > packet.height\n      orientation = 'landscape'\n    if packet.width < packet.height\n      orientation = 'portrait'\n    out.send\n      orientation: orientation\n    do callback\n    return\n"},
  "image/GetPresetCurve": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# Instagram filter from http://matthewruddy.github.io/jQuery-filter.me\npresets =\n '1977': {'a':[0,1,3,4,6,7,9,10,12,13,14,16,17,19,20,22,23,25,26,28,29,31,32,34,35,37,38,39,41,42,44,45,46,48,49,50,52,53,54,55,57,58,59,60,61,62,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,125,126,127,128,129,130,131,132,133,134,135,136,137,137,138,139,140,141,142,143,144,145,146,146,147,148,149,150,151,152,153,153,154,155,156,157,158,159,160,160,161,162,163,164,165,166,166,167,168,169,170,171,172,172,173,174,175,176,177,178,178,179,180,181,182,183,183,184,185,186,187,188,188,189,190,191,192,193,193,194,195,196,197,198,199,199,200,201,202,203,204,204,205,206,207,208,209,209,210,211,212,213,214,215,215,216,217,218,219,220,221,221,222,223,224,225,226,227,227,228,229,230,231,232,233,233,234,235,236,237,238,239,240,241,241,242,243,244,245,246,247,248,249,250,250,251,252,253,254,255,255], 'r':[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,60,60,61,62,62,63,63,64,64,65,66,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,76,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,103,104,105,106,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,125,126,127,128,129,130,131,133,134,135,136,137,138,140,141,142,143,144,146,147,148,149,151,152,153,154,156,157,158,160,161,162,164,165,166,168,169,170,172,173,175,176,177,179,180,182,183,185,186,188,189,191,192,193,194,196,197,198,199,200,201,202,203,204,204,205,206,206,207,208,208,209,209,210,210,211,211,212,212,212,213,213,213,213,213,214,214,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,214,214,214,214,214,214,214,214,214,214,213,213,213,213,213,213,213,212,212,212,212,212], 'g':[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,45,46,46,46,47,47,48,48,48,49,49,50,50,51,52,52,53,54,54,55,56,57,58,59,60,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,160,161,162,163,164,166,167,168,169,171,172,173,174,175,176,178,179,180,181,182,183,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,203,205,206,207,208,209,210,211,212,214,215,216,217,218,220,221,222,223,225,226,227,228,230,231,232,233,235,236,237,239,240,241,242,244,245,246,247,249,250,251,252,254,255,255], 'b':[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,47,47,47,48,48,48,48,49,49,49,50,50,50,51,51,51,52,52,53,53,54,54,55,56,56,57,58,59,60,61,62,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,96,97,98,99,100,102,103,104,105,107,108,109,110,112,113,114,115,117,118,119,120,122,123,124,126,127,128,130,131,133,134,135,137,138,140,141,143,144,145,147,148,149,151,152,153,155,156,157,159,160,161,162,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,188,189,190,191,192,193,193,194,195,195,196,196,196,197,197,197,197,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,198,198,198,198,198,198,197,197,197,197,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198]}\n 'brannan': {'a':[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255], 'r':[50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,52,53,54,55,56,57,59,60,62,63,64,66,67,68,69,70,71,71,72,73,73,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,83,83,84,85,86,87,88,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,118,119,120,121,122,124,125,126,128,129,130,132,133,134,136,137,139,140,141,143,144,146,147,149,150,152,153,154,156,157,159,160,162,163,164,166,167,169,170,171,173,174,175,177,178,179,181,182,183,185,186,187,189,190,192,193,195,196,198,199,201,203,204,206,207,209,210,212,213,215,216,217,219,220,221,223,224,225,226,227,228,229,230,231,232,233,234,235,236,236,237,238,239,239,240,241,241,242,243,243,244,244,245,246,246,247,247,248,248,249,249,249,250,250,251,251,251,252,252,252,253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254], 'g':[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,4,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,36,38,39,40,41,43,44,45,47,48,50,51,53,54,56,57,59,61,62,64,66,68,70,72,74,76,78,80,82,84,87,89,91,93,95,97,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,161,163,165,167,168,170,172,173,175,176,178,179,181,182,183,184,186,187,188,189,190,191,192,193,193,194,195,196,196,197,198,198,199,200,200,201,202,202,203,203,204,204,205,205,206,207,207,208,208,209,210,210,211,212,212,213,214,214,215,216,217,217,218,219,219,220,221,221,222,222,223,224,224,225,225,226,226,227,228,228,229,229,229,230,230,231,231,232,232,233,233,233,234,234,234,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,245,245,245,246,246,247,247,247,248,248,249,249,250,250,251,251,252,252,252], 'b':[48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,50,50,50,51,51,51,52,52,53,53,54,54,54,55,55,56,56,57,57,58,58,59,60,60,61,61,62,62,63,64,64,65,66,66,67,68,68,69,70,71,71,72,73,74,75,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,132,133,134,135,136,137,138,139,140,141,141,142,143,144,145,146,146,147,148,148,149,150,151,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,176,177,178,178,179,180,181,181,182,183,183,184,184,185,185,185,186,186,187,187,187,188,188,188,189,189,190,190,191,191,192,193,193,194,195,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,211,212,213,214,214,215,216,216,217,218,218,219,219,220,220,221,222,222,222,223,223,224,224,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225]}\n 'gotham': {'a':[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255], 'r':[50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,52,53,54,55,56,57,59,60,62,63,64,66,67,68,69,70,71,71,72,73,73,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,83,83,84,85,86,87,88,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,118,119,120,121,122,124,125,126,128,129,130,132,133,134,136,137,139,140,141,143,144,146,147,149,150,152,153,154,156,157,159,160,162,163,164,166,167,169,170,171,173,174,175,177,178,179,181,182,183,185,186,187,189,190,192,193,195,196,198,199,201,203,204,206,207,209,210,212,213,215,216,217,219,220,221,223,224,225,226,227,228,229,230,231,232,233,234,235,236,236,237,238,239,239,240,241,241,242,243,243,244,244,245,246,246,247,247,248,248,249,249,249,250,250,251,251,251,252,252,252,253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254], 'g':[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,4,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,36,38,39,40,41,43,44,45,47,48,50,51,53,54,56,57,59,61,62,64,66,68,70,72,74,76,78,80,82,84,87,89,91,93,95,97,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,161,163,165,167,168,170,172,173,175,176,178,179,181,182,183,184,186,187,188,189,190,191,192,193,193,194,195,196,196,197,198,198,199,200,200,201,202,202,203,203,204,204,205,205,206,207,207,208,208,209,210,210,211,212,212,213,214,214,215,216,217,217,218,219,219,220,221,221,222,222,223,224,224,225,225,226,226,227,228,228,229,229,229,230,230,231,231,232,232,233,233,233,234,234,234,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,245,245,245,246,246,247,247,247,248,248,249,249,250,250,251,251,252,252,252], 'b':[48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,50,50,50,51,51,51,52,52,53,53,54,54,54,55,55,56,56,57,57,58,58,59,60,60,61,61,62,62,63,64,64,65,66,66,67,68,68,69,70,71,71,72,73,74,75,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,132,133,134,135,136,137,138,139,140,141,141,142,143,144,145,146,146,147,148,148,149,150,151,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,176,177,178,178,179,180,181,181,182,183,183,184,184,185,185,185,186,186,187,187,187,188,188,188,189,189,190,190,191,191,192,193,193,194,195,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,211,212,213,214,214,215,216,216,217,218,218,219,219,220,220,221,222,222,222,223,223,224,224,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225]}\n 'hefe': {'a':[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255], 'r':[32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,34,35,36,38,39,41,43,45,48,50,52,54,56,58,60,62,64,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,96,98,100,102,104,106,108,110,112,114,116,117,119,121,123,125,126,128,130,132,133,135,137,139,140,142,144,146,147,149,151,152,154,155,157,158,160,161,163,164,166,167,168,170,171,172,173,175,176,177,178,179,180,181,182,184,185,186,187,188,189,190,190,191,192,193,194,195,196,197,197,198,199,200,201,201,202,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,221,222,222,223,223,224,224,225,225,225,226,226,227,227,228,228,228,229,229,230,230,231,231,231,232,232,233,233,233,234,234,235,235,235,236,236,236,237,237,238,238,238,239,239,239,240,240,240,241,241,242,242,242,243,243,243,244,244,245,245,245,246,246,247,248,248,249,249,250,250,251,251,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252], 'g':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,19,20,21,23,24,25,27,28,30,31,33,34,36,37,39,40,42,44,45,47,49,50,52,54,56,57,59,61,63,65,67,69,71,73,75,78,80,82,85,87,89,92,94,97,99,102,104,106,109,111,114,116,118,121,123,125,127,129,131,133,135,137,139,141,143,145,146,148,150,152,154,156,157,159,161,163,164,166,168,169,171,173,174,176,178,179,181,182,184,185,187,188,190,191,192,194,195,196,197,198,199,200,201,202,203,204,205,205,206,207,207,208,209,209,210,210,211,211,211,212,212,213,213,213,214,214,215,215,216,216,216,217,217,218,218,219,219,220,220,220,221,221,222,222,222,223,223,224,224,225,225,225,226,226,227,227,228,228,228,229,229,230,230,231,231,232,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,239,240,240,241,241,242,242,243,244,244,245,246,246,247,248,249,249,250,250,251,251,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252], 'b':[2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,8,8,9,9,9,10,10,11,12,12,13,13,14,15,15,16,17,17,18,19,19,20,21,22,23,24,24,25,26,27,28,29,30,32,33,34,35,36,38,39,40,42,43,45,47,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,87,89,91,93,95,96,98,100,101,103,105,107,108,110,112,113,115,117,118,120,122,123,125,127,128,130,131,133,135,136,138,140,141,143,145,146,148,149,151,153,154,156,158,159,161,163,164,166,167,169,170,171,173,174,175,177,178,179,180,182,183,184,185,186,187,189,190,191,192,193,194,195,195,196,197,198,198,199,200,200,201,201,202,202,203,203,204,204,204,205,205,205,206,206,206,207,207,207,207,208,208,209,209,209,210,210,211,211,211,212,212,213,213,214,214,214,215,215,216,216,216,217,217,218,218,218,219,219,220,220,220,221,221,222,222,222,223,223,224,224,225,225,226,226,227,227,227,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228]}\n 'lordkelvin': {'a':[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255], 'r':[43,44,46,47,49,50,52,53,55,56,58,59,61,62,64,65,67,69,70,72,73,75,77,78,80,81,83,85,86,88,90,91,93,95,96,98,100,102,103,105,107,109,111,112,114,116,118,120,121,123,125,127,129,130,132,134,136,137,139,141,142,144,146,147,149,151,152,154,155,157,158,160,162,163,165,166,168,169,171,172,174,175,176,178,179,180,182,183,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,201,202,203,204,204,205,206,207,207,208,209,210,210,211,212,212,213,214,214,215,216,217,217,218,219,219,220,221,222,222,223,224,224,225,225,226,227,227,228,228,229,229,229,230,230,231,231,232,232,232,233,233,233,234,234,235,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,243,244,244,244,245,245,245,245,245,246,246,246,246,246,247,247,247,247,247,248,248,248,248,248,248,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254], 'g':[36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,39,39,40,40,41,41,42,43,43,44,45,46,47,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,155,156,157,158,158,159,160,160,161,161,162,163,163,164,164,165,165,166,166,167,167,168,168,168,169,169,170,171,171,172,172,173,173,174,174,175,175,176,177,177,178,178,179,179,180,180,181,181,182,182,182,183,183,184,184,184,185,185,185,186,186,186,186,187,187,187,187,188,188,188,188,188,189,189,189,189,189,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,195,195,195,195], 'b':[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,71,71,71,72,72,73,73,73,74,74,75,75,76,76,77,78,78,79,79,80,80,81,81,82,82,82,83,83,84,84,84,85,85,86,86,86,87,87,87,88,88,88,89,89,90,90,90,91,91,91,92,92,93,93,93,94,94,95,95,96,96,96,97,97,98,99,99,100,100,101,101,102,102,102,103,103,103,104,104,104,105,105,105,106,106,106,106,107,107,107,107,108,108,108,108,109,109,109,110,110,110,111,111,111,111,112,112,112,113,113,113,114,114,114,115,115,115,115,116,116,116,116,117,117,117,117,117,118,118,118,118,118,118,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124]}\n 'nashville': {'a':[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255], 'r':[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,58,58,59,59,60,61,62,63,64,65,66,67,68,69,71,72,73,75,76,78,79,81,82,84,85,87,88,90,91,93,95,96,98,100,102,104,106,108,110,113,115,117,120,122,124,127,129,131,133,136,138,140,142,144,146,148,150,152,154,155,157,159,160,162,164,165,167,168,170,171,173,174,175,177,178,179,181,182,183,185,186,187,189,190,191,192,194,195,196,197,198,200,201,202,203,204,205,206,208,209,209,210,211,212,213,214,215,216,217,217,218,219,220,220,221,222,223,223,224,225,226,226,227,228,228,229,230,230,231,231,232,233,233,234,234,235,235,236,237,237,238,238,239,239,240,240,240,241,241,242,242,243,243,243,244,244,245,245,245,246,246,246,247,247,247,248,248,248,248,249,249,249,249,250,250,250,250,251,251,251,251,251,252,252,252,252,252,253,253,253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255], 'g':[38,39,39,40,41,41,42,42,43,44,44,45,46,46,47,48,49,50,51,52,53,55,56,57,59,60,61,63,64,65,67,68,69,71,72,73,74,76,77,78,80,81,82,84,85,86,87,89,90,91,93,94,95,97,98,99,101,102,103,104,106,107,108,110,111,112,114,115,116,118,119,121,122,123,125,126,128,129,130,132,133,134,136,137,138,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,158,159,160,161,162,163,163,164,165,166,166,167,168,169,169,170,171,172,172,173,174,175,176,176,177,178,179,180,181,181,182,183,184,185,186,187,187,188,189,189,190,191,191,192,193,193,194,194,195,195,196,197,197,198,198,199,199,200,200,201,201,202,202,202,203,203,204,204,205,205,205,206,206,207,207,207,208,208,208,209,209,209,210,210,210,211,211,211,212,212,212,213,213,213,213,214,214,214,214,215,215,215,215,216,216,216,216,216,217,217,217,217,217,218,218,218,218,218,218,219,219,219,219,219,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221], 'b':[97,98,98,99,99,100,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,110,110,111,112,113,114,114,115,116,116,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,124,125,125,126,126,127,127,127,128,128,129,129,129,130,130,131,131,132,132,132,133,133,134,134,135,135,136,136,136,137,137,138,138,139,139,139,140,140,141,141,142,142,142,143,143,144,144,144,145,145,146,146,147,147,147,148,148,149,149,150,150,151,151,151,152,152,153,153,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,161,161,161,162,162,162,162,163,163,163,163,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,168,168,168,168,168,168,169,169,169,169,169,170,170,170,170,171,171,171,171,171,172,172,172,172,172,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176]}\n 'xproii': {'a':[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255], 'r':[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,4,4,5,5,5,6,7,7,8,8,9,9,10,11,11,12,13,14,14,15,16,17,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,37,38,39,41,42,43,45,46,48,49,51,52,54,55,57,58,60,62,63,65,67,68,70,72,74,76,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,172,174,176,178,180,182,184,186,188,189,191,193,194,196,198,199,201,202,204,205,207,208,209,211,212,214,215,216,217,219,220,221,222,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,239,240,241,242,243,243,244,245,246,246,247,248,248,249,249,250,250,251,251,252,252,252,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255], 'g':[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,10,10,11,12,12,13,14,14,15,16,17,18,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,39,40,41,43,44,45,47,48,50,51,53,54,56,57,59,61,62,64,66,67,69,71,73,75,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,161,163,165,167,169,171,173,175,176,178,180,182,183,185,187,189,190,192,193,195,197,198,200,201,203,204,206,207,209,210,211,213,214,216,217,218,219,221,222,223,224,226,227,228,229,230,231,232,233,234,235,236,237,237,238,239,240,240,241,242,243,243,244,244,245,246,246,247,247,248,248,249,249,250,250,250,251,251,252,252,252,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255], 'b':[24,25,26,27,28,28,29,30,31,32,33,34,35,35,36,37,38,39,40,41,41,42,43,44,45,45,46,47,48,49,49,50,51,52,53,53,54,55,56,56,57,58,59,59,60,61,62,62,63,64,64,65,66,67,67,68,69,70,70,71,72,73,73,74,75,76,77,77,78,79,80,81,81,82,83,84,85,86,86,87,88,89,90,91,91,92,93,94,95,96,96,97,98,99,100,101,101,102,103,104,105,106,107,107,108,109,110,111,112,113,114,114,115,116,117,118,119,119,120,121,122,123,124,124,125,126,127,127,128,129,129,130,130,131,131,132,132,133,134,134,135,136,137,138,138,139,140,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,162,163,164,165,165,166,167,168,168,169,170,171,171,172,173,173,174,175,176,176,177,178,178,179,180,181,182,182,183,184,185,185,186,187,188,189,189,190,191,192,193,193,194,195,196,197,197,198,199,200,200,201,202,203,204,204,205,206,206,207,208,208,209,210,210,211,212,212,213,214,215,215,216,217,218,218,219,220,221,221,222,223,224,225,226,226,227,228,229]}\n 'newkelvin': {'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255],'b': [0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 30, 31, 32, 32, 33, 34, 34, 35, 36, 36, 37, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 81, 82, 83, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 162, 163, 165, 166, 168, 169, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 214, 215, 217, 219, 220, 222, 223, 225, 226, 228, 230, 231, 233, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 252, 253, 255],'g': [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 250, 251, 252, 253, 254, 255],'r': [0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 244, 245, 246, 247, 247, 248, 249, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]}\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Get a preset for a RGBA adjustment curve.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'presetname',\n    datatype: 'string'\n  c.outPorts.add 'curve',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    presetname: ['curve']\n  c.process (input, output) ->\n    return unless input.hasData 'presetname'\n    payload = input.getData 'presetname'\n    unless presets[payload]\n      output.done new Error \"Preset '#{payload}' not available\"\n      return\n    output.sendDone\n      curve: presets[payload]\n    return\n"},
  "image/ImageToCanvas": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Convert image to canvas.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'image',\n    datatype: 'object'\n  c.outPorts.add 'canvas',\n    datatype: 'object'\n  c.forwardBrackets =\n    image: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'image'\n    image = input.getData 'image'\n    \n    if noflo.isBrowser()\n      canvas = document.createElement 'canvas'\n      canvas.width = image.width\n      canvas.height = image.height\n    else\n      Canvas = require('noflo-canvas').canvas\n      canvas = new Canvas image.width, image.height\n\n    context = canvas.getContext '2d'\n    context.drawImage image, 0, 0\n\n    output.sendDone\n      canvas: canvas\n    return\n"},
  "image/ToFullscale": {"language":"coffeescript","source":"noflo = require 'noflo'\nsuperagent = require 'superagent'\nURI = require 'urijs'\n\ntimeout_HEAD = 15000\n\nconvertFlickr = (url) ->\n  # See docs in https://www.flickr.com/services/api/misc.urls.html\n  format = url.match /_(.)\\.(gif|png|jpg)/\n  if format\n    # If is a downloading image, return original\n    return url.replace(/_(.)\\.(gif|png|jpg)/, '.$2') if format[1] is 'd'\n\n    # We already have the original\n    return url if format[1] is 'o'\n\n    # Another format, return large\n    return url.replace(/_(.)\\.(gif|png|jpg)/, '_b.$2')\n\n  # Non-specified format, return large\n  return url.replace(/\\.(gif|png|jpg)/, '_b.$1')\n\nconvertWordpress = (url) ->\n  return url.replace(/\\?w=[\\d]+/, '')\n\nconvertWikimedia = (url) ->\n  return url unless url.match /\\/commons\\/thumb\\//\n  url.replace /\\/commons\\/(thumb)\\/([0-9])\\/([0-9][a-z])\\/(.*)[\\\\\\/][^\\\\\\/]*/, '/commons/$2/$3/$4'\n\n# Returns original\nconvertImgflo = (url) ->\n  return url unless url.match /\\/graph\\//\n  uri = URI url\n  params = uri.search true\n  return url if not params?.input\n  return params.input\n\n# Change the size params\n# https://en.gravatar.com/site/implement/images/\nconvertGravatar = (url) ->\n  return url unless url.match /\\/avatar\\//\n  newSize = '512'\n  parts = URI.parse url\n  q = URI.parseQuery parts.query\n  q.s = newSize if q.s?\n  q.size = newSize if q.size?\n  if not (q.s? or q.size)?\n    q.size = newSize\n  parts.query = URI.buildQuery q\n  return URI.build parts\n\ntryFindingFullscale = (url) ->\n  return url.replace /[-_](small|thumbnail|thumb|tm)/, ''\n\n# Flickr redirects to a photo_unavailable image if the new URL do not exists\ntryRedirect = (original, redirected) ->\n  if (original.indexOf('staticflickr.com') isnt -1) and\n  (redirected.indexOf('photo_unavailable') isnt -1)\n    return original\n  return redirected\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Convert an image URL to potential URL of full-scale image'\n\n  c.inPorts.add 'url',\n    datatype: 'string'\n  c.outPorts.add 'url',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'url'\n    out: 'url'\n    async: true\n    forwardGroups: true\n  , (url, groups, out, callback) ->\n    newUrl = url\n    unless url\n      return callback new Error 'No image source provided'\n    unless typeof url is 'string'\n      return callback new Error 'URL is not a string'\n\n    if url.indexOf('staticflickr.com') isnt -1\n      newUrl = convertFlickr url, callback\n\n    if url.indexOf('wordpress.com') isnt -1\n      newUrl = convertWordpress url, callback\n\n    if url.indexOf('wikimedia.org') isnt -1\n      newUrl = convertWikimedia url, callback\n\n    if url.indexOf('imgflo') isnt -1\n      newUrl = convertImgflo url, callback\n\n    if url.indexOf('gravatar.com') isnt -1\n      newUrl = convertGravatar url, callback\n\n    if url.match /[-_](small|thumb)/\n      newUrl = tryFindingFullscale url, callback\n\n    if newUrl isnt url\n      # Verify that the newUrl exists\n      superagent.head newUrl\n      .redirects(1)\n      .timeout(timeout_HEAD)\n      .end (err, res) ->\n        # If the response is not 200, send the original URL\n        unless res and res.statusCode is 200\n          out.send url\n          do callback\n          return\n        # Use redirection URL\n        if res.redirects?.length > 0\n          newUrl = tryRedirect url, res.redirects[0]\n        out.send newUrl\n        do callback\n    else\n      out.send url\n      do callback\n    return\n"},
  "image/VideoToCanvas": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nif noflo.isBrowser()\n  requestAnimationFrame =\n    window.requestAnimationFrame       ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame    ||\n    window.oRequestAnimationFrame      ||\n    window.msRequestAnimationFrame     ||\n    (callback, element) ->\n      window.setTimeout( ->\n        callback(+new Date())\n      , 1000 / 60)\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Convert video to canvas.'\n  c.icon = 'file-image-o'\n  c.inPorts.add 'video',\n    description: 'video element to draw to canvas'\n    datatype: 'object'\n    required: true\n  c.inPorts.add 'canvas',\n    description: '(optional) if not hit, component will create canvas'\n    datatype: 'object'\n    required: false\n  c.outPorts.add 'canvas',\n    description: 'will send canvas with each video frame drawn'\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    video: ['canvas']\n  c.process (input, output) ->\n    return unless input.hasData 'video'\n    return if input.attached('canvas').length and not input.hasData 'canvas'\n    video = input.getData 'video'\n    unless video?.tagName is 'VIDEO'\n      output.done new Error 'Video must be a VIDEO DOM element'\n      return\n    if input.hasData 'canvas'\n      canvas = input.getData 'canvas'\n    else\n      unless video.videoWidth\n        # Metadata not loaded yet\n        output.done 'Video width not available'\n        return\n      if noflo.isBrowser()\n        canvas = document.createElement 'canvas'\n        canvas.width = video.videoWidth\n        canvas.height = video.videoHeight\n      else\n        Canvas = require('noflo-canvas').canvas\n        canvas = new Canvas video.videoWidth, video.videoHeight\n    context = canvas.getContext '2d'\n\n    lastTime = -1\n    shutdownNextFrame = false\n    extractFrame = ->\n      if lastTime is video.currentTime\n        # Frame hasn't advanced, wait more\n        requestAnimationFrame extractFrame\n        return\n      if video.currentTime < lastTime\n        # Video is looping, bail out\n        output.done()\n        return\n      if video.currentTime is video.duration\n        # Video finished\n        output.done()\n        return\n      lastTime = video.currentTime\n      context.drawImage video, 0, 0\n      output.send\n        canvas: canvas\n      requestAnimationFrame extractFrame\n\n    # Get first frame\n    do extractFrame\n    return\n"},
  "image/CreateImage": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n# @name CreateImage\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.description = 'Loads an image from given url, sends the element'\n  c.icon = 'picture-o'\n\n  c.inPorts.add 'url',\n    datatype: 'string'\n    description: 'Image URL'\n  c.inPorts.add 'crossorigin',\n    datatype: 'string'\n    description: 'crossorigin Anonymous for CORS-enabled server'\n    required: false\n  c.outPorts.add 'image',\n    datatype: 'object'\n    description: 'Loaded image'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'url'\n    params: 'crossorigin'\n    out: 'image'\n    forwardGroups: true\n    async: true\n  , (url, groups, out, callback) ->\n    image = new Image()\n    image.crossOrigin = c.params.crossorigin if c.params.crossorigin\n    image.onload = () ->\n      out.beginGroup url\n      out.send image\n      out.endGroup()\n      do callback\n      return\n    image.onerror = (err) ->\n      err.url = url\n      return callback err\n    image.src = url\n    return\n"},
  "image/Measure": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n# @name Measure\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.description = 'Load image from URL and get dimensions'\n  c.icon = 'picture-o'\n\n  c.inPorts.add 'url',\n    datatype: 'string'\n    description: 'URL to load image'\n  c.outPorts.add 'dimensions',\n    datatype: 'object'\n    description: 'Image dimensions'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  noflo.helpers.WirePattern c,\n    in: 'url'\n    out: 'dimensions'\n    forwardGroups: true\n    async: true\n  , (url, groups, out, callback) ->\n    image = new Image()\n    image.onload = () ->\n      if (image.naturalWidth? and image.naturalWidth is 0) or image.width is 0\n        image.onerror new Error \"#{url} didn't come back as a valid image.\"\n        return\n      dimensions =\n        width: image.width\n        height: image.height\n      out.beginGroup url\n      out.send dimensions\n      out.endGroup()\n      do callback\n    image.onerror = (err) ->\n      err.url = url\n      return callback err\n    image.src = url\n    return\n"},
  "indexeddb/AbortTransaction": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Abort an IndexedDB transaction'\n  c.inPorts.add 'transaction',\n    datatype: 'object'\n  c.outPorts.add 'transaction',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    transaction: ['transaction', 'error']\n  c.process (input, output) ->\n    return unless input.hasData 'transaction'\n    transaction = input.getData 'transaction'\n    transaction.onerror = (err) ->\n      output.done err\n    transaction.onabort = (err) ->\n      output.sendDone\n        transaction: transaction\n    transaction.abort()\n"},
  "indexeddb/BeginTransaction": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Start an IndexedDB transaction'\n  c.inPorts.add 'stores',\n    datatype: 'string'\n  c.inPorts.add 'db',\n    datatype: 'object'\n  c.inPorts.add 'mode',\n    datatype: 'string'\n    default: 'readwrite'\n    control: true\n  c.outPorts.add 'transaction',\n    datatype: 'object'\n  c.outPorts.add 'db',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.outPorts.add 'complete',\n    datatype: 'bang'\n  c.process (input, output) ->\n    return unless input.hasData 'db', 'stores'\n    mode = if input.hasData('mode') then input.getData('mode') else 'readwrite'\n    [db, stores] = input.getData 'db', 'stores'\n    if typeof stores is 'string'\n      stores = stores.split ','\n    try\n      transaction = db.transaction stores, mode\n    catch e\n      return output.done e\n    transaction.oncomplete = ->\n      output.send\n        complete: true\n      transaction.onerror = null\n      transaction.oncomplete = null\n      output.done()\n    transaction.onerror = (err) ->\n      output.done err\n    output.send\n      transaction: transaction\n    output.send\n      db: db\n"},
  "indexeddb/Close": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Close an IndexedDB database'\n  c.inPorts.add 'db',\n    datatype: 'object'\n  c.outPorts.add 'closed',\n    datatype: 'bang'\n  c.process (input, output) ->\n    return unless input.hasData 'db'\n    db = input.getData 'db'\n    db.onclose = ->\n      output.sendDone\n        closed: true\n    db.close()\n"},
  "indexeddb/CreateIndex": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Add an index to an IndexedDB database'\n  c.inPorts.add 'store',\n    datatype: 'object'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.inPorts.add 'keypath',\n    datatype: 'string'\n  c.inPorts.add 'unique',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.inPorts.add 'multientry',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.outPorts.add 'index',\n    datatype: 'object'\n  c.outPorts.add 'store',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'store', 'name', 'keypath'\n    unique = if input.hasData('unique') then input.getData('unique') else false\n    multiEntry = if input.hasData('multientry') then input.getData('multientry') else false\n    [store, name, keyPath] = input.getData 'store', 'name', 'keypath'\n    store.onerror = (err) ->\n      output.done err\n    index = store.createIndex name, keyPath,\n      unique: unique\n      multiEntry: multiEntry\n    store.onerror = null\n    output.send\n      index: index\n    output.sendDone\n      store: store\n"},
  "indexeddb/CreateStore": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Add an object store to an IndexedDB database'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.inPorts.add 'db',\n    datatype: 'object'\n  c.inPorts.add 'keypath',\n    datatype: 'string'\n    control: true\n  c.inPorts.add 'autoincrement',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.outPorts.add 'store',\n    datatype: 'object'\n  c.outPorts.add 'db',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'name', 'db'\n    keyPath = if input.hasData('keypath') then input.getData('keypath') else ''\n    autoIncrement = if input.hasData('autoincrement') then input.getData('autoincrement') else false\n    [name, db] = input.getData 'name', 'db'\n    db.transaction.onerror = (err) ->\n      output.done err\n    store = db.createObjectStore name,\n      keyPath: keyPath\n      autoIncrement: autoIncrement\n    db.transaction.onerror = null\n    output.send\n      store: store\n    output.send\n      db: db\n    output.done()\n"},
  "indexeddb/Delete": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Remove an item from an IndexedDB database'\n  c.icon = 'trash'\n  c.inPorts.add 'store',\n    datatype: 'object'\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'store',\n    datatype: 'object'\n  c.outPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'store', 'key'\n    [store, key] = input.getData 'store', 'key'\n    req = store.delete key\n    req.onerror = (err) ->\n      output.done err\n    req.onsuccess = (e) ->\n      output.send\n        store: store\n      output.send\n        key: key\n      output.done()\n"},
  "indexeddb/DeleteDatabase": {"language":"coffeescript","source":"noflo = require 'noflo'\nindexedDB = require '../vendor/IndexedDB'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Delete an IndexedDB database'\n  c.icon = 'trash'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.outPorts.add 'deleted',\n    datatype: 'bang'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'name'\n    name = input.getData 'name'\n    req = indexedDB.deleteDatabase name\n    req.onerror = (err) ->\n      output.done err\n    req.onsuccess = ->\n      output.sendDone\n        deleted: true\n"},
  "indexeddb/DeleteStore": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Delete an object store from an IndexedDB database'\n  c.icon = 'trash'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.inPorts.add 'db',\n    datatype: 'object'\n  c.outPorts.add 'db',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'name', 'db'\n    [name, db] = input.getData 'name', 'db'\n    db.transaction.onerror = (err) ->\n      output.done err\n    db.deleteObjectStore name\n    db.transaction.onerror = null\n    output.sendDone\n      db: db\n"},
  "indexeddb/Get": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Get an entry from an IndexedDB database'\n  c.inPorts.add 'store',\n    datatype: 'object'\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'store',\n    datatype: 'object'\n  c.outPorts.add 'item',\n    datatype: 'all'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'store', 'key'\n    [store, key] = input.getData 'store', 'key'\n    req = store.get key\n    output.send\n      store: store\n    req.onerror = (err) ->\n      output.done err\n    req.onsuccess = (e) ->\n      output.sendDone\n        item: e.target.result\n"},
  "indexeddb/GetIndex": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Get an index from an IndexedDB database'\n  c.inPorts.add 'store',\n    datatype: 'object'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.outPorts.add 'index',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'store', 'name'\n    [store, name] = input.getData 'store', 'name'\n    store.onerror = (err) ->\n      output.done err\n    index = store.index name\n    store.onerror = null\n    output.sendDone\n      index: index\n"},
  "indexeddb/GetStore": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Get an object store from an IndexedDB database'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.inPorts.add 'transaction',\n    datatype: 'object'\n  c.outPorts.add 'store',\n    datatype: 'object'\n  c.outPorts.add 'transaction',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'name', 'transaction'\n    [name, transaction] = input.getData 'name', 'transaction'\n    transaction.onerror = (err) ->\n      output.done err\n    store = transaction.objectStore name\n    transaction.onerror = null\n    output.send\n      store: store\n    output.sendDone\n      transaction: transaction\n"},
  "indexeddb/Open": {"language":"coffeescript","source":"noflo = require 'noflo'\nindexedDB = require '../vendor/IndexedDB'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Open an IndexedDB database'\n  c.inPorts.add 'name',\n    datatype: 'string'\n  c.inPorts.add 'version',\n    datatype: 'integer'\n  c.outPorts.add 'upgrade',\n    datatype: 'object'\n  c.outPorts.add 'db',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'name', 'version'\n    [name, version] = input.getData 'name', 'version'\n    req = indexedDB.open name, parseInt version\n    req.onerror = (err) ->\n      output.done err\n    req.onupgradeneeded = (e) ->\n      output.send\n        upgrade:\n          oldVersion: e.oldVersion\n          newVersion: parseInt version\n          db: e.target.result\n    req.onsuccess = (e) ->\n      output.sendDone\n        db: e.target.result\n"},
  "indexeddb/Put": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Store an object into an IndexedDB store'\n  c.inPorts.add 'store',\n    datatype: 'object'\n  c.inPorts.add 'value',\n    datatype: 'all'\n  c.outPorts.add 'store',\n    datatype: 'object'\n  c.outPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'value',\n    datatype: 'all'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'store', 'value'\n    [store, value] = input.getData 'store', 'value'\n    req = store.put value\n    output.send\n      store: store\n    req.onerror = (err) ->\n      output.done err\n    req.onsuccess = (e) ->\n      output.send\n        key: e.target.result\n      output.sendDone\n        value: value\n"},
  "indexeddb/Query": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'search'\n  c.description = 'Query a store in an IndexedDB database'\n  c.inPorts.add 'store',\n    datatype: 'object'\n  c.inPorts.add 'range',\n    datatype: 'object'\n  c.inPorts.add 'all',\n    datatype: 'bang'\n  c.outPorts.add 'item',\n    datatype: 'all'\n  c.outPorts.add 'range',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'store'\n    step = (e) ->\n      cursor = e.target.result\n      return output.done() unless cursor\n      output.send\n        item: cursor.value\n      cursor.continue()\n    if input.hasData 'all'\n      [store, all] = input.getData 'store', 'all'\n      req = store.openCursor()\n      req.onerror = (err) ->\n        output.done err\n      req.onsuccess = step\n      return\n    if input.hasData 'range'\n      [store, range] = input.getData 'store', 'range'\n      output.send\n        range: range\n      req = store.openCursor range\n      req.onerror = (err) ->\n        output.done err\n      req.onsuccess = step\n"},
  "indexeddb/QueryFrom": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'search'\n  c.description = 'Query starting from a key in store in an IndexedDB database'\n  c.inPorts.add 'value',\n    datatype: 'all'\n  c.inPorts.add 'including',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.outPorts.add 'range',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'value'\n    value = input.getData 'value'\n    including = if input.hasData('including') then input.getData('including') else false\n    range = IDBKeyRange.lowerBound value, including\n    output.sendDone\n      range: range\n"},
  "indexeddb/QueryOnly": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'search'\n  c.description = 'Query only a key in store in an IndexedDB database'\n  c.inPorts.add 'value',\n    datatype: 'all'\n  c.outPorts.add 'range',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'value'\n    value = input.getData 'value'\n    range = IDBKeyRange.only value\n    output.sendDone\n      range: range\n"},
  "indexeddb/QueryTo": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @platform noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'search'\n  c.description = 'Query up to a key in store in an IndexedDB database'\n  c.inPorts.add 'value',\n    datatype: 'all'\n  c.inPorts.add 'including',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.outPorts.add 'range',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'value'\n    value = input.getData 'value'\n    including = if input.hasData('including') then input.getData('including') else false\n    range = IDBKeyRange.upperBound value, including\n    output.sendDone\n      range: range\n"},
  "indexeddb/UpgradeRouter": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'code-fork'\n  c.description = 'Route upgrades between IndexeDB database versions'\n  c.inPorts.add 'upgrade',\n    datatype: 'object'\n  c.outPorts.add 'versions',\n    datatype: 'object'\n    addressable: true\n  c.outPorts.add 'missed',\n    datatype: 'object'\n  c.forwardBrackets =\n    upgrade: ['versions', 'missed']\n  c.process (input, output) ->\n    return unless input.hasData 'upgrade'\n    upgrade = input.getData 'upgrade'\n    missed = false\n    migration = 0\n    while migration < upgrade.newVersion\n      if migration < upgrade.oldVersion\n        migration++\n        continue\n      unless c.outPorts.versions.isAttached migration\n        migration++\n        missed = true\n        continue\n      output.send\n        versions: new noflo.IP 'data', upgrade.db,\n          index: migration\n      migration++\n    return output.done() unless missed\n    output.sendDone\n      missed: upgrade.db\n"},
  "interaction/Focus": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'i-cursor'\n  c.description = 'focus element'\n  c.inPorts.add 'element',\n    datatype: 'object'\n    description: 'element to be focused'\n    control: true\n  c.inPorts.add 'trigger',\n    datatype: 'bang'\n    description: 'trigger focus'\n  c.outPorts.add 'out',\n    datatype: 'bang'\n  c.process (input, output) ->\n    return unless input.hasData 'element', 'trigger'\n    element = input.getData 'element'\n    input.getData 'trigger'\n    window.setTimeout ->\n      element.focus()\n      output.sendDone\n        out: true\n    , 0\n"},
  "interaction/ListenChange": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen to changes on an input element'\n  c.icon = 'hourglass'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'value',\n    datatype: 'object'\n  c.elements = []\n  c.tearDown = (callback) ->\n    for element in c.elements\n      element.el.removeEventListener 'change', element.listener, false\n      element.ctx.deactivate()\n    c.elements = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'element'\n    data =\n      el: input.getData 'element'\n      listener: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        output.send\n          value: event.target.value\n      ctx: context\n    data.el.addEventListener 'change', data.listener, false\n    c.elements.push data\n    return\n"},
  "interaction/ListenDrag": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description =  'Listen to drag events on a DOM element'\n  c.icon = 'arrows'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'start',\n    datatype: 'object'\n  c.outPorts.add 'movey',\n    datatype: 'number'\n  c.outPorts.add 'movex',\n    datatype: 'number'\n  c.outPorts.add 'end',\n    datatype: 'object'\n  c.elements = []\n  c.tearDown = (callback) ->\n    for element in c.elements\n      element.el.removeEventListener 'dragstart', element.dragstart, false\n      element.el.removeEventListener 'drag', element.dragmove, false\n      element.el.removeEventListener 'dragend', element.dragend, false\n      element.ctx.deactivate()\n    c.elements = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'element'\n    data =\n      el: input.getData 'element'\n      dragstart: (event) ->\n        event.stopPropagation()\n        output.send\n          start: event\n      dragmove: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        output.send\n          movex: event.clientX\n          movey: event.clientY\n      dragend: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        output.send\n          end: event\n      ctx: context\n    data.el.addEventListener 'dragstart', data.dragstart, false\n    data.el.addEventListener 'drag', data.dragmove, false\n    data.el.addEventListener 'dragend', data.dragend, false\n    c.elements.push data\n    return\n"},
  "interaction/ListenHash": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen for hash changes in browser\\'s URL bar'\n  c.icon = 'slack'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n    description: 'Start listening for hash changes'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n    description: 'Stop listening for hash changes'\n  c.outPorts.add 'initial',\n    datatype: 'string'\n  c.outPorts.add 'change',\n    datatype: 'string'\n  c.current = null\n  c.subscriber = null\n  unsubscribe = ->\n    return unless c.subscriber\n    window.removeEventListener 'hashchange', c.subscriber.callback, false\n    c.subscriber.ctx.deactivate()\n    c.subscriber = null\n  c.tearDown = (callback) ->\n    c.current = null\n    do unsubscribe\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'start'\n      input.getData 'start'\n      # Ensure previous subscription is ended\n      do unsubscribe\n      sendHash = (port) ->\n        oldHash = c.current\n        c.current = window.location.href.split('#')[1] or ''\n        if oldHash\n          output.send\n            change: new noflo.IP 'openBracket', oldHash\n        payload = {}\n        payload[port] = c.current\n        output.send payload\n        if oldHash\n          output.send\n            change: new noflo.IP 'closeBracket', oldHash\n      c.subscriber =\n        callback: (event) ->\n          sendHash 'change'\n        ctx: context\n      # Send initial\n      sendHash 'initial'\n      window.addEventListener 'hashchange', c.subscriber.callback, false\n      return\n    if input.hasData 'stop'\n      input.getData 'stop'\n      do unsubscribe\n      output.done()\n      return\n"},
  "interaction/ListenKeyboard": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen for key presses on a given DOM element'\n  c.icon = 'keyboard-o'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'stop',\n    datatype: 'object'\n  c.outPorts.add 'keypress',\n    datatype: 'integer'\n  c.elements = []\n  unsubcribe = (element) ->\n    element.el.removeEventListener 'keypress', element.listener, false\n    element.ctx.deactivate()\n  c.tearDown = (callback) ->\n    unsubscribe element for element in c.elements\n    c.elements = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'element'\n      data =\n        el: input.getData 'element'\n        listener: (event) ->\n          output.send\n            keypress: event.keyCode\n        ctx: context\n      data.el.addEventListener 'keypress', data.listener, false\n      c.elements.push data\n      return\n    if input.hasData 'stop'\n      element = input.getData 'stop'\n      ctx = null\n      for el in c.elements\n        continue unless el.el is element\n        ctx = el\n      return unless ctx\n      unsubscribe ctx\n      output.done()\n"},
  "interaction/ListenKeyboardShortcuts": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen for keyboard shortcuts and route them'\n  c.icon = 'keyboard-o'\n  c.inPorts.add 'keys',\n    datatype: 'array'\n  c.inPorts.add 'ignoreinput',\n    datatype: 'boolean'\n    default: true\n    control: true\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n  c.outPorts.add 'shortcut',\n    datatype: 'bang'\n    addressable: true\n  c.outPorts.add 'missed',\n    datatype: 'integer'\n  c.subscriber = null\n  unsubscribe = ->\n    return unless c.subscriber\n    document.removeEventListener 'keydown', c.subscriber.callback, false\n    c.subscriber.ctx.deactivate()\n    c.subscriber = null\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'keys'\n      keys = input.getData 'keys'\n\n      # Ensure previous subscription is ended\n      do unsubscribe\n\n      # Older version of this component used string input\n      keys = keys.split ',' if typeof keys is 'string'\n\n      # We allow some common keyboard shortcuts to be passed as strings\n      for key, index in keys\n        switch key\n          when '-' then keys[index] = 189\n          when '=' then keys[index] = 187\n          when '0' then keys[index] = 48\n          when 'a' then keys[index] = 65\n          when 'x' then keys[index] = 88\n          when 'c' then keys[index] = 67\n          when 'v' then keys[index] = 86\n          when 'z' then keys[index] = 90\n          when 'r' then keys[index] = 82\n\n      ignoreInput = if input.hasData('ignoreinput') then input.getData('ignoreinput') else true\n\n      c.subscriber =\n        callback: (event) ->\n          return unless event.ctrlKey or event.metaKey\n          return if event.target.tagName is 'TEXTAREA' and ignoreInput\n          return if event.target.tagName is 'INPUT' and ignoreInput\n          return if String(event.target.contentEditable) is 'true' and ignoreInput\n          route = keys.indexOf event.keyCode\n          if route is -1\n            output.send\n              missed: event.keyCode\n            return\n          event.preventDefault()\n          event.stopPropagation()\n          output.send\n            shortcut: new noflo.IP 'data', event.keyCode,\n              index: route\n        ctx: context\n      document.addEventListener 'keydown', c.subscriber.callback, false\n      return\n    if input.hasData 'stop'\n      input.getData 'stop'\n      do unsubscribe\n      output.done()\n      return\n"},
  "interaction/ListenMouse": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'mouse-pointer'\n  c.description = 'Listen to mouse events on a DOM element'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'click',\n    datatype: 'object'\n  c.outPorts.add 'dblclick',\n    datatype: 'object'\n  c.elements = []\n  c.tearDown = (callback) ->\n    for element in c.elements\n      element.el.removeEventListener 'click', element.click, false\n      element.el.removeEventListener 'dblclick', element.dblclick, false\n      element.ctx.deactivate()\n    c.elements = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'element'\n    data =\n      el: input.getData 'element'\n      click: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        output.send\n          click: event\n      dblclick: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        output.send\n          dblclick: event\n      ctx: context\n    data.el.addEventListener 'click', data.click, false\n    data.el.addEventListener 'dblclick', data.dblclick, false\n    c.elements.push data\n    return\n"},
  "interaction/ListenPointer": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen to pointer events on a DOM element'\n  c.icon = 'pencil-square-o'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.inPorts.add 'action',\n    datatype: 'string'\n    default: 'none'\n    control: true\n  events = [\n    'down'\n    'up'\n    'cancel'\n    'move'\n    'over'\n    'out'\n    'enter'\n    'leave'\n  ]\n  for event in events\n    c.outPorts.add event,\n      datatype: 'object'\n      description: \"Sends event on pointer#{event}\"\n  c.elements = []\n  c.tearDown = (callback) ->\n    for element in c.elements\n      if element.el.removeAttribute\n        element.el.removeAttribute 'touch-action'\n      for event in events\n        element.el.removeEventListener \"pointer#{event}\", element[\"pointer#{event}\"], false\n      element.ctx.deactivate()\n    c.elements = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'element'\n    action = if input.hasData('action') then input.getData('action') else 'none'\n    data =\n      el: input.getData 'element'\n      ctx: context\n    data.el.setAttribute 'touch-action', action\n    events.forEach (event) ->\n      data[\"pointer#{event}\"] = (ev) ->\n        ev.preventDefault()\n        ev.stopPropagation()\n        payload = {}\n        payload[event] = ev.target.value\n        output.send payload\n      data.el.addEventListener \"pointer#{event}\", data[\"pointer#{event}\"], false\n    c.elements.push data\n    return\n"},
  "interaction/ListenResize": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen to window resize events'\n  c.icon = 'desktop'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n    description: 'Start listening for screen resizes'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n    description: 'Stop listening for screen resizes'\n  c.outPorts.add 'width',\n    datatype: 'number'\n  c.outPorts.add 'height',\n    datatype: 'number'\n  c.subscriber = null\n  unsubscribe = ->\n    return unless c.subscriber\n    window.removeEventListener 'resize', c.subscriber.callback, false\n    c.subscriber.ctx.deactivate()\n    c.subscriber = null\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'start'\n      input.getData 'start'\n      # Ensure previous subscription is ended\n      do unsubscribe\n      c.subscriber =\n        callback: (event) ->\n          output.send\n            width: window.innerWidth\n            height: window.innerHeight\n        ctx: context\n      output.send\n        width: window.innerWidth\n        height: window.innerHeight\n      window.addEventListener 'resize', c.subscriber.callback, false\n      return\n    if input.hasData 'stop'\n      input.getData 'stop'\n      do unsubscribe\n      output.done()\n      return\n"},
  "interaction/ListenScroll": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen to scroll events on the browser window'\n  c.icon = 'arrows-v'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n    description: 'Start listening for hash changes'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n    description: 'Stop listening for hash changes'\n  c.outPorts.add 'top',\n    datatype: 'number'\n  c.outPorts.add 'bottom',\n    datatype: 'number'\n  c.outPorts.add 'left',\n    datatype: 'number'\n  c.outPorts.add 'right',\n    datatype: 'number'\n  c.subscriber = null\n  unsubscribe = ->\n    return unless c.subscriber\n    window.removeEventListener 'scroll', c.subscriber.callback, false\n    c.subscriber.ctx.deactivate()\n    c.subscriber = null\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'start'\n      input.getData 'start'\n      # Ensure previous subscription is ended\n      do unsubscribe\n      c.subscriber =\n        callback: (event) ->\n          top = window.scrollY\n          left = window.scrollX\n          output.send\n            top: top\n            bottom: top + window.innerHeight\n            left: left\n            right: left.window.innerWidth\n        ctx: context\n      window.addEventListener 'scroll', c.subscriber.callback, false\n      return\n    if input.hasData 'stop'\n      input.getData 'stop'\n      do unsubscribe\n      output.done()\n      return\n"},
  "interaction/ListenSpeech": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen for user\\'s microphone and recognize phrases'\n  c.icon = 'microphone'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n    description: 'Start listening for hash changes'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n    description: 'Stop listening for hash changes'\n  c.outPorts.add 'result',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.subscriber = null\n  unsubscribe = ->\n    return unless c.subscriber\n    do c.subscriber.recognition.stop\n    do c.subscriber.ctx.deactivate\n    c.subscriber = null\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'start'\n      input.getData 'start'\n      # Ensure previous subscription is ended\n      do unsubscribe\n      unless window.webkitSpeechRecognition\n        output.done new Error 'Speech recognition support not available'\n        return\n      c.subscriber =\n        sent: []\n        callback: (event) ->\n          for result, idx in event.results\n            continue unless result.isFinal\n            if c.subscriber.sent.indexOf(idx) isnt -1\n              continue\n            output.send\n              result: result[0].transcript\n            c.subscriber.sent.push idx\n        error: (err) ->\n          output.send\n            error: err\n        ctx: context\n      c.subscriber.recognition = new window.webkitSpeechRecognition\n      c.subscriber.recognition.continuous = true\n      c.subscriber.recognition.start()\n      c.subscriber.recognition.onresult = c.subscriber.callback\n      c.subscriber.recognition.onerror = c.subscriber.error\n      return\n    if input.hasData 'stop'\n      input.getData 'stop'\n      do unsubscribe\n      output.done()\n      return\n"},
  "interaction/ListenTouch": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen to touch events on a DOM element'\n  c.icon = 'hand-o-up'\n  c.inPorts.add 'element',\n    datatype: 'object'\n  c.outPorts.add 'start',\n    datatype: 'object'\n  c.outPorts.add 'movex',\n    datatype: 'number'\n  c.outPorts.add 'movey',\n    datatype: 'number'\n  c.outPorts.add 'end',\n    datatype: 'object'\n  c.elements = []\n  c.tearDown = (callback) ->\n    for element in c.elements\n      element.el.removeEventListener 'touchstart', element.touchstart, false\n      element.el.removeEventListener 'touchmove', element.touchmove, false\n      element.el.removeEventListener 'touchend', element.touchend, false\n      element.ctx.deactivate()\n    c.elements = []\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'element'\n    data =\n      el: input.getData 'element'\n      touchstart: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        return unless event.changedTouches\n        return unless event.changedTouches.length\n        for touch, idx in event.changedTouches\n          output.send\n            start: new noflo.IP 'data', event,\n              touch: idx\n      touchmove: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        return unless event.changedTouches\n        return unless event.changedTouches.length\n        for touch, idx in event.changedTouches\n          output.send\n            movex: new noflo.IP 'data', touch.pageX,\n              touch: idx\n            movey: new noflo.IP 'data', touch.pageY,\n              touch: idx\n      touchend: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n        return unless event.changedTouches\n        return unless event.changedTouches.length\n        for touch, idx in event.changedTouches\n          output.send\n            end: new noflo.IP 'data', event,\n              touch: idx\n      ctx: context\n    data.el.addEventListener 'touchstart', data.touchstart, false\n    data.el.addEventListener 'touchmove', data.touchmove, false\n    data.el.addEventListener 'touchend', data.touchend, false\n    c.elements.push data\n    return\n"},
  "interaction/ReadCoordinates": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Read the coordinates from a DOM event'\n  c.icon = 'map-marker'\n  c.inPorts.add 'event',\n    datatype: 'object'\n  c.outPorts.add 'screen',\n    datatype: 'object'\n  c.outPorts.add 'client',\n    datatype: 'object'\n  c.outPorts.add 'page',\n    datatype: 'object'\n  c.forwardBrackets =\n    event: ['screen', 'client', 'page']\n  c.process (input, output) ->\n    return unless input.hasData 'event'\n    event = input.getData 'event'\n    output.sendDone\n      screen:\n        x: event.screenX\n        y: event.screenY\n      client:\n        x: event.clientX\n        y: event.clientY\n      page:\n        x: event.pageX\n        y: event.pageY\n"},
  "interaction/ReadGamepad": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Read the state of a gamepad'\n  c.icon = 'gamepad'\n  c.inPorts.add 'gamepad',\n    datatype: 'integer'\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.lastTimestamps = {}\n  c.tearDown = (callback) ->\n    c.lastTimestamps = {}\n    do callback\n  c.process (input, output) ->\n    return unless input.hasData 'gamepad'\n    gamepad = input.getData 'gamepad'\n    unless navigator.webkitGetGamepads\n      output.done new Error \"No WebKit Gamepad API available\"\n      return\n    gamepadState = navigator.webkitGetGamepads()[gamepad]\n    unless gamepadState\n      output.done new Error \"Gamepad '#{gamepad}' not available\"\n    if c.lastTimestamps[gamepad] = gamepadState.timestamp\n      # No change\n      output.done()\n      return\n    c.lastTimestamps[gamepad] = gamepadState.timestamp\n    output.sendDone\n      out: gamepadState\n"},
  "interaction/SetHash": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Set the hash in browser\\'s URL bar'\n  c.icon = 'slack'\n  c.inPorts.add 'hash',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.process (input, output) ->\n    return unless input.hasData 'hash'\n    hash = input.getData 'hash'\n    window.location.hash = \"##{hash}\"\n    output.sendDone\n      out: hash\n"},
  "localstorage/GetItem": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Get an item from LocalStorage'\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'item',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    key: ['item', 'error']\n  c.process (input, output) ->\n    return unless input.hasData 'key'\n    key = input.getData 'key'\n    value = localStorage.getItem key\n    unless value\n      output.done new Error \"#{key} not found\"\n      return\n    output.sendDone\n      item: value\n    return\n"},
  "localstorage/ListAdd": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Add an item to a list'\n  c.inPorts.add 'list',\n    datatype: 'string'\n    control: true\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'key',\n    datatype: 'string'\n  c.forwardBrackets =\n    key: ['key']\n  c.process (input, output) ->\n    return unless input.hasData 'list', 'key'\n    [listKey, key] = input.getData 'list', 'key'\n    list = localStorage.getItem listKey\n    if list\n      items = list.split ','\n    else\n      items = []\n    if items.indexOf(key) is -1\n      items.push key\n      localStorage.setItem listKey, items.join ','\n    output.sendDone\n      key: key\n    return\n"},
  "localstorage/ListGet": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Get an item from a list'\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'items',\n    datatype: 'string'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    key: ['items', 'error']\n  c.process (input, output) ->\n    return unless input.hasData 'key'\n    key = input.getData 'key'\n    value = localStorage.getItem key\n    unless value\n      output.done new Error \"#{key} not found\"\n      return\n    list = value.split ','\n    output.send\n      items: new noflo.IP 'openBracket', key\n    for item in list\n      output.send\n        items: item\n    output.send\n      items: new noflo.IP 'closeBracket', key\n    output.done()\n    return\n"},
  "localstorage/ListRemove": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Remove an item from a list'\n  c.icon = 'trash'\n  c.inPorts.add 'list',\n    datatype: 'string'\n    control: true\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'key',\n    datatype: 'string'\n  c.forwardBrackets =\n    key: ['key']\n  c.process (input, output) ->\n    return unless input.hasData 'list', 'key'\n    [listKey, key] = input.getData 'list', 'key'\n    list = localStorage.getItem listKey\n    if list\n      items = list.split ','\n    else\n      items = []\n    unless items.indexOf(key) is -1\n      items.splice items.indexOf(key), 1\n      localStorage.setItem listKey, items.join ','\n    output.sendDone\n      key: key\n    return\n"},
  "localstorage/ListenRemoteChanges": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen for changes in localStorage'\n  c.icon = 'hourglass'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n  c.outPorts.add 'changed',\n    datatype: 'object'\n  c.outPorts.add 'removed',\n    datatype: 'object'\n  c.listeners = {}\n  unsubscribe = (scope) ->\n    return unless c.listeners[scope]\n    window.removeEventListener 'storage', c.listeners[scope].callback, false\n    c.listeners[scope].ctx.deactivate()\n  c.tearDown = (callback) ->\n    for scope, val of c.listeners\n      unsubscribe scope\n    c.listeners = {}\n    do callback\n  c.process (input, output, context) ->\n    if input.hasData 'stop'\n      input.getData 'stop'\n      unsubscribe input.scope\n      output.done()\n      return\n    if input.hasData 'start'\n      input.getData 'start'\n      # Ensure previous context gets cleared\n      unsubscribe input.scope\n      listener =\n        ctx: context\n        callback: (event) ->\n          if event.newValue is null\n            # Removed key\n            output.send\n              removed:\n                key: event.key\n                value: null\n            return\n          output.send\n            changed:\n              key: event.key\n              value: event.newValue\n          return\n      window.addEventListener 'storage', listener.callback, false\n      c.listeners[input.scope] = listener\n      return\n"},
  "localstorage/RemoveItem": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Remove an item from LocalStorage'\n  c.icon = 'trash'\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.outPorts.add 'item',\n    datatype: 'string'\n  c.forwardBrackets =\n    key: ['item']\n  c.process (input, output) ->\n    return unless input.hasData 'key'\n    key = input.getData 'key'\n    localStorage.removeItem key\n    output.sendDone\n      item: null\n    return\n"},
  "localstorage/SetItem": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Save an item into LocalStorage'\n  c.inPorts.add 'key',\n    datatype: 'string'\n  c.inPorts.add 'value',\n    datatype: 'string'\n  c.outPorts.add 'item',\n    datatype: 'string'\n  c.forwardBrackets =\n    key: ['item']\n  c.process (input, output) ->\n    return unless input.hasData 'key', 'value'\n    [key, value] = input.getData 'key', 'value'\n    localStorage.setItem key, value\n    output.sendDone\n      item: value\n    return\n"},
  "math/Accumulate": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = () ->\n  c = new noflo.Component\n    description: 'Accumulate numbers coming from the input port'\n    inPorts:\n      in:\n        datatype: 'number'\n        description: 'Numbers to accumulate'\n        required: true\n      reset:\n        datatype: 'bang'\n        description: 'Reset accumulation counter'\n      emitreset:\n        datatype: 'boolean'\n        description: 'Whether to emit an output upon reset'\n        control: true\n        default: false\n    outPorts:\n      out:\n        datatype: 'number'\n        required: true\n\n  c.forwardBrackets = {}\n\n  c.counter = {}\n  c.tearDown = (callback) ->\n    c.counter = {}\n    do callback\n\n  c.process (input, output) ->\n    if input.hasData 'reset'\n      input.getData 'reset'\n      c.counter[input.scope] = 0\n      emitReset = false\n      emitReset = input.getData('emitreset') if input.hasData 'emitreset'\n      return output.sendDone c.counter[input.scope] if emitReset\n      return output.done()\n\n    return unless input.hasData 'in'\n\n    data = input.getData 'in'\n    c.counter[input.scope] = 0 unless c.counter[input.scope]\n    c.counter[input.scope] += data\n\n    output.sendDone c.counter[input.scope]\n"},
  "math/Add": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'plus'\n    inPorts:\n      augend:\n        datatype: 'number'\n        required: true\n      addend:\n        datatype: 'number'\n        required: true\n        control: true\n    outPorts:\n      sum:\n        datatype: 'number'\n\n  c.process (input, output) ->\n    return unless input.hasData 'augend', 'addend'\n    [augend, addend] = input.getData 'augend', 'addend'\n    output.sendDone\n      sum: Number(augend) + Number(addend)\n"},
  "math/CalculateAngle": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Calculate the angle between two points'\n    icon: 'compass'\n    inPorts:\n      origin:\n        datatype: 'object'\n        required: true\n      destination:\n        datatype: 'object'\n        required: true\n    outPorts:\n      angle:\n        datatype: 'int'\n        required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'origin', 'destination'\n    [origin, destination] = input.getData 'origin', 'destination'\n\n    deltaX = destination.x - origin.x\n    deltaY = destination.y - origin.y\n    origin = null\n    destination = null\n    angle = (Math.atan2(deltaY, deltaX) * 180 / Math.PI) + 90\n    angle = angle + 360 if angle < 0\n    output.sendDone\n      angle: angle\n"},
  "math/CalculateDistance": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Calculate the distance between two points'\n    icon: 'arrow-right'\n    inPorts:\n      origin:\n        datatype: 'object'\n        required: true\n      destination:\n        datatype: 'object'\n        required: true\n    outPorts:\n      distance:\n        datatype: 'int'\n        required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'origin', 'destination'\n    [origin, destination] = input.getData 'origin', 'destination'\n\n    deltaX = destination.x - origin.x\n    deltaY = destination.y - origin.y\n    origin = null\n    destination = null\n    distance = Math.sqrt Math.pow(deltaX, 2) + Math.pow(deltaY, 2)\n    output.sendDone\n      distance: distance\n"},
  "math/Ceil": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'arrow-up'\n    description: 'Round a number up'\n    inPorts:\n      in:\n        datatype: 'number'\n    outPorts:\n      out:\n        datatype: 'int'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    output.sendDone Math.ceil data\n"},
  "math/Compare": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    inPorts:\n      value:\n        datatype: 'number'\n        required: true\n      comparison:\n        datatype: 'number'\n        required: true\n      operator:\n        datatype: 'string'\n        control: true\n        default: '=='\n    outPorts:\n      pass:\n        datatype: 'number'\n      fail:\n        datatype: 'number'\n\n  c.description = 'Compare two numbers'\n  c.icon = 'check'\n\n  c.forwardBrackets =\n    value: 'pass'\n    comparison: 'pass'\n    operator: 'pass'\n  c.process (input, output) ->\n    return unless input.hasData 'value', 'comparison'\n\n    value = input.getData 'value'\n    comparison = input.getData 'comparison'\n    operator = input.getData('operator') or '=='\n\n    switch operator\n      when 'eq', '=='\n        return output.sendDone pass: value if value is comparison\n      when 'ne', '!='\n        return output.sendDone pass: value if value isnt comparison\n      when 'gt', '>'\n        return output.sendDone pass: value if value > comparison\n      when 'lt', '<'\n        return output.sendDone pass: value if value < comparison\n      when 'ge', '>='\n        return output.sendDone pass: value if value >= comparison\n      when 'le', '<='\n        return output.sendDone pass: value if value <= comparison\n\n    output.sendDone fail: value\n"},
  "math/CountSum": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Sum numbers coming from multiple inputs together'\n    inPorts:\n      in:\n        datatype: 'number'\n        addressable: true\n    outPorts:\n      out:\n        datatype: 'number'\n\n  c.forwardBrackets = {}\n  c.process (input, output, id) ->\n    indexesWithStream = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStream.length\n\n    connection = ['in', indexesWithStream[0]]\n    stream = input.getStream(connection).filter (ip) -> ip.type is 'data'\n\n    sum = 0\n    previous = 0\n    for packet in stream\n      sum += packet.data\n\n      # if the data is from the same port as the previous packet\n      # send out just this packets data\n      if packet.index is previous.index\n        output.send out: packet.data\n        sum = 0\n\n      # if they are from different ones, send out\n      # then store this data for next iteration\n      else\n        output.send out: sum\n        sum = packet.data\n\n      previous = packet\n\n    output.done()\n"},
  "math/Divide": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'plus'\n    inPorts:\n      dividend:\n        datatype: 'all'\n        required: true\n      divisor:\n        datatype: 'all'\n        required: true\n        control: true\n    outPorts:\n      quotient:\n        datatype: 'all'\n\n  c.process (input, output) ->\n    return unless input.hasData 'dividend', 'divisor'\n    [dividend, divisor] = input.getData 'dividend', 'divisor'\n    output.sendDone quotient: dividend / divisor\n"},
  "math/Exponentiate": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'caret'\n  c.inPorts.add 'base',\n    datatype: 'number'\n    required: true\n  c.inPorts.add 'exponent',\n    datatype: 'number'\n    required: true\n    control: true\n  c.outPorts.add 'power',\n    datatype: 'number'\n\n  c.process (input, output) ->\n    return unless input.hasData 'base', 'exponent'\n    [base, exponent] = input.getData 'base', 'exponent'\n    output.sendDone\n      power: Math.pow base, exponent\n"},
  "math/Floor": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'arrow-down'\n    description: 'Round a number down'\n    inPorts:\n      in:\n        datatype: 'number'\n    outPorts:\n      out:\n        datatype: 'int'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    output.sendDone Math.floor data\n"},
  "math/MapRange": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    inPorts:\n      in:\n        datatype: 'number'\n        required: true\n      in_lower:\n        datatype: 'number'\n        description: 'the lower bound of the input value'\n        required: true\n        control: true\n      in_upper:\n        datatype: 'number'\n        description: 'the uppwer bound of the input value'\n        required: true\n        control: true\n      out_lower:\n        datatype: 'number'\n        description: 'the lower bound of the output value'\n        required: true\n        control: true\n      out_upper:\n        datatype: 'number'\n        description: 'the uppwer bound of the output value'\n        required: true\n        control: true\n    outPorts:\n      out:\n        datatype: 'number'\n\n  c.icon = 'reorder'\n  c.description = 'Map a number from a source range to a target reange.'\n\n  # On data flow.\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'in_lower', 'in_upper', 'out_upper', 'out_lower'\n\n    data = input.getData 'in'\n    in_lower_data = input.getData 'in_lower'\n    in_upper_data = input.getData 'in_upper'\n    out_upper_data = input.getData 'out_upper'\n    out_lower_data = input.getData 'out_lower'\n\n    in_lower = Math.min in_lower_data, in_upper_data\n    in_upper = Math.max in_lower_data, in_upper_data\n    in_range = in_upper - in_lower\n    out_lower = Math.min out_lower_data, out_upper_data\n    out_upper = Math.max out_lower_data, out_upper_data\n    out_range = out_upper - out_lower\n    value = out_lower + ((data - in_lower) * out_range / in_range)\n    output.sendDone value\n"},
  "math/Modulo": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    inPorts:\n      dividend:\n        datatype: 'all'\n        required: true\n      divisor:\n        datatype: 'all'\n        required: true\n        control: true\n    outPorts:\n      remainder:\n        datatype: 'all'\n\n  c.process (input, output) ->\n    return unless input.hasData 'dividend', 'divisor'\n    [dividend, divisor] = input.getData 'dividend', 'divisor'\n    output.sendDone dividend % divisor\n"},
  "math/Multiply": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'asterisk'\n    inPorts:\n      multiplicand:\n        datatype: 'all'\n        required: true\n      multiplier:\n        datatype: 'all'\n        required: true\n        control: true\n    outPorts:\n      product:\n        datatype: 'all'\n        required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'multiplicand', 'multiplier'\n    [multiplicand, multiplier] = input.getData 'multiplicand', 'multiplier'\n    output.sendDone product: multiplicand * multiplier\n"},
  "math/Random": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'random'\n    description: 'Generate a random number between 0 and 1'\n    inPorts:\n      in:\n        datatype: 'bang'\n    outPorts:\n      out:\n        datatype: 'number'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    input.getData 'in'\n    output.sendDone Math.random()\n"},
  "math/RangedRandomInt": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    inPorts:\n      in:\n        datatype: 'bang'\n        required: true\n      lower:\n        datatype: 'number'\n        description: 'the lower bound'\n        control: true\n      upper:\n        datatype: 'number'\n        description: 'the uppwer bound'\n        control: true\n    outPorts:\n      out:\n        datatype: 'number'\n        required: true\n\n  c.icon = 'random'\n  c.description = 'Generate a random number in the given range.'\n\n  c.forwardBrackets =\n    in: 'out'\n    lower: 'out'\n    upper: 'out'\n\n  # On data flow.\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'lower', 'upper'\n    lower = input.getData 'lower'\n    upper = input.getData 'upper'\n\n    # Math.random() returns a number between 0 (inclusive) and 1 (exclusive)\n    lower = Math.min lower, upper\n    upper = Math.max lower, upper\n    range = (0.5 + upper) - lower\n    value = lower + Math.random() * range\n    output.sendDone Math.floor(value)\n"},
  "math/SendNumber": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    inPorts:\n      number:\n        datatype: 'number'\n        required: true\n        control: true\n      in:\n        datatype: 'bang'\n        required: true\n    outPorts:\n      out:\n        datatype: 'number'\n        required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'number'\n    [data, number] = input.getData 'in', 'number'\n\n    output.sendDone out: number\n"},
  "math/Subtract": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'plus'\n    inPorts:\n      minuend:\n        datatype: 'all'\n        required: true\n      subtrahend:\n        datatype: 'all'\n        required: true\n        control: true\n    outPorts:\n      difference:\n        datatype: 'all'\n\n  c.process (input, output) ->\n    return unless input.hasData 'minuend', 'subtrahend'\n    [minuend, subtrahend] = input.getData 'minuend', 'subtrahend'\n    output.sendDone minuend - subtrahend\n"},
  "objects/CallMethod": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.description = 'call a method on an object'\n  c.icon = 'gear'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object on which a method will be called'\n      required: true\n    method:\n      datatype: 'string'\n      description: 'Name of the method to call'\n      required: true\n      control: true\n    arguments:\n      datatype: 'all'\n      description: 'Arguments given to the method (one argument per IP)'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Value returned by the method call'\n      required: true\n    error:\n      datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'method', 'in'\n    if input.attached('arguments').length > 0\n      return unless input.hasData 'arguments'\n    args = []\n\n    # because we can have multiple data packets,\n    # we want to get them all, and use just the data\n    argsIn = input.getStream 'arguments'\n      .filter (ip) -> ip.type is 'data' and ip.data?\n      .map (ip) -> ip.data\n\n    args = args.concat argsIn\n    data = input.getData 'in'\n    method = input.getData 'method'\n\n    unless data[method]\n      output.sendDone new Error  \"Method '#{method}' not available\"\n      return\n\n    output.sendDone out: data[method].apply(data, args)\n"},
  "objects/CreateDate": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Create a new Date object from string'\n    icon: 'clock-o'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'string'\n      description: 'A string representation of a date in RFC2822/IETF/ISO8601 format'\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'A new Date object'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    data = input.getData 'in'\n\n    if data is 'now' or data is null or data is true\n      date = new Date\n    else\n      date = new Date data\n\n    output.sendDone out: date\n"},
  "objects/CreateError": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    inPorts:\n      start:\n        datatype: 'string'\n    outPorts:\n      out:\n        datatype: 'object'\n\n  c.icon = 'bug'\n  c.description = 'Create an Error object'\n\n  c.forwardBrackets =\n    start: ['out']\n\n  c.process (input, output) ->\n    data = input.getData 'start'\n\n    if typeof data is 'string'\n      err = new Error data\n    else\n      err = new Error 'Error'\n      err.context = data\n\n    output.sendDone out: err\n"},
  "objects/CreateObject": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Create an empty object'\n\n  c.inPorts = new noflo.InPorts\n    start:\n      datatype: 'bang'\n      description: 'Signal to create a new object'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'A new empty object'\n\n  c.forwardBrackets =\n    start: ['out']\n  c.process (input, output) ->\n    output.sendDone out: {}\n"},
  "objects/DuplicateProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    property:\n      datatype: 'all'\n      required: true\n      control: true\n      description: 'property to duplicate'\n    separator:\n      datatype: 'string'\n      default: '/'\n      control: true\n      description: 'separator to use to join property'\n    in:\n      datatype: 'object'\n      description: 'object to duplicate property on'\n      required: true\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.has 'property', 'separator', 'in', (ip) -> ip.type is 'data'\n    [prop, sep, data] = input.getData 'property', 'separator', 'in'\n\n    properties = {}\n    separator = if sep? then sep else '/'\n\n    if prop\n      if typeof prop is 'object'\n        return\n\n      propParts = prop.split '='\n      if propParts.length > 2\n        properties[propParts.pop()] = propParts\n        return\n\n      properties[propParts[1]] = propParts[0]\n\n    if data\n      for newprop, original of properties\n        if typeof original is 'string'\n          data[newprop] = data[original]\n          continue\n\n        newValues = []\n        for originalProp in original\n          newValues.push data[originalProp]\n        data[newprop] = newValues.join separator\n\n      output.sendDone data\n"},
  "objects/Extend": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nextend = (object, properties, other) ->\n  for key, val of properties\n    object[key] = val\n  if other?\n    for key, val of other\n      object[key] = val\n  object\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Extend an incoming object to some predefined\n    objects, optionally by a certain property'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to extend'\n      required: true\n    base:\n      datatype: 'object'\n      description: 'Objects to extend with (one object per IP)'\n      required: true\n    key:\n      datatype: 'string'\n      description: 'Property name to extend with'\n      default: false\n      control: true\n    reverse:\n      datatype: 'boolean'\n      description: 'A string equal \"true\" if you want to reverse the order of extension algorithm'\n      default: false\n      control: true\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'The object received on port \"in\" extended'\n      required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.has 'base'\n    return unless input.hasData 'key' if input.attached('key').length > 0\n    return unless input.hasData 'reverse' if input.attached('reverse').length > 0\n\n    reverse = false\n    key = input.getData 'key'\n\n    bases = input.getStream('base')\n      .filter (ip) -> ip.type is 'data'\n      .map (ip) -> ip.data\n    data = input.getData 'in'\n\n    if key is undefined\n      key = null\n\n    # Normally, the passed IP object is extended into base objects (i.e.\n    # attributes in IP object takes precendence). Pass `true` to reverse\n    # would make the passed IP object the base (i.e. attributes in base\n    # objects take precedence.\n    reverse = String(input.getData('reverse')) is 'true'\n\n    out = {}\n    for base in bases\n      # Only extend when there's no key specified...\n      # or when the specified attribute matches\n      if not key? or data[key]? and data[key] is base[key]\n        out = extend out, base\n\n    # Put on data\n    if reverse\n      output.sendDone extend {}, data, out\n    else\n      output.sendDone extend out, data\n"},
  "objects/ExtractProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    description: 'Given a key, return only the value matching that key\n    in the incoming object'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'An object to extract property from'\n      required: true\n    key:\n      datatype: 'string'\n      description: 'Property names to extract (one property per IP)'\n      required: true\n      control: true\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Values of the property extracted (each value sent as a separate IP)'\n\n  c.process (input, output) ->\n    return unless input.hasData 'key', 'in'\n    keys = input.getStream 'key'\n      .filter (ip) -> ip.type is 'data'\n      .map (ip) -> ip.data\n    data = input.getData 'in'\n    value = data\n\n    # Loop through the keys we have\n    for key in keys\n      value = value[key]\n      # Send the extracted value\n      output.send out: value\n    output.done()\n"},
  "objects/FilterProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n{ deepCopy } = require 'owl-deepcopy'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'filter'\n  c.description = 'Filter out some properties by matching RegExps\n  against the keys of incoming objects'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to filter properties from'\n      required: true\n    key:\n      datatype: 'string'\n      description: 'Keys to filter (one key per IP)'\n      required: true\n    recurse:\n      datatype: 'boolean'\n      description: '\"true\" to recurse on the object\\'s values'\n      control: true\n      default: false\n    keep:\n      datatype: 'boolean'\n      description: '\"true\" if matching properties must be kept, otherwise removed'\n      control: true\n      default: false\n    # Legacy mode\n    accept:\n      datatype: 'all'\n    regexp:\n      datatype: 'all'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n\n  c.filter = (object, keys, recurse, keep, input) ->\n    for key, value of object\n      isMatched = false\n\n      # the keys are filters we want to match in the object\n      for filter in keys\n        match = key.match filter\n\n        # if they match, we delete them\n        matchButDontKeep = not keep and match\n        keepButDontMatch = keep and not match\n        if matchButDontKeep or keepButDontMatch\n          delete object[key]\n          isMatched = true\n          break\n\n      if not isMatched and recurse and typeof value is 'object'\n        c.filter value, keys, recurse, keep, input\n\n  c.keys = {}\n  c.process (input, output) ->\n    if input.hasStream 'key'\n      c.keys[input.scope] = input.getStream 'key'\n        .filter (ip) -> ip.type is 'data' and ip.data?\n        .map (ip) -> new RegExp ip.data, \"g\"\n      return output.done()\n    return unless input.hasData('in') and c.keys[input.scope]?.length > 0\n    return unless input.hasData 'recurse' if input.attached('recurse').length > 0\n    return unless input.hasData 'keep' if input.attached('keep').length > 0\n\n    legacy = false\n    if input.has('accept') or input.has('regexp')\n      legacy = true\n      accepts = input.get('accept').data\n      regexp = input.get('regexp').data\n\n    # because we can have multiple data packets,\n    # we want to get them all, and use just the data\n    keys = c.keys[input.scope]\n    data = input.getData 'in'\n    recurse = input.getData 'recurse'\n    keep = input.getData 'keep'\n    if keep? and typeof keep is 'object'\n      keep = keep.pop()\n\n    unless legacy\n      if typeof data is 'object'\n        data = deepCopy data\n        c.filter data, keys, recurse, keep, input\n        output.sendDone data\n      else\n        output.done()\n    # Legacy mode\n    else\n      newData = {}\n      match = false\n      for property, value of data\n        if accepts.indexOf(property) isnt -1\n          newData[property] = value\n          match = true\n          continue\n\n        for expression in regexp\n          regex = new RegExp expression\n          if regex.exec property\n            newData[property] = value\n            match = true\n\n      return output.done() unless match\n      output.sendDone newData\n"},
  "objects/FilterPropertyValue": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n    icon: 'filter'\n    description: 'Filter out some values'\n\n  c.inPorts = new noflo.InPorts\n    accept:\n      datatype: 'all'\n      description: 'property value to accept, can be more than one per object'\n    regexp:\n      datatype: 'string'\n      description: 'regex properties to accept'\n    in:\n      datatype: 'object'\n      description: 'Object to filter properties from'\n      required: true\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'Object including the filtered properties'\n    missed:\n      datatype: 'object'\n      description: 'Object received as input if no key have been matched'\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    return unless input.hasStream 'accept' if input.attached('accept').length > 0\n    return unless input.hasData 'regexp' if input.attached('regexp').length > 0\n\n    stream = input.getStream 'in'\n      .filter (ip) -> ip.type is 'data'\n      .map (ip) -> ip.data\n    regexps = {}\n    accepts = {}\n    if input.has 'accept'\n      acceptData = input.getStream 'accept'\n        .filter (ip) -> ip.type is 'data'\n        .map (ip) -> ip.data\n\n      for accept, index in acceptData\n        if typeof accept is 'object'\n          accepts = accept\n          break\n        mapParts = accept.split '='\n        try\n          accepts[mapParts[0]] = eval mapParts[1]\n        catch e\n          if e instanceof ReferenceError\n            accepts[mapParts[0]] = mapParts[1]\n          else\n            return output.sendDone e\n\n    if input.has 'regexp'\n      regexpData = input.getStream 'regexp'\n        .filter (ip) -> ip.type is 'data'\n        .map (ip) -> ip.data\n\n      if regexpData.length > 0\n        mapParts = regexpData[0].split '='\n        regexps[mapParts[0]] = mapParts[1]\n\n    for data in stream\n      if ((Object.keys accepts).length > 0 or (Object.keys regexps).length > 0)\n        newData = {}\n        match = false\n        for property, value of data\n          if accepts[property]\n            continue unless accepts[property] is value\n            match = true\n          if regexps[property]\n            regexp = new RegExp regexps[property]\n            continue unless regexp.exec value\n            match = true\n          newData[property] = value\n          continue\n\n        unless match\n          output.send missed: data\n        else\n          output.send out: newData\n      else\n        output.send out: data\n\n    output.done()\n"},
  "objects/FlattenObject": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    map:\n      datatype: 'all'\n      description: 'map to use to flatten the object'\n      control: true\n    in:\n      datatype: 'object'\n      description: 'Object to flatten'\n      required: true\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'array'\n\n  mapKeys = (object, maps) ->\n    for key, map of maps\n      object[map] = object.flattenedKeys[key]\n    delete object.flattenedKeys\n    return object\n\n  flattenObject = (object) ->\n    flattened = []\n    for key, value of object\n      if typeof value is 'object'\n        flattenedValue = flattenObject value\n        for val in flattenedValue\n          val.flattenedKeys.push key\n          flattened.push val\n        continue\n\n      flattened.push\n        flattenedKeys: [key]\n        value: value\n    flattened\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasData 'map' if input.attached('map').length > 0\n    maps = {}\n\n    if input.hasData 'map'\n      map = input.getData 'map'\n      if map?\n        if typeof map is 'object'\n          maps = map\n        else\n          mapParts = map.split '='\n          maps[mapParts[0]] = mapParts[1]\n\n    data = input.getData 'in'\n    output.send new noflo.IP 'openBracket'\n    for object in flattenObject data\n      output.send mapKeys object, maps\n    output.send new noflo.IP 'closeBracket'\n    output.done()\n"},
  "objects/GetCurrentTimestamp": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'clock-o'\n  c.description = 'Send out the current timestamp'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'bang'\n      description: 'Causes the current timestamp to be sent out'\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'int'\n\n  c.process (input, output) ->\n    return unless input.ip.type is 'data'\n    output.sendDone out: Date.now()\n"},
  "objects/GetObjectKey": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'indent'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to get keys from'\n      required: true\n    key:\n      datatype: 'string'\n      description: 'Keys to extract from the object (one key per IP)'\n      required: true\n    sendgroup:\n      datatype: 'boolean'\n      description: 'true to send keys as groups around value IPs, false otherwise'\n      control: true\n      default: false\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Values extracts from the input object given the input keys (one value per IP, potentially grouped using the key names)'\n    object:\n      datatype: 'object'\n      description: 'Object forwarded from input if at least one property matches the input keys'\n    missed:\n      datatype: 'object'\n      description: 'Object forwarded from input if no property matches the input keys'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasStream 'key'\n    return unless input.hasData 'sendgroup' if input.attached('sendgroup').length > 0\n\n    keys = input.getStream 'key'\n      .filter (ip) -> ip.type is 'data'\n      .map (ip) -> ip.data\n    data = input.getData 'in'\n\n    sendGroup = input.getData('sendgroup')\n    sendGroup = sendGroup is 'true' or sendGroup is true\n\n    unless typeof data is 'object'\n      output.sendDone new Error 'Data is not an object'\n      return\n    if data is null\n      output.sendDone new Error 'Data is NULL'\n      return\n    for key in keys\n      if data[key] is undefined\n        output.send missed: new noflo.IP 'openBracket', key if sendGroup\n        output.send missed: new noflo.IP 'data', data\n        output.send missed: new noflo.IP 'closeBracket', key if sendGroup\n\n      output.send out: new noflo.IP 'openBracket', key if sendGroup\n      output.send out: new noflo.IP 'data', data[key]\n      output.send out: new noflo.IP 'closeBracket', key if sendGroup\n\n    output.send object: new noflo.IP 'data', data\n    output.done()\n"},
  "objects/InsertProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Insert a property into incoming objects.'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'all'\n      description: 'Object to insert property into'\n      required: true\n    property:\n      datatype: 'all'\n      description: 'Property to insert (property sent as group, value sent as IP)'\n      required: true\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'Object received as input with added properties'\n  c.forwardGroups = {}\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasStream 'property'\n\n    data = input.getData 'in'\n    stream = input.getStream 'property'\n    val = null\n    key = null\n    for ip in stream\n      key = ip.data if ip.type is 'openBracket'\n      val = ip.data if ip.type is 'data'\n    outputData = {}\n    if data instanceof Object\n      outputData = data\n\n    outputData[key] = val\n    output.sendDone out: outputData\n"},
  "objects/Join": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Join all values of a passed packet together as a\n  string with a predefined delimiter'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to join values from'\n      required: true\n    delimiter:\n      datatype: 'string'\n      description: 'Delimiter to join values'\n      control: true\n      default: ','\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'string'\n      description: 'String conversion of all values joined with delimiter into one string'\n      required: true\n    error:\n      datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasData 'delimiter' if input.attached('delimiter').length > 0\n\n    delimiter = input.getData 'delimiter' or ','\n    data = input.getData 'in'\n\n    if data? and typeof data is 'object'\n      keys = Object.keys data\n      length = keys.length\n      values = Array(length)\n      for i in [0..length-1]\n        values[i] = data[keys[i]]\n      output.sendDone out: values.join(delimiter)\n    else\n      output.sendDone error: new Error(typeof(data) + ' is not a valid object to join')\n"},
  "objects/Keys": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.description = 'gets only the keys of an object and forward them as an array'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to get keys from'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'string'\n      description: 'Keys from the incoming object (one per IP)'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    data = input.getData 'in'\n    output.send out: new noflo.IP 'data', key for key in Object.keys data\n    output.done()\n"},
  "objects/MapProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# currently only accepts one map and one regex per object\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    map:\n      datatype: 'all'\n      description: 'Map to use to map property on object'\n    regexp:\n      datatype: 'string'\n      description: 'Regex to use to map property on object'\n    in:\n      datatype: 'object'\n      description: 'Object to map property on'\n      required: true\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasData 'regexp' if input.attached('regexp').length > 0\n    return unless input.hasData 'map' if input.attached('map').length > 0\n\n    data = input.getData 'in'\n\n    regexp = {}\n    if input.hasData 'regexp'\n      regexp = input.getData 'regexp'\n      regexPart = regexp.split '='\n      regexps[regexPart[0]] = regexPart[1]\n\n    map = {}\n    if input.hasData 'map'\n      map = input.getData 'map'\n      if typeof map isnt 'object'\n        mapParts = map.split '='\n        map[mapParts[0]] = mapParts[1]\n\n    newData = {}\n    for property, value of data\n      if property of map\n        property = map[property]\n\n      for expression, replacement of regexp\n        regexp = new RegExp expression\n        matched = regexp.exec property\n        continue unless matched\n        property = property.replace regexp, replacement\n\n      if property of newData\n        if Array.isArray newData[property]\n          newData[property].push value\n        else\n          newData[property] = [newData[property], value]\n      else\n        newData[property] = value\n\n    output.sendDone out: newData\n"},
  "objects/MapPropertyValue": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# currently only supports one map and regex per object\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    map:\n      datatype: 'all'\n      description: 'Map to use to map property value on object'\n    regexp:\n      datatype: 'string'\n      description: 'Regex to use to map property value on object'\n    in:\n      datatype: 'object'\n      description: 'Object to map property value on'\n      required: true\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      required: true\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasData 'regexp' if input.attached('regexp').length > 0\n    return unless input.hasData 'map' if input.attached('map').length > 0\n\n    data = input.getData 'in'\n    mapAny = {}\n    map = {}\n    regexp = {}\n    regexpAny = {}\n\n    mapIn = if input.hasData 'map' then input.getData 'map' else {}\n    # if it is not an object, process it...\n    if typeof mapIn isnt 'object'\n      mapParts = mapIn.split '='\n      if mapParts.length is 3\n        map[mapParts[0]] =\n          from: mapParts[1]\n          to: mapParts[2]\n      else\n        mapAny[mapParts[0]] = mapParts[1]\n    # ...otherwise we keep it as an object\n    else\n      mapAny = mapIn\n\n    regexIn = if input.hasData 'regexp' then input.getData 'regexp' else {}\n    if typeof regexIn isnt 'object'\n      regexParts = regexIn.split '='\n      if regexParts.length is 3\n        regexp[regexParts[0]] =\n          from: regexParts[1]\n          to: regexParts[2]\n      regexpAny[regexParts[0]] = regexParts[1]\n\n    for property, value of data\n      # map stuff\n      if map[property] and map[property].from is value\n        data[property] = map[property].to\n\n      if mapAny[value]\n        data[property] = mapAny[value]\n\n      # regex stuff\n      if regexp[property]\n        regexp = new RegExp regexp[property].from\n        matched = regexp.exec value\n        if matched\n          data[property] = value.replace regexp, c.regexp[property].to\n\n      for expression, replacement of c.regexpAny\n        regexp = new RegExp expression\n        matched = regexp.exec value\n        continue unless matched\n        data[property] = value.replace regexp, replacement\n\n    output.sendDone out: data\n"},
  "objects/MergeObjects": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'merges all incoming objects into one'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Objects to merge (one per IP)'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'A new object containing the merge of input objects'\n\n  merge = (origin, object) ->\n    # Go through the incoming object\n    for key, value of object\n      oValue = origin[key]\n\n      # If property already exists, merge\n      if oValue?\n        # ... depending on type of the pre-existing property\n        switch toString.call(oValue)\n          # Concatenate if an array\n          when \"[object Array]\"\n            origin[key].push.apply(origin[key], value)\n          # Merge down if an object\n          when \"[object Object]\"\n            origin[key] = merge(oValue, value)\n          # Replace if simple value\n          else\n            origin[key] = value\n\n      # Use object if not\n      else\n        origin[key] = value\n\n    origin\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    inData = input.getStream 'in'\n      .filter (ip) -> ip.type is 'data'\n      .map (ip) -> ip.data\n    output.sendDone inData.reduce merge, {}\n"},
  "objects/RemoveProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nclone = (obj) ->\n  return obj if obj is null or typeof obj isnt 'object'\n  temp = new obj.constructor()\n  for key of obj\n    temp[key] = clone obj[key]\n  temp\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'ban'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to remove properties from'\n      required: true\n    property:\n      datatype: 'string'\n      description: 'Properties to remove (one per IP)'\n      required: true\n\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'Object forwarded from input'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    return unless input.hasStream 'property'\n    ip = input.get 'in'\n    data = ip.data\n    propData = input.getStream 'property'\n      .filter (ip) -> ip.type is 'data'\n      .map (ip) -> ip.data\n\n    # Clone the object so that the original isn't changed\n    if ip.clonable\n      object = clone data\n    else\n      object = data\n\n    for property in propData\n      delete object[property]\n\n    output.sendDone out: object\n"},
  "objects/ReplaceKey": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'given a regexp matching any key of an incoming\n  object as a data IP, replace the key with the provided string'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to replace a key from'\n    pattern:\n      datatype: 'all'\n      description: 'pattern to use to replace key'\n      control: true\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'Object forwared from input'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'pattern'\n    data = input.getData 'in'\n    patterns = input.getData 'pattern'\n    newKey = null\n\n    for key, value of data\n      for pattern, replace of patterns\n        pattern = new RegExp(pattern)\n\n        if key.match(pattern)?\n          newKey = key.replace(pattern, replace)\n          data[newKey] = value\n          delete data[key]\n\n    output.sendDone out: data\n"},
  "objects/SetProperty": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    property:\n      datatype: 'all'\n      description: 'All except for object'\n      required: true\n    in:\n      datatype: 'object'\n      description: 'Object to set property on'\n      required: true\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'Object forwared from input'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'property'\n\n    prop = input.getData 'property'\n    data = input.getData 'in'\n\n    properties = {}\n    propParts = prop.split '='\n    properties[propParts[0]] = propParts[1]\n\n    for property, value of properties\n      data[property] = value\n\n    output.sendDone data\n"},
  "objects/SetPropertyValue": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    property:\n      datatype: 'string'\n      description: 'Property name to set value on'\n      required: true\n    value:\n      datatype: 'all'\n      description: 'Property value to set'\n      required: true\n    in:\n      datatype: 'object'\n      description: 'Object to set property value on'\n      required: true\n    # Persist value\n    # keep:\n    #   datatype: 'boolean'\n    #   description: 'true if input value must be kept around, false to drop it after the value is set'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'object'\n      description: 'Object forwarded from the input'\n\n  c.process (input, output) ->\n    return unless input.hasData 'property', 'value', 'in'\n\n    data = input.getData 'in'\n    property = input.getData 'property'\n    value = input.getData 'value'\n    data[property] = value\n    output.sendDone out: data\n"},
  "objects/SimplifyObject": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Simplify an objectgi'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'all'\n      description: 'Object to simplify'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Simplified object'\n\n  simplify = (data) ->\n    if Array.isArray data\n      if data.length is 1\n        return data[0]\n      return data\n    unless typeof data is 'object'\n      return data\n\n    simplifyObject data\n\n  simplifyObject = (data) ->\n    keys = Object.keys data\n    if keys.length is 1 and keys[0] is '$data'\n      return simplify data['$data']\n\n    simplified = {}\n    for key, value of data\n      simplified[key] = simplify value\n    simplified\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    output.sendDone out: simplify data\n"},
  "objects/Size": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'gets the size of an object and sends that out as a number'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to measure the size of'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'int'\n      description: 'Size of the input object'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n\n    if typeof data is 'object'\n      size = Object.keys(data).length\n    else\n      size = data.length\n\n    output.sendDone out: size\n"},
  "objects/SliceArray": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'array'\n      description: 'Array to slice'\n      required: true\n    begin:\n      datatype: 'number'\n      description: 'Beginning of the slicing'\n      required: true\n    end:\n      datatype: 'number'\n      description: 'End of the slicing'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'array'\n      description: 'Result of the slice operation'\n      required: true\n    error:\n      datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'begin'\n    return unless input.hasData 'end' if input.attached('end').length > 0\n\n    data = input.getData 'in'\n    begin = input.getData 'begin'\n    unless data?.slice\n      return output.done new Error \"Data #{typeof data} cannot be sliced\"\n\n    if input.hasData 'end'\n      end = input.getData 'end'\n      sliced = data.slice begin, end\n    else\n      sliced = data.slice begin\n\n    output.sendDone out: sliced\n"},
  "objects/SplitArray": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'splits a single array into multiple IPs,\n    wrapped with the key as the group'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Array to split from'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Values from the split array'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    if typeof data is 'object' and not Array.isArray data\n      for key, item of data\n        output.send new noflo.IP 'openBracket', key\n        output.send new noflo.IP 'data', item\n        output.send new noflo.IP 'closeBracket', key\n      output.done()\n      return\n    output.send new noflo.IP 'openBracket'\n    output.send out: item for item in data\n    output.send new noflo.IP 'closeBracket'\n    output.done()\n"},
  "objects/SplitObject": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'splits a single object into multiple IPs,\n    wrapped with the key as the group'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'object'\n      description: 'Object to split key/values from'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Values from the input object (one value per IP and its key sent as group)'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n\n    for key, value of data\n      output.send new noflo.IP 'openBracket', key\n      output.send new noflo.IP 'data', value\n      output.send new noflo.IP 'closeBracket', key\n\n    output.done()\n"},
  "objects/UniqueArray": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'empire'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'array'\n      description: 'Array to get unique values from'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'array'\n      description: 'Array containing only unique values from the input array'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n\n    seen = {}\n    newArray = []\n    for member in data\n      seen[member] = member\n    for member of seen\n      newArray.push member\n    output.sendDone newArray\n"},
  "objects/Values": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'gets only the values of an object and forward them as an array'\n\n  c.inPorts = new noflo.InPorts\n    in:\n      datatype: 'all'\n      description: 'Object to extract values from'\n  c.outPorts = new noflo.OutPorts\n    out:\n      datatype: 'all'\n      description: 'Values extracted from the input object (one value per IP)'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n\n    keys = Object.keys data\n    values = Array(keys.length)\n    for key, index in keys\n      values[index] = data[key]\n\n    output.send new noflo.IP 'openBracket'\n    output.send new noflo.IP 'data', value for value in values\n    output.send new noflo.IP 'closeBracket'\n    output.done()\n"},
  "packets/Compact": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Remove null\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    return output.done() unless data?\n    return output.done() if data.length is 0\n    return output.done() if _.isObject(data) and _.isEmpty(data)\n    output.sendDone\n      out: data\n"},
  "packets/CountPackets": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Count number of data IPs inside each stream'\n  c.icon = 'sort-numeric-asc'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'count',\n    datatype: 'int'\n  c.counts = [0]\n  c.tearDown = (callback) ->\n    c.counts = [0]\n    do callback\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.has 'in'\n    ip = input.get 'in'\n    if ip.type is 'openBracket'\n      c.counts.push 0\n      output.sendDone\n        out: ip\n        count: ip\n      return\n    if ip.type is 'closeBracket'\n      count = _.last c.counts\n      c.counts.pop()\n      output.send\n        count: count\n      output.sendDone\n        out: ip\n        count: ip\n      return\n    # Data packet, add to count\n    c.counts[c.counts.length - 1]++\n    # Forward packet\n    output.send\n      out: ip\n\n    if c.counts.length is 1\n      # Non-bracketed IP, send count\n      output.send\n        count: _.last c.counts\n      c.counts[c.counts.length - 1] = 0\n\n    output.done()\n"},
  "packets/Counter": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'send a number of packets received in a stream'\n  c.icon = 'sort-numeric-asc'\n\n  c.count = 0\n  c.brackets = []\n  c.tearDown = (callback) ->\n    c.count = 0\n    c.brackets = []\n    do callback\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'immediate',\n    datatype: 'boolean'\n    control: true\n    default: false\n  c.inPorts.add 'reset',\n    datatype: 'bang'\n  c.outPorts.add 'count',\n    datatype: 'int'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.forwardBrackets = {}\n\n  c.process (input, output) ->\n    if input.hasData 'reset'\n      # When receiving bang on the reset, reset COUNT to zero\n      input.getData 'reset'\n      c.count = 0\n      return output.done()\n\n    return unless input.has 'in'\n\n    ip = input.get 'in'\n    if ip.type is 'openBracket'\n      c.brackets.push ip.data\n      return output.sendDone\n        out: ip\n    if ip.type is 'closeBracket'\n      c.brackets.pop()\n      output.send\n        out: ip\n      unless c.brackets.length\n        # Send COUNT at end of stream\n        output.send\n          count: c.count\n        c.count = 0\n      return output.done()\n\n    # When receiving data from IN port\n    c.count++\n    # Forward the data packet to OUT\n    output.send\n      out: ip\n\n    immediate = false\n    if input.hasData 'immediate'\n      immediate = input.getData 'immediate'\n    if immediate or c.brackets.length is 0\n      output.send\n        count: c.count\n      c.count = 0 if c.brackets.length is 0\n    output.done()\n"},
  "packets/Defaults": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"if incoming is short of the length of the default\n  packets, send the default packets.\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'default',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.defaults = []\n  c.brackets = []\n  c.tearDown = (callback) ->\n    c.defaults = []\n    c.brackets = []\n    do callback\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'default'\n      def = input.getData 'default'\n      c.defaults.push def\n      output.done()\n    return unless input.has 'in'\n    ip = input.get 'in'\n    if ip.type is 'openBracket'\n      c.brackets.push []\n      output.sendDone\n        out: ip\n      return\n    if ip.type is 'closeBracket'\n      packets = c.brackets.pop()\n      defaulted = c.defaults.map (def, idx) ->\n        if packets[idx]?\n          return packets[idx]\n        return def\n      for def in defaulted\n        output.send\n          out: def\n      output.sendDone\n        out: ip\n      return\n\n    unless c.brackets.length\n      # Unbracketed packet\n      data = if ip.data? then ip.data else c.defaults[0]\n      output.sendDone\n        out: data\n      return\n\n    c.brackets[c.brackets.length - 1].push ip.data\n    output.done()\n"},
  "packets/FilterByPosition": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Filter packets based on their positions'\n  c.icon = 'filter'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'filter',\n    datatype: 'boolean'\n  c.outPorts.add 'out',\n    datatype: 'all'\n\n  c.filters = []\n  c.tearDown = (callback) ->\n    c.filters = []\n    do callback\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'filter'\n      filter = input.getData 'filter'\n      c.filters.push filter\n      output.done()\n    return unless input.hasStream 'in'\n    packets = input.getStream 'in'\n    position = 0\n    for ip in packets\n      if ip.type is 'openBracket'\n        position = 0\n        output.send\n          out: ip\n        continue\n      if ip.type is 'closeBracket'\n        position = 0\n        output.send\n          out: ip\n        continue\n      unless c.filters[position]\n        # Data packet filtered out\n        position++\n        continue\n      output.send\n        out: ip\n      position++\n      continue\n    output.done()\n"},
  "packets/FilterByValue": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Filter packets based on their value\"\n  c.icon = 'filter'\n  c.inPorts.add 'in',\n    datatype: 'number'\n  c.inPorts.add 'filtervalue',\n    datatype: 'number'\n    control: true\n    required: true\n  c.outPorts.add 'lower',\n    datatype: 'number'\n  c.outPorts.add 'higher',\n    datatype: 'number'\n  c.outPorts.add 'equal',\n    datatype: 'number'\n\n  c.forwardBrackets =\n    in: ['lower', 'higher', 'equal']\n\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'filtervalue'\n    filterValue = input.getData 'filtervalue'\n    data = input.getData 'in'\n\n    if data < filterValue\n      output.sendDone\n        lower: data\n      return\n    if data > filterValue\n      output.sendDone\n        higher: data\n      return\n    if data == filterValue\n      output.sendDone\n        equal: data\n      return\n    output.done()\n"},
  "packets/FilterPacket": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Filter packets with regular expression'\n  c.icon = 'filter'\n  c.inPorts.add 'in',\n    datatype: 'string'\n  c.inPorts.add 'regexp',\n    datatype: 'string'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.outPorts.add 'missed',\n    datatype: 'string'\n\n  c.forwardBrackets =\n    in: ['out', 'missed']\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    unless input.hasData 'regexp'\n      # No regexp provided, just send data\n      output.sendDone\n        out: data\n      return\n    regexp = input.getData 'regexp'\n    if typeof regexp is 'string'\n      regexp = new RegExp regexp\n    if regexp.exec data\n      output.sendDone\n        out: data\n      return\n    output.sendDone\n      missed: data\n"},
  "packets/FilterPackets": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Filter packets matching some RegExp strings\"\n  c.icon = 'filter'\n  c.inPorts.add 'in',\n    datatype: 'string'\n  c.inPorts.add 'regexp',\n    datatype: 'string'\n  c.outPorts.add 'out',\n    datatype: 'string'\n  c.outPorts.add 'missed',\n    datatype: 'string'\n  c.outPorts.add 'passthru',\n    datatype: 'string'\n\n  c.forwardBrackets =\n    in: ['out', 'missed', 'passthru']\n\n  c.regexps = []\n  c.tearDown = (callback) ->\n    c.regexps = []\n\n  c.process (input, output) ->\n    if input.hasData 'regexp'\n      reg = input.getData 'regexp'\n      if typeof reg is 'string'\n        reg = new RegExp reg\n      c.regexps.push reg\n      output.done()\n      return\n\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    if _.any c.regexps, ((regexp) -> data.match regexp)\n      output.sendDone\n        out: data\n        passthru: data\n      return\n    output.sendDone\n      missed: data\n      passthru: data\n"},
  "packets/Flatten": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Flatten the IP structure but preserve all groups (i.e.\n    all groups are at the top level)\"\n  c.icon = 'list'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.lastBracket = {}\n  c.tearDown = (callback) ->\n    c.lastBracket = {}\n    do callback\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    ip = input.get 'in'\n    if ip.type is 'openBracket'\n      if c.lastBracket[input.scope]\n        output.send\n          out: new noflo.IP 'closeBracket', c.lastBracket[input.scope].data\n      output.send\n        out: ip\n      c.lastBracket[input.scope] = ip\n      return output.done()\n    if ip.type is 'closeBracket'\n      return output.done() unless c.lastBracket[input.scope]\n      output.send\n        out: ip\n      delete c.lastBracket[input.scope]\n      return output.done()\n    output.send\n      out: ip\n    return output.done()\n"},
  "packets/GroupByPacket": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Surround each data packet by a bracket'\n  c.icon = 'indent'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    packets = input.getStream 'in'\n    datas = 0\n    for ip in packets\n      if ip.type is 'openBracket'\n        datas = 0\n        output.send\n          out: ip\n        continue\n      if ip.type is 'closeBracket'\n        output.send\n          out: ip\n        continue\n      # Surround data packet with a new bracket telling position in stream\n      output.send\n        out: new noflo.IP 'openBracket', datas\n      output.send\n        out: ip\n      output.send\n        out: new noflo.IP 'closeBracket', datas\n      datas++\n    output.done()\n"},
  "packets/LastPacket": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send only the last packet of a stream'\n  c.icon = 'caret-square-o-down'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    packets = input.getStream 'in'\n    datas = packets.filter (ip) -> ip.type is 'data'\n    output.sendDone\n      out: datas.pop()\n"},
  "packets/Map": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nprepareMap = (orig) ->\n  if typeof orig is 'object'\n    return orig\n  map = {}\n  for mapPart in mapParts = orig.split ','\n    mapEntry = mapPart.split ':'\n    if mapEntry[0] and  mapEntry[1]\n      map[mapEntry[0].trim()] = mapEntry[1].trim()\n  return map\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'table'\n  c.description = 'Replace packets through a map. Data that is not in the map is\n  replace with the default.'\n  c.inPorts.add 'data',\n    datatype: 'all'\n    description: 'Data to be used as a key.'\n  c.inPorts.add 'map',\n    datatype: 'all'\n    description: 'A map with replacement values'\n    control: true\n    required: true\n  c.inPorts.add 'def',\n    datatype: 'all'\n    description: 'A default value to return if the key is not in the map.\n    If unset return the input.'\n    control: true\n  c.outPorts.add 'data',\n    datatype: 'all'\n    description: 'The content of map[data].'\n  c.forwardBrackets =\n    data: ['data']\n\n  c.process (input, output) ->\n    return unless input.hasData 'map', 'data'\n    map = prepareMap input.getData 'map'\n    data = input.getData 'data'\n    if data of map\n      output.sendDone\n        data: map[data]\n      return\n    if input.hasData 'def'\n      def = input.getData 'def'\n      output.sendDone\n        data: def\n      return\n    output.sendDone\n      data: data\n"},
  "packets/Range": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'filter'\n  c.description = \"only forward a specified number of packets in a\n  stream\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'start',\n    datatype: 'int'\n    control: true\n  c.inPorts.add 'end',\n    datatype: 'int'\n    control: true\n  c.inPorts.add 'length',\n    datatype: 'int'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.forwardBrackets = {}\n\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    packets = input.getStream 'in'\n    start = -Infinity\n    if input.hasData 'start'\n      start = parseInt input.getData 'start'\n    end = +Infinity\n    if input.hasData 'end'\n      end = parseInt input.getData 'end'\n    length = +Infinity\n    if input.hasData 'length'\n      length = parseInt input.getData 'length'\n    sent = 0\n    total = 0\n    for ip in packets\n      if ip.type in ['openBracket', 'closeBracket']\n        sent = 0\n        total = 0\n        output.send\n          out: ip\n        continue\n      total++\n      if total > start and total < end and sent < length\n        output.send\n          out: ip\n        sent++\n      continue\n    output.done()\n"},
  "packets/Replace": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'clipboard'\n  c.description = 'Replace incoming packets with something else if they match\n  certain packets'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'match',\n    datatype: 'all'\n  c.inPorts.add 'replace',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.matches = {}\n  c.replacements = {}\n  c.tearDown = (callback) ->\n    c.matches = {}\n    c.replacements = {}\n  c.process (input, output) ->\n    if input.hasData 'match'\n      c.matches[input.scope] = [] unless c.matches[input.scope]\n      c.matches[input.scope].push input.getData 'match'\n      return output.done()\n    if input.hasData 'replace'\n      c.replacements[input.scope] = [] unless c.replacements[input.scope]\n      c.replacements[input.scope].push input.getData 'replace'\n      return output.done()\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    if c.matches[input.scope] and c.replacements[input.scope]\n      index = c.matches[input.scope].indexOf data\n      unless index is -1\n        # Send replacement\n        data = c.replacements[input.scope][index]\n    output.sendDone\n      out: data\n"},
  "packets/SendWith": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Always send the specified packets with incoming packets.\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'with',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.with = {}\n  c.tearDown = (callback) ->\n    c.with = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'with'\n      c.with[input.scope] = [] unless c.with[input.scope]\n      c.with[input.scope].push input.getData 'with'\n      return output.done()\n    return unless input.hasStream 'in'\n    packets = input.getStream 'in'\n    datas = packets.filter (ip) -> ip.type is 'data'\n    for ip, idx in packets\n      output.send\n        out: ip\n      continue unless ip is datas[datas.length - 1]\n      continue unless c.with[input.scope]\n      # Send 'withs' after last data IP\n      for packet in c.with[input.scope]\n        output.send\n          out: packet\n    output.done()\n"},
  "packets/StepSequencer": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'A timestamp-value pattern sequencer'\n  c.icon = 'bar-chart'\n  c.inPorts.add 'pattern',\n    datatype: 'string'\n    description: 'Comma separated timestamp-value pairs. ' +\n                 'Timestamps are in ms.'\n  c.outPorts.add 'value',\n    datatype: 'string'\n    description: 'Current value'\n  c.forwardBrackets = {}\n\n  c.timers = {}\n  c.tearDown = (callback) ->\n    for scope, context of c.timers\n      clearTimeout context.timeout if context.timeout\n      context.deactivate()\n    c.timers = {}\n\n  c.process (input, output, context) ->\n    return unless input.hasData 'pattern'\n\n    if c.timers[input.scope]\n      if c.timers[input.scope].timeout\n        clearTimeout c.timers[input.scope].timeout\n      c.timers[input.scope].deactivate()\n\n    pattern = input.getData 'pattern'\n    if typeof pattern is 'string'\n      # TODO: trim whitespace?\n      pattern = pattern.split ','\n    return output.done() unless pattern.length > 1\n    # TODO: validate ts to grow monolithically\n    ix = 0\n    last_val = 0\n    last_ts = 0\n    sendNext = ->\n      last_ts = pattern[ix]\n      last_val = pattern[ix + 1]\n      output.send\n        value: last_val\n      ix += 2\n      if ix < pattern.length\n        context.timeout = setTimeout sendNext, pattern[ix] - last_ts\n      else\n        context.deactivate()\n    context.timeout = setTimeout sendNext, pattern[ix]\n    c.timers[input.scope] = context\n"},
  "packets/UniquePacket": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'filter'\n  c.description = 'Send only packets that are unique'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'clear',\n    datatype: 'bang'\n  c.outPorts.add 'out',\n    datatype: 'all'\n  c.outPorts.add 'duplicate',\n    datatype: 'all'\n  c.seen = {}\n  c.tearDown = (callback) ->\n    c.seen = {}\n    do callback\n  c.forwardBrackets =\n    in: ['out', 'duplicate']\n  c.process (input, output) ->\n    if input.hasData 'clear'\n      input.getData 'clear'\n      c.seen = {}\n      return output.done()\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    c.seen[input.scope] = [] unless c.seen[input.scope]\n    if c.seen[input.scope].indexOf(data) is -1\n      # Unique\n      output.send\n        out: data\n      c.seen[input.scope].push data\n      return output.done()\n    output.sendDone\n      duplicate: data\n"},
  "packets/Unzip": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Send packets whose position upon receipt is even to the\n  EVEN port, otherwise the ODD port.\"\n  c.icon = 'code-fork'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'odd',\n    datatype: 'all'\n  c.outPorts.add 'even',\n    datatype: 'all'\n  c.count = {}\n  c.tearDown = (callback) ->\n    c.count = {}\n    do callback\n  c.forwardBrackets =\n    in: ['odd', 'even']\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    data = input.getData 'in'\n    c.count[input.scope] = 0 unless c.count[input.scope]\n    c.count[input.scope]++\n    if c.count[input.scope] % 2 is 0\n      output.sendDone\n        even: data\n      return\n    output.sendDone\n      odd: data\n"},
  "packets/Zip": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"zip through multiple IPs and output a series of zipped\n  IPs just like how _.zip() works in Underscore.js\"\n  c.icon = 'file-archive-o'\n  c.inPorts.add 'in',\n    datatype: 'array'\n  c.outPorts.add 'out',\n    datatype: 'array'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    packets = input.getStream('in').filter((ip) ->\n      return false unless ip.type is 'data'\n      return false unless _.isArray ip.data\n      true\n    ).map (ip) -> ip.data\n    if _.isEmpty packets\n      output.sendDone\n        out: []\n      return\n    output.sendDone\n      out: _.zip.apply _, packets\n"},
  "physics/Spring": {"language":"coffeescript","source":"noflo = require 'noflo'\nunless noflo.isBrowser()\n  requestAnimFrame = process.nextTick\nelse\n  requestAnimFrame = window.requestAnimationFrame or\n    window.webkitRequestAnimationFrame or\n    window.mozRequestAnimationFrame or\n    (callback) -> setTimeout callback, 1\n\nstep = (ctx, output, callback) ->\n  # We may have been stopped from the outside\n  return unless ctx.moving\n\n  distance = ctx.massPosition - ctx.anchorPosition\n\n  # Forces applying to the spring\n  dampingForce = -ctx.friction * ctx.speed\n  springForce = -ctx.stiffness * distance\n  totalForce = springForce + dampingForce\n \n  # Count the new speed of movement\n  acceleration = totalForce / ctx.mass\n  ctx.speed += acceleration\n\n  previousPosition = ctx.massPosition\n\n  # Calculate where we've moved\n  ctx.massPosition += ctx.speed / 100\n\n  if Math.round(ctx.massPosition) isnt Math.round(previousPosition)\n    # Send the new position out\n    output.send Math.round ctx.massPosition\n\n  if Math.round(ctx.massPosition) is ctx.anchorPosition and\n  Math.abs(ctx.speed) < 0.2\n    # The spring is back at rest\n    do callback\n  else\n    # And yet it moves\n    return if ctx.massPosition is 0\n    requestAnimFrame ->\n      step ctx, output, callback\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Animates a directional spring'\n  c.inPorts.add 'in',\n    description: 'Initial position for the moving mass'\n    datatype: 'number'\n  c.inPorts.add 'anchor',\n    description: 'Position of the fixed point in the other end of the spring'\n    datatype: 'number'\n    default: 0\n    control: true\n  c.inPorts.add 'mass',\n    datatype: 'int'\n    default: 10\n    control: true\n  c.inPorts.add 'stiffness',\n    datatype: 'int'\n    default: 120\n    control: true\n  c.inPorts.add 'friction',\n    datatype: 'int'\n    default: 3\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'number'\n  c.forwardBrackets = {}\n  c.scopes = {}\n  c.tearDown = (callback) ->\n    for scope, val of c.scopes\n      val.moving = false\n      val.context.deactivate()\n    c.scopes = {}\n    do callback\n  c.process (input, output, context) ->\n    return unless input.has 'in'\n    # Ensure we have the parameters expected\n    return if input.attached('anchor').length and not input.hasData 'anchor'\n    return if input.attached('mass').length and not input.hasData 'mass'\n    return if input.attached('stiffness').length and not input.hasData 'stiffness'\n    return if input.attached('friction').length and not input.hasData 'friction'\n    if c.scopes[input.scope]\n      # Kill previous spring movement\n      c.scopes[input.scope].moving = false\n      c.scopes[input.scope].context.deactivate()\n\n    c.scopes[input.scope] =\n      moving: true\n      context: context\n      massPosition: input.getData 'in'\n      anchorPosition: 0\n      mass: 10\n      stiffness: 120\n      friction: 3\n      # We start with no motion\n      speed: 0\n    # Read params\n    if input.hasData 'anchor'\n      c.scopes[input.scope].anchorPosition = input.getData 'anchor'\n    if input.hasData 'mass'\n      c.scopes[input.scope].mass = input.getData 'mass'\n    if input.hasData 'stiffness'\n      c.scopes[input.scope].stiffness = input.getData 'stiffness'\n    if input.hasData 'friction'\n      c.scopes[input.scope].friction = input.getData 'friction'\n\n    step c.scopes[input.scope], output, ->\n      return unless c.scopes[input.scope]\n      output.done()\n      delete c.scopes[input.scope]\n    return\n\n"},
  "react/ListenEvents": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen for events emitted by React components using the emitEvent property'\n  c.inPorts.add 'instance',\n    datatype: 'object'\n    description: 'React component instance'\n  c.outPorts.add 'event',\n    datatype: 'object'\n  c.subscribed = {}\n  c.tearDown = (callback) ->\n    for scope, ctx of c.subscribed\n      ctx.deactivate()\n    c.subscribed = {}\n    do callback\n  c.process (input, output, context) ->\n    return unless input.hasData 'instance'\n    instance = input.getData 'instance'\n    instance.setProps\n      emitEvent: (events, payload, metadata) ->\n        events = [events] if typeof events is 'string'\n        for event in events\n          output.send\n            event: new noflo.IP 'openBracket', event\n        output.send\n          event: payload\n        closes = events.slice 0\n        closes.reverse()\n        for event in closes\n          output.send\n            event: new noflo.IP 'closeBracket', event\n    c.subscribed[input.scope] = context\n"},
  "react/Mount": {"language":"coffeescript","source":"noflo = require 'noflo'\nload = require '../lib/load'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Render a React component in the given mountpoint'\n\n  c.inPorts.add 'component',\n    datatype: 'function'\n    description: 'The React component to mount'\n  c.inPorts.add 'container',\n    datatype: 'object'\n    description: 'DOM element to use for mounting the component'\n\n  c.outPorts.add 'instance',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n    required: false\n\n  c.process (input, output) ->\n    return unless input.hasData 'component', 'container'\n    [component, container] = input.getData 'component', 'container'\n    load.getReact (err, React) ->\n      if err\n        output.done err\n        return\n\n      try\n        instance = React.renderComponent component(), container\n      catch e\n        output.done e\n        return\n      output.sendDone\n        instance: instance\n    return\n"},
  "react/SetProps": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Set properties of a React component'\n\n  # Declare inPorts.\n  c.inPorts.add 'instance',\n    datatype: 'object'\n    description: 'React component instance'\n    control: true\n  c.inPorts.add 'props',\n    datatype: 'object'\n    description: 'Properties to set'\n  c.process (input, output) ->\n    return unless input.hasData 'instance', 'props'\n    instance = input.getData 'instance'\n    unless instance.isMounted()\n      output.done()\n      return\n    props = input.getData 'props'\n    unless typeof props is 'object'\n      output.done()\n      return\n    instance.setProps props\n    output.done()\n    return\n"},
  "react/Unmount": {"language":"coffeescript","source":"noflo = require 'noflo'\nload = require '../lib/load'\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Unmount a React component from a given mountpoint'\n  c.inPorts.add 'container',\n    datatype: 'object'\n    description: 'DOM element where a React component is mounted'\n  c.outPorts.add 'unmounted',\n    datatype: 'boolean'\n    required: false\n  c.outPorts.add 'error',\n    datatype: 'object'\n    required: false\n  c.process (input, output) ->\n    return unless input.hasData 'container'\n    container = input.getData 'container'\n    load.getReact (err, React) ->\n      if err\n        output.done err\n        return\n      output.sendDone\n        unmontainer: React.unmountComponentAtNode container\n    return\n"},
  "routers/ControlledSequence": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Switch output to new connection every time \"next\" is sent'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'next',\n    datatype: 'bang'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.current = {}\n  c.tearDown = (callback) ->\n    c.current = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    if input.hasData 'next'\n      input.getData 'next'\n      unless c.current[input.scope]\n        c.current[input.scope] = 0\n      c.current[input.scope]++\n      if c.current[input.scope] >= c.outPorts.out.listAttached().length\n        c.current[input.scope] = 0\n      output.done()\n      return\n    return unless input.has 'in'\n    unless c.current[input.scope]\n      c.current[input.scope] = 0\n    packet = input.get 'in'\n    attached = c.outPorts.out.listAttached()\n    packet.index = attached[c.current[input.scope]]\n    output.sendDone\n      out: packet\n"},
  "routers/GroupRouter": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\n# Re-evaluate whether there is a route match. There could only be one match at\n# most. Returns the match object.\nmatchRoute = (breadcrumbs, routes) ->\n  for route, index in routes\n    matched = true\n\n    # Doesn't match if breadcrumbs is shorter than route's requirement\n    if route.length > breadcrumbs.length\n      matched = false\n      continue\n\n    # Doesn't match if any of the breadcrumbs doesn't match that of the route\n    for group, step in breadcrumbs\n      unless group.match route[step]\n        matched = false\n        break\n\n    # Match otherwise\n    if matched\n      return {\n        index: index\n        route: route\n        # We want the index of the breadcrumbs at which we have the match\n        level: breadcrumbs.length - 1\n      }\n\n  # An empty object for no match\n  return {}\n\nexports.getComponent = ->\n  component = new noflo.Component\n  component.description = \"routes IPs based on groups, which are matched and\n  routed but not removed when forwarding\"\n  component.inPorts.add 'route',\n    datatype: 'array'\n    description: 'Array of route segments'\n  component.inPorts.add 'routes',\n    datatype: 'string'\n    description: 'Comma-separated list of route segments'\n  component.inPorts.add 'reset',\n    datatype: 'bang'\n    description: 'Remove configured routes'\n  component.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Data to be routed by its groups'\n  component.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  component.outPorts.add 'route',\n    datatype: 'string'\n  component.outPorts.add 'missed',\n    datatype: 'all'\n  component.outPorts.add 'error',\n    datatype: 'object'\n\n  component.scopes = {}\n  prepareScope = (scope) ->\n    if component.scopes[scope]\n      return component.scopes[scope]\n    component.scopes[scope] =\n      # Registered routes\n      routes: []\n      # Where we are\n      breadcrumbs: []\n      # Object describing the match\n      match:\n        # The matching route's index in the routes array\n        index: null\n        # A reference to the matching route for convenience\n        route: null\n        # Where the match occurred (the \"level\" within breadcrumbs)\n        level: null\n    return component.scopes[scope]\n  component.tearDown = (callback) ->\n    component.scopes = {}\n    do callback\n  component.forwardBrackets = {}\n  component.process (input, output) ->\n    if input.hasData 'reset'\n      input.getData 'reset'\n      delete component.scopes[input.scope]\n      output.done()\n      return\n    if input.hasData 'route'\n      scope = prepareScope input.scope\n      payload = input.getData 'route'\n      if Array.isArray payload\n        scope.routes.push payload.map (segment) -> new RegExp segment\n        output.done()\n        return\n      if typeof payload is 'string'\n        scope.routes.push [new RegExp payload]\n        output.done()\n        reurn\n      output.done new Error \"Route must be array of segments\"\n      return\n    if input.hasData 'routes'\n      scope = prepareScope input.scope\n      payload = input.getData 'routes'\n      unless typeof payload is 'string'\n        output.done new Error \"Routes list must be a string\"\n      scope.routes = payload.split(',').map (route) ->\n        route.split(':').map (segment) -> new RegExp segment\n      output.done()\n      return\n    return unless input.has 'in'\n    scope = prepareScope input.scope\n    packet = input.get 'in'\n    switch packet.type\n      when 'openBracket'\n        # Update where we are\n        bracketResult =\n          group: packet.data\n        scope.breadcrumbs.push bracketResult\n\n        # Forward group if we are in a match\n        if scope.match.level? and scope.match.level < scope.breadcrumbs.length\n          packet.index = scope.match.index\n          output.sendDone\n            out: packet\n          return\n\n        # Try to match\n        scope.match = matchRoute scope.breadcrumbs.map((breadcrumb) ->\n          breadcrumb.group\n        ), scope.routes\n\n        # There is a match. Notify downstream if connected\n        if scope.match.route?\n          output.sendDone\n            route: scope.match.route\n          return\n\n        # Send to missed otherwise\n        bracketResult.missed = true\n        output.sendDone\n          missed: packet\n        return\n\n      when 'closeBracket'\n        # Update where we are\n        bracketResult = scope.breadcrumbs.pop()\n\n        # Forward group if we are in a match\n        if scope.match.level < scope.breadcrumbs.length\n          packet.index = scope.match.index\n          output.sendDone\n            out: packet\n          return\n\n        # *END* a match once we're at the end of a match\n        if scope.match.level is scope.breadcrumbs.length\n          scope.match = {}\n          output.done()\n          return\n\n        # Send to missed if there is no match\n        unless bracketResult.missed\n          output.done()\n          return\n        output.sendDone\n          missed: packet\n        return\n\n      when 'data'\n        if scope.match.route?\n          packet.index = scope.match.index\n          output.sendDone\n            out: packet\n          return\n\n        output.sendDone\n          missed: packet\n        return\n"},
  "routers/KickRouter": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Releases a stream to a specified index on prev/next/index'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.inPorts.add 'index',\n    datatype: 'int'\n  c.inPorts.add 'prev',\n    datatype: 'bang'\n  c.inPorts.add 'next',\n    datatype: 'bang'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.current = {}\n  c.tearDown = (callback) ->\n    c.current = {}\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    unless c.current[input.scope]\n      c.current[input.scope] = 0\n\n    sendToIndex = ->\n      stream = input.getStream 'in'\n      attached = c.outPorts.out.listAttached()\n      idx = attached[c.current[input.scope]]\n      for packet in stream\n        packet.index = idx\n        output.send\n          out: packet\n\n    if input.hasData 'next'\n      input.getData 'next'\n      c.current[input.scope]++\n      if c.current[input.scope] >= c.outPorts.out.listAttached().length\n        c.current[input.scope] = 0\n      do sendToIndex\n      output.done()\n      return\n    if input.hasData 'prev'\n      input.getData 'prev'\n      c.current[input.scope]--\n      if c.current[input.scope] < 0\n        c.current[input.scope] = c.outPorts.out.listAttached().length - 1\n      do sendToIndex\n      output.done()\n      return\n    if input.hasData 'index'\n      c.current[input.scope] = parseInt input.getData 'index'\n      do sendToIndex\n      output.done()\n      return\n"},
  "routers/PacketRegexpRouter": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Route IPs based on RegExp match on the IP content (strings\n    only). The position of the RegExp determines which port to forward to.\"\n  c.inPorts.add 'in',\n    datatype: 'string'\n  c.inPorts.add 'route',\n    datatype: 'array'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n    addressable: true\n  c.outPorts.add 'missed',\n    datatype: 'all'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.forwardBrackets =\n    in: ['out', 'missed']\n  c.process (input, output) ->\n    return unless input.hasData 'in', 'route'\n    routes = input.getData 'route'\n    unless Array.isArray routes\n      output.done new Error 'Route must be an array'\n      return\n    regexps = []\n    for route in routes\n      if typeof route is 'string'\n        regexps.push new RegExp route\n        continue\n      if route instanceof RegExp\n        regexps.push route\n        continue\n      output.done new Error 'Route array can only contain strings or RegExps'\n      return\n\n    data = input.getData 'in'\n    unless typeof data is 'string'\n      output.done new Error 'PacketRegexpRouter can only route strings'\n      return\n    matchedIndexes = []\n    for regexp, idx in regexps\n      matchedIndexes.push idx if data.match regexp\n    unless matchedIndexes.length\n      output.sendDone\n        missed: data\n      return\n    for idx in matchedIndexes\n      output.send\n        out: new noflo.IP 'data', data,\n          index: idx\n    output.done()\n    return\n"},
  "routers/PacketRouter": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Routes IPs based on position in an incoming IP stream\"\n  c.inPorts.add 'in',\n    datatype: 'all'\n    addressable: true\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.outPorts.add 'missed',\n    datatype: 'all'\n  c.outPorts.add 'error'\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    indexesWithStreams = input.attached('in').filter (idx) ->\n      input.hasStream ['in', idx]\n    return unless indexesWithStreams.length\n    indexesWithStreams.forEach (idx) ->\n      stream = input.getStream ['in', idx]\n      if stream[0].type is 'openBracket' and stream[0].data is null\n        # Remove the surrounding brackets if they're unnamed\n        before = stream.shift()\n        after = stream.pop()\n      position = 0\n      brackets = []\n      hadData = false\n      for packet in stream\n        if packet.type is 'openBracket'\n          if hadData and not brackets.length\n            # Start of a new substream\n            position++\n          brackets.push packet.data\n        if packet.type is 'closeBracket'\n          brackets.pop()\n\n        attached = c.outPorts.out.listAttached()\n        if attached.indexOf(position) is -1\n          output.send\n            missed: packet\n          continue\n\n        packet.index = position\n        output.send\n          out: packet\n\n        if packet.type is 'data'\n          if hadData and brackets.length\n            # Was already advanced by openBracket\n            continue\n          position++\n          hadData = true\n    output.done()\n    return\n"},
  "routers/SplitInSequence": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send each packet to one outport connection in sequence'\n  c.inPorts.add 'in',\n    datatype: 'all'\n  c.outPorts.add 'out',\n    datatype: 'all'\n    addressable: true\n  c.current = 0\n  c.tearDown = (callback) ->\n    c.current = 0\n    do callback\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n    packet = new noflo.IP 'data', input.getData 'in'\n    attached = c.outPorts.out.listAttached()\n    packet.index = attached[c.current]\n    output.send\n      out: packet\n    c.current++\n    if c.current >= c.outPorts.out.listAttached().length\n      c.current = 0\n    output.done()\n    return\n"},
  "runtime/ConnectRuntime": {"language":"coffeescript","source":"noflo = require 'noflo'\nfbpClient = require 'fbp-protocol-client'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'definition',\n    datatype: 'object'\n    description: 'Runtime definition object'\n    required: true\n  c.inPorts.add 'element',\n    datatype: 'object'\n    description: 'DOM element to be set as Runtime parent element'\n    required: false\n  c.inPorts.add 'timeout',\n    datatype: 'number'\n    description: 'How long to try connecting, in milliseconds'\n    default: 1000\n    required: false\n    control: true\n  c.outPorts.add 'runtime',\n    datatype: 'object'\n    description: 'FBP Runtime instance'\n    required: false\n  c.outPorts.add 'connected',\n    datatype: 'object'\n    description: 'Connected FBP Runtime instance'\n    required: false\n  c.outPorts.add 'unavailable',\n    datatype: 'object'\n    description: 'Unavailable FBP Runtime instance'\n    required: false\n  c.outPorts.add 'error',\n    datatype: 'object'\n    description: 'Runtime connection error'\n    required: false\n  c.process (input, output) ->\n    return unless input.hasData 'definition'\n    definition = input.getData 'definition'\n    unless definition.protocol\n      output.done new Error 'Protocol definition required'\n      return\n    unless definition.address\n      output.done new Error 'Address definition required'\n      return\n\n    timeout = if input.hasData('timeout') then input.getData('timeout') else 1000\n    element = if input.hasData('element') then input.getData('element') else null\n\n    try\n      Runtime = fbpClient.getTransport definition.protocol\n    catch e\n      output.done new Error \"Protocol #{definition.protocol} is not supported\"\n      return\n\n    onError = (e) ->\n      clearTimeout timeout if timeout\n      rt.removeListener 'capabilities', onCapabilities\n      if rt and c.outPorts.unavailable.isAttached()\n        output.send\n          unavailable: rt\n        return\n      output.done e\n      return\n\n    onTimeout = ->\n      output.sendDone\n        unavailable: rt\n      rt.removeListener 'error', onError\n      rt.removeListener 'capabilities', onCapabilities\n      rt.disconnect()\n\n    onCapabilities = ->\n      clearTimeout timeout if timeout\n      rt.removeListener 'error', onError\n      output.sendDone\n        connected: rt\n\n    rt = new Runtime definition\n    rt.setParentElement element if element\n    timeout = setTimeout onTimeout, timeout\n    rt.once 'capabilities', onCapabilities\n    rt.once 'error', onError\n    output.send\n      runtime: rt\n    rt.connect()\n"},
  "runtime/DebugNetwork": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = () ->\n  c = new noflo.Component\n  c.description = \"Switch a network's debug mode on or off\"\n\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    description: 'FBP runtime instance'\n  c.inPorts.add 'graph',\n    datatype: 'object'\n    description: 'Graph to debug'\n  c.inPorts.add 'enable',\n    datatype: 'boolean'\n    description: 'Whether to debug the graph'\n\n  c.outPorts.add 'sent',\n    datatype: 'bang'\n    description: 'Command sent to the runtime'\n\n  c.process (input, output) ->\n    return unless input.hasData 'runtime', 'graph', 'enable'\n    [runtime, graph, enable] = input.getData 'runtime', 'graph', 'enable'\n    runtime.sendNetwork 'debug',\n      graph: graph.name or graph.properties.id\n      enable: enable\n    output.sendDone\n      sent: true\n"},
  "runtime/GetSource": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.icon = 'code'\n  c.inPorts.add 'name',\n    datatype: 'string'\n    description: 'Name of the component to get'\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    description: 'Runtime to communicate with'\n  c.outPorts.add 'source',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.runtime = null\n\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n\n  unsubscribe: ->\n    return unless c.runtime\n    c.runtime.rt.removeListener 'component', handleMessage\n    c.runtime = null\n\n  handleMessage = (message) ->\n    return unless c.runtime\n    return unless message.command is 'source'\n    componentName = [message.payload.library, message.payload.name].join '/'\n    # Cache the component\n    c.runtime.sources[componentName] = message.payload\n\n  c.process (input, output) ->\n    if input.hasData 'runtime'\n      # New runtime connection\n      runtime = input.getData 'runtime'\n      if c.runtime\n        if c.runtime.rt is runtime\n          # No-op if this runtime is same as what we had before\n          return output.done()\n        # Unsubscribe previous\n        do unsubscribe\n      if runtime.isConnected() and not runtime.canDo 'component:getsource'\n        output.done new Error \"Runtime #{runtime.definition.id} cannot get sources\"\n        return\n      # Keep the context open\n      c.runtime =\n        rt: runtime\n        sources: {}\n      runtime.on 'component', handleMessage\n      output.done()\n      return\n    return unless input.hasData 'name'\n    # Requesting component sources\n    return unless c.runtime\n    name = input.getData 'name'\n    if c.runtime.sources[name]\n      # We already have this component cached\n      output.sendDone\n        source: c.runtime.sources[name]\n      return\n    # Request the sources from the runtime\n    c.runtime.rt.sendComponent 'getsource',\n      name: name\n    # Wait for response\n    rounds = 10\n    poll = ->\n      rounds--\n      if c.runtime.sources[name]\n        output.sendDone\n          source: c.runtime.sources[name]\n        return\n      unless rounds\n        output.done new Error \"Runtime didn't provide source for #{name} in time\"\n      setTimeout poll, 100\n    setTimeout poll, 100\n"},
  "runtime/ListComponents": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nonRuntimeConnected = null\nonRuntimeComponent = null\n\nsubscribe = (runtime, output) ->\n  requestListing = ->\n    return unless runtime.canDo 'protocol:component'\n    runtime.sendComponent 'list'\n  onRuntimeConnected = -> do requestListing\n  onRuntimeComponent = (message) ->\n    return unless message.command is 'component'\n    return if message.payload.name in ['Graph', 'ReadDocument']\n    definition =\n      name: message.payload.name\n      description: message.payload.description\n      icon: message.payload.icon\n      subgraph: message.payload.subgraph or false\n      runtime: message.payload.runtime or runtime.definition?.id\n      inports: message.payload.inPorts.slice(0).map (port) ->\n        port.name = port.id\n        delete port.id\n        return port\n      outports: message.payload.outPorts.slice(0).map (port) ->\n        port.name = port.id\n        delete port.id\n        return port\n    output.send\n      out:\n        componentDefinition: definition\n  runtime.on 'capabilities', onRuntimeConnected\n  runtime.on 'component', onRuntimeComponent\n  do requestListing if runtime.isConnected()\n\nunsubscribe = (runtime, context) ->\n  runtime.removeListener 'capabilities', onRuntimeConnected if onRuntimeConnected\n  runtime.removeListener 'component', onRuntimeComponent if onRuntimeComponent\n  onRuntimeConnected = null\n  onRuntimeComponent = null\n  context.deactivate()\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'List components available on a runtime'\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.runtime = null\n  c.tearDown = (callback) ->\n    unsubcribe c.runtime.rt, c.runtime.ctx if c.runtime\n    c.runtime = null\n    do callback\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'runtime'\n    runtime = input.getData 'runtime'\n    unsubscribe c.runtime.rt, c.runtime.ctx if c.runtime\n    c.runtime =\n      rt: runtime\n      ctx: context\n    subscribe c.runtime.rt, output\n"},
  "runtime/ListenNetwork": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Listen to a network on a runtime'\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    description: 'Runtime to listen from'\n  c.inPorts.add 'graph',\n    datatype: 'object'\n    description: 'Graph to listen to'\n  c.outPorts.add 'started',\n    datatype: 'object'\n  c.outPorts.add 'stopped',\n    datatype: 'object'\n  c.outPorts.add 'status',\n    datatype: 'object'\n  c.outPorts.add 'output',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.outPorts.add 'processerror',\n    datatype: 'object'\n  c.outPorts.add 'icon',\n    datatype: 'object'\n  c.outPorts.add 'packet',\n    datatype: 'object'\n\n  unsubscribe = (runtime) ->\n    return unless runtime\n    runtime.rt.removeListener 'network', runtime.listener\n    runtime.ctx.deactivate()\n\n  c.tearDown = (callback) ->\n    unsubscribe c.runtime if c.runtime\n    c.runtime = null\n    c.graph = null\n    do callback\n\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    if input.hasData 'graph'\n      # Updating the graph context to follow\n      c.graph = input.getData 'graph'\n      output.done()\n      return\n    if input.hasData 'runtime'\n      unsubscribe c.runtime if c.runtime\n      c.runtime =\n        rt: input.getData 'runtime'\n        ctx: context\n        listener: ({command, payload}) ->\n          if command is 'error'\n            output.send\n              error: payload\n            return\n\n          if payload.graph isnt c.graph?.name and payload.graph isnt c.graph?.properties?.id\n            # For non-errors we're not interested in events\n            # affecting other networks than the current one\n            return\n\n          if command in ['connect', 'begingroup', 'data', 'endgroup', 'disconnect']\n            # Special handling for packets\n            output.send\n              packet: new noflo.IP 'data',\n                edge: payload.id\n                src: payload.src\n                tgt: payload.tgt\n                type: command\n                group: if payload.group? then payload.group else ''\n                data: if payload.data? then payload.data else ''\n                subgraph: if payload.subgraph? then payload.subgraph else ''\n                runtime: c.runtime.rt.definition.id\n            return\n\n          return unless command in ['started', 'stopped', 'status', 'output', 'processerror', 'icon']\n          # Other supported runtime events, send to appropriate port\n          result = {}\n          result[command] = payload\n          output.send result\n          return\n\n      c.runtime.rt.on 'network', c.runtime.listener\n      return\n"},
  "runtime/ListenRuntime": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    description: 'FBP Runtime instance'\n  c.outPorts.add 'connected',\n    datatype: 'object'\n    description: 'FBP Runtime instance'\n  c.outPorts.add 'disconnected',\n    datatype: 'object'\n    description: 'Runtime connection error'\n  c.outPorts.add 'graph',\n    datatype: 'object'\n    description: 'Changes to runtime graph'\n\n  c.runtime = null\n  unsubscribe = ->\n    return unless c.runtime\n    c.runtime.rt.removeListener 'connected', c.runtime.onConnected\n    c.runtime.rt.removeListener 'disconnected', c.runtime.onDisconnected\n    c.runtime.rt.removeListener 'graph', c.runtime.onGraph\n    c.runtime.ctx.deactivate()\n    c.runtime = null\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n\n  c.forwardBrackets = {}\n  c.process (input, output, context) ->\n    return unless input.hasData 'runtime'\n    c.runtime =\n      rt: input.getData 'runtime'\n      onConnected: ->\n        output.send\n          connected: c.runtime.rt\n      onDisconnected: ->\n        output.send\n          disconnected: c.runtime.rt\n      onGraph: (data) ->\n        output.send\n          graph: data\n      ctx: context\n    c.runtime.rt.on 'connected', c.runtime.onConnected\n    c.runtime.rt.on 'disconnected', c.runtime.onDisconnected\n    c.runtime.rt.on 'graph', c.runtime.onGraph\n"},
  "runtime/SendComponent": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nsendComponent = (component, runtime, callback) ->\n  unless component.code\n    return callback new Error \"No code available for component #{component.name}\"\n\n  # Check for platform-specific components\n  runtimeType = component.code.match /@runtime ([a-z\\-]+)/\n  if runtimeType\n    unless runtimeType[1] in ['all', runtime.definition.type]\n      return callback new Error \"Component type #{runtimeType} doesn't match runtime type #{runtime.definition.type}\"\n\n  unless runtime.canDo 'component:setsource'\n    return callback new Error 'Runtime doesn\\'t support setsource'\n\n  runtime.sendComponent 'source',\n    name: component.name\n    language: component.language\n    library: component.project or component.library\n    code: component.code\n    tests: component.tests\n\n  do callback\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'component',\n    datatype: 'object'\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'component', 'runtime'\n    [component, runtime] = input.getData 'component', 'runtime'\n    unless runtime.canDo\n      output.done new Error 'Incorrect runtime instance'\n      return\n\n    if runtime.isConnected()\n      sendComponent component, runtime, (err) ->\n        if err\n          output.done err\n          return\n        output.sendDone\n          out: component\n      return\n\n    runtime.once 'capabilities', ->\n      sendComponent component, runtime, (err) ->\n        if err\n          output.done err\n          return\n        output.sendDone\n          out: component\n"},
  "runtime/SendEdges": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send edges selected by user to runtime'\n  c.inPorts.add 'edges',\n    datatype: 'array'\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n  c.inPorts.add 'graph',\n    datatype: 'object'\n  c.outPorts.add 'out',\n    datatype: 'array'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'edges', 'runtime', 'graph'\n    [edges, runtime, graph] = input.getData 'edges', 'runtime', 'graph'\n    unless runtime?.canDo\n      # Pass-through\n      output.sendDone\n        out: edges\n      return\n    unless runtime.isConnected()\n      # Pass-through since there is no connection\n      output.sendDone\n        out: edges\n      return\n    runtime.sendNetwork 'edges',\n      edges: edges.map (edge) ->\n        e =\n          src: edge.src or edge.from\n          tgt: edge.tgt or edge.to\n        return e\n      graph: graph.name or graph.properties?.id\n    output.sendDone\n      out: edges\n"},
  "runtime/SendGraph": {"language":"coffeescript","source":"noflo = require 'noflo'\nconnection = require '../src/connection'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'graph',\n    datatype: 'object'\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.process (input, output) ->\n    return unless input.hasData 'graph', 'runtime'\n    [graph, runtime] = input.getData 'graph', 'runtime'\n    unless runtime.canDo\n      output.done new Error 'Incorrect runtime instance'\n      return\n\n    if runtime.isConnected()\n      connection.sendGraph graph, runtime, (err) ->\n        if err\n          output.done err\n          return\n        output.sendDone\n          out: graph\n      return\n\n    runtime.once 'capabilities', ->\n      connection.sendGraph graph, runtime, (err) ->\n        if err\n          output.done err\n          return\n        output.sendDone\n          out: graph\n"},
  "runtime/SendGraphChanges": {"language":"coffeescript","source":"noflo = require 'noflo'\n\n# @runtime all\n\nconvertEvent = (graph, event, data) ->\n  msg =\n    command: event.toLowerCase()\n    payload: {}\n  switch event\n    when 'renameNode', 'renameInport', 'renameOutport', 'renameGroup'\n      msg.payload =\n        from: data[0]\n        to: data[1]\n    when 'addEdge', 'removeEdge', 'changeEdge', 'addInitial'\n      msg.payload =\n        src: data[0].from\n        tgt: data[0].to\n        metadata: data[0].metadata\n    when 'removeInitial'\n      msg.payload =\n        tgt: data[0].to\n    when 'addInport', 'addOutport'\n      msg.payload =\n        public: data[0]\n        node: data[1].process\n        port: data[1].port\n        metadata: data[1].metadata\n    when 'removeInport', 'removeOutport'\n      msg.payload =\n        public: data[0]\n    else\n      msg.payload = data[0]\n  msg.payload.graph = graph.name or graph.properties?.id\n  return msg\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'runtime',\n    datatype: 'object'\n    description: 'FBP Runtime instance'\n  c.inPorts.add 'graph',\n    datatype: 'object'\n    description: 'Graph to listen to'\n  c.outPorts.add 'queued',\n    datatype: 'int'\n    description: 'Number of changes in queue'\n  c.outPorts.add 'sent',\n    datatype: 'bang'\n    description: 'Notification that changes have been transmitted'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  events = [\n    'addNode'\n    'removeNode'\n    'renameNode'\n    'changeNode'\n    'addEdge'\n    'removeEdge'\n    'changeEdge'\n    'addInitial'\n    'removeInitial'\n    'addInport'\n    'removeInport'\n    'renameInport'\n    'addOutport'\n    'removeOutport'\n    'renameOutport'\n    'addGroup'\n    'removeGroup'\n    'renameGroup'\n    'changeGroup'\n  ]\n\n  c.current = null\n  unsubscribe = ->\n    return unless c.current\n    for event in events\n      c.current.graph.removeListener event, c.current[event]\n    c.current.graph.removeListener 'endTransaction', c.current.endTransaction\n    c.current.ctx.deactivate()\n    c.current = null\n  c.tearDown = (callback) ->\n    do unsubscribe\n    do callback\n\n  c.process (input, output, context) ->\n    return unless input.hasData 'runtime', 'graph'\n    [runtime, graph] = input.getData 'runtime', 'graph'\n    do unsubscribe\n\n    unless runtime.canDo 'protocol:graph'\n      output.done new Error \"Runtime #{@runtime.definition.id} cannot update graphs\"\n      return\n\n    c.current =\n      graph: graph\n      rt: runtime\n      ctx: context\n      changes: []\n\n    events.forEach (event) ->\n      # Convert fbp-graph event name to fbp-protocol command\n      c.current[event] = (args...) ->\n        return unless c.current.graph is graph\n        c.current.changes.push convertEvent graph, event, args\n        output.send\n          queued: c.current.changes.length\n      graph.on event, c.current[event]\n\n    c.current.endTransaction = ->\n      return unless c.current.graph is graph\n      while c.current.changes.length\n        change = c.current.changes.shift()\n        c.current.rt.sendGraph change.command, change.payload\n      output.send\n        queued: c.current.changes.length\n      output.send\n        sent: true\n    graph.on 'endTransaction', c.current.endTransaction\n    return\n"},
  "strings/Base64Encode": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nunless noflo.isBrowser()\n  btoa = require 'btoa'\nelse\n  btoa = window.btoa\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'This component receives strings or Buffers and sends them out\n  Base64-encoded'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Buffer or string to encode'\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Encoded input'\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream 'in'\n\n    brackets = []\n    string = ''\n    for packet in stream\n      if packet.type is 'openBracket'\n        brackets.push packet.data\n        continue\n      if packet.type is 'data'\n        if not noflo.isBrowser() and packet.data instanceof Buffer\n          string += packet.data.toString 'utf-8'\n          continue\n        string += packet.data\n        continue\n\n    for bracket in brackets\n      output.send\n        out: new noflo.IP 'openBracket', bracket\n    output.send\n      out: btoa string\n    brackets.reverse()\n    for bracket in brackets\n      output.send\n        out: new noflo.IP 'closeBracket', bracket\n    output.done()\n"},
  "strings/CompileString": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Concatenate received strings with the given delimiter at the end of a stream'\n\n  c.inPorts.add 'delimiter',\n    datatype: 'string'\n    description: 'String used to concatenate input strings'\n    default: \"\\n\"\n    control: true\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'Strings to concatenate (one per IP)'\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Concatenation of input strings'\n\n  c.forwardBrackets = {}\n  c.process (input, output) ->\n    return unless input.hasStream 'in'\n    stream = input.getStream 'in'\n\n    brackets = []\n    strings = []\n    for packet in stream\n      if packet.type is 'openBracket'\n        brackets.push packet.data\n        continue\n      if packet.type is 'data'\n        strings.push packet.data\n        continue\n\n    delimiter = if input.has('delimiter') then input.getData('delimiter') else \"\\n\"\n    for bracket in brackets\n      output.send\n        out: new noflo.IP 'openBracket', bracket\n    output.send\n      out: strings.join delimiter\n    brackets.reverse()\n    for bracket in brackets\n      output.send\n        out: new noflo.IP 'closeBracket', bracket\n    output.done()\n"},
  "strings/ConvertEncoding": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Convert a string or a buffer from one encoding to another.\n    Default from UTF-8 to Base64'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n    description: 'Buffer or string to be converted'\n  c.inPorts.add 'from',\n    datatype: 'string'\n    description: 'Input encoding'\n    default: 'utf8'\n    control: true\n  c.inPorts.add 'to',\n    datatype: 'string'\n    description: 'Output encoding'\n    default: 'base64'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Converted string'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n\n    from = if input.has('from') then input.getData('from') else 'utf8'\n    to = if input.has('to') then input.getData('to') else 'base64'\n\n    data = input.get 'in'\n    return unless data.type is 'data'\n\n    result = ''\n    if data.data instanceof Buffer\n      result += data.data.toString from\n    else if typeof data.data is 'string'\n      result += new Buffer(data.data, from).toString()\n\n    output.sendDone\n      out: new Buffer(result).toString to\n"},
  "strings/EscapeQuotes": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Escape all quotes in a string\"\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to escape quotes from'\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Escaped string'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    output.sendDone\n      out: data.replace /\\\"/g, \"\\\\\\\"\"\n"},
  "strings/Filter": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"filters an IP which is a string using a regex\"\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to filter'\n  c.inPorts.add 'pattern',\n    datatype: 'string'\n    description: 'String representation of a regexp used as filter'\n    control: true\n    required: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'String passing the filter'\n  c.outPorts.add 'missed',\n    datatype: 'string'\n    description: 'String failing the filter'\n\n  c.forwardBrackets =\n    in: ['out', 'missed']\n\n  c.process (input, output) ->\n    return unless input.has 'in', 'pattern'\n    data = input.getData 'in'\n    return unless data\n\n    regex = new RegExp input.getData 'pattern'\n\n    unless typeof data is 'string'\n      data = (data).toString()\n    if regex? and data?.match?(regex)?\n      output.sendDone\n        out: data\n      return\n    output.sendDone\n      missed: data\n"},
  "strings/Jsonify": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"JSONify all incoming, unless a raw flag is set to\n  exclude data packets that are pure strings\"\n\n  c.inPorts.add 'in',\n    datatype: 'object'\n    description: 'Object to convert into a JSON representation'\n  c.inPorts.add 'raw',\n    datatype: 'boolean'\n    description: 'Whether to send strings as is'\n    default: false\n    control: true\n  c.inPorts.add 'pretty',\n    datatype: 'boolean'\n    description: 'Make JSON output pretty'\n    default: false\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'JSON representation of the input object'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    data = input.getData 'in'\n    return unless data\n\n    raw = false\n    if input.has 'raw'\n      raw = String(input.getData('raw')) is 'true'\n    pretty = false\n    if input.has 'pretty'\n      pretty = String(input.getData('pretty')) is 'true'\n\n    if raw and typeof data is 'string'\n      output.sendDone\n        out: data\n      return\n\n    if pretty\n      output.sendDone\n        out: JSON.stringify data, null, 4\n      return\n\n    output.sendDone\n      out: JSON.stringify data\n"},
  "strings/LowerCaseString": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"toLowerCase on all incoming IPs (assuming they are strings)\"\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'Mixed-case string'\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'All-lowercase string'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    return unless data\n\n    output.sendDone\n      out: data.toLowerCase()\n"},
  "strings/MatchReplace": {"language":"coffeescript","source":"noflo = require \"noflo\"\n_ = require \"underscore\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Replace string packets using a dictionary'\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n  c.inPorts.add 'match',\n    datatype: 'object'\n    description: 'Dictionary object with key matching\n     the input object and value being the replacement item'\n    control: true\n    required: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'in', 'match'\n    match = input.getData 'match'\n    return unless match\n    return unless _.isObject match\n\n    string = input.getData 'in'\n    return unless string\n\n    matches = {}\n    matchKeys = []\n    for fromMatch, toMatch of match\n      matches[fromMatch.toString()] = toMatch.toString()\n    matchKeys = _.keys matches\n\n    matchKeyIndex = matchKeys.indexOf string.toString()\n\n    if matchKeyIndex > -1\n      string = matches[matchKeys[matchKeyIndex]]\n\n    output.sendDone\n      out: string\n"},
  "strings/ParseFloat": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Parse a string to a float'\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to parse as Float representation'\n  c.outPorts.add 'out',\n    datatype: 'number'\n    description: 'Parsed number'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    output.sendDone\n      out: parseFloat data\n"},
  "strings/ParseInt": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Parse a string to an integer'\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to parse as int representation'\n  c.inPorts.add 'base',\n    datatype: 'number'\n    description: 'Base used to parse the string representation'\n    control: true\n    default: 10\n  c.outPorts.add 'out',\n    datatype: 'number'\n    description: 'Parsed number'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    data = input.getData 'in'\n\n    base = if input.has('base') then input.getData('base') else 10\n\n    output.sendDone\n      out: parseInt data, base\n"},
  "strings/ParseJson": {"language":"coffeescript","source":"noflo = require \"noflo\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Parse a JSON string'\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'JSON description to parse'\n  c.inPorts.add 'try',\n    datatype: 'boolean'\n    description: 'Deprecated'\n  c.outPorts.add 'out',\n    datatype: 'object'\n    description: 'Parsed object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n\n  c.inPorts.try.on 'data', (data) ->\n    console.warn 'ParseJson try port is deprecated'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    data = input.getData 'in'\n    return unless data\n\n    try\n      result = JSON.parse data\n    catch e\n      output.sendDone e\n      return\n\n    output.sendDone\n      out: result\n"},
  "strings/Quote": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"quote the incoming string IPs\"\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to put quote around'\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Quoted input string'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    return unless data\n    output.sendDone\n      out: \"'#{data}'\"\n"},
  "strings/Replace": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Given a fixed pattern and its replacement, replace all\n  occurrences in the incoming template.'\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to replace pattern in'\n  c.inPorts.add 'pattern',\n    datatype: 'string'\n    description: 'Pattern to replace'\n    control: true\n  c.inPorts.add 'replacement',\n    datatype: 'string'\n    description: 'Replacement for the pattern'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n\n    if input.has 'pattern'\n      pattern = new RegExp input.getData('pattern'), 'g'\n    replacement = ''\n    if input.has 'replacement'\n      replacement = input.getData('replacement').replace '\\\\\\\\n', \"\\n\"\n\n    data = input.getData 'in'\n    return unless data\n    unless pattern\n      output.sendDone\n        out: data\n      return\n    output.sendDone\n      out: \"#{data}\".replace pattern, replacement\n"},
  "strings/SendString": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Send a string when receiving a packet'\n\n  c.inPorts.add 'string',\n    datatype: 'string'\n    description: 'String to send'\n    control: true\n  c.inPorts.add 'in',\n    datatype: 'bang'\n    description: 'Send the string out'\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'string', 'in'\n    data = input.getData 'in'\n    output.sendDone\n      out: input.getData 'string'\n"},
  "strings/Sift3Distance": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n\nsift3 = (s1, s2) ->\n  if not s1? or s1.length is 0\n    if not s2? or s2.length is 0\n      return 0\n    else\n      return s2.length\n  return s1.length  if not s2? or s2.length is 0\n  c = offset1 = offset2 = lcs = 0\n  maxOffset = 5\n  while (c + offset1 < s1.length) and (c + offset2 < s2.length)\n    if s1[c + offset1] is s2[c + offset2]\n      lcs++\n    else\n      offset1 = offset2 = i = 0\n\n      while i < maxOffset\n        if (c + i < s1.length) and (s1[c + i] is s2[c])\n          offset1 = i\n          break\n        if (c + i < s2.length) and (s1[c] is s2[c + i])\n          offset2 = i\n          break\n        i++\n    c++\n  (s1.length + s2.length) / 2 - lcs\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"Compare distance between two strings using Sift3 algorithm\"\n\n  c.inPorts.add 'string1',\n    datatype: 'string'\n  c.inPorts.add 'string2',\n    datatype: 'string'\n\n  c.outPorts.add 'out',\n    datatype: 'number'\n\n  c.forwardBrackets =\n    string2: ['out']\n\n  c.process (input, output) ->\n    return unless input.has 'string1', 'string2'\n    s1 = input.get 'string1'\n    until s1.type is 'data'\n      s1 = input.get 'string1'\n    return unless s1.type is 'data'\n\n    s2 = input.get 'string2'\n    until s2.type is 'data'\n      s2 = input.get 'string2'\n    return unless s2.type is 'data'\n\n    output.sendDone\n      out: sift3 s1.data, s2.data\n"},
  "strings/Splice": {"language":"coffeescript","source":"noflo = require(\"noflo\")\n_ = require(\"underscore\")\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"interlaces two arrays of string into a string\"\n\n  c.inPorts.add 'in',\n    datatype: 'array'\n    description: 'Array to interlace (2 consecutive IPs)'\n  c.inPorts.add 'assoc',\n    datatype: 'string'\n    control: true\n    default: ':'\n  c.inPorts.add 'delim',\n    datatype: 'string'\n    control: true\n    default: ','\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n\n    # Look into the buffer to see if we have two data packets\n    port = c.inPorts.in\n    buf = if input.scope then port.scopedBuffer[input.scope] else port.buffer\n    data = buf.filter (ip) -> ip.type is 'data'\n    return if data.length < 2\n    strings = []\n    until strings.length is 2\n      packet = input.get 'in'\n      continue unless packet.type is 'data'\n      strings.push packet.data\n\n    assoc = if input.has('assoc') then input.getData('assoc') else ':'\n    delim = if input.has('delim') then input.getData('delim') else ','\n\n    paired = _.zip strings[0], strings[1]\n    strings = _.map(paired, ((pair) -> pair.join(assoc)))\n    output.sendDone\n      out: strings.join delim\n"},
  "strings/SplitStr": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = ' The SplitStr component receives a string in the in port,\n    splits it by string specified in the delimiter port, and send each part as\n    a separate packet to the out port'\n\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to split'\n  c.inPorts.add 'delimiter',\n    datatype: 'string'\n    description: 'Delimiter used to split'\n    control: true\n    default: \"\\n\"\n  c.outPorts.add 'out',\n    datatype: 'string'\n    description: 'Split off elements from the input\n     string (one element per IP)'\n\n  c.process (input, output) ->\n    return unless input.hasData 'in'\n\n    delimiter = if input.has('delimiter') then input.getData('delimiter') else \"\\n\"\n    first = delimiter.substr 0, 1\n    last = delimiter.substr delimiter.length - 1, 1\n    if first is '/' and last is '/' and delimiter.length > 1\n      # Handle regular expressions and not simply a slash\n      delimiter = new RegExp delimiter.substr 1, delimiter.length - 2\n\n    data = input.getData 'in'\n    strings = data.split delimiter\n    for string in strings\n      output.send\n        out: string\n    output.done()\n"},
  "strings/StringTemplate": {"language":"coffeescript","source":"noflo = require 'noflo'\n_ = require 'underscore'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Produce a string from input data with a given template'\n\n  c.inPorts.add 'template',\n    datatype: 'string'\n    description: 'Templating string'\n    control: true\n    required: true\n  c.inPorts.add 'in',\n    datatype: 'object'\n    description: 'Object containing key/value set used to run the template'\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'in', 'template'\n\n    data = input.get 'in'\n    return unless data.type is 'data'\n\n    template = _.template input.getData 'template'\n    output.sendDone\n      out: template data.data\n"},
  "strings/SubStr": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Produce a substring from a string'\n\n  c.inPorts.add 'index',\n    datatype: 'int'\n    description: 'Index of the sub part '\n    control: true\n  c.inPorts.add 'limit',\n    datatype: 'int'\n    description: 'Limit of the sub part'\n    control: true\n  c.inPorts.add 'in',\n    datatype: 'string'\n    description: 'String to extract a sub part from'\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'in'\n    data = input.get 'in'\n    return unless data.type is 'data'\n    index = if input.has('index') then input.getData('index') else 0\n    limit = if input.has('limit') then input.getData('limit') else undefined\n\n    output.sendDone\n      out: data.data.substr index, limit\n"},
  "strings/TemplateReplace": {"language":"coffeescript","source":"noflo = require \"noflo\"\n_ = require \"underscore\"\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = \"The inverse of 'Replace': fix the template and pass in\n  an object of patterns and replacements.\"\n\n  c.inPorts.add 'in',\n    datatype: 'object'\n  c.inPorts.add 'token',\n    datatype: 'string'\n  c.inPorts.add 'template',\n    datatype: 'string'\n    control: true\n  # Default value for non-string input\n  c.inPorts.add 'default',\n    datatype: 'string'\n    control: true\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    return unless input.has 'template', 'in'\n\n    template = input.getData 'template'\n    return unless _.isString template\n\n    defaults = if input.has('default') then input.getData('default') else ''\n\n    inputPort = c.inPorts.in\n    inputBuf = if input.scope then inputPort.scopedBuffer[input.scope] else inputPort.buffer\n    inputData = inputBuf.filter (ip) -> ip.type is 'data'\n    return unless inputData.length\n\n    # Accept a map of replacements\n    if _.isObject inputData[0].data\n      data = input.get 'in'\n\n      result = template\n      for pattern, replacement of data.data\n        pattern = new RegExp(pattern, \"g\")\n        result = result.replace pattern, replacement\n\n      # Send immediately\n      output.sendDone\n        out: result\n      return\n\n    # Also accept a series of IPs\n    c.autoOrdering = false\n    tokenPort = c.inPorts.token\n    tokenBuf = if input.scope then tokenPort.scopedBuffer[input.scope] else tokenPort.buffer\n    tokenData = tokenBuf.filter (ip) -> ip.type is 'data'\n    # There must be tokens\n    return unless tokenData.length\n    return if inputData.length < tokenData.length\n\n    strings = []\n    tokens = []\n    while strings.length < tokenData.length\n      packet = input.get 'in'\n      continue unless packet.type is 'data'\n      strings.push packet.data\n    while tokens.length < tokenData.length\n      packet = input.get 'token'\n      continue unless packet.type is 'data'\n      tokens.push new RegExp packet.data, 'g'\n\n    result = template\n    for string in strings\n      token = tokens.shift()\n      replacement = if _.isString string then string else defaults\n      result = result.replace token, replacement\n\n    output.sendDone\n      out: result\n"},
  "strings/ToString": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = () ->\n  c = new noflo.Component\n  c.description = 'Convert the input into a string using toString()'\n\n  c.inPorts.add 'in',\n    datatype: 'all'\n\n  c.outPorts.add 'out',\n    datatype: 'string'\n\n  c.process (input, output) ->\n    data = input.getData 'in'\n    output.sendDone\n      out: data.toString()\n"},
  "tween/Ease": {"language":"coffeescript","source":"noflo = require 'noflo'\nease = require 'ease-component'\n\ngetEasing = (name) ->\n  return ease[name] or (n) -> return n\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Easing function component that takes a normalized value\n   between 0 and 1 and outputs eased value between from and to inputs'\n  c.icon = 'cogs'\n  c.inPorts.add 'from',\n    datatype: 'number'\n    control: true\n  c.inPorts.add 'to',\n    datatype: 'number'\n    control: true\n  c.inPorts.add 'type',\n    datatype: 'string'\n    values: [\n      'linear'\n      'in-quad'\n      'out-quad'\n      'in-out-quad'\n      'in-cube'\n      'out-cube'\n      'in-out-cube'\n      'in-quart'\n      'out-quart'\n      'in-out-quart'\n      'in-quint'\n      'out-quint'\n      'in-out-quint'\n      'in-sine'\n      'out-sine'\n      'in-out-sine'\n      'in-expo'\n      'out-expo'\n      'in-out-expo'\n      'in-circ'\n      'out-circ'\n      'in-out-circ'\n      'in-back'\n      'out-back'\n      'in-out-back'\n      'in-bounce'\n      'out-bounce'\n      'in-out-bounce'\n    ]\n    default: 'linear'\n    control: true\n  c.inPorts.add 'in',\n    datatype: 'number'\n  c.outPorts.add 'out',\n    datatype: 'number'\n  c.process (input, output) ->\n    return unless input.hasData 'from', 'to', 'in'\n    return if input.attached('type').length and not input.hasData 'type'\n    [from, to, value] = input.getData 'from', 'to', 'in'\n    type = 'linear'\n    if input.hasData 'type'\n      type = input.getData 'type'\n    func = getEasing type\n    val = from + func(value) * (to - from)\n    output.sendDone\n      out: val\n    return\n"},
  "tween/EaseTime": {"language":"coffeescript","source":"noflo = require 'noflo'\n\ngetPosition = (ctx) ->\n  pos = ctx.elapsedTime / ctx.duration\n  pos = 1.0 - pos unless ctx.direction\n  return pos\n\nisComplete = (ctx) ->\n  return false if ctx.repeat > 0\n  return false if ctx.elapsedTime < ctx.duration\n  return true\n\nadvanceTimeline = (ctx, callback) ->\n  unless ctx.running\n    return callback null\n\n  # Measure delta\n  t = Date.now()\n  delta = t - ctx.lastTime\n  ctx.lastTime = t\n\n  # Add to elapsedTime\n  ctx.elapsedTime += delta\n\n  # End case\n  if isComplete ctx\n    # fix value on bounds\n    ctx.running = false\n    ctx.elapsedTime = ctx.duration\n    callback null\n    return\n\n  # Continue case\n  if ctx.elapsedTime < ctx.duration\n    callback getPosition ctx\n    return\n\n  # Loop case\n  ctx.elapsedTime = ctx.elapsedTime - ctx.duration\n  ctx.direction = !ctx.direction if ctx.autoreverse\n  ctx.repeat -= 1 if ctx.repeat > 0\n\n  callback getPosition ctx\n\nexports.getComponent = -> new EaseTime\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Converts time to normalized value between 0 and 1 for Ease'\n  c.icon = 'cogs'\n  c.inPorts.add 'tick',\n    datatype: 'bang'\n  c.inPorts.add 'start',\n    datatype: 'bang'\n  c.inPorts.add 'pause',\n    datatype: 'bang'\n  c.inPorts.add 'unpause',\n    datatype: 'bang'\n  c.inPorts.add 'stop',\n    datatype: 'bang'\n  c.inPorts.add 'duration',\n    datatype: 'number'\n    control: true\n  c.inPorts.add 'repeat',\n    datatype: 'number'\n    control: true\n  c.inPorts.add 'reverse',\n    datatype: 'boolean'\n    control: true\n  c.inPorts.add 'autoreverse',\n    datatype: 'boolean'\n    control: true\n  c.outPorts.add 'started',\n    datatype: 'bang'\n  c.outPorts.add 'stopped',\n    datatype: 'bang'\n  c.outPorts.add 'paused',\n    datatype: 'bang'\n  c.outPorts.add 'unpaused',\n    datatype: 'bang'\n  c.outPorts.add 'value',\n    datatype: 'number'\n  c.forwardBrackets = {}\n  c.scopes = {}\n  c.tearDown = (callback) ->\n    c.scopes = {}\n    do callback\n  c.process (input, output) ->\n    # Check that we have necessary options\n    return if input.attached('duration').length and not input.hasData 'duration'\n    return if input.attached('repeat').length and not input.hasData 'repeat'\n    return if input.attached('reverse').length and not input.hasData 'reverse'\n    return if input.attached('autoreverse').length and not input.hasData 'autoreverse'\n    # Handle bangs\n    if input.hasData 'start'\n      input.getData 'start'\n      duration = 500\n      if input.hasData 'duration'\n        duration = input.getData 'duration'\n      repeat = 0\n      if input.hasData 'repeat'\n        repeat = input.getData 'repeat'\n      reverse = false\n      if input.hasData 'reverse'\n        reverse = input.getData 'reverse'\n      autoreverse = false\n      if input.hasData 'autoreverse'\n        autoreverse = input.getData 'autoreverse'\n      c.scopes[input.scope] =\n        running: true\n        duration: duration\n        repeat: repeat\n        autoreverse: autoreverse\n        lastTime: Date.now()\n        elapsedTime: 0\n        direction: !reverse\n      output.send\n        started: true\n      return\n    if input.hasData 'stop'\n      input.getData 'stop'\n      if c.scopes[input.scope]\n        delete c.scopes[input.scope]\n      output.sendDone\n        stopped: true\n      return\n    if input.hasData 'pause'\n      input.getData 'pause'\n      unless c.scopes[input.scope]?.running\n        output.done()\n        return\n      c.scopes[input.scope].running = false\n      output.sendDone\n        paused: true\n      return\n    if input.hasData 'unpause'\n      input.getData 'unpause'\n      unless c.scopes[input.scope]\n        output.done()\n        return\n      if c.scopes[input.scope].running\n        output.done()\n        return\n      c.scopes[input.scope].running = true\n      output.sendDone\n        unpaused: true\n      return\n    if input.hasData 'tick'\n      input.getData 'tick'\n      unless c.scopes[input.scope]?.running\n        output.done()\n        return\n      advanceTimeline c.scopes[input.scope], (pos) ->\n        if pos is null\n          output.done()\n          return\n        output.sendDone\n          value: pos\n      return\n"},
  "webaudio/AudioFile": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass AudioFile extends noflo.Component\n  description: 'Create an audio source loading a sound file'\n  icon: 'file-audio-o'\n  constructor: ->\n    ports =\n      file:\n        datatype: 'string'\n        description: 'URL of file to load'\n        required: true\n      play:\n        datatype: 'bang'\n        description: 'plays the file right now'\n      start:\n        datatype: 'object'\n        description: 'schedules to playback {time, offset, duration}'\n      stop:\n        datatype: 'number'\n        description: 'schedules to stop at an exact time'\n\n    ArrayableHelper @, 'audiofile', ports\n\nexports.getComponent = -> new AudioFile\n"},
  "webaudio/Chorus": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Chorus extends noflo.Component\n  description: 'Basic chorus effect (TUNA)'\n  icon: 'group'\n  constructor: ->\n    ports =\n      audionodes:\n        datatype: 'object'\n        description: 'audio nodes (oscillators, buffer sources, ...)'\n        addressable: true\n        required: true\n      rate:\n        datatyle: 'number'\n        description: '(0.01...8+)'\n        required: true\n      feedback:\n        datatyle: 'number'\n        description: '(0...1+)'\n        required: true\n      delay:\n        datatyle: 'number'\n        description: '(0...1)'\n        required: true\n      bypass:\n        datatyle: 'number'\n        description: '(0 or 1)'\n        required: true\n\n    ArrayableHelper @, 'chorus', ports\n\nexports.getComponent = -> new Chorus\n"},
  "webaudio/Convolver": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Convolver extends noflo.Component\n  description: 'Applies impulse response data to a given audio signal'\n  icon: 'share-alt'\n  constructor: ->\n    ports =\n      audionodes:\n        datatype: 'object'\n        description: 'audio nodes (oscillators, buffer sources, ...)'\n        addressable: true\n        required: true\n      impulse:\n        datatyle: 'string'\n        description: 'impulse response filepath'\n        required: true\n\n    ArrayableHelper @, 'convolver', ports\n\nexports.getComponent = -> new Convolver\n"},
  "webaudio/Gain": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Gain extends noflo.Component\n  description: 'Multiplies the input audio signal by the given gain value, ' +\n               'changing its amplitude.'\n  icon: 'filter'\n  constructor: ->\n    ports =\n      audionodes:\n        datatype: 'object'\n        description: 'audio nodes (oscillators, buffer sources, ...)'\n        addressable: true\n        required: true\n      gain:\n        datatyle: 'number'\n        description: 'amount of gain to apply (0...1)'\n        required: true\n\n    ArrayableHelper @, 'gain', ports\n\nexports.getComponent = -> new Gain\n"},
  "webaudio/MakeTime": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass MakeTime extends noflo.Component\n  description: 'Creates one or more time events'\n  icon: 'clock-o'\n  constructor: ->\n    ports =\n      time:\n        datatype: 'number'\n        description: 'when in future (ms)'\n      offset:\n        datatype: 'number'\n        description: 'distance from start (ms)'\n      duration:\n        datatype: 'number'\n        description: 'how long (ms)'\n\n    ArrayableHelper @, 'time', ports\n\nexports.getComponent = -> new MakeTime\n"},
  "webaudio/Oscillator": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Oscillator extends noflo.Component\n  description: 'Create an audio source with a periodic waveform ' +\n               '(sine, square, sawtooth, triangle, custom)'\n  icon: 'volume-up'\n  constructor: ->\n    ports =\n      waveform:\n        datatype: 'string'\n        description: 'sine, square, sawtooth, triangle, custom'\n        required: true\n      frequency:\n        datatype: 'number'\n        description: 'frequency of signal'\n        required: true\n      start:\n        datatype: 'number'\n        description: 'schedules to playback at an exact time'\n      stop:\n        datatype: 'number'\n        description: 'schedules to stop at an exact time'\n\n    ArrayableHelper @, 'oscillator', ports\n\nexports.getComponent = -> new Oscillator\n"},
  "webaudio/Panner": {"language":"coffeescript","source":"noflo = require 'noflo'\nArrayableHelper = require 'noflo-helper-arrayable'\n\nclass Panner extends noflo.Component\n  description: 'Changes the location of a given audio source'\n  icon: 'compass'\n  constructor: ->\n    ports =\n      audionodes:\n        datatype: 'object'\n        description: 'audio nodes (oscillators, buffer sources, ...)'\n        addressable: true\n        required: true\n      position:\n        datatyle: 'object'\n        description: 'a 2D or 3D point'\n        required: true\n\n    ArrayableHelper @, 'panner', ports\n\nexports.getComponent = -> new Panner\n"},
  "webaudio/Play": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nclass PlayCommands\n  constructor: (scope) ->\n    @audionodes = scope.audionodes\n    @table_audionodes = scope.table_audionodes\n    @buffer_data = scope.buffer_data\n    @context = scope.context\n\n  parse: (audionodes) =>\n    @walk audionodes, 0\n\n  # Recursively walk through the AudioNodes' graph and connect them\n  walk: (audionodes, level) =>\n    for audionode in audionodes\n      created = @create audionode\n      # Connect top-level AudioNodes to destination\n      if level is 0\n        created.connect @context.destination\n      if audionode.audionodes?\n        # Has children?\n        children = audionode.audionodes\n        if children instanceof Array\n          @walk(children, level+1).connect created\n        else\n          @walk([children], level+1).connect created\n      else\n        # Is child?\n        return created\n\n  create: (audionode) =>\n    return @parseCommand audionode\n\n  # noflo-canvas legacy\n  parseCommand: (commands) =>\n    return unless @context\n    @parseThing commands\n\n  # Recursively parse things and arrays of things\n  parseThing: (thing, before, after) =>\n    if thing? and thing.type? and @[thing.type]?\n      if before?\n        before()\n      return @[thing.type](thing)\n      if after?\n        after()\n    else if thing instanceof Array\n      for item in thing\n        continue unless item?\n        @parseThing item, before, after\n\n  # Instructions (AudioNodes)\n  gain: (params) =>\n    # For now update/create is almost the same, we should improve this ASAP\n    # so we can get off this selection and to do specific things for each case\n    if params.id of @table_audionodes\n      audioNode = @table_audionodes[params.id]\n    else\n      audioNode = @context.createGain()\n      @table_audionodes[params.id] = audioNode\n    audioNode.gain.value = params.gain\n    return audioNode\n\n  oscillator: (params) =>\n    if params.id of @table_audionodes\n      audioNode = @table_audionodes[params.id]\n    else\n      audioNode = @context.createOscillator()\n      # FIXME: How to deal with start?\n      audioNode.start params.start\n      @table_audionodes[params.id] = audioNode\n    audioNode.type = params.waveform\n    audioNode.frequency.value = params.frequency\n    #audioNode.start params.start\n    return audioNode\n\n  panner: (params) =>\n    if params.id of @table_audionodes\n      audioNode = @table_audionodes[params.id]\n    else\n      audioNode = @context.createPanner()\n      @table_audionodes[params.id] = audioNode\n    # FIXME: Just 2D for now to interoperate with noflo-canvas\n    audioNode.setPosition(params.position.x, params.position.y, 0)\n    return audioNode\n\n  audiofile: (params) =>\n    if params.id of @table_audionodes\n      # update\n      # A bit different, we always create a new buffer source\n      audioNode = @context.createBufferSource()\n      @table_audionodes[params.id] = audioNode\n      # Update the buffer data\n      if @buffer_data[params.id]?\n        @updateBuffer(audioNode, params.id)\n        # Plays only on update\n        {time, offset, duration} = params.start\n        audioNode.start time, offset, duration\n    else\n      # create\n      audioNode = @context.createBufferSource()\n      @table_audionodes[params.id] = audioNode\n      # XHR downloads and loads only at node creation\n      request = new XMLHttpRequest()\n      request.open(\"GET\", params.file, true)\n      request.responseType = \"arraybuffer\"\n      request.onload = () =>\n        @context.decodeAudioData request.response, (buffer) =>\n          @buffer_data[params.id] = buffer\n          # FIXME: Should we blink the component, how to do that from here?\n          @updateBuffer(audioNode, params.id)\n      request.send()\n\n    return audioNode\n\n  updateBuffer: (audionode, id) =>\n    audionode.buffer = @buffer_data[id]\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.description = 'Plays given chains and patterns'\n  c.icon = 'play'\n  c.inPorts.add 'audionodes',\n    datatype: 'object'\n    addressable: true\n\n  c.scopes = {}\n  c.tearDown = (callback) ->\n    scopes = Object.keys c.scopes\n    unless scopes.length\n      do callback\n      return\n    scope = scopes[0]\n    unless c.scopes[scope]?.context\n      # Already torn down\n      delete c.scopes[scope]\n      c.tearDown callback\n      return\n    c.scopes[scope].context.close()\n      .then ->\n        delete c.scopes[scope]\n        c.tearDown callback\n      , (err) ->\n        callback err\n    return\n\n  ensureScope = (scope) ->\n    unless c.scopes[scope]\n      # Create context and audionodes if scope doesn't exist\n      context = new AudioContext()\n      c.scopes[scope] =\n        audionodes: []\n        table_audionodes: {}\n        buffer_data: {}\n        context: context\n\n    return c.scopes[scope]\n\n  c.process (input, output) ->\n    # Ensure that we have a scope storing context and audio nodes\n    scope = ensureScope input.scope\n\n    # Check if we've received audio nodes\n    indexesWithData = input.attached('audionodes').filter (idx) ->\n      input.hasData ['audionodes', idx]\n    return unless indexesWithData.length\n\n    # Play audio nodes\n    play = new PlayCommands scope\n\n    indexesWithData.forEach (idx) ->\n      # Read audio nodes into scope\n      scope.audionodes[idx] = input.getData ['audionodes', idx]\n      # Parse each audio node\n      if scope.audionodes[idx] instanceof Array\n        play.parse scope.audionodes[idx]\n      else\n        play.parse [scope.audionodes[idx]]\n\n    output.done()\n    return\n"},
  "websocket/Connect": {"language":"coffeescript","source":"noflo = require 'noflo'\nWsClient = WebSocket\n\n# @runtime noflo-browser\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'url',\n    datatype: 'string'\n  c.inPorts.add 'protocol',\n    datatype: 'string'\n    default: ''\n    control: true\n  c.outPorts.add 'connection',\n    datatype: 'object'\n  c.outPorts.add 'error',\n    datatype: 'object'\n  c.process (input, output) ->\n    return unless input.hasData 'url'\n    return if input.attached('protocol').length and not input.hasData 'protocol'\n    protocol = ''\n    if input.hasData 'protocol'\n      protocol = input.getData 'protocol'\n\n    url = input.getData 'url'\n    client = new WsClient url, protocol\n    client.onerror = (err) ->\n      output.done err\n    client.onopen = ->\n      output.sendDone\n        connection: client\n    return\n"},
  "websocket/ListenMessages": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add 'connection',\n    datatype: 'object'\n  c.outPorts.add 'string',\n    datatype: 'string'\n  c.outPorts.add 'binary',\n    datatype: 'buffer'\n  c.forwardBrackets = {}\n  c.autoOrdering = false\n  c.process (input, output) ->\n    return unless input.hasData 'connection'\n    connection = input.getData 'connection'\n    if noflo.isBrowser()\n      connection.addEventListener 'message', (message) ->\n        output.send\n          string: message.data\n      , false\n      connection.addEventListener 'close', (message) ->\n        output.done()\n      , false\n      return\n    connection.on 'message', (message) ->\n      if message.type is 'utf8'\n        output.send\n          string: message.utf8Data\n        return\n      if message.type is 'binary'\n        output.send\n          binary: message.binaryData\n        return\n    connection.on 'close', ->\n      output.done()\n"},
  "websocket/SendMessage": {"language":"coffeescript","source":"noflo = require 'noflo'\n\nexports.getComponent = ->\n  c = new noflo.Component\n  c.inPorts.add  'connection',\n    datatype: 'object'\n  c.inPorts.add 'string',\n    datatype: 'string'\n  c.connections = {}\n  c.tearDown = (callback) ->\n    c.connections = {}\n    do callback\n  c.process (input, output) ->\n    if input.hasData 'connection'\n      c.connections[input.scope] = input.getData 'connection'\n      output.done()\n      return\n    return unless c.connections[input.scope]\n    return unless input.hasData 'string'\n    message = input.getData 'string'\n    if noflo.isBrowser()\n      c.connections[input.scope].send message\n      output.done()\n      return\n    c.connections[input.scope].sendUTF message\n    output.done()\n    return\n"}
};

exports.setSource = function (loader, packageId, name, source, language, callback) {
  var implementation;
  var originalSource = source;
  // Transpiling
  if (language === 'coffeescript') {
    if (!window.CoffeeScript) {
      return callback(new Error('CoffeeScript compiler not available'));
    }
    try {
      source = window.CoffeeScript.compile(source, {
        bare: true
      });
    } catch (e) {
      return callback(e);
    }
  }
  if (language === 'es6' || language === 'es2015') {
    if (!window.babel) {
      return callback(new Error('Babel compiler not available'));
    }
    try {
      source = window.babel.transform(source).code;
    } catch (e) {
      return callback(e);
    }
  }
  // Eval the contents to get a runnable component
  try {
    var withExports = '(function () { var exports = {}; ' + source + '; return exports; })();';
    implementation = eval(withExports);
  } catch (e) {
    return callback(e);
  }

  if (!implementation && !implementation.getComponent) {
    return callback(new Error('Provided source failed to create a runnable component'));
  }

  var fullName = packageId + '/' + name;
  sources[fullName] = {
    language: language,
    source: originalSource
  };

  loader.registerComponent(packageId, name, implementation, callback);
};

exports.getSource = function (loader, name, callback) {
  if (!loader.components[name]) {
    return callback(new Error('Component ' + name + ' not available'));
  }
  var component = loader.components[name];
  var nameParts = name.split('/');
  var componentData = {
    name: nameParts[1],
    library: nameParts[0]
  };
  if (loader.isGraph(component)) {
    componentData.code = JSON.stringify(component, null, 2);
    componentData.language = 'json';
    return callback(null, componentData);
  } else if (sources[name]) {
    componentData.code = sources[name].source;
    componentData.language = sources[name].language;
    return callback(null, componentData);
  } else if (typeof component === 'function') {
    componentData.code = component.toString();
    componentData.language = 'javascript';
    return callback(null, componentData);
  } else if (typeof component.getComponent === 'function') {
    componentData.code = component.getComponent.toString();
    componentData.language = 'javascript';
    return callback(null, componentData);
  }
  return callback(new Error('Unable to get sources for ' + name));
};

exports.register = function (loader, callback) {
  var loaders = [
    __webpack_require__(24)
  ];
  loader.setLibraryIcon('adapters', 'plug');
  loader.setLibraryIcon('canvas', 'paint-brush');
  loader.setLibraryIcon('canvas', 'paint-brush');
  loader.setLibraryIcon('dom', 'html5');
  loader.setLibraryIcon('flow', 'random');
  loader.setLibraryIcon('groups', 'tags');
  loader.setLibraryIcon('indexeddb', 'database');
  loader.setLibraryIcon('localstorage', 'database');
  loader.setLibraryIcon('math', 'plus-circle');
  loader.setLibraryIcon('objects', 'list');
  loader.setLibraryIcon('packets', 'dropbox');
  loader.setLibraryIcon('physics', 'cogs');
  loader.setLibraryIcon('routers', 'code-fork');
  loader.setLibraryIcon('strings', 'font');
  loader.setLibraryIcon('websocket', 'comments');
  loader.setLibraryIcon('websocket', 'comments')
  loader.registerComponent("browser", "everything", __webpack_require__(70));
  loader.registerComponent(null, "Graph", __webpack_require__(71));
  loader.registerComponent("adapters", "ObjectToPackets", __webpack_require__(72));
  loader.registerComponent("adapters", "ObjectToString", __webpack_require__(73));
  loader.registerComponent("adapters", "PacketsToArray", __webpack_require__(74));
  loader.registerComponent("adapters", "PacketsToObject", __webpack_require__(75));
  loader.registerComponent("adapters", "PairsToObject", __webpack_require__(76));
  loader.registerComponent("adapters", "PropertiesToObjects", __webpack_require__(77));
  loader.registerComponent("ajax", "CorsProxy", __webpack_require__(78));
  loader.registerComponent("ajax", "Get", __webpack_require__(79));
  loader.registerComponent("ajax", "GetJsonP", __webpack_require__(80));
  loader.registerComponent("amd", "Configure", __webpack_require__(81));
  loader.registerComponent("amd", "Require", __webpack_require__(82));
  loader.registerComponent("canvas", "ClearRect", __webpack_require__(83));
  loader.registerComponent("canvas", "ColorArrayToCss", __webpack_require__(84));
  loader.registerComponent("canvas", "Draw", __webpack_require__(85));
  loader.registerComponent("canvas", "DrawImage", __webpack_require__(86));
  loader.registerComponent("canvas", "Fill", __webpack_require__(87));
  loader.registerComponent("canvas", "FillRect", __webpack_require__(88));
  loader.registerComponent("canvas", "FillStyle", __webpack_require__(89));
  loader.registerComponent("canvas", "Group", __webpack_require__(90));
  loader.registerComponent("canvas", "LineWidth", __webpack_require__(91));
  loader.registerComponent("canvas", "MakeArc", __webpack_require__(92));
  loader.registerComponent("canvas", "MakeBezierCurve", __webpack_require__(93));
  loader.registerComponent("canvas", "MakeCircle", __webpack_require__(94));
  loader.registerComponent("canvas", "MakeColor", __webpack_require__(95));
  loader.registerComponent("canvas", "MakeGrid", __webpack_require__(96));
  loader.registerComponent("canvas", "MakeIncrement", __webpack_require__(97));
  loader.registerComponent("canvas", "MakePath", __webpack_require__(98));
  loader.registerComponent("canvas", "MakePoint", __webpack_require__(99));
  loader.registerComponent("canvas", "MakeRGBColor", __webpack_require__(100));
  loader.registerComponent("canvas", "MakeRandom", __webpack_require__(101));
  loader.registerComponent("canvas", "MakeRange", __webpack_require__(102));
  loader.registerComponent("canvas", "MakeRectangle", __webpack_require__(103));
  loader.registerComponent("canvas", "MakeRectangleAspectRatio", __webpack_require__(104));
  loader.registerComponent("canvas", "Recurse", __webpack_require__(105));
  loader.registerComponent("canvas", "Stroke", __webpack_require__(106));
  loader.registerComponent("canvas", "StrokeRect", __webpack_require__(107));
  loader.registerComponent("canvas", "StrokeStyle", __webpack_require__(108));
  loader.registerComponent("canvas", "Transform", __webpack_require__(109));
  loader.registerComponent("canvas", "PointFromObject", __webpack_require__(110));
  loader.registerComponent("canvas", "RectangleFromObject", __webpack_require__(111));
  loader.registerComponent("canvas", "CreateCanvas", __webpack_require__(112));
  loader.registerComponent("canvas", "SaveJPEG", __webpack_require__(113));
  loader.registerComponent("canvas", "SavePNG", __webpack_require__(114));
  loader.registerComponent("canvas", "CopyCanvas", __webpack_require__(115));
  loader.registerComponent("clmtrackr", "TrackFace", __webpack_require__(116));
  loader.registerComponent("clmtrackr", "WireframeFace", __webpack_require__(119));
  loader.registerComponent("core", "Callback", __webpack_require__(120));
  loader.registerComponent("core", "Copy", __webpack_require__(121));
  loader.registerComponent("core", "DisconnectAfterPacket", __webpack_require__(122));
  loader.registerComponent("core", "Drop", __webpack_require__(123));
  loader.registerComponent("core", "Kick", __webpack_require__(124));
  loader.registerComponent("core", "MakeFunction", __webpack_require__(125));
  loader.registerComponent("core", "Merge", __webpack_require__(126));
  loader.registerComponent("core", "Output", __webpack_require__(127));
  loader.registerComponent("core", "ReadGlobal", __webpack_require__(130));
  loader.registerComponent("core", "Repeat", __webpack_require__(131));
  loader.registerComponent("core", "RepeatAsync", __webpack_require__(132));
  loader.registerComponent("core", "RepeatDelayed", __webpack_require__(133));
  loader.registerComponent("core", "RunInterval", __webpack_require__(134));
  loader.registerComponent("core", "RunTimeout", __webpack_require__(135));
  loader.registerComponent("core", "SendNext", __webpack_require__(136));
  loader.registerComponent("core", "Split", __webpack_require__(137));
  loader.registerComponent("css", "MoveElement", __webpack_require__(138));
  loader.registerComponent("css", "ResizeElement", __webpack_require__(139));
  loader.registerComponent("css", "RotateElement", __webpack_require__(140));
  loader.registerComponent("css", "SetBackgroundImage", __webpack_require__(141));
  loader.registerComponent("css", "SetElementTop", __webpack_require__(142));
  loader.registerComponent("dom", "AddClass", __webpack_require__(143));
  loader.registerComponent("dom", "AppendChild", __webpack_require__(144));
  loader.registerComponent("dom", "CreateElement", __webpack_require__(145));
  loader.registerComponent("dom", "CreateFragment", __webpack_require__(146));
  loader.registerComponent("dom", "GetAttribute", __webpack_require__(147));
  loader.registerComponent("dom", "GetElement", __webpack_require__(148));
  loader.registerComponent("dom", "HasClass", __webpack_require__(149));
  loader.registerComponent("dom", "Listen", __webpack_require__(150));
  loader.registerComponent("dom", "ReadHtml", __webpack_require__(151));
  loader.registerComponent("dom", "RemoveClass", __webpack_require__(152));
  loader.registerComponent("dom", "RemoveElement", __webpack_require__(153));
  loader.registerComponent("dom", "RequestAnimationFrame", __webpack_require__(154));
  loader.registerComponent("dom", "SetAttribute", __webpack_require__(155));
  loader.registerComponent("dom", "WriteHtml", __webpack_require__(156));
  loader.registerComponent("flow", "Accept", __webpack_require__(157));
  loader.registerComponent("flow", "All", __webpack_require__(158));
  loader.registerComponent("flow", "CleanDisconnect", __webpack_require__(159));
  loader.registerComponent("flow", "CleanSplit", __webpack_require__(160));
  loader.registerComponent("flow", "Collate", __webpack_require__(161));
  loader.registerComponent("flow", "CollectUntilIdle", __webpack_require__(162));
  loader.registerComponent("flow", "Concat", __webpack_require__(163));
  loader.registerComponent("flow", "CountDown", __webpack_require__(164));
  loader.registerComponent("flow", "CountedMerge", __webpack_require__(165));
  loader.registerComponent("flow", "Deny", __webpack_require__(166));
  loader.registerComponent("flow", "Fork", __webpack_require__(167));
  loader.registerComponent("flow", "Gate", __webpack_require__(168));
  loader.registerComponent("flow", "HasGroup", __webpack_require__(169));
  loader.registerComponent("flow", "Race", __webpack_require__(170));
  loader.registerComponent("flow", "Reorder", __webpack_require__(171));
  loader.registerComponent("flow", "ReverseSplit", __webpack_require__(172));
  loader.registerComponent("flow", "Stop", __webpack_require__(173));
  loader.registerComponent("flow", "Throttle", __webpack_require__(174));
  loader.registerComponent("geometry", "ConstrainedDelaunay", __webpack_require__(175));
  loader.registerComponent("geometry", "Delaunay", __webpack_require__(177));
  loader.registerComponent("geometry", "Voronoi", __webpack_require__(179));
  loader.registerComponent("groups", "CollectGroups", __webpack_require__(181));
  loader.registerComponent("groups", "CollectObject", __webpack_require__(182));
  loader.registerComponent("groups", "CollectTree", __webpack_require__(183));
  loader.registerComponent("groups", "FilterByGroup", __webpack_require__(184));
  loader.registerComponent("groups", "FirstGroup", __webpack_require__(185));
  loader.registerComponent("groups", "GenerateGroup", __webpack_require__(186));
  loader.registerComponent("groups", "Group", __webpack_require__(190));
  loader.registerComponent("groups", "GroupByObjectKey", __webpack_require__(191));
  loader.registerComponent("groups", "GroupZip", __webpack_require__(192));
  loader.registerComponent("groups", "LastGroup", __webpack_require__(193));
  loader.registerComponent("groups", "MapGroup", __webpack_require__(194));
  loader.registerComponent("groups", "MergeGroups", __webpack_require__(195));
  loader.registerComponent("groups", "Objectify", __webpack_require__(196));
  loader.registerComponent("groups", "ReadGroup", __webpack_require__(197));
  loader.registerComponent("groups", "ReadGroups", __webpack_require__(198));
  loader.registerComponent("groups", "Regroup", __webpack_require__(199));
  loader.registerComponent("groups", "RemoveGroups", __webpack_require__(200));
  loader.registerComponent("groups", "SendByGroup", __webpack_require__(201));
  loader.registerComponent("groups", "ObjectifyByGroup", __webpack_require__(202));
  loader.registerComponent("gum", "GetUserMedia", __webpack_require__(203));
  loader.registerComponent("image", "AdjustBrightness", __webpack_require__(204));
  loader.registerComponent("image", "AdjustContrast", __webpack_require__(205));
  loader.registerComponent("image", "AdjustSaturation", __webpack_require__(206));
  loader.registerComponent("image", "ApplyAdjustmentCurve", __webpack_require__(207));
  loader.registerComponent("image", "ApplyVignette", __webpack_require__(208));
  loader.registerComponent("image", "CalculateAspectRatio", __webpack_require__(209));
  loader.registerComponent("image", "Crop", __webpack_require__(210));
  loader.registerComponent("image", "ExtractLightness", __webpack_require__(212));
  loader.registerComponent("image", "FindFeatureFreeAreas", __webpack_require__(213));
  loader.registerComponent("image", "FindFreeRectangles", __webpack_require__(214));
  loader.registerComponent("image", "GetBorderlessBox", __webpack_require__(215));
  loader.registerComponent("image", "GetCannyEdges", __webpack_require__(216));
  loader.registerComponent("image", "GetColors", __webpack_require__(217));
  loader.registerComponent("image", "GetColorsFromCentroids", __webpack_require__(218));
  loader.registerComponent("image", "GetColorsFromRectangles", __webpack_require__(219));
  loader.registerComponent("image", "GetFeaturesYAPE", __webpack_require__(220));
  loader.registerComponent("image", "GetOrientation", __webpack_require__(221));
  loader.registerComponent("image", "GetPresetCurve", __webpack_require__(222));
  loader.registerComponent("image", "ImageToCanvas", __webpack_require__(223));
  loader.registerComponent("image", "ToFullscale", __webpack_require__(224));
  loader.registerComponent("image", "VideoToCanvas", __webpack_require__(233));
  loader.registerComponent("image", "UrlToCanvas", __webpack_require__(234));
  loader.registerComponent("image", "CreateImage", __webpack_require__(235));
  loader.registerComponent("image", "Measure", __webpack_require__(236));
  loader.registerComponent("indexeddb", "AbortTransaction", __webpack_require__(237));
  loader.registerComponent("indexeddb", "BeginTransaction", __webpack_require__(238));
  loader.registerComponent("indexeddb", "Close", __webpack_require__(239));
  loader.registerComponent("indexeddb", "CreateIndex", __webpack_require__(240));
  loader.registerComponent("indexeddb", "CreateStore", __webpack_require__(241));
  loader.registerComponent("indexeddb", "Delete", __webpack_require__(242));
  loader.registerComponent("indexeddb", "DeleteDatabase", __webpack_require__(243));
  loader.registerComponent("indexeddb", "DeleteStore", __webpack_require__(244));
  loader.registerComponent("indexeddb", "Get", __webpack_require__(245));
  loader.registerComponent("indexeddb", "GetIndex", __webpack_require__(246));
  loader.registerComponent("indexeddb", "GetStore", __webpack_require__(247));
  loader.registerComponent("indexeddb", "Open", __webpack_require__(248));
  loader.registerComponent("indexeddb", "Put", __webpack_require__(249));
  loader.registerComponent("indexeddb", "Query", __webpack_require__(250));
  loader.registerComponent("indexeddb", "QueryFrom", __webpack_require__(251));
  loader.registerComponent("indexeddb", "QueryOnly", __webpack_require__(252));
  loader.registerComponent("indexeddb", "QueryTo", __webpack_require__(253));
  loader.registerComponent("indexeddb", "UpgradeRouter", __webpack_require__(254));
  loader.registerComponent("interaction", "Focus", __webpack_require__(255));
  loader.registerComponent("interaction", "ListenChange", __webpack_require__(256));
  loader.registerComponent("interaction", "ListenDrag", __webpack_require__(257));
  loader.registerComponent("interaction", "ListenHash", __webpack_require__(258));
  loader.registerComponent("interaction", "ListenKeyboard", __webpack_require__(259));
  loader.registerComponent("interaction", "ListenKeyboardShortcuts", __webpack_require__(260));
  loader.registerComponent("interaction", "ListenMouse", __webpack_require__(261));
  loader.registerComponent("interaction", "ListenPointer", __webpack_require__(262));
  loader.registerComponent("interaction", "ListenResize", __webpack_require__(263));
  loader.registerComponent("interaction", "ListenScroll", __webpack_require__(264));
  loader.registerComponent("interaction", "ListenSpeech", __webpack_require__(265));
  loader.registerComponent("interaction", "ListenTouch", __webpack_require__(266));
  loader.registerComponent("interaction", "ReadCoordinates", __webpack_require__(267));
  loader.registerComponent("interaction", "ReadGamepad", __webpack_require__(268));
  loader.registerComponent("interaction", "SetHash", __webpack_require__(269));
  loader.registerComponent("localstorage", "GetItem", __webpack_require__(270));
  loader.registerComponent("localstorage", "ListAdd", __webpack_require__(271));
  loader.registerComponent("localstorage", "ListGet", __webpack_require__(272));
  loader.registerComponent("localstorage", "ListRemove", __webpack_require__(273));
  loader.registerComponent("localstorage", "ListenRemoteChanges", __webpack_require__(274));
  loader.registerComponent("localstorage", "RemoveItem", __webpack_require__(275));
  loader.registerComponent("localstorage", "SetItem", __webpack_require__(276));
  loader.registerComponent("math", "Accumulate", __webpack_require__(277));
  loader.registerComponent("math", "Add", __webpack_require__(278));
  loader.registerComponent("math", "CalculateAngle", __webpack_require__(279));
  loader.registerComponent("math", "CalculateDistance", __webpack_require__(280));
  loader.registerComponent("math", "Ceil", __webpack_require__(281));
  loader.registerComponent("math", "Compare", __webpack_require__(282));
  loader.registerComponent("math", "CountSum", __webpack_require__(283));
  loader.registerComponent("math", "Divide", __webpack_require__(284));
  loader.registerComponent("math", "Exponentiate", __webpack_require__(285));
  loader.registerComponent("math", "Floor", __webpack_require__(286));
  loader.registerComponent("math", "MapRange", __webpack_require__(287));
  loader.registerComponent("math", "Modulo", __webpack_require__(288));
  loader.registerComponent("math", "Multiply", __webpack_require__(289));
  loader.registerComponent("math", "Random", __webpack_require__(290));
  loader.registerComponent("math", "RangedRandomInt", __webpack_require__(291));
  loader.registerComponent("math", "SendNumber", __webpack_require__(292));
  loader.registerComponent("math", "Subtract", __webpack_require__(293));
  loader.registerComponent("objects", "CallMethod", __webpack_require__(294));
  loader.registerComponent("objects", "CreateDate", __webpack_require__(295));
  loader.registerComponent("objects", "CreateError", __webpack_require__(296));
  loader.registerComponent("objects", "CreateObject", __webpack_require__(297));
  loader.registerComponent("objects", "DuplicateProperty", __webpack_require__(298));
  loader.registerComponent("objects", "Extend", __webpack_require__(299));
  loader.registerComponent("objects", "ExtractProperty", __webpack_require__(300));
  loader.registerComponent("objects", "FilterProperty", __webpack_require__(301));
  loader.registerComponent("objects", "FilterPropertyValue", __webpack_require__(302));
  loader.registerComponent("objects", "FlattenObject", __webpack_require__(303));
  loader.registerComponent("objects", "GetCurrentTimestamp", __webpack_require__(304));
  loader.registerComponent("objects", "GetObjectKey", __webpack_require__(305));
  loader.registerComponent("objects", "InsertProperty", __webpack_require__(306));
  loader.registerComponent("objects", "Join", __webpack_require__(307));
  loader.registerComponent("objects", "Keys", __webpack_require__(308));
  loader.registerComponent("objects", "MapProperty", __webpack_require__(309));
  loader.registerComponent("objects", "MapPropertyValue", __webpack_require__(310));
  loader.registerComponent("objects", "MergeObjects", __webpack_require__(311));
  loader.registerComponent("objects", "RemoveProperty", __webpack_require__(312));
  loader.registerComponent("objects", "ReplaceKey", __webpack_require__(313));
  loader.registerComponent("objects", "SetProperty", __webpack_require__(314));
  loader.registerComponent("objects", "SetPropertyValue", __webpack_require__(315));
  loader.registerComponent("objects", "SimplifyObject", __webpack_require__(316));
  loader.registerComponent("objects", "Size", __webpack_require__(317));
  loader.registerComponent("objects", "SliceArray", __webpack_require__(318));
  loader.registerComponent("objects", "SplitArray", __webpack_require__(319));
  loader.registerComponent("objects", "SplitObject", __webpack_require__(320));
  loader.registerComponent("objects", "UniqueArray", __webpack_require__(321));
  loader.registerComponent("objects", "Values", __webpack_require__(322));
  loader.registerComponent("packets", "Compact", __webpack_require__(323));
  loader.registerComponent("packets", "CountPackets", __webpack_require__(324));
  loader.registerComponent("packets", "Counter", __webpack_require__(325));
  loader.registerComponent("packets", "Defaults", __webpack_require__(326));
  loader.registerComponent("packets", "FilterByPosition", __webpack_require__(327));
  loader.registerComponent("packets", "FilterByValue", __webpack_require__(328));
  loader.registerComponent("packets", "FilterPacket", __webpack_require__(329));
  loader.registerComponent("packets", "FilterPackets", __webpack_require__(330));
  loader.registerComponent("packets", "Flatten", __webpack_require__(331));
  loader.registerComponent("packets", "GroupByPacket", __webpack_require__(332));
  loader.registerComponent("packets", "LastPacket", __webpack_require__(333));
  loader.registerComponent("packets", "Map", __webpack_require__(334));
  loader.registerComponent("packets", "Range", __webpack_require__(335));
  loader.registerComponent("packets", "Replace", __webpack_require__(336));
  loader.registerComponent("packets", "SendWith", __webpack_require__(337));
  loader.registerComponent("packets", "StepSequencer", __webpack_require__(338));
  loader.registerComponent("packets", "UniquePacket", __webpack_require__(339));
  loader.registerComponent("packets", "Unzip", __webpack_require__(340));
  loader.registerComponent("packets", "Zip", __webpack_require__(341));
  loader.registerComponent("packets", "First", __webpack_require__(342));
  loader.registerComponent("packets", "MergeConnections", __webpack_require__(343));
  loader.registerComponent("physics", "Spring", __webpack_require__(344));
  loader.registerComponent("react", "ListenEvents", __webpack_require__(345));
  loader.registerComponent("react", "Mount", __webpack_require__(346));
  loader.registerComponent("react", "SetProps", __webpack_require__(347));
  loader.registerComponent("react", "Unmount", __webpack_require__(348));
  loader.registerComponent("react", "Render", __webpack_require__(349));
  loader.registerComponent("routers", "ControlledSequence", __webpack_require__(350));
  loader.registerComponent("routers", "GroupRouter", __webpack_require__(351));
  loader.registerComponent("routers", "KickRouter", __webpack_require__(352));
  loader.registerComponent("routers", "PacketRegexpRouter", __webpack_require__(353));
  loader.registerComponent("routers", "PacketRouter", __webpack_require__(354));
  loader.registerComponent("routers", "SplitInSequence", __webpack_require__(355));
  loader.registerComponent("runtime", "ConnectRuntime", __webpack_require__(356));
  loader.registerComponent("runtime", "DebugNetwork", __webpack_require__(357));
  loader.registerComponent("runtime", "GetSource", __webpack_require__(358));
  loader.registerComponent("runtime", "ListComponents", __webpack_require__(359));
  loader.registerComponent("runtime", "ListenNetwork", __webpack_require__(360));
  loader.registerComponent("runtime", "ListenRuntime", __webpack_require__(361));
  loader.registerComponent("runtime", "SendComponent", __webpack_require__(362));
  loader.registerComponent("runtime", "SendEdges", __webpack_require__(363));
  loader.registerComponent("runtime", "SendGraph", __webpack_require__(364));
  loader.registerComponent("runtime", "SendGraphChanges", __webpack_require__(365));
  loader.registerComponent("strings", "Base64Encode", __webpack_require__(366));
  loader.registerComponent("strings", "CompileString", __webpack_require__(368));
  loader.registerComponent("strings", "ConvertEncoding", __webpack_require__(369));
  loader.registerComponent("strings", "EscapeQuotes", __webpack_require__(370));
  loader.registerComponent("strings", "Filter", __webpack_require__(371));
  loader.registerComponent("strings", "Jsonify", __webpack_require__(372));
  loader.registerComponent("strings", "LowerCaseString", __webpack_require__(373));
  loader.registerComponent("strings", "MatchReplace", __webpack_require__(374));
  loader.registerComponent("strings", "ParseFloat", __webpack_require__(375));
  loader.registerComponent("strings", "ParseInt", __webpack_require__(376));
  loader.registerComponent("strings", "ParseJson", __webpack_require__(377));
  loader.registerComponent("strings", "Quote", __webpack_require__(378));
  loader.registerComponent("strings", "Replace", __webpack_require__(379));
  loader.registerComponent("strings", "SendString", __webpack_require__(380));
  loader.registerComponent("strings", "Sift3Distance", __webpack_require__(381));
  loader.registerComponent("strings", "Splice", __webpack_require__(382));
  loader.registerComponent("strings", "SplitStr", __webpack_require__(383));
  loader.registerComponent("strings", "StringTemplate", __webpack_require__(384));
  loader.registerComponent("strings", "SubStr", __webpack_require__(385));
  loader.registerComponent("strings", "TemplateReplace", __webpack_require__(386));
  loader.registerComponent("strings", "ToString", __webpack_require__(387));
  loader.registerComponent("strings", "SendJson", __webpack_require__(388));
  loader.registerComponent("tween", "Ease", __webpack_require__(389));
  loader.registerComponent("tween", "EaseTime", __webpack_require__(391));
  loader.registerComponent("webaudio", "AudioFile", __webpack_require__(392));
  loader.registerComponent("webaudio", "Chorus", __webpack_require__(393));
  loader.registerComponent("webaudio", "Convolver", __webpack_require__(394));
  loader.registerComponent("webaudio", "Gain", __webpack_require__(395));
  loader.registerComponent("webaudio", "MakeTime", __webpack_require__(396));
  loader.registerComponent("webaudio", "Oscillator", __webpack_require__(397));
  loader.registerComponent("webaudio", "Panner", __webpack_require__(398));
  loader.registerComponent("webaudio", "Play", __webpack_require__(399));
  loader.registerComponent("websocket", "Connect", __webpack_require__(400));
  loader.registerComponent("websocket", "ListenMessages", __webpack_require__(401));
  loader.registerComponent("websocket", "SendMessage", __webpack_require__(402))
  if (!loaders.length) {
    return callback();
  }

  registerCustomLoaders(loader, loaders, callback);
};



/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(57);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 57 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var Base, WebSocketRuntime, platform,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = __webpack_require__(10);

  platform = __webpack_require__(26);

  WebSocketRuntime = (function(superClass) {
    extend(WebSocketRuntime, superClass);

    function WebSocketRuntime(definition) {
      this.handleMessage = bind(this.handleMessage, this);
      this.handleError = bind(this.handleError, this);
      this.connecting = false;
      this.connection = null;
      this.protocol = 'noflo';
      this.buffer = [];
      this.container = null;
      WebSocketRuntime.__super__.constructor.call(this, definition);
    }

    WebSocketRuntime.prototype.getElement = function() {
      var messageConsole, previewImage;
      if (this.container) {
        return this.container;
      }
      this.container = document.createElement('div');
      this.container.classList.add('preview-container');
      messageConsole = document.createElement('pre');
      previewImage = document.createElement('img');
      this.container.appendChild(previewImage);
      this.container.appendChild(messageConsole);
      this.on('network', function(message) {
        var encoded, hasQuery, p, separator;
        if (message.command !== 'output') {
          return;
        }
        p = message.payload;
        if ((p.type != null) && p.type === 'previewurl') {
          hasQuery = p.url.indexOf('?' !== -1);
          separator = hasQuery ? '&' : '?';
          previewImage.src = p.url + separator + 'timestamp=' + new Date().getTime();
        }
        if (p.message != null) {
          encoded = p.message.replace(/[\u00A0-\u99999<>\&]/gim, function(i) {
            return "&#" + (i.charCodeAt(0)) + ";";
          });
          messageConsole.innerHTML += encoded + "\n";
          return messageConsole.scrollTop = messageConsole.scrollHeight;
        }
      });
      this.on('disconnected', function() {
        return messageConsole.innerHTML = '';
      });
      return this.container;
    };

    WebSocketRuntime.prototype.isConnected = function() {
      return this.connection !== null;
    };

    WebSocketRuntime.prototype.connect = function() {
      if (this.connection || this.connecting) {
        return;
      }
      if (this.protocol) {
        this.connection = new platform.WebSocket(this.getAddress(), this.protocol);
      } else {
        this.connection = new platform.WebSocket(this.getAddress());
      }
      this.connection.addEventListener('open', (function(_this) {
        return function() {
          _this.connecting = false;
          _this.sendRuntime('getruntime', {});
          _this.emit('status', {
            online: true,
            label: 'connected'
          });
          _this.emit('connected');
          return _this.flush();
        };
      })(this), false);
      this.connection.addEventListener('message', this.handleMessage, false);
      this.connection.addEventListener('error', this.handleError, false);
      this.connection.addEventListener('close', (function(_this) {
        return function() {
          _this.connection = null;
          _this.emit('status', {
            online: false,
            label: 'disconnected'
          });
          return _this.emit('disconnected');
        };
      })(this), false);
      return this.connecting = true;
    };

    WebSocketRuntime.prototype.disconnect = function() {
      if (!this.connection) {
        return;
      }
      this.connecting = false;
      return this.connection.close();
    };

    WebSocketRuntime.prototype.send = function(protocol, command, payload) {
      if (this.connecting) {
        this.buffer.push({
          protocol: protocol,
          command: command,
          payload: payload
        });
        return;
      }
      if (!this.connection) {
        return;
      }
      return this.connection.send(JSON.stringify({
        protocol: protocol,
        command: command,
        payload: payload
      }));
    };

    WebSocketRuntime.prototype.handleError = function(error) {
      if (this.protocol === 'noflo') {
        delete this.protocol;
        this.connecting = false;
        this.connection = null;
        setTimeout((function(_this) {
          return function() {
            return _this.connect();
          };
        })(this), 1);
        return;
      }
      this.emit('error', error);
      this.connection = null;
      return this.connecting = false;
    };

    WebSocketRuntime.prototype.handleMessage = function(message) {
      var msg;
      msg = JSON.parse(message.data);
      switch (msg.protocol) {
        case 'runtime':
          return this.recvRuntime(msg.command, msg.payload);
        case 'graph':
          return this.recvGraph(msg.command, msg.payload);
        case 'network':
          return this.recvNetwork(msg.command, msg.payload);
        case 'component':
          return this.recvComponent(msg.command, msg.payload);
      }
    };

    WebSocketRuntime.prototype.flush = function() {
      var item, j, len, ref;
      ref = this.buffer;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        this.send(item.protocol, item.command, item.payload);
      }
      return this.buffer = [];
    };

    return WebSocketRuntime;

  })(Base);

  module.exports = WebSocketRuntime;

}).call(this);


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var _global = (function() { return this; })();
var NativeWebSocket = _global.WebSocket || _global.MozWebSocket;
var websocket_version = __webpack_require__(60);


/**
 * Expose a W3C WebSocket class with just one or two arguments.
 */
function W3CWebSocket(uri, protocols) {
	var native_instance;

	if (protocols) {
		native_instance = new NativeWebSocket(uri, protocols);
	}
	else {
		native_instance = new NativeWebSocket(uri);
	}

	/**
	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
	 * class). Since it is an Object it will be returned as it is when creating an
	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
	 *
	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
	 */
	return native_instance;
}
if (NativeWebSocket) {
	['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
		Object.defineProperty(W3CWebSocket, prop, {
			get: function() { return NativeWebSocket[prop]; }
		});
	});
}

/**
 * Module exports.
 */
module.exports = {
    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
    'version'      : websocket_version
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(61).version;


/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = {"_args":[[{"raw":"websocket@~1.0.22","scope":null,"escapedName":"websocket","name":"websocket","rawSpec":"~1.0.22","spec":">=1.0.22 <1.1.0","type":"range"},"/home/travis/build/noflo/noflo-browser/node_modules/fbp-protocol-client"]],"_from":"websocket@>=1.0.22 <1.1.0","_id":"websocket@1.0.25","_inCache":true,"_location":"/websocket","_nodeVersion":"8.7.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/websocket-1.0.25.tgz_1508372613263_0.2284609314519912"},"_npmUser":{"name":"theturtle32","email":"theturtle32@gmail.com"},"_npmVersion":"5.4.2","_phantomChildren":{"ms":"2.0.0"},"_requested":{"raw":"websocket@~1.0.22","scope":null,"escapedName":"websocket","name":"websocket","rawSpec":"~1.0.22","spec":">=1.0.22 <1.1.0","type":"range"},"_requiredBy":["/fbp-protocol-client","/microflo","/noflo-websocket"],"_resolved":"https://registry.npmjs.org/websocket/-/websocket-1.0.25.tgz","_shasum":"998ec790f0a3eacb8b08b50a4350026692a11958","_shrinkwrap":null,"_spec":"websocket@~1.0.22","_where":"/home/travis/build/noflo/noflo-browser/node_modules/fbp-protocol-client","author":{"name":"Brian McKelvey","email":"brian@worlize.com","url":"https://www.worlize.com/"},"browser":"lib/browser.js","bugs":{"url":"https://github.com/theturtle32/WebSocket-Node/issues"},"config":{"verbose":false},"contributors":[{"name":"Iñaki Baz Castillo","email":"ibc@aliax.net","url":"http://dev.sipdoc.net"}],"dependencies":{"debug":"^2.2.0","nan":"^2.3.3","typedarray-to-buffer":"^3.1.2","yaeti":"^0.0.6"},"description":"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.","devDependencies":{"buffer-equal":"^1.0.0","faucet":"^0.0.1","gulp":"git+https://github.com/gulpjs/gulp.git#4.0","gulp-jshint":"^2.0.4","jshint":"^2.0.0","jshint-stylish":"^2.2.1","tape":"^4.0.1"},"directories":{"lib":"./lib"},"dist":{"integrity":"sha512-M58njvi6ZxVb5k7kpnHh2BvNKuBWiwIYvsToErBzWhvBZYwlEiLcyLrG41T1jRcrY9ettqPYEqduLI7ul54CVQ==","shasum":"998ec790f0a3eacb8b08b50a4350026692a11958","tarball":"https://registry.npmjs.org/websocket/-/websocket-1.0.25.tgz"},"engines":{"node":">=0.10.0"},"gitHead":"d941f975e8ef6b55eafc0ef45996f4198013832c","homepage":"https://github.com/theturtle32/WebSocket-Node","keywords":["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],"license":"Apache-2.0","main":"index","maintainers":[{"name":"theturtle32","email":"brian@worlize.com"}],"name":"websocket","optionalDependencies":{},"readme":"ERROR: No README data found!","repository":{"type":"git","url":"git+https://github.com/theturtle32/WebSocket-Node.git"},"scripts":{"gulp":"gulp","install":"(node-gyp rebuild 2> builderror.log) || (exit 0)","test":"faucet test/unit"},"version":"1.0.25"}

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var Base, IframeRuntime,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = __webpack_require__(10);

  IframeRuntime = (function(superClass) {
    extend(IframeRuntime, superClass);

    function IframeRuntime(definition) {
      this.onMessage = bind(this.onMessage, this);
      this.onLoaded = bind(this.onLoaded, this);
      this.updateIframe = bind(this.updateIframe, this);
      this.origin = window.location.origin;
      this.connecting = false;
      this.connected = false;
      this.buffer = [];
      this.iframe = null;
      IframeRuntime.__super__.constructor.call(this, definition);
    }

    IframeRuntime.prototype.getElement = function() {
      return this.iframe;
    };

    IframeRuntime.prototype.isConnected = function() {
      return this.connected;
    };

    IframeRuntime.prototype.setMain = function(graph) {
      if (this.graph) {
        this.graph.removeListener('changeProperties', this.updateIframe);
      }
      graph.on('changeProperties', this.updateIframe);
      this.updateIframe();
      return IframeRuntime.__super__.setMain.call(this, graph);
    };

    IframeRuntime.prototype.setParentElement = function(parent) {
      this.iframe = document.createElement('iframe');
      this.iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms');
      return parent.appendChild(this.iframe);
    };

    IframeRuntime.prototype.connect = function() {
      if (!this.iframe) {
        throw new Error('Unable to connect without a parent element');
      }
      this.iframe.addEventListener('load', this.onLoaded, false);
      this.connecting = true;
      this.emit('status', {
        online: false,
        label: 'connecting'
      });
      this.iframe.setAttribute('src', this.getAddress());
      this.iframe.id = 'preview-iframe';
      return window.addEventListener('message', this.onMessage, false);
    };

    IframeRuntime.prototype.updateIframe = function() {
      var env;
      if (!this.iframe || !this.graph) {
        return;
      }
      env = this.graph.properties.environment;
      if (!env || !env.content) {
        return;
      }
      return this.send('iframe', 'setcontent', env.content);
    };

    IframeRuntime.prototype.disconnect = function() {
      if (this.iframe) {
        this.iframe.removeEventListener('load', this.onLoaded, false);
      }
      this.connected = false;
      window.removeEventListener('message', this.onMessage, false);
      this.emit('status', {
        online: false,
        label: 'disconnected'
      });
      return this.emit('disconnected');
    };

    IframeRuntime.prototype.onLoaded = function() {
      var timeout;
      this.once('capabilities', (function(_this) {
        return function() {
          if (timeout) {
            clearTimeout(timeout);
          }
          _this.connecting = false;
          _this.connected = true;
          _this.emit('status', {
            online: true,
            label: 'connected'
          });
          _this.emit('connected');
          _this.updateIframe();
          return _this.flush();
        };
      })(this));
      this.postMessage('runtime', 'getruntime', {});
      return timeout = setTimeout((function(_this) {
        return function() {
          return _this.postMessage('runtime', 'getruntime', {});
        };
      })(this), 500);
    };

    IframeRuntime.prototype.send = function(protocol, command, payload) {
      if (this.connecting) {
        this.buffer.push({
          protocol: protocol,
          command: command,
          payload: payload
        });
        return;
      }
      return this.postMessage(protocol, command, payload);
    };

    IframeRuntime.prototype.postMessage = function(protocol, command, payload) {
      var e, error, w;
      w = this.iframe.contentWindow;
      if (!w) {
        return;
      }
      try {
        if (w.location.href === 'about:blank') {
          return;
        }
        if (w.location.href.indexOf('chrome-extension://') !== -1) {
          throw new Error('Use * for IFRAME communications in a Chrome app');
        }
      } catch (error) {
        e = error;
        w.postMessage(JSON.stringify({
          protocol: protocol,
          command: command,
          payload: payload
        }), '*');
        return;
      }
      return w.postMessage(JSON.stringify({
        protocol: protocol,
        command: command,
        payload: payload
      }), w.location.href);
    };

    IframeRuntime.prototype.onMessage = function(message) {
      var data;
      if (typeof message.data === 'string') {
        data = JSON.parse(message.data);
      } else {
        data = message.data;
      }
      switch (data.protocol) {
        case 'runtime':
          return this.recvRuntime(data.command, data.payload);
        case 'graph':
          return this.recvGraph(data.command, data.payload);
        case 'network':
          return this.recvNetwork(data.command, data.payload);
        case 'component':
          return this.recvComponent(data.command, data.payload);
      }
    };

    IframeRuntime.prototype.flush = function() {
      var i, item, len, ref;
      ref = this.buffer;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        this.postMessage(item.protocol, item.command, item.payload);
      }
      return this.buffer = [];
    };

    return IframeRuntime;

  })(Base);

  module.exports = IframeRuntime;

}).call(this);


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var Base, OpenerRuntime,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = __webpack_require__(10);

  OpenerRuntime = (function(superClass) {
    extend(OpenerRuntime, superClass);

    function OpenerRuntime(definition) {
      this.onMessage = bind(this.onMessage, this);
      this.connecting = false;
      this.connected = false;
      this.buffer = [];
      OpenerRuntime.__super__.constructor.call(this, definition);
    }

    OpenerRuntime.prototype.getElement = function() {
      return null;
    };

    OpenerRuntime.prototype.isConnected = function() {
      return this.connected;
    };

    OpenerRuntime.prototype.setMain = function(graph) {
      if (this.graph) {
        this.graph.removeListener('changeProperties', this.updateIframe);
      }
      graph.on('changeProperties', this.updateIframe);
      return OpenerRuntime.__super__.setMain.call(this, graph);
    };

    OpenerRuntime.prototype.setParentElement = function(parent) {};

    OpenerRuntime.prototype.connect = function() {
      var timeout;
      this.connecting = true;
      this.emit('status', {
        online: false,
        label: 'connecting'
      });
      window.addEventListener('message', this.onMessage, false);
      this.once('capabilities', (function(_this) {
        return function() {
          _this.connecting = false;
          _this.connected = true;
          _this.emit('status', {
            online: true,
            label: 'connected'
          });
          _this.emit('connected');
          return _this.flush();
        };
      })(this));
      this.postMessage('runtime', 'getruntime', {});
      return timeout = setTimeout((function(_this) {
        return function() {
          return _this.postMessage('runtime', 'getruntime', {});
        };
      })(this), 500);
    };

    OpenerRuntime.prototype.updateIframe = function() {};

    OpenerRuntime.prototype.disconnect = function() {
      this.connected = false;
      window.removeEventListener('message', this.onMessage, false);
      this.emit('status', {
        online: false,
        label: 'disconnected'
      });
      return this.emit('disconnected');
    };

    OpenerRuntime.prototype.send = function(protocol, command, payload) {
      if (this.connecting) {
        this.buffer.push({
          protocol: protocol,
          command: command,
          payload: payload
        });
        return;
      }
      return this.postMessage(protocol, command, payload);
    };

    OpenerRuntime.prototype.postMessage = function(protocol, command, payload) {
      if (!window.opener) {
        return;
      }
      return window.opener.postMessage(JSON.stringify({
        protocol: protocol,
        command: command,
        payload: payload
      }), '*');
    };

    OpenerRuntime.prototype.onMessage = function(message) {
      var data;
      if (typeof message.data === 'string') {
        data = JSON.parse(message.data);
      } else {
        data = message.data;
      }
      switch (data.protocol) {
        case 'runtime':
          return this.recvRuntime(data.command, data.payload);
        case 'graph':
          return this.recvGraph(data.command, data.payload);
        case 'network':
          return this.recvNetwork(data.command, data.payload);
        case 'component':
          return this.recvComponent(data.command, data.payload);
      }
    };

    OpenerRuntime.prototype.flush = function() {
      var i, item, len, ref;
      ref = this.buffer;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        this.postMessage(item.protocol, item.command, item.payload);
      }
      return this.buffer = [];
    };

    return OpenerRuntime;

  })(Base);

  module.exports = OpenerRuntime;

}).call(this);


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var Base, WebRTCRuntime, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = __webpack_require__(10);

  debug = __webpack_require__(5)('fbp-protocol-client:webrtc');

  WebRTCRuntime = (function(superClass) {
    extend(WebRTCRuntime, superClass);

    function WebRTCRuntime(definition) {
      this.handleMessage = bind(this.handleMessage, this);
      this.handleError = bind(this.handleError, this);
      this.peer = null;
      this.connecting = false;
      this.connection = null;
      this.protocol = 'webrtc';
      this.buffer = [];
      WebRTCRuntime.__super__.constructor.call(this, definition);
    }

    WebRTCRuntime.prototype.getElement = function() {
      var console;
      return null;
      console = document.createElement('pre');
      this.on('network', function(message) {
        var encoded;
        if (message.command !== 'output') {
          return;
        }
        if (!message.payload.message) {
          message.payload.message = '';
        }
        encoded = message.payload.message.replace(/[\u00A0-\u99999<>\&]/gim, function(i) {
          return "&#" + (i.charCodeAt(0)) + ";";
        });
        console.innerHTML += encoded + "\n";
        return console.scrollTop = console.scrollHeight;
      });
      return this.on('disconnected', function() {
        return console.innerHTML = '';
      });
    };

    WebRTCRuntime.prototype.isConnected = function() {
      return this.connection !== null;
    };

    WebRTCRuntime.prototype.connect = function() {
      var address, id, options, signaller;
      if (this.connection || this.connecting) {
        return;
      }
      address = this.getAddress();
      if (address.indexOf('#') !== -1) {
        signaller = address.split('#')[0];
        id = address.split('#')[1];
      } else {
        signaller = 'https://api.flowhub.io';
        id = address;
      }
      options = {
        room: id,
        debug: true,
        channels: {
          chat: true
        },
        signaller: signaller,
        capture: false,
        constraints: false,
        expectedLocalStreams: 0
      };
      this.peer = RTC(options);
      this.peer.on('channel:opened:chat', (function(_this) {
        return function(id, dc) {
          _this.connection = dc;
          _this.connection.onmessage = function(data) {
            debug('message', data.data);
            return _this.handleMessage(data.data);
          };
          _this.connecting = false;
          _this.sendRuntime('getruntime', {});
          _this.emit('status', {
            online: true,
            label: 'connected'
          });
          _this.emit('connected');
          return _this.flush();
        };
      })(this));
      this.peer.on('channel:closed:chat', (function(_this) {
        return function(id, dc) {
          dc.onmessage = null;
          _this.connection = null;
          _this.emit('status', {
            online: false,
            label: 'disconnected'
          });
          return _this.emit('disconnected');
        };
      })(this));
      return this.connecting = true;
    };

    WebRTCRuntime.prototype.disconnect = function() {
      if (!this.connection) {
        return;
      }
      this.connecting = false;
      this.connection.close();
      this.connection = null;
      return this.emit('disconnected');
    };

    WebRTCRuntime.prototype.send = function(protocol, command, payload) {
      var m;
      m = {
        protocol: protocol,
        command: command,
        payload: payload
      };
      if (this.connecting) {
        this.buffer.push(m);
        return;
      }
      if (!this.connection) {
        return;
      }
      debug('send', m);
      return this.connection.send(JSON.stringify(m));
    };

    WebRTCRuntime.prototype.handleError = function(error) {
      this.connection = null;
      return this.connecting = false;
    };

    WebRTCRuntime.prototype.handleMessage = function(message) {
      var msg;
      msg = JSON.parse(message);
      switch (msg.protocol) {
        case 'runtime':
          return this.recvRuntime(msg.command, msg.payload);
        case 'graph':
          return this.recvGraph(msg.command, msg.payload);
        case 'network':
          return this.recvNetwork(msg.command, msg.payload);
        case 'component':
          return this.recvComponent(msg.command, msg.payload);
      }
    };

    WebRTCRuntime.prototype.flush = function() {
      var item, j, len, ref;
      ref = this.buffer;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        this.send(item.protocol, item.command, item.payload);
      }
      return this.buffer = [];
    };

    return WebRTCRuntime;

  })(Base);

  module.exports = WebRTCRuntime;

}).call(this);


/***/ }),
/* 65 */
/***/ (function(module, exports) {

(function() {
  exports.sendGraph = function(graph, runtime, callback, main) {
    var edge, graphId, i, iip, j, k, len, len1, len2, node, priv, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6;
    if ((ref = graph.properties.environment) != null ? ref.type : void 0) {
      if ((ref1 = graph.properties.environment.type) !== 'all' && ref1 !== runtime.definition.type) {
        return callback(new Error("Graph type " + graph.properties.environment.type + " doesn't match runtime type " + runtime.definition.type));
      }
    }
    if (!runtime.canDo('protocol:graph')) {
      return callback(new Error('Runtime doesn\'t support graph protocol'));
    }
    graphId = graph.name || graph.properties.id;
    runtime.sendGraph('clear', {
      id: graphId,
      name: graph.name,
      main: main,
      library: graph.properties.project,
      icon: graph.properties.icon || '',
      description: graph.properties.description || ''
    });
    ref2 = graph.nodes;
    for (i = 0, len = ref2.length; i < len; i++) {
      node = ref2[i];
      runtime.sendGraph('addnode', {
        id: node.id,
        component: node.component,
        metadata: node.metadata,
        graph: graphId
      });
    }
    ref3 = graph.edges;
    for (j = 0, len1 = ref3.length; j < len1; j++) {
      edge = ref3[j];
      runtime.sendGraph('addedge', {
        src: {
          node: edge.from.node,
          port: edge.from.port
        },
        tgt: {
          node: edge.to.node,
          port: edge.to.port
        },
        metadata: edge.metadata,
        graph: graphId
      });
    }
    ref4 = graph.initializers;
    for (k = 0, len2 = ref4.length; k < len2; k++) {
      iip = ref4[k];
      runtime.sendGraph('addinitial', {
        src: {
          data: iip.from.data
        },
        tgt: {
          node: iip.to.node,
          port: iip.to.port
        },
        metadata: iip.metadata,
        graph: graphId
      });
    }
    if (graph.inports) {
      ref5 = graph.inports;
      for (pub in ref5) {
        priv = ref5[pub];
        runtime.sendGraph('addinport', {
          "public": pub,
          node: priv.process,
          port: priv.port,
          graph: graphId
        });
      }
    }
    if (graph.outports) {
      ref6 = graph.outports;
      for (pub in ref6) {
        priv = ref6[pub];
        runtime.sendGraph('addoutport', {
          "public": pub,
          node: priv.process,
          port: priv.port,
          graph: graphId
        });
      }
    }
    return callback();
  };

}).call(this);


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var Base, MicroFloRuntime, debug, microflo, parseAddress, parseQueryString,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = __webpack_require__(10);

  microflo = __webpack_require__(67);

  debug = __webpack_require__(5)('fbp-protocol-client:microflo');

  parseQueryString = function(queryString) {
    var params, queries;
    queries = queryString.split("&");
    params = {};
    queries.forEach(function(query, i) {
      var kv;
      kv = query.split('=');
      return params[kv[0]] = kv[1];
    });
    return params;
  };

  parseAddress = function(address) {
    var d, end, info, k, params, query, queryStart, start, v;
    info = {
      type: null,
      device: null,
      baudrate: "9600"
    };
    if (address.indexOf('serial://') === 0) {
      info.type = 'serial';
    }
    if (address.indexOf('simulator://') === 0) {
      info.type = 'simulator';
    }
    if (info.type) {
      start = address.indexOf('://') + '://'.length;
      end = address.indexOf('?');
      if (end < 0) {
        end = address.length;
      }
      d = address.substring(start, end);
      if (d) {
        info.device = d;
      }
    }
    queryStart = address.indexOf('?');
    if (queryStart !== -1) {
      query = address.substring(queryStart + 1);
      params = parseQueryString(query);
      for (k in params) {
        v = params[k];
        info[k] = v;
      }
    }
    return info;
  };

  MicroFloRuntime = (function(superClass) {
    extend(MicroFloRuntime, superClass);

    function MicroFloRuntime(definition) {
      this.onMessage = bind(this.onMessage, this);
      this.updatecontainer = bind(this.updatecontainer, this);
      this.connecting = false;
      this.buffer = [];
      this.container = null;
      this.runtime = null;
      this.on('connected', this.updatecontainer);
      MicroFloRuntime.__super__.constructor.call(this, definition);
    }

    MicroFloRuntime.prototype.isConnected = function() {
      return this.runtime !== null;
    };

    MicroFloRuntime.prototype.getElement = function() {
      return this.container;
    };

    MicroFloRuntime.prototype.setParentElement = function(parent) {
      this.container = document.createElement('container');
      return parent.appendChild(this.container);
    };

    MicroFloRuntime.prototype.setMain = function(graph) {
      if (this.graph) {
        this.graph.removeListener('changeProperties', this.updatecontainer);
      }
      graph.on('changeProperties', this.updatecontainer);
      return MicroFloRuntime.__super__.setMain.call(this, graph);
    };

    MicroFloRuntime.prototype.openComm = function() {
      var getRuntime, info;
      getRuntime = null;
      info = parseAddress(this.getAddress());
      if (info.type === 'serial') {
        getRuntime = (function(_this) {
          return function(callback) {
            return microflo.serial.openTransport(info.device, parseInt(info.baudrate), function(err, transport) {
              var dev, filename, fs;
              if (err) {
                return callback(err);
              }
              dev = new microflo.runtime.Runtime(transport);
              if (((typeof process !== "undefined" && process !== null ? process.env : void 0) != null) && process.env['MICROFLO_COMPONENT_MAP']) {
                fs = __webpack_require__(6);
                filename = process.env['MICROFLO_COMPONENT_MAP'];
                dev.library.definition = JSON.parse(fs.readFileSync(filename));
              }
              return callback(null, dev);
            });
          };
        })(this);
      } else if (info.type === 'simulator') {
        getRuntime = (function(_this) {
          return function(callback) {
            var build, sim;
            build = __webpack_require__(68);
            sim = new microflo.simulator.RuntimeSimulator(build.runtime);
            sim.library.definition = build.library;
            sim.start();
            return callback(null, sim);
          };
        })(this);
      } else {
        return this.emit('error', new Error("Unsupported type " + info.type));
      }
      return getRuntime((function(_this) {
        return function(err, runtime) {
          if (err) {
            return _this.emit('error', err);
          }
          runtime.on('message', function(response) {
            return _this.onMessage({
              data: response
            });
          });
          return runtime.device.open(function() {
            _this.connecting = false;
            if (err) {
              debug('MicroFlo error:', err);
              _this.emit('error', err);
              return;
            }
            _this.runtime = runtime;
            _this.sendRuntime('getruntime', {});
            _this.emit('status', {
              online: true,
              label: 'connected'
            });
            _this.emit('connected');
            return _this.flush();
          });
        };
      })(this));
    };

    MicroFloRuntime.prototype.connect = function() {
      var f, ref, transport;
      if (this.connecting) {
        return;
      }
      this.connecting = true;
      transport = typeof runtime !== "undefined" && runtime !== null ? runtime.transport : void 0;
      if ((ref = this.runtime) != null) {
        ref.stop();
      }
      this.runtime = null;
      if (transport) {
        return transport.close((function(_this) {
          return function() {
            return _this.openComm();
          };
        })(this));
      } else {
        f = (function(_this) {
          return function() {
            return _this.openComm();
          };
        })(this);
        return setTimeout(f, 0);
      }
    };

    MicroFloRuntime.prototype.disconnect = function() {
      var onClosed;
      onClosed = (function(_this) {
        return function(success) {
          _this.runtime = null;
          _this.emit('status', {
            online: false,
            label: 'disconnected'
          });
          return _this.emit('disconnected');
        };
      })(this);
      if (this.runtime) {
        return this.runtime.transport.close(onClosed);
      } else {
        return onClosed(false);
      }
    };

    MicroFloRuntime.prototype.updatecontainer = function() {
      if (!this.container) {
        return;
      }
      return this.container.id = 'preview-container';
    };

    MicroFloRuntime.prototype.send = function(protocol, command, payload) {
      var e, error, msg;
      msg = {
        protocol: protocol,
        command: command,
        payload: payload
      };
      if (this.connecting) {
        this.buffer.push(msg);
        return;
      }
      try {
        return this.runtime.handleMessage(msg);
      } catch (error) {
        e = error;
        debug(e.stack);
        return debug(e);
      }
    };

    MicroFloRuntime.prototype.onMessage = function(message) {
      switch (message.data.protocol) {
        case 'runtime':
          return this.recvRuntime(message.data.command, message.data.payload);
        case 'graph':
          return this.recvGraph(message.data.command, message.data.payload);
        case 'network':
          return this.recvNetwork(message.data.command, message.data.payload);
        case 'component':
          return this.recvComponent(message.data.command, message.data.payload);
      }
    };

    MicroFloRuntime.prototype.flush = function() {
      var item, j, len, ref;
      ref = this.buffer;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        this.send(item.protocol, item.command, item.payload);
      }
      return this.buffer = [];
    };

    return MicroFloRuntime;

  })(Base);

  module.exports = MicroFloRuntime;

  MicroFloRuntime.parseAddress = parseAddress;

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 67 */
/***/ (function(module, exports) {

module.exports = require("microflo");

/***/ }),
/* 68 */
/***/ (function(module, exports) {

module.exports = require("microflo-emscripten");

/***/ }),
/* 69 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 69;

/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = {"properties":{"name":"main","environment":{"type":"noflo-browser","content":"<!-- default -->"},"icon":""},"inports":{},"outports":{},"groups":[],"processes":{},"connections":[]}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var Graph, noflo,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  noflo = __webpack_require__(0);

  Graph = (function(superClass) {
    extend(Graph, superClass);

    function Graph(metadata1) {
      this.metadata = metadata1;
      this.network = null;
      this.ready = true;
      this.started = false;
      this.starting = false;
      this.baseDir = null;
      this.loader = null;
      this.load = 0;
      this.inPorts = new noflo.InPorts({
        graph: {
          datatype: 'all',
          description: 'NoFlo graph definition to be used with the subgraph component',
          required: true
        }
      });
      this.outPorts = new noflo.OutPorts;
      this.inPorts.graph.on('ip', (function(_this) {
        return function(packet) {
          if (packet.type !== 'data') {
            return;
          }
          return _this.setGraph(packet.data, function(err) {
            if (err) {
              return _this.error(err);
            }
          });
        };
      })(this));
    }

    Graph.prototype.setGraph = function(graph, callback) {
      this.ready = false;
      if (typeof graph === 'object') {
        if (typeof graph.addNode === 'function') {
          this.createNetwork(graph, callback);
          return;
        }
        noflo.graph.loadJSON(graph, (function(_this) {
          return function(err, instance) {
            if (err) {
              return callback(err);
            }
            instance.baseDir = _this.baseDir;
            return _this.createNetwork(instance, callback);
          };
        })(this));
        return;
      }
      if (graph.substr(0, 1) !== "/" && graph.substr(1, 1) !== ":" && process && process.cwd) {
        graph = (process.cwd()) + "/" + graph;
      }
      return noflo.graph.loadFile(graph, (function(_this) {
        return function(err, instance) {
          if (err) {
            return callback(err);
          }
          instance.baseDir = _this.baseDir;
          return _this.createNetwork(instance, callback);
        };
      })(this));
    };

    Graph.prototype.createNetwork = function(graph, callback) {
      this.description = graph.properties.description || '';
      this.icon = graph.properties.icon || this.icon;
      if (!graph.name) {
        graph.name = this.nodeId;
      }
      graph.componentLoader = this.loader;
      return noflo.createNetwork(graph, (function(_this) {
        return function(err, network1) {
          _this.network = network1;
          if (err) {
            return callback(err);
          }
          _this.emit('network', _this.network);
          _this.subscribeNetwork(_this.network);
          return _this.network.connect(function(err) {
            var name, node, ref;
            if (err) {
              return callback(err);
            }
            ref = _this.network.processes;
            for (name in ref) {
              node = ref[name];
              _this.findEdgePorts(name, node);
            }
            _this.setToReady();
            return callback();
          });
        };
      })(this), true);
    };

    Graph.prototype.subscribeNetwork = function(network) {
      var contexts;
      contexts = [];
      this.network.on('start', (function(_this) {
        return function() {
          var ctx;
          ctx = {};
          contexts.push(ctx);
          return _this.activate(ctx);
        };
      })(this));
      return this.network.on('end', (function(_this) {
        return function() {
          var ctx;
          ctx = contexts.pop();
          if (!ctx) {
            return;
          }
          return _this.deactivate(ctx);
        };
      })(this));
    };

    Graph.prototype.isExportedInport = function(port, nodeName, portName) {
      var exported, i, len, priv, pub, ref, ref1;
      ref = this.network.graph.inports;
      for (pub in ref) {
        priv = ref[pub];
        if (!(priv.process === nodeName && priv.port === portName)) {
          continue;
        }
        return pub;
      }
      ref1 = this.network.graph.exports;
      for (i = 0, len = ref1.length; i < len; i++) {
        exported = ref1[i];
        if (!(exported.process === nodeName && exported.port === portName)) {
          continue;
        }
        this.network.graph.checkTransactionStart();
        this.network.graph.removeExport(exported["public"]);
        this.network.graph.addInport(exported["public"], exported.process, exported.port, exported.metadata);
        this.network.graph.checkTransactionEnd();
        return exported["public"];
      }
      return false;
    };

    Graph.prototype.isExportedOutport = function(port, nodeName, portName) {
      var exported, i, len, priv, pub, ref, ref1;
      ref = this.network.graph.outports;
      for (pub in ref) {
        priv = ref[pub];
        if (!(priv.process === nodeName && priv.port === portName)) {
          continue;
        }
        return pub;
      }
      ref1 = this.network.graph.exports;
      for (i = 0, len = ref1.length; i < len; i++) {
        exported = ref1[i];
        if (!(exported.process === nodeName && exported.port === portName)) {
          continue;
        }
        this.network.graph.checkTransactionStart();
        this.network.graph.removeExport(exported["public"]);
        this.network.graph.addOutport(exported["public"], exported.process, exported.port, exported.metadata);
        this.network.graph.checkTransactionEnd();
        return exported["public"];
      }
      return false;
    };

    Graph.prototype.setToReady = function() {
      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
        return process.nextTick((function(_this) {
          return function() {
            _this.ready = true;
            return _this.emit('ready');
          };
        })(this));
      } else {
        return setTimeout((function(_this) {
          return function() {
            _this.ready = true;
            return _this.emit('ready');
          };
        })(this), 0);
      }
    };

    Graph.prototype.findEdgePorts = function(name, process) {
      var inPorts, outPorts, port, portName, targetPortName;
      inPorts = process.component.inPorts.ports || process.component.inPorts;
      outPorts = process.component.outPorts.ports || process.component.outPorts;
      for (portName in inPorts) {
        port = inPorts[portName];
        targetPortName = this.isExportedInport(port, name, portName);
        if (targetPortName === false) {
          continue;
        }
        this.inPorts.add(targetPortName, port);
        this.inPorts[targetPortName].once('connect', (function(_this) {
          return function() {
            if (_this.starting) {
              return;
            }
            if (_this.isStarted()) {
              return;
            }
            return _this.start(function() {});
          };
        })(this));
      }
      for (portName in outPorts) {
        port = outPorts[portName];
        targetPortName = this.isExportedOutport(port, name, portName);
        if (targetPortName === false) {
          continue;
        }
        this.outPorts.add(targetPortName, port);
      }
      return true;
    };

    Graph.prototype.isReady = function() {
      return this.ready;
    };

    Graph.prototype.isSubgraph = function() {
      return true;
    };

    Graph.prototype.setUp = function(callback) {
      this.starting = true;
      if (!this.isReady()) {
        this.once('ready', (function(_this) {
          return function() {
            return _this.setUp(callback);
          };
        })(this));
        return;
      }
      if (!this.network) {
        return callback(null);
      }
      return this.network.start(function(err) {
        if (err) {
          return callback(err);
        }
        this.starting = false;
        return callback();
      });
    };

    Graph.prototype.tearDown = function(callback) {
      this.starting = false;
      if (!this.network) {
        return callback(null);
      }
      return this.network.stop(function(err) {
        if (err) {
          return callback(err);
        }
        return callback();
      });
    };

    return Graph;

  })(noflo.Component);

  exports.getComponent = function(metadata) {
    return new Graph(metadata);
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var _, convert, noflo, owl;

_ = __webpack_require__(3);

noflo = __webpack_require__(0);

owl = __webpack_require__(19);

convert = function(object, level, output) {
  var datum, i, j, key, len, results, value;
  if (_.isArray(object)) {
    for (i = j = 0, len = object.length; j < len; i = ++j) {
      datum = object[i];
      output.send({
        out: datum
      });
      delete object[i];
    }
    object = _.compact(object);
  }
  if (level <= 0) {
    if (!_.isEmpty(object)) {
      output.send({
        out: object
      });
    }
    return;
  }
  results = [];
  for (key in object) {
    value = object[key];
    output.send({
      out: new noflo.IP('openBracket', key)
    });
    if (_.isObject(value)) {
      convert(value, level - 1, output);
    } else {
      output.send({
        out: value
      });
    }
    results.push(output.send({
      out: new noflo.IP('closeBracket', key)
    }));
  }
  return results;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Convert each incoming object into a stream";
  c.icon = 'expand';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Array/Object packets to convert'
  });
  c.inPorts.add('depth', {
    datatype: 'int',
    description: 'Maximum level of recursion when conversion incoming object packet',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    description: 'Inner items from incoming array/objects with associated keys as groups'
  });
  return c.process(function(input, output) {
    var data, depth, object;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('depth').length && !input.hasData('depth')) {
      return;
    }
    depth = input.hasData('depth') ? input.getData('depth') : 2e308;
    data = input.getData('in');
    if (!_.isArray(data) && !_.isObject(data)) {
      output.sendDone({
        out: data
      });
      return;
    }
    object = owl.deepCopy(data);
    output.send({
      out: new noflo.IP('openBracket', null)
    });
    convert(object, depth, output);
    output.send({
      out: new noflo.IP('closeBracket', null)
    });
    return output.done();
  });
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'font';
  c.description = "stringifies a simple object with configurable associator and delimiter";
  c.inPorts.add('in', {
    datatype: 'object',
    description: 'Object to convert'
  });
  c.inPorts.add('assoc', {
    datatype: 'string',
    description: 'Associating string for key/value pairs',
    control: true,
    "default": ':'
  });
  c.inPorts.add('delim', {
    datatype: 'string',
    description: 'Delimiter string between object properties',
    control: true,
    "default": ','
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var assoc, data, delim, key, str, value;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('assoc').length && !input.hasData('assoc')) {
      return;
    }
    if (input.attached('delim').length && !input.hasData('delim')) {
      return;
    }
    assoc = input.hasData('assoc') ? input.getData('assoc') : ':';
    delim = input.hasData('delim') ? input.getData('delim') : ',';
    data = input.getData('in');
    str = [];
    for (key in data) {
      value = data[key];
      if (Object.prototype.toString.apply(value) !== "[object String]") {
        value = JSON.stringify(value);
      }
      str.push("" + key + assoc + value);
    }
    return output.sendDone({
      out: str.join(delim)
    });
  });
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'compress';
  c.description = "Merges incoming IPs stream into one array";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var current, data, i, len, level, packet, stream;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in');
    level = 0;
    data = [];
    current = data;
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      if (packet.type === 'openBracket') {
        current = [];
        level++;
      }
      if (packet.type === 'data') {
        current.push(packet.data);
        continue;
      }
      if (packet.type === 'closeBracket') {
        data.push(current);
        level--;
      }
    }
    if (data.length === 1 && Array.isArray(data[0])) {
      output.send(data[0]);
    } else {
      output.send(data);
    }
    return output.done();
  });
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var _, locate, noflo, objectify,
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

locate = function(object, groups) {
  var group, here, i, len;
  here = object;
  for (i = 0, len = groups.length; i < len; i++) {
    group = groups[i];
    here = here[group];
  }
  return here;
};

objectify = function(object) {
  var key, length, obj, value;
  if (!_.isObject(object)) {
    return object;
  }
  obj = {};
  length = object.length;
  if (_.keys(object).length > length) {
    for (key in object) {
      if (!hasProp.call(object, key)) continue;
      value = object[key];
      if (!_.isNumber(key)) {
        obj[key] = objectify(value);
      }
    }
  } else {
    obj = object.slice();
  }
  return obj;
};

exports.getComponent = function() {
  return new PacketsToObject;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'compress';
  c.description = "Convert the structure of a packet stream into an object";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var after, before, groups, here, i, len, object, packet, result, stream;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in');
    groups = [];
    object = [];
    if (stream[0].type === 'openBracket') {
      before = stream.shift();
      after = stream.pop();
    }
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      if (packet.type === 'openBracket') {
        here = locate(object, groups);
        here[packet.data] = [];
        groups.push(packet.data);
        continue;
      }
      if (packet.type === 'data') {
        here = locate(object, groups);
        here.push(packet.data);
      }
      if (packet.type === 'closeBracket') {
        groups.pop();
      }
    }
    result = objectify(object);
    return output.sendDone(result);
  });
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Assume packets at odd numbers to be keys and those at even numbers to be values";
  c.icon = 'link';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Stream of IPs representing key(odd packets) and value(even packets)'
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var count, i, key, len, object, packet, stream;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in').filter(function(ip) {
      return ip.type === 'data';
    });
    count = 0;
    object = {};
    key = null;
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      count++;
      if (count % 2 === 0) {
        if (key != null) {
          object[key] = packet.data;
          key = null;
        }
        continue;
      } else if (typeof packet.data === 'string') {
        key = packet.data;
        continue;
      }
    }
    return output.sendDone({
      out: object
    });
  });
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('in', {
    datatype: 'object'
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var data, id, object, objects, property, value;
    if (!input.hasData('in')) {
      return;
    }
    object = input.getData('in');
    data = {};
    for (property in object) {
      objects = object[property];
      for (id in objects) {
        value = objects[id];
        if (!data[id]) {
          data[id] = {};
        }
        data[id][property] = value;
      }
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var isExternal, noflo;

noflo = __webpack_require__(0);

isExternal = function(url) {
  if (url.indexOf('data:') === 0) {
    return false;
  }
  return location.href.replace("http://", "").replace("https://", "").split("/")[0] !== url.replace("http://", "").replace("https://", "").split("/")[0];
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Converts a URL to use a CORS-enabling proxy';
  c.icon = 'arrow-circle-o-right';
  c.service = 'http://crossorigin.me/';
  c.inPorts.add('in', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var match_http, out, path, payload;
    if (!input.hasData('in')) {
      return;
    }
    payload = input.getData('in');
    if (typeof payload !== 'string') {
      return output.done(new Error('String required'));
    }
    out = payload;
    if (noflo.isBrowser() && isExternal(payload)) {
      match_http = /^(https?):\/\//;
      path = payload.replace(match_http, '');
      out = c.service + path;
    }
    return output.sendDone({
      out: out
    });
  });
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'globe';
  c.description = 'HTTP GET a URL';
  c.inPorts.add('url', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    url: ['out', 'error']
  };
  return c.process(function(input, output) {
    var req, url;
    if (!input.hasData('url')) {
      return;
    }
    url = input.getData('url');
    req = new XMLHttpRequest;
    req.onreadystatechange = function() {
      if (req.readyState !== 4) {
        return;
      }
      if (req.status === 200) {
        output.sendDone({
          out: req.responseText
        });
        return;
      }
      return output.done(new Error("Error loading " + url));
    };
    req.open('GET', url, true);
    return req.send(null);
  });
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'globe';
  c.description = 'Get contents via JSONP from a URL';
  c.inPorts.add('url', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    url: ['out', 'error']
  };
  return c.process(function(input, output) {
    var body, id, s, url;
    if (!input.hasData('url')) {
      return;
    }
    url = input.getData('url');
    id = 'noflo' + (Math.random() * 100).toString().replace(/\./g, '');
    body = document.querySelector('body');
    s = document.createElement('script');
    s.onerror = function(e) {
      delete window[id];
      body.removeChild(s);
      return output.done(e);
    };
    window[id] = function(data) {
      delete window[id];
      body.removeChild(s);
      if (data && data.meta && data.meta.status === 404) {
        return output.done(new Error(url + " not found}"));
      }
      return output.sendDone({
        out: data
      });
    };
    s.type = 'application/javascript';
    if (url.indexOf('?') === -1) {
      url = url + "?callback=?";
    }
    s.src = url.replace('callback=?', "callback=" + id);
    return body.appendChild(s);
  });
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'dot-circle-o';
  c.description = 'Configure Require.js';
  c.inPorts.add('config', {
    datatype: 'object',
    description: 'Require.js configuration object'
  });
  c.outPorts.add('ready', {
    datatype: 'bang',
    required: false
  });
  c.outPorts.add('error', {
    datatype: 'object',
    required: false
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'config',
    out: 'ready',
    forwardGroups: true,
    async: true
  }, function(data, groups, out, callback) {
    if (!window.requirejs) {
      return callback(new Error('Require.js not available'));
      return;
    }
    window.requirejs.config(data);
    out.send(true);
    return callback();
  });
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'dot-circle-o';
  c.description = 'Load an AMD module';
  c.inPorts.add('path', {
    datatype: 'string',
    description: 'Path of the module to load'
  });
  c.outPorts.add('module', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object',
    required: false
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'path',
    out: 'module',
    forwardGroups: true,
    async: true
  }, function(path, groups, out, callback) {
    if (!window.requirejs) {
      return callback(new Error('Require.js not available'));
    }
    return window.requirejs([path], function(module) {
      out.beginGroup(path);
      out.send(module);
      out.endGroup(path);
      return callback();
    }, function(err) {
      return callback(err);
    });
  });
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, ClearRect, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

ClearRect = (function(superClass) {
  extend(ClearRect, superClass);

  ClearRect.prototype.description = 'Clear rectangle';

  ClearRect.prototype.icon = 'eraser';

  function ClearRect() {
    var ports;
    ports = {
      point: {
        datatype: 'object',
        description: 'top left point',
        required: true
      },
      width: {
        datatype: 'number',
        required: true
      },
      height: {
        datatype: 'number',
        required: true
      }
    };
    ArrayableHelper(this, 'clearrect', ports);
  }

  return ClearRect;

})(noflo.Component);

exports.getComponent = function() {
  return new ClearRect;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, hex;
  c = new noflo.Component;
  c.description = 'Convert a RGB array to a hex value';
  c.inPorts.add('in', {
    datatype: 'array'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  hex = function(n) {
    var s;
    s = n.toString(16);
    if (s.length === 1) {
      s = "0" + s;
    }
    return s;
  };
  return c.process(function(input, output) {
    var out, rgb;
    if (!input.hasData('in')) {
      return;
    }
    rgb = input.getData('in');
    out = "#" + hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);
    output.sendDone({
      out: out
    });
  });
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var DrawCommands, TAU, noflo,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

noflo = __webpack_require__(0);

TAU = Math.PI * 2;

DrawCommands = (function() {
  function DrawCommands(context, canvas1) {
    this.context = context;
    this.canvas = canvas1;
    this.drawimage = bind(this.drawimage, this);
    this.circle = bind(this.circle, this);
    this.arc = bind(this.arc, this);
    this.strokeRect = bind(this.strokeRect, this);
    this.fillRect = bind(this.fillRect, this);
    this.rectangle = bind(this.rectangle, this);
    this.recurse = bind(this.recurse, this);
    this.transform = bind(this.transform, this);
    this.group = bind(this.group, this);
    this.path = bind(this.path, this);
    this.pathItem = bind(this.pathItem, this);
    this.bezierCurve = bind(this.bezierCurve, this);
    this.fill = bind(this.fill, this);
    this.stroke = bind(this.stroke, this);
    this.fillStyle = bind(this.fillStyle, this);
    this.lineWidth = bind(this.lineWidth, this);
    this.strokeStyle = bind(this.strokeStyle, this);
    this.clearRect = bind(this.clearRect, this);
    this.parseThing = bind(this.parseThing, this);
  }

  DrawCommands.prototype.parse = function(commands, clearEvery) {
    if (clearEvery == null) {
      clearEvery = false;
    }
    if (clearEvery) {
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    return this.parseThing(commands);
  };

  DrawCommands.prototype.parseThing = function(thing, before, after) {
    var item, k, len, results;
    if ((thing != null) && (thing.type != null) && (this[thing.type] != null)) {
      if (before != null) {
        before();
      }
      this[thing.type](thing);
      if (after != null) {
        return after();
      }
    } else if (thing instanceof Array) {
      results = [];
      for (k = 0, len = thing.length; k < len; k++) {
        item = thing[k];
        if (item == null) {
          continue;
        }
        results.push(this.parseThing(item, before, after));
      }
      return results;
    }
  };

  DrawCommands.prototype.clearRect = function(clearRect) {
    var h, w, x, y;
    x = clearRect.point.x;
    y = clearRect.point.y;
    w = clearRect.width;
    h = clearRect.height;
    return this.context.clearRect(x, y, w, h);
  };

  DrawCommands.prototype.strokeStyle = function(data) {
    return this.context.strokeStyle = data.value;
  };

  DrawCommands.prototype.lineWidth = function(data) {
    return this.context.lineWidth = data.value;
  };

  DrawCommands.prototype.fillStyle = function(data) {
    return this.context.fillStyle = data.value;
  };

  DrawCommands.prototype.stroke = function(stroke) {
    var after, before, oldStyle, oldWidth;
    if (stroke.strokestyle != null) {
      oldStyle = this.context.strokeStyle;
      this.context.strokeStyle = stroke.strokestyle;
    }
    if (stroke.linewidth != null) {
      oldWidth = this.context.linewidth;
      this.context.lineWidth = stroke.linewidth;
    }
    before = function() {
      return this.context.beginPath();
    };
    after = function() {
      if (stroke.closepath) {
        this.context.closePath();
      }
      return this.context.stroke();
    };
    this.parseThing(stroke.items, before.bind(this), after.bind(this));
    if (oldStyle != null) {
      this.context.strokeStyle = oldStyle;
    }
    if (oldWidth != null) {
      return this.context.lineWidth = oldWidth;
    }
  };

  DrawCommands.prototype.fill = function(fill) {
    var after, before, oldStyle;
    if (fill.fillstyle != null) {
      oldStyle = this.context.fillStyle;
      this.context.fillStyle = fill.fillstyle;
    }
    before = function() {
      return this.context.beginPath();
    };
    after = function() {
      this.context.closePath();
      return this.context.fill();
    };
    this.parseThing(fill.items, before.bind(this), after.bind(this));
    if (oldStyle != null) {
      return this.context.fillStyle = oldStyle;
    }
  };

  DrawCommands.prototype.bezierCurve = function(curve) {
    return this.context.bezierCurveTo(curve.control1.x, curve.control1.y, curve.control2.x, curve.control2.y, curve.end.x, curve.end.y);
  };

  DrawCommands.prototype.pathItem = function(thing, i) {
    var child, j, k, len;
    if (thing instanceof Array) {
      for (j = k = 0, len = thing.length; k < len; j = ++k) {
        child = thing[j];
        this.pathItem(child, j);
      }
      return;
    }
    if (thing.type != null) {
      switch (thing.type) {
        case 'point':
          if (i === 0) {
            return this.context.moveTo(thing.x, thing.y);
          } else {
            return this.context.lineTo(thing.x, thing.y);
          }
          break;
        case 'beziercurve':
          return this.bezierCurve(thing);
        case 'arc':
          return this.arc(thing);
      }
    }
  };

  DrawCommands.prototype.path = function(path) {
    var i, k, len, ref, results, thing;
    ref = path.items;
    results = [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      thing = ref[i];
      if (thing == null) {
        continue;
      }
      results.push(this.pathItem(thing, i));
    }
    return results;
  };

  DrawCommands.prototype.group = function(group) {
    var k, len, ref, results, thing;
    ref = group.groupables;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      thing = ref[k];
      if (!((thing != null) && (thing.type != null) && (this[thing.type] != null))) {
        continue;
      }
      results.push(this[thing.type].call(this, thing));
    }
    return results;
  };

  DrawCommands.prototype.transform = function(transform, recurse) {
    if (transform.translate != null) {
      this.context.translate(transform.translate.x, transform.translate.y);
    }
    if (transform.rotate != null) {
      this.context.rotate(transform.rotate);
    }
    if (transform.scaleboth) {
      this.context.scale(transform.scaleboth, transform.scaleboth);
    } else if ((transform.scale != null) && transform.scale.x && transform.scale.y) {
      this.context.scale(transform.scale.x, transform.scale.y);
    }
    this.parseThing(transform.items);
    if ((recurse != null) && recurse > 0) {
      this.transform(transform, recurse - 1);
    }
    if (transform.scaleboth) {
      this.context.scale(1 / transform.scaleboth, 1 / transform.scaleboth);
    } else if ((transform.scale != null) && transform.scale.x && transform.scale.y) {
      this.context.scale(1 / transform.scale.x, 1 / transform.scale.y);
    }
    if (transform.rotate != null) {
      this.context.rotate(0 - transform.rotate);
    }
    if (transform.translate != null) {
      return this.context.translate(0 - transform.translate.x, 0 - transform.translate.y);
    }
  };

  DrawCommands.prototype.recurse = function(recurse) {
    var k, len, ref, results, thing;
    ref = recurse.recursables;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      thing = ref[k];
      if (thing == null) {
        continue;
      }
      if (thing.type === 'transform') {
        results.push(this.transform(thing, recurse.count));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  DrawCommands.prototype.rectangle = function(rect) {
    var h, w, x, y;
    x = rect.point.x;
    y = rect.point.y;
    w = rect.width;
    h = rect.height;
    this.context.moveTo(x, y);
    this.context.lineTo(x + w, y);
    this.context.lineTo(x + w, y + h);
    this.context.lineTo(x, y + h);
    return this.context.lineTo(x, y);
  };

  DrawCommands.prototype.fillRect = function(fillrect) {
    var h, w, x, y;
    x = fillrect.point.x;
    y = fillrect.point.y;
    w = fillrect.width;
    h = fillrect.height;
    return this.context.fillRect(x, y, w, h);
  };

  DrawCommands.prototype.strokeRect = function(strokerect) {
    var h, w, x, y;
    x = strokerect.point.x;
    y = strokerect.point.y;
    w = strokerect.width;
    h = strokerect.height;
    return this.context.strokeRect(x, y, w, h);
  };

  DrawCommands.prototype.arc = function(arc) {
    return this.context.arc(arc.center.x, arc.center.y, arc.radius, arc.start, arc.end, arc.reverse);
  };

  DrawCommands.prototype.circle = function(circle) {
    return this.context.arc(circle.center.x, circle.center.y, circle.radius, 0, TAU);
  };

  DrawCommands.prototype.drawimage = function(drawimage) {
    var d, p, s;
    if (drawimage.image == null) {
      return;
    }
    if ((drawimage.sourcerect != null) && (drawimage.destrect != null)) {
      d = drawimage.destrect;
      s = drawimage.sourcerect;
      this.context.drawImage(drawimage.image, d.point.x, d.point.y, d.width, d.height, s.point.x, s.point.y, s.width, s.height);
      return;
    }
    if (drawimage.destrect != null) {
      d = drawimage.destrect;
      this.context.drawImage(drawimage.image, d.point.x, d.point.y, d.width, d.height);
      return;
    }
    if (drawimage.destpoint != null) {
      p = drawimage.destpoint;
      this.context.drawImage(drawimage.image, p.x, p.y);
      return;
    }
    return this.context.drawImage(drawimage.image, 0, 0);
  };

  return DrawCommands;

})();

exports.getComponent = function() {
  return new Draw;
};

exports.getComponent = function() {
  var c, ensureScope;
  c = new noflo.Component;
  c.description = 'Draws received drawing commands';
  c.icon = 'pencil';
  c.inPorts.add('canvas', {
    datatype: 'object',
    control: true
  });
  c.inPorts.add('commands', {
    datatype: 'object',
    addressable: true
  });
  c.inPorts.add('tick', {
    datatype: 'bang'
  });
  c.inPorts.add('drawevery', {
    datatype: 'boolean',
    "default": false,
    control: true
  });
  c.inPorts.add('clearevery', {
    datatype: 'boolean',
    "default": false,
    control: true
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.scopes = {};
  c.tearDown = function(callback) {
    c.scopes = {};
    return callback();
  };
  ensureScope = function(scope, canvas) {
    if (c.scopes[scope]) {
      if (c.scopes[scope].canvas !== canvas) {
        c.scopes[scope].canvas = canvas;
        c.scopes[scope].context = canvas.getContext('2d');
      }
      return c.scopes[scope];
    }
    c.scopes[scope] = {
      commands: [],
      context: canvas.getContext('2d'),
      canvas: canvas
    };
    return c.scopes[scope];
  };
  c.forwardBrackets = {
    tick: ['canvas', 'error']
  };
  return c.process(function(input, output) {
    var canvas, clearEvery, draw, drawEvery, indexesWithData, scope;
    if (!input.hasData('canvas')) {
      return;
    }
    if (input.attached('drawevery').length && !input.hasData('drawevery')) {
      return;
    }
    if (input.attached('clearevery').length && !input.hasData('clearevery')) {
      return;
    }
    if (input.hasData('tick')) {
      input.getData('tick');
      clearEvery = false;
      if (input.hasData('clearevery')) {
        clearEvery = input.getData('clearevery');
      }
      canvas = input.getData('canvas');
      scope = ensureScope(input.scope, canvas);
      draw = new DrawCommands(scope.context, canvas);
      draw.parse(scope.commands, clearEvery);
      output.sendDone({
        canvas: canvas
      });
      return;
    }
    indexesWithData = input.attached('commands').filter(function(idx) {
      return input.hasData(['commands', idx]);
    });
    if (!indexesWithData.length) {
      return;
    }
    drawEvery = false;
    if (input.hasData('drawevery')) {
      drawEvery = input.getData('drawevery');
    }
    clearEvery = false;
    if (input.hasData('clearevery')) {
      clearEvery = input.getData('clearevery');
    }
    canvas = input.getData('canvas');
    scope = ensureScope(input.scope, canvas);
    indexesWithData.forEach(function(idx) {
      return scope.commands[idx] = input.getData(['commands', idx]);
    });
    if (!drawEvery) {
      output.done();
      return;
    }
    draw = new DrawCommands(scope.context, canvas);
    draw.parse(scope.commands, clearEvery);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, DrawImage, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

DrawImage = (function(superClass) {
  extend(DrawImage, superClass);

  DrawImage.prototype.description = 'Draws the specified image';

  DrawImage.prototype.icon = 'pencil-square';

  function DrawImage() {
    var ports;
    ports = {
      image: {
        description: 'canvas, img, or video to draw',
        datatype: 'object',
        required: true
      },
      destpoint: {
        description: 'destination point (full size)',
        datatype: 'object',
        "default": {
          x: 0,
          y: 0
        },
        required: false
      },
      destrect: {
        description: 'destination rect, to scale',
        datatype: 'object',
        required: false
      },
      sourcerect: {
        description: 'source rect, to scale',
        datatype: 'object',
        required: false
      }
    };
    ArrayableHelper(this, 'drawimage', ports);
  }

  return DrawImage;

})(noflo.Component);

exports.getComponent = function() {
  return new DrawImage;
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Fill, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Fill = (function(superClass) {
  extend(Fill, superClass);

  Fill.prototype.description = 'Fills the received paths, rectangles, circles, and arcs';

  Fill.prototype.icon = 'square';

  function Fill() {
    var ports;
    ports = {
      items: {
        datatype: 'object',
        description: 'shapes (paths, circles, and rectangles) to fill',
        addressable: true,
        required: true
      },
      fillstyle: {
        datatype: 'string',
        description: 'css color string',
        required: false
      }
    };
    ArrayableHelper(this, 'fill', ports);
  }

  return Fill;

})(noflo.Component);

exports.getComponent = function() {
  return new Fill;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, FillRect, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

FillRect = (function(superClass) {
  extend(FillRect, superClass);

  FillRect.prototype.description = 'Fills a rectangle';

  FillRect.prototype.icon = 'pencil-square';

  function FillRect() {
    var ports;
    ports = {
      point: {
        datatype: 'object',
        description: 'top left point',
        required: true
      },
      width: {
        datatype: 'number',
        required: true
      },
      height: {
        datatype: 'number',
        required: true
      }
    };
    ArrayableHelper(this, 'fillrect', ports);
  }

  exports.getComponent = function() {
    return new FillRect;
  };

  return FillRect;

})(noflo.Component);


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Sets the global fill style';
  c.icon = 'pencil-square-o';
  c.inPorts.add('style', {
    datatype: 'string'
  });
  c.outPorts.add('fillstyle', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var fillStyle;
    if (!input.hasData('style')) {
      return;
    }
    fillStyle = {
      type: 'fillStyle',
      value: input.getData('style')
    };
    output.sendDone({
      out: new noflo.IP('data', fillStyle)
    });
  });
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Group drawing commands or primatives into a flattened array.';
  c.icon = 'folder-o';
  c.inPorts.add('items', {
    datatype: 'object',
    addressable: true
  });
  c.outPorts.add('group', {
    datatype: 'array'
  });
  return c.process(function(input, output) {
    var group, indexesWithData;
    indexesWithData = input.attached('items').filter(function(idx) {
      return input.hasData(['items', idx]);
    });
    if (indexesWithData.length !== input.attached('items').length) {
      return;
    }
    group = [];
    indexesWithData.forEach(function(idx) {
      var data;
      data = input.getData(['items', idx]);
      if (Array.isArray(data)) {
        group = group.concat(data);
        return;
      }
      return group.push(data);
    });
    return output.sendDone({
      group: group
    });
  });
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Sets the line width';
  c.icon = 'pencil-square';
  c.inPorts.add('width', {
    datatype: 'number'
  });
  c.outPorts.add('linewidth', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var linewidth;
    if (!input.hasData('width')) {
      return;
    }
    linewidth = {
      type: 'lineWidth',
      value: input.getData('width')
    };
    output.sendDone({
      out: new noflo.IP('data', linewidth)
    });
  });
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeArc, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeArc = (function(superClass) {
  extend(MakeArc, superClass);

  MakeArc.prototype.description = 'Creates an arc or arcs';

  MakeArc.prototype.icon = 'power-off';

  function MakeArc() {
    var ports;
    ports = {
      center: {
        datatype: 'object',
        description: 'point for center',
        required: true
      },
      radius: {
        datatype: 'number',
        required: true
      },
      start: {
        datatype: 'number',
        description: 'start angle in radians',
        required: true
      },
      end: {
        datatype: 'number',
        description: 'end angle in radians',
        required: true
      },
      reverse: {
        datatype: 'boolean',
        required: true,
        "default": false
      }
    };
    ArrayableHelper(this, 'arc', ports);
  }

  return MakeArc;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeArc;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeBezierCurve, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeBezierCurve = (function(superClass) {
  extend(MakeBezierCurve, superClass);

  MakeBezierCurve.prototype.description = 'Creates a Bezier curve';

  MakeBezierCurve.prototype.icon = 'pencil-square';

  function MakeBezierCurve() {
    var ports;
    ports = {
      control1: {
        datatype: 'object',
        type: 'noflo-canvas/point',
        description: 'control point 1',
        required: true
      },
      control2: {
        datatype: 'object',
        type: 'noflo-canvas/point',
        description: 'control point 2',
        required: true
      },
      end: {
        datatype: 'object',
        type: 'noflo-canvas/point',
        description: 'end point',
        required: true
      }
    };
    ArrayableHelper(this, 'beziercurve', ports);
  }

  return MakeBezierCurve;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeBezierCurve;
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeCircle, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeCircle = (function(superClass) {
  extend(MakeCircle, superClass);

  MakeCircle.prototype.description = 'Creates a circle or circles';

  MakeCircle.prototype.icon = 'circle-o';

  function MakeCircle() {
    var ports;
    ports = {
      center: {
        datatype: 'object',
        type: 'noflo-canvas/point',
        description: 'center point',
        required: true
      },
      radius: {
        datatype: 'number',
        required: true
      }
    };
    ArrayableHelper(this, 'circle', ports);
  }

  return MakeCircle;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeCircle;
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeColor, colorToString, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

colorToString = function(color) {
  if (color.alpha != null) {
    return "hsla(" + color.hue + ", " + color.saturation + "%, " + color.lightness + "%, " + color.alpha + ")";
  }
  return "hsl(" + color.hue + ", " + color.saturation + "%, " + color.lightness + "%)";
};

MakeColor = (function(superClass) {
  extend(MakeColor, superClass);

  MakeColor.prototype.description = 'Creates HSL or HSLA color or colors';

  MakeColor.prototype.icon = 'tint';

  function MakeColor() {
    var compute, ports;
    ports = {
      hue: {
        datatype: 'number',
        description: 'from 0 to 360',
        required: true
      },
      saturation: {
        datatype: 'number',
        description: 'from 0 to 100',
        required: true
      },
      lightness: {
        datatype: 'number',
        description: 'from 0 to 100',
        required: true
      },
      alpha: {
        datatype: 'number',
        description: 'from 0 to 1.0',
        required: false
      }
    };
    compute = (function(_this) {
      return function(props) {
        var color;
        if (!((props.hue != null) && (props.saturation != null) && (props.lightness != null))) {
          return;
        }
        color = props;
        if (props.hue instanceof Array || props.saturation instanceof Array || props.lightness instanceof Array || props.alpha instanceof Array) {
          color = _this.expandToArray(props);
          color = color.map(colorToString);
        } else {
          color = colorToString(props);
        }
        return color;
      };
    })(this);
    ArrayableHelper(this, 'color', ports, {
      compute: compute
    });
  }

  return MakeColor;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeColor;
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeGrid, expandToArray, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeGrid = (function(superClass) {
  extend(MakeGrid, superClass);

  MakeGrid.prototype.description = 'Creates a grid or line of points';

  MakeGrid.prototype.icon = 'crosshairs';

  function MakeGrid() {
    var compute, ports;
    ports = {
      x: {
        datatype: 'number',
        required: true
      },
      y: {
        datatype: 'number',
        required: true
      }
    };
    compute = function(props) {
      if (!((props.x != null) && (props.y != null))) {
        return;
      }
      if (props.x instanceof Array || props.y instanceof Array) {
        props = expandToArray(props);
      }
      return props;
    };
    ArrayableHelper(this, 'point', ports, {
      compute: compute
    });
  }

  return MakeGrid;

})(noflo.Component);

expandToArray = function(props) {
  var arr, i, j, length, obj, ref, ref1, x, xLen, y, yLen;
  length = 0;
  xLen = 1;
  yLen = 1;
  if (props.x instanceof Array) {
    xLen = props.x.length;
  }
  if (props.y instanceof Array) {
    yLen = props.y.length;
  }
  length = xLen * yLen;
  arr = [];
  for (y = i = 0, ref = yLen - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
    for (x = j = 0, ref1 = xLen - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
      obj = {};
      obj.type = 'point';
      if (props.x instanceof Array) {
        obj.x = props.x[x] != null ? props.x[x] : props.x[xLen - 1];
      } else {
        obj.x = props.x;
      }
      if (props.y instanceof Array) {
        obj.y = props.y[y] != null ? props.y[y] : props.y[yLen - 1];
      } else {
        obj.y = props.y;
      }
      if ((obj.x != null) && (obj.y != null)) {
        arr.push(obj);
      }
    }
  }
  return arr;
};

exports.getComponent = function() {
  return new MakeGrid;
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Make an array of numbers by increment';
  c.icon = 'folder-o';
  c.inPorts.add('from', {
    datatype: 'number'
  });
  c.inPorts.add('to', {
    datatype: 'number'
  });
  c.inPorts.add('increment', {
    datatype: 'int',
    "default": 1,
    control: true
  });
  c.outPorts.add('range', {
    datatype: 'array'
  });
  return c.process(function(input, output) {
    var f, from, increment, range, ref, to;
    if (!input.hasData('from', 'to')) {
      return;
    }
    if (input.attached('increment').length && !input.hasData('increment')) {
      return;
    }
    ref = input.getData('from', 'to'), from = ref[0], to = ref[1];
    increment = input.hasData('increment') ? input.getData('increment') : 1;
    range = [];
    f = from;
    if (from <= to) {
      while (f <= to) {
        range.push(f);
        f += increment;
      }
    } else {
      while (f >= to) {
        range.push(f);
        f -= increment;
      }
    }
    return output.sendDone({
      range: range
    });
  });
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakePath, noflo, typeIsArray,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

typeIsArray = Array.isArray || function(value) {
  return Object.toString.call(value) === '[object Array]';
};

MakePath = (function(superClass) {
  extend(MakePath, superClass);

  MakePath.prototype.description = 'Makes a path given a number of points, curves, etc';

  MakePath.prototype.icon = 'star-o';

  function MakePath() {
    var compute, ports;
    ports = {
      items: {
        datatype: 'object',
        description: 'points, arcs, and curves to combine to make path',
        addressable: true,
        required: true
      }
    };
    compute = (function(_this) {
      return function(props) {
        var arrayCount, i, item, len, out, ref;
        out = {
          type: 'path',
          items: []
        };
        arrayCount = 0;
        ref = props.items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item == null) {
            return;
          }
          if (typeIsArray(item)) {
            arrayCount++;
          }
        }
        if (arrayCount === 0) {
          out.items = props.items;
        } else if (props.items.length === 1 && arrayCount === 1) {
          out.items = props.items[0];
        } else {
          out.items = _this.expandToArray(props.items);
          out = _this.expandToArray(out);
        }
        return out;
      };
    })(this);
    ArrayableHelper(this, 'path', ports, {
      compute: compute
    });
  }

  return MakePath;

})(noflo.Component);

exports.getComponent = function() {
  return new MakePath;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakePoint, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakePoint = (function(superClass) {
  extend(MakePoint, superClass);

  MakePoint.prototype.description = 'Creates a point or points';

  MakePoint.prototype.icon = 'crosshairs';

  function MakePoint() {
    var ports;
    ports = {
      x: {
        datatype: 'number',
        required: true
      },
      y: {
        datatype: 'number',
        required: true
      }
    };
    ArrayableHelper(this, 'point', ports);
  }

  return MakePoint;

})(noflo.Component);

exports.getComponent = function() {
  return new MakePoint;
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeRGBColor, colorToString, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

colorToString = function(color) {
  var a, b, g, r;
  r = Math.round(color.red);
  g = Math.round(color.green);
  b = Math.round(color.blue);
  if (color.alpha != null) {
    a = color.alpha;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  } else {
    return "rgb(" + r + ", " + g + ", " + b + ")";
  }
};

MakeRGBColor = (function(superClass) {
  extend(MakeRGBColor, superClass);

  MakeRGBColor.prototype.description = 'Creates RGA or RGBA color or colors';

  MakeRGBColor.prototype.icon = 'tint';

  function MakeRGBColor() {
    var compute, ports;
    ports = {
      red: {
        datatype: 'int',
        description: 'from 0 to 255',
        required: true
      },
      green: {
        datatype: 'int',
        description: 'from 0 to 255',
        required: true
      },
      blue: {
        datatype: 'int',
        description: 'from 0 to 255',
        required: true
      },
      alpha: {
        datatype: 'number',
        description: 'optional, from 0 to 1.0',
        required: false
      }
    };
    compute = (function(_this) {
      return function(props) {
        var color;
        if (!((props.red != null) && (props.green != null) && (props.blue != null))) {
          return;
        }
        color = props;
        if (props.red instanceof Array || props.green instanceof Array || props.blue instanceof Array || props.alpha instanceof Array) {
          color = _this.expandToArray(props);
          color = color.map(colorToString);
        } else {
          color = colorToString(props);
        }
        return color;
      };
    })(this);
    ArrayableHelper(this, 'color', ports, {
      compute: compute
    });
  }

  return MakeRGBColor;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeRGBColor;
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Make an array of random numbers';
  c.icon = 'random';
  c.inPorts.add('min', {
    datatype: 'number'
  });
  c.inPorts.add('max', {
    datatype: 'number'
  });
  c.inPorts.add('count', {
    datatype: 'int'
  });
  c.outPorts.add('numbers', {
    datatype: 'array'
  });
  return c.process(function(input, output) {
    var count, i, j, max, min, number, numbers, ref, ref1, spread;
    if (!input.hasData('min', 'max', 'count')) {
      return;
    }
    ref = input.getData('min', 'max', 'count'), min = ref[0], max = ref[1], count = ref[2];
    spread = max - min;
    if (count === 1) {
      number = min + Math.random() * spread;
      output.sendDone({
        numbers: [number]
      });
      return;
    }
    numbers = [];
    for (i = j = 0, ref1 = count - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
      numbers[i] = min + Math.random() * spread;
    }
    return output.sendDone({
      numbers: numbers
    });
  });
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Make an array of evenly-spaced numbers';
  c.icon = 'folder-o';
  c.inPorts.add('from', {
    datatype: 'number'
  });
  c.inPorts.add('to', {
    datatype: 'number'
  });
  c.inPorts.add('count', {
    datatype: 'int'
  });
  c.outPorts.add('range', {
    datatype: 'array'
  });
  return c.process(function(input, output) {
    var count, f, from, i, increment, j, range, ref, ref1, spread, to;
    if (!input.hasData('from', 'to', 'count')) {
      return;
    }
    ref = input.getData('from', 'to', 'count'), from = ref[0], to = ref[1], count = ref[2];
    if (count === 1) {
      output.sendDone({
        range: [from]
      });
      return;
    }
    range = [];
    f = from;
    spread = to - from;
    increment = spread / (count - 1);
    for (i = j = 0, ref1 = count - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
      range[i] = from + increment * i;
    }
    return output.sendDone({
      range: range
    });
  });
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeRectangle, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeRectangle = (function(superClass) {
  extend(MakeRectangle, superClass);

  MakeRectangle.prototype.description = 'Creates a rectangle or rectangles';

  MakeRectangle.prototype.icon = 'square-o';

  function MakeRectangle() {
    var ports;
    ports = {
      point: {
        datatype: 'object',
        description: 'top left point',
        required: true
      },
      width: {
        datatype: 'number',
        required: true
      },
      height: {
        datatype: 'number',
        required: true
      }
    };
    ArrayableHelper(this, 'rectangle', ports);
  }

  return MakeRectangle;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeRectangle;
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeRectangleAspectRatio, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeRectangleAspectRatio = (function(superClass) {
  extend(MakeRectangleAspectRatio, superClass);

  MakeRectangleAspectRatio.prototype.description = 'Creates a rectangle, maintaining original aspect ratio';

  MakeRectangleAspectRatio.prototype.icon = 'square-o';

  function MakeRectangleAspectRatio() {
    var compute, ports;
    ports = {
      width: {
        datatype: 'number',
        description: '<0 for dont-care',
        required: true
      },
      height: {
        datatype: 'number',
        description: '<0 for dont-care',
        required: true
      },
      origwidth: {
        datatype: 'number',
        description: 'from 0 to 100',
        required: true
      },
      origheight: {
        datatype: 'number',
        description: 'from 0 to 1.0',
        required: false
      }
    };
    compute = (function(_this) {
      return function(props) {
        var inputs, out;
        if (!_this.hasAllProps(props)) {
          return;
        }
        inputs = props;
        out = _this.computeRectangle(inputs);
        out.type = 'rectangle';
        out.point = {
          type: 'point',
          x: 0,
          y: 0
        };
        return out;
      };
    })(this);
    ArrayableHelper(this, 'rectangle', ports, {
      compute: compute
    });
  }

  MakeRectangleAspectRatio.prototype.hasAllProps = function(props) {
    return (props.width != null) && (props.height != null) && (props.origwidth != null) && (props.origheight != null);
  };

  MakeRectangleAspectRatio.prototype.computeRectangle = function(inputs) {
    var aspectRatio, o, targetHeight, targetWidth;
    aspectRatio = inputs.origheight / inputs.origwidth;
    targetWidth = inputs.width;
    targetHeight = inputs.height;
    if (targetWidth < 0 && targetHeight < 0) {
      targetWidth = inputs.origwidth;
      targetHeight = inputs.origheight;
    } else if (inputs.width < 0) {
      targetWidth = targetHeight / aspectRatio;
    } else if (inputs.height < 0) {
      targetHeight = targetWidth * aspectRatio;
    }
    o = {
      height: targetHeight,
      width: targetWidth
    };
    return o;
  };

  return MakeRectangleAspectRatio;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeRectangleAspectRatio;
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Makes a translation recursive.';
  c.icon = 'retweet';
  c.inPorts.add('recursables', {
    datatype: 'object',
    description: 'Only translate is recursable'
  });
  c.inPorts.add('count', {
    datatype: 'number'
  });
  c.outPorts.add('recurse', {
    datatype: 'object'
  });
  c.recurses = {};
  c.tearDown = function(callback) {
    c.recurses = {};
    return callback();
  };
  return c.process(function(input, output) {
    var indexesWithData;
    if (!c.recurses[input.scope]) {
      c.recurses[input.scope] = {
        type: 'recurse',
        recursables: [],
        count: null
      };
    }
    if (input.hasData('count')) {
      c.recurses[input.scope].count = input.getData('count');
      if (!c.recurses[input.scope].recursables.length) {
        output.done();
        return;
      }
      output.sendDone({
        recurse: c.recurses[input.scope]
      });
      return;
    }
    indexesWithData = input.attached('recursables').filter(function(idx) {
      return input.hasData(['recursables', idx]);
    });
    if (!indexesWithData.length) {
      return;
    }
    indexesWithData.forEach(function(idx) {
      var data;
      data = input.getData(['recursables', idx]);
      return c.recurses[input.scope].recursables[idx] = data;
    });
    output.sendDone({
      recurse: c.recurses[input.scope]
    });
  });
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Stroke, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Stroke = (function(superClass) {
  extend(Stroke, superClass);

  Stroke.prototype.description = 'Strokes lines for paths, rectangles, circles, and arcs';

  Stroke.prototype.icon = 'square-o';

  function Stroke() {
    var ports;
    ports = {
      items: {
        datatype: 'object',
        description: 'shapes (paths, circles, and rectangles) to stroke',
        addressable: true,
        required: true
      },
      strokestyle: {
        datatype: 'string',
        description: 'css color string or canvas style',
        required: false
      },
      linewidth: {
        datatype: 'number',
        description: 'stroke width in pixels',
        required: false
      },
      closepath: {
        datatype: 'boolean',
        description: 'draw line back to start point',
        value: false
      }
    };
    ArrayableHelper(this, 'stroke', ports);
  }

  return Stroke;

})(noflo.Component);

exports.getComponent = function() {
  return new Stroke;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, StrokeRect, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

StrokeRect = (function(superClass) {
  extend(StrokeRect, superClass);

  StrokeRect.prototype.description = 'Strokes a rectangle';

  StrokeRect.prototype.icon = 'pencil-square-o';

  function StrokeRect() {
    var ports;
    ports = {
      point: {
        datatype: 'object',
        description: 'top left point',
        required: true
      },
      width: {
        datatype: 'number',
        required: true
      },
      height: {
        datatype: 'number',
        required: true
      }
    };
    ArrayableHelper(this, 'strokerect', ports);
  }

  exports.getComponent = function() {
    return new StrokeRect;
  };

  return StrokeRect;

})(noflo.Component);


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Sets the global stroke style';
  c.icon = 'pencil-square-o';
  c.inPorts.add('style', {
    datatype: 'string'
  });
  c.outPorts.add('strokestyle', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var strokeStyle;
    if (!input.hasData('style')) {
      return;
    }
    strokeStyle = {
      type: 'strokeStyle',
      value: input.getData('style')
    };
    output.sendDone({
      out: new noflo.IP('data', strokeStyle)
    });
  });
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Transform, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Transform = (function(superClass) {
  extend(Transform, superClass);

  Transform.prototype.description = 'Translate, rotate, and/or scale passed drawing commands.';

  Transform.prototype.icon = 'arrows';

  function Transform() {
    var ports;
    ports = {
      items: {
        datatype: 'object',
        description: 'fill and stroke commands to transform',
        addressable: true,
        required: true
      },
      translate: {
        datatype: 'object',
        type: 'noflo-canvas/point',
        description: 'translate by this vector',
        required: false
      },
      scale: {
        datatype: 'object',
        type: 'noflo-canvas/point',
        description: 'stretch or mirror',
        required: false
      },
      scaleboth: {
        datatype: 'number',
        description: 'scale both x and y',
        required: false
      },
      rotate: {
        datatype: 'number',
        type: 'noflo-canvas/angle',
        description: 'angle in radians',
        required: false
      }
    };
    ArrayableHelper(this, 'transform', ports);
  }

  return Transform;

})(noflo.Component);

exports.getComponent = function() {
  return new Transform;
};


/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = {"properties":{"name":"PointFromObject","id":"PointFromObject","environment":{"type":"all","content":""}},"inports":{"in":{"process":"core/Split_2l54n","port":"in","metadata":{"x":36,"y":36}}},"outports":{"point":{"process":"canvas/MakePoint_h7co8","port":"point","metadata":{"x":792,"y":36}}},"groups":[],"processes":{"core/Split_2l54n":{"component":"core/Split","metadata":{"label":"core/Split","x":180,"y":36}},"x":{"component":"objects/ExtractProperty","metadata":{"label":"x","x":324,"y":144}},"y":{"component":"objects/ExtractProperty","metadata":{"label":"y","x":324,"y":36}},"adapters/PacketsToArray_7a90h":{"component":"adapters/PacketsToArray","metadata":{"label":"adapters/PacketsToArray","x":468,"y":144}},"adapters/PacketsToArray_xtzm":{"component":"adapters/PacketsToArray","metadata":{"label":"adapters/PacketsToArray","x":468,"y":36}},"canvas/MakePoint_h7co8":{"component":"canvas/MakePoint","metadata":{"label":"canvas/MakePoint","x":648,"y":36}}},"connections":[{"src":{"process":"x","port":"out"},"tgt":{"process":"adapters/PacketsToArray_7a90h","port":"in"},"metadata":{"route":null}},{"src":{"process":"adapters/PacketsToArray_7a90h","port":"out"},"tgt":{"process":"canvas/MakePoint_h7co8","port":"x"},"metadata":{}},{"src":{"process":"y","port":"out"},"tgt":{"process":"adapters/PacketsToArray_xtzm","port":"in"},"metadata":{"route":null}},{"src":{"process":"adapters/PacketsToArray_xtzm","port":"out"},"tgt":{"process":"canvas/MakePoint_h7co8","port":"y"},"metadata":{}},{"src":{"process":"core/Split_2l54n","port":"out"},"tgt":{"process":"x","port":"in"},"metadata":{}},{"src":{"process":"core/Split_2l54n","port":"out"},"tgt":{"process":"y","port":"in"},"metadata":{"route":0}},{"data":"x","tgt":{"process":"x","port":"key"}},{"data":"y","tgt":{"process":"y","port":"key"}}]}

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = {"properties":{"name":"RectangleFromObject","id":"RectangleFromObject","environment":{"type":"all","content":""}},"inports":{"in":{"process":"core/Split_xvdlb","port":"in","metadata":{"x":540,"y":-288}}},"outports":{"rectangle":{"process":"canvas/MakeRectangle_v3sfl","port":"rectangle","metadata":{"x":1296,"y":-252}}},"groups":[],"processes":{"width":{"component":"objects/ExtractProperty","metadata":{"label":"width","x":828,"y":-288}},"adapters/PacketsToArray_smxrx":{"component":"adapters/PacketsToArray","metadata":{"label":"adapters/PacketsToArray","x":972,"y":-288}},"adapters/PacketsToArray_gysu3":{"component":"adapters/PacketsToArray","metadata":{"label":"adapters/PacketsToArray","x":972,"y":-180}},"height":{"component":"objects/ExtractProperty","metadata":{"label":"height","x":828,"y":-180}},"core/Split_xvdlb":{"component":"core/Split","metadata":{"label":"core/Split","x":684,"y":-288}},"canvas/MakeRectangle_v3sfl":{"component":"canvas/MakeRectangle","metadata":{"label":"canvas/MakeRectangle","x":1152,"y":-252}},"canvas/PointFromObject_l1e2e":{"component":"canvas/PointFromObject","metadata":{"label":"canvas/PointFromObject","x":828,"y":-396}}},"connections":[{"src":{"process":"core/Split_xvdlb","port":"out"},"tgt":{"process":"width","port":"in"},"metadata":{"route":0}},{"src":{"process":"core/Split_xvdlb","port":"out"},"tgt":{"process":"height","port":"in"},"metadata":{"route":0}},{"src":{"process":"width","port":"out"},"tgt":{"process":"adapters/PacketsToArray_smxrx","port":"in"},"metadata":{"route":null}},{"src":{"process":"adapters/PacketsToArray_smxrx","port":"out"},"tgt":{"process":"canvas/MakeRectangle_v3sfl","port":"width"},"metadata":{}},{"src":{"process":"height","port":"out"},"tgt":{"process":"adapters/PacketsToArray_gysu3","port":"in"},"metadata":{"route":null}},{"src":{"process":"adapters/PacketsToArray_gysu3","port":"out"},"tgt":{"process":"canvas/MakeRectangle_v3sfl","port":"height"},"metadata":{}},{"src":{"process":"core/Split_xvdlb","port":"out"},"tgt":{"process":"canvas/PointFromObject_l1e2e","port":"in"},"metadata":{"route":0}},{"src":{"process":"canvas/PointFromObject_l1e2e","port":"point"},"tgt":{"process":"canvas/MakeRectangle_v3sfl","port":"point"},"metadata":{}},{"data":"width","tgt":{"process":"width","port":"key"}},{"data":"height","tgt":{"process":"height","port":"key"}}]}

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Makes a Canvas with given dimensions';
  c.icon = 'pencil-square';
  c.inPorts.add('width', {
    datatype: 'int'
  });
  c.inPorts.add('height', {
    datatype: 'int'
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var canvas, height, ref, width;
    if (!input.hasData('width', 'height')) {
      return;
    }
    ref = input.getData('width', 'height'), width = ref[0], height = ref[1];
    canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Exports a canvas to JPEG';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.outPorts.add('jpeg', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var canvas, img;
    if (!input.hasData('canvas')) {
      return;
    }
    canvas = input.getData('canvas');
    img = canvas.toDataURL('image/jpeg');
    output.sendDone({
      jpeg: img
    });
  });
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Exports a canvas to PNG';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.outPorts.add('png', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var canvas, img;
    if (!input.hasData('canvas')) {
      return;
    }
    canvas = input.getData('canvas');
    img = canvas.toDataURL('image/png');
    output.sendDone({
      png: img
    });
  });
};


/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = {"properties":{"name":"CopyCanvas","id":"CopyCanvas","environment":{"type":"noflo-browser"}},"inports":{"canvas":{"process":"core/Repeat_wuue3","port":"in","metadata":{"x":0,"y":36}}},"outports":{"canvas_copy":{"process":"Draw","port":"canvas","metadata":{"x":828,"y":72}}},"groups":[{"name":"create","nodes":["CreateCanvas","getHeight","getWidth"],"metadata":{"description":"make new canvas with original dimensions"}},{"name":"copy","nodes":["DrawImage","Draw"],"metadata":{"description":"draw original to new"}}],"processes":{"CreateCanvas":{"component":"canvas/CreateCanvas","metadata":{"label":"CreateCanvas","x":396,"y":252}},"DrawImage":{"component":"canvas/DrawImage","metadata":{"label":"DrawImage","x":576,"y":72}},"Draw":{"component":"canvas/Draw","metadata":{"label":"Draw","x":684,"y":72}},"core/Repeat_wuue3":{"component":"core/Repeat","metadata":{"label":"core/Repeat","x":144,"y":36}},"getHeight":{"component":"dom/GetAttribute","metadata":{"label":"getHeight","x":288,"y":252}},"getWidth":{"component":"dom/GetAttribute","metadata":{"label":"getWidth","x":288,"y":144}}},"connections":[{"src":{"process":"core/Repeat_wuue3","port":"out"},"tgt":{"process":"getWidth","port":"element"},"metadata":{}},{"src":{"process":"core/Repeat_wuue3","port":"out"},"tgt":{"process":"getHeight","port":"element"},"metadata":{"route":0}},{"src":{"process":"getWidth","port":"out"},"tgt":{"process":"CreateCanvas","port":"width"},"metadata":{}},{"src":{"process":"getHeight","port":"out"},"tgt":{"process":"CreateCanvas","port":"height"},"metadata":{}},{"src":{"process":"DrawImage","port":"drawimage"},"tgt":{"process":"Draw","port":"commands"},"metadata":{}},{"src":{"process":"CreateCanvas","port":"canvas"},"tgt":{"process":"Draw","port":"canvas"},"metadata":{}},{"src":{"process":"core/Repeat_wuue3","port":"out"},"tgt":{"process":"DrawImage","port":"image"},"metadata":{"route":0}},{"data":"width","tgt":{"process":"getWidth","port":"attribute"}},{"data":"height","tgt":{"process":"getHeight","port":"attribute"}},{"data":{"x":0,"y":0},"tgt":{"process":"DrawImage","port":"destpoint"}},{"data":true,"tgt":{"process":"Draw","port":"drawevery"}}]}

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var clm, noflo, pModel;

noflo = __webpack_require__(0);

clm = __webpack_require__(117);

pModel = __webpack_require__(118);

exports.getComponent = function() {
  var c, ctx, raf, stopTracking, tracker;
  c = new noflo.Component;
  c.icon = 'meh-o';
  c.description = 'track features in face';
  tracker = null;
  raf = null;
  ctx = null;
  stopTracking = function() {
    if (tracker) {
      tracker.stop();
      tracker = null;
    }
    if (raf) {
      cancelAnimationFrame(raf);
      raf = null;
    }
    if (ctx) {
      ctx.deactivate();
      return ctx = null;
    }
  };
  c.tearDown = function(callback) {
    stopTracking();
    return callback();
  };
  c.inPorts.add('image', {
    datatype: 'object',
    description: 'img, video, or canvas element'
  });
  c.outPorts.add('points', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output, context) {
    var canvas, imageToTrack, trackFaceLoop;
    if (!input.hasData('image')) {
      return;
    }
    imageToTrack = input.getData('image');
    if (imageToTrack.tagName == null) {
      return output.done();
    }
    if (imageToTrack.tagName === 'IMG') {
      canvas = document.createElement('canvas');
      canvas.width = imageToTrack.width;
      canvas.height = imageToTrack.height;
      canvas.getContext('2d').drawImage(imageToTrack, 0, 0);
      imageToTrack = canvas;
    }
    if (!(imageToTrack.tagName === 'CANVAS' || imageToTrack.tagName === 'VIDEO')) {
      output.done(new Error('Image to track must be a canvas or video element'));
      return;
    }
    stopTracking();
    tracker = new clm.tracker();
    tracker.init(pModel);
    tracker.start(imageToTrack);
    ctx = context;
    trackFaceLoop = function() {
      var points;
      raf = requestAnimationFrame(trackFaceLoop);
      if (!tracker) {
        return;
      }
      points = tracker.getCurrentPosition();
      if (!points) {
        return;
      }
      points = points.map(function(point) {
        return {
          type: 'point',
          x: point[0],
          y: point[1]
        };
      });
      return output.send({
        points: points
      });
    };
    return raf = requestAnimationFrame(trackFaceLoop);
  });
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * clmtrackr library (https://www.github.com/auduno/clmtrackr/)
 *
 * Copyright (c) 2013, Audun Mathias Øygard
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


//requires: ccv.js, numeric.js

var clm = {
  tracker : function(params) {
    
    if (!params) params = {};
    if (params.constantVelocity === undefined) params.constantVelocity = true;
    if (params.searchWindow === undefined) params.searchWindow = 11;
    if (params.useWebGL === undefined) params.useWebGL = true;
    if (params.scoreThreshold === undefined) params.scoreThreshold = 0.5;
    if (params.stopOnConvergence === undefined) params.stopOnConvergence = false;
    if (params.weightPoints === undefined) params.weightPoints = undefined;
    if (params.sharpenResponse === undefined) params.sharpenResponse = false;
    
    var numPatches, patchSize, numParameters, patchType;
    var gaussianPD;
    var eigenVectors, eigenValues;
    var sketchCC, sketchW, sketchH, sketchCanvas;
    var candidate;
    var weights, model, biases;
    
    var sobelInit = false;
    var lbpInit = false;
    
    var currentParameters = [];
    var currentPositions = [];
    var previousParameters = [];
    var previousPositions = [];
    
    var patches = [];
    var responses = [];
    var meanShape = [];
    
    var responseMode = 'single';
    var responseList = ['raw'];
    var responseIndex = 0;
    
    /*
    It's possible to experiment with the sequence of variances used for the finding the maximum in the KDE.
    This sequence is pretty arbitrary, but was found to be okay using some manual testing.
    */
    var varianceSeq = [10,5,1];
    //var varianceSeq = [3,1.5,0.75];
    //var varianceSeq = [6,3,0.75];
    var PDMVariance = 0.7;
    
    var relaxation = 0.1;
    
    var first = true;
    
    var convergenceLimit = 0.01;
    
    var learningRate = [];
    var stepParameter = 1.25;
    var prevCostFunc = []
    
    var searchWindow;
    var modelWidth, modelHeight;
    var halfSearchWindow, vecProbs, responsePixels;
    
    if(typeof Float64Array !== 'undefined') {
      var updatePosition = new Float64Array(2);
      var vecpos = new Float64Array(2);
    } else {
      var updatePosition = new Array(2);
      var vecpos = new Array(2);
    }
    var pw, pl, pdataLength;
    
    var facecheck_count = 0;
    
    var webglFi, svmFi, mosseCalc;

    var scoringCanvas = document.createElement('canvas');
    //document.body.appendChild(scoringCanvas);
    var scoringContext = scoringCanvas.getContext('2d');
    var msxmin, msymin, msxmax, msymax;
    var msmodelwidth, msmodelheight;
    var scoringWeights, scoringBias;
    var scoringHistory = [];
    var meanscore = 0;

    var mossef_lefteye, mossef_righteye, mossef_nose;
    var right_eye_position = [0.0,0.0];
    var left_eye_position = [0.0,0.0];
    var nose_position = [0.0,0.0];
    var lep, rep, mep;
    var runnerTimeout, runnerElement, runnerBox;
    
    var pointWeights;

    var halfPI = Math.PI/2;
    
    /*
     *  load model data, initialize filters, etc.
     *
     *  @param  <Object>  pdm model object
     */
    this.init = function(pdmmodel) {
      
      model = pdmmodel;
      
      // load from model
      patchType = model.patchModel.patchType;
      numPatches = model.patchModel.numPatches;
      patchSize = model.patchModel.patchSize[0];
      if (patchType == "MOSSE") {
        searchWindow = patchSize;
      } else {
        searchWindow = params.searchWindow;
      }
      numParameters = model.shapeModel.numEvalues;
      modelWidth = model.patchModel.canvasSize[0];
      modelHeight = model.patchModel.canvasSize[1];
      
      // set up canvas to work on
      sketchCanvas = document.createElement('canvas');
      sketchCC = sketchCanvas.getContext('2d');

      sketchW = sketchCanvas.width = modelWidth + (searchWindow-1) + patchSize-1;
      sketchH = sketchCanvas.height = modelHeight + (searchWindow-1) + patchSize-1;
      
      if (model.hints && mosseFilter && left_eye_filter && right_eye_filter && nose_filter) {
        //var mossef_lefteye = new mosseFilter({drawResponse : document.getElementById('overlay2')});
        mossef_lefteye = new mosseFilter();
        mossef_lefteye.load(left_eye_filter);
        //var mossef_righteye = new mosseFilter({drawResponse : document.getElementById('overlay2')});
        mossef_righteye = new mosseFilter();
        mossef_righteye.load(right_eye_filter);
        //var mossef_nose = new mosseFilter({drawResponse : document.getElementById('overlay2')});
        mossef_nose = new mosseFilter();
        mossef_nose.load(nose_filter);
      } else {
        console.log("MOSSE filters not found, using rough approximation for initialization.");
      }

      // load eigenvectors
      eigenVectors = numeric.rep([numPatches*2,numParameters],0.0);
      for (var i = 0;i < numPatches*2;i++) {
        for (var j = 0;j < numParameters;j++) {
          eigenVectors[i][j] = model.shapeModel.eigenVectors[i][j];
        }
      }
      
      // load mean shape
      for (var i = 0; i < numPatches;i++) {
        meanShape[i] = [model.shapeModel.meanShape[i][0], model.shapeModel.meanShape[i][1]];
      }

      // get max and mins, width and height of meanshape
      msxmax = msymax = 0;
      msxmin = msymin = 1000000;
      for (var i = 0;i < numPatches;i++) {
        if (meanShape[i][0] < msxmin) msxmin = meanShape[i][0];
        if (meanShape[i][1] < msymin) msymin = meanShape[i][1];
        if (meanShape[i][0] > msxmax) msxmax = meanShape[i][0];
        if (meanShape[i][1] > msymax) msymax = meanShape[i][1];
      }
      msmodelwidth = msxmax-msxmin;
      msmodelheight = msymax-msymin;
      
      // get scoringweights if they exist
      if (model.scoring) {
        scoringWeights = new Float64Array(model.scoring.coef);
        scoringBias = model.scoring.bias;
        scoringCanvas.width = model.scoring.size[0];
        scoringCanvas.height = model.scoring.size[1];
      }
      
      // load eigenvalues
      eigenValues = model.shapeModel.eigenValues;
      
      weights = model.patchModel.weights;
      biases = model.patchModel.bias;
      
      // precalculate gaussianPriorDiagonal
      gaussianPD = numeric.rep([numParameters+4, numParameters+4],0);
      // set values and append manual inverse
      for (var i = 0;i < numParameters;i++) {
        if (model.shapeModel.nonRegularizedVectors.indexOf(i) >= 0) {
          gaussianPD[i+4][i+4] = 1/10000000;
        } else {
          gaussianPD[i+4][i+4] = 1/eigenValues[i];
        }
      }
      
      for (var i = 0;i < numParameters+4;i++) {
        currentParameters[i] = 0;
      }
      
      if (patchType == "SVM") {
        var webGLContext;
        var webGLTestCanvas = document.createElement('canvas');
        if (window.WebGLRenderingContext) {
          webGLContext = webGLTestCanvas.getContext('webgl') || webGLTestCanvas.getContext('experimental-webgl');
          if (!webGLContext || !webGLContext.getExtension('OES_texture_float')) {
            webGLContext = null;
          }
        } 
        
        if (webGLContext && params.useWebGL && (typeof(webglFilter) !== "undefined")) {
          webglFi = new webglFilter();
          try {
            webglFi.init(weights, biases, numPatches, searchWindow+patchSize-1, searchWindow+patchSize-1, patchSize, patchSize);
            if ('lbp' in weights) lbpInit = true;
            if ('sobel' in weights) sobelInit = true;
          } 
          catch(err) {
            alert("There was a problem setting up webGL programs, falling back to slightly slower javascript version. :(");
            webglFi = undefined;
            svmFi = new svmFilter();
            svmFi.init(weights['raw'], biases['raw'], numPatches, patchSize, searchWindow);
          }
        } else if (typeof(svmFilter) !== "undefined") {
          // use fft convolution if no webGL is available
          svmFi = new svmFilter();
          svmFi.init(weights['raw'], biases['raw'], numPatches, patchSize, searchWindow);
        } else {
          throw "Could not initiate filters, please make sure that svmfilter.js or svmfilter_conv_js.js is loaded."
        }
      } else if (patchType == "MOSSE") {
        mosseCalc = new mosseFilterResponses();
        mosseCalc.init(weights, numPatches, patchSize, patchSize);
      }
      
      if (patchType == "SVM") {
        pw = pl = patchSize+searchWindow-1;
      } else {
        pw = pl = searchWindow;
      }
      pdataLength = pw*pl;
      halfSearchWindow = (searchWindow-1)/2;
      responsePixels = searchWindow*searchWindow;
      if(typeof Float64Array !== 'undefined') {
        vecProbs = new Float64Array(responsePixels);
        for (var i = 0;i < numPatches;i++) {
          patches[i] = new Float64Array(pdataLength);
        }
      } else {
        vecProbs = new Array(responsePixels);
        for (var i = 0;i < numPatches;i++) {
          patches[i] = new Array(pdataLength);
        }
      }
      
      for (var i = 0;i < numPatches;i++) {
        learningRate[i] = 1.0;
        prevCostFunc[i] = 0.0;
      }

      if (params.weightPoints) {
        // weighting of points 
        pointWeights = [];
        for (var i = 0;i < numPatches;i++) {
          if (i in params.weightPoints) {
            pointWeights[(i*2)] = params.weightPoints[i];
            pointWeights[(i*2)+1] = params.weightPoints[i];
          } else {
            pointWeights[(i*2)] = 1;
            pointWeights[(i*2)+1] = 1;
          }
        }
        pointWeights = numeric.diag(pointWeights);
      }
    }
    
    /*
     *  starts the tracker to run on a regular interval
     */
    this.start = function(element, box) {
      // check if model is initalized, else return false
      if (typeof(model) === "undefined") {
        console.log("tracker needs to be initalized before starting to track.");
        return false;
      }
      //check if a runnerelement already exists, if not, use passed parameters
      if (typeof(runnerElement) === "undefined") {
        runnerElement = element;
        runnerBox = box;
      }
      // start named timeout function
      runnerTimeout = requestAnimFrame(runnerFunction);
    }

    /*
     *  stop the running tracker
     */
    this.stop = function() {
      // stop the running tracker if any exists
      cancelRequestAnimFrame(runnerTimeout);
    }

    /*
     *  element : canvas or video element
     *  TODO: should be able to take img element as well
     */
    this.track = function(element, box) {
      
      var scaling, translateX, translateY, rotation;
      var croppedPatches = [];
      var ptch, px, py;
            
      if (first) {
        // do viola-jones on canvas to get initial guess, if we don't have any points
        var gi = getInitialPosition(element, box);
        if (!gi) {
          // send an event on no face found
          var evt = document.createEvent("Event");
          evt.initEvent("clmtrackrNotFound", true, true);
          document.dispatchEvent(evt)
          
          return false;
        }
        scaling = gi[0];
        rotation = gi[1];
        translateX = gi[2];
        translateY = gi[3];
        
        first = false;
      } else {
        facecheck_count += 1;
        
        if (params.constantVelocity) {
          // calculate where to get patches via constant velocity prediction
          if (previousParameters.length >= 2) {
            for (var i = 0;i < currentParameters.length;i++) {
              currentParameters[i] = (relaxation)*previousParameters[1][i] + (1-relaxation)*((2*previousParameters[1][i]) - previousParameters[0][i]);
              //currentParameters[i] = (3*previousParameters[2][i]) - (3*previousParameters[1][i]) + previousParameters[0][i];
            }
          }
        }
        
        // change translation, rotation and scale parameters
        rotation = halfPI - Math.atan((currentParameters[0]+1)/currentParameters[1]);
        if (rotation > halfPI) {
          rotation -= Math.PI;
        }
        scaling = currentParameters[1] / Math.sin(rotation);
        translateX = currentParameters[2];
        translateY = currentParameters[3];
      }
      
      // copy canvas to a new dirty canvas
      sketchCC.save();
      
      // clear canvas
      sketchCC.clearRect(0, 0, sketchW, sketchH);
      
      sketchCC.scale(1/scaling, 1/scaling);
      sketchCC.rotate(-rotation);
      sketchCC.translate(-translateX, -translateY);
      
      sketchCC.drawImage(element, 0, 0, element.width, element.height);
      
      sketchCC.restore();
      //  get cropped images around new points based on model parameters (not scaled and translated)
      var patchPositions = calculatePositions(currentParameters, false);
      
      // check whether tracking is ok
      if (scoringWeights && (facecheck_count % 10 == 0)) {
        if (!checkTracking()) {
          // reset all parameters
          first = true;
          scoringHistory = [];
          for (var i = 0;i < currentParameters.length;i++) {
            currentParameters[i] = 0;
            previousParameters = [];
          }
          
          // send event to signal that tracking was lost
          var evt = document.createEvent("Event");
          evt.initEvent("clmtrackrLost", true, true);
          document.dispatchEvent(evt)
          
          return false;
        }
      }


      var pdata, pmatrix, grayscaleColor;
      for (var i = 0; i < numPatches; i++) {
        px = patchPositions[i][0]-(pw/2);
        py = patchPositions[i][1]-(pl/2);
        ptch = sketchCC.getImageData(Math.round(px), Math.round(py), pw, pl);
        pdata = ptch.data;
        
        // convert to grayscale
        pmatrix = patches[i];
        for (var j = 0;j < pdataLength;j++) {
          grayscaleColor = pdata[j*4]*0.3 + pdata[(j*4)+1]*0.59 + pdata[(j*4)+2]*0.11;
          pmatrix[j] = grayscaleColor;
        }
      }
      
      /*print weights*/
      /*sketchCC.clearRect(0, 0, sketchW, sketchH);
      var nuWeights;
      for (var i = 0;i < numPatches;i++) {
        nuWeights = weights[i].map(function(x) {return x*2000+127;});
        drawData(sketchCC, nuWeights, patchSize, patchSize, false, patchPositions[i][0]-(patchSize/2), patchPositions[i][1]-(patchSize/2));
      }*/
      
      // print patches
      /*sketchCC.clearRect(0, 0, sketchW, sketchH);
      for (var i = 0;i < numPatches;i++) {
        if ([27,32,44,50].indexOf(i) > -1) {
          drawData(sketchCC, patches[i], pw, pl, false, patchPositions[i][0]-(pw/2), patchPositions[i][1]-(pl/2));
        }
      }*/
      if (patchType == "SVM") {
        if (typeof(webglFi) !== "undefined") {
          responses = getWebGLResponses(patches);
        } else if (typeof(svmFi) !== "undefined"){
          responses = svmFi.getResponses(patches);
        } else {
          throw "SVM-filters do not seem to be initiated properly."
        }
      } else if (patchType == "MOSSE") {
        responses = mosseCalc.getResponses(patches);
      }

      // option to increase sharpness of responses
      if (params.sharpenResponse) {
        for (var i = 0;i < numPatches;i++) {
          for (var j = 0;j < responses[i].length;j++) {
            responses[i][j] = Math.pow(responses[i][j], params.sharpenResponse);
          }
        }
      }

      // print responses
      /*sketchCC.clearRect(0, 0, sketchW, sketchH);
      var nuWeights;
      for (var i = 0;i < numPatches;i++) {
    
        nuWeights = [];
        for (var j = 0;j < responses[i].length;j++) {
          nuWeights.push(responses[i][j]*255);
        }
        
        //if ([27,32,44,50].indexOf(i) > -1) {
        //  drawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[i][0]-((searchWindow-1)/2), patchPositions[i][1]-((searchWindow-1)/2));
        //}
        drawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[i][0]-((searchWindow-1)/2), patchPositions[i][1]-((searchWindow-1)/2));
      }*/
      
      // iterate until convergence or max 10, 20 iterations?:
      var originalPositions = currentPositions;
      var jac;
      var meanshiftVectors = [];
      
      for (var i = 0; i < varianceSeq.length; i++) {
        
        // calculate jacobian
        jac = createJacobian(currentParameters, eigenVectors);

        // for debugging
        //var debugMVs = [];
        //
        
        var opj0, opj1;
        
        for (var j = 0;j < numPatches;j++) {
          opj0 = originalPositions[j][0]-((searchWindow-1)*scaling/2);
          opj1 = originalPositions[j][1]-((searchWindow-1)*scaling/2);
          
          // calculate PI x gaussians
          var vpsum = gpopt(searchWindow, currentPositions[j], updatePosition, vecProbs, responses, opj0, opj1, j, varianceSeq[i], scaling);
          
          // calculate meanshift-vector
          gpopt2(searchWindow, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1, scaling);
          
          // for debugging
          //var debugMatrixMV = gpopt2(searchWindow, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1);
          
          // evaluate here whether to increase/decrease stepSize
          /*if (vpsum >= prevCostFunc[j]) {
            learningRate[j] *= stepParameter;
          } else {
            learningRate[j] = 1.0;
          }
          prevCostFunc[j] = vpsum;*/
          
          // compute mean shift vectors
          // extrapolate meanshiftvectors
          /*var msv = [];
          msv[0] = learningRate[j]*(vecpos[0] - currentPositions[j][0]);
          msv[1] = learningRate[j]*(vecpos[1] - currentPositions[j][1]);
          meanshiftVectors[j] = msv;*/
          meanshiftVectors[j] = [vecpos[0] - currentPositions[j][0], vecpos[1] - currentPositions[j][1]];
          
          //if (isNaN(msv[0]) || isNaN(msv[1])) debugger;
          
          //for debugging
          //debugMVs[j] = debugMatrixMV;
          //
        }
        
        // draw meanshiftVector
        /*sketchCC.clearRect(0, 0, sketchW, sketchH);
        var nuWeights;
        for (var npidx = 0;npidx < numPatches;npidx++) {
          nuWeights = debugMVs[npidx].map(function(x) {return x*255*500;});
          drawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[npidx][0]-((searchWindow-1)/2), patchPositions[npidx][1]-((searchWindow-1)/2));
        }*/
        
        var meanShiftVector = numeric.rep([numPatches*2, 1],0.0);
        for (var k = 0;k < numPatches;k++) {
          meanShiftVector[k*2][0] = meanshiftVectors[k][0];
          meanShiftVector[(k*2)+1][0] = meanshiftVectors[k][1];
        }
        
        // compute pdm parameter update
        //var prior = numeric.mul(gaussianPD, PDMVariance);
        var prior = numeric.mul(gaussianPD, varianceSeq[i]);
        if (params.weightPoints) {
          var jtj = numeric.dot(numeric.transpose(jac), numeric.dot(pointWeights, jac));
        } else {
          var jtj = numeric.dot(numeric.transpose(jac), jac);
        }
        var cpMatrix = numeric.rep([numParameters+4, 1],0.0);
        for (var l = 0;l < (numParameters+4);l++) {
          cpMatrix[l][0] = currentParameters[l];
        }
        var priorP = numeric.dot(prior, cpMatrix);
        if (params.weightPoints) {
          var jtv = numeric.dot(numeric.transpose(jac), numeric.dot(pointWeights, meanShiftVector));
        } else {
          var jtv = numeric.dot(numeric.transpose(jac), meanShiftVector);
        }
        var paramUpdateLeft = numeric.add(prior, jtj);
        var paramUpdateRight = numeric.sub(priorP, jtv);
        var paramUpdate = numeric.dot(numeric.inv(paramUpdateLeft), paramUpdateRight);
        //var paramUpdate = numeric.solve(paramUpdateLeft, paramUpdateRight, true);
        
        var oldPositions = currentPositions;
        
        // update estimated parameters
        for (var k = 0;k < numParameters+4;k++) {
          currentParameters[k] -= paramUpdate[k];
        }
        
        // clipping of parameters if they're too high
        var clip;
        for (var k = 0;k < numParameters;k++) {
          clip = Math.abs(3*Math.sqrt(eigenValues[k]));
          if (Math.abs(currentParameters[k+4]) > clip) {
            if (currentParameters[k+4] > 0) {
              currentParameters[k+4] = clip;
            } else {
              currentParameters[k+4] = -clip;
            }
          }
          
        }
        
        // update current coordinates
        currentPositions = calculatePositions(currentParameters, true);
        
        // check if converged
        // calculate norm of parameterdifference
        var positionNorm = 0;
        var pnsq_x, pnsq_y;
        for (var k = 0;k < currentPositions.length;k++) {
          pnsq_x = (currentPositions[k][0]-oldPositions[k][0]);
          pnsq_y = (currentPositions[k][1]-oldPositions[k][1]);
          positionNorm += ((pnsq_x*pnsq_x) + (pnsq_y*pnsq_y));
        }
        //console.log("positionnorm:"+positionNorm);
        
        // if norm < limit, then break
        if (positionNorm < convergenceLimit) {
          break;
        }
      
      }
      
      if (params.constantVelocity) {
        // add current parameter to array of previous parameters
        previousParameters.push(currentParameters.slice());
        previousParameters.splice(0, previousParameters.length == 3 ? 1 : 0);
      }
      
      // store positions, for checking convergence
      previousPositions.splice(0, previousPositions.length == 10 ? 1 : 0);
      previousPositions.push(currentPositions.slice(0));
      
      // send an event on each iteration
      var evt = document.createEvent("Event");
      evt.initEvent("clmtrackrIteration", true, true);
      document.dispatchEvent(evt)
      
      if (this.getConvergence() < 0.5) {
        // we must get a score before we can say we've converged
        if (scoringHistory.length >= 5) {
          if (params.stopOnConvergence) {
            this.stop();
          }

          var evt = document.createEvent("Event");
          evt.initEvent("clmtrackrConverged", true, true);
          document.dispatchEvent(evt)
        }
      }
      
      // return new points
      return currentPositions;
    }

    /*
     *  reset tracking, so that track() will start a new detection
     */
    this.reset = function() {
      first = true;
      scoringHistory = [];
      for (var i = 0;i < currentParameters.length;i++) {
        currentParameters[i] = 0;
        previousParameters = [];
      }
      runnerElement = undefined;
      runnerBox = undefined;
    }

    /*
     *  draw model on given canvas
     */
    this.draw = function(canvas, pv, path) {
      // if no previous points, just draw in the middle of canvas
      
      var params;
      if (pv === undefined) {
        params = currentParameters.slice(0);
      } else {
        params = pv.slice(0);
      }
      
      var cc = canvas.getContext('2d');
      cc.fillStyle = "rgb(200,200,200)";
      cc.strokeStyle = "rgb(130,255,50)";
      //cc.lineWidth = 1;
      
      var paths;
      if (path === undefined) {
        paths = model.path.normal;
      } else {
        paths = model.path[path];
      }

      for (var i = 0;i < paths.length;i++) {
        if (typeof(paths[i]) == 'number') {
          drawPoint(cc, paths[i], params);
        } else {
          drawPath(cc, paths[i], params);
        }
      }
    }

    /*
     *  get the score of the current model fit
     *  (based on svm of face according to current model)
     */
    this.getScore = function() {
      return meanscore;
    }

    /*
     *  calculate positions based on parameters
     */
    this.calculatePositions = function(parameters) {
      return calculatePositions(parameters, true);
    }
    
    /*
     *  get coordinates of current model fit
     */
    this.getCurrentPosition = function() {
      if (first) {
        return false;
      } else {
        return currentPositions;
      }
    }
    
    /*
     *  get parameters of current model fit
     */
    this.getCurrentParameters = function() {
      return currentParameters;
    }

    /*
     *  Get the average of recent model movements
     *  Used for checking whether model fit has converged
     */
    this.getConvergence = function() {
      if (previousPositions.length < 10) return 999999;
      
      var prevX = 0.0;
      var prevY = 0.0;
      var currX = 0.0;
      var currY = 0.0;
      
      // average 5 previous positions 
      for (var i = 0;i < 5;i++) {
        for (var j = 0;j < numPatches;j++) {
          prevX += previousPositions[i][j][0];
          prevY += previousPositions[i][j][1];
        }
      }
      prevX /= 5;
      prevY /= 5;
      
      // average 5 positions before that
      for (var i = 5;i < 10;i++) {
        for (var j = 0;j < numPatches;j++) {
          currX += previousPositions[i][j][0];
          currY += previousPositions[i][j][1];
        }
      }
      currX /= 5;
      currY /= 5;

      // calculate difference
      var diffX = currX-prevX;
      var diffY = currY-prevY;
      var msavg = ((diffX*diffX) + (diffY*diffY));
      msavg /= previousPositions.length
      return msavg;
    }
    
    /*
     * Set response mode (only useful if webGL is available)
     * mode : either "single", "blend" or "cycle"
     * list : array of values "raw", "sobel", "lbp"
     */
    this.setResponseMode = function(mode, list) {
      // clmtrackr must be initialized with model first
      if (typeof(model) === "undefined") {
        console.log("Clmtrackr has not been initialized with a model yet. No changes made.");
        return;
      }
      // must check whether webGL or not
      if (typeof(webglFi) === "undefined") {
        console.log("Responsemodes are only allowed when using webGL. In pure JS, only 'raw' mode is available.");
        return;
      }
      if (['single', 'blend', 'cycle'].indexOf(mode) < 0) {
        console.log("Tried to set an unknown responsemode : '"+mode+"'. No changes made.");
        return;
      }
      if (!(list instanceof Array)) {
        console.log("List in setResponseMode must be an array of strings! No changes made.");
        return;
      } else {
        for (var i = 0;i < list.length;i++) {
          if (['raw', 'sobel', 'lbp'].indexOf(list[i]) < 0) {
            console.log("Unknown element in responsemode list : '"+list[i]+"'. No changes made.");
          }
          // check whether filters are initialized 
          if (list[i] == 'sobel' && sobelInit == false) {
            console.log("The sobel filters have not been initialized! No changes made.");
          }
          if (list[i] == 'lbp' && lbpInit == false) {
            console.log("The LBP filters have not been initialized! No changes made.");
          }
        }
      }
      // reset index
      responseIndex = 0;
      responseMode = mode;
      responseList = list;
    }

    var runnerFunction = function() {
      runnerTimeout = requestAnimFrame(runnerFunction);
      // schedule as many iterations as we can during each request
      var startTime = (new Date()).getTime();
      while (((new Date()).getTime() - startTime) < 16) {
        var tracking = this.track(runnerElement, runnerBox);
        if (!tracking) continue;
      }
    }.bind(this);
    
    var getWebGLResponsesType = function(type, patches) {
      if (type == 'lbp') {
        return webglFi.getLBPResponses(patches);
      } else if (type == 'raw') {
        return webglFi.getRawResponses(patches);
      } else if (type == 'sobel') {
        return webglFi.getSobelResponses(patches);
      }
    }
    
    var getWebGLResponses = function(patches) {
      if (responseMode == 'single') {
        return getWebGLResponsesType(responseList[0], patches);
      } else if (responseMode == 'cycle') {
        var response = getWebGLResponsesType(responseList[responseIndex], patches);
        responseIndex++;
        if (responseIndex >= responseList.length) responseIndex = 0;
        return response;
      } else {
        // blend
        var responses = [];
        for (var i = 0;i < responseList.length;i++) {
          responses[i] = getWebGLResponsesType(responseList[i], patches);
        }
        var blendedResponses = [];
        for (var i = 0;i < numPatches;i++) {
          var response = Array(searchWindow*searchWindow);
          for (var k = 0;k < searchWindow*searchWindow;k++) response[k] = 0;
          for (var j = 0;j < responseList.length;j++) {
            for (var k = 0;k < searchWindow*searchWindow;k++) {
              response[k] += (responses[j][i][k]/responseList.length);
            }
          }
          blendedResponses[i] = response;
        }
        return blendedResponses;
      }
    }

    // generates the jacobian matrix used for optimization calculations
    var createJacobian = function(parameters, eigenVectors) {
      
      var jacobian = numeric.rep([2*numPatches, numParameters+4],0.0);
      var j0,j1;
      for (var i = 0;i < numPatches;i ++) {
        // 1
        j0 = meanShape[i][0];
        j1 = meanShape[i][1];
        for (var p = 0;p < numParameters;p++) {
          j0 += parameters[p+4]*eigenVectors[i*2][p];
          j1 += parameters[p+4]*eigenVectors[(i*2)+1][p];
        }
        jacobian[i*2][0] = j0;
        jacobian[(i*2)+1][0] = j1;
        // 2
        j0 = meanShape[i][1];
        j1 = meanShape[i][0];
        for (var p = 0;p < numParameters;p++) {
          j0 += parameters[p+4]*eigenVectors[(i*2)+1][p];
          j1 += parameters[p+4]*eigenVectors[i*2][p];
        }
        jacobian[i*2][1] = -j0;
        jacobian[(i*2)+1][1] = j1;
        // 3
        jacobian[i*2][2] = 1;
        jacobian[(i*2)+1][2] = 0;
        // 4
        jacobian[i*2][3] = 0;
        jacobian[(i*2)+1][3] = 1;
        // the rest
        for (var j = 0;j < numParameters;j++) {
          j0 = parameters[0]*eigenVectors[i*2][j] - parameters[1]*eigenVectors[(i*2)+1][j] + eigenVectors[i*2][j];
          j1 = parameters[0]*eigenVectors[(i*2)+1][j] + parameters[1]*eigenVectors[i*2][j] + eigenVectors[(i*2)+1][j];
          jacobian[i*2][j+4] = j0;
          jacobian[(i*2)+1][j+4] = j1;
        }
      }
      
      return jacobian;
    }
    
    // calculate positions from parameters
    var calculatePositions = function(parameters, useTransforms) {
      var x, y, a, b;
      var numParameters = parameters.length;
      var positions = [];
      for (var i = 0;i < numPatches;i++) {
        x = meanShape[i][0];
        y = meanShape[i][1];
        for (var j = 0;j < numParameters-4;j++) {
          x += model.shapeModel.eigenVectors[(i*2)][j]*parameters[j+4];
          y += model.shapeModel.eigenVectors[(i*2)+1][j]*parameters[j+4];
        }
        if (useTransforms) {
          a = parameters[0]*x - parameters[1]*y + parameters[2];
          b = parameters[0]*y + parameters[1]*x + parameters[3];
          x += a;
          y += b;
        }
        positions[i] = [x,y];
      }
      
      return positions;
    }
    
    // detect position of face on canvas/video element
    var detectPosition = function(el) {
      var canvas = document.createElement('canvas');
      canvas.width = el.width;
      canvas.height = el.height;
      var cc = canvas.getContext('2d');
      cc.drawImage(el, 0, 0, el.width, el.height);
      
      // do viola-jones on canvas to get initial guess, if we don't have any points
      /*var comp = ccv.detect_objects(
        ccv.grayscale(canvas), ccv.cascade, 5, 1
      );*/
      
      var jf = new jsfeat_face(canvas);
      var comp = jf.findFace();
      
      if (comp.length > 0) {
        candidate = comp[0];
      } else {
        return false;
      }
      
      for (var i = 1; i < comp.length; i++) {
        if (comp[i].confidence > candidate.confidence) {
          candidate = comp[i];
        }
      }
      
      return candidate;
    }
    
    // part one of meanshift calculation
    var gpopt = function(responseWidth, currentPositionsj, updatePosition, vecProbs, responses, opj0, opj1, j, variance, scaling) {
      var pos_idx = 0;
      var vpsum = 0;
      var dx, dy;
      for (var k = 0;k < responseWidth;k++) {
        updatePosition[1] = opj1+(k*scaling);
        for (var l = 0;l < responseWidth;l++) {
          updatePosition[0] = opj0+(l*scaling);

          dx = currentPositionsj[0] - updatePosition[0];
          dy = currentPositionsj[1] - updatePosition[1];
          vecProbs[pos_idx] = responses[j][pos_idx] * Math.exp(-0.5*((dx*dx)+(dy*dy))/(variance*scaling));
          
          vpsum += vecProbs[pos_idx];
          pos_idx++;
        }
      }
      
      return vpsum;
    }
    
    // part two of meanshift calculation
    var gpopt2 = function(responseWidth, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1, scaling) {
      //for debugging
      //var vecmatrix = [];
      
      var pos_idx = 0;
      var vecsum = 0;
      vecpos[0] = 0;
      vecpos[1] = 0;
      for (var k = 0;k < responseWidth;k++) {
        updatePosition[1] = opj1+(k*scaling);
        for (var l = 0;l < responseWidth;l++) {
          updatePosition[0] = opj0+(l*scaling);
          vecsum = vecProbs[pos_idx]/vpsum;
          
          //for debugging
          //vecmatrix[k*responseWidth + l] = vecsum;
          
          vecpos[0] += vecsum*updatePosition[0];
          vecpos[1] += vecsum*updatePosition[1];
          pos_idx++;
        }
      }
      // for debugging
      //return vecmatrix;
    }
    
    // calculate score of current fit
    var checkTracking = function() {      
      scoringContext.drawImage(sketchCanvas, Math.round(msxmin+(msmodelwidth/4.5)), Math.round(msymin-(msmodelheight/12)), Math.round(msmodelwidth-(msmodelwidth*2/4.5)), Math.round(msmodelheight-(msmodelheight/12)), 0, 0, 20, 22);
      // getImageData of canvas
      var imgData = scoringContext.getImageData(0,0,20,22);
      // convert data to grayscale
      var scoringData = new Array(20*22);
      var scdata = imgData.data;
      var scmax = 0;
      for (var i = 0;i < 20*22;i++) {
        scoringData[i] = scdata[i*4]*0.3 + scdata[(i*4)+1]*0.59 + scdata[(i*4)+2]*0.11;
        scoringData[i] = Math.log(scoringData[i]+1);
        if (scoringData[i] > scmax) scmax = scoringData[i];
      }

      if (scmax > 0) {
        // normalize & multiply by svmFilter
        var mean = 0;
        for (var i = 0;i < 20*22;i++) {
          mean += scoringData[i];
        }
        mean /= (20*22);
        var sd = 0;
        for (var i = 0;i < 20*22;i++) {
          sd += (scoringData[i]-mean)*(scoringData[i]-mean);
        }
        sd /= (20*22 - 1)
        sd = Math.sqrt(sd);
        
        var score = 0;
        for (var i = 0;i < 20*22;i++) {
          scoringData[i] = (scoringData[i]-mean)/sd;
          score += (scoringData[i])*scoringWeights[i];
        }
        score += scoringBias;
        score = 1/(1+Math.exp(-score));

        scoringHistory.splice(0, scoringHistory.length == 5 ? 1 : 0);
        scoringHistory.push(score);

        if (scoringHistory.length > 4) {
          // get average
          meanscore = 0;
          for (var i = 0;i < 5;i++) {
            meanscore += scoringHistory[i];
          }
          meanscore /= 5;
          // if below threshold, then reset (return false)
          if (meanscore < params.scoreThreshold) return false;
        }
      }
      return true;
    }
    
    // get initial starting point for model
    var getInitialPosition = function(element, box) {
      var translateX, translateY, scaling, rotation;
      if (box) {
        candidate = {x : box[0], y : box[1], width : box[2], height : box[3]};
      } else {
        var det = detectPosition(element);
        if (!det) {
          // if no face found, stop.
          return false;
        }
      }
      
      if (model.hints && mosseFilter && left_eye_filter && right_eye_filter && nose_filter) {
        var noseFilterWidth = candidate.width * 4.5/10;
        var eyeFilterWidth = candidate.width * 6/10;
        
        // detect position of eyes and nose via mosse filter
        //
        /*element.pause();
        
        var canvasContext = document.getElementById('overlay2').getContext('2d')
        canvasContext.clearRect(0,0,500,375);
        canvasContext.strokeRect(candidate.x, candidate.y, candidate.width, candidate.height);*/
        //

        var nose_result = mossef_nose.track(element, Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth, false);
        var right_result = mossef_righteye.track(element, Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth, false);
        var left_result = mossef_lefteye.track(element, Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth, false);
        right_eye_position[0] = Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2))+right_result[0];
        right_eye_position[1] = Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2))+right_result[1];
        left_eye_position[0] = Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2))+left_result[0];
        left_eye_position[1] = Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2))+left_result[1];
        nose_position[0] = Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2))+nose_result[0];
        nose_position[1] = Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2))+nose_result[1];
        
        //
        /*canvasContext.strokeRect(Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth);
        canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth);
        //canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(3/4)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth);
        canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth);
        
        canvasContext.fillStyle = "rgb(0,0,250)";
        canvasContext.beginPath();
        canvasContext.arc(left_eye_position[0], left_eye_position[1], 3, 0, Math.PI*2, true);
        canvasContext.closePath();
        canvasContext.fill();
        
        canvasContext.beginPath();
        canvasContext.arc(right_eye_position[0], right_eye_position[1], 3, 0, Math.PI*2, true);
        canvasContext.closePath();
        canvasContext.fill();
        
        canvasContext.beginPath();
        canvasContext.arc(nose_position[0], nose_position[1], 3, 0, Math.PI*2, true);
        canvasContext.closePath();
        canvasContext.fill();
        
        debugger;
        element.play()
        canvasContext.clearRect(0,0,element.width,element.height);*/
        //
        
        // get eye and nose positions of model
        var lep = model.hints.leftEye;
        var rep = model.hints.rightEye;
        var mep = model.hints.nose;
        
        // get scaling, rotation, etc. via procrustes analysis
        var procrustes_params = procrustes([left_eye_position, right_eye_position, nose_position], [lep, rep, mep]);
        translateX = procrustes_params[0];
        translateY = procrustes_params[1];
        scaling = procrustes_params[2];
        rotation = procrustes_params[3];
        
        //element.play();
        
        //var maxscale = 1.10;
        //if ((scaling*modelHeight)/candidate.height < maxscale*0.7) scaling = (maxscale*0.7*candidate.height)/modelHeight;
        //if ((scaling*modelHeight)/candidate.height > maxscale*1.2) scaling = (maxscale*1.2*candidate.height)/modelHeight;
        
        /*var smean = [0,0];
        smean[0] += lep[0];
        smean[1] += lep[1];
        smean[0] += rep[0];
        smean[1] += rep[1];
        smean[0] += mep[0];
        smean[1] += mep[1];
        smean[0] /= 3;
        smean[1] /= 3;
        
        var nulep = [(lep[0]*scaling*Math.cos(-rotation)+lep[1]*scaling*Math.sin(-rotation))+translateX, (lep[0]*scaling*(-Math.sin(-rotation)) + lep[1]*scaling*Math.cos(-rotation))+translateY];
        var nurep = [(rep[0]*scaling*Math.cos(-rotation)+rep[1]*scaling*Math.sin(-rotation))+translateX, (rep[0]*scaling*(-Math.sin(-rotation)) + rep[1]*scaling*Math.cos(-rotation))+translateY];
        var numep = [(mep[0]*scaling*Math.cos(-rotation)+mep[1]*scaling*Math.sin(-rotation))+translateX, (mep[0]*scaling*(-Math.sin(-rotation)) + mep[1]*scaling*Math.cos(-rotation))+translateY];
        
        canvasContext.fillStyle = "rgb(200,10,100)";
        canvasContext.beginPath();
        canvasContext.arc(nulep[0], nulep[1], 3, 0, Math.PI*2, true);
        canvasContext.closePath();
        canvasContext.fill();
        
        canvasContext.beginPath();
        canvasContext.arc(nurep[0], nurep[1], 3, 0, Math.PI*2, true);
        canvasContext.closePath();
        canvasContext.fill();
        
        canvasContext.beginPath();
        canvasContext.arc(numep[0], numep[1], 3, 0, Math.PI*2, true);
        canvasContext.closePath();
        canvasContext.fill();*/
        
        currentParameters[0] = (scaling*Math.cos(rotation))-1;
        currentParameters[1] = (scaling*Math.sin(rotation));
        currentParameters[2] = translateX;
        currentParameters[3] = translateY;
        
        //this.draw(document.getElementById('overlay'), currentParameters);
        
      } else {
        scaling = candidate.width/modelheight;
        //var ccc = document.getElementById('overlay').getContext('2d');
        //ccc.strokeRect(candidate.x,candidate.y,candidate.width,candidate.height);
        translateX = candidate.x-(xmin*scaling)+0.1*candidate.width;
        translateY = candidate.y-(ymin*scaling)+0.25*candidate.height;
        currentParameters[0] = scaling-1;
        currentParameters[2] = translateX;
        currentParameters[3] = translateY;
      }
    
      currentPositions = calculatePositions(currentParameters, true);
      
      return [scaling, rotation, translateX, translateY];
    }
    
    // draw a parametrized line on a canvas
    var drawPath = function(canvasContext, path, dp) {
      canvasContext.beginPath();
      var i, x, y, a, b;
      for (var p = 0;p < path.length;p++) {
        i = path[p]*2;
        x = meanShape[i/2][0];
        y = meanShape[i/2][1];
        for (var j = 0;j < numParameters;j++) {
          x += model.shapeModel.eigenVectors[i][j]*dp[j+4];
          y += model.shapeModel.eigenVectors[i+1][j]*dp[j+4];
        }
        a = dp[0]*x - dp[1]*y + dp[2];
        b = dp[0]*y + dp[1]*x + dp[3];
        x += a;
        y += b;
        
        if (i == 0) {
          canvasContext.moveTo(x,y);
        } else {
          canvasContext.lineTo(x,y);
        }
      }
      canvasContext.moveTo(0,0);
      canvasContext.closePath();
      canvasContext.stroke();
    }
    
    // draw a point on a canvas
    function drawPoint(canvasContext, point, dp) {
      var i, x, y, a, b;
      i = point*2;
      x = meanShape[i/2][0];
      y = meanShape[i/2][1];
      for (var j = 0;j < numParameters;j++) {
        x += model.shapeModel.eigenVectors[i][j]*dp[j+4];
        y += model.shapeModel.eigenVectors[i+1][j]*dp[j+4];
      }
      a = dp[0]*x - dp[1]*y + dp[2];
      b = dp[0]*y + dp[1]*x + dp[3];
      x += a;
      y += b;
      canvasContext.beginPath();
      canvasContext.arc(x, y, 1, 0, Math.PI*2, true);
      canvasContext.closePath();
      canvasContext.fill();
    }
    
    // procrustes analysis
    function procrustes(template, shape) {
      // assume template and shape is a vector of x,y-coordinates
      //i.e. template = [[x1,y1], [x2,y2], [x3,y3]];
      var templateClone = [];
      var shapeClone = [];
      for (var i = 0;i < template.length;i++) {
        templateClone[i] = [template[i][0], template[i][1]];
      }
      for (var i = 0;i < shape.length;i++) {
        shapeClone[i] = [shape[i][0], shape[i][1]];
      }
      shape = shapeClone;
      template = templateClone;
      
      // calculate translation
      var templateMean = [0.0, 0.0];
      for (var i = 0;i < template.length;i++) {
        templateMean[0] += template[i][0];
        templateMean[1] += template[i][1];
      }
      templateMean[0] /= template.length;
      templateMean[1] /= template.length;
      
      var shapeMean = [0.0, 0.0];
      for (var i = 0;i < shape.length;i++) {
        shapeMean[0] += shape[i][0];
        shapeMean[1] += shape[i][1];
      }
      shapeMean[0] /= shape.length;
      shapeMean[1] /= shape.length;
      
      var translationX = templateMean[0] - shapeMean[0];
      var translationY = templateMean[1] - shapeMean[1];
      
      // centralize
      for (var i = 0;i < shape.length;i++) {
        shape[i][0] -= shapeMean[0];
        shape[i][1] -= shapeMean[1];
      }
      for (var i = 0;i < template.length;i++) {
        template[i][0] -= templateMean[0];
        template[i][1] -= templateMean[1];
      }
      
      // scaling
      
      var scaleS = 0.0;
      for (var i = 0;i < shape.length;i++) {
        scaleS += ((shape[i][0])*(shape[i][0]));
        scaleS += ((shape[i][1])*(shape[i][1]));
      }
      scaleS = Math.sqrt(scaleS/shape.length);
      
      var scaleT = 0.0;
      for (var i = 0;i < template.length;i++) {
        scaleT += ((template[i][0])*(template[i][0]));
        scaleT += ((template[i][1])*(template[i][1]));
      }
      scaleT = Math.sqrt(scaleT/template.length);
      
      var scaling = scaleT/scaleS;
      
      for (var i = 0;i < shape.length;i++) {
        shape[i][0] *= scaling;
        shape[i][1] *= scaling;
      }
        
      // rotation
      
      var top = 0.0;
      var bottom = 0.0;
      for (var i = 0;i < shape.length;i++) {
        top += (shape[i][0]*template[i][1] - shape[i][1]*template[i][0]);
        bottom += (shape[i][0]*template[i][0] + shape[i][1]*template[i][1]);
      }
      var rotation = Math.atan(top/bottom);
      
      translationX += (shapeMean[0]-(scaling*Math.cos(-rotation)*shapeMean[0])-(scaling*shapeMean[1]*Math.sin(-rotation)));
      translationY += (shapeMean[1]+(scaling*Math.sin(-rotation)*shapeMean[0])-(scaling*shapeMean[1]*Math.cos(-rotation)));
      
      //returns rotation, scaling, transformx and transformx
      return [translationX, translationY, scaling, rotation];
    }
    
    // function to draw pixeldata on some canvas, only used for debugging
    var drawData = function(canvasContext, data, width, height, transposed, drawX, drawY) {
      var psci = canvasContext.createImageData(width, height);
      var pscidata = psci.data;
      for (var j = 0;j < width*height;j++) {
        if (!transposed) {
          var val = data[(j%width)+((j/width) >> 0)*width];
        } else {
          var val = data[(j%height)*height+((j/height) >> 0)];
        }
        val = val > 255 ? 255 : val;
        val = val < 0 ? 0 : val;
        pscidata[j*4] = val;
        pscidata[(j*4)+1] = val;
        pscidata[(j*4)+2] = val;
        pscidata[(j*4)+3] = 255;
      }
      canvasContext.putImageData(psci, drawX, drawY);
    }
    
    var requestAnimFrame = (function() {
      return window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.oRequestAnimationFrame ||
      window.msRequestAnimationFrame ||
      function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
        return window.setTimeout(callback, 1000/60);
      };
    })();
    
    var cancelRequestAnimFrame = (function() {
      return window.cancelAnimationFrame ||
        window.webkitCancelRequestAnimationFrame ||
        window.mozCancelRequestAnimationFrame ||
        window.oCancelRequestAnimationFrame ||
        window.msCancelRequestAnimationFrame ||
        window.clearTimeout;
    })();
    
    return true;
  }
}
"use strict";

var webglFilter = function() {

  /*
   * Textures:
   * 0 : raw filter
   * 1 : patches
   * 2 : finished response
   * 3 : grad/lbp treated patches 
   * 4 : sobel filter
   * 5 : lbp filter
   * 
   * Routing:
   *         (              )  0/4/5 --\
   *         (              )          _\|
   * 1 ----> ( ---------->3 ) ----------> 2
   *         lbpResponse/      patchResponse
   *         gradientResponse  
   */

  var gl, canvas;
  var filterWidth, filterHeight, patchWidth, patchHeight, numPatches, canvasWidth, canvasHeight;
  var patchResponseProgram, patchDrawProgram;
  var fbo, numBlocks, patchTex;
  var drawRectBuffer, drawLayerBuffer, drawImageBuffer, rttTexture;
  var texCoordBuffer, texCoordLocation, apositionBuffer;
  var newCanvasWidth, newCanvasBlockHeight, newCanvasHeight;
  var drawOutRectangles, drawOutImages, drawOutLayer;
  var patchCells, textureWidth, textureHeight, patchSize, patchArray;
  var biases;
  
  var lbpResponseProgram;
  var lbo, lbpTexCoordLocation, lbpTexCoordBuffer, lbpPositionLocation, lbpAPositionBuffer;

  var gradientResponseProgram;
  var gbo, gradTexCoordLocation, gradTexCoordBuffer, gradPositionLocation, gradAPositionBuffer;

  var lbpInit = false;
  var sobelInit = false;
  var rawInit = false;

  var lbpResponseVS = [
    "attribute vec2 a_texCoord;",
    "attribute vec2 a_position;",
    "",
    "varying vec2 v_texCoord;",
    "",
    "void main() {",
    "   // transform coordinates to regular coordinates",
    "   gl_Position = vec4(a_position,0.0,1.0);",
    " ",
    "   // pass the texCoord to the fragment shader",
    "   v_texCoord = a_texCoord;",
    "}"
  ].join('\n');
  var lbpResponseFS;

  var gradientResponseVS = [
    "attribute vec2 a_texCoord;",
    "attribute vec2 a_position;",
    "",
    "varying vec2 v_texCoord;",
    "",
    "void main() {",
    "   // transform coordinates to regular coordinates",
    "   gl_Position = vec4(a_position,0.0,1.0);",
    " ",
    "   // pass the texCoord to the fragment shader",
    "   v_texCoord = a_texCoord;",
    "}"
  ].join('\n');
  var gradientResponseFS;
  
  var patchResponseVS;
  var patchResponseFS;
  
  var drawResponsesVS = [
    "attribute vec2 a_texCoord_draw;",
    "attribute vec2 a_position_draw;",
    "attribute float a_patchChoice_draw;",
    "",
    "uniform vec2 u_resolutiondraw;",
    "",
    "varying vec2 v_texCoord;",
    "varying float v_select;",
    "",
    "void main() {",
    "   // convert the rectangle from pixels to 0.0 to 1.0",
    "   vec2 zeroToOne = a_position_draw / u_resolutiondraw;",
    "",
    "   // convert from 0->1 to 0->2",
    "   vec2 zeroToTwo = zeroToOne * 2.0;",
    "",
    "   // convert from 0->2 to -1->+1 (clipspace)",
    "   vec2 clipSpace = zeroToTwo - 1.0;",
    "   ",
    "   // transform coordinates to regular coordinates",
    "   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);",
    "",
    "   // pass the texCoord to the fragment shader",
    "   v_texCoord = a_texCoord_draw;",
    "   ",
    "   v_select = a_patchChoice_draw;",
    "}"
  ].join('\n');
  
  var drawResponsesFS = [
    "precision mediump float;",
    "",
    "// our responses",
    "uniform sampler2D u_responses;",
    "",
    "// the texCoords passed in from the vertex shader.",
    "varying vec2 v_texCoord;",
    "varying float v_select;",
    "",
    "const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);",
    "const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);",
    "",
    "// packing code from here http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work",
    "void main() {",
    "  vec4 colorSum = texture2D(u_responses, v_texCoord);",
    "  float value = 0.0;",
    "  if (v_select < 0.1) {",
    "    value = colorSum[0];",
    "  } else if (v_select > 0.9 && v_select < 1.1) {",
    "    value = colorSum[1];",
    "  } else if (v_select > 1.9 && v_select < 2.1) {",
    "    value = colorSum[2];",
    "  } else if (v_select > 2.9 && v_select < 3.1) {",
    "    value = colorSum[3];",
    "  } else {",
    "    value = 1.0;",
    "  }",
    "  ",
    "  vec4 res = fract(value * bit_shift);",
    "  res -= res.xxyz * bit_mask;",
    "  ",
    "  //gl_FragColor = vec4(value, value, value, value);",
    "  //gl_FragColor = vec4(1.0, value, 1.0, 1.0);",
    "  gl_FragColor = res;",
    "}"
  ].join('\n');
  
  this.init = function(filters, bias, nP, pW, pH, fW, fH) {
    // we assume filterVector goes from left to right, rowwise, i.e. row-major order

    if (fW != fH) {
      alert("filter width and height must be same size!");
      return;
    }
    
    // if filter width is not odd, alert
    if (fW % 2 == 0 || fH % 2 == 0) {
      alert("filters used in svm must be of odd dimensions!");
      return;
    }
    
    // setup variables
    biases = bias;
    filterWidth = fW;
    filterHeight = fH;
    patchWidth = pW;
    patchHeight = pH;
    numPatches = nP;
    numBlocks = Math.floor(numPatches / 4) + Math.ceil((numPatches % 4)/4);
    canvasWidth = patchWidth;
    canvasHeight = patchHeight*numBlocks;
    newCanvasWidth = patchWidth-filterWidth+1;
    newCanvasBlockHeight = patchHeight-filterWidth+1;
    newCanvasHeight = newCanvasBlockHeight*numPatches;
    patchCells = (Math.floor(numPatches / 4) + Math.ceil((numPatches % 4)/4));
    textureWidth = patchWidth;
    textureHeight = patchHeight*patchCells;
    patchSize = patchWidth*patchHeight;
    patchArray = new Float32Array(patchSize*patchCells*4);
    var opp = [1/patchWidth, 1/(patchHeight*numBlocks)];

    // write out shaders
    patchResponseFS = [
      "precision mediump float;",
      "",
      "const vec2 u_onePixelPatches = vec2("+(1/patchWidth).toFixed(10)+","+(1/(patchHeight*numBlocks)).toFixed(10)+");",
      "const vec2 u_onePixelFilters = vec2("+(1/filterWidth).toFixed(10)+","+(1/(filterHeight*numBlocks)).toFixed(10)+");",
      "const float u_halffilterwidth = "+((filterWidth-1.0)/2).toFixed(1)+";",
      "const float u_halffilterheight = "+((filterHeight-1.0)/2).toFixed(1)+";",
      "",
      "// our patches",
      "uniform sampler2D u_patches;",
      "// our filters",
      "uniform sampler2D u_filters;",
      "",
      "// the texCoords passed in from the vertex shader.",
      "varying vec2 v_texCoord;",
      "varying vec2 v_texCoordFilters; // this should give us correct filter",
      "",
      "void main() {",
      "  vec4 colorSum = vec4(0.0, 0.0, 0.0, 0.0);",
      "  vec4 maxn = vec4(0.0, 0.0, 0.0, 0.0);",
      "  vec4 minn = vec4(256.0, 256.0, 256.0, 256.0);",
      "  vec4 scale = vec4(0.0, 0.0, 0.0, 0.0);",
      "  vec4 patchValue = vec4(0.0, 0.0, 0.0, 0.0);",
      "  vec4 filterValue = vec4(0.0, 0.0, 0.0, 0.0);",
      "  vec4 filterTemp = vec4(0.0, 0.0, 0.0, 0.0);",
      "  for (int w = 0;w < "+filterWidth+";w++) {",
      "    for (int h = 0;h < "+filterHeight+";h++) {",
      "      patchValue = texture2D(u_patches, v_texCoord + u_onePixelPatches * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));",
      "      filterValue = texture2D(u_filters, v_texCoordFilters + u_onePixelFilters * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));",
      "      maxn = max(patchValue, maxn);",
      "      minn = min(patchValue, minn);",
      "      colorSum += patchValue*filterValue;",
      "      filterTemp += filterValue;",
      "    } ",
      "  }",
      "  scale = maxn-minn;",
      "  colorSum = (colorSum-(minn*filterTemp))/scale;",
      "  // logistic transformation",
      "  colorSum = 1.0/(1.0 + exp(- (colorSum) ));",
      "  gl_FragColor = colorSum;",
      "}"
    ].join('\n');
    
    patchResponseVS = [
      "attribute vec2 a_texCoord;",
      "attribute vec2 a_position;",
      "",
      "const vec2 u_resolution = vec2("+canvasWidth.toFixed(1)+","+canvasHeight.toFixed(1)+");",
      "const float u_patchHeight = "+(1/numBlocks).toFixed(10)+";",
      "const float u_filterHeight = "+(1/numBlocks).toFixed(10)+";",
      "const vec2 u_midpoint = vec2(0.5 ,"+(1/(numBlocks*2)).toFixed(10)+");",
      "",
      "varying vec2 v_texCoord;",
      "varying vec2 v_texCoordFilters;",
      "",
      "void main() {",
      "   // convert the rectangle from pixels to 0.0 to 1.0",
      "   vec2 zeroToOne = a_position / u_resolution;",
      "",
      "   // convert from 0->1 to 0->2",
      "   vec2 zeroToTwo = zeroToOne * 2.0;",
      "",
      "   // convert from 0->2 to -1->+1 (clipspace)",
      "   vec2 clipSpace = zeroToTwo - 1.0;",
      "   ",
      "   // transform coordinates to regular coordinates",
      "   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);",
      " ",
      "   // pass the texCoord to the fragment shader",
      "   v_texCoord = a_texCoord;",
      "   ",
      "   // set the filtertexture coordinate based on number filter to use",
      "   v_texCoordFilters = u_midpoint + vec2(0.0, u_filterHeight * floor(a_texCoord[1]/u_patchHeight));",
      "}"
    ].join('\n');

    if ('lbp' in filters) {
      // lbpResponseFragment
      lbpResponseFS = [
        "precision mediump float;",
        "",
        "uniform vec2 u_onePixelPatches;",
        "",
        "// our patches",
        "uniform sampler2D u_patches;",
        "",
        "// the texCoords passed in from the vertex shader.",
        "varying vec2 v_texCoord;",
        "",
        "void main() {",
        "  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
        "  vec4 topMid = texture2D(u_patches, v_texCoord + vec2(0.0, -"+opp[1].toFixed(5)+"));",
        "  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
        "  vec4 midLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", 0.0));",
        "  vec4 midMid = texture2D(u_patches, v_texCoord);",
        "  vec4 midRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", 0.0));",
        "  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
        "  vec4 bottomMid = texture2D(u_patches, v_texCoord + vec2(0.0, "+opp[1].toFixed(5)+"));",
        "  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
        "  vec4 lbp = step(midMid, midRight)*1.0 + step(midMid, topRight)*2.0 + step(midMid, topMid)*4.0;",
        "  lbp = lbp + step(midMid, topLeft)*8.0 + step(midMid, midLeft)*16.0 + step(midMid, bottomLeft)*32.0;",
        "  lbp = lbp + step(midMid, bottomMid)*64.0 + step(midMid, bottomRight)*128.0;",
        "  gl_FragColor = lbp;",
        "}"
      ].join('\n');
    }

    if ('sobel' in filters) {
      // gradResponseFragment
      gradientResponseFS = [
        "precision mediump float;",
        "",
        "uniform vec2 u_onePixelPatches;",
        "",
        "// our patches",
        "uniform sampler2D u_patches;",
        "",
        "// the texCoords passed in from the vertex shader.",
        "varying vec2 v_texCoord;",
        "",
        "void main() {",
        "  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
        "  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
        "  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
        "  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
        "  vec4 dx = (",
        "    bottomLeft +",
        "    (texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) +",
        "    topLeft -",
        "    bottomRight -",
        "    (texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) -",
        "    topRight)/4.0;",
        "  vec4 dy = (",
        "    bottomLeft +",
        "    (texture2D(u_patches, v_texCoord + vec2(0.0, "+opp[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) +",
        "    bottomRight -",
        "    topLeft -",
        "    (texture2D(u_patches, v_texCoord + vec2(0.0, -"+opp[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) -",
        "    topRight)/4.0;",
        "  vec4 gradient = sqrt((dx*dx) + (dy*dy));",
        "  gl_FragColor = gradient;",
        "}"
      ].join('\n');
    }

    //create webglcanvas
    canvas = document.createElement('canvas')
    canvas.setAttribute('width', (patchWidth-filterWidth+1)+"px");
    canvas.setAttribute('height', ((patchHeight-filterHeight+1)*numPatches)+"px");
    canvas.setAttribute('id', 'renderCanvas');
    canvas.setAttribute('style', 'display:none;');
    document.body.appendChild(canvas);
    // TODO : isolate this library from webgl-util.js
    gl = setupWebGL(canvas, {premultipliedAlpha: false, preserveDrawingBuffer : true, antialias : false});
    

    // check for float textures support and fail if not
    if (!gl.getExtension("OES_texture_float")) {
      alert("Your graphics card does not support floating point textures! :(");
      return;
    }
    
    /** insert filters into textures **/
    if ('raw' in filters) {
      insertFilter(filters['raw'], gl.TEXTURE0)
      rawInit = true;
    }
    if ('sobel' in filters) {
      insertFilter(filters['sobel'], gl.TEXTURE4)
      sobelInit = true;
    }
    if ('lbp' in filters) {
      insertFilter(filters['lbp'], gl.TEXTURE5)
      lbpInit = true;
    }

    /** calculate vertices for calculating responses **/
    
    // vertex rectangles to draw out
    var rectangles = [];
    var halfFilter = (filterWidth-1)/2;
    var yOffset;
    for (var i = 0;i < numBlocks;i++) {
      yOffset = i*patchHeight;
      //first triangle
      rectangles = rectangles.concat(
        [halfFilter, yOffset+halfFilter, 
        patchWidth-halfFilter, yOffset+halfFilter,
        halfFilter, yOffset+patchHeight-halfFilter]
      );
      //second triangle
      rectangles = rectangles.concat(
        [halfFilter, yOffset+patchHeight-halfFilter, 
        patchWidth-halfFilter, yOffset+halfFilter,
        patchWidth-halfFilter, yOffset+patchHeight-halfFilter]
      );
    }
    rectangles = new Float32Array(rectangles);
    
    // image rectangles to draw out
    var irectangles = [];
    for (var i = 0;i < rectangles.length;i++) {
      if (i % 2 == 0) {
        irectangles[i] = rectangles[i]/canvasWidth;
      } else {
        irectangles[i] = rectangles[i]/canvasHeight;
      }
    }
    irectangles = new Float32Array(irectangles);

    if ('lbp' in filters || 'sobel' in filters) {
      var topCoord = 1.0 - 2/(patchHeight*numBlocks);
      var bottomCoord = 1.0 - 2/numBlocks + 2/(patchHeight*numBlocks);
      var yOffset;
      // calculate position of vertex rectangles for gradient/lbp program
      var gradRectangles = [];
      for (var i = 0;i < numBlocks;i++) {
        yOffset = i * (2/numBlocks);
        //first triangle
        gradRectangles = gradRectangles.concat(
          [-1.0, topCoord - yOffset, 
          1.0, topCoord - yOffset,
          -1.0, bottomCoord - yOffset]
        );
        //second triangle
        gradRectangles = gradRectangles.concat(
          [-1.0, bottomCoord - yOffset, 
          1.0, topCoord - yOffset,
          1.0, bottomCoord - yOffset]
        );
      }
      gradRectangles = new Float32Array(gradRectangles);
      
      topCoord = 1.0 - 1/(patchHeight*numBlocks);
      bottomCoord = 1.0 - 1/numBlocks + 1/(patchHeight*numBlocks);
      // calculate position of image rectangles to draw out
      var gradIRectangles = [];
      for (var i = 0;i < numBlocks;i++) {
        yOffset = i * (1/numBlocks);
        //first triangle
        gradIRectangles = gradIRectangles.concat(
          [0.0, topCoord - yOffset, 
          1.0, topCoord - yOffset,
          0.0, bottomCoord - yOffset]
        );
        //second triangle
        gradIRectangles = gradIRectangles.concat(
          [0.0, bottomCoord - yOffset, 
          1.0, topCoord - yOffset,
          1.0, bottomCoord - yOffset]
        );
      }
      gradIRectangles = new Float32Array(gradIRectangles);
    }

    // vertices for drawing out responses

    // drawOutRectangles
    drawOutRectangles = new Float32Array(12*numPatches);
    var yOffset, indexOffset;
    for (var i = 0;i < numPatches;i++) {
      yOffset = i*newCanvasBlockHeight;
      indexOffset = i*12;
      
      //first triangle
      drawOutRectangles[indexOffset] = 0.0;
      drawOutRectangles[indexOffset+1] = yOffset;
      drawOutRectangles[indexOffset+2] = newCanvasWidth;
      drawOutRectangles[indexOffset+3] = yOffset;
      drawOutRectangles[indexOffset+4] = 0.0;
      drawOutRectangles[indexOffset+5] = yOffset+newCanvasBlockHeight;
      
      //second triangle
      drawOutRectangles[indexOffset+6] = 0.0;
      drawOutRectangles[indexOffset+7] = yOffset+newCanvasBlockHeight;
      drawOutRectangles[indexOffset+8] = newCanvasWidth;
      drawOutRectangles[indexOffset+9] = yOffset;
      drawOutRectangles[indexOffset+10] = newCanvasWidth;
      drawOutRectangles[indexOffset+11] = yOffset+newCanvasBlockHeight;
    }
    
    // images
    drawOutImages = new Float32Array(numPatches*12);
    var halfFilterWidth = ((filterWidth-1)/2)/patchWidth;
    var halfFilterHeight = ((filterWidth-1)/2)/(patchHeight*patchCells);
    var patchHeightT = patchHeight / (patchHeight*patchCells);
    for (var i = 0;i < numPatches;i++) {
      yOffset = Math.floor(i / 4)*patchHeightT;
      indexOffset = i*12;
      
      //first triangle
      drawOutImages[indexOffset] = halfFilterWidth;
      drawOutImages[indexOffset+1] = yOffset+halfFilterHeight;
      drawOutImages[indexOffset+2] = 1.0-halfFilterWidth;
      drawOutImages[indexOffset+3] = yOffset+halfFilterHeight;
      drawOutImages[indexOffset+4] = halfFilterWidth;
      drawOutImages[indexOffset+5] = yOffset+patchHeightT-halfFilterHeight;
      
      //second triangle
      drawOutImages[indexOffset+6] = halfFilterWidth;
      drawOutImages[indexOffset+7] = yOffset+patchHeightT-halfFilterHeight;
      drawOutImages[indexOffset+8] = 1.0-halfFilterWidth;
      drawOutImages[indexOffset+9] = yOffset+halfFilterHeight;
      drawOutImages[indexOffset+10] = 1.0-halfFilterWidth;
      drawOutImages[indexOffset+11] = yOffset+patchHeightT-halfFilterHeight;
    }
    
    // layer
    drawOutLayer = new Float32Array(numPatches*6);
    var layernum;
    for (var i = 0;i < numPatches;i++) {
      layernum = i % 4;
      indexOffset = i*6;
      drawOutLayer[indexOffset] = layernum;
      drawOutLayer[indexOffset+1] = layernum;
      drawOutLayer[indexOffset+2] = layernum;
      drawOutLayer[indexOffset+3] = layernum;
      drawOutLayer[indexOffset+4] = layernum;
      drawOutLayer[indexOffset+5] = layernum;
    }
    
    /** set up programs and load attributes etc **/

    if ('sobel' in filters) {
      var grVertexShader = loadShader(gl, gradientResponseVS, gl.VERTEX_SHADER);
      var grFragmentShader = loadShader(gl, gradientResponseFS, gl.FRAGMENT_SHADER);
      gradientResponseProgram = createProgram(gl, [grVertexShader, grFragmentShader]);
      gl.useProgram(gradientResponseProgram);

      // set up vertices with rectangles
      gradPositionLocation = gl.getAttribLocation(gradientResponseProgram, "a_position");
      gradAPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, gradAPositionBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, gradRectangles, gl.STATIC_DRAW);
      gl.enableVertexAttribArray(gradPositionLocation);
      gl.vertexAttribPointer(gradPositionLocation, 2, gl.FLOAT, false, 0, 0);
      
      // set up texture positions
      gradTexCoordLocation = gl.getAttribLocation(gradientResponseProgram, "a_texCoord");
      gradTexCoordBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, gradTexCoordBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, gradIRectangles, gl.STATIC_DRAW);
      gl.enableVertexAttribArray(gradTexCoordLocation);
      gl.vertexAttribPointer(gradTexCoordLocation, 2, gl.FLOAT, false, 0, 0);
      
      // set up patches texture in gradientResponseProgram
      gl.uniform1i(gl.getUniformLocation(gradientResponseProgram, "u_patches"), 1);
    }
    if ('lbp' in filters) {
      var lbpVertexShader = loadShader(gl, lbpResponseVS, gl.VERTEX_SHADER);
      var lbpFragmentShader = loadShader(gl, lbpResponseFS, gl.FRAGMENT_SHADER);
      lbpResponseProgram = createProgram(gl, [lbpVertexShader, lbpFragmentShader]);
      gl.useProgram(lbpResponseProgram);

      // set up vertices with rectangles
      lbpPositionLocation = gl.getAttribLocation(lbpResponseProgram, "a_position");
      lbpAPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, lbpAPositionBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, gradRectangles, gl.STATIC_DRAW);
      gl.enableVertexAttribArray(lbpPositionLocation);
      gl.vertexAttribPointer(lbpPositionLocation, 2, gl.FLOAT, false, 0, 0);
      
      // set up texture positions
      gradTexCoordLocation = gl.getAttribLocation(lbpResponseProgram, "a_texCoord");
      lbpTexCoordBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, lbpTexCoordBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, gradIRectangles, gl.STATIC_DRAW);
      gl.enableVertexAttribArray(lbpTexCoordLocation);
      gl.vertexAttribPointer(lbpTexCoordLocation, 2, gl.FLOAT, false, 0, 0);

      // set up patches texture in lbpResponseProgram
      gl.uniform1i(gl.getUniformLocation(lbpResponseProgram, "u_patches"), 1);
    }

    // setup patchdraw program
    var drVertexShader = loadShader(gl, drawResponsesVS, gl.VERTEX_SHADER);
    var drFragmentShader = loadShader(gl, drawResponsesFS, gl.FRAGMENT_SHADER);
    patchDrawProgram = createProgram(gl, [drVertexShader, drFragmentShader]);
    gl.useProgram(patchDrawProgram);
    
    // set the resolution/dimension of the canvas
    var resolutionLocation = gl.getUniformLocation(patchDrawProgram, "u_resolutiondraw");
    gl.uniform2f(resolutionLocation, newCanvasWidth, newCanvasHeight);
    
    // set u_responses
    var responsesLocation = gl.getUniformLocation(patchDrawProgram, "u_responses");
    gl.uniform1i(responsesLocation, 2);
    
    // setup patchresponse program
    var prVertexShader = loadShader(gl, patchResponseVS, gl.VERTEX_SHADER);
    var prFragmentShader = loadShader(gl, patchResponseFS, gl.FRAGMENT_SHADER);
    patchResponseProgram = createProgram(gl, [prVertexShader, prFragmentShader]);
    gl.useProgram(patchResponseProgram);
    
    // set up vertices with rectangles
    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
    apositionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, rectangles, gl.STATIC_DRAW);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
    
    // set up texture positions
    texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
    texCoordBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, irectangles, gl.STATIC_DRAW);
    gl.enableVertexAttribArray(texCoordLocation);
    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

    if ('lbp' in filters || 'sobel' in filters) {
      // set up gradient/lbp buffer (also used for lbp)
      gl.activeTexture(gl.TEXTURE3);
      var gradients = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, gradients);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, patchWidth, patchHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, null);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

      // set up gradient/lbp framebuffer
      gbo = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, gradients, 0);
    }

    // set up buffer to draw to
    gl.activeTexture(gl.TEXTURE2);
    rttTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, rttTexture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, patchWidth, patchHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, null);
    
    // set up response framebuffer
    fbo = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, rttTexture, 0);

    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

    /* initialize some textures and buffers used later on */

    patchTex = gl.createTexture();
    drawRectBuffer = gl.createBuffer();
    drawImageBuffer = gl.createBuffer();
    drawLayerBuffer = gl.createBuffer();
  }

  this.getRawResponses = function(patches) {
    // TODO: check patches correct length/dimension
    
    insertPatches(patches);
    
    // switch to correct program
    gl.useProgram(patchResponseProgram);

    // set u_patches to point to texture 1
    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_patches"), 1);

    // set u_filters to point to correct filter
    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_filters"), 0);
      
    // set up vertices with rectangles
    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
    
    // set up texture positions
    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
    gl.enableVertexAttribArray(texCoordLocation);
    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
    
    // set framebuffer to the original one if not already using it
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    
    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);
    
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)
    
    // draw to framebuffer
    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);
    
    //gl.finish();
    
    var responses = drawOut('raw');

    return responses;
  }

  this.getSobelResponses = function(patches) {
    // check that it is initialized
    if (!sobelInit) return;

    insertPatches(patches);

    /* do sobel filter on patches */

    // switch to correct program
    gl.useProgram(gradientResponseProgram);

    // set up vertices with rectangles
    var gradPositionLocation = gl.getAttribLocation(gradientResponseProgram, "a_position");
    gl.bindBuffer(gl.ARRAY_BUFFER, gradAPositionBuffer);
    gl.enableVertexAttribArray(gradPositionLocation);
    gl.vertexAttribPointer(gradPositionLocation, 2, gl.FLOAT, false, 0, 0);
    
    // set up texture positions
    var gradTexCoordLocation = gl.getAttribLocation(gradientResponseProgram, "a_texCoord");
    gl.bindBuffer(gl.ARRAY_BUFFER, gradTexCoordBuffer);
    gl.enableVertexAttribArray(gradTexCoordLocation);
    gl.vertexAttribPointer(gradTexCoordLocation, 2, gl.FLOAT, false, 0, 0);

    // set framebuffer to the original one if not already using it
    gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);

    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)

    // draw to framebuffer
    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

    /* calculate responses */

    gl.useProgram(patchResponseProgram);
    
    // set patches and filters to point to correct textures
    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_filters"), 4);
    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_patches"), 3);

    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

    // set up texture positions
    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
    gl.enableVertexAttribArray(texCoordLocation);
    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
    
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)
    
    // draw to framebuffer
    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

    /* get the responses */

    var responses = drawOut('sobel');

    return responses;
  }

  this.getLBPResponses = function(patches) {
    // check that it is initialized
    if (!lbpInit) return;

    insertPatches(patches);

     /* do sobel filter on patches */

    // switch to correct program
    gl.useProgram(lbpResponseProgram);

    // set up vertices with rectangles
    var lbpPositionLocation = gl.getAttribLocation(lbpResponseProgram, "a_position");
    gl.bindBuffer(gl.ARRAY_BUFFER, lbpAPositionBuffer);
    gl.enableVertexAttribArray(lbpPositionLocation);
    gl.vertexAttribPointer(lbpPositionLocation, 2, gl.FLOAT, false, 0, 0);
    
    // set up texture positions
    var lbpTexCoordLocation = gl.getAttribLocation(lbpResponseProgram, "a_texCoord");
    gl.bindBuffer(gl.ARRAY_BUFFER, lbpTexCoordBuffer);
    gl.enableVertexAttribArray(lbpTexCoordLocation);
    gl.vertexAttribPointer(lbpTexCoordLocation, 2, gl.FLOAT, false, 0, 0);

    // set framebuffer to the original one if not already using it
    gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);

    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)

    // draw to framebuffer
    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

    /* calculate responses */

    gl.useProgram(patchResponseProgram);

    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_filters"), 5);
    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_patches"), 3);

    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

    // set up texture positions
    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
    gl.enableVertexAttribArray(texCoordLocation);
    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
    
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)
    
    // draw to framebuffer
    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

    /* get the responses */

    var responses = drawOut('lbp');

    return responses;
  }

  var insertPatches = function(patches) {
    // pass patches into texture, each patch in either r, g, b or a
    var patchArrayIndex = 0;
    var patchesIndex1 = 0;
    var patchesIndex2 = 0;
    for (var i = 0;i < patchCells;i++) {
      for (var j = 0;j < patchHeight;j++) {
        for (var k = 0;k < patchWidth;k++) {
          patchesIndex1 = i*4;
          patchesIndex2 = (j*patchWidth) + k;
          patchArrayIndex = ((patchSize*i) + patchesIndex2)*4;
          
          //set r with first patch
          if (patchesIndex1 < numPatches) {
            patchArray[patchArrayIndex] = patches[patchesIndex1][patchesIndex2];
          } else {
            patchArray[patchArrayIndex] = 0;
          }
          //set g with 2nd patch
          if (patchesIndex1+1 < numPatches) {
            patchArray[patchArrayIndex + 1] = patches[patchesIndex1+1][patchesIndex2];
          } else {
            patchArray[patchArrayIndex + 1] = 0;
          }
          //set b with 3rd patch
          if (patchesIndex1+2 < numPatches) {
            patchArray[patchArrayIndex + 2] = patches[patchesIndex1+2][patchesIndex2];
          } else {
            patchArray[patchArrayIndex + 2] = 0;
          }
          //set a with 4th patch
          if (patchesIndex1+3 < numPatches) {
            patchArray[patchArrayIndex + 3] = patches[patchesIndex1+3][patchesIndex2];
          } else {
            patchArray[patchArrayIndex + 3] = 0;
          }
        }
      }
    }
    
    // pass texture into an uniform
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, patchTex);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureWidth, textureHeight, 0, gl.RGBA, gl.FLOAT, patchArray);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  }

  var insertFilter = function(filter, textureNum) {
    var filterSize = filterWidth*filterHeight;
    var filterArray = new Float32Array(filterSize*(numBlocks)*4);
    for (var i = 0;i < numBlocks;i++) {
      for (var j = 0;j < filterHeight;j++) {
        for (var k = 0;k < filterWidth;k++) {
          //set r with first filter
          if (i*4 < filter.length) {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4] = filter[i*4][(j*filterWidth) + k];
          } else {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4] = 0;
          }
          //set g with 2nd filter
          if ((i*4 + 1) < filter.length) {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 1] = filter[(i*4)+1][(j*filterWidth) + k];
          } else {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 1] = 0;
          }
          //set b with 3rd filter
          if ((i*4 + 2) < filter.length) {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 2] = filter[(i*4)+2][(j*filterWidth) + k];
          } else {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 2] = 0;
          }
          //set a with 4th filter
          if ((i*4 + 3) < filter.length) {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 3] = filter[(i*4)+3][(j*filterWidth) + k];
          } else {
            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 3] = 0;
          }
        }
      }
    }

    gl.activeTexture(textureNum);
    var filterTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, filterTexture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, filterWidth, filterHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, filterArray);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  }

  var drawOut = function(type) {
    // switch programs
    gl.useProgram(patchDrawProgram);
    
    // bind canvas buffer
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.viewport(0, 0, newCanvasWidth, newCanvasHeight);
    
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)

    gl.bindBuffer(gl.ARRAY_BUFFER, drawRectBuffer);
    gl.bufferData(
      gl.ARRAY_BUFFER, 
      drawOutRectangles, 
      gl.STATIC_DRAW);
    var positionLocation = gl.getAttribLocation(patchDrawProgram, "a_position_draw");
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
    
    gl.bindBuffer(gl.ARRAY_BUFFER, drawImageBuffer);
    gl.bufferData(
      gl.ARRAY_BUFFER, 
      drawOutImages, 
      gl.STATIC_DRAW);
    var textureLocation = gl.getAttribLocation(patchDrawProgram, "a_texCoord_draw");
    gl.enableVertexAttribArray(textureLocation);
    gl.vertexAttribPointer(textureLocation, 2, gl.FLOAT, false, 0, 0);
    
    gl.bindBuffer(gl.ARRAY_BUFFER, drawLayerBuffer);
    gl.bufferData(
      gl.ARRAY_BUFFER, 
      drawOutLayer, 
      gl.STATIC_DRAW);
    var layerLocation = gl.getAttribLocation(patchDrawProgram, "a_patchChoice_draw");
    gl.enableVertexAttribArray(layerLocation);
    gl.vertexAttribPointer(layerLocation, 1, gl.FLOAT, false, 0, 0);
    
    // draw out
    gl.drawArrays(gl.TRIANGLES, 0, numPatches*6);

    var responses = getOutput();
    
    responses = unpackToFloat(responses);
    
    // split
    responses = splitArray(responses, numPatches);
    
    // add bias
    responses = addBias(responses, biases[type]);
    
    // normalize responses to lie within [0,1]
    var rl = responses.length;
    
    for (var i = 0;i < rl;i++) {
      responses[i] = normalizeFilterMatrix(responses[i]);
    }

    return responses;
  }
  
  var addBias = function(responses, bias) {
    // do a little trick to add bias in the logit function
    var biasMult;
    for (var i = 0;i < responses.length;i++) {
      biasMult = Math.exp(bias[i]);
      for (var j = 0;j < responses[i].length;j++) {
        responses[i][j] = 1/(1+((1-responses[i][j])/(responses[i][j]*biasMult)));
      }
    }
    return responses;
  }
  
  var splitArray = function(array, parts) {
    var sp = [];
    var al = array.length;
    var splitlength = al/parts;
    var ta = [];
    for (var i = 0;i < al;i++) {
      if (i % splitlength == 0) {
        if (i != 0) {
          sp.push(ta);
        }
        ta = [];
      }
      ta.push(array[i]); 
    }
    sp.push(ta);
    return sp;
  }
  
  var getOutput = function() {
    // get data
    var pixelValues = new Uint8Array(4*canvas.width*canvas.height);
    var data = gl.readPixels(0, 0, canvas.width, canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelValues);
    // return
    return pixelValues;
  }
  
  var unpackToFloat = function(array) {
    // convert packed floats to proper floats : see http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work
    var newArray = [];
    var al = array.length;
    for (var i = 0;i < al;i+=4) {
      newArray[(i / 4) >> 0] = ((array[i]/(256*256*256*256))+(array[i+1]/(256*256*256))+(array[i+2]/(256*256))+(array[i+3]/256));
    }
    return newArray;
  }
  
  var normalizeFilterMatrix = function(response) {
    // normalize responses to lie within [0,1]
    var msize = response.length;
    var max = 0;
    var min = 1;
    
    for (var i = 0;i < msize;i++) {
      max = response[i] > max ? response[i] : max;
      min = response[i] < min ? response[i] : min;
    }
    var dist = max-min;
    
    if (dist == 0) {
      // console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.")
      response = response.map(function() {return 1});
    } else {
      for (var i = 0;i < msize;i++) {
        response[i] = (response[i]-min)/dist;
      }
    }
    
    return response
  }
};

// The rest of the code is based on webgl-utils.js authored by Gregg Tavares, license below:
/*
 * Copyright (c) 2011, Gregg Tavares
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  * Neither the name of greggman.com nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

(function() {
  
  /**
   * Wrapped logging function.
   * @param {string} msg The message to log.
   */
  var log = function(msg) {
    if (window.console && window.console.log) {
      window.console.log(msg);
    }
  };

  /**
   * Wrapped logging function.
   * @param {string} msg The message to log.
   */
  var error = function(msg) {
    if (window.console) {
      if (window.console.error) {
        window.console.error(msg);
      }
      else if (window.console.log) {
        window.console.log(msg);
      }
    }
    throw msg;
  };

  /**
   * Turn off all logging.
   */
  var loggingOff = function() {
    log = function() {};
    error = function() {};
  };

  /**
   * Check if the page is embedded.
   * @return {boolean} True of we are in an iframe
   */
  var isInIFrame = function() {
    return window != window.top;
  };

  /**
   * Converts a WebGL enum to a string
   * @param {!WebGLContext} gl The WebGLContext to use.
   * @param {number} value The enum value.
   * @return {string} The enum as a string.
   */
  var glEnumToString = function(gl, value) {
    for (var p in gl) {
      if (gl[p] == value) {
        return p;
      }
    }
    return "0x" + value.toString(16);
  };

  /**
   * Creates the HTLM for a failure message
   * @param {string} canvasContainerId id of container of th
   *        canvas.
   * @return {string} The html.
   */
  var makeFailHTML = function(msg) {
    return '' +
      '<table style="background-color: #8CE; width: 100%; height: 100%;"><tr>' +
      '<td align="center">' +
      '<div style="display: table-cell; vertical-align: middle;">' +
      '<div style="">' + msg + '</div>' +
      '</div>' +
      '</td></tr></table>';
  };

  /**
   * Mesasge for getting a webgl browser
   * @type {string}
   */
  var GET_A_WEBGL_BROWSER = '' +
    'This page requires a browser that supports WebGL.<br/>' +
    '<a href="http://get.webgl.org">Click here to upgrade your browser.</a>';

  /**
   * Mesasge for need better hardware
   * @type {string}
   */
  var OTHER_PROBLEM = '' +
    "It doesn't appear your computer can support WebGL.<br/>" +
    '<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>';

  /**
   * Creates a webgl context. If creation fails it will
   * change the contents of the container of the <canvas>
   * tag to an error message with the correct links for WebGL.
   * @param {Element} canvas. The canvas element to create a
   *     context from.
   * @param {WebGLContextCreationAttirbutes} opt_attribs Any
   *     creation attributes you want to pass in.
   * @return {WebGLRenderingContext} The created context.
   */
  var setupWebGL = function(canvas, opt_attribs) {
    function showLink(str) {
      var container = canvas.parentNode;
      if (container) {
        container.innerHTML = makeFailHTML(str);
      }
    };

    if (!window.WebGLRenderingContext) {
      //showLink(GET_A_WEBGL_BROWSER);
      return null;
    }

    var context = create3DContext(canvas, opt_attribs);
    if (!context) {
      //showLink(OTHER_PROBLEM);
      return null;
    }
    return context;
  };

  /**
   * Creates a webgl context.
   * @param {!Canvas} canvas The canvas tag to get context
   *     from. If one is not passed in one will be created.
   * @return {!WebGLContext} The created context.
   */
  var create3DContext = function(canvas, opt_attribs) {
    var names = ["webgl", "experimental-webgl"];
    var context = null;
    for (var ii = 0; ii < names.length; ++ii) {
      try {
        context = canvas.getContext(names[ii], opt_attribs);
      } catch(e) {}
      if (context) {
        break;
      }
    }
    return context;
  }

  var updateCSSIfInIFrame = function() {
    if (isInIFrame()) {
      document.body.className = "iframe";
    }
  };

  /**
   * Gets a WebGL context.
   * makes its backing store the size it is displayed.
   */
  var getWebGLContext = function(canvas) {
    if (isInIFrame()) {
      updateCSSIfInIFrame();

      // make the canvas backing store the size it's displayed.
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    }

    var gl = setupWebGL(canvas);
    return gl;
  };

  /**
   * Loads a shader.
   * @param {!WebGLContext} gl The WebGLContext to use.
   * @param {string} shaderSource The shader source.
   * @param {number} shaderType The type of shader.
   * @param {function(string): void) opt_errorCallback callback for errors.
   * @return {!WebGLShader} The created shader.
   */
  var loadShader = function(gl, shaderSource, shaderType, opt_errorCallback) {
    var errFn = opt_errorCallback || error;
    // Create the shader object
    var shader = gl.createShader(shaderType);

    // Load the shader source
    gl.shaderSource(shader, shaderSource);

    // Compile the shader
    gl.compileShader(shader);

    // Check the compile status
    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!compiled) {
      // Something went wrong during compilation; get the error
      var lastError = gl.getShaderInfoLog(shader);
      errFn("*** Error compiling shader '" + shader + "':" + lastError);
      gl.deleteShader(shader);
      return null;
    }

    return shader;
  }

  /**
   * Creates a program, attaches shaders, binds attrib locations, links the
   * program and calls useProgram.
   * @param {!Array.<!WebGLShader>} shaders The shaders to attach
   * @param {!Array.<string>} opt_attribs The attribs names.
   * @param {!Array.<number>} opt_locations The locations for the attribs.
   */
  var loadProgram = function(gl, shaders, opt_attribs, opt_locations) {
    var program = gl.createProgram();
    for (var ii = 0; ii < shaders.length; ++ii) {
      gl.attachShader(program, shaders[ii]);
    }
    if (opt_attribs) {
      for (var ii = 0; ii < opt_attribs.length; ++ii) {
        gl.bindAttribLocation(
            program,
            opt_locations ? opt_locations[ii] : ii,
            opt_attribs[ii]);
      }
    }
    gl.linkProgram(program);

    // Check the link status
    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!linked) {
        // something went wrong with the link
        var lastError = gl.getProgramInfoLog (program);
        error("Error in program linking:" + lastError);

        gl.deleteProgram(program);
        return null;
    }
    return program;
  };

  /**
   * Loads a shader from a script tag.
   * @param {!WebGLContext} gl The WebGLContext to use.
   * @param {string} scriptId The id of the script tag.
   * @param {number} opt_shaderType The type of shader. If not passed in it will
   *     be derived from the type of the script tag.
   * @param {function(string): void) opt_errorCallback callback for errors.
   * @return {!WebGLShader} The created shader.
   */
  var createShaderFromScript = function(
      gl, scriptId, opt_shaderType, opt_errorCallback) {
    var shaderSource = "";
    var shaderType;
    var shaderScript = document.getElementById(scriptId);
    if (!shaderScript) {
      throw("*** Error: unknown script element" + scriptId);
    }
    shaderSource = shaderScript.text;

    if (!opt_shaderType) {
      if (shaderScript.type == "x-shader/x-vertex") {
        shaderType = gl.VERTEX_SHADER;
      } else if (shaderScript.type == "x-shader/x-fragment") {
        shaderType = gl.FRAGMENT_SHADER;
      } else if (shaderType != gl.VERTEX_SHADER && shaderType != gl.FRAGMENT_SHADER) {
        throw("*** Error: unknown shader type");
        return null;
      }
    }

    return loadShader(
        gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType,
        opt_errorCallback);
  };

  /* export functions */
  window.setupWebGL = setupWebGL;
  window.createProgram = loadProgram;
  window.createShaderFromScriptElement = createShaderFromScript;
  window.getWebGLContext = getWebGLContext;
  window.updateCSSIfInIFrame = updateCSSIfInIFrame;
  window.loadShader = loadShader;

}());

"use strict";

var svmFilter = function() {
  
  var _fft, fft_filters, responses, biases;
  var fft_size, filterLength, filter_width, search_width, num_patches;
  var temp_imag_part, temp_real_part;
  
  // fft function
  this.fft_inplace = function(array, _im_part) {
      // in-place
      
      if (typeof _im_part == "undefined") {
        _im_part = temp_imag_part;
      }
      
      for (var i = 0;i < filterLength;i++) {
        _im_part[i] = 0.0;
      }
      
      _fft.real_fft2d(array,_im_part);
      
      return [array, _im_part];
  }
  
  this.ifft = function(rn, cn) {
      // in-place
      _fft.real_ifft2d(rn, cn);
      return rn;
  }
  
  var complex_mult_inplace = function(cn1, cn2) {
      // in-place, cn1 is the one modified
      var temp1, temp2;
      for (var r = 0;r < filterLength;r++) {
          temp1 = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);
          temp2 = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);
          cn1[0][r] = temp1;
          cn1[1][r] = temp2;
      }
  }
  
  this.init = function(filter_input, bias_input, numPatches, filterWidth, searchWidth) {
    
    var temp, fft, offset;
    
    // calculate needed size of fft (has to be power of two)
    fft_size = upperPowerOfTwo(filterWidth-1+searchWidth);
    filterLength = fft_size*fft_size;
    _fft = new FFT();
    _fft.init(fft_size);
    fft_filters = Array(numPatches);
    var fft_filter;
    var edge = (filterWidth-1)/2;
    
    for (var i = 0;i < numPatches;i++) {
      var flar_fi0 = new Float64Array(filterLength);
      var flar_fi1 = new Float64Array(filterLength);
      
      // load filter 
      var xOffset, yOffset;
      for (var j = 0;j < filterWidth;j++) {
        for (var k = 0;k < filterWidth;k++) {
          // TODO : rotate filter
          
          xOffset = k < edge ? (fft_size-edge) : (-edge);
          yOffset = j < edge ? (fft_size-edge) : (-edge);
          flar_fi0[k+xOffset+((j+yOffset)*fft_size)] = filter_input[i][(filterWidth-1-j)+((filterWidth-1-k)*filterWidth)];
          
          /*xOffset = k < edge ? (fft_size-edge) : (-edge);
          yOffset = j < edge ? (fft_size-edge) : (-edge);
          flar_fi0[k+xOffset+((j+yOffset)*fft_size)] = filter_input[i][k+(j*filterWidth)];*/
          
          //console.log(k + ","+ j+":" + (k+xOffset+((j+yOffset)*fft_size)))
        }
      }

      // fft it and store
      fft_filter = this.fft_inplace(flar_fi0, flar_fi1);
      fft_filters[i] = fft_filter;

    }
    
    // set up biases
    biases = new Float64Array(numPatches);
    for (var i = 0;i < numPatches;i++) {
      biases[i] = bias_input[i];
    }
    
    responses = Array(numPatches);
    temp_imag_part = Array(numPatches);
    for (var i = 0;i < numPatches;i++) {
      responses[i] = new Float64Array(searchWidth*searchWidth);
      temp_imag_part[i] = new Float64Array(searchWidth*searchWidth);
    }
    temp_real_part = new Float64Array(filterLength);
    
    num_patches = numPatches;
    filter_width = filterWidth;
    search_width = searchWidth;
  }
  
  this.getResponses = function(patches) {
    var response, temp, edge;
    var patch_width = filter_width-1+search_width;
    for (var i = 0;i < num_patches;i++) {
      // reset zeroes in temp_real_part
      for (var j = 0;j < fft_size*fft_size;j++) {
        temp_real_part[j] = 0.0;
      }
      
      // normalize patches to 0-1
      patches[i] = normalizePatches(patches[i]);
      
      // patch must be padded (with zeroes) to match fft size
      for (var j = 0;j < patch_width;j++) {
        for (var k = 0;k < patch_width;k++) {
          temp_real_part[j + (fft_size*k)] = patches[i][k + (patch_width*j)];
        }
      }
      
      //drawData(document.getElementById('sketch').getContext('2d'), temp_real_part, 32, 32, false, 0, 0);
      
      // fft it
      response = this.fft_inplace(temp_real_part);
      
      // multiply pointwise with filter
      complex_mult_inplace(response, fft_filters[i]);
      
      // inverse fft it
      response = this.ifft(response[0], response[1]);
      
      // crop out edges
      edge = (filter_width-1)/2;
      for (var j = 0;j < search_width;j++) {
        for (var k = 0;k < search_width;k++) {
          responses[i][j + (k*search_width)] = response[edge + k + ((j+edge)*(fft_size))];
        }
      }

      // add bias
      for (var j = 0;j < search_width*search_width;j++) {
        responses[i][j] += biases[i];
      }
      
      // logistic transformation
      responses[i] = logisticResponse(responses[i]);
      
      /*responses[i] = new Float64Array(32*32)
      for (var j = 0;j < 32;j++) {
        for (var k = 0;k < 32;k++) {
          responses[i][k + (j*(32))] = response[k + (j*(32))]
        }
      }*/
      
      // normalization?
      inplaceNormalizeFilterMatrix(responses[i]);
    }
    
    return responses;
  }
  
  var normalizePatches = function(patch) {
    var patch_width = filter_width-1+search_width;
    var max = 0;
    var min = 1000;
    var value;
    for (var j = 0;j < patch_width;j++) {
      for (var k = 0;k < patch_width;k++) {
        value = patch[k + (patch_width*j)]
        if (value < min) {
          min = value;
        }
        if (value > max) {
          max = value;
        }
      }
    }
    var scale = max-min;
    for (var j = 0;j < patch_width;j++) {
      for (var k = 0;k < patch_width;k++) {
        patch[k + (patch_width*j)] = (patch[k + (patch_width*j)]-min)/scale;
      }
    }
    return patch;
  }
  
  var logisticResponse = function(response) {
    // create probability by doing logistic transformation
    for (var j = 0;j < search_width;j++) {
      for (var k = 0;k < search_width;k++) {
        response[j + (k*search_width)] = 1.0/(1.0 + Math.exp(- (response[j + (k*search_width)] - 1.0 )));
      }
    }
    return response
  }
  
  var upperPowerOfTwo = function(x) {
    x--;
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    x++;
    return x;
  }
  
  var inplaceNormalizeFilterMatrix = function(response) {
    // normalize responses to lie within [0,1]
    var msize = response.length;
    var max = 0;
    var min = 1;
    
    for (var i = 0;i < msize;i++) {
      max = response[i] > max ? response[i] : max;
      min = response[i] < min ? response[i] : min;
    }
    var dist = max-min;
    
    if (dist == 0) {
      // console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.")
    } else {
      for (var i = 0;i < msize;i++) {
        response[i] = (response[i]-min)/dist;
      }
    }
  }

  /**
   * Fast Fourier Transform
   * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)
   * 
   * @author ryo / github.com/wellflat
   * Based on https://github.com/wellflat/javascript-labs with some tiny optimizations
   */

  function FFT() {
    
    var _n = 0,          // order
        _bitrev = null,  // bit reversal table
        _cstb = null;    // sin/cos table
    var _tre, _tim;
    
    this.init = function (n) {
      if(n !== 0 && (n & (n - 1)) === 0) {
        _n = n;
        _setVariables();
        _makeBitReversal();
        _makeCosSinTable();
      } else {
        throw new Error("init: radix-2 required");
      }
    }
      
    // 1D-FFT
    this.fft1d = function (re, im) {
      fft(re, im, 1);
    }
      
    // 1D-IFFT
    this.ifft1d = function (re, im) {
      var n = 1/_n;
      fft(re, im, -1);
      for(var i=0; i<_n; i++) {
        re[i] *= n;
        im[i] *= n;
      }
    }
    
    // 2D-FFT
    this.fft2d = function (re, im) {
      var i = 0;
      // x-axis
      for(var y=0; y<_n; y++) {
        i = y*_n;
        for(var x1=0; x1<_n; x1++) {
          _tre[x1] = re[x1 + i];
          _tim[x1] = im[x1 + i];
        }
        this.fft1d(_tre, _tim);
        for(var x2=0; x2<_n; x2++) {
          re[x2 + i] = _tre[x2];
          im[x2 + i] = _tim[x2];
        }
      }
      
      // y-axis
      for(var x=0; x<_n; x++) {
        for(var y1=0; y1<_n; y1++) {
          i = x + y1*_n;
          _tre[y1] = re[i];
          _tim[y1] = im[i];
        }
        this.fft1d(_tre, _tim);
        for(var y2=0; y2<_n; y2++) {
          i = x + y2*_n;
          re[i] = _tre[y2];
          im[i] = _tim[y2];
        }
      }
    }
    
    // 2D-IFFT
    this.ifft2d = function (re, im) {
      var i = 0;
      // x-axis
      for(var y=0; y<_n; y++) {
        i = y*_n;
        for(var x1=0; x1<_n; x1++) {
          _tre[x1] = re[x1 + i];
          _tim[x1] = im[x1 + i];
        }
        this.ifft1d(_tre, _tim);
        for(var x2=0; x2<_n; x2++) {
          re[x2 + i] = _tre[x2];
          im[x2 + i] = _tim[x2];
        }
      }
      // y-axis
      for(var x=0; x<_n; x++) {
        for(var y1=0; y1<_n; y1++) {
          i = x + y1*_n;
          _tre[y1] = re[i];
          _tim[y1] = im[i];
        }
        this.ifft1d(_tre, _tim);
        for(var y2=0; y2<_n; y2++) {
          i = x + y2*_n;
          re[i] = _tre[y2];
          im[i] = _tim[y2];
        }
      }
    }
    
    // 2D-IFFT, real-valued
    // only outputs the real valued part
    this.real_ifft2d = function (re, im) {
      var i2;
      var i = 0;
      // x-axis
      for(var y=0; y<_n; y++) {
        i = y*_n;
        for(var x1=0; x1<_n; x1++) {
          _tre[x1] = re[x1 + i];
          _tim[x1] = im[x1 + i];
        }
        this.ifft1d(_tre, _tim);
        for(var x2=0; x2<_n; x2++) {
          re[x2 + i] = _tre[x2];
          im[x2 + i] = _tim[x2];
        }
      }
      // y-axis
      var halfn = _n/2;
      var rowIdx = 0;
      for(var x=0; x<_n; x+=2) {
        //untangle
        i = x;
        i2 = x+1;
        _tre[0] = re[0 + i];
        _tim[0] = re[0 + i2];
        _tre[_n/2] = re[(halfn*_n) + i];
        _tim[_n/2] = re[(halfn*_n) + i2];
        for (var x2=1;x2<halfn;x2++) {
          rowIdx = x2*_n
          _tre[x2] = re[rowIdx+i] - im[rowIdx + i2];
          _tre[_n - x2] = re[rowIdx+i] + im[rowIdx + i2];
          _tim[x2] = im[rowIdx+i] + re[rowIdx+i2];
          _tim[_n - x2] = re[rowIdx+i2] - im[rowIdx+i];
        }
        this.ifft1d(_tre, _tim);
        for(var y2=0; y2<_n; y2++) {
          i = x + y2*_n;
          i2 = (x + 1) + y2*_n;
          re[i] = _tre[y2];
          re[i2] = _tim[y2];
        }
      }
    }
    
    // 2D-FFT, real-valued only
    // ignores the imaginary input
    //   see:
    // http://www.inf.fu-berlin.de/lehre/SS12/SP-Par/download/fft1.pdf
    // http://cnx.org/content/m12021/latest/
    // http://images.apple.com/acg/pdf/g4fft.pdf
    // http://www.ti.com/lit/an/spra291/spra291.pdf
    this.real_fft2d = function (re, im) {
      var i = 0, i2 = 0;
      var fftlen = (_n*_n)-1;
      // x-axis
      for(var y=0; y<_n; y += 2) {
        i = y*_n;
        i2 = (y+1)*_n;
        // tangle
        for(var x1=0; x1<_n; x1++) {
          _tre[x1] = re[x1 + i];
          _tim[x1] = re[x1 + i2];
        }
        this.fft1d(_tre, _tim);
        // untangle
        re[0 + i] = _tre[0];
        re[0 + i2] = _tim[0];
        im[0 + i] = 0;
        im[0 + i2] = 0;
        re[_n/2 + i] = _tre[_n/2];
        re[_n/2 + i2] = _tim[_n/2];
        im[_n/2 + i] = 0;
        im[_n/2 + i2] = 0;
        for(var x2=1;x2<(_n/2);x2++) {
          re[x2 + i] = 0.5 * (_tre[x2] + _tre[_n - x2]);
          im[x2 + i] = 0.5 * (_tim[x2] - _tim[_n - x2]);
          re[x2 + i2] = 0.5 * (_tim[x2] + _tim[_n - x2]);
          im[x2 + i2] = -0.5 * (_tre[x2] - _tre[_n - x2]);
          re[(_n-x2) + i] = re[x2 + i];
          im[(_n-x2) + i] = -im[x2 + i];
          re[(_n-x2) + i2] = re[x2 + i2];
          im[(_n-x2) + i2] = -im[x2 + i2];
        }
      }
      // y-axis
      for(var x=0; x<_n; x++) {
        for(var y1=0; y1<_n; y1++) {
          i = x + y1*_n;
          _tre[y1] = re[i];
          _tim[y1] = im[i];
        }
        this.fft1d(_tre, _tim);
        for(var y2=0; y2<_n; y2++) {
          i = x + y2*_n;
          re[i] = _tre[y2];
          im[i] = _tim[y2];
        }
      }
    }
    
    // core operation of FFT
    function fft(re, im, inv) {
      var d, h, ik, m, tmp, wr, wi, xr, xi,
          n4 = _n >> 2;
      // bit reversal
      for(var l=0; l<_n; l++) {
        m = _bitrev[l];
        if(l < m) {
          tmp = re[l];
          re[l] = re[m];
          re[m] = tmp;
          tmp = im[l];
          im[l] = im[m];
          im[m] = tmp;
        }
      }
      // butterfly operation
      //butfly(re,im,inv,n4);
      for(var k=1; k<_n; k<<=1) {
        h = 0;
        d = _n/(k << 1);
        for(var j=0; j<k; j++) {
          wr = _cstb[h + n4];
          wi = inv*_cstb[h];
          for(var i=j; i<_n; i+=(k<<1)) {
            ik = i + k;
            xr = wr*re[ik] + wi*im[ik];
            xi = wr*im[ik] - wi*re[ik];
            re[ik] = re[i] - xr;
            re[i] += xr;
            im[ik] = im[i] - xi;
            im[i] += xi;
          }
          h += d;
        }
      }
    }
    
    function butfly(re, im, inv, n4) {
      var h,d,wr,wi,ik,xr,xi;
      for(var k=1; k<_n; k<<=1) {
        h = 0;
        d = _n/(k << 1);
        for(var j=0; j<k; j++) {
          wr = _cstb[h + n4];
          wi = inv*_cstb[h];
          for(var i=j; i<_n; i+=(k<<1)) {
            ik = i + k;
            xr = wr*re[ik] + wi*im[ik];
            xi = wr*im[ik] - wi*re[ik];
            re[ik] = re[i] - xr;
            re[i] += xr;
            im[ik] = im[i] - xi;
            im[i] += xi;
          }
          h += d;
        }
      }
    }
    
    // set variables
    function _setVariables() {
      if(typeof Uint8Array !== 'undefined') {
        _bitrev = new Uint8Array(_n);
      } else {
        _bitrev = new Array(_n);
      }
      if(typeof Float64Array !== 'undefined') {
        _cstb = new Float64Array(_n*1.25);
        _tre = new Float64Array(_n);
        _tim = new Float64Array(_n);
      } else {
        _cstb = new Array(_n*1.25);
        _tre = new Array(_n);
        _tim = new Array(_n);
      }
    }
    
    // make bit reversal table
    function _makeBitReversal() {
      var i = 0,
          j = 0,
          k = 0;
      _bitrev[0] = 0;
      while(++i < _n) {
        k = _n >> 1;
        while(k <= j) {
          j -= k;
          k >>= 1;
        }
        j += k;
        _bitrev[i] = j;
      }
    }
    
    // make trigonometric function table
    function _makeCosSinTable() {
      var n2 = _n >> 1,
          n4 = _n >> 2,
          n8 = _n >> 3,
          n2p4 = n2 + n4,
          t = Math.sin(Math.PI/_n),
          dc = 2*t*t,
          ds = Math.sqrt(dc*(2 - dc)),
          c = _cstb[n4] = 1,
          s = _cstb[0] = 0;
      t = 2*dc;
      for(var i=1; i<n8; i++) {
        c -= dc;
        dc += t*c;
        s += ds;
        ds -= t*s;
        _cstb[i] = s;
        _cstb[n4 - i] = c;
      }
      if(n8 !== 0) {
        _cstb[n8] = Math.sqrt(0.5);
      }
      for(var j=0; j<n4; j++) {
        _cstb[n2 - j]  = _cstb[j];
      }
      for(var k=0; k<n2p4; k++) {
        _cstb[k + n2] = -_cstb[k];
      }
    }
  }
}

// requires mosse.js

var mosseFilterResponses = function() {
  
  var filters = [];
  var responses = [];
  var num_Patches = 0;
  
  this.init = function(filter_input, numPatches, filterWidth, filterHeight) {
    // load filters, make fft ready
    
    for (var i = 0;i < numPatches;i++) {
      var temp = {};
      temp.width = filterWidth;
      temp.height = filterHeight;
      var filterLength = filterWidth*filterHeight
      var flar_fi0 = new Float64Array(filterLength);
      var flar_fi1 = new Float64Array(filterLength);
      for (var j = 0;j < filterLength;j++) {
        flar_fi0[j] = filter_input[i][0][j];
        flar_fi1[j] = filter_input[i][1][j];
      }
      temp.real = flar_fi0;
      temp.imag = flar_fi1;
      filters[i] = new mosseFilter();
      filters[i].load(temp);
    }
    
    num_Patches = numPatches;
  }
  
  this.getResponses = function(patches) {
    for (var i = 0;i < num_Patches;i++) {
      responses[i] = filters[i].getResponse(patches[i]);
      //responses[i] = logisticResponse(responses[i]);
      responses[i] = normalizeFilterMatrix(responses[i]);
    }
    
    return responses;
  }
  
  var logisticResponse = function(response) {
    // create probability by doing logistic transformation
    var filter_size = response.length;
    for (var j = 0;j < filter_size;j++) {
      response[j] = 1.0/(1.0 + Math.exp(- (response[j]-1.0) ));
    }
    return response;
  }
  
  var normalizeFilterMatrix = function(response) {
    // normalize responses to lie within [0,1]
    var msize = response.length;
    var max = 0;
    var min = 1;
    
    for (var i = 0;i < msize;i++) {
      max = response[i] > max ? response[i] : max;
      min = response[i] < min ? response[i] : min;
    }
    var dist = max-min;
    
    if (dist == 0) {
      // console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.")
      response = response.map(function() {return 1});
    } else {
      for (var i = 0;i < msize;i++) {
        response[i] = (response[i]-min)/dist;
      }
    }
    
    return response
  }
}

var left_eye_filter = {"real": [1.5419219943717721, 0.40010880110578706, -0.79043641265342957, -1.2685464969238938, 0.39878117336167285, -1.0673489992245377, -0.079880838229404019, -0.45374680224191505, -0.043474097938900787, -0.31125662385352687, 0.17092430376098702, -0.29613086164846153, 0.5616469648110296, -1.559786848789493, 0.64513037997492662, -1.2899747976234162, 1.1761667998175334, -1.2899747976233551, 0.64513037997490474, -1.5597868487894897, 0.56164696481102505, -0.29613086164845964, 0.17092430376099094, -0.31125662385352959, -0.043474097938900787, -0.45374680224191177, -0.079880838229404658, -1.0673489992245357, 0.39878117336167307, -1.2685464969238942, -0.79043641265343012, 0.40010880110578717, -1.3820969331049027, 0.069560471269205768, -1.9786339579213206, -1.9807415717551982, -0.78667274410450883, -1.2217002325587256, -0.19150029104902774, -0.35131617290773243, -0.17646388464205803, -0.16672095020503441, -0.092298612924566523, -0.028899376452253527, -0.1314555696102146, -0.32892265898101813, -0.40987148655061206, 0.11741827111366547, -0.67254330182605138, -0.46007833291519956, -0.67215259521101001, -0.44871907432473013, -0.034749316729184583, 0.0055639281302433969, -0.17675902360981591, -0.26196208085032191, -0.36301254306387037, -0.33546767337818123, -0.6458889740799838, -1.1981932989987978, 0.12372650763830917, -1.4996172161865935, -2.4084298023013888, -2.0505291279591722, -1.7249706159518585, -2.277646289702639, -3.1259631743419591, -2.9656385065342015, -2.8480835086962011, -1.4260964500310189, -0.61792590829173544, -0.2611655301498782, -0.38519889843539723, -0.17511899827006483, -0.32808050503227176, 0.0076800871037463036, -0.18710828510427668, 0.1976534820339281, -0.55444453100465052, 0.14583567590328381, -0.69844971117515287, -0.90188577233526623, -0.53500016384583371, -0.044420751861669799, 0.014727914354086128, -0.28084584584371913, -0.29890408748685848, -0.39431380149336548, -0.39569215798819307, -0.74351999988258299, -0.82502198370631752, -1.851491897104155, -0.74302378668934244, 0.21156442062863762, -3.3061472495599986, -1.7990472945779568, -2.2193764251732282, -2.3438802466919251, -3.3615971067123311, -3.5383249085863708, -2.2639673745086588, -2.0271757806780748, -0.75242583405872232, -0.30143411016839378, -0.3625272253546275, -0.25489431004647689, -0.18928491561467081, -0.1179891518538482, 0.027920290231533224, -0.035472107498143821, -0.29008721857562259, -0.3604588674139817, -0.39156143807433802, -0.82222257402876564, -0.44979914971695928, -0.098136330355476253, 0.065628582466229365, -0.33607304327303128, -0.32161201323497779, -0.41856090178723965, -0.64028425429629054, -0.7766428172010218, -1.3946448661671447, -2.2603422126144683, -0.38769722219534525, -0.95341593939478653, -1.412952994959813, -2.3602336858020432, -1.2756392437278019, -2.0983496132652038, -2.5682454610054268, -2.8791053946930378, -2.1809972632688095, -0.84281293847776861, -0.75998936793718697, -0.18584599820380068, -0.30105748355308259, -0.16098142942852958, -0.13792125740417191, -0.089790022871128708, -0.12321821342876504, -0.1128661923016878, -0.3924098378001975, -0.5780902167586397, -0.48685989567066695, -0.53565359443296234, -0.051036689850526382, -0.0068547033925117689, -0.18963405157839419, -0.22514761090777807, -0.35555823460888908, -0.46670603976585517, -0.56179541485257889, -0.7495095888115163, -1.4772075422260349, -1.5836466114968029, -2.3846549454186694, -1.4884613952536236, -1.8237453905245253, -1.6712324532934877, -1.5169157844507295, -1.6930052820597281, -2.1023566589276004, -2.2062031109308458, -1.7945281756942255, -0.26457398838912649, 0.22038139379151148, -0.43479836723775234, -0.19830827357221226, -0.18018565146479498, -0.097060879184795737, -0.10088329756370379, -0.063069709957272527, -0.17970932516041177, -0.1943040732581543, -0.37970560392277619, -0.47302301606251812, -0.30366967948052181, -0.064732391018915397, -0.08902516330269715, -0.082000200083027344, -0.22965854401457736, -0.32035624605031326, -0.31836783196552437, -0.40132058236311119, -0.65601747033470859, -0.59040483751417483, -1.8503084663080034, -1.8694842425148914, -1.9326778896298584, -1.6301578422923519, -1.4332006785118301, -1.305707665299106, -1.364200787821644, -1.5357935460809622, -1.6161992336951241, -0.74003518668370516, -0.29423824173210689, 0.025934598230976654, -0.043349004411304674, -0.25408021803022468, -0.066965686484977499, -0.075717498698635255, 0.007057189465364498, -0.042171356658338113, -0.036938315661768008, -0.34221561581756049, -0.20400167508805764, -0.37417116097079772, -0.25039909487805356, -0.070874531394524931, -0.0569972852039487, -0.067238206950403182, -0.17397285212300442, -0.20428337307808273, -0.23651154356493315, -0.33356498933276568, -0.07339749754226077, -0.70367959806681601, -0.82403680021595049, -1.6058616381755235, -1.6192427030685497, -1.5705638815427956, -1.4659201063980019, -0.95504179549951018, -0.97237526162739873, -1.0460191987834688, -0.91465668941265721, -0.60548232361398524, 0.01898438364933451, -0.19419044456729498, -0.039627851124307223, 0.0012357796666701798, -0.078110822445325079, 0.0048626364920250518, -0.040449089662379589, -0.0035054269587873454, -0.13387544724730729, -0.10031131456276647, -0.25968674675684189, -0.20555329767005767, -0.26509289948725284, -0.038788452621647145, -0.076999891872251258, -0.071661433038976499, -0.14182240789719938, -0.1654673053291095, -0.19859450279267193, -0.053382326365810369, -0.2156585383674445, -0.045097357284793499, -0.62449818579949512, -0.92624906744917224, -1.0411254782363617, -1.122035196738675, -1.0607692164246043, -0.57723811773534028, -0.63187735896388075, -0.54813311204421922, -0.55320252101738743, -0.30197299587482401, -0.047213249757838388, 0.082808930467383288, -0.067715134483222431, -0.01022881748368659, 0.042038311258956552, -0.063371767399980669, 0.029161890169972702, -0.091396316586836127, -0.0034600735070754811, -0.12424052925006424, -0.24432996418012101, -0.26521664175359499, -0.22745980283820413, -0.14361316535317664, -0.00075904203100577935, -0.020936168457862139, -0.14205665196423617, -0.19024248288823023, -0.079686122362245204, -0.15016133237735926, 0.049598910651295514, -0.11760486834511712, -0.1837522251545049, -0.38594205494114608, -0.53542516436999843, -0.57340991730807989, -0.52753621424018138, -0.23151163972118355, -0.22295096919949259, -0.33704349161770436, -0.26165852514054583, -0.13898866968588663, 0.034596483191139484, -0.012631210076789067, 0.047371310076345617, -0.038651839330751551, -0.0019970761454430018, 0.063048845258375494, -0.1124891762554399, 0.08556992539656616, -0.21043659051868199, -0.19223333969456, -0.39082994830035861, -0.19294368007162721, -0.41025595439938572, -0.17178084419175166, -0.010933041190555012, -0.089512936152074493, -0.21569610281495066, -0.09144756671688016, -0.19525258909505316, -0.029753598134641936, -0.021307245660079924, 0.029087127940551009, 0.037511290653097842, -0.20600990120705839, -0.26967580750352926, -0.21000923681194664, -0.28209018858285628, -0.11925518789339556, -0.24869348141289982, -0.21025892926356746, -0.15567029136726124, -0.040546729108395907, -0.0050266153100547101, 0.030710887069787196, -0.0061104340245858278, 0.0369376092260571, -0.054862661367900321, 0.013297880203253048, 0.19659447375886394, -0.2499491329142558, -0.062959699002865757, -0.53055029095956008, -0.38784811281629444, -0.53891285075962392, -0.41886712861154285, -0.099230097260325875, -0.16474199810952628, -0.28693665642627014, -0.0095667980850221105, -0.32619954993450928, -0.08627491478166284, -0.073253161755714766, 0.015634174038690329, 0.082440536547531792, 0.025411878261881942, -0.11318909242737961, -0.1270560226842935, -0.21657212936164139, -0.13993873549611191, -0.37510275237622831, -0.26472923111076219, -0.24460131567533192, -0.14127652303494026, -0.050428686591045178, 0.041347840374190772, -0.0061780445153000636, 0.0073990345210250153, -0.014062739037014381, 0.14348925152561878, -0.015321787554403667, 0.0017746672356015968, 0.25165135427361052, -0.626463828190993, -0.48167134330805639, -1.045863293770664, -0.69512591788493194, -0.44532127384388254, -0.28479724025368391, -0.39470955087317983, 0.20227228344720469, -0.53909912073488953, -0.12025629051789474, -0.1899243750597305, -0.048474806721595133, 0.060764771353227762, 0.090648151782516159, 0.091608208912697275, 0.0036582478916540977, -0.22492530005263131, -0.27295314658024766, -0.35559738025257359, -0.62902925014412947, -0.57166411974881004, -0.37258895173129181, -0.22157638610464933, 0.022494427132080854, 0.014769425415166171, 0.003526808789406817, -0.011346909674078769, 0.050921170848348289, 0.090308541799219627, 0.37260817254533324, -0.25909871392159911, -0.42379280974334355, -0.095380647808568128, -1.1906083748893519, -0.78599914414892469, -0.95277914352730275, -0.63659778359422337, -0.98026015008952749, 0.48173198285916102, -0.60092009018055192, -0.10265418316164113, -0.39913639006279306, -0.17310908908773887, -0.0194191171632387, 0.054047965289179878, 0.1388529643463832, 0.15661099050145999, -0.10898263774416243, -0.33291231456737602, -0.59569027865888713, -0.69353081584948972, -1.0999707493347484, -0.74392084753736687, -0.49074781214158159, -0.065190556733852961, 0.012289768389229717, 0.024577513704595676, 0.0040302804696096322, 0.036047756292976456, 0.058236765637246286, 0.13893846256790621, 0.036944676036934632, 0.41686279554239464, -0.85232286388185818, -1.2988315127624981, -0.47352779677305168, -0.81763632541546793, -0.77384457803621831, -1.4256240004519281, 0.52588993532360684, -0.89821724022902683, 0.1591911967653899, -0.55046596772346867, -0.30980016041271019, -0.16709614007114884, -0.046029700131955266, 0.044793268150423983, 0.1689242242845459, 0.14412365934528507, -0.0088250071313367359, -0.36778545124666312, -0.79393844517732104, -1.1610479066529615, -0.76523210008850662, -0.63009858032048405, -0.13947023057344932, -0.017173105577524262, 0.039030007688455846, 0.014491273083805401, 0.039792542943837252, 0.054072846696920814, 0.11729310469925348, 0.053609281522667675, 0.0081549498718087084, -0.30910813452845548, 0.25944224899607843, -1.3584842180322938, -1.5885570490138659, -0.65759582794618221, -1.139869490652734, 0.70928264080594694, -1.9674198903133462, 0.37712664425406606, -0.84336038390578949, -0.47788074719428036, -0.18342000086663721, -0.18811394573901796, -0.055050027645985648, 0.045043056834335606, 0.11486303559854361, 0.22023958716404868, 0.14735402009444676, -0.27894427087197998, -0.73080536953129638, -0.76794305693297227, -0.37355919765840223, 0.12353986794322802, 0.090505348376311842, 0.14069908672094206, 0.087373214380278855, 0.023353946735568523, 0.031400559920396587, 0.079550230446202241, 0.084927161382185437, 0.040777158255349423, -0.16274954314482293, -0.41184413435479567, -0.71871288822574875, 0.55302907456342854, -1.5309493464500674, -2.9026104205694736, 0.42043303599508353, -1.7138106264793671, 0.29513888249127102, -1.2517216433630918, -0.66769942176516839, -0.28576739334390183, -0.24127777006787937, -0.10778095858902549, -0.036092425009198861, 0.021519213385077923, 0.13414694961717147, 0.16917378957839613, 0.17307922682581758, 0.076246758829015673, -0.047904835134272621, -0.27544262702406924, 0.61826249566563185, 0.26987423123693399, 0.2085883517320696, 0.26073426210721973, 0.12070625812911842, 0.062945582093309679, 0.083649573916505432, 0.049688095345785867, 0.019564357607843069, -0.046035817476596949, -0.13409074070830324, -0.49027201814294552, -0.47756457321420159, -0.74403675135427549, -0.3080068432033089, -0.043712438842705037, -4.735594317158907, -0.043712438842706695, -0.30800684320330962, -0.74403675135427572, -0.47756457321420304, -0.49027201814294813, -0.13409074070830412, -0.046035817476598156, 0.019564357607843069, 0.049688095345786006, 0.083649573916506056, 0.062945582093310845, 0.12070625812911921, 0.26073426210722073, 0.20858835173207019, 0.26987423123693399, -0.37355919765836759, -0.27544262702403433, -0.047904835134273127, 0.076246758829012523, 0.17307922682581853, 0.16917378957839499, 0.13414694961716844, 0.02151921338507657, -0.036092425009199861, -0.1077809585890261, -0.24127777006787943, -0.2857673933439015, -0.66769942176516905, -1.2517216433630949, 0.29513888249127429, -1.7138106264793713, 0.42043303599507681, -2.902610420569474, -1.5309493464500692, 0.55302907456342232, -0.71871288822575019, -0.41184413435479833, -0.16274954314482265, 0.04077715825534866, 0.08492716138218645, 0.079550230446203143, 0.031400559920398419, 0.023353946735571576, 0.08737321438028138, 0.14069908672095732, 0.090505348376334033, 0.1235398679432393, -0.76523210008847808, -0.76794305693296139, -0.73080536953128505, -0.27894427087197604, 0.1473540200944477, 0.22023958716404682, 0.11486303559854165, 0.045043056834333829, -0.055050027645986453, -0.18811394573901843, -0.18342000086663854, -0.47788074719428042, -0.84336038390579149, 0.37712664425406617, -1.9674198903133469, 0.70928264080593695, -1.1398694906527307, -0.65759582794619398, -1.588557049013867, -1.3584842180322987, 0.25944224899607732, -0.30910813452845781, 0.0081549498718086911, 0.053609281522667279, 0.11729310469925426, 0.054072846696921202, 0.039792542943838709, 0.014491273083807311, 0.039030007688458185, -0.017173105577517028, -0.13947023057343994, -0.63009858032045107, -1.0999707493347308, -1.1610479066529467, -0.79393844517731305, -0.3677854512466584, -0.0088250071313340107, 0.14412365934528559, 0.16892422428454401, 0.044793268150420118, -0.046029700131956147, -0.16709614007115095, -0.30980016041271097, -0.55046596772347045, 0.15919119676539073, -0.8982172402290286, 0.52588993532360329, -1.4256240004519327, -0.77384457803621687, -0.8176363254154656, -0.47352779677305679, -1.2988315127625027, -0.85232286388185829, 0.41686279554239525, 0.036944676036935756, 0.13893846256790574, 0.058236765637246675, 0.036047756292977066, 0.0040302804696111128, 0.02457751370459911, 0.012289768389232913, -0.065190556733844662, -0.49074781214156804, -0.74392084753735632, -0.62902925014412903, -0.69353081584948562, -0.59569027865888302, -0.33291231456737491, -0.10898263774416028, 0.15661099050145985, 0.13885296434638142, 0.054047965289177706, -0.019419117163239467, -0.17310908908773912, -0.39913639006279433, -0.10265418316163986, -0.60092009018055315, 0.48173198285915786, -0.98026015008952594, -0.63659778359422126, -0.9527791435273002, -0.78599914414892458, -1.190608374889349, -0.095380647808570002, -0.42379280974334488, -0.25909871392159683, 0.37260817254533357, 0.09030854179921953, 0.050921170848348372, -0.011346909674079158, 0.0035268087894081549, 0.014769425415168456, 0.022494427132082863, -0.22157638610464575, -0.37258895173129003, -0.5716641197488066, -0.37510275237622537, -0.35559738025257059, -0.27295314658024672, -0.22492530005262792, 0.0036582478916564426, 0.091608208912696387, 0.090648151782514966, 0.060764771353224882, -0.048474806721595647, -0.18992437505973167, -0.12025629051789351, -0.53909912073488875, 0.20227228344720258, -0.39470955087317799, -0.28479724025368247, -0.44532127384387832, -0.69512591788493272, -1.04586329377066, -0.48167134330805861, -0.62646382819099156, 0.25165135427361029, 0.0017746672356018336, -0.0153217875544032, 0.14348925152561842, -0.01406273903701487, 0.0073990345210243587, -0.0061780445152985596, 0.04134784037419488, -0.050428686591041855, -0.1412765230349349, -0.2446013156753272, -0.26472923111076024, -0.11925518789339257, -0.13993873549610955, -0.21657212936163839, -0.1270560226842922, -0.11318909242737903, 0.025411878261882927, 0.082440536547530169, 0.015634174038688685, -0.073253161755715501, -0.086274914781661965, -0.326199549934509, -0.0095667980850238903, -0.28693665642627003, -0.16474199810952764, -0.099230097260324029, -0.41886712861154318, -0.53891285075962314, -0.38784811281629461, -0.53055029095956219, -0.062959699002866631, -0.24994913291425488, 0.1965944737588636, 0.013297880203252755, -0.054862661367901897, 0.036937609226056677, -0.0061104340245862225, 0.030710887069788338, -0.005026615310052167, -0.040546729108393256, -0.15567029136725916, -0.21025892926356554, -0.24869348141289621, -0.23151163972117689, -0.28209018858284918, -0.21000923681193823, -0.26967580750352416, -0.20600990120705304, 0.037511290653099091, 0.029087127940549885, -0.02130724566008323, -0.029753598134642099, -0.19525258909505444, -0.091447566716882075, -0.21569610281495041, -0.089512936152075853, -0.010933041190555782, -0.17178084419175305, -0.41025595439938806, -0.19294368007162768, -0.39082994830036216, -0.19223333969456258, -0.21043659051868269, 0.085569925396567076, -0.11248917625543933, 0.063048845258374231, -0.0019970761454456269, -0.038651839330752197, 0.047371310076345617, -0.012631210076786959, 0.034596483191142599, -0.13898866968588444, -0.26165852514053983, -0.33704349161769737, -0.22295096919948695, -0.57723811773534028, -0.52753621424018138, -0.57340991730807944, -0.53542516436999865, -0.38594205494114614, -0.1837522251545064, -0.11760486834511884, 0.049598910651293758, -0.15016133237735926, -0.07968612236224891, -0.1902424828882312, -0.14205665196423831, -0.020936168457862579, -0.00075904203100844866, -0.14361316535317845, -0.2274598028382093, -0.26521664175359499, -0.24432996418012529, -0.12424052925006639, -0.0034600735070760831, -0.09139631658683596, 0.029161890169972428, -0.063371767399980516, 0.042038311258955005, -0.01022881748368659, -0.067715134483221959, 0.082808930467383746, -0.047213249757837236, -0.3019729958748239, -0.55320252101738743, -0.548133112044219, -0.63187735896388053, -0.95504179549950285, -1.060769216424599, -1.1220351967386673, -1.0411254782363524, -0.92624906744916458, -0.62449818579949246, -0.045097357284792555, -0.21565853836744897, -0.053382326365811708, -0.19859450279267432, -0.16546730532911214, -0.14182240789720132, -0.07166143303897729, -0.076999891872253062, -0.038788452621649434, -0.2650928994872585, -0.20555329767005678, -0.25968674675684078, -0.10031131456276626, -0.13387544724730568, -0.0035054269587865765, -0.040449089662379971, 0.0048626364920241281, -0.078110822445325467, 0.0012357796666695618, -0.039627851124306598, -0.19419044456729473, 0.018984383649339364, -0.60548232361397991, -0.91465668941264988, -1.0460191987834631, -0.97237526162739263, -1.3057076652991049, -1.4659201063979992, -1.5705638815427927, -1.6192427030685486, -1.6058616381755215, -0.82403680021595249, -0.70367959806681868, -0.073397497542269388, -0.33356498933276529, -0.23651154356493967, -0.2042833730780847, -0.17397285212300875, -0.067238206950403417, -0.056997285203952995, -0.070874531394526111, -0.25039909487805306, -0.37417116097079761, -0.20400167508805389, -0.34221561581755761, -0.036938315661763657, -0.042171356658337315, 0.0070571894653653896, -0.075717498698634964, -0.066965686484977194, -0.25408021803022474, -0.043349004411301621, 0.025934598230977574, -0.29423824173210122, -0.74003518668370272, -1.6161992336951192, -1.5357935460809593, -1.3642007878216427, -1.5169157844507262, -1.4332006785118279, -1.6301578422923491, -1.932677889629856, -1.8694842425148879, -1.8503084663080056, -0.59040483751417916, -0.65601747033471336, -0.40132058236311047, -0.31836783196552787, -0.32035624605031593, -0.22965854401457814, -0.082000200083028219, -0.089025163302698024, -0.064732391018913552, -0.30366967948051288, -0.4730230160625184, -0.37970560392275871, -0.19430407325814622, -0.1797093251603995, -0.063069709957271444, -0.10088329756370083, -0.097060879184794432, -0.18018565146479387, -0.19830827357221226, -0.43479836723774673, 0.22038139379151372, -0.26457398838911428, -1.79452817569422, -2.2062031109308391, -2.102356658927595, -1.6930052820597257, -1.2756392437278008, -1.6712324532934884, -1.8237453905245253, -1.4884613952536252, -2.384654945418673, -1.5836466114968115, -1.4772075422260404, -0.74950958881152596, -0.561795414852579, -0.46670603976586306, -0.35555823460889052, -0.22514761090777982, -0.18963405157839525, -0.0068547033925124142, -0.051036689850529192, -0.53565359443295624, -0.48685989567066656, -0.57809021675862349, -0.39240983780018618, -0.11286619230167973, -0.12321821342876334, -0.089790022871127112, -0.13792125740417074, -0.16098142942852883, -0.30105748355308298, -0.18584599820379807, -0.75998936793718352, -0.8428129384777584, -2.1809972632688073, -2.8791053946930352, -2.5682454610054237, -2.0983496132652038, -2.219376425173226, -2.3602336858020396, -1.4129529949598048, -0.95341593939478875, -0.38769722219534936, -2.2603422126144772, -1.394644866167148, -0.77664281720103345, -0.64028425429629032, -0.41856090178724664, -0.3216120132349809, -0.33607304327303461, 0.065628582466230781, -0.098136330355478765, -0.44979914971695495, -0.82222257402878096, -0.39156143807433802, -0.36045886741397631, -0.29008721857562392, -0.035472107498135542, 0.027920290231535812, -0.117989151853845, -0.1892849156146684, -0.25489431004647656, -0.3625272253546275, -0.30143411016838906, -0.75242583405872021, -2.0271757806780628, -2.2639673745086539, -3.5383249085863659, -3.361597106712324, -2.3438802466919229, -1.7249706159518579, -1.7990472945779559, -3.3061472495599995, 0.21156442062862166, -0.74302378668934399, -1.8514918971041745, -0.82502198370632651, -0.74351999988260331, -0.39569215798819279, -0.3943138014933833, -0.29890408748686254, -0.28084584584372846, 0.01472791435408881, -0.04442075186168376, -0.53500016384583715, -0.90188577233528688, -0.69844971117515353, 0.14583567590324595, -0.5544445310046473, 0.1976534820339324, -0.18710828510427244, 0.0076800871037496377, -0.32808050503226982, -0.17511899827005836, -0.38519889843539723, -0.26116553014987143, -0.61792590829173255, -1.4260964500310052, -2.8480835086962002, -2.9656385065341997, -3.1259631743419583, -2.2776462897026373, -1.3820969331049018, -2.0505291279591713, -2.4084298023013879, -1.4996172161865962, 0.12372650763830863, -1.1981932989988076, -0.64588897407998824, -0.33546767337818667, -0.36301254306387043, -0.26196208085033179, -0.17675902360982099, 0.0055639281302357606, -0.034749316729180774, -0.44871907432473696, -0.67215259521100923, -0.46007833291523831, -0.67254330182605182, 0.11741827111366224, -0.409871486550618, -0.32892265898101625, -0.13145556961021479, -0.028899376452251727, -0.092298612924564649, -0.16672095020503341, -0.17646388464205828, -0.35131617290772521, -0.19150029104902661, -1.2217002325587201, -0.7866727441045076, -1.9807415717551959, -1.978633957921319, 0.069560471269209931], "bottom": {"real": [4103.3252596935745, 31959.928439656338, 10854.934870050551, 5174.7646941682715, 2670.3793024702013, 1512.8812431609856, 751.72119813508266, 487.34157279751093, 286.27976884850017, 202.21445228809756, 139.363320073941, 96.326676625874271, 67.416513392704019, 55.036039361563731, 42.617455049491909, 37.327841235406673, 35.198800209060273, 37.327841235406588, 42.617455049491802, 55.036039361563766, 67.416513392704019, 96.326676625874285, 139.36332007394108, 202.21445228809804, 286.27976884850017, 487.34157279751093, 751.72119813508289, 1512.8812431609856, 2670.3793024702018, 5174.7646941682751, 10854.934870050551, 31959.928439656363, 12454.694619943468, 7821.5833902765553, 5473.1790170642225, 2925.2286142376206, 1403.2127508507554, 917.05530556073552, 556.73350878905819, 335.58154911349368, 222.7562369115075, 161.71079893305554, 119.4497628246793, 75.609007514321249, 55.496087080936569, 43.998829489125107, 34.725029965122339, 29.983374804996487, 29.187336608781969, 30.714909872552553, 33.135728528562289, 38.780040560556557, 50.11926248444739, 62.426609296740132, 93.916765363567279, 123.96413175241418, 177.16967383039952, 250.50030243800805, 399.94920918463373, 596.1485322845399, 914.24633406931139, 1871.6210271277439, 4518.4223121248042, 13565.815861293135, 16084.742683461694, 10028.519769850123, 2736.2851033168113, 1377.4551350842332, 614.08174831750455, 382.39730464420114, 237.0105878631189, 156.24359018004319, 129.95938769710136, 95.53783206710068, 72.004092864891931, 47.804301653843083, 38.41781199466849, 32.452048622414502, 26.753427300507923, 23.772936248165699, 23.138404805980134, 23.598476471031617, 24.755859033283485, 28.713323989162731, 33.395537201677122, 40.850586549891439, 58.649881806718739, 74.872968711973769, 93.465129226367807, 123.19419955144703, 174.75706127058839, 262.71291650117263, 321.82068054258934, 657.05253635266399, 2163.5932265202309, 10212.960963472207, 3792.0213246064613, 2759.3366542985627, 1627.1011647050395, 788.44977202016776, 362.8509317865861, 253.90720770691448, 163.04342130809295, 117.95146004773997, 90.766106703902594, 66.207745096840526, 48.204553381452804, 35.429206551568903, 28.049881805648454, 23.25027473117818, 20.778936642061399, 19.004228801577, 17.585642163629327, 17.698181326434501, 18.806836162280465, 20.329571180523736, 23.456998427374465, 27.472702254518477, 37.193120035742723, 49.117252584083957, 59.574829012615233, 73.59994664128709, 112.97176733843995, 181.91972084309376, 284.0343016488693, 486.29648203694052, 857.05287855361007, 2037.977143592303, 2057.7285052573056, 2152.5952706253152, 1395.1090523951752, 736.25297680000074, 343.98700964912916, 189.68478304615005, 127.37774106216496, 91.12789293157843, 73.667255133763959, 55.964360327653644, 39.482567042532949, 28.14219415335706, 21.278934963706885, 18.193385040510105, 16.473354788100497, 15.086583853495943, 14.403945056404867, 14.533202056236952, 15.306988390608382, 16.092687824041843, 18.097466979870337, 20.289280537832838, 26.201109009342694, 34.023571220637564, 41.620492531599325, 50.685682074964014, 82.560701981631325, 127.19888958323958, 237.89761616945128, 410.06312322518994, 1062.2303232610248, 1612.0404058137353, 2295.1409914972487, 1787.3905923922546, 1192.2295048012345, 614.24882525880628, 260.82616895243024, 126.23242010647614, 84.151076288810984, 67.709414992782712, 60.122571559472298, 42.830591238304876, 28.733103940874788, 20.365121706656215, 16.211112474155353, 14.072758594539286, 13.483685068827034, 12.859628868618824, 11.868475605254234, 11.903201306554562, 12.816996745648828, 13.065794209061782, 14.312459824747068, 16.296926608708432, 20.657711991677495, 27.653390070235432, 33.593110413967857, 40.672720076575544, 55.856624618502167, 103.16047843117397, 179.23484372919035, 453.7513605151255, 902.26285048256875, 1683.7179352249004, 1784.083505146898, 1577.4265763170067, 936.66309122894188, 441.20892337587179, 176.43359667751182, 98.093971741535682, 65.995944695036641, 53.240295707495449, 45.85166507919449, 32.407485359783081, 22.496202298890402, 16.965613714417799, 13.731573445856062, 12.28236966845588, 11.747735381447885, 11.213125876643861, 10.807806034266576, 10.840341477375139, 11.066245600125107, 11.119452781179984, 12.424913044930788, 14.610027556462221, 16.887227742677396, 22.29462391228396, 27.978157381323118, 31.991250392971789, 44.052658881876532, 76.109568327798371, 159.13944268405785, 318.39207128278571, 686.00323178071869, 1336.6568589814267, 1043.0649603599104, 984.78746182807288, 618.0395600950327, 289.32426118556657, 132.98214831862998, 71.520048430881175, 52.57629039600819, 41.525598741467476, 33.633912722813989, 27.031255662449681, 19.489513580793098, 14.812681614273632, 12.21137274400836, 10.893625186679536, 10.482989068673637, 10.105487112246305, 9.7116899243817354, 9.9488069804828818, 10.161347795217756, 10.513274350469635, 11.294150924355744, 12.914730156139361, 14.478861048855546, 19.021661277112585, 23.907610167423496, 27.23573455134931, 38.742976413983023, 62.869223125902629, 111.92503010834605, 213.21062569137553, 433.61330953226366, 726.70269845820769, 562.21861410525219, 539.290746631297, 362.9446461846826, 211.46669660189423, 107.79772661917396, 60.676668375567573, 41.743276533116536, 34.42369696468284, 31.26708433258414, 25.313030406949355, 18.452791878453507, 13.956644256748325, 11.043046695375654, 10.111101652499672, 9.4550360444473061, 9.2429593469396529, 8.9521911222399257, 9.2321124164010211, 9.1908041669169815, 9.5662827353227868, 10.506864865879585, 11.825879962774797, 13.52813582962821, 15.999059082232355, 19.794027285196304, 22.478845287715099, 32.163272384867753, 47.951984523863096, 81.309242866655126, 150.93744536633105, 263.84630525991662, 439.27951033199258, 309.78719189559973, 306.63257299287005, 244.19689848939953, 151.98869039704036, 91.330482004276163, 57.352753322013349, 38.709160706067429, 33.087086449001383, 29.826655436967027, 23.987725148031473, 16.89184234468231, 13.041947079601194, 10.535809562752126, 9.5359471621683909, 8.9374483496855426, 8.5672643122912326, 8.4572735895659434, 8.4602804400971099, 8.5543457526330293, 9.3823763336699937, 10.377230417708629, 11.799673812944503, 12.361176855966248, 14.786798351390814, 16.739331260686697, 20.590148031359199, 25.753571174908508, 38.382893067866803, 63.23013835373618, 105.62437218489313, 175.68359833526657, 256.05708017959813, 224.80770864957879, 228.96753655549054, 172.54966320095522, 116.26546821946491, 80.46990226978717, 53.844334876610212, 37.483534347728245, 31.075867215997253, 26.284110672635684, 20.645029038002825, 15.025930043703783, 11.738276392873866, 10.201438772469425, 8.8203445227279982, 8.4945509856995365, 8.1968728409344909, 8.1790777304419588, 7.908377156922052, 8.6785477295074038, 9.6473715156890378, 10.339435934253908, 10.728035799158873, 11.983620383388951, 13.687783504221503, 16.433795900162693, 18.309125668572698, 22.485075799802843, 31.764684376383052, 49.270779583367755, 77.729851956279916, 123.50059845139852, 179.77043479461938, 159.57955623939222, 154.53329869380329, 127.96891349444883, 91.96783661678981, 66.921744646417011, 48.818287955893446, 36.591061653526779, 27.834277069623926, 23.041902152181589, 18.358713894245302, 13.567338391039883, 11.281789781943191, 9.6038295455647198, 8.7333277563772516, 8.338123667351045, 7.8992088061869676, 7.7104322426775909, 7.9983869985641034, 8.5436438490902269, 9.4432158844800043, 9.7870344410918424, 10.423788563863184, 11.253535869282553, 13.327727562718719, 15.178485067808285, 17.337135682195893, 21.668177060872456, 29.324826866357235, 41.492753218636352, 60.042185621507166, 90.318134916215342, 130.8805255687621, 104.24612656823803, 108.8028525877362, 89.555745560157249, 69.785669575239666, 56.746590174428, 44.171218069814536, 32.39838941697333, 25.182252759236459, 21.610810960419155, 16.972539478480535, 13.238333358456819, 10.614964653675054, 9.3806927946307859, 8.7492814832421075, 8.135298996501481, 7.634398163782139, 7.4852869889479292, 7.8316993609624435, 8.3853957415274643, 9.2315742305614634, 9.8389441629514209, 10.386606043801919, 11.354519695989614, 13.10793814373473, 15.240615596988986, 17.58979203150065, 21.461767190818147, 26.661531554562984, 36.123337028978582, 50.320731869274383, 69.065609719997795, 87.442260857354199, 76.677643276575949, 72.689147636714068, 65.50785565022079, 58.297658406357961, 49.558598741148941, 39.192968104211104, 29.954333787314212, 23.9458863540046, 19.99476230299754, 16.735792774046942, 12.901585018586687, 10.289994503175569, 9.3977765822679924, 8.6704196287803228, 7.8828328381527575, 7.5341478839019471, 7.4312929200041102, 7.7985159766257679, 8.1869060912414078, 9.142118635191288, 9.830770779287306, 10.340589147553608, 11.281171263863113, 12.984935438318947, 15.107976469419242, 18.19770629294057, 20.668346478928893, 25.761496132514932, 32.251424266134499, 39.95295492008993, 51.369438078625848, 65.569299562662465, 55.468849468729523, 55.86542097352833, 55.101138782973663, 50.531848368674723, 43.701470536966781, 35.866381440857431, 28.439396618258566, 22.42863349391925, 18.945030358082761, 15.596977301337661, 12.206893729284205, 10.050508612628137, 9.5473939482322869, 8.6463276280830179, 7.910774588392556, 7.2755514089661562, 7.5482842032534565, 7.5443879419641391, 7.9636187803325598, 8.9922015447577355, 9.6351997849989068, 10.0402383165895, 11.706284711344862, 13.336194440398188, 15.639893484781382, 17.791763978880017, 20.83131115781941, 25.6818621728188, 31.387128642704546, 37.143166049555219, 44.038766386780296, 52.904506937405849, 48.059389050535145, 50.072432061388255, 49.115010315515249, 44.160423468831148, 38.440953181308423, 32.35840674752788, 26.251111011761232, 21.081922570464979, 17.515101530242855, 14.10261621013594, 11.438986216849498, 10.422223192105227, 9.76207732514108, 8.7746319169344158, 7.5939451837729885, 7.2605949806802883, 7.4766919496025244, 7.419064545103371, 8.0187357229163059, 8.9266344512172839, 9.6975643711848107, 10.35689464395745, 11.451859179394017, 13.10319606057651, 15.460942026724263, 18.825021564083144, 22.773162722002358, 26.906890973713775, 31.803276985208164, 37.82902190094245, 42.388788349798304, 44.620105679799558, 48.859277780953818, 46.136110292205181, 41.908361785717766, 39.521022744549988, 35.052294933716347, 29.181343166303421, 23.802472557875006, 19.955746539759069, 16.22743816874862, 13.086681034223906, 11.226909204888067, 10.616041272149978, 9.8385492842648201, 8.6563005846195669, 7.8952678290472065, 7.2762149925656852, 7.3094046208482961, 7.276214992565686, 7.8952678290472083, 8.656300584619574, 9.8385492842648219, 10.616041272149991, 11.226909204888063, 13.086681034223904, 16.22743816874862, 19.955746539759044, 23.802472557874989, 29.181343166303414, 35.052294933716361, 39.521022744549988, 41.908361785717766, 46.136110292205167, 48.059389050535053, 44.620105679799494, 42.388788349798226, 37.82902190094255, 31.803276985208186, 26.906890973713825, 22.773162722002368, 18.825021564083173, 15.460942026724263, 13.103196060576508, 11.451859179394024, 10.356894643957441, 9.6975643711848196, 8.9266344512172751, 8.0187357229163005, 7.4190645451033674, 7.4766919496025226, 7.2605949806802919, 7.5939451837729957, 8.7746319169344176, 9.7620773251410817, 10.42222319210523, 11.438986216849505, 14.102616210135931, 17.515101530242841, 21.081922570464972, 26.251111011761218, 32.358406747527845, 38.44095318130838, 44.160423468831063, 49.115010315515164, 50.072432061388007, 55.468849468729232, 52.90450693740565, 44.038766386780239, 37.143166049555234, 31.387128642704567, 25.681862172818796, 20.831311157819414, 17.79176397888002, 15.639893484781378, 13.336194440398192, 11.706284711344864, 10.040238316589498, 9.6351997849989122, 8.9922015447577301, 7.9636187803325527, 7.5443879419641293, 7.5482842032534556, 7.2755514089661553, 7.9107745883925578, 8.6463276280830215, 9.5473939482322869, 10.050508612628141, 12.206893729284213, 15.596977301337661, 18.945030358082761, 22.428633493919239, 28.439396618258566, 35.866381440857388, 43.70147053696676, 50.531848368674645, 55.101138782973628, 55.865420973528131, 76.677643276575822, 65.569299562662337, 51.369438078625784, 39.952954920090001, 32.251424266134514, 25.761496132514949, 20.668346478928903, 18.19770629294057, 15.107976469419244, 12.984935438318949, 11.28117126386311, 10.340589147553612, 9.8307707792872954, 9.1421186351912915, 8.1869060912414096, 7.7985159766257599, 7.4312929200041067, 7.5341478839019365, 7.882832838152761, 8.6704196287803175, 9.3977765822679942, 10.289994503175565, 12.901585018586699, 16.735792774046928, 19.99476230299755, 23.945886354004585, 29.954333787314209, 39.19296810421109, 49.55859874114887, 58.297658406357826, 65.507855650220662, 72.689147636713827, 104.24612656823788, 87.442260857354213, 69.065609719997752, 50.320731869274368, 36.123337028978554, 26.661531554563005, 21.461767190818144, 17.589792031500657, 15.24061559698899, 13.107938143734735, 11.354519695989618, 10.386606043801917, 9.8389441629514156, 9.2315742305614528, 8.3853957415274607, 7.8316993609624372, 7.4852869889479301, 7.6343981637821372, 8.1352989965014757, 8.7492814832421111, 9.3806927946307876, 10.614964653675061, 13.238333358456819, 16.972539478480542, 21.610810960419155, 25.182252759236462, 32.39838941697333, 44.171218069814465, 56.746590174427972, 69.785669575239609, 89.555745560157177, 108.80285258773613, 159.57955623939191, 130.8805255687619, 90.318134916215342, 60.042185621507201, 41.492753218636388, 29.32482686635726, 21.668177060872456, 17.3371356821959, 15.178485067808294, 13.327727562718726, 11.253535869282553, 10.423788563863175, 9.7870344410918424, 9.4432158844800025, 8.5436438490902233, 7.9983869985640963, 7.7104322426775891, 7.8992088061869596, 8.338123667351045, 8.7333277563772533, 9.6038295455647145, 11.281789781943189, 13.567338391039879, 18.358713894245295, 23.041902152181613, 27.834277069623926, 36.591061653526772, 48.818287955893382, 66.921744646416983, 91.967836616789555, 127.96891349444861, 154.53329869380323, 224.80770864957842, 179.77043479461912, 123.50059845139837, 77.729851956279958, 49.27077958336772, 31.764684376383045, 22.485075799802868, 18.309125668572733, 16.433795900162703, 13.6877835042215, 11.983620383388955, 10.72803579915886, 10.339435934253904, 9.6473715156890254, 8.6785477295073967, 7.9083771569220449, 8.1790777304419553, 8.1968728409344909, 8.4945509856995347, 8.8203445227279857, 10.201438772469423, 11.738276392873869, 15.02593004370379, 20.645029038002832, 26.284110672635681, 31.075867215997253, 37.483534347728245, 53.844334876610127, 80.46990226978717, 116.26546821946468, 172.54966320095502, 228.96753655548974, 309.78719189559854, 256.05708017959756, 175.68359833526623, 105.62437218489312, 63.230138353736059, 38.382893067866796, 25.753571174908501, 20.590148031359234, 16.739331260686704, 14.786798351390802, 12.361176855966249, 11.799673812944498, 10.377230417708628, 9.3823763336699955, 8.5543457526330204, 8.4602804400970992, 8.4572735895659417, 8.567264312291222, 8.9374483496855408, 9.5359471621683873, 10.535809562752121, 13.041947079601202, 16.891842344682331, 23.987725148031487, 29.826655436966995, 33.087086449001376, 38.709160706067401, 57.35275332201325, 91.33048200427605, 151.98869039703999, 244.19689848939879, 306.63257299286875, 562.21861410525219, 439.27951033199281, 263.84630525991662, 150.93744536633125, 81.309242866655154, 47.951984523863167, 32.163272384867753, 22.478845287715121, 19.794027285196304, 15.999059082232373, 13.528135829628219, 11.82587996277479, 10.50686486587958, 9.5662827353227868, 9.190804166916978, 9.2321124164010211, 8.9521911222399257, 9.2429593469396458, 9.4550360444473043, 10.111101652499666, 11.043046695375656, 13.956644256748326, 18.452791878453535, 25.313030406949409, 31.26708433258414, 34.423696964682833, 41.743276533116529, 60.676668375567509, 107.79772661917396, 211.46669660189391, 362.94464618468271, 539.29074663129688, 1043.064960359907, 726.70269845820621, 433.61330953226252, 213.21062569137561, 111.92503010834588, 62.869223125902685, 38.742976413983001, 27.235734551349324, 23.907610167423499, 19.021661277112635, 14.478861048855546, 12.91473015613936, 11.29415092435573, 10.513274350469626, 10.161347795217747, 9.9488069804828747, 9.7116899243817407, 10.105487112246305, 10.48298906867363, 10.893625186679529, 12.211372744008356, 14.812681614273641, 19.489513580793123, 27.031255662449723, 33.633912722813953, 41.52559874146754, 52.576290396008147, 71.520048430881019, 132.98214831862995, 289.32426118556515, 618.03956009503077, 984.7874618280689, 1784.0835051468939, 1336.6568589814267, 686.00323178071801, 318.39207128278593, 159.1394426840578, 76.109568327798428, 44.05265888187656, 31.991250392971853, 27.978157381323108, 22.294623912284028, 16.8872277426774, 14.610027556462216, 12.424913044930783, 11.119452781179971, 11.066245600125109, 10.840341477375128, 10.807806034266576, 11.213125876643852, 11.747735381447885, 12.282369668455885, 13.731573445856061, 16.965613714417831, 22.496202298890438, 32.407485359783124, 45.85166507919449, 53.24029570749542, 65.99594469503667, 98.093971741535469, 176.43359667751176, 441.208923375871, 936.66309122894131, 1577.4265763170022, 2295.1409914972464, 1683.7179352249, 902.26285048256875, 453.75136051512629, 179.23484372919026, 103.16047843117398, 55.856624618502074, 40.67272007657553, 33.59311041396785, 27.653390070235471, 20.65771199167747, 16.296926608708404, 14.312459824747059, 13.065794209061782, 12.816996745648842, 11.903201306554557, 11.868475605254236, 12.859628868618808, 13.483685068827036, 14.072758594539282, 16.21111247415536, 20.365121706656261, 28.733103940874788, 42.830591238304876, 60.122571559472277, 67.709414992782641, 84.151076288810941, 126.23242010647601, 260.82616895243001, 614.24882525880446, 1192.2295048012338, 1787.3905923922525, 2057.7285052573061, 1612.0404058137367, 1062.2303232610243, 410.06312322519068, 237.89761616945111, 127.19888958323968, 82.560701981631325, 50.685682074964042, 41.620492531599325, 34.023571220637599, 26.201109009342684, 20.289280537832823, 18.09746697987034, 16.092687824041846, 15.306988390608383, 14.533202056236956, 14.40394505640487, 15.086583853495929, 16.47335478810048, 18.193385040510101, 21.278934963706888, 28.142194153357082, 39.482567042533006, 55.964360327653644, 73.667255133763959, 91.127892931578486, 127.37774106216477, 189.68478304614982, 343.98700964912905, 736.25297679999983, 1395.1090523951759, 2152.5952706253147, 3792.0213246064582, 2037.977143592301, 857.05287855360893, 486.29648203694126, 284.03430164886925, 181.91972084309373, 112.97176733844, 73.599946641287119, 59.574829012615204, 49.117252584084042, 37.193120035742723, 27.472702254518456, 23.456998427374469, 20.329571180523697, 18.806836162280476, 17.698181326434526, 17.585642163629327, 19.004228801577025, 20.77893664206141, 23.250274731178163, 28.04988180564844, 35.429206551568925, 48.204553381452833, 66.207745096840512, 90.766106703902594, 117.95146004774013, 163.04342130809306, 253.90720770691391, 362.85093178658599, 788.44977202016594, 1627.1011647050398, 2759.3366542985605, 16084.742683461691, 10212.960963472211, 2163.5932265202296, 657.05253635266433, 321.82068054258923, 262.71291650117286, 174.75706127058845, 123.19419955144714, 93.465129226367836, 74.87296871197394, 58.649881806718732, 40.850586549891496, 33.395537201677108, 28.713323989162756, 24.755859033283489, 23.59847647103166, 23.138404805980127, 23.77293624816566, 26.753427300507926, 32.452048622414509, 38.417811994668497, 47.804301653843162, 72.004092864892002, 95.537832067100879, 129.95938769710136, 156.24359018004333, 237.01058786311899, 382.39730464420052, 614.08174831750478, 1377.4551350842296, 2736.2851033168104, 10028.51976985012, 12454.694619943462, 13565.815861293133, 4518.4223121248006, 1871.6210271277425, 914.24633406931184, 596.14853228454001, 399.94920918463339, 250.50030243800833, 177.16967383039946, 123.96413175241405, 93.91676536356745, 62.426609296740118, 50.119262484447404, 38.780040560556571, 33.135728528562332, 30.714909872552628, 29.187336608781973, 29.983374804996448, 34.725029965122346, 43.998829489125086, 55.496087080936618, 75.609007514321277, 119.44976282467937, 161.7107989330556, 222.75623691150756, 335.58154911349339, 556.73350878905831, 917.05530556073529, 1403.2127508507556, 2925.2286142376206, 5473.1790170642225, 7821.5833902765453], "imag": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "imag": [0.0, 1.2364045139795619, -1.417097645517349, -0.56399113050110405, 0.44612204752934542, -0.22857396866743723, -0.12233724123958876, -0.22175063370253431, -0.081847654478992143, -0.082144528420219798, -0.016319194688300422, -0.22782269816808789, -0.31553723757062957, -0.34627737582788948, 1.2289873494343531, 0.23714731979244019, 0.0, -0.23714731979246589, -1.2289873494343397, 0.34627737582788415, 0.31553723757063035, 0.2278226981680877, 0.01631919468830003, 0.082144528420217924, 0.081847654478992143, 0.22175063370252604, 0.12233724123959235, 0.22857396866743548, -0.4461220475293452, 0.56399113050110417, 1.4170976455173483, -1.2364045139795607, 1.3606412475160685, 1.4411916754234004, -0.33639737707180672, -0.40059289889731398, 0.077869450453742065, 0.11933000679564014, -0.37020072416606636, -0.12600631152419078, -0.29291723130603109, -0.050683391882318747, -0.2123566898458312, -0.16517843825664788, -0.37438920939802389, 0.24863698196016526, 0.3956337373323095, 0.63308466384569972, -0.42643957249522613, -0.28749903579454716, -0.42301568032975828, 0.27971623762695519, 0.37808744252168813, 0.15296582393741001, 0.10558339349178479, 0.088135922159038316, 0.16705843369252343, 0.44192642538865684, 0.29915225181421068, -0.047649837051313024, -0.91046045526812369, 2.0668504460046964, 1.0236217631956717, 0.095775027331123308, 0.74327388531916394, -0.034562131954570079, 0.86361123753821734, 0.14688086473050152, -0.48040960369964397, 0.72553155869356101, -0.87865322612555963, -0.4386512882244577, -0.48573187070285989, -0.32017932907631874, -0.2830749986604581, -0.26990648117356825, 0.02650526715020339, 0.070485969368273949, 0.54370981678608021, -0.067938463814195812, 0.03776680164210118, -0.5672727000472354, 0.70317235961628322, -0.021133356436660328, 0.38778419454697149, -0.021237638325898506, 0.22272564345822293, -0.028529610958430065, 0.38389116569218468, 0.54015192300945081, 0.60890484535134959, -0.58851980199844323, -0.44257995715790832, -0.31054780878465871, 0.29452233058397137, 1.4203730522981519, 0.55042973333868539, 1.0635980503754177, -0.33223282315731317, 0.34444399750770754, 1.4812987845914649, 0.28203486996779931, -0.50640814880924923, -0.63152717265524028, -0.629560147993244, -0.38143909917016799, -0.26024004494781861, -0.19111004712688462, -0.0074049384249937926, 0.048145781851611912, 0.1775395908501845, -0.010766872600667563, -0.30557543109041663, -0.12790446781789691, 0.26497067484017217, 0.49718432792560446, 0.10847923107858634, 0.18362798444374009, 0.075793328725680426, 0.060915837919074359, 0.19352569039908019, 0.72484131059467238, 0.44769863619371908, 0.65727781823869813, -2.7705947112358387, -1.8545676439466314, 1.2534804319442749, -0.33201271766592177, -0.88179245186152566, -0.49191197464707653, 0.25061306335904526, 0.36434278784189494, 1.1059306596340364, 0.5161851914994362, -0.56259342729123341, -0.79818525223670012, -0.50614275317411506, -0.33450192958610769, -0.24220392956380443, -0.29363217368931438, -0.008975674876931768, 0.015702042401798396, 0.0043287613096781611, 0.11769772351691517, 0.14847974776257877, -0.070404205425901215, 0.15992872157624444, 0.12352253662711207, 0.22950814490677918, 0.17507285276321555, 0.13747467644410705, -0.011397583876153142, 0.1103654239578318, 0.24404333943616102, 1.1434123865171273, -0.60566186502851971, -1.3365493166122577, -1.1338250057068979, -1.8155993788135394, -1.0591766157447149, -0.69010247253016843, -0.46612626705839738, -0.20353239335470796, 0.51663850122650623, 0.2659701357580968, -0.10657803670351902, -0.69730138646619577, -0.60106744735123385, -0.33542800506255299, -0.30564289179799509, -0.26672832014897818, -0.19552146385155383, -0.070818253229817343, 0.24716165183995586, 0.24871001073085031, 0.087906272749659523, -0.066392764898707615, 0.11463822183417864, -0.097387114548935505, 0.203187369929616, 0.14292038700683402, 0.20736891492564988, 0.013685307258532538, -0.024371827339033106, -0.07233585420108031, 0.49291782026044645, 0.048917424863979306, 0.2263553910474094, 0.10839909954530379, -1.1957108711898896, -1.074771579950879, -1.1175823884839045, -0.23901621577757862, -0.12877260884038383, 0.23623861798820722, 0.17111767858219226, 0.46208690546761177, -0.23679486634226876, -0.53178862418379869, -0.34021620386249335, -0.23658495591681358, -0.22275756609764855, -0.20572232603908905, -0.14494733127712761, 0.042569660785953992, 0.077733070765218709, 0.20558191361174552, 0.031719635617051253, -0.031869312918226284, 0.0092446671691655703, 0.056907964871031128, 0.0068114015565279478, 0.20608602740074444, 0.023033890597355222, 0.064944626021130644, -0.089711600875347838, 0.051877409795188095, -0.22207073062343796, 0.24248276916859771, 0.82932242402320455, -0.0013771249391571728, -0.059139017637367147, -0.22067925957890699, -0.040068334939789486, 0.30677005181582889, 0.34490255487274107, 0.22221882441368751, 0.30818729583490434, 0.041656273199714877, 0.04389672863559383, -0.30032839778423015, -0.24246246508902861, -0.17809969240648099, -0.14126159805998126, -0.15553553242798068, -0.11510723629505018, 0.024565620333015844, 0.099324973861333238, 0.11314958231531824, 0.10920785431914558, -0.0027478677647314949, -0.002197448124614016, -0.069940656171551499, 0.14656177726216579, 0.078770189361086429, 0.10241250352514093, -0.021646587213105684, 0.019211160710794505, -0.26281055993233693, -0.055146819140509458, 0.35375643597531126, 0.22411418130009836, 0.3875457037899096, 0.25423051056794166, 0.30581901500051717, 0.085911462662090085, 0.39107302489471046, 0.24699055160378858, 0.29387297238508514, 0.15373347718831995, -0.002984582508486469, -0.017260207971634491, 0.072827255227658205, -0.062089135258224848, -0.11929552297831249, -0.14454547803177953, -0.095268264507681985, -0.10089614648569632, 0.048761457544342565, 0.09609679137720413, 0.10529567915508571, 0.012037966893712556, 0.076343100588013288, -0.20546035926376272, 0.13459193297647368, 0.025732944443593878, 0.15693288111736364, 0.043761647973181578, 0.083479299629684353, -0.15251693996845875, -0.10657849804550705, 0.038641816351084518, -0.10231188547257405, 0.21957600785318707, 0.264774413728534, 0.35686545376814865, 0.29428485506006929, 0.49934135456989248, 0.18285689914378289, 0.23675610338446562, 0.10353827744151976, 0.063107949091445251, 0.03846587209017991, 0.13661717625997899, 0.098122755354854277, -0.0039906200934582137, -0.09009439550122221, -0.16647262366552176, -0.19237746196753996, 0.026647194061990561, 0.048509383863749068, 0.1654716680991411, -0.035914795239386038, 0.099273739290017232, -0.11264804489487676, 0.14792025966567318, -0.093791526140286519, 0.10021979561886898, 0.0080449729031339574, 0.25399382193861558, -0.10951630791791984, -0.033548122233328939, -0.024275040060575473, -0.15565555640319179, -0.035231426543991154, 0.063485173587351437, 0.22814734409189322, 0.10684932807789806, 0.2355554633425988, 0.10407564589066262, 0.015525256999673128, -0.011913601076877599, -0.0039295920043740662, 0.044701593559494178, 0.16547295203389104, 0.15907957720488838, 0.074664630781852093, -0.04243906497357175, -0.11246394245376416, -0.16972427151540079, -0.21530290856092721, -0.15195750501651711, 0.40553391670472716, -0.05507255324487554, 0.18488826926783164, -0.03502892748503212, 0.37001387119519319, -0.15325722566754377, 0.27168929694820759, -0.059701216280397838, 0.48380889084850937, -0.13017614472815323, 0.047673421329954523, 0.071305584258896423, -0.15733503034508964, -0.079593566039511662, -0.075485820780456944, 0.06620598245919887, -0.0012785498169557718, 0.063827392702187832, -0.0024400785561267094, 0.050942947866382475, -0.16777938781510365, -0.092876049496631446, -0.010378011540593757, 0.1594331602275639, 0.19523869399925237, 0.18464942262011227, 0.063285121982437173, -0.077221658551183223, -0.1491589460269398, -0.17912928670535297, -0.11490318286815507, -0.11189726101521234, -0.20487634390276235, 0.76498375921014561, -0.23800865420158882, 0.74083633586796371, -0.083846748018997191, 0.46372256496136105, -0.16834959597660981, 0.80860396068755125, -0.25555617026146216, 0.19463913189037535, 0.30097794980879877, -0.16302064990391507, -0.10690976611351247, -0.13497815095121923, -0.049772201284698683, -0.079451894223961053, 0.040407604161455342, -0.09194915079908203, -0.14731166465811507, -0.26499922119954511, -0.15560186997026057, -0.069496867327866862, 0.16530147427910571, 0.22324548858793775, 0.26718136730575287, 0.19166419512490171, 0.060936923017668537, -0.088626234734120041, -0.14658150061325853, -0.15988330961851069, -0.18630425886720847, 0.20226767939927157, -0.086142375874942501, -0.77766311308853053, 1.4090153420038987, -0.3038886842868152, 1.2888777036518135, -0.074470758177722834, 1.2482190395029773, -0.80123249840125998, 0.47055407026248136, 0.75577199845745624, -0.11037652666672627, -0.054458369263067428, -0.19918107544886771, -0.10899116252888987, -0.15332031366957818, 0.043654486348545761, -0.022154991408309264, -0.15239448898889341, -0.19372066727324463, -0.023769000914279543, 0.24457812931884867, 0.51722906014629877, 0.4305115414461968, 0.4535547011943914, 0.3493581281435395, 0.21076698450898321, 0.063956239140020049, -0.043266091906771414, -0.12307402164456596, -0.17588597679362872, -0.057160335632577657, -0.0784239564694168, 0.14377922602722487, -0.28610637890062873, -1.3867297053543113, 2.7076021550256568, -0.12637740826622818, 2.0046873376560574, -1.442367549533677, 0.41516901914168741, 1.1637625900709285, 0.02187980097289477, 0.2119473473283329, -0.11885489129254229, -0.1159981397382039, -0.18899269201836941, -0.058557612447368006, -0.043992442353640485, -0.026879139952720663, -0.019298206516241499, 0.11425895652801879, -0.10204731321609413, 1.0976378910336273, 0.78083298172023552, 0.7892686156410853, 0.65585934200294294, 0.41963945036689065, 0.21495377802894691, 0.10907743849349204, -0.015003791740152183, -0.098108352324783196, -0.099983461914768382, -0.14074054993981988, -0.049222223079134708, -0.60225632344115432, 0.14822551318702831, -0.20779420774376042, -2.0348285284263787, 4.0251861194251459, -2.7420491756647705, 0.80731183784095106, 1.5256751899261984, -0.015777910213839702, 0.56481061463658855, 0.094745090670160736, 0.032305441115857418, -0.15496296066268442, -0.070898922964745509, -0.15185446167165811, -0.099013378837322308, -0.033839198092832617, 0.20170996830425536, 0.31395340400286426, 0.91804938453195506, 0.90837480132247328, 1.1212514777242175, 0.8111537128593137, 0.65461252772518352, 0.44812018281017851, 0.29338133862249183, 0.080942506543726575, -0.0048876135806632161, -0.042045437831147933, -0.048279129686226115, -0.13748504879992385, -0.22867414001479172, -0.65206021382919555, -1.4414816884582773, 0.34900156189272369, 1.2663064061664397, -4.4519069438082273, 2.3981175155339263, 2.0366543361516527, -0.11574419894478603, 0.9938253915317542, 0.40253059498542132, 0.29787521235777348, -0.048128801274628118, 0.001834095689180732, -0.063578064856638958, -0.14911097873279969, -0.17638384543546787, -0.15061392115741762, -0.13638564133647435, 0.3292785127452974, 0.45646012748955422, 0.0, -0.098380202448484569, 0.2889284460821786, 0.39981384774007012, 0.45036129401449043, 0.22152969012775114, 0.11073273247786891, 0.024117745722163984, -0.0050280129542534689, -0.087106960572679512, -0.083653448195472838, -0.51521426958714545, -0.86124262209127589, -0.78939851130304506, -0.74423225935393889, -1.1208061672534484, 0.0, 1.1208061672534437, 0.74423225935393811, 0.78939851130304262, 0.86124262209127656, 0.51521426958714389, 0.083653448195472491, 0.087106960572679332, 0.0050280129542534689, -0.02411774572216354, -0.11073273247786865, -0.22152969012775126, -0.45036129401449054, -0.39981384774006945, -0.28892844608217838, 0.098380202448484236, -0.90837480132241455, -0.45646012748952708, -0.32927851274525655, 0.13638564133649642, 0.15061392115742586, 0.17638384543547556, 0.14911097873280194, 0.063578064856639402, -0.0018340956891807838, 0.048128801274627743, -0.29787521235777292, -0.40253059498541977, -0.99382539153175098, 0.11574419894478773, -2.0366543361516536, -2.3981175155339201, 4.4519069438082379, -1.2663064061664346, -0.34900156189272086, 1.4414816884582851, 0.65206021382919577, 0.22867414001479336, 0.13748504879992438, 0.048279129686228148, 0.042045437831148495, 0.0048876135806649092, -0.08094250654372509, -0.29338133862248678, -0.44812018281017507, -0.6546125277251672, -0.81115371285928006, -1.1212514777241573, -1.0976378910335893, -0.91804938453192131, -0.31395340400284805, -0.20170996830424559, 0.033839198092839695, 0.09901337883732686, 0.1518544616716597, 0.070898922964745925, 0.15496296066268506, -0.032305441115858605, -0.09474509067015939, -0.56481061463658966, 0.01577791021384034, -1.5256751899262007, -0.80731183784094906, 2.7420491756647789, -4.0251861194251397, 2.0348285284263898, 0.20779420774376556, -0.14822551318702654, 0.60225632344115643, 0.049222223079135728, 0.14074054993982205, 0.099983461914770352, 0.098108352324783543, 0.015003791740153814, -0.10907743849349157, -0.21495377802894516, -0.41963945036688871, -0.65585934200294016, -0.78926861564106898, -0.78083298172020743, -0.24457812931883488, 0.10204731321609872, -0.11425895652800651, 0.019298206516249916, 0.026879139952725083, 0.04399244235364598, 0.058557612447370934, 0.18899269201837068, 0.11599813973820411, 0.11885489129254237, -0.21194734732833254, -0.021879800972893531, -1.1637625900709312, -0.4151690191416833, 1.4423675495336772, -2.0046873376560503, 0.12637740826623128, -2.7076021550256497, 1.3867297053543175, 0.28610637890063351, -0.14377922602722601, 0.078423956469422018, 0.057160335632579121, 0.1758859767936318, 0.12307402164456618, 0.043266091906772712, -0.063956239140019508, -0.21076698450897985, -0.34935812814353639, -0.45355470119438479, -0.43051154144618958, -0.51722906014628944, 0.15560186997025938, 0.02376900091427863, 0.1937206672732435, 0.15239448898889424, 0.022154991408310377, -0.043654486348542874, 0.15332031366958024, 0.10899116252889095, 0.19918107544886771, 0.054458369263066984, 0.11037652666672665, -0.75577199845745313, -0.47055407026248092, 0.80123249840126409, -1.2482190395029769, 0.074470758177730939, -1.2888777036518133, 0.30388868428682408, -1.4090153420038936, 0.77766311308853486, 0.086142375874943722, -0.20226767939927121, 0.18630425886721039, 0.15988330961851227, 0.14658150061325848, 0.088626234734120221, -0.060936923017667906, -0.19166419512490052, -0.26718136730575015, -0.22324548858793625, -0.16530147427910316, 0.069496867327866751, 0.16777938781510615, 0.26499922119954472, 0.14731166465811715, 0.091949150799082904, -0.040407604161453857, 0.07945189422396387, 0.049772201284700876, 0.13497815095122018, 0.10690976611351256, 0.16302064990391416, -0.30097794980879811, -0.19463913189037552, 0.25555617026146371, -0.80860396068754914, 0.16834959597661264, -0.46372256496135666, 0.083846748018996636, -0.7408363358679616, 0.23800865420159104, -0.76498375921014483, 0.20487634390276502, 0.11189726101521356, 0.11490318286815554, 0.17912928670535491, 0.14915894602693922, 0.077221658551183403, -0.063285121982436826, -0.18464942262010964, -0.19523869399925042, -0.15943316022756263, 0.01037801154059478, 0.09287604949663382, -0.015525256999667727, -0.050942947866376924, 0.0024400785561280833, -0.06382739270218761, 0.0012785498169549515, -0.066205982459197621, 0.075485820780458165, 0.079593566039511995, 0.1573350303450895, -0.071305584258897034, -0.047673421329955501, 0.13017614472815361, -0.48380889084851014, 0.05970121628039872, -0.27168929694820493, 0.1532572256675474, -0.37001387119519286, 0.035028927485033709, -0.18488826926782947, 0.055072553244877351, -0.40553391670472771, 0.15195750501651886, 0.21530290856092779, 0.16972427151540051, 0.11246394245376394, 0.042439064973571687, -0.07466463078185144, -0.159079577204887, -0.16547295203388937, -0.044701593559494109, 0.0039295920043746378, 0.011913601076878649, -0.18285689914377989, -0.10407564589066134, -0.23555546334259525, -0.10684932807789757, -0.22814734409189458, -0.063485173587349258, 0.035231426543992535, 0.15565555640319106, 0.02427504006057549, 0.033548122233326282, 0.10951630791791925, -0.25399382193861758, -0.0080449729031340841, -0.10021979561886678, 0.093791526140288961, -0.14792025966567243, 0.11264804489487593, -0.099273739290014568, 0.035914795239387988, -0.16547166809914049, -0.048509383863747611, -0.02664719406199113, 0.19237746196754099, 0.16647262366552154, 0.090094395501221572, 0.0039906200934596249, -0.098122755354853444, -0.1366171762599761, -0.038465872090180271, -0.063107949091446403, -0.10353827744152141, -0.2367561033844639, -0.39107302489471046, -0.4993413545698927, -0.29428485506006952, -0.35686545376814893, -0.26477441372853422, -0.21957600785318782, 0.10231188547257429, -0.038641816351083894, 0.10657849804550705, 0.15251693996845886, -0.083479299629685352, -0.043761647973181945, -0.1569328811173635, -0.025732944443590922, -0.13459193297646968, 0.2054603592637699, -0.076343100588013288, -0.012037966893705314, -0.10529567915508307, -0.096096791377201118, -0.048761457544342024, 0.10089614648569795, 0.095268264507682401, 0.14454547803178003, 0.11929552297831249, 0.062089135258225896, -0.072827255227657164, 0.017260207971635976, 0.0029845825084865137, -0.15373347718831978, -0.29387297238508514, -0.24699055160378858, -0.30677005181583211, -0.085911462662095636, -0.30581901500051922, -0.25423051056794305, -0.38754570378991321, -0.22411418130009808, -0.35375643597530843, 0.055146819140510416, 0.26281055993233621, -0.019211160710796572, 0.021646587213104713, -0.10241250352514171, -0.078770189361086179, -0.14656177726216213, 0.06994065617155748, 0.0021974481246246629, 0.002747867764730379, -0.10920785431913549, -0.11314958231531393, -0.099324973861329505, -0.024565620333014605, 0.11510723629505158, 0.15553553242798132, 0.1412615980599799, 0.1780996924064803, 0.24246246508902825, 0.30032839778422799, -0.043896728635589223, -0.041656273199716369, -0.30818729583490695, -0.22221882441369153, -0.34490255487274391, 0.23901621577757753, 0.040068334939789153, 0.22067925957890494, 0.059139017637366363, 0.0013771249391555669, -0.82932242402320322, -0.24248276916859551, 0.2220707306234446, -0.05187740979518813, 0.089711600875348782, -0.064944626021130755, -0.023033890597353883, -0.20608602740074317, -0.0068114015565181726, -0.056907964871020393, -0.0092446671691440163, 0.031869312918224861, -0.031719635617030659, -0.20558191361174011, -0.077733070765210868, -0.042569660785952056, 0.14494733127713064, 0.20572232603908944, 0.22275756609764749, 0.23658495591681294, 0.34021620386249518, 0.53178862418379935, 0.23679486634227159, -0.4620869054676115, -0.17111767858219507, -0.23623861798820922, 0.12877260884038208, 0.69010247253016699, 1.1175823884838996, 1.0747715799508781, 1.1957108711898863, -0.10839909954530788, -0.2263553910474054, -0.048917424863973949, -0.49291782026044056, 0.072335854201080588, 0.024371827339035017, -0.013685307258532536, -0.20736891492564691, -0.14292038700683141, -0.20318736992960118, 0.09738711454895084, -0.11463822183415182, 0.066392764898706338, -0.087906272749638886, -0.24871001073084317, -0.24716165183994784, 0.070818253229819925, 0.19552146385155544, 0.2667283201489779, 0.30564289179799059, 0.3354280050625516, 0.60106744735122974, 0.69730138646619622, 0.10657803670352221, -0.26597013575809814, -0.51663850122651156, 0.20353239335470413, 0.46612626705839527, 0.88179245186152555, 1.0591766157447142, 1.8155993788135401, 1.1338250057069015, 1.3365493166122591, 0.60566186502852537, -1.1434123865171271, -0.24404333943615408, -0.11036542395783162, 0.011397583876152599, -0.13747467644410641, -0.17507285276321236, -0.22950814490677501, -0.12352253662709391, -0.15992872157622667, 0.070404205425931329, -0.14847974776257952, -0.11769772351689584, -0.0043287613096706385, -0.01570204240179094, 0.0089756748769360926, 0.29363217368931571, 0.24220392956380496, 0.33450192958610414, 0.50614275317411517, 0.79818525223669812, 0.56259342729123207, -0.51618519149943443, -1.105930659634037, -0.36434278784189805, -0.25061306335904537, 0.49191197464707476, -0.55042973333868328, 0.33201271766592266, -1.2534804319442674, 1.8545676439466376, 2.7705947112358396, -0.65727781823869658, -0.44769863619371453, -0.72484131059467105, -0.19352569039907921, -0.06091583791907576, -0.075793328725683354, -0.18362798444373865, -0.10847923107858076, -0.4971843279255892, -0.26497067484015147, 0.12790446781792791, 0.30557543109041591, 0.010766872600696822, -0.17753959085018053, -0.04814578185160058, 0.007404938424997059, 0.19111004712688809, 0.26024004494781799, 0.38143909917016594, 0.62956014799324345, 0.63152717265524094, 0.50640814880924734, -0.28203486996779953, -1.481298784591466, -0.34444399750770943, 0.33223282315731145, -1.0635980503754157, -0.74327388531916416, -1.4203730522981521, -0.29452233058397176, 0.31054780878465887, 0.4425799571579111, 0.58851980199844711, -0.60890484535134703, -0.54015192300944392, -0.38389116569218451, 0.02852961095842791, -0.22272564345822352, 0.021237638325899852, -0.387784194546968, 0.021133356436687064, -0.70317235961626101, 0.56727270004732033, -0.037766801642101375, 0.06793846381428098, -0.54370981678606445, -0.070485969368251203, -0.02650526715020184, 0.26990648117357596, 0.2830749986604576, 0.32017932907632218, 0.48573187070286, 0.4386512882244713, 0.87865322612556163, -0.72553155869355623, 0.48040960369964236, -0.14688086473049994, -0.86361123753821778, 0.034562131954569586, -1.3606412475160699, -0.095775027331125598, -1.0236217631956728, -2.0668504460046977, 0.91046045526812469, 0.047649837051312177, -0.29915225181420874, -0.44192642538866073, -0.16705843369252318, -0.088135922159037081, -0.1055833934917848, -0.15296582393740679, -0.37808744252168625, -0.27971623762694292, 0.42301568032977793, 0.28749903579456393, 0.42643957249522774, -0.63308466384561635, -0.39563373733228846, -0.2486369819601503, 0.37438920939802361, 0.1651784382566546, 0.21235668984583117, 0.050683391882319691, 0.2929172313060312, 0.12600631152419559, 0.37020072416606892, -0.11933000679563836, -0.077869450453742661, 0.40059289889731342, 0.33639737707180556, -1.4411916754233998], "height": 32, "width": 32, "top": {"real": [6327.0074679827858, 12787.448651417644, -8580.1357782693794, -6564.4296251926053, 1064.8969915597925, -1614.7722808334524, -60.048119421842308, -221.12968025641604, -12.445754708845573, -62.940587713583341, 23.820578453457951, -28.525301748952867, 37.864280125154337, -85.844490405627994, 27.493814969643068, -48.151974443362732, 41.399660199307142, -48.151974443360345, 27.493814969642067, -85.844490405627866, 37.864280125154032, -28.525301748952689, 23.820578453458509, -62.940587713584037, -12.445754708845573, -221.12968025641445, -60.048119421842806, -1614.7722808334493, 1064.8969915597932, -6564.4296251926125, -8580.1357782693849, 12787.448651417659, -17213.595236981997, 544.07302669902936, -10829.417860945707, -5794.1219231083051, -1103.8692252742003, -1120.3666800727638, -106.61462896985108, -117.89522553300084, -39.308430893651213, -26.960578056534288, -11.025047422886351, -2.1850531713376355, -7.2952697383625882, -14.472211987615461, -14.23279965231924, 3.5205960317557246, -19.629747734378611, -14.131264529804582, -22.272265924680642, -17.401343902608428, -1.7416101263052008, 0.34733716754184635, -16.60063574625633, -32.47390190466588, -64.31481385096977, -84.034753639409303, -258.32278440436392, -714.30117659130417, 113.1165060355228, -2806.7151144576005, -10882.302955904926, -27817.100568112113, -27745.708494118069, -22841.420845008699, -8553.5264674688351, -4085.033989629072, -1748.9561003744159, -545.33543865452532, -146.45498278007594, -40.805440061891282, -50.060212982262158, -16.730489448484349, -23.62313915150434, 0.36714120063527833, -7.1882909197809326, 6.4142604093545659, -14.833291452397129, 3.4669422259569203, -16.161012153790594, -21.283130178011959, -13.244388638951026, -1.2754674400463286, 0.49184661171499777, -11.472717532816317, -17.530689402649369, -29.523444921912187, -36.983418680226812, -91.597351236026796, -144.17841735614732, -486.41083616652156, -239.1204206916959, 139.00893917602821, -7153.1577950265046, -18373.599790964956, -8415.9227315857388, -6467.5546779833858, -5469.6585676007244, -2789.7914675082047, -821.48267137489768, -514.71454200305448, -122.6780822655295, -35.554593402553344, -32.905184819607861, -16.875977506192179, -9.1243948190511883, -4.1802620318744168, 0.78316084097390803, -0.82473624462572925, -6.0277039354546789, -6.8502427898926159, -6.8858593350514123, -14.551844205848809, -8.4592989146599145, -1.9950695133570466, 1.5394495557011576, -9.232834653609892, -11.961754213185406, -20.558561534905806, -38.14482496917136, -57.160869905334089, -157.5554953403844, -411.20082432868492, -110.11930975746139, -463.64281724562954, -1210.9754315912523, -4810.1023052011815, -2624.9192342435695, -4516.897453633137, -3582.982491421491, -2119.7499173636902, -750.23472664477231, -159.86878938364373, -96.805728919101412, -16.935754226078267, -22.178078450833883, -9.0092227225989756, -5.4454852920506616, -2.5268882566736748, -2.6219523498948458, -2.0534180946008638, -6.4643064804236223, -8.7214065300148622, -7.0127031874072934, -7.7847619200438425, -0.78121801903708787, -0.11031060182209244, -3.4318959866990171, -4.568083040130742, -9.3160200641569482, -15.87900618307528, -23.382201868158507, -37.989404730637517, -121.95929165874175, -201.43809047465336, -567.30372690179445, -610.36312853782476, -1937.2376557226703, -2694.0942422163184, -3481.5355975420739, -3026.0617140239533, -2506.4916383888308, -1355.1576691715959, -468.0599091435185, -33.397814851582154, 18.545331481583979, -29.439943085485314, -11.922803368680741, -7.7174579848963036, -2.7888603302094261, -2.0545006330536419, -1.0224301618297007, -2.5290059501700397, -2.6199349314032494, -4.8828731457816774, -5.6140621268617785, -3.6146413255535528, -0.82967484502750599, -1.1631844631411599, -1.1736245693095499, -3.7427284368684024, -6.6178270656423424, -8.8039498431578131, -13.481606634721874, -26.682014936266803, -32.97802138197703, -190.87870662958537, -335.07671606134033, -876.95522185704988, -1470.8308615232113, -2413.1056871868645, -2329.4915082040015, -2151.9265781424592, -1438.5211303616525, -713.08152385953474, -130.56706965452, -28.862997769748436, 1.7115783105395304, -2.3079138134833856, -11.650001060370576, -2.1701895043697319, -1.7033561682904694, 0.11972955037883275, -0.5790790812653609, -0.45369004788794814, -4.0202584980239315, -2.2874964618085922, -4.0439693313887179, -2.7144116941037568, -0.78431497120559035, -0.63377862148075614, -0.83542887465582039, -2.5417481635934216, -3.4497798452119151, -5.2729359146939485, -9.3325337684514853, -2.3480777220919959, -30.998957295773433, -62.717085150656224, -255.55592612696097, -515.55403813953228, -1077.4118984564277, -1959.4321649356718, -996.17063256475433, -957.58296584245431, -646.48124546709357, -264.63237090275328, -80.518340163143705, 1.3577640380308329, -10.209813205700032, -1.6455702447745924, 0.041564105453412992, -2.1114336115237951, 0.094770419949782359, -0.59915948675603581, -0.042806075220647909, -1.4583889440112543, -1.0515624140257636, -2.6242610725724358, -1.9962698899057387, -2.6373580888952279, -0.39414295752688255, -0.80952098820947449, -0.80935504019781357, -1.8315981280862581, -2.3957781219887311, -3.7775973636187947, -1.2762438485839673, -5.8736187047076989, -1.7472058496177199, -39.26171578474986, -103.67045476207605, -221.97901463800724, -486.52939506954147, -770.86385201715837, -324.53401456188737, -340.76561269504333, -198.94197841299811, -116.98390967138687, -32.552002455687223, -2.8647426984892057, 3.4567160839115996, -2.3310052693731942, -0.31982529888503974, 1.0641170511547686, -1.1693860348016079, 0.40700212695667498, -1.0092937918537679, -0.034985154955161232, -1.1746986822405672, -2.2583319261560799, -2.3742700657768196, -2.0999344700147127, -1.3199204785521135, -0.00726121067659493, -0.21997349279604808, -1.6799449140427334, -2.573626149077699, -1.2749029797075579, -2.9722975102588807, 1.1149262389696764, -3.7825574143705132, -8.8112838568342262, -31.380656277665604, -80.815706494855448, -151.2920880811312, -231.73584987382, -71.719340760371239, -68.364029336894532, -82.304975309081328, -39.769136567332623, -12.693902195545155, 1.9842035662706039, -0.48894354077452629, 1.5673786316984977, -1.1528550937233366, -0.047905313676576855, 1.0650111541187497, -1.4670778837513785, 0.90154843827712783, -2.0067122081730173, -1.7180755446076856, -3.3483434682482898, -1.6317774897434336, -3.4708804264384949, -1.4694727348954268, -0.10257790692130256, -0.92889636381571783, -2.5451436559397584, -1.1303995452351283, -2.8871606625355204, -0.49805533537312113, -0.43871934228158149, 0.74909741969065036, 1.439791857975526, -13.026034555561825, -28.484337861014367, -36.895178406765908, -72.231190035838395, -26.809485534889244, -56.942733796520351, -36.280107429422031, -18.099079313675151, -3.2627913287121535, -0.27065475805048173, 1.1511525903295716, -0.1898870363801409, 0.97087220888025372, -1.1326412370424179, 0.19981301766363371, 2.3076802702931332, -2.5498407756566031, -0.55532623625253041, -4.5067864970337066, -3.1791416623515807, -4.4078100962970312, -3.3125592316970569, -0.86117313527739991, -1.5893272599995412, -2.966763176308445, -0.10263295233944174, -3.9090515756474873, -1.1809123553765606, -1.2038275093350199, 0.28624805719871799, 1.8536817132476691, 0.80720029239974944, -5.5769148242308617, -9.876045833403877, -26.746787584056406, -25.156847324745275, -59.858730768373135, -40.909481344220289, -31.301364606284917, -12.992896188265529, -3.3747756869001191, 2.018530777741562, -0.2260612077575776, 0.20594677690592242, -0.32403225688254972, 2.6342781156582364, -0.20787587650621794, 0.020021422684959465, 2.4168167113542753, -5.4711139391067487, -4.0162352275216753, -8.2614925402209369, -5.3597212899808353, -3.5618518868969149, -2.433206189931258, -3.72732750056158, 1.9796458045760836, -5.6194552495050392, -1.3533084788499918, -2.5312603283156982, -0.73577412998862446, 1.0534870856485199, 1.9641802030644013, 2.686394865901931, 0.15179077698100021, -13.505006616733285, -24.652619118640313, -46.540772018331772, -65.573862825648789, -62.198686950727755, -33.367481359773279, -15.462856466374785, 1.2764820376727259, 0.65238351077916601, 0.11426292455840634, -0.28574074744887695, 1.1004477970868616, 1.5327652909312646, 4.9327112002405187, -2.7503236900904393, -3.9754701567757182, -0.83451213573114202, -9.6859551174636032, -6.0006304228248837, -7.1318253263858704, -4.9856424549649869, -8.2198692881497966, 4.4471445589999075, -5.9124192136821829, -1.066228559248251, -4.5320020023541776, -2.2691032318803455, -0.29595929991781228, 0.95069246916243999, 2.9800299945570488, 4.1754888650460389, -3.9368165535394617, -16.752391317324459, -41.141712299851427, -60.643902512124761, -84.343164732157774, -54.074972316673119, -32.147836838432397, -3.8004568077904586, 0.60906370022349199, 0.96326571070502964, 0.12072436644318041, 0.86319547550846831, 1.1644302862121145, 2.3252453178811563, 0.4766448788746544, 4.2895158747096422, -8.0099398507205173, -11.261414242734404, -3.7327404661807368, -6.1601929909303115, -5.7506657339441176, -11.117751544185502, 4.3054115148233869, -8.2116085703478756, 1.5649721654809707, -5.692142411938895, -3.4949086671880489, -2.1697325908161673, -0.69541562648800392, 0.8151347377023449, 3.4913843961972888, 3.7128410928274609, -0.28461904914440361, -14.694115553922865, -40.784171797776878, -76.129097997930202, -42.446544168449137, -35.20072244442639, -7.6849685309209681, -0.86778876706269803, 1.7056687310546401, 0.51974952798739482, 1.1316759112288739, 1.2127800605381189, 2.2221214293211369, 0.8361427470500683, 0.099546606452808759, -3.1066939683116588, 2.4769973579809332, -11.745899626687375, -12.566716735550758, -4.7843722525441121, -8.6040588700645948, 5.3511034027408684, -15.66778198729919, 3.3911987930307137, -8.1259457896856588, -4.7980365887404339, -2.1471667518999764, -2.5087241573260579, -0.86097656871748596, 0.80139543608377761, 2.3927476350849495, 5.6561627225456101, 4.6250195847240709, -10.360873371570062, -32.183766942993408, -40.627648783043085, -17.95302681367091, 6.1859416444601623, 4.4451711191118575, 6.2133312512745986, 3.3587096432927233, 0.75569650762962715, 0.82429958430179118, 1.6770717987294814, 1.4875078542842981, 0.57506461301516931, -1.8616897808321822, -4.2923314886050523, -7.0161307894352376, 4.8526265686569623, -11.625945416074895, -21.07467865045702, 3.1434482955713889, -12.714871655934468, 2.366640700254353, -11.173661544979289, -6.475058123170597, -2.9596627855411386, -2.7630790459355632, -1.4122750319888788, -0.55802289067111654, 0.40509965601619852, 3.0549503122920978, 4.5519407117959005, 5.5044865911271481, 2.884340309618711, -2.0306279174386637, -12.290279126535582, 30.20785901727286, 12.45094729737127, 8.7415961086741216, 10.304484703022888, 4.2310313602871554, 1.8368366318675937, 1.9910666876255574, 0.99156303676388502, 0.31747940339256003, -0.60245605946597469, -1.5054245711483085, -5.2047479791857727, -4.6985425899868174, -6.4406057657264579, -2.4317965202694718, -0.31806110286890099, -34.614374984304249, -0.31806110286891309, -2.431796520269478, -6.440605765726465, -4.6985425899868325, -5.2047479791858065, -1.5054245711483181, -0.60245605946599046, 0.31747940339256003, 0.99156303676388657, 1.9910666876255707, 1.836836631867627, 4.2310313602871847, 10.304484703022929, 8.7415961086741465, 12.450947297371268, -17.953026813669211, -12.290279126534008, -2.0306279174386814, 2.8843403096185996, 5.504486591127181, 4.5519407117958774, 3.0549503122920303, 0.40509965601617365, -0.55802289067113198, -1.4122750319888866, -2.7630790459355659, -2.9596627855411324, -6.4750581231706095, -11.173661544979305, 2.3666407002543774, -12.714871655934495, 3.1434482955713383, -21.074678650457034, -11.625945416074918, 4.852626568656909, -7.0161307894352527, -4.2923314886050816, -1.8616897808321802, 0.57506461301515821, 1.4875078542843145, 1.6770717987294999, 0.82429958430183881, 0.75569650762972518, 3.3587096432928165, 6.2133312512752603, 4.4451711191129393, 6.1859416444606961, -42.446544168447332, -40.62764878304236, -32.183766942992868, -10.360873371569919, 4.6250195847241038, 5.6561627225455622, 2.3927476350849091, 0.80139543608374619, -0.86097656871749839, -2.5087241573260646, -2.1471667518999924, -4.7980365887404339, -8.1259457896856819, 3.3911987930307128, -15.667781987299181, 5.3511034027407849, -8.6040588700645682, -4.7843722525441965, -12.56671673555077, -11.745899626687423, 2.4769973579809226, -3.1066939683116837, 0.09954660645280862, 0.83614274705006209, 2.2221214293211515, 1.2127800605381271, 1.1316759112289154, 0.51974952798746277, 1.7056687310547414, -0.86778876706233132, -7.6849685309204459, -35.200722444424429, -84.343164732156296, -76.12909799792908, -40.784171797776416, -14.694115553922703, -0.28461904914431585, 3.7128410928274769, 3.4913843961972515, 0.81513473770227451, -0.69541562648801736, -2.1697325908161949, -3.4949086671880569, -5.6921424119389146, 1.5649721654809774, -8.2116085703478952, 4.3054115148233585, -11.117751544185527, -5.7506657339441034, -6.1601929909302848, -3.732740466180779, -11.261414242734437, -8.0099398507205191, 4.2895158747096467, 0.47664487887466933, 2.3252453178811465, 1.164430286212123, 0.86319547550848241, 0.12072436644322472, 0.96326571070516387, 0.60906370022364942, -3.8004568077899661, -32.147836838431445, -54.074972316672174, -65.573862825648646, -60.643902512124406, -41.141712299851122, -16.752391317324395, -3.9368165535393809, 4.1754888650460389, 2.9800299945570101, 0.95069246916240213, -0.29595929991782399, -2.2691032318803499, -4.5320020023541936, -1.0662285592482377, -5.9124192136821918, 4.4471445589998728, -8.2198692881497806, -4.9856424549649665, -7.1318253263858535, -6.0006304228248819, -9.685955117463573, -0.83451213573115879, -3.9754701567757316, -2.7503236900904167, 4.9327112002405231, 1.5327652909312637, 1.1004477970868634, -0.28574074744888678, 0.11426292455844969, 0.65238351077926593, 1.2764820376728394, -15.462856466374522, -33.367481359773095, -62.198686950727343, -59.858730768372553, -46.54077201833131, -24.652619118640224, -13.505006616733089, 0.15179077698109764, 2.6863948659019079, 1.9641802030643754, 1.0534870856484704, -0.73577412998863267, -2.5312603283157147, -1.3533084788499781, -5.6194552495050258, 1.979645804576063, -3.7273275005615623, -2.4332061899312447, -3.561851886896878, -5.3597212899808397, -8.2614925402208979, -4.0162352275216939, -5.471113939106738, 2.4168167113542718, 0.020021422684962133, -0.20787587650621156, 2.6342781156582284, -0.32403225688256132, 0.20594677690590416, -0.22606120775752253, 2.01853077774176, -3.3747756868998953, -12.992896188264998, -31.301364606284267, -40.909481344219984, -26.809485534888527, -25.156847324744817, -26.746787584056008, -9.8760458334037811, -5.576914824230828, 0.80720029239978064, 1.8536817132476344, 0.28624805719868845, -1.2038275093350328, -1.1809123553765482, -3.9090515756474855, -0.10263295233946072, -2.9667631763084428, -1.589327259999552, -0.86117313527738326, -3.3125592316970565, -4.4078100962970224, -3.179141662351582, -4.5067864970337235, -0.5553262362525373, -2.5498407756565928, 2.3076802702931301, 0.19981301766362944, -1.1326412370424508, 0.9708722088802425, -0.18988703638015317, 1.1511525903296145, -0.27065475805034434, -3.2627913287119403, -18.099079313674878, -36.280107429421662, -56.94273379651932, -71.719340760368894, -72.231190035836406, -36.895178406764366, -28.484337861013827, -13.026034555561461, 1.4397918579755735, 0.74909741969062116, -0.43871934228165033, -0.49805533537312413, -2.8871606625355364, -1.1303995452351521, -2.5451436559397544, -0.92889636381573193, -0.10257790692130979, -1.4694727348954375, -3.47088042643851, -1.6317774897434372, -3.3483434682483164, -1.7180755446077083, -2.0067122081730231, 0.90154843827713693, -1.4670778837513718, 1.0650111541187297, -0.047905313676639846, -1.1528550937233546, 1.5673786316984972, -0.48894354077444435, 1.9842035662707793, -12.693902195544938, -39.769136567331614, -82.304975309079381, -68.364029336892514, -324.53401456188737, -231.73584987382011, -151.29208808113108, -80.815706494855604, -31.380656277665615, -8.8112838568343115, -3.7825574143705687, 1.1149262389696379, -2.9722975102588807, -1.2749029797076188, -2.5736261490777141, -1.679944914042758, -0.21997349279605258, -0.0072612106766204651, -1.3199204785521295, -2.0999344700147602, -2.3742700657768196, -2.2583319261561177, -1.1746986822405874, -0.034985154955167297, -1.0092937918537661, 0.40700212695667115, -1.169386034801607, 1.0641170511547318, -0.31982529888503974, -2.3310052693731778, 3.4567160839116182, -2.8647426984891329, -32.552002455687209, -116.98390967138671, -198.94197841299811, -340.7656126950431, -996.17063256474341, -770.86385201715302, -486.52939506953675, -221.97901463800537, -103.67045476207502, -39.261715784749725, -1.7472058496176825, -5.8736187047078241, -1.2762438485839995, -3.7775973636188502, -2.3957781219887693, -1.831598128086283, -0.80935504019782156, -0.8095209882094927, -0.39414295752690548, -2.6373580888952821, -1.9962698899057312, -2.6242610725724247, -1.0515624140257607, -1.4583889440112356, -0.042806075220638506, -0.5991594867560418, 0.09477041994976447, -2.1114336115238088, 0.041564105453392161, -1.645570244774569, -10.20981320570001, 1.3577640380311771, -80.518340163142966, -264.63237090274987, -646.481245467088, -957.58296584244442, -2329.4915082039943, -1959.4321649356684, -1077.4118984564245, -515.55403813953228, -255.55592612696057, -62.717085150656416, -30.998957295773568, -2.3480777220922762, -9.3325337684514711, -5.2729359146941093, -3.4497798452119492, -2.5417481635934838, -0.83542887465582316, -0.63377862148080311, -0.78431497120560345, -2.7144116941037488, -4.0439693313887171, -2.2874964618085487, -4.0202584980238978, -0.45369004788789491, -0.57907908126534979, 0.1197295503788481, -1.7033561682904654, -2.1701895043697248, -11.650001060370577, -2.3079138134832218, 1.7115783105395919, -28.862997769747821, -130.56706965451951, -713.08152385953122, -1438.5211303616488, -2151.926578142451, -3481.535597542063, -2413.1056871868605, -1470.8308615232086, -876.95522185705033, -335.07671606133954, -190.87870662958562, -32.978021381977214, -26.682014936266988, -13.48160663472185, -8.8039498431579233, -6.6178270656423885, -3.7427284368684086, -1.1736245693095617, -1.1631844631411714, -0.82967484502748334, -3.6146413255534444, -5.614062126861783, -4.8828731457814465, -2.619934931403141, -2.5290059501698665, -1.0224301618296836, -2.0545006330535864, -2.7888603302093888, -7.7174579848962566, -11.922803368680738, -29.439943085484902, 18.545331481584157, -33.397814851580577, -468.05990914351662, -1355.1576691715877, -2506.491638388823, -3026.0617140239456, -2624.9192342435676, -2694.0942422163216, -1937.2376557226696, -610.36312853782647, -567.30372690179479, -201.43809047465459, -121.9592916587422, -37.989404730638029, -23.382201868158511, -15.879006183075566, -9.3160200641569801, -4.5680830401307739, -3.4318959866990371, -0.11031060182210287, -0.78121801903713106, -7.7847619200437572, -7.0127031874072889, -8.7214065300146117, -6.4643064804234296, -2.0534180946007163, -2.6219523498948099, -2.5268882566736321, -5.4454852920506234, -9.009222722598933, -22.178078450833912, -16.935754226078039, -96.805728919100844, -159.86878938364163, -750.23472664477129, -2119.7499173636857, -3582.9824914214882, -4516.8974536331352, -8415.9227315857224, -4810.1023052011687, -1210.9754315912437, -463.64281724563131, -110.11930975746253, -411.20082432868651, -157.55549534038482, -57.160869905334962, -38.144824969171324, -20.558561534906186, -11.961754213185522, -9.2328346536099755, 1.5394495557011911, -1.9950695133570939, -8.4592989146598381, -14.5518442058491, -6.8858593350514123, -6.8502427898925227, -6.0277039354547091, -0.82473624462553619, 0.7831608409739802, -4.1802620318743058, -9.1243948190510782, -16.875977506192154, -32.905184819607861, -35.55459340255284, -122.67808226552924, -514.71454200305027, -821.48267137489574, -2789.7914675081947, -5469.6585676007144, -6467.5546779833749, -27745.708494118051, -18373.599790964956, -7153.1577950265018, 139.0089391760178, -239.12042069169632, -486.41083616652713, -144.17841735614894, -91.597351236029397, -36.983418680226798, -29.52344492191359, -17.530689402649603, -11.472717532816715, 0.49184661171508715, -1.2754674400467305, -13.244388638951113, -21.283130178012485, -16.161012153790605, 3.4669422259560148, -14.833291452397047, 6.4142604093547071, -7.1882909197807701, 0.36714120063543831, -23.623139151504223, -16.730489448483766, -50.060212982262158, -40.805440061890259, -146.45498278007528, -545.33543865451918, -1748.9561003744159, -4085.0339896290589, -8553.5264674688297, -22841.42084500867, -17213.595236981979, -27817.100568112102, -10882.302955904914, -2806.7151144576032, 113.11650603552238, -714.3011765913102, -258.32278440436545, -84.034753639410752, -64.314813850969756, -32.473901904667066, -16.600635746256838, 0.34733716754136956, -1.7416101263050108, -17.401343902608698, -22.272265924680649, -14.131264529805808, -19.629747734378629, 3.5205960317556224, -14.232799652319452, -14.472211987615371, -7.2952697383626051, -2.1850531713375001, -11.025047422886134, -26.960578056534132, -39.308430893651277, -117.89522553299832, -106.61462896985047, -1120.3666800727583, -1103.8692252741987, -5794.1219231082987, -10829.417860945698, 544.0730266990613], "imag": [0.0, 39515.399789254865, -15382.502646592808, -2918.5213899411633, 1191.3150820979915, -345.80526987183259, -91.963497561164317, -108.06830259743781, -23.431327605037779, -16.610810822958811, -2.2742971526945692, -21.94540337447156, -21.272420402577179, -19.057735286082725, 52.376313120912741, 8.8521975026144215, 0.0, -8.8521975026153612, -52.376313120912044, 19.05773528608244, 21.272420402577229, 21.945403374471546, 2.2742971526945164, 16.61081082295847, 23.431327605037779, 108.06830259743377, 91.963497561167031, 345.80526987182992, -1191.3150820979911, 2918.521389941166, 15382.502646592799, -39515.399789254865, 16946.371225111547, 11272.400870696511, -1841.1630655848539, -1171.8258105148211, 109.26740577843201, 109.43221584454041, -206.10314812122442, -42.28539321936541, -65.249140172269108, -8.1960517939269071, -25.365956236318521, -12.488977779350739, -20.777136166915728, 10.939736173955986, 13.738393384077787, 18.982014759380824, -12.446635345723246, -8.8305069728752752, -14.016932746731957, 10.847407040619599, 18.949463773817904, 9.5491377266946333, 9.9160507928571491, 10.925693066643545, 29.597688207921799, 110.70270321520633, 119.64570653889598, -28.406380421737747, -832.38513354395832, 3868.3607546707453, 4625.1554139998552, 1299.266384884336, 11955.369188695569, -346.60702359457474, 2363.0865643328202, 202.32180136864196, -295.01076934839688, 277.44131247872377, -208.25011765184485, -68.536452109290167, -63.125416501511275, -30.589238972650307, -20.382558491276782, -12.902690844348575, 1.0182743702449766, 2.2874141051372452, 14.546101055958879, -1.6150967690531892, 0.87386354462209248, -13.38677146472326, 17.407635810762027, -0.60680891034428563, 12.950261495215786, -0.86756998254740836, 13.062832664150156, -2.136096668655318, 35.880437410281019, 66.543583791324124, 106.41042136702396, -154.61175360170367, -142.43138300706809, -204.04622542072212, 637.22651951043269, 14506.214536688893, 2087.241286517743, 2934.8250858413794, -540.57641351250766, 271.57679130866723, 537.49064424335052, 71.610686309506633, -82.566517160157844, -74.489552074506761, -57.142723569279489, -25.254222647826957, -12.544755138678799, -6.7708773337384622, -0.20770764759918051, 1.1194026551973495, 3.6890839097334878, -0.20461611038051675, -5.3737401851528386, -2.2636764639022453, 4.9832600695280087, 10.10754418440443, 2.544597152813191, 5.0447569422202223, 2.8189903732027388, 2.9920185974422946, 11.529259915073515, 53.348281783168488, 50.577306165813702, 119.57179721034167, -786.94393395792213, -901.86972095078409, 1074.2990124084633, -676.63432998511303, -1814.4894639161919, -1058.8873901892568, 349.63255334068964, 268.2484621242063, 380.4257804868011, 97.912476061205965, -71.661879904778658, -72.736940205390937, -37.286147332183255, -18.720186517652358, -9.5628328869678363, -8.2634536416369482, -0.19099280196160889, 0.28567330333833429, 0.071309220847330906, 1.775656575203522, 2.1386941287610384, -1.0231985430634363, 2.4480270844924137, 1.9878096211738889, 4.1535160740617325, 3.5521022242715827, 3.6019889835361654, -0.38778650675348675, 4.5934633035837322, 12.369503115173785, 94.400929285346393, -77.039516694541632, -317.96189631496532, -464.93982303098932, -1928.5847150696218, -1707.435501473529, -1583.8824730375936, -833.14970460709912, -242.65732454029356, 317.34459246185179, 69.371971565542168, -13.453603503282046, -58.678662168810511, -40.697925231357267, -20.16679423742438, -13.090865763493372, -7.6639325468155182, -3.9818184076004774, -1.1480426683317846, 3.4782462601712654, 3.3535274581593777, 1.1304420427842019, -0.78798091056569108, 1.3645618319176871, -1.2482103302418359, 2.6548043613808709, 2.0455422971726147, 3.3794759874708187, 0.28270713586437868, -0.67396364813071052, -2.4299863370655714, 20.048308524208917, 2.7323622379310764, 23.350930435926227, 19.428895667387472, -542.55543458513841, -969.72646934413422, -1881.6935115818319, -426.42488803140975, -203.12933548649579, 221.2759941924873, 75.498646737827528, 81.527654709232138, -23.228148927519229, -35.095892631083601, -18.113211298120703, -10.84781416147373, -7.2190125620904571, -4.6279710639736358, -2.4591204313834965, 0.58454842364750592, 0.9547463106026568, 2.4151219203224654, 0.35567626693527166, -0.34443735246553581, 0.10021534895843374, 0.62975751586612239, 0.075739057981468363, 2.5606009702294732, 0.33652577635989583, 1.0967346902818458, -2.0000864020848046, 1.451434335785166, -7.1043203483245918, 10.682010714917043, 63.119371696969466, -0.21915489532378957, -18.829394319190524, -151.38668525810633, -53.557614725234764, 319.98109193688521, 339.65571159114432, 137.34002448547074, 89.166061674211335, 5.5395407010458548, 3.1394961579749192, -15.790153056071546, -10.068399035154068, -5.990189510359599, -3.8184783724455591, -3.031311871551015, -1.7050468427375405, 0.29997994657424726, 1.0820090369221063, 1.186145834536469, 1.1035985643781976, -0.026686439684276222, -0.021861987241408937, -0.71069133238487792, 1.5408441736495715, 0.88964240698419117, 1.3226298476418663, -0.31341792844049038, 0.36542819178090652, -6.2831724147446009, -1.5019641274621849, 13.705577255286178, 14.08988446983488, 43.376064565045787, 54.204646228028693, 132.60719521227122, 62.432091745032416, 219.86853407025291, 133.19971898528303, 106.65962198554573, 32.509510578136677, -0.32173120932219279, -1.0472919151881939, 3.0400482541159932, -2.1373375769283371, -3.730023177462626, -3.658884080605465, -1.7579654575817145, -1.4081716233776314, 0.53847505259675243, 0.97164442609396484, 0.99557444173589427, 0.11126643861839057, 0.68343802732828218, -1.8968331338371984, 1.2370080984335854, 0.24616862215977253, 1.6488725749132858, 0.51751999590405229, 1.1293193043526017, -2.440127533596657, -2.1096176983280075, 0.86862341139232857, -3.2906850406637935, 10.529105330387669, 21.528607110729595, 53.864359931260871, 77.645971701549371, 219.35042572397626, 56.646725304489401, 72.597133152544643, 25.283726226154087, 9.5916945360518575, 3.5131066387109651, 7.8353712095885921, 3.7982495059531924, -0.1320379920173739, -2.6872144914167868, -3.9932995411602161, -3.2496097582258021, 0.34753129477634409, 0.51108563039490118, 1.5779290838292743, -0.32098662744154494, 0.85050436376706862, -0.95269533500567993, 1.2514468795435802, -0.80232514327112969, 0.9402998385797201, 0.083484537520043395, 2.9970442493787712, -1.3537504507858638, -0.49606931853204594, -0.40634793694041288, -3.2049709482452999, -0.90733505109423707, 2.4367446291982722, 14.425788131967863, 11.285893196605656, 41.383231407558732, 26.64930600456886, 3.49019745229235, -2.7278278900775033, -0.6780497768719117, 5.1972517053508067, 13.315592278460391, 8.5655340270495799, 2.7986942524720009, -1.3188307478897958, -2.9560147101356677, -3.5039625138893249, -3.2351264422424442, -1.7837191938553947, 4.1370294214229899, -0.48575889336608402, 1.5705428299533406, -0.28712766434912351, 3.0263722138472242, -1.2120159426024513, 2.3578685311613299, -0.57595981339550073, 5.0023110313506045, -1.3965343408401143, 0.57130018359553258, 0.97601539997779907, -2.5856117766371072, -1.4572886030272592, -1.697304402058907, 2.1030121366448049, -0.062995146217583023, 4.9612937854964008, -0.301351161950073, 9.1580358876592047, -26.774160253651129, -14.352442298363405, -1.3280628610826339, 14.662722831107068, 13.065714024917916, 9.0142686843581057, 2.3156698002103213, -2.1494090398895276, -3.4369058394752816, -3.2885833247038136, -1.5589303641797962, -1.2624013759488528, -1.9675974847606275, 6.6808538974877765, -1.9845455926326385, 5.8520209082315047, -0.64649466936933941, 3.7090325345277484, -1.4383189901623872, 7.6358217658181289, -2.5011370399824613, 2.0288771570791524, 3.3870661540364408, -2.1726948090167277, -1.6227282885568253, -2.3401345171732064, -1.0784728701462345, -2.329913042321786, 1.6766227476276099, -5.5208279800184377, -13.304914803323909, -34.683237345909106, -16.2208922311743, -7.5614574111833583, 14.803696771258469, 15.579335900760762, 15.161631552742872, 8.4660409590375174, 1.9742581617985508, -2.2318082441740326, -3.1677451000476946, -2.7136257844502993, -2.4663578849843404, 2.1470642674041458, -0.80807516468244989, -6.8039934755458935, 11.462761097859508, -2.3200072133134322, 9.6476195054900042, -0.58323258923086063, 10.466810618341768, -7.3966372849294499, 4.629755222962074, 7.8499060069144697, -1.2532724460122664, -0.71383693570895246, -3.0356422051110532, -1.9171318821546592, -3.2905248775997, 1.1638954652799918, -0.8003122215164804, -7.6686022187651925, -13.379436000591463, -2.0784151782651223, 18.753674553162941, 37.596939514973172, 28.201887912811504, 26.441177038828386, 17.313699289624569, 8.2605837012813357, 1.9157665349814501, -1.0360449197814665, -2.460835808457071, -2.9435912594789997, -0.73745892985465067, -0.80698208098757895, 1.3512050433752707, -2.4806623635392717, -10.931358459008862, 20.399475046734903, -0.93914753929729033, 15.633586230850142, -11.808527677086202, 3.7955244266493091, 11.440683264496995, 0.22625003249094855, 2.3910143241324033, -1.5433230899620785, -1.7524971656611896, -3.4392335008624597, -1.2102890230410412, -1.1333111335531953, -0.86689054652400055, -0.77102037498198228, 5.869418392294464, -6.6911708498309208, 60.884710948918006, 43.621563233816303, 43.489599527484941, 33.141784821271486, 18.338861076357606, 7.7096141949396086, 3.1020965354201242, -0.33651454595896624, -1.858665713174497, -1.559439785993801, -1.7180049365163976, -0.49470837698954684, -5.7499783777067037, 1.2816063498557866, -1.6438131382345036, -14.80449956699707, 30.383248800411909, -20.687082737158004, 6.4291237134149926, 13.719178799652914, -0.15202331710012035, 5.6708331746907428, 1.1091130063870853, 0.43083164420390874, -2.423604198850752, -1.2614169037455483, -3.1633275417854718, -2.5428479485652051, -1.0621152637056996, 7.4921468465754772, 13.826120615216594, 48.56895003285198, 43.655937980459306, 56.143788442077074, 39.839822974553684, 28.907966432346075, 17.226166967005444, 9.493352687280801, 2.1248307248495761, -0.10304029106189502, -0.73643011249607004, -0.68086203692422775, -1.5726895782452095, -2.38329292549688, -6.3654622280486342, -12.648471231222512, 2.6502987300644998, 9.1941379366153466, -33.28553680715055, 17.791788634489134, 16.331392880531652, -1.0332061538290742, 9.6376857080971341, 4.1689669632335153, 3.4112249849533103, -0.63064111926197686, 0.028356847121888181, -1.1968584419289052, -3.3957285823190806, -4.7459408986565164, -4.790016252397657, -5.1593354130915703, 13.957717184896774, 20.367299127198688, 0.0, -4.5388798707327584, 12.10851784859719, 15.801052170121357, 15.786196904526062, 6.4645339091427658, 2.6357128260629894, 0.48128762074186304, -0.08159176932681525, -1.1399410088753745, -0.93916966756638098, -5.4695359499377414, -8.4733779831544798, -6.8332707948903639, -5.8759130146162706, -8.1552266379296245, 0.0, 8.1552266379295908, 5.8759130146162661, 6.8332707948903488, 8.4733779831544869, 5.4695359499377316, 0.93916966756637688, 1.1399410088753721, 0.08159176932681525, -0.48128762074185355, -2.635712826062981, -6.4645339091427667, -15.786196904526072, -15.801052170121331, -12.108517848597181, 4.5388798707327416, -43.655937980456407, -20.367299127197448, -13.957717184895019, 5.1593354130924185, 4.7900162523979217, 4.7459408986567313, 3.395728582319133, 1.1968584419289152, -0.028356847121888983, 0.63064111926197186, -3.4112249849533058, -4.1689669632334958, -9.6376857080971128, 1.0332061538290882, -16.331392880531649, -17.79178863448908, 33.285536807150621, -9.1941379366153146, -2.6502987300644807, 12.648471231222583, 6.3654622280486368, 2.3832929254968982, 1.5726895782452166, 0.68086203692425595, 0.73643011249607926, 0.10304029106193066, -2.1248307248495362, -9.4933526872806269, -17.226166967005291, -28.907966432345297, -39.839822974551964, -56.143788442073777, -60.884710948915583, -48.568950032850019, -13.82612061521586, -7.4921468465751166, 1.0621152637059226, 2.5428479485653219, 3.1633275417855051, 1.261416903745556, 2.4236041988507613, -0.43083164420392467, -1.1091130063870698, -5.6708331746907525, 0.15202331710012659, -13.719178799652925, -6.4291237134149712, 20.687082737158036, -30.383248800411859, 14.804499566997148, 1.6438131382345447, -1.2816063498557717, 5.7499783777067242, 0.49470837698955733, 1.7180049365164254, 1.5594397859938318, 1.8586657131745035, 0.33651454595900265, -3.1020965354201109, -7.7096141949395376, -18.33886107635751, -33.141784821271301, -43.48959952748401, -43.621563233814584, -18.753674553161851, 6.6911708498312086, -5.8694183922938254, 0.77102037498232001, 0.86689054652414343, 1.1333111335533379, 1.2102890230411023, 3.4392335008624833, 1.7524971656611932, 1.5433230899620796, -2.3910143241323984, -0.22625003249093578, -11.440683264497009, -3.7955244266492731, 11.808527677086207, -15.633586230850069, 0.93914753929731287, -20.399475046734821, 10.931358459008916, 2.4806623635393117, -1.3512050433752816, 0.80698208098763236, 0.73745892985467021, 2.943591259479049, 2.4608358084570767, 1.0360449197814969, -1.9157665349814337, -8.2605837012812007, -17.313699289624388, -26.441177038827938, -28.201887912810978, -37.59693951497237, 16.220892231174151, 2.0784151782650429, 13.379436000591378, 7.6686022187652325, 0.80031222151651993, -1.1638954652799158, 3.290524877599744, 1.917131882154679, 3.0356422051110541, 0.71383693570894702, 1.2532724460122711, -7.849906006914436, -4.6297552229620669, 7.3966372849294793, -10.466810618341761, 0.58323258923092358, -9.6476195054900042, 2.3200072133134997, -11.462761097859458, 6.8039934755459344, 0.80807516468246154, -2.1470642674041431, 2.4663578849843657, 2.7136257844503273, 3.1677451000476933, 2.2318082441740374, -1.9742581617985304, -8.4660409590374517, -15.161631552742712, -15.579335900760643, -14.803696771258227, 7.5614574111833424, 26.774160253651477, 34.683237345909006, 13.304914803324097, 5.5208279800184936, -1.6766227476275497, 2.3299130423218712, 1.078472870146282, 2.3401345171732237, 1.6227282885568277, 2.1726948090167162, -3.3870661540364337, -2.0288771570791524, 2.5011370399824764, -7.6358217658181076, 1.4383189901624107, -3.7090325345277098, 0.64649466936933497, -5.8520209082314834, 1.984545592632657, -6.6808538974877711, 1.9675974847606519, 1.2624013759488664, 1.5589303641798025, 3.2885833247038483, 3.4369058394752718, 2.1494090398895325, -2.3156698002103084, -9.0142686843579654, -13.06571402491778, -14.662722831106908, 1.3280628610827629, 14.352442298363767, -3.4901974522911301, -9.158035887658194, 0.30135116195024236, -4.9612937854963866, 0.062995146217542555, -2.1030121366447649, 1.6973044020589363, 1.457288603027268, 2.5856117766371063, -0.97601539997780706, -0.57130018359554458, 1.396534340840117, -5.0023110313506107, 0.5759598133955085, -2.357868531161305, 1.2120159426024788, -3.0263722138472202, 0.28712766434913656, -1.5705428299533217, 0.48575889336609929, -4.1370294214229943, 1.783719193855416, 3.2351264422424548, 3.5039625138893205, 2.956014710135662, 1.3188307478897938, -2.7986942524719765, -8.5655340270494893, -13.315592278460258, -5.1972517053507898, 0.67804977687200962, 2.7278278900777337, -56.64672530448825, -26.649306004568476, -41.383231407558036, -11.285893196605604, -14.42578813196792, -2.4367446291981882, 0.90733505109427226, 3.2049709482452906, 0.40634793694041338, 0.49606931853200609, 1.3537504507858567, -2.9970442493787934, -0.083484537520044699, -0.94029983857969957, 0.80232514327114979, -1.2514468795435723, 0.95269533500567261, -0.85050436376704475, 0.32098662744156231, -1.5779290838292681, -0.51108563039488553, -0.3475312947763517, 3.2496097582258234, 3.9932995411602126, 2.687214491416765, 0.13203799201742056, -3.7982495059531578, -7.8353712095884145, -3.5131066387109939, -9.5916945360520085, -25.283726226154414, -72.597133152543805, -219.86853407025291, -219.35042572397646, -77.645971701549428, -53.864359931260992, -21.52860711072962, -10.52910533038772, 3.2906850406638011, -0.86862341139231525, 2.1096176983280075, 2.4401275335966615, -1.1293193043526162, -0.5175199959040564, -1.6488725749132833, -0.24616862215974425, -1.2370080984335483, 1.8968331338372646, -0.68343802732828218, -0.11126643861832354, -0.99557444173586918, -0.97164442609393387, -0.53847505259674655, 1.408171623377654, 1.757965457581725, 3.6588840806054854, 3.730023177462626, 2.1373375769283727, -3.0400482541159497, 1.0472919151882829, 0.32173120932219762, -32.509510578136599, -106.65962198554575, -133.199718985283, -319.98109193688754, -62.432091745036324, -132.60719521227176, -54.20464622802902, -43.376064565046129, -14.089884469834875, -13.705577255286062, 1.5019641274622118, 6.2831724147445849, -0.36542819178094682, 0.31341792844047633, -1.3226298476418761, -0.88964240698418728, -1.5408441736495315, 0.71069133238493809, 0.021861987241514846, 0.026686439684265401, -1.1035985643780957, -1.1861458345364231, -1.082009036922065, -0.29997994657423205, 1.7050468427375622, 3.031311871551031, 3.818478372445528, 5.9901895103595697, 10.068399035154069, 15.790153056071421, -3.1394961579745826, -5.539540701046052, -89.166061674211662, -137.34002448547281, -339.65571159114575, 426.42488803140685, 53.557614725234323, 151.38668525810476, 18.829394319190286, 0.21915489532353391, -63.119371696969402, -10.682010714916952, 7.1043203483248183, -1.4514343357851665, 2.0000864020848317, -1.0967346902818478, -0.33652577635987613, -2.5606009702294568, -0.075739057981359575, -0.6297575158660037, -0.1002153489582, 0.34443735246552043, -0.35567626693504045, -2.4151219203224019, -0.95474631060256077, -0.58454842364747928, 2.4591204313835524, 4.6279710639736518, 7.2190125620904322, 10.8478141614737, 18.113211298120788, 35.095892631083665, 23.228148927519459, -81.527654709232067, -75.498646737828622, -221.27599419248904, 203.12933548649244, 1583.8824730375886, 1881.6935115818235, 969.72646934413342, 542.55543458513785, -19.428895667388197, -23.350930435925818, -2.7323622379307726, -20.048308524208668, 2.4299863370655803, 0.67396364813076437, -0.28270713586437829, -3.3794759874707645, -2.0455422971725761, -2.6548043613806773, 1.248210330242034, -1.3645618319173671, 0.78798091056567598, -1.130442042783935, -3.3535274581592822, -3.4782462601711517, 1.1480426683318268, 3.9818184076005192, 7.6639325468155093, 13.090865763493181, 20.166794237424288, 40.697925231356948, 58.678662168810511, 13.453603503282435, -69.371971565542452, -317.34459246185418, 242.65732454028887, 833.14970460709446, 1814.4894639161919, 1707.4355014735293, 1928.5847150696216, 464.93982303099165, 317.96189631496537, 77.039516694542414, -94.400929285346379, -12.369503115173439, -4.5934633035837242, 0.38778650675346871, -3.6019889835361467, -3.5521022242715157, -4.1535160740616579, -1.9878096211735969, -2.4480270844921423, 1.0231985430638744, -2.1386941287610495, -1.7756565752032289, -0.071309220847206922, -0.28567330333819857, 0.19099280196170093, 8.2634536416369908, 9.5628328869678718, 18.720186517652159, 37.286147332183262, 72.736940205390795, 71.661879904778388, -97.912476061205524, -380.4257804868011, -268.24846212420823, -349.63255334068992, 1058.8873901892528, -2087.2412865177334, 676.63432998511416, -1074.2990124084556, 901.86972095078841, 786.94393395792224, -119.57179721034137, -50.577306165813212, -53.34828178316841, -11.529259915073451, -2.9920185974423683, -2.8189903732028481, -5.0447569422201788, -2.5445971528130604, -10.107544184404102, -4.9832600695276215, 2.2636764639027978, 5.3737401851528253, 0.20461611038107308, -3.6890839097334074, -1.119402655197085, 0.20770764759927202, 6.7708773337385892, 12.544755138678777, 25.254222647826818, 57.14272356927944, 74.489552074506946, 82.566517160157588, -71.610686309506534, -537.49064424335074, -271.57679130866813, 540.57641351250493, -2934.8250858413712, -11955.369188695569, -14506.214536688902, -637.22651951043315, 204.04622542072232, 142.43138300706894, 154.61175360170483, -106.41042136702355, -66.543583791323357, -35.880437410281012, 2.1360966686551617, -13.062832664150186, 0.86756998254746465, -12.950261495215663, 0.6068089103450538, -17.40763581076148, 13.386771464725289, -0.87386354462209659, 1.6150967690552112, -14.546101055958459, -2.2874141051365076, -1.0182743702449171, 12.902690844348964, 20.382558491276768, 30.589238972650698, 63.125416501511289, 68.536452109292355, 208.25011765184536, -277.4413124787215, 295.01076934839597, -202.32180136863923, -2363.0865643328207, 346.60702359456963, -16946.371225111554, -1299.266384884367, -4625.1554139998561, -3868.3607546707453, 832.38513354395968, 28.40638042173725, -119.64570653889508, -110.70270321520742, -29.597688207921749, -10.925693066643381, -9.9160507928571686, -9.5491377266944308, -18.949463773817815, -10.847407040619126, 14.016932746732627, 8.8305069728758134, 12.446635345723296, -18.982014759378298, -13.73839338407706, -10.939736173955323, 20.777136166915735, 12.48897777935125, 25.365956236318532, 8.1960517939270616, 65.249140172269151, 42.285393219366988, 206.10314812122587, -109.43221584453876, -109.26740577843286, 1171.8258105148195, 1841.1630655848473, -11272.400870696491]}};

var right_eye_filter = {"real": [1.8229079259010603, 0.097810498648582461, -0.55840092137248587, -0.99970462842356578, 0.18757876559092043, -0.81617694863114465, -0.17457078018685562, 0.13822182613073089, -0.13830885288846723, 0.14088352498892928, -0.11242245121823281, 0.64190144530750459, -0.18081689212517704, 0.84757445423403044, -2.0367692338977426, 2.3450651085370726, -3.2227771639624789, 2.3450651085369945, -2.0367692338977101, 0.84757445423403854, -0.18081689212518082, 0.64190144530750537, -0.11242245121823641, 0.14088352498894169, -0.13830885288846723, 0.13822182613073003, -0.17457078018684977, -0.81617694863113666, 0.18757876559091927, -0.99970462842356267, -0.55840092137248509, 0.097810498648581323, -1.0960340088024074, -1.9119199452512301, -2.4095702665388479, -0.55162352804953241, -0.50505328014021589, -1.3068505835636635, -0.49437187443975589, 0.23127204626685588, 0.043350794355039197, -0.071787406154436809, 0.070854449837205943, 0.17221102955705567, 0.44602122877614064, 0.074148205591900399, -0.015611524439393865, -0.79896724757292914, -0.67155961060437053, -0.49375784053273253, 0.028167647498424205, -0.3191891366103583, 0.53582170174408217, 0.20183473326047152, 0.12710467168208503, -0.071400263514192097, 0.074560604448017792, -0.12451483496807111, 0.051358135035693774, -0.77282398113384443, -0.42160647485916963, -1.1311602269894514, -1.4625324828122208, 0.3337871926813808, -1.77011609742092, -1.4302518240108344, -3.0428213499062116, -0.60631225487833551, -0.13683987631719793, -2.3692424085383519, -0.34105804260324346, -0.25969657852057992, 0.23610433796619859, -0.27685168579683173, 0.16986402710259335, 0.073612585805396993, 0.57704911017089122, -0.059867579479423505, 0.51680219528175042, -1.0666730319382505, -0.0056552094670686828, -0.75809939060745812, -0.064701320250044561, -0.19832318162238824, 0.37732986906226257, 0.20777584924550152, 0.15451076629740465, -0.013991851319401968, 0.13841341497021592, -0.086883949036928532, 0.25261423619714551, -1.1991385138433881, -1.9867837341406693, -2.275962773839737, -3.1079150257531585, -2.3995834975192567, -2.2937692343725722, -2.1872173045799017, -1.3988308931230504, -2.2073957813815439, -1.9667941627002865, -1.6748432066635108, -0.92650772032564344, -0.054197237250052703, -0.18026213329416008, -0.15232124758200827, -0.016555865669302033, 0.31289505893870784, 0.42806542968274719, 0.23124350286854853, -0.087366382764607439, -0.12552132795947232, -0.12547908619418155, -0.38089709050886683, -0.28444076658768042, -0.11944152964360766, 0.12056136689031131, 0.21189843131890268, 0.16581598470154221, 0.13376820638890077, 0.22205496825803592, 0.15120100371874812, 0.12380717441381156, -1.2352596784322261, -2.2222759116849211, -3.3782856809989692, -3.415076124219421, -2.7282977589825297, -1.5576789730825455, -1.6478932560447972, -2.067907968457094, -2.004290735457912, -2.6427456963680775, -1.9309474679838621, -0.16864865516592528, -0.22642518078963322, -0.13321306237600422, -0.20692971953006373, -0.068344938706069003, 0.14493915164047724, 0.46505832474821007, 0.32789481378377733, 0.1852927254910838, -0.1356638873386786, -0.03585192275390197, -0.17203834043005656, -0.15954900238018477, -0.059581713131431221, -0.017228379259871054, 0.12402459410135006, 0.1524538089963059, 0.16271946063708961, 0.24817234249560427, 0.26053579199245763, -0.04769125558408293, -0.81459993031792033, -2.0740660744196808, -3.1544891598954261, -2.9212825837849565, -2.4077419089431702, -1.6411629435379833, -1.576697627349694, -1.8007661961299257, -2.0001525985045707, -1.5107274159689619, -1.2839600483166405, -0.63196711118813498, 0.31071574064221719, -0.21370915949408273, -0.16393119308951343, -0.097481704015839707, 0.13767875532837173, 0.23695911940697742, 0.36158774196732829, -0.00066962538216623158, -0.1026502520704758, -0.18176695609293456, -0.059120611570986824, -0.13702193484548986, -0.0073538013157976303, 0.020281061259494877, 0.15032501459982059, 0.16876214929227357, 0.18780650312631536, 0.16308782299108887, 0.18583847563977354, 0.44907296092364651, -0.020800703185301726, -1.4297091333258476, -2.4259185480628145, -2.4053777736536626, -1.9821307035675879, -1.3372642957080885, -1.2989780551182537, -1.3731553217305845, -1.2269479805895975, -1.2032897772528626, -0.22206046284030648, -0.18415548289109809, -0.23415549346578352, 0.077936325689887453, -0.21633114300736572, -0.059449722211757941, 0.013318329293146938, 0.28775437300883983, 0.21963323601338633, 0.16649953505637383, -0.18974789333555656, -0.17379580132236441, -0.23416130311702454, -0.13478379984035538, -0.13112027137758978, 0.033522350558872455, 0.13259733500476653, 0.171380750952115, 0.15737574769334917, 0.092477162456605533, 0.13448891283084696, 0.41161459424817443, 0.35609170613712005, -0.55316449850203808, -1.540851379466907, -1.8005308506197801, -1.5719273509294158, -0.94040577953316051, -0.83899416480020927, -0.77336416928591256, -0.66562411016509948, -0.4002640865408188, -0.36750971454913561, 0.2414435659750552, -0.065677188177910795, -0.21341675767851534, -0.041369287190265204, -0.087404842921799578, 0.04460147122538273, 0.19583406251777175, 0.1830038441344799, 0.012219595757112435, -0.034593273427629516, -0.14926486203867156, -0.036665364495836496, -0.1306231554860259, -0.086381624051938985, 0.0020423415177502173, 0.11239290885891448, 0.12781279786870536, 0.10954302373131516, 0.14996801038078228, 0.12965098836907352, 0.14324588543961356, 0.0567484033157079, -0.079342592710004017, -0.77145898274835445, -1.1705860882999304, -1.0754357146023004, -0.5463269466436349, -0.37732231762995055, -0.29185933229148303, -0.18245346577017127, -0.15252816280103537, 0.00992307413149221, -0.05334501261419268, 0.10643359538216246, -0.069635302172998029, -0.20853401810086858, 0.03871878333386132, 0.024793140061197767, 0.22215018549405419, 0.19090693911120471, 0.13458393481660855, -0.1226120784542075, -0.060406846903667433, -0.083060383383984554, -0.016925686434954099, -0.033352938195947639, 0.056474422402956102, 0.04873056181166667, 0.092098221631537164, 0.13542751998114597, 0.15540921558269635, 0.10094403852684107, 0.050489672984821425, 0.089840998861512991, 0.018445471788018183, -0.44280324831238471, -0.64559475523542686, -0.64123409592876457, -0.25571779361731761, -0.15489773108593363, -0.10375533557574061, -0.074018947274090252, -0.074021765277388324, -0.034956034554291714, 0.065331700319185393, -0.079299771847393716, 0.035725424097319471, -0.10252861876832269, -0.22107962950770202, 0.20755848067860572, 0.23157078159613848, 0.34013467279608883, 0.23914223921471078, 0.043591964044129211, -0.20186945117744784, 0.04172561648658725, -0.038784831650455286, 0.076248151019351923, -0.060276976551200255, -0.0031358189183758184, 0.13054366560393055, 0.16122088670834137, 0.12129220423951546, 0.064624059271846127, 0.063153633523538075, 0.036868954773612302, 0.025599835220982206, -0.17872521900892777, -0.37577894082797708, -0.33418602947194676, -0.19087946198724595, -0.092430559387195924, -0.15843188266072916, -0.1178716916883143, -0.079832857077627425, -0.038455609721169501, 0.015668866487966955, 0.0052656766019976578, -0.12562510603385343, -0.024970842739258457, -0.030574039563531708, -0.21969881405226874, 0.59191387060782108, 0.39965780946904006, 0.22624763974293111, 0.077143781693831126, 0.078542516808501189, -0.0038697706067326258, 0.21858339549378, 0.083870133819846815, -0.19149929243694441, 0.053673315180545467, 0.22201073984886688, 0.16922848807595664, 0.12511007660405662, 0.095111634855384236, 0.084195395624058103, 0.010195208908487656, -0.016589123313681509, -0.076922699191606214, -0.17023093289451025, -0.26998035777525775, -0.28189859430096476, -0.32749231042729776, -0.240474927671948, -0.27714150491609907, -0.16857870511456344, -0.056310601502134704, 0.026291702225850644, -0.028508101274427284, -0.066307061790986485, -0.27187198211633473, 0.066219257946262391, 0.32825613521942065, -0.21303758386300781, 1.1917438602108388, 0.2807025357241521, 0.23447144426975483, 0.16511529097099151, 0.40113579910945835, 0.017152293761210982, -0.1450564820739392, 0.13833755803781553, 0.2361453534315919, 0.16033553043559276, 0.17442784770871, 0.17988585089228476, 0.143828955260344, 0.07132752932041192, 0.016244981011210025, -0.013577696292888701, -0.024045478766089354, -0.11184718959298219, -0.14666574805211069, 0.0080876817899727359, -0.16842937423863127, -0.43543489379944889, -0.29975286851709859, -0.22753898297998879, -0.069036032916579657, 0.014977564920406507, -0.020420877906038481, -0.13524198281736244, -0.15739380447541659, -0.33401260934309918, 0.46815371603113554, 0.93021729768322625, -0.26733338229185055, 1.4166629302294091, 0.60664479608939625, 0.3603810860087503, 0.4605515924213614, -0.32071019427276837, 0.15916183580862947, 0.55142162929110317, 0.20419289205444074, 0.051921880744650394, 0.24679565757292954, 0.2706202610478356, 0.15590400545853877, 0.081859441051199647, -0.040980231107277158, 0.019596242113331462, 0.094364427919773758, 0.065278519802775978, -0.029838116901178446, 0.15435464918439099, -0.039386655944161249, -0.077796406016204619, -0.28158476919608044, -0.033110128022724852, 0.018548614200940845, 0.067046107651037731, -0.044245201781535203, -0.1525534131110006, -0.22929077462390082, -0.085302710712388263, -0.049302393683332231, 0.85744368463127818, 1.8448220136861364, -0.68744556831975012, 1.810880881855317, 0.66237039703709566, -0.31567909429421087, 0.83232217907475781, 0.97863365922997991, 0.30994126117364096, -0.041163173314528664, 0.17633262873947353, 0.23161854928102976, 0.25087704366702551, 0.19868696729956423, 0.093569887694449877, 0.032362324442922322, -0.0027507666136337679, 0.21821986304703905, 0.37880734420129814, 0.40096920495374666, 0.93561154193066887, 0.61326039955329958, 0.1638528799494483, 0.1009541629695858, 0.056601591846233243, 0.15561323638878471, 0.073000292812971587, -0.0055442453146915694, -0.13817032242271102, -0.11770539535407684, -0.096245457278447424, 0.46442894125096079, 0.45587938373772585, 1.3432089992982477, 2.5059762271849535, -0.93829697639874887, 0.6492144586928863, 0.79782532034480069, 1.3025551528258366, 0.94174974100732234, 0.099921469659734793, 0.28712786266920659, 0.15853680079243379, 0.130717335778855, 0.17042917695126153, 0.19986443324539621, 0.13725228360851915, 0.029723534135295476, 0.098143635338702864, 0.19047751491127032, 0.49335337973435212, 0.78089304412099847, 0.29686587428828037, 0.38131881367791126, 0.40643673652514922, 0.19053499830856688, 0.20033550195294633, 0.13287714582076576, 0.10533560171090586, 0.00085487897815388243, -0.049435296406267468, -0.081309411554979491, 0.057947716710403128, 0.48207744089263116, 1.2538880645112733, 1.2204758332556214, 0.87793863876625744, 1.8796293205435075, -0.45285576127696725, 2.2308682152547137, 1.2382711063757557, -0.035207936995945072, 0.88175672278306683, 0.55916031961657942, 0.18718127547628777, 0.011764673252274449, 0.068747006595272581, 0.13522321325294812, 0.17151312046437606, 0.10315365060575944, -0.0011239413451798732, 0.14993420590829387, 0.38959110228082239, 0.38845862264410469, 0.69716730182732189, 0.51802064393501412, 0.28837767001488912, 0.10583936790249669, 0.071016615670210698, 0.16001776032454934, 0.10715662619027419, 0.056188716759532117, -0.035825840155044517, 0.0061469917968111389, 0.089493877843564718, 0.68387295014825999, 1.1016519558168656, 1.3182383587355595, 0.66635382040153524, 0.54863673632097221, 4.0547770231048936, 0.54863673632097154, 0.66635382040153424, 1.3182383587355562, 1.101651955816866, 0.68387295014826144, 0.089493877843565064, 0.0061469917968106288, -0.035825840155044517, 0.056188716759530431, 0.10715662619027334, 0.16001776032454856, 0.071016615670210018, 0.10583936790249539, 0.28837767001488829, 0.51802064393501346, 0.29686587428830957, 0.38845862264412201, 0.38959110228084654, 0.14993420590831108, -0.001123941345177488, 0.10315365060576374, 0.17151312046437922, 0.13522321325295103, 0.068747006595273552, 0.011764673252275867, 0.18718127547628682, 0.55916031961657786, 0.88175672278306205, -0.035207936995944634, 1.2382711063757532, 2.2308682152547106, -0.45285576127696175, 1.8796293205435037, 0.87793863876625788, 1.2204758332556218, 1.2538880645112747, 0.48207744089263271, 0.057947716710405182, -0.081309411554979547, -0.04943529640626837, 0.0008548789781495917, 0.10533560171090255, 0.13287714582076099, 0.20033550195294705, 0.19053499830855697, 0.40643673652513423, 0.38131881367792647, 0.93561154193068807, 0.78089304412102711, 0.49335337973436416, 0.19047751491127579, 0.098143635338704696, 0.029723534135297252, 0.13725228360851988, 0.19986443324539666, 0.17042917695126267, 0.13071733577885625, 0.15853680079243432, 0.28712786266920415, 0.099921469659732226, 0.94174974100731712, 1.3025551528258328, 0.79782532034480169, 0.64921445869288619, -0.93829697639874454, 2.5059762271849548, 1.3432089992982421, 0.45587938373772335, 0.46442894125096235, -0.096245457278447175, -0.11770539535407766, -0.13817032242271216, -0.0055442453146945193, 0.073000292812969436, 0.15561323638878341, 0.056601591846233208, 0.10095416296958591, 0.16385287994945555, 0.61326039955330602, 0.15435464918440814, 0.40096920495376004, 0.37880734420131523, 0.21821986304704899, -0.0027507666136306606, 0.032362324442924542, 0.093569887694449336, 0.19868696729956342, 0.25087704366702551, 0.23161854928103059, 0.17633262873947425, -0.041163173314526666, 0.30994126117363635, 0.97863365922997669, 0.83232217907475781, -0.31567909429421592, 0.66237039703709699, 1.810880881855315, -0.68744556831974835, 1.8448220136861369, 0.85744368463127729, -0.049302393683329601, -0.085302710712388291, -0.22929077462390179, -0.15255341311100187, -0.044245201781539331, 0.067046107651035594, 0.018548614200940294, -0.033110128022720509, -0.28158476919607578, -0.077796406016200054, -0.039386655944146774, 0.0080876817899761342, -0.029838116901173162, 0.065278519802780599, 0.09436442791977824, 0.019596242113334855, -0.040980231107276652, 0.08185944105119855, 0.15590400545853553, 0.2706202610478356, 0.24679565757292907, 0.051921880744651677, 0.20419289205443947, 0.55142162929109917, 0.15916183580862936, -0.32071019427277109, 0.46055159242136157, 0.36038108600874996, 0.60664479608939803, 1.4166629302294049, -0.2673333822918505, 0.93021729768322625, 0.46815371603113448, -0.3340126093430979, -0.15739380447541709, -0.13524198281736302, -0.020420877906040739, 0.014977564920405115, -0.069036032916578546, -0.22753898297998629, -0.29975286851709465, -0.43543489379944272, -0.16842937423862725, -0.28189859430095965, -0.14666574805210519, -0.1118471895929717, -0.024045478766081197, -0.013577696292883971, 0.016244981011212731, 0.071327529320409616, 0.14382895526034015, 0.1798858508922834, 0.17442784770871067, 0.16033553043559218, 0.23614535343159299, 0.13833755803781575, -0.14505648207394348, 0.017152293761212339, 0.40113579910946001, 0.16511529097099317, 0.23447144426975502, 0.28070253572415382, 1.1917438602108381, -0.21303758386300692, 0.32825613521942509, 0.066219257946262128, -0.27187198211633529, -0.066307061790987387, -0.028508101274429792, 0.026291702225849072, -0.056310601502134003, -0.1685787051145608, -0.27714150491609657, -0.24047492767194564, -0.32749231042729471, -0.19087946198724157, -0.26998035777525148, -0.17023093289450597, -0.076922699191602426, -0.016589123313677224, 0.01019520890848913, 0.084195395624057118, 0.095111634855381461, 0.12511007660405613, 0.1692284880759545, 0.22201073984886613, 0.053673315180547035, -0.19149929243694658, 0.083870133819847037, 0.21858339549377928, -0.0038697706067313737, 0.078542516808500606, 0.077143781693833222, 0.22624763974292969, 0.39965780946904111, 0.59191387060782175, -0.21969881405226852, -0.030574039563530501, -0.024970842739259945, -0.12562510603385371, 0.0052656766019967011, 0.015668866487966397, -0.038455609721168606, -0.079832857077626357, -0.11787169168831266, -0.15843188266072725, -0.092430559387194119, -0.25571779361731145, -0.33418602947193976, -0.37577894082796842, -0.17872521900892277, 0.025599835220983438, 0.036868954773614897, 0.063153633523536298, 0.064624059271844544, 0.12129220423951372, 0.1612208867083402, 0.13054366560393141, -0.0031358189183775171, -0.060276976551199596, 0.076248151019351354, -0.038784831650455917, 0.041725616486585258, -0.20186945117744698, 0.043591964044126186, 0.23914223921470992, 0.34013467279608772, 0.23157078159613964, 0.20755848067860685, -0.22107962950770196, -0.1025286187683216, 0.035725424097318138, -0.079299771847393549, 0.065331700319185088, -0.034956034554288036, -0.074021765277385243, -0.074018947274086908, -0.10375533557573537, -0.15489773108592672, -0.5463269466436349, -0.64123409592876401, -0.64559475523542686, -0.44280324831238616, 0.018445471788017767, 0.089840998861510313, 0.050489672984820259, 0.10094403852683856, 0.15540921558269635, 0.13542751998114574, 0.092098221631536192, 0.04873056181166658, 0.056474422402955825, -0.033352938195949811, -0.016925686434957218, -0.083060383383990535, -0.060406846903667433, -0.1226120784542102, 0.13458393481660744, 0.19090693911120402, 0.22215018549405383, 0.024793140061198739, 0.038718783333861403, -0.20853401810086775, -0.069635302172998029, 0.1064335953821621, -0.053345012614191917, 0.0099230741314936706, -0.15252816280103507, -0.18245346577017069, -0.29185933229148298, -0.3773223176299495, -0.94040577953315341, -1.0754357146022915, -1.1705860882999222, -0.77145898274834734, -0.079342592710004489, 0.05674840331570382, 0.14324588543960787, 0.12965098836906794, 0.14996801038078103, 0.10954302373131049, 0.12781279786870486, 0.11239290885891398, 0.0020423415177517252, -0.086381624051941733, -0.13062315548602732, -0.036665364495841957, -0.14926486203867201, -0.034593273427634852, 0.012219595757109143, 0.18300384413447635, 0.1958340625177715, 0.044601471225384402, -0.08740484292179726, -0.041369287190262873, -0.21341675767851565, -0.065677188177906895, 0.24144356597505726, -0.36750971454912684, -0.40026408654081164, -0.66562411016509171, -0.77336416928590557, -0.83899416480020206, -1.3372642957080858, -1.5719273509294132, -1.8005308506197781, -1.5408513794669076, -0.5531644985020383, 0.35609170613711127, 0.4116145942481696, 0.13448891283084041, 0.092477162456604783, 0.15737574769334561, 0.17138075095211283, 0.13259733500476581, 0.033522350558872378, -0.13112027137759125, -0.13478379984035713, -0.23416130311702804, -0.17379580132236419, -0.18974789333555622, 0.16649953505637016, 0.21963323601338522, 0.28775437300883855, 0.013318329293152468, -0.059449722211754409, -0.21633114300735917, 0.077936325689886982, -0.23415549346577649, -0.18415548289109335, -0.2220604628402971, -1.203289777252857, -1.2269479805895944, -1.3731553217305832, -1.2989780551182524, -1.64116294353798, -1.9821307035675826, -2.4053777736536572, -2.4259185480628087, -1.4297091333258454, -0.020800703185307738, 0.44907296092364196, 0.1858384756397643, 0.16308782299108818, 0.18780650312631128, 0.16876214929227229, 0.15032501459981898, 0.020281061259495404, -0.0073538013157964212, -0.13702193484548603, -0.059120611570979247, -0.18176695609293375, -0.10265025207047287, -0.00066962538216844151, 0.36158774196732713, 0.23695911940697681, 0.13767875532837892, -0.097481704015832935, -0.1639311930895031, -0.2137091594940832, 0.3107157406422304, -0.63196711118812665, -1.2839600483166249, -1.5107274159689543, -2.0001525985045667, -1.8007661961299211, -1.5766976273496909, -1.557678973082544, -2.4077419089431698, -2.9212825837849552, -3.1544891598954266, -2.0740660744196822, -0.81459993031793032, -0.047691255584086843, 0.26053579199245114, 0.24817234249560396, 0.16271946063708537, 0.1524538089963024, 0.12402459410134949, -0.017228379259870755, -0.059581713131428661, -0.15954900238017725, -0.17203834043004781, -0.03585192275390215, -0.13566388733867182, 0.18529272549107739, 0.32789481378377766, 0.46505832474821029, 0.14493915164048596, -0.068344938706060163, -0.20692971953005135, -0.13321306237600447, -0.22642518078961474, -0.16864865516591712, -1.9309474679838514, -2.6427456963680735, -2.0042907354579094, -2.0679079684570931, -1.6478932560447959, -2.2937692343725686, -2.7282977589825266, -3.4150761242194196, -3.3782856809989692, -2.2222759116849189, -1.2352596784322352, 0.12380717441380877, 0.15120100371873849, 0.22205496825803597, 0.13376820638889372, 0.16581598470153905, 0.21189843131890046, 0.1205613668903118, -0.11944152964360859, -0.2844407665876833, -0.38089709050886922, -0.1254790861941803, -0.12552132795948226, -0.087366382764606329, 0.2312435028685467, 0.42806542968274885, 0.31289505893871633, -0.016555865669298363, -0.15232124758199445, -0.18026213329416074, -0.054197237250036744, -0.92650772032563145, -1.6748432066634964, -1.9667941627002861, -2.2073957813815404, -1.3988308931230464, -2.1872173045798968, -1.7701160974209202, -2.3995834975192563, -3.1079150257531603, -2.2759627738397428, -1.9867837341406698, -1.1991385138433992, 0.25261423619714135, -0.086883949036943853, 0.13841341497021575, -0.013991851319408978, 0.15451076629740176, 0.20777584924549833, 0.37732986906226257, -0.1983231816223982, -0.064701320250050057, -0.75809939060751286, -0.0056552094670687921, -1.0666730319382445, 0.5168021952817432, -0.059867579479421881, 0.57704911017089144, 0.073612585805408248, 0.16986402710259826, -0.27685168579682035, 0.23610433796619823, -0.25969657852055217, -0.34105804260323408, -2.3692424085383355, -0.13683987631719494, -0.60631225487832385, -3.0428213499062093, -1.4302518240108333, -1.0960340088024054, 0.33378719268138207, -1.462532482812221, -1.1311602269894572, -0.42160647485916913, -0.77282398113385165, 0.051358135035689895, -0.12451483496808054, 0.074560604448017945, -0.071400263514198398, 0.12710467168208478, 0.20183473326046905, 0.53582170174408328, -0.31918913661037829, 0.028167647498415164, -0.49375784053277538, -0.67155961060436897, -0.79896724757297555, -0.015611524439376389, 0.074148205591898927, 0.44602122877613765, 0.17221102955705844, 0.070854449837212188, -0.07178740615442418, 0.043350794355038948, 0.23127204626685866, -0.49437187443974595, -1.3068505835636535, -0.50505328014021666, -0.55162352804951942, -2.4095702665388461, -1.9119199452512292], "bottom": {"real": [4046.4241509904555, 28839.973879370627, 10191.512031448321, 4381.7455807293263, 2071.9548413915022, 1107.2825867454831, 528.34551553150311, 308.97330299730402, 185.81061014820492, 130.08108126519062, 87.65365496956511, 59.09553675383809, 43.506269455848397, 34.575222311681692, 30.798097452905282, 25.523061346781674, 25.951646714603154, 25.523061346781589, 30.798097452905211, 34.575222311681706, 43.506269455848361, 59.095536753838019, 87.653654969565167, 130.08108126519082, 185.81061014820492, 308.97330299730379, 528.34551553150334, 1107.2825867454833, 2071.9548413915031, 4381.7455807293318, 10191.512031448323, 28839.973879370646, 13493.224333003216, 16392.519951456161, 4871.8353885075767, 1571.3337493887716, 567.64096645153529, 373.6703632325283, 244.24660034041102, 142.79597933554817, 106.13580676907658, 75.858347622710525, 58.061322564190078, 39.854538473021549, 30.569538051408923, 25.094853941398878, 22.929757321982656, 20.808198660555963, 22.04888812794956, 23.622937534136554, 29.138683151168021, 38.082981074479143, 54.39934218587819, 77.826621492011839, 121.61239162949131, 177.63416429867098, 254.30481783551838, 430.47940336338183, 664.63525809030591, 1219.8477670929726, 1935.5749815900854, 3358.0980991141623, 6069.2175916916049, 8660.7039291701622, 15384.540019848313, 11175.737303494303, 2216.879483433469, 674.59859086304846, 308.57630937597452, 222.13525013253278, 144.62539946693838, 89.351789047349641, 66.200283784031811, 53.5880480094322, 38.104835124660447, 27.112718944065261, 23.033311632510099, 19.858863545618888, 19.408029208714364, 19.38215160767772, 20.871711217553681, 24.726583224259915, 29.429525390428484, 39.688247321389746, 54.026677368666491, 71.509189516532359, 109.7023701375058, 145.30501493896827, 183.84765943176359, 237.38092500065588, 353.51632607639505, 531.27032729465725, 719.17065363709912, 1367.9024800373177, 2857.7322293344778, 8625.0149751320059, 3926.8611003464521, 2444.3527388912776, 1028.8359899085383, 585.56166554295623, 332.57137935864864, 180.13762334769046, 105.17011934648103, 61.496465220623485, 45.504823244138095, 37.908460172493172, 30.846794326525625, 21.222093075405745, 18.718288087401802, 17.679602313216872, 17.409839934721365, 17.794391783727544, 18.55926931620083, 21.348409581307148, 24.39997962145603, 30.767061622228063, 38.103008129659166, 44.81251118779231, 61.577721983396955, 87.291485884508717, 106.99539363556599, 134.18057082099898, 169.37440787587974, 269.99443977661724, 364.56248799144709, 674.50839546082307, 1521.022929703357, 2634.7343778883865, 2024.849011267275, 1926.8239401023498, 1491.9478410044117, 611.83627918833088, 316.43682665588744, 155.99683828976544, 89.673379864750018, 50.013293885425135, 37.528009707176061, 32.4518569290627, 24.966146703509182, 19.130394004010906, 15.343856356149828, 14.843145659919786, 14.861292517540363, 15.036681247518919, 15.312687438440403, 17.138709070816013, 19.446116741695533, 22.850207518010233, 27.457440287528367, 32.581505308308088, 40.985078317877736, 54.412823137373685, 75.762437644265901, 94.733059346587339, 128.1467358253355, 182.29010502256293, 275.95498073034861, 527.32695578494008, 1132.5867520786235, 1866.4077869841046, 2266.7457843108455, 2107.8495169895441, 1234.6592459623437, 673.70954283481137, 266.6693703142779, 139.47307538222793, 66.730731113314476, 41.917980917088734, 31.2590211502941, 26.786032891522527, 20.35627716260823, 16.038244917569745, 14.499148814332527, 13.459360575928033, 13.144389071570192, 12.567429683418663, 12.230328765246885, 13.466217665828195, 15.328301760046475, 17.144679989146308, 19.68756841312236, 24.074134044705339, 32.727034612286992, 43.026808431859955, 59.193773906230369, 78.820512563030945, 92.994178544706472, 120.42091176843755, 201.9182636225097, 436.44287859172925, 877.8862778005057, 1439.6385876846614, 1649.9911393469049, 1699.4038415062987, 1039.2560892520887, 495.51661529689329, 235.81544665938515, 113.58561083280532, 60.921551746622946, 35.725757089786256, 25.024628727892466, 22.490208420088727, 17.759823791920191, 13.543616943986416, 12.938917306264663, 11.956364952724385, 11.421939705679733, 11.372903592178258, 11.032765269291394, 11.408229662647633, 12.481114469594095, 13.60275540468532, 14.91952183557448, 17.807798659576154, 23.277252196336814, 31.950664619854233, 47.416694920263616, 56.268912844615144, 64.959626427586997, 85.070809539003847, 130.82046704446515, 257.67571935262418, 627.46721263291658, 1194.1693767483914, 1080.1900960853154, 902.674413704009, 600.04055794738224, 333.23520458041997, 166.5653831933532, 88.946305547571072, 50.717393232745131, 31.897215329939996, 23.060146944216118, 18.579780562544169, 15.572760511446054, 13.273777678692191, 12.224913053368416, 11.68638594982613, 10.392044527527784, 10.422646713468026, 10.113778554702394, 10.225072497047023, 10.776357928238541, 11.471833692521193, 12.585855785544721, 15.131216045563061, 18.856673404562432, 24.858220592568422, 32.657280802203381, 43.037987696240307, 51.536289299313914, 59.08796022590117, 89.418846636419246, 168.44781050782811, 382.14409608709747, 745.27797642375992, 544.93523795856049, 546.63255943550212, 362.69938393816085, 222.4530875664997, 124.78354764285341, 69.155510455436144, 41.705006957506896, 26.952419331651356, 19.778555411511121, 17.743475715717917, 14.471795156401063, 12.765457059373892, 11.899864411981882, 10.85818004844373, 10.325708895539952, 9.5692719745256376, 9.2113480820863387, 9.0680329970290128, 9.7734432560375648, 10.488284402310196, 11.323197140674811, 13.23504887223821, 16.674941080314653, 20.771526297093455, 27.569417818570489, 33.103068481604573, 37.131609415223707, 47.964760430736398, 66.578817507603574, 119.94841754808802, 237.18123750436465, 409.50889944188236, 307.01018353832677, 288.66760291638428, 236.16368190120858, 154.32114106589464, 92.303773245695481, 55.468009578938926, 35.843010431224045, 24.692475316947775, 18.31794202383119, 15.815283825259236, 13.970653175227845, 12.321358605090134, 11.166914874614415, 10.532076178141539, 9.9738582700772742, 9.4395532322934326, 8.8524779931517035, 8.5960325163902862, 8.7233150994257276, 9.4605465058702709, 10.702831587760128, 11.695932356823622, 14.406509159208545, 18.893042693096525, 25.031728162044864, 28.237283751764654, 32.110154440123182, 38.781782989560291, 56.412497176172337, 92.156945934839797, 157.10935603874077, 244.24925081430641, 218.20881258539546, 216.90433976724358, 169.13695858014356, 112.62100758585845, 68.70530790516959, 45.982361360241526, 32.725373555898344, 22.221572369125827, 17.135020014783734, 14.281960328360523, 12.699315839076576, 11.637118060780567, 11.004832210877884, 10.393382355075936, 9.6259602166533789, 8.7652013845999868, 8.5650120282362092, 8.5854476517741869, 8.1851518687531879, 9.1270872628576836, 9.8383977040140795, 11.693775785132257, 13.287947209975439, 16.544820171465705, 21.672488061489553, 27.762087103200397, 29.796933806391767, 35.443188490268959, 51.826480475596476, 76.692136618774384, 114.45554660359461, 172.81330831382385, 150.57608076172548, 151.07347077509746, 119.80060075739978, 84.307080896770614, 55.59442395215062, 38.954469932130465, 27.855857296119165, 21.147383956632677, 16.095362427853317, 14.114901096214023, 12.272097096384341, 11.279235865220194, 10.45557624282722, 10.213403723979409, 9.4352540004127672, 9.059591562681522, 8.4285767722705884, 8.2189676916739653, 8.2483207838968369, 8.7272133851807343, 9.3853417746714207, 10.436988631508529, 11.737372360714012, 14.160123000210135, 18.959579242189701, 24.173697545434358, 27.627516713161423, 33.591531685669004, 45.297439984936638, 65.897539497304663, 88.610944521286385, 122.51594786973793, 102.9717174324289, 99.771144171631136, 80.254636450195903, 61.009511746666256, 44.786912913807178, 34.271024500323179, 25.65851527359349, 19.184194785168692, 15.369946764821139, 13.384363033613122, 12.174478369218367, 10.905903566261369, 10.181651684644681, 9.6408755952533021, 9.5742304532973588, 8.9763308722412098, 8.5493032688069821, 8.0644484764315241, 8.4276865988342919, 8.7290963397981098, 9.1210926884309647, 10.045472592156113, 11.11042960636143, 12.723025686618605, 15.905816263070196, 20.709491045732211, 24.791931496783274, 30.865414152401307, 41.835714185623189, 55.039237230593706, 69.947250962386548, 86.305656954166849, 70.246077416654487, 70.163190967731239, 60.941585457354833, 46.988681551588527, 37.426824229947464, 31.105114654781531, 24.717957509432271, 18.191253220796238, 14.40571246916225, 12.794837539520243, 11.45286867499644, 10.555233980671725, 10.138595490186225, 9.7617939326440126, 9.2945114067021706, 9.1978519570897408, 8.5269704682665068, 8.3694986947733589, 8.3900850601209847, 8.9019780110016278, 9.4993224051697176, 10.189344774081897, 11.038776504531349, 12.139382952337165, 14.296273465828305, 18.325479810549485, 23.245126565071455, 28.658675517780157, 38.227879918404916, 50.026933715114076, 59.913478880080035, 67.142884728350211, 60.673200962744687, 56.006191670589025, 48.952383807337931, 41.877289900824969, 35.563752651142892, 29.381802508508265, 23.323351055229473, 18.385352146785323, 14.386074460433269, 11.971768024825069, 10.813949701229296, 10.104265892334448, 9.7873837360525968, 9.7876450182420029, 9.3736570608881902, 9.1067837514303367, 8.8782742568475381, 8.4108604655156682, 8.5145291911969032, 9.1444638633789328, 9.5903687569174956, 10.050972673200409, 10.599176866339214, 12.029252308933458, 13.885440808202775, 16.933840539652099, 20.949767453800131, 27.392670445772911, 35.246945811604022, 44.844494652773115, 53.527920120533459, 59.511906457614529, 53.048047546158344, 49.667902591204928, 45.161821768091436, 39.040569237963304, 34.153498370766542, 28.812200326236947, 21.915204963295363, 16.825291542921018, 14.194481006765461, 11.707465544074312, 10.438485210613589, 9.8151245648739263, 9.283134914271356, 9.0821420578250009, 9.0470505359514384, 9.0924089982219396, 8.8466944313913523, 8.4735939062643375, 8.4980702515250215, 9.0113445722107848, 9.2898710387292809, 9.9575678866832327, 10.426127211956205, 11.223822839806607, 13.773251241827809, 16.688691177663944, 20.746301629724744, 26.320191080313084, 33.979868436578599, 42.0788988747152, 48.313306819757166, 52.481937610238305, 49.070609767594966, 49.766679020971374, 46.544272852318578, 40.229040805773415, 32.559839637781486, 26.180018982316895, 21.083604085221012, 16.97356072267355, 13.301411970448795, 11.264067238060504, 10.255581922596939, 9.6536213682112031, 9.2153774062964224, 8.7468110761182825, 8.4356542718375049, 8.7323846743622209, 8.8458599078381237, 8.7323846743622209, 8.4356542718375032, 8.7468110761182896, 9.2153774062964278, 9.653621368211212, 10.255581922596944, 11.264067238060512, 13.301411970448795, 16.973560722673543, 21.083604085221008, 26.180018982316881, 32.559839637781494, 40.22904080577338, 46.544272852318571, 49.766679020971331, 53.048047546158344, 52.481937610238198, 48.313306819757052, 42.0788988747152, 33.979868436578577, 26.320191080313087, 20.746301629724748, 16.688691177663959, 13.773251241827822, 11.22382283980661, 10.426127211956201, 9.9575678866832256, 9.2898710387292791, 9.0113445722107919, 8.4980702515250268, 8.4735939062643357, 8.8466944313913505, 9.0924089982219467, 9.0470505359514402, 9.0821420578250063, 9.2831349142713542, 9.815124564873928, 10.438485210613582, 11.707465544074319, 14.194481006765461, 16.825291542921001, 21.915204963295366, 28.81220032623694, 34.153498370766549, 39.040569237963282, 45.161821768091372, 49.667902591204999, 60.67320096274468, 59.511906457614572, 53.527920120533402, 44.844494652773072, 35.246945811604007, 27.392670445772925, 20.949767453800135, 16.933840539652095, 13.88544080820277, 12.029252308933453, 10.599176866339214, 10.0509726732004, 9.5903687569174885, 9.1444638633789328, 8.5145291911969103, 8.4108604655156718, 8.8782742568475346, 9.1067837514303385, 9.3736570608881848, 9.7876450182420012, 9.7873837360526021, 10.10426589233446, 10.813949701229305, 11.971768024825074, 14.386074460433273, 18.385352146785333, 23.323351055229466, 29.381802508508251, 35.563752651142877, 41.877289900824962, 48.952383807337874, 56.006191670588912, 70.246077416654288, 67.142884728350111, 59.913478880079964, 50.026933715114062, 38.227879918404923, 28.658675517780189, 23.24512656507147, 18.325479810549478, 14.296273465828305, 12.139382952337156, 11.038776504531354, 10.189344774081897, 9.4993224051697229, 8.9019780110016331, 8.3900850601209847, 8.3694986947733572, 8.5269704682665068, 9.197851957089739, 9.2945114067021635, 9.7617939326440144, 10.138595490186225, 10.555233980671725, 11.452868674996441, 12.794837539520238, 14.405712469162248, 18.191253220796249, 24.717957509432264, 31.105114654781534, 37.426824229947449, 46.988681551588492, 60.941585457354776, 70.163190967731154, 102.97171743242879, 86.305656954166807, 69.947250962386491, 55.039237230593784, 41.835714185623168, 30.865414152401325, 24.791931496783278, 20.709491045732214, 15.905816263070196, 12.723025686618604, 11.110429606361421, 10.045472592156107, 9.1210926884309735, 8.7290963397981116, 8.4276865988342937, 8.0644484764315258, 8.5493032688069821, 8.9763308722412134, 9.5742304532973623, 9.6408755952533056, 10.181651684644681, 10.905903566261369, 12.174478369218367, 13.384363033613125, 15.369946764821144, 19.184194785168689, 25.658515273593498, 34.271024500323144, 44.78691291380715, 61.009511746666178, 80.25463645019579, 99.771144171631008, 150.57608076172505, 122.51594786973776, 88.610944521286228, 65.897539497304635, 45.297439984936574, 33.591531685669025, 27.627516713161402, 24.173697545434354, 18.959579242189701, 14.160123000210131, 11.737372360714007, 10.436988631508525, 9.3853417746714172, 8.7272133851807325, 8.2483207838968262, 8.2189676916739689, 8.4285767722705902, 9.0595915626815202, 9.4352540004127654, 10.213403723979411, 10.455576242827226, 11.279235865220191, 12.272097096384336, 14.114901096214016, 16.095362427853331, 21.147383956632702, 27.855857296119162, 38.954469932130408, 55.594423952150585, 84.307080896770429, 119.80060075739968, 151.07347077509721, 218.20881258539524, 172.81330831382382, 114.45554660359451, 76.692136618774427, 51.826480475596433, 35.443188490268959, 29.796933806391745, 27.762087103200372, 21.672488061489549, 16.544820171465698, 13.287947209975444, 11.693775785132251, 9.8383977040140866, 9.1270872628576836, 8.1851518687531897, 8.5854476517741798, 8.5650120282362074, 8.7652013845999939, 9.6259602166533789, 10.393382355075921, 11.004832210877884, 11.637118060780562, 12.699315839076572, 14.281960328360505, 17.135020014783741, 22.221572369125806, 32.725373555898322, 45.982361360241477, 68.705307905169562, 112.62100758585837, 169.13695858014344, 216.90433976724287, 307.01018353832563, 244.24925081430612, 157.1093560387404, 92.156945934839754, 56.412497176172316, 38.781782989560298, 32.110154440123168, 28.237283751764654, 25.031728162044857, 18.893042693096504, 14.406509159208543, 11.695932356823613, 10.702831587760132, 9.4605465058702674, 8.7233150994257205, 8.5960325163902844, 8.8524779931517052, 9.4395532322934272, 9.9738582700772813, 10.53207617814155, 11.166914874614413, 12.321358605090143, 13.970653175227838, 15.815283825259229, 18.317942023831186, 24.692475316947778, 35.843010431224023, 55.468009578938812, 92.303773245695368, 154.32114106589427, 236.16368190120789, 288.66760291638354, 544.93523795856049, 409.50889944188282, 237.18123750436465, 119.9484175480882, 66.578817507603574, 47.964760430736455, 37.131609415223693, 33.103068481604559, 27.569417818570489, 20.771526297093434, 16.674941080314646, 13.235048872238199, 11.323197140674804, 10.488284402310184, 9.7734432560375648, 9.068032997029011, 9.2113480820863387, 9.5692719745256465, 10.325708895539957, 10.85818004844373, 11.899864411981884, 12.765457059373892, 14.471795156401072, 17.743475715717903, 19.778555411511121, 26.952419331651342, 41.705006957506882, 69.155510455435987, 124.78354764285341, 222.45308756649936, 362.69938393816079, 546.63255943550212, 1080.190096085312, 745.27797642375788, 382.14409608709587, 168.44781050782805, 89.418846636419218, 59.087960225901135, 51.536289299313893, 43.037987696240307, 32.657280802203374, 24.858220592568383, 18.8566734045624, 15.131216045563052, 12.585855785544725, 11.471833692521184, 10.776357928238532, 10.225072497047019, 10.113778554702403, 10.422646713468026, 10.39204452752778, 11.686385949826136, 12.224913053368411, 13.273777678692191, 15.572760511446033, 18.579780562544141, 23.060146944216122, 31.897215329939918, 50.717393232745025, 88.946305547570788, 166.56538319335294, 333.23520458041884, 600.04055794738088, 902.6744137040065, 1649.9911393469013, 1194.1693767483896, 627.46721263291568, 257.67571935262464, 130.82046704446515, 85.070809539003903, 64.95962642758694, 56.268912844615201, 47.416694920263595, 31.950664619854226, 23.277252196336782, 17.807798659576147, 14.919521835574468, 13.60275540468532, 12.481114469594081, 11.408229662647638, 11.032765269291394, 11.37290359217827, 11.421939705679749, 11.956364952724407, 12.938917306264656, 13.543616943986398, 17.759823791920141, 22.490208420088635, 25.024628727892473, 35.725757089786228, 60.92155174662291, 113.58561083280503, 235.81544665938503, 495.51661529689198, 1039.2560892520876, 1699.403841506296, 2266.7457843108423, 1439.6385876846614, 877.88627780050422, 436.44287859172971, 201.91826362250967, 120.42091176843758, 92.994178544706443, 78.820512563031016, 59.193773906230312, 43.026808431859891, 32.72703461228695, 24.074134044705318, 19.687568413122339, 17.144679989146301, 15.32830176004647, 13.466217665828177, 12.230328765246888, 12.567429683418707, 13.144389071570203, 13.459360575928054, 14.499148814332536, 16.038244917569731, 20.356277162608194, 26.786032891522385, 31.259021150294068, 41.917980917088691, 66.730731113314405, 139.47307538222745, 266.66937031427761, 673.70954283481024, 1234.659245962343, 2107.8495169895405, 2024.849011267276, 1866.4077869841062, 1132.5867520786235, 527.32695578494054, 275.9549807303485, 182.29010502256293, 128.14673582533564, 94.733059346587495, 75.762437644265887, 54.412823137373678, 40.985078317877729, 32.581505308308067, 27.457440287528364, 22.850207518010212, 19.446116741695526, 17.138709070816009, 15.312687438440404, 15.036681247518965, 14.861292517540395, 14.843145659919811, 15.343856356149836, 19.130394004010878, 24.966146703509185, 32.451856929062608, 37.528009707176075, 50.013293885425036, 89.673379864749862, 155.99683828976509, 316.43682665588739, 611.83627918833008, 1491.9478410044112, 1926.8239401023493, 3926.8611003464503, 2634.734377888386, 1521.0229297033557, 674.50839546082398, 364.56248799144686, 269.99443977661741, 169.37440787587963, 134.18057082099915, 106.99539363556599, 87.291485884508702, 61.577721983396906, 44.812511187792317, 38.103008129659166, 30.767061622228066, 24.399979621456033, 21.348409581307155, 18.55926931620083, 17.794391783727576, 17.409839934721397, 17.67960231321689, 18.718288087401788, 21.222093075405763, 30.846794326525586, 37.908460172493079, 45.504823244138095, 61.496465220623335, 105.17011934648093, 180.13762334768973, 332.57137935864853, 585.56166554295532, 1028.8359899085369, 2444.3527388912739, 15384.540019848309, 8625.0149751320096, 2857.732229334476, 1367.9024800373199, 719.17065363709889, 531.27032729465782, 353.51632607639499, 237.38092500065625, 183.84765943176362, 145.3050149389683, 109.70237013750581, 71.509189516532217, 54.026677368666469, 39.688247321389689, 29.429525390428473, 24.726583224260004, 20.871711217553678, 19.382151607677731, 19.408029208714364, 19.858863545618949, 23.033311632510113, 27.11271894406525, 38.10483512466044, 53.588048009431979, 66.200283784031811, 89.351789047349371, 144.62539946693829, 222.13525013253218, 308.57630937597452, 674.59859086304834, 2216.8794834334685, 11175.737303494294, 13493.224333003214, 8660.703929170164, 6069.217591691604, 3358.0980991141591, 1935.5749815900851, 1219.8477670929722, 664.63525809030602, 430.47940336338263, 254.30481783551838, 177.63416429867087, 121.61239162949126, 77.826621492011839, 54.399342185878204, 38.082981074479164, 29.138683151168006, 23.622937534136597, 22.04888812794956, 20.808198660555991, 22.92975732198266, 25.094853941398917, 30.569538051408909, 39.854538473021513, 58.061322564190043, 75.858347622710383, 106.13580676907651, 142.795979335548, 244.24660034041099, 373.67036323252819, 567.64096645153575, 1571.3337493887695, 4871.835388507573, 16392.519951456165], "imag": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "imag": [0.0, -1.343901621327011, 1.7218333249394571, 1.3937858919791224, -0.90478486773452105, 0.99560837280124848, 0.13374486301187097, 0.79781790598886937, 0.081235430122062774, 0.47338465820086184, -0.078534664439216209, 0.29500119331967589, -0.62479162763734286, 0.29517170974740459, -1.8712573358384692, 0.14096520515743682, 0.0, -0.14096520515741828, 1.8712573358384816, -0.29517170974737811, 0.62479162763733731, -0.29500119331966146, 0.078534664439223051, -0.47338465820085962, -0.081235430122062774, -0.79781790598886004, -0.13374486301187369, -0.99560837280124848, 0.90478486773452083, -1.3937858919791226, -1.7218333249394557, 1.3439016213270112, 1.5871307700950068, 0.56370110925886319, 1.2603198064423482, 2.9317402483699255, -0.84090846562801591, 0.28395441021550888, 1.0393523450590114, 0.83104911233799517, 0.57334259680943678, 0.30043904784975134, 0.29266755430531527, 0.082930104064024152, -0.36502835420313379, -0.76213554623438207, -0.54316838647957832, -0.66028179246101926, 0.20250391456576916, -0.059393044635645806, 0.9730252602081445, -0.01782962412134724, 0.18933865423621773, 0.011846708470834844, 0.014269719747672759, -0.16281560265463554, -0.24410560657714067, -0.34963232308526365, -0.32234943120999277, -0.6691127915152365, 0.14162995430492473, -0.96909874957635578, -1.0446282489208472, 1.3612809629252947, 0.70464907960903156, 1.644656498115789, 1.457626495523533, -0.6840361527612806, -0.68147470897196205, 0.73118573872942638, 1.2398159392319572, 1.2736175855463174, 0.65550663858936109, 0.45897332874861019, 0.24948129249627171, 0.22959418801218681, -0.67355449112520815, -0.78917379441405089, -0.83366315887398401, -0.022795944141155908, 0.15753196960053301, 0.50836195321582456, 0.16292155588892338, 0.14047533322536612, -0.029004083819245446, 0.042892010327960466, -0.084780328674450303, -0.13217055914433321, -0.30971168558439593, -0.44061350110378666, -0.59380988893293396, -0.46719027726302742, -1.2068396187631398, -0.94969408752542273, 0.28960616895899027, -0.40038203546320883, 0.55620249274438927, 0.14065731983379595, 1.390858139437829, -0.67833342052765033, -2.0926714021100303, 1.5120873610545131, 1.7251253398279642, 1.0499886203647506, 0.6413261932720733, 0.43315407205712014, 0.32584150801434064, 0.17968537990933128, -0.27887473465086693, -0.72646685328097149, -0.95200274282553721, -0.38747270801185796, 0.31172559850957127, 0.3167238274644899, 0.25925756638025876, 0.20404659434537992, 0.19201780058118942, 0.0025274006864131854, -0.20254250312507205, -0.30146681989018398, -0.45156398868756126, -0.71583959398165176, -0.78636343748881254, -1.3089140888320636, 0.41393919421363429, -0.92308378001125058, -0.96086768695066838, 0.99489496750979101, -0.39381772120025876, -0.59264738582705545, -1.1161873115341066, -0.38954314931717815, 0.15776662530084892, 0.39428020304678685, 1.7089894615168126, 0.92868491010646026, 0.350973234838865, 0.32125288047075679, 0.23669588269358602, 0.19592809956108717, -0.32646969875093118, -0.5617213523679232, -0.76596137582739887, -0.4848448097808058, 0.0035984972735877987, 0.36234031342999445, 0.02584515038201295, 0.38132345964413561, 0.29172235696712762, 0.10460468586389386, -0.14942504329756173, -0.23406484190568319, -0.59702583417138988, -0.64791716309340031, -1.1972380302487249, -0.37081056871520385, 0.31028937719203986, -0.11181138224479611, 0.050224150041196312, -0.59242819035998506, -0.4703174557375312, -0.55567065990801068, -0.18073895078348806, -0.07286620180284567, 0.9080135456055427, 1.3448759333642528, 0.56391746646770735, 0.68824563709365816, 0.27054447491545203, 0.18555506064923469, 0.21628766080629094, 0.089227696371118645, -0.1330464412169812, -0.51044075389216448, -0.57482956329522528, -0.49992842173388902, -0.0088882269741786465, -0.026119953804469152, 0.16649307508904443, 0.18021017930701566, 0.24129551707937363, 0.051414766220490717, -0.054409237913703348, -0.21354052285348152, -0.34065461819243753, -0.83215952955458006, -0.65455151443418824, -0.51711748874533736, -0.34193161983249143, 0.25991967791421511, -0.31922838969311168, -0.25096233231074472, -0.019538834540300996, 0.23386297177233037, 0.39736821511961345, 0.72603823847118543, 0.8168297825020705, 1.0763583447726135, 0.80611388127401196, -0.023349196100613815, 0.09911450222934183, 0.11136104528246665, 0.11912886110102348, 0.1510441091194204, -0.10294245821664937, -0.34339582552474845, -0.46071517851602106, -0.27454988477746128, -0.021291149638310566, 0.035818571775215378, 0.08165077597052256, 0.19593247304969552, 0.16021249355536668, 0.073411101811457824, -0.094413661460628892, -0.14774431296435828, -0.3788677957633147, -0.38953231590523063, -0.62892221563014938, -0.80219655994233319, 0.19764870263775744, -0.28620163890053252, 0.041738811618785537, -0.047502831671303453, 0.42759360787810174, 0.44353340330745888, 0.61232760985457502, 0.70207820166905466, 0.72192603666395361, 0.63928791416871467, 0.32589261306510392, 0.17268517789923485, -0.11832252230060911, 0.049391580905339259, 0.12347320818582375, 0.064697981434016727, -0.0067102091687047593, -0.27370819742589092, -0.26939466873920287, -0.25176222060998998, 0.0081310228529853402, 0.013089808045657288, 0.185105158015618, 0.11713478908555769, 0.20974664985683705, 0.048745778368168922, -0.0069359534603168627, -0.18083894269546222, -0.15907734702039189, -0.30490326972545728, -0.49525043110711681, -0.20633977154543071, -0.28929558460304977, 0.017255660868048289, 0.089250558912840242, 0.34349774583430781, 0.38277205043588519, 0.56772102070325814, 0.48811475177501612, 0.43659704639067964, 0.38858095560717315, 0.35469216713625445, 0.11095078972724678, -0.050354098986562471, 0.010426074631633324, -0.023032548262322892, 0.068558023511485697, 0.1199625535177883, -0.0044347552049944488, -0.14323623171577524, -0.2742488887234425, -0.15059247824174998, -0.18695930341705305, 0.068136880204083733, 0.049162011568203073, 0.16362595169702937, 0.078325720975578078, 0.11153460033842358, -0.10346450949096449, -0.039250261082814021, -0.12027128091306288, -0.23113762225192683, -0.07885965728132803, -0.25982980909746989, -0.11219308206942701, -0.19372413199270677, 0.1843821378255476, 0.22544536191476028, 0.22838873802709003, 0.11856768480607156, 0.20011010622694389, 0.16443500436191505, 0.13441036107213369, 0.15600995797323181, 0.029984980792926118, -0.017950425588896139, -0.095997178609832007, 0.045815559155676679, 0.050600401411128038, 0.062555070152262096, 0.095362679574156284, -0.25884721081868178, -0.19352665675464722, -0.35758313393883445, 0.057241994101256972, -0.074489797691212556, 0.15760636776309309, 0.077110294424560424, 0.21793581355625327, -0.085384156728057797, 0.054278095118519401, -0.063513516552257218, -0.13925876777247995, -0.053090482149624127, -0.088550664314818353, 0.097053178020475875, 0.021982682491266895, -0.032057043772553598, 0.011606155190390474, 0.20297398899260674, 0.087137707937781944, 0.14235450986309658, -0.0066344290522644652, 0.069443551113326479, 0.037974760198136455, 0.02723212012252952, -0.030406089689394462, -0.062891439826322393, -0.033462702565164315, -0.13091343010011852, 0.18662643567548856, 0.14580799486104234, -0.055902479292620696, -0.12813917376287484, -0.43706544906097528, -0.097926711565598012, -0.17130544619864244, 0.30727693305691806, -0.2953735036217468, 0.22056405751825581, -0.16529753202987246, 0.34047455883436423, -0.0020829156573361745, -0.14775664020163451, -0.074518551996532553, -0.14850320507536691, -0.057283952975165524, 0.064665418468806371, 0.23511892751228192, 0.11870789775778592, 0.0625549454189092, -0.031298024311669038, 0.0064402102662661845, -0.079082063664820082, 0.0553675188881671, 0.025089334126077875, 0.063800091749494747, 0.015988824093570549, -0.048545356942180602, -0.11558972094679192, -0.097487343329346582, -0.00049492928166827938, -0.18157168721539482, 0.33942288969170681, 0.30522386319855388, -0.54639589537101751, 0.013830571830100688, -0.38850732372171304, 0.223075916963486, -0.31865288748874443, 0.25745374979707547, -0.81885347149607268, 0.50855168910609783, 0.20195166784419227, -0.069785743671890318, 0.050884179954965268, -0.18377202523753672, -0.17303565260659334, -0.15924096907201105, 0.092146932205194695, 0.26379835890783954, 0.35934781180257075, 0.24329566614587647, 0.18564601960109514, 0.24223475523068938, 0.28967646870392649, 0.15967526911861643, 0.22365254766781259, 0.12185893624650075, 0.070105150765122456, -0.045495054958742086, -0.13016925945874308, -0.12331107551299306, -0.096585989040329473, 0.22919036999990153, -0.39865574246315477, 0.3675558227752026, 0.45597314967635888, -0.93227329954448013, 0.32110784375924512, -0.59160024067907024, 0.39469180639349893, -1.5810043928614619, 0.71926168426275527, -0.095920343398476549, -0.084877145937512208, 0.40399573862898452, -0.041743397742653787, -0.10303861084867461, -0.21220001866353477, -0.17318676777643013, 0.015792824133968684, 0.37994714934071439, 0.4573031649737595, 0.48491463219236358, 0.278045596991639, 0.33099751793182702, 0.073461819418744675, 0.30445717300203839, 0.34815332433352569, 0.27336662525128713, 0.050113511094951838, -0.059405844632707393, -0.16261143474742229, -0.10891422081227681, -0.075070297171157971, 0.15348950297637756, 0.63132994551184463, -0.93604459898777692, 0.42325697055405742, 1.1782712312395338, -1.6700526640562563, 0.67307548012867768, -2.0365876460209691, 0.69665186973993298, -0.3990336398782886, -0.77751104168880314, 0.5628167675812451, 0.044468991083659551, 0.081278132745909976, -0.070993394358423723, -0.091852860366211056, -0.10956166698887557, 0.072941493094735049, 0.35167328896657912, 0.63488067579895824, 0.56199684605205058, 0.60627707274502263, -0.018970197624819329, 0.37668655809680845, 0.22317003729918369, 0.17596357423928666, 0.18202109891962201, 0.038230887694388455, -0.10475039750351335, -0.15123171993121909, -0.11278544639649389, 0.054110895720760221, 0.23852479976301316, 0.30802887330694756, 0.9587111952302938, -1.4503952980081434, -0.061458391503499687, 2.1389978076683529, -3.5142346308062073, 1.6764175122847729, -0.63252660757872936, -1.1970497991660358, 0.46027494328631885, -0.38868529039399474, 0.063066133758830412, 0.085024034480974467, 0.047630852690686495, -0.022775175196356016, 0.011847923870825085, 0.13095780969018636, 0.39870906011464996, 0.54100133271840178, 0.62859642257501991, 0.12859489098386362, -0.17371304193339687, -0.77135662792152559, -0.35696964892202537, -0.15350152251372465, -0.081108427029901481, -0.12890403553126065, -0.14048874638904316, -0.18368108831833277, -0.13143015225876853, 0.037318187986402011, 0.39815350666418903, 0.44685069559938601, 0.29854169122462937, 1.0193515924216456, -2.1696976832709978, -1.5476694374721527, 4.1115013597100623, -1.6066056279080296, -1.1129988398741206, 0.94641351902713078, -0.66464487182371434, -0.22405122030787003, -0.16845135046504239, 0.10281428632219461, 0.12776142939872864, 0.10903691838775739, 0.097477148948306502, 0.19622512970077355, 0.37581890109000032, 0.58152174984392169, 0.57588244896775898, 0.56835821427965394, 0.0, -0.075660591040101741, -0.5319087481065502, -0.49066506338765509, -0.25388521774435541, -0.17759782612549996, -0.17342105765811164, -0.17172379067488869, -0.17163733194043357, -0.0096917261033460274, 0.23320936684713756, 0.61544163247884909, 0.23031783223894131, 0.4504667163321609, -0.25422186154383031, -1.2338903723029762, 0.0, 1.2338903723029679, 0.25422186154382892, -0.45046671633216256, -0.23031783223894184, -0.61544163247884998, -0.2332093668471385, 0.0096917261033450074, 0.17163733194043357, 0.17172379067488885, 0.17342105765811225, 0.17759782612550043, 0.25388521774435546, 0.49066506338765642, 0.53190874810654976, 0.075660591040102837, 0.17371304193345374, -0.56835821427958444, -0.57588244896772234, -0.58152174984391114, -0.37581890108999716, -0.19622512970076919, -0.097477148948305531, -0.10903691838775691, -0.12776142939873006, -0.10281428632219579, 0.16845135046504131, 0.22405122030786861, 0.66464487182371257, -0.94641351902713855, 1.1129988398741191, 1.6066056279080259, -4.1115013597100578, 1.5476694374721462, 2.1696976832709982, -1.0193515924216472, -0.29854169122463242, -0.44685069559938834, -0.39815350666419097, -0.037318187986404149, 0.13143015225876697, 0.18368108831833294, 0.14048874638904385, 0.12890403553126736, 0.081108427029909794, 0.15350152251374438, 0.35696964892206617, 0.77135662792155557, 0.018970197624865574, -0.12859489098383081, -0.62859642257500314, -0.54100133271839856, -0.39870906011464824, -0.13095780969018578, -0.011847923870824886, 0.022775175196357359, -0.047630852690687051, -0.085024034480974689, -0.063066133758832563, 0.38868529039399197, -0.46027494328632251, 1.1970497991660347, 0.63252660757872814, -1.6764175122847713, 3.5142346308062082, -2.1389978076683618, 0.061458391503496308, 1.4503952980081398, -0.95871119523029713, -0.30802887330694667, -0.2385247997630148, -0.054110895720761498, 0.11278544639649313, 0.15123171993121864, 0.1047503975035141, -0.038230887694384028, -0.18202109891961496, -0.17596357423927469, -0.2231700372991606, -0.37668655809676688, -0.33099751793180054, -0.60627707274499654, -0.56199684605203359, -0.63488067579895024, -0.35167328896657507, -0.072941493094733675, 0.1095616669888755, 0.091852860366211805, 0.07099339435842339, -0.08127813274590924, -0.044468991083660724, -0.56281676758124888, 0.77751104168880336, 0.39903363987828711, -0.69665186973992854, 2.0365876460209633, -0.67307548012867546, 1.6700526640562572, -1.17827123123954, -0.42325697055405653, 0.93604459898777859, -0.63132994551184651, -0.15348950297637845, 0.075070297171156097, 0.10891422081227575, 0.16261143474742193, 0.059405844632708517, -0.050113511094947612, -0.27336662525128258, -0.34815332433351742, -0.30445717300202041, -0.073461819418725136, -0.24223475523068566, -0.278045596991634, -0.48491463219235625, -0.45730316497375445, -0.37994714934071183, -0.015792824133968708, 0.17318676777642958, 0.21220001866353638, 0.10303861084867472, 0.04174339774265514, -0.40399573862898636, 0.084877145937511819, 0.095920343398476396, -0.71926168426275106, 1.5810043928614652, -0.39469180639349549, 0.59160024067907002, -0.32110784375924395, 0.93227329954447902, -0.4559731496763611, -0.36755582277520088, 0.39865574246315755, -0.22919036999990147, 0.096585989040328876, 0.12331107551299252, 0.1301692594587433, 0.045495054958742745, -0.070105150765121721, -0.12185893624649984, -0.22365254766781101, -0.15967526911861513, -0.28967646870392255, -0.0064402102662611729, -0.18564601960108706, -0.24329566614587189, -0.35934781180256659, -0.2637983589078372, -0.092146932205193599, 0.15924096907201093, 0.17303565260659445, 0.18377202523753683, -0.05088417995496395, 0.069785743671890568, -0.20195166784419286, -0.50855168910609727, 0.81885347149607191, -0.25745374979707175, 0.3186528874887527, -0.22307591696348483, 0.38850732372171648, -0.013830571830101068, 0.54639589537102196, -0.30522386319855499, -0.33942288969170481, 0.18157168721539607, 0.0004949292816654663, 0.097487343329345874, 0.11558972094679136, 0.04854535694218131, -0.015988824093569717, -0.06380009174949508, -0.025089334126078205, -0.055367518888164394, 0.079082063664820748, -0.087137707937777115, 0.031298024311669809, -0.062554945418906743, -0.1187078977577844, -0.23511892751228033, -0.064665418468805788, 0.057283952975166051, 0.14850320507536743, 0.074518551996532748, 0.14775664020163706, 0.0020829156573371555, -0.34047455883436323, 0.16529753202987046, -0.22056405751825445, 0.29537350362174863, -0.30727693305691484, 0.17130544619864224, 0.097926711565602301, 0.43706544906097711, 0.12813917376287753, 0.055902479292622584, -0.14580799486104357, -0.18662643567548898, 0.13091343010011883, 0.03346270256516358, 0.062891439826322837, 0.030406089689394671, -0.027232120122529239, -0.037974760198136892, -0.069443551113326632, 0.0066344290522653612, -0.14235450986309153, -0.22838873802708684, -0.2029739889926063, -0.011606155190393872, 0.032057043772551565, -0.021982682491265355, -0.097053178020474681, 0.088550664314818187, 0.053090482149624633, 0.13925876777248047, 0.063513516552260146, -0.054278095118517826, 0.08538415672805795, -0.21793581355625447, -0.077110294424558939, -0.15760636776309189, 0.074489797691215873, -0.057241994101257694, 0.35758313393883939, 0.19352665675464989, 0.25884721081868634, -0.095362679574154757, -0.062555070152259029, -0.050600401411129904, -0.04581555915567774, 0.095997178609832215, 0.0179504255888953, -0.029984980792924155, -0.15600995797322956, -0.13441036107213314, -0.16443500436191227, -0.20011010622694014, -0.1185676848060674, -0.38277205043588519, -0.22544536191476122, -0.18438213782554774, 0.19372413199270522, 0.11219308206942717, 0.25982980909746933, 0.078859657281328127, 0.23113762225192824, 0.12027128091306288, 0.03925026108281611, 0.10346450949096535, -0.11153460033842286, -0.078325720975578092, -0.16362595169702793, -0.049162011568201006, -0.06813688020407746, 0.18695930341705305, 0.15059247824175628, 0.27424888872344572, 0.14323623171577923, 0.0044347552049957819, -0.11996255351778637, -0.068558023511484198, 0.023032548262321723, -0.010426074631633324, 0.05035409898656467, -0.11095078972724633, -0.35469216713625396, -0.38858095560717304, -0.43659704639067964, -0.48811475177501651, -0.56772102070325836, -0.42759360787810491, -0.34349774583431025, -0.089250558912845224, -0.017255660868053985, 0.28929558460304938, 0.20633977154543065, 0.49525043110711575, 0.30490326972545867, 0.15907734702039197, 0.18083894269546641, 0.0069359534603191542, -0.048745778368166057, -0.20974664985683683, -0.11713478908555536, -0.18510515801561447, -0.013089808045645399, -0.0081310228529865667, 0.25176222061000281, 0.2693946687392072, 0.27370819742589902, 0.0067102091687078758, -0.064697981434012536, -0.12347320818582255, -0.049391580905336498, 0.11832252230060807, -0.17268517789922963, -0.32589261306509937, -0.639287914168712, -0.72192603666395261, -0.70207820166905555, -0.61232760985457479, -0.44353340330746277, 0.019538834540299969, 0.047502831671299713, -0.041738811618788646, 0.28620163890052958, -0.19764870263775797, 0.80219655994233652, 0.62892221563015416, 0.38953231590523568, 0.37886779576331475, 0.14774431296436413, 0.094413661460632833, -0.073411101811453133, -0.16021249355536557, -0.19593247304968892, -0.081650775970513151, -0.035818571775193361, 0.021291149638310077, 0.27454988477748077, 0.46071517851603194, 0.34339582552475939, 0.10294245821665464, -0.15104410911941546, -0.11912886110102075, -0.1113610452824651, -0.099114502229341719, 0.023349196100618572, -0.80611388127400851, -1.0763583447726097, -0.8168297825020715, -0.72603823847118742, -0.39736821511961523, -0.23386297177233123, 0.4703174557375292, 0.25096233231074278, 0.31922838969310624, -0.25991967791422005, 0.34193161983249054, 0.51711748874534202, 0.65455151443419168, 0.83215952955458772, 0.34065461819243747, 0.21354052285348993, 0.054409237913707532, -0.051414766220484194, -0.24129551707937194, -0.18021017930700467, -0.16649307508903324, 0.02611995380449984, 0.0088882269741778191, 0.49992842173391339, 0.57482956329523827, 0.51044075389218102, 0.13304644121698647, -0.089227696371110179, -0.21628766080628836, -0.18555506064923225, -0.27054447491545125, -0.68824563709364495, -0.56391746646770291, -1.3448759333642519, -0.90801354560554559, 0.072866201802841646, 0.18073895078348665, 0.55567065990800857, 0.39381772120025821, 0.59242819035998318, -0.05022415004119711, 0.11181138224479518, -0.31028937719203997, 0.3708105687152074, 1.1972380302487284, 0.6479171630934083, 0.5970258341713901, 0.23406484190569171, 0.1494250432975659, -0.10460468586388726, -0.29172235696712562, -0.38132345964412656, -0.02584515038199919, -0.36234031342997136, -0.0035984972735878563, 0.484844809780835, 0.76596137582741564, 0.56172135236794307, 0.32646969875093934, -0.19592809956107882, -0.23669588269358457, -0.32125288047075495, -0.35097323483886461, -0.92868491010645182, -1.7089894615168075, -0.39428020304678818, -0.15776662530084981, 0.38954314931717637, 1.1161873115341048, 0.59264738582705467, -0.5562024927443876, -0.99489496750979078, 0.9608676869506646, 0.92308378001124303, -0.4139391942136339, 1.3089140888320632, 0.78636343748881332, 0.71583959398165975, 0.45156398868756092, 0.30146681989019147, 0.20254250312507779, -0.0025274006864056797, -0.19201780058118689, -0.20404659434537004, -0.25925756638025355, -0.31672382746446043, -0.31172559850957088, 0.38747270801190198, 0.95200274282556019, 0.72646685328099436, 0.2788747346508717, -0.17968537990931685, -0.3258415080143367, -0.43315407205711348, -0.64132619327207141, -1.0499886203647348, -1.7251253398279605, -1.5120873610545145, 2.092671402110029, 0.678333420527655, -1.3908581394378237, -0.14065731983379445, -0.704649079609032, 0.40038203546320611, -0.28960616895899161, 0.94969408752542028, 1.2068396187631385, 0.4671902772630277, 0.59380988893293563, 0.44061350110379105, 0.30971168558439566, 0.13217055914433939, 0.084780328674454217, -0.042892010327952576, 0.029004083819250629, -0.14047533322535441, -0.16292155588890503, -0.50836195321575572, -0.15753196960053273, 0.022795944141262008, 0.83366315887402342, 0.78917379441409119, 0.67355449112521315, -0.2295941880121686, -0.24948129249626083, -0.45897332874859181, -0.65550663858936065, -1.2736175855462932, -1.2398159392319503, -0.73118573872941783, 0.68147470897196305, 0.68403615276129381, -1.4576264955235338, -1.6446564981157907, -1.587130770095007, -1.361280962925294, 1.044628248920846, 0.96909874957635356, -0.14162995430492481, 0.66911279151523617, 0.32234943120999365, 0.34963232308526704, 0.244105606577141, 0.16281560265463482, -0.014269719747667968, -0.011846708470826806, -0.18933865423621368, 0.017829624121361812, -0.97302526020811309, 0.059393044635753067, -0.20250391456577049, 0.6602817924610479, 0.54316838647960974, 0.76213554623441593, 0.36502835420313695, -0.082930104064008442, -0.29266755430530383, -0.30043904784973247, -0.57334259680943656, -0.83104911233797829, -1.039352345059011, -0.28395441021550044, 0.84090846562801602, -2.9317402483699175, -1.2603198064423498, -0.5637011092588653], "height": 32, "width": 32, "top": {"real": [7376.2586563979694, 2820.8522261533344, -5690.9497085395169, -4380.4513376296127, 388.6547315083493, -903.73852292232903, -92.233688854560938, 42.706854165930984, -25.699252344104405, 18.326281263011424, -9.8542387499157442, 37.933510453511431, -7.8666684309670254, 29.305075180843883, -62.728617354661907, 59.853240627388928, -83.636374399044939, 59.853240627386725, -62.728617354660756, 29.305075180844177, -7.8666684309671826, 37.933510453511431, -9.8542387499160657, 18.326281263013065, -25.699252344104405, 42.706854165930693, -92.233688854557883, -903.7385229223205, 388.65473150834708, -4380.4513376296045, -5690.9497085395114, 2820.8522261533035, -14789.032757371706, -31341.185848117759, -11739.029695619593, -866.78466658113393, -286.68893204831016, -488.33133225087568, -120.74864963582691, 33.024718339611894, 4.6010715329524166, -5.4456740109959769, 4.1139030671062393, 6.8633911029603265, 13.634662924808397, 1.860738389345556, -0.35796846682150263, -16.625069210775109, -14.807142725465134, -11.664010623894898, 0.82076815557037341, -12.155673848711613, 29.148348103795893, 15.708115389403888, 15.457503110539639, -12.683126140048403, 18.961120931859309, -53.601071866945205, 34.13442733448511, -942.72760774202175, -816.05094481379797, -3798.5470080468217, -8876.4278731043305, 2890.8320511623124, -27232.421940549859, -15984.118662988652, -6745.5682223604126, -409.0173927639226, -42.225544009425754, -526.29225504527119, -49.325655652906178, -23.20435390028933, 15.630174176003303, -14.835941429972856, 6.4726407463551725, 1.9958373496876167, 13.291351981828791, -1.1889020916883648, 10.030112101155916, -20.674418420848429, -0.1180338988714332, -18.745207674116038, -1.9041291470929314, -7.8710994817942428, 20.385879097388031, 14.857882580655026, 16.950197274587541, -2.033086164989526, 25.446982376231624, -20.624592190095939, 89.303256695009566, -637.06671072120571, -1428.8365567175017, -3113.2951228079887, -8881.5889351276946, -20696.443600183225, -9007.3131796291163, -5346.3306090002807, -1439.1675666408983, -1292.5663502582722, -654.09944760377277, -301.70227472838963, -97.440927522083996, -3.3329385156017457, -8.2027965131620153, -5.7742639473870323, -0.51069538319854635, 6.6402880636318233, 8.0126520330591013, 4.0882931682311625, -1.5210347396074151, -2.2335756869246048, -2.3288001542285928, -8.1315470965115093, -6.9403489082507335, -3.6748649027980562, 4.5937507427443531, 9.4957008241539675, 10.21057060635477, 11.676825499792781, 23.758858737501662, 20.288236987689611, 20.969766857125101, -333.51324485695324, -810.1584353673162, -2278.6820540988888, -5194.4090916202094, -7188.339898707115, -3154.0647285180166, -3175.2001764803263, -3085.2108289353805, -1226.2977859942123, -836.26206181721784, -301.22169990911055, -15.123294918373254, -11.324269109892445, -4.9992210979693361, -6.7152536525607003, -1.7063097661780617, 2.7727430774894133, 7.1357881321682148, 4.8669904821248817, 2.7536893948953045, -2.039934630711028, -0.54898928719761031, -2.9485150656567436, -3.1026085263061316, -1.3614545093317587, -0.47304719477880164, 4.0409079710738931, 6.2483313015723709, 8.8540252326547968, 18.802141623354618, 24.681352644731625, -6.1114787305120313, -148.49350684902615, -572.34886359995278, -1663.447165744248, -3308.6059534728529, -4493.8282478995061, -3720.0991836319017, -3323.4413322476125, -2223.3326338682518, -1347.5218927383742, -402.86472873295924, -179.07785660663581, -42.171627369153548, 13.024576486879551, -6.680339136637107, -4.3910663300422375, -1.9843645852297727, 2.2081255979025864, 3.4357055351949564, 4.8667397989738959, -0.0088018165553918268, -1.2900498248809058, -2.2230696316747851, -0.79613102395178958, -2.1003135650570957, -0.12607857026311342, 0.39928478103703097, 3.6189445517483683, 5.5230847011321824, 8.0807144322734796, 9.6537837209938342, 14.647883903859292, 41.761171107733581, -2.5048396429986766, -288.68438568639834, -1058.7748743456032, -2111.6481404168812, -2853.5518466904464, -2206.4742388833251, -2207.4882969003411, -1427.0600295974209, -607.97311048711572, -283.75431628355585, -25.222873313531675, -11.21903778037437, -8.3653822807976148, 1.9503276148055415, -4.8653324939916756, -1.0558165909594248, 0.18037835028025548, 3.7232300368774149, 2.6260151255238955, 1.901747650437611, -2.157984497724208, -1.9174482807780493, -2.671365924063863, -1.6822520344543337, -1.7835969801453151, 0.50013744114287995, 2.3612666445612516, 3.9892729615099713, 5.0282597338489978, 4.3849613992965208, 7.5675449146459712, 26.738330274504211, 30.293009711209869, -72.365238046453968, -397.03998761961856, -1129.7740740979677, -1877.1475049531305, -1015.8170093531105, -757.33856581211364, -464.04986763483271, -221.8093865245269, -66.670140953208971, -32.688631361988044, 12.245388279073117, -2.09491941357581, -4.9214217924247272, -0.76863227802399692, -1.3611346863617457, 0.59203001318831738, 2.3940543871676745, 2.1386535528573569, 0.12698658321630202, -0.36055346759858353, -1.509631760657328, -0.37490601010058217, -1.4076418772333708, -0.9909556252137327, 0.025704615807234758, 1.7006413859335137, 2.4101241863335301, 2.7230446482899899, 4.8975474263529586, 5.5799176422335819, 7.3823613929523022, 3.3531473980019464, -7.0947231292717241, -129.95057654055665, -447.33256260550814, -801.49855315264267, -297.71280467242298, -206.25666421819534, -105.85720001872387, -40.587336797783266, -19.033005269759897, 0.68623525685047748, -2.224754122223199, 2.8686428937153541, -1.3772856826259623, -3.7001182860738422, 0.56033030111271653, 0.31649576481826269, 2.6435570864758695, 2.0729019173667451, 1.3896745329326239, -1.1733083260901866, -0.5564284933709801, -0.75319429727185228, -0.16542223594150865, -0.34981510145177358, 0.63947101827441399, 0.64495136714903334, 1.5357324193076427, 2.8130362926385226, 4.2845415972556511, 3.3415574201637508, 1.8747628167747612, 4.3092019872505318, 1.2280777000161127, -53.113548920223614, -153.12296297306594, -262.59106890839882, -78.507966752468647, -44.713956729763169, -24.503242066462356, -11.422688403833899, -6.8324882374101472, -1.9389416594991726, 2.3416848160301655, -1.9581076589813595, 0.65441624739147974, -1.6215192060328243, -3.0886268279599727, 2.5574024719687731, 2.5859312055320047, 3.582324284715654, 2.3851708003164411, 0.41148866509477899, -1.7870448740379692, 0.35867475608513461, -0.33833230756510146, 0.72134917870519866, -0.6451343286468626, -0.036676325952571386, 1.8806785141996829, 3.0459530955995717, 3.0361534846987768, 1.8248078988499765, 2.0278729258957484, 1.4298438030821454, 1.444150632114136, -16.470770345398158, -59.038387406403551, -81.624687331130716, -41.65158074717607, -20.04858945819673, -26.796686775361913, -13.274828683787613, -5.4849410264677898, -1.7682797425272327, 0.51276950901621554, 0.11701161368370352, -2.1525887062494076, -0.35663258536781867, -0.3882693848937121, -2.5566610369397282, 6.5139128293303541, 4.1537964250038213, 2.1778507792771808, 0.67618078211604771, 0.67271760119275736, -0.033223712968477391, 1.7891382881043305, 0.76549003012129324, -1.8840461990319548, 0.62764371336603419, 2.9500669911593334, 2.7998549031057309, 2.7114466415734606, 2.640497491382968, 2.5087646302130264, 0.3613507110411972, -0.85975587552377708, -5.8993661554875496, -19.483874473281006, -46.656198806892085, -42.447185502078959, -49.475399988407517, -28.809040802191632, -23.364991274814315, -9.3720360014436217, -2.193549633075087, 0.73237790527535407, -0.60287176352488314, -1.0672361910519921, -3.8374461384037328, 0.81264916316705227, 3.7024783733454592, -2.2274307006673761, 12.171761179906976, 2.6484997231173142, 2.1242155181960216, 1.3916869062247985, 3.2969221728544564, 0.14147762112210061, -1.2659388719629114, 1.2983452624583423, 2.4646463691490883, 1.8819178233751466, 2.4699197782172551, 3.4105600445409938, 3.476877662739366, 1.970602508408192, 0.54569379437115284, -0.61503488296082265, -1.584537886719974, -9.9108851118855448, -17.968893142628509, 0.83280248396047341, -16.804391379900096, -34.94566909960443, -18.287776152890835, -10.19076861522101, -2.3659355754892188, 0.38430207827148843, -0.39175809943359002, -2.0786620762717161, -2.1066158183404973, -4.0664292874937455, 5.1056392812224729, 9.4711485160420441, -2.577327881134023, 13.563457368659881, 5.4454444116217209, 3.0810071966308192, 3.71409458782056, -2.7028450063821525, 1.3893389983926554, 5.0295677911697716, 2.0512141006459763, 0.57687440104333121, 3.1399874906463121, 4.3044361492909653, 3.2286926050373941, 2.0294536549063102, -1.2648718051872285, 0.81982278416560761, 5.1937461344056883, 4.5660530070978913, -2.5751982814314349, 10.842808636227273, -2.7634934625905125, -4.7410363255116081, -13.231297049532179, -1.2392069417375811, 0.57695677140757395, 1.6572428400911725, -0.80487566941313171, -2.1976406054664008, -2.9337382106235617, -0.97696074341019468, -0.52039830113476337, 8.6932746740913363, 18.008772340009436, -6.3894706762347742, 16.656214263229323, 5.6480128145892756, -2.6420757676626341, 6.9832538798624686, 8.7117753152913409, 2.944231966553327, -0.4194257648970201, 1.9464964791115495, 2.8117062685871983, 3.586606822562346, 3.6410340078674697, 2.1750438821370093, 0.92746135521083628, -0.10515597578954901, 10.916870623975495, 22.695665816423684, 26.922229107827643, 56.766547106622895, 34.346379481364103, 8.0209890672230593, 4.2276867493724737, 2.0129650120803855, 4.5721973792850843, 1.7026114564114816, -0.10193290249876912, -1.9877285465951933, -1.4091416884493304, -1.0407935339809435, 4.6927135104950821, 4.461866465996299, 13.14685287043932, 23.490161756370188, -8.5448676586843408, 5.7639040157862622, 6.7103974452754578, 11.090643871879529, 8.6117964749879281, 0.95828374077, 2.8859143014026349, 1.6803595914225926, 1.5724318132354216, 2.3664842485474589, 3.3844724421254813, 2.8754034241014996, 0.81420697505183059, 3.4592633965370854, 8.5418678989119741, 26.408180301615612, 46.472433795130719, 15.748155014076561, 18.939305693948317, 18.355423454953527, 7.4385947937208252, 6.8421582395566496, 3.8284829441665011, 2.3084513014265475, 0.014383588041353481, -0.70170837590258439, -0.9519271341888802, 0.60488638387036897, 4.7316501322768225, 11.640012070252736, 11.084534895769892, 7.9427552323827459, 17.090358547431578, -4.0062765415124373, 18.903471314461139, 10.522914852414784, -0.31727085194714888, 8.1914062421872558, 5.5678768421215832, 1.9515757898119943, 0.13204460835173984, 0.94686979396028259, 2.2566984460298456, 3.5582629306092612, 2.7150237945754423, -0.038191379039643265, 6.3090662882758242, 18.822434458740766, 20.387061197767007, 34.210424610695611, 25.78016711295075, 13.422328957688888, 4.2578162502068047, 2.3122896178400203, 4.1892680028045364, 2.2592478817037658, 0.95372259584702335, -0.47653425908969432, 0.069240128911087023, 0.91781179579556105, 6.6018505246928774, 10.152138543237006, 11.530381877152177, 5.6211304516254526, 4.7909070280413646, 35.867989503906792, 4.7909070280413584, 5.6211304516254428, 11.530381877152157, 10.152138543237017, 6.6018505246928978, 0.91781179579556504, 0.069240128911081333, -0.47653425908969432, 0.95372259584699437, 2.2592478817037476, 4.1892680028045142, 2.3122896178399985, 4.2578162502067478, 13.422328957688848, 25.780167112950689, 15.74815501407811, 20.387061197767874, 18.822434458741888, 6.309066288276548, -0.038191379039562191, 2.7150237945755555, 3.5582629306093274, 2.2566984460298958, 0.94686979396029702, 0.1320446083517558, 1.9515757898119841, 5.5678768421215636, 8.1914062421872096, -0.31727085194714522, 10.522914852414772, 18.903471314461111, -4.0062765415123884, 17.090358547431556, 7.9427552323827513, 11.084534895769902, 11.640012070252746, 4.7316501322768385, 0.60488638387038995, -0.9519271341888812, -0.70170837590259716, 0.014383588041281273, 2.3084513014264751, 3.8284829441663635, 6.8421582395566762, 7.4385947937204353, 18.355423454952824, 18.939305693949098, 56.76654710662406, 46.472433795132453, 26.408180301616227, 8.5418678989122103, 3.4592633965371484, 0.81420697505187978, 2.8754034241015152, 3.3844724421254879, 2.3664842485474735, 1.572431813235436, 1.6803595914225982, 2.8859143014026083, 0.95828374076997469, 8.6117964749878801, 11.090643871879506, 6.7103974452754693, 5.7639040157862587, -8.5448676586843018, 23.490161756370185, 13.146852870439265, 4.4618664659962768, 4.6927135104951034, -1.0407935339809418, -1.4091416884493408, -1.9877285465952099, -0.10193290249882341, 1.7026114564114307, 4.5721973792850434, 2.0129650120803833, 4.2276867493724772, 8.0209890672234039, 34.346379481364394, 10.842808636228447, 26.9222291078285, 22.695665816424683, 10.916870623975989, -0.10515597578943024, 0.92746135521090112, 2.1750438821369982, 3.6410340078674537, 3.5866068225623455, 2.8117062685872063, 1.9464964791115584, -0.41942576489699973, 2.9442319665532848, 8.7117753152913178, 6.9832538798624677, -2.6420757676626758, 5.6480128145892872, 16.656214263229302, -6.389470676234752, 18.008772340009443, 8.6932746740913274, -0.52039830113473562, -0.97696074341019512, -2.9337382106235728, -2.1976406054664195, -0.80487566941320732, 1.657242840091119, 0.57695677140755675, -1.2392069417374179, -13.231297049531948, -4.7410363255113248, -2.7634934625894938, 0.83280248396082224, -2.5751982814309775, 4.566053007098211, 5.1937461344059415, 0.81982278416574916, -1.2648718051872136, 2.0294536549062832, 3.2286926050373275, 4.3044361492909653, 3.1399874906463054, 0.57687440104334498, 2.0512141006459621, 5.0295677911697396, 1.3893389983926545, -2.7028450063821756, 3.7140945878205622, 3.0810071966308161, 5.4454444116217395, 13.563457368659845, -2.5773278811340234, 9.4711485160420441, 5.1056392812224614, -4.0664292874937296, -2.1066158183405044, -2.0786620762717254, -0.39175809943363327, 0.38430207827145285, -2.3659355754891784, -10.190768615220893, -18.287776152890569, -34.94566909960389, -16.804391379899673, -42.447185502078064, -17.968893142627813, -9.910885111884598, -1.5845378867194357, -0.61503488296060749, 0.5456937943712441, 1.9706025084081269, 3.4768776627392723, 3.4105600445409681, 2.4699197782172639, 1.881917823375139, 2.4646463691490985, 1.2983452624583438, -1.2659388719629485, 0.1414776211221116, 3.2969221728544715, 1.3916869062248129, 2.1242155181960229, 2.6484997231173293, 12.171761179906973, -2.2274307006673681, 3.702478373345508, 0.81264916316704883, -3.8374461384037382, -1.0672361910520076, -0.60287176352493688, 0.73237790527531033, -2.1935496330750563, -9.3720360014434689, -23.364991274814056, -28.809040802191326, -49.47539998840697, -41.651580747175068, -46.656198806890998, -19.483874473280501, -5.8993661554872627, -0.85975587552355426, 0.36135071104124949, 2.5087646302129953, 2.6404974913828889, 2.7114466415734491, 2.7998549031056945, 2.9500669911593249, 0.62764371336605218, -1.8840461990319775, 0.76549003012129535, 1.789138288104325, -0.033223712968466615, 0.67271760119275215, 0.67618078211606658, 2.1778507792771671, 4.1537964250038266, 6.5139128293303603, -2.5566610369397242, -0.38826938489369667, -0.35663258536783948, -2.1525887062494129, 0.11701161368368215, 0.51276950901619689, -1.7682797425271899, -5.4849410264677143, -13.274828683787417, -26.796686775361572, -20.048589458196275, -78.507966752466459, -81.624687331128925, -59.038387406402052, -16.470770345397689, 1.4441506321142048, 1.429843803082246, 2.0278729258956907, 1.8248078988499317, 3.0361534846987319, 3.045953095599546, 1.8806785141996951, -0.036676325952591224, -0.64513432864685583, 0.72134917870519299, -0.33833230756510668, 0.35867475608511745, -1.7870448740379619, 0.41148866509475018, 2.385170800316434, 3.582324284715646, 2.5859312055320172, 2.5574024719687887, -3.08862682795997, -1.6215192060328063, 0.65441624739145521, -1.9581076589813555, 2.3416848160301531, -1.9389416594989646, -6.8324882374098541, -11.422688403833355, -24.503242066461048, -44.713956729761051, -297.71280467242298, -262.59106890839888, -153.12296297306594, -53.113548920223877, 1.2280777000160852, 4.3092019872504084, 1.8747628167747172, 3.341557420163666, 4.2845415972556511, 2.8130362926385151, 1.5357324193076258, 0.64495136714903156, 0.63947101827441044, -0.34981510145179595, -0.16542223594153913, -0.75319429727190634, -0.5564284933709801, -1.1733083260902135, 1.3896745329326132, 2.0729019173667376, 2.6435570864758655, 0.31649576481827513, 0.56033030111271809, -3.7001182860738244, -1.3772856826259623, 2.8686428937153425, -2.2247541222231662, 0.68623525685057685, -19.033005269759858, -40.587336797783074, -105.85720001872383, -206.25666421819477, -1015.8170093530997, -801.4985531526338, -447.3325626055032, -129.9505765405554, -7.094723129271765, 3.3531473980017035, 7.3823613929520073, 5.5799176422333412, 4.8975474263529168, 2.7230446482898696, 2.4101241863335168, 1.700641385933505, 0.025704615807253747, -0.99095562521376346, -1.4076418772333852, -0.37490601010063784, -1.5096317606573337, -0.36055346759863915, 0.12698658321626774, 2.1386535528573165, 2.3940543871676701, 0.59203001318833959, -1.3611346863617075, -0.7686322780239524, -4.9214217924247352, -2.0949194135756803, 12.245388279073195, -32.688631361987156, -66.670140953207678, -221.8093865245236, -464.04986763482748, -757.33856581210489, -2206.474238883316, -1877.1475049531243, -1129.7740740979648, -397.03998761961947, -72.365238046453996, 30.293009711209137, 26.738330274503873, 7.5675449146456106, 4.3849613992964835, 5.0282597338488833, 3.9892729615099154, 2.3612666445612378, 0.50013744114287839, -1.7835969801453351, -1.6822520344543537, -2.6713659240639043, -1.9174482807780469, -2.1579844977242066, 1.9017476504375719, 2.6260151255238871, 3.7232300368773963, 0.18037835028033014, -1.0558165909593593, -4.8653324939915077, 1.9503276148055297, -8.3653822807973572, -11.219037780374073, -25.222873313530549, -283.75431628355437, -607.97311048711254, -1427.0600295974182, -2207.4882969003352, -3720.099183631889, -2853.5518466904387, -2111.648140416873, -1058.7748743456016, -288.68438568639789, -2.5048396429994018, 41.761171107733141, 14.647883903858578, 9.6537837209937827, 8.0807144322732913, 5.5230847011321327, 3.6189445517483261, 0.3992847810370409, -0.12607857026309263, -2.1003135650570361, -0.79613102395168645, -2.2230696316747758, -1.2900498248808734, -0.0088018165554208834, 4.8667397989738888, 3.4357055351949497, 2.2081255979026997, -1.9843645852296314, -4.3910663300419372, -6.6803391366371141, 13.024576486880093, -42.171627369152944, -179.07785660663302, -402.86472873295685, -1347.5218927383694, -2223.332633868245, -3323.4413322476003, -3154.0647285180148, -4493.8282478995088, -3308.6059534728515, -1663.4471657442498, -572.34886359995289, -148.49350684902797, -6.1114787305125393, 24.681352644731046, 18.802141623354593, 8.8540252326545641, 6.2483313015722262, 4.0409079710738718, -0.47304719477879342, -1.361454509331699, -3.1026085263059842, -2.948515065656593, -0.5489892871976132, -2.0399346307109321, 2.7536893948952148, 4.8669904821248942, 7.1357881321682211, 2.7727430774895763, -1.706309766177841, -6.7152536525602784, -4.9992210979693477, -11.324269109891496, -15.123294918372496, -301.22169990910822, -836.26206181721659, -1226.2977859942089, -3085.2108289353782, -3175.2001764803231, -9007.3131796291, -7188.3398987071041, -5194.4090916202022, -2278.6820540988915, -810.15843536731495, -333.51324485695591, 20.969766857124615, 20.288236987688347, 23.758858737501669, 11.676825499792164, 10.210570606354567, 9.4957008241538698, 4.5937507427443718, -3.6748649027980855, -6.9403489082508045, -8.1315470965115626, -2.3288001542285697, -2.2335756869247856, -1.5210347396073984, 4.088293168231135, 8.0126520330591262, 6.6402880636320099, -0.51069538319843244, -5.7742639473864941, -8.2027965131620455, -3.3329385156007563, -97.440927522082632, -301.70227472838576, -654.09944760377232, -1292.5663502582681, -1439.1675666408923, -5346.3306090002598, -27232.421940549855, -20696.443600183229, -8881.5889351276946, -3113.2951228080024, -1428.8365567175017, -637.0667107212123, 89.303256695008088, -20.624592190099609, 25.446982376231595, -2.0330861649905447, 16.950197274587225, 14.857882580654767, 20.385879097388024, -7.8710994817946256, -1.9041291470930921, -18.745207674117459, -0.11803389887143546, -20.674418420848326, 10.030112101155776, -1.1889020916883362, 13.291351981828802, 1.9958373496879209, 6.472640746355359, -14.835941429972186, 15.63017417600328, -23.204353900286776, -49.325655652904786, -526.29225504526619, -42.22554400942483, -409.0173927639147, -6745.5682223604063, -15984.118662988625, -14789.032757371675, 2890.8320511623242, -8876.4278731043305, -3798.5470080468367, -816.05094481379706, -942.72760774203016, 34.134427334482538, -53.601071866949361, 18.961120931859348, -12.683126140049515, 15.4575031105396, 15.708115389403696, 29.148348103795954, -12.155673848712381, 0.82076815557010951, -11.664010623895932, -14.807142725465098, -16.625069210776097, -0.357968466821102, 1.860738389345522, 13.634662924808296, 6.8633911029604313, 4.1139030671065999, -5.4456740109950088, 4.6010715329523864, 33.024718339612249, -120.74864963582446, -488.33133225087175, -286.68893204831085, -866.78466658111245, -11739.029695619576, -31341.185848117751], "imag": [0.0, -38758.087655514835, 17548.085047269142, 6107.2151726624015, -1874.673387120311, 1102.4198144208276, 70.663498597697227, 246.50443360377355, 15.094404836632346, 61.578388193120794, -6.883850379905633, 17.433253862249003, -27.182352905748338, 10.205627484635695, -57.631165788617082, 3.5978635789949243, 0.0, -3.5978635789944389, 57.631165788617331, -10.205627484634785, 27.182352905748068, -17.433253862248129, 6.883850379906236, -61.578388193120603, -15.094404836632346, -246.50443360377048, -70.663498597698691, -1102.4198144208278, 1874.6733871203112, -6107.2151726624097, -17548.085047269135, 38758.087655514864, 21415.511526704078, 9240.4816801838842, 6140.0706338628515, 4606.7423967050836, -477.33409412636456, 106.10534760670754, 253.85827683649731, 118.670471872242, 60.852179067446961, 22.790809731222598, 16.992665274593527, 3.3051410229913314, -11.158748163655874, -19.125680216300069, -12.454719286949617, -13.739274709476872, 4.4649861577324996, -1.4030381833900449, 28.352674755287939, -0.67900523797834378, 10.299898240809684, 0.92198929608587377, 1.7353747463970652, -28.921613512340663, -62.077231813228479, -150.50951383829744, -214.24479740751684, -816.21574466320703, 274.1353961963593, -3254.3286688062722, -6340.0761451284025, 11789.651384311641, 10840.701965194425, 18380.248977426931, 3231.3822724351476, -461.44982475214084, -210.28695062763435, 162.42212696600188, 179.30887547689923, 113.80000983072934, 43.394725496932487, 24.59548477602943, 9.5064435172576207, 6.2249226907652995, -15.514190495563678, -15.67209469704693, -16.179758937655365, -0.44183444538403649, 3.28796177703477, 12.57005414423841, 4.7947040656811843, 5.5752197676029693, -1.566994278876134, 3.0671728952871886, -9.3006029966239439, -19.205045070959127, -56.939768493357462, -104.59324045979437, -209.92149032340299, -248.20433151041027, -867.92363746103479, -1299.0888976028032, 827.61688284819274, -3453.3010516440099, 2184.1299326736716, 343.81610498084558, 1430.9649107108667, -397.20604751762147, -695.96261474413006, 272.38382351444113, 181.43163787734565, 64.570588674311324, 29.183435066681643, 16.420203889130576, 10.051165980763317, 3.8132998567254699, -5.2200576234926608, -12.843645059741645, -16.574215370008311, -6.8948411718648668, 5.7853993354930253, 6.7615499928711884, 6.3258793363865982, 6.2779141420300757, 7.316455816584333, 0.11325917153592484, -12.472105947256997, -26.315486653091728, -48.315266721271882, -96.05176533673017, -133.18984159990899, -353.39952612993443, 150.90670251969735, -622.62775933130001, -1461.5017842629939, 2621.2839732861958, -797.42142339187535, -1141.9271710506443, -1665.2932495998289, -238.3366310615267, 49.923170262409073, 61.506465075545492, 153.25086116745172, 46.446591336114025, 13.171326963991907, 10.42525251508628, 5.9093841314446687, 3.7481817410606739, -5.009304162269796, -8.3377118534842136, -11.383176063308646, -7.2904568591879206, 0.055102663998529922, 6.2100452165049633, 0.50258781153530074, 8.7133201843540995, 8.0099491969619425, 3.408178127748358, -6.1241971022028396, -12.736128845291272, -45.232132533425755, -61.3791750629996, -153.42214558232837, -67.595097514570796, 85.625899103861244, -58.961155821254636, 56.883206971067992, -1105.7125877167775, -1066.0901100808514, -1171.2701320923616, -223.1510166903665, -49.090655504704266, 242.13940044346495, 187.57398243385657, 37.630624824958112, 28.849867481961542, 8.4569554634773265, 4.9702839577388582, 4.4028115702250554, 1.4310556478305501, -1.929060150422355, -6.8702061592831818, -7.5557834297932249, -6.2828152868831211, -0.10870593803434039, -0.35173698335235887, 2.5520560959229499, 3.0896458550054593, 4.7505220002799033, 1.2377659738692817, -1.7806530124299274, -9.1879671692559626, -20.164632449396379, -65.591240653702698, -60.869480400000917, -62.271759486118263, -69.04223895420877, 113.44009243151515, -280.24622279593513, -361.29505764988915, -32.2389038646619, 397.42763261597736, 412.9673372382922, 359.76401050336045, 192.6210800054142, 122.25882006598455, 49.109708531705785, -0.83416770813231356, 2.4803036198391495, 2.5045331182816137, 2.1157075816863125, 2.0456835555591151, -1.3319639541688315, -4.1057658132159602, -5.2622609905014679, -3.122429370817716, -0.23490025627283884, 0.40862649299968534, 1.0190926814192749, 2.6652215067301066, 2.3902937959311288, 1.3072901204360872, -2.1976906085986245, -4.7205289930149936, -17.964658686821839, -21.918559933832515, -40.854552179344822, -68.24351076369831, 25.856495589804037, -73.74721318359471, 26.189735785049756, -56.726426890704197, 461.88238037931336, 400.36625478870423, 367.42140066372616, 233.95717316464078, 120.24788693419019, 56.86229814651989, 16.528423808469729, 5.5081763037408891, -2.7285347510623343, 0.91768473485835012, 1.922818700657754, 0.85878662181529319, -0.082031723657331246, -3.1986596327501684, -2.7995613930163934, -2.624028681216124, 0.082235364558318216, 0.13384423623927519, 1.9947594371394528, 1.3437508199980643, 2.6398410865992954, 0.73758290379789837, -0.13078900915043976, -4.4953343292506398, -5.1950335909144894, -13.12242317098767, -25.523369493146305, -12.192196214097944, -25.868477512213353, 2.9066782920883432, 34.106574161015573, 256.00130492151595, 208.58597838816522, 310.3347945923577, 177.03891975992664, 97.122360992021001, 48.488510187113192, 24.528917872852549, 4.6272034575157122, -1.3571647909533122, 0.20621269482631011, -0.40867746076362715, 0.99215767258594889, 1.5313768256641691, -0.052772985639764861, -1.5552847934304939, -2.8318141898835965, -1.44106038161314, -1.7221472209588695, 0.61786747800524422, 0.48048213041449506, 1.7161555169971148, 0.88689757979195871, 1.4761658864245926, -1.7252645996654892, -0.81528783024945528, -3.3158091950668926, -7.6513645380807835, -2.9281859927886749, -12.462674546124116, -7.4696827367159715, -23.236903073402107, 43.7319836231637, 92.321882041990349, 70.117668379783737, 34.226649356314077, 47.258739472197036, 25.375797504306092, 12.406583490274283, 8.6535618432690811, 1.0747519793409035, -0.44324044078252567, -1.7584707522262704, 0.72458607165998101, 0.70692065864217946, 0.77076345191259166, 1.0649069250197341, -2.7261985428418192, -1.9302074459527443, -3.3754250277859401, 0.50673349306549698, -0.64031672309299725, 1.374850007673434, 0.72950552648490297, 2.3325303094340692, -0.9986473214357906, 0.78195787446934228, -1.1999635798104886, -3.4858876190620522, -1.4991310089769327, -2.8433755069243221, 3.7638952884372583, 1.2400980139632869, -2.9542792497780144, 1.8234355680479359, 49.576244746235467, 19.014215780516388, 30.877310974744532, -1.1221271518157558, 7.8208026967228905, 2.609067592037944, 1.2521971880796572, -0.99505064345958283, -1.3975466814991453, -0.57338407820284554, -1.8697004151394911, 2.3700280505641378, 1.696784850403636, -0.61519740478736618, -1.3317994275810727, -4.2071746247346917, -0.85834734780410316, -1.4672332071937433, 2.6381100233578914, -2.4176769851497171, 2.0131074000190821, -1.6262628596018911, 3.9814331515508763, -0.027677673297514374, -2.444607041276003, -1.6150024285043403, -4.1227589144067673, -1.7068861549694658, 2.2919486155920237, 12.185386506158462, 9.103962312567619, 7.1597604706792799, -5.4087151249860161, 0.96974162117579055, -11.947201833901593, 6.6330620252490986, 2.1152085218133552, 3.546929348907518, 0.62283616740311709, -1.3522725353705505, -2.4444202103018355, -1.5690941230144015, -0.0069858778603680161, -2.2282653754616524, 3.8284308308873771, 3.1912913728027457, -5.5805618725494135, 0.13049495818795365, -3.5197176720292105, 1.8802124921714005, -2.6189977871286096, 2.1235611153433935, -7.1463089769422359, 4.7729314123471731, 2.1077672614040215, -0.81910125894631813, 0.72052624692713507, -3.4842402749887631, -4.1829115306886377, -4.3994325344570067, 3.0953565929079909, 11.949390330752637, 23.680136621529911, 21.558658775121675, 22.744598059672118, 24.943328767928129, 28.901352722188449, 12.814680673201753, 13.644932734111247, 5.45768556544121, 2.4025753394703617, -1.1673355625318591, -2.4971924284976894, -1.8952846661475429, -1.2927419412763479, 2.7902732019969552, -4.3477010834394934, 3.7423253621601038, 4.3959804108055893, -8.9257994152947724, 2.882370251254919, -5.0577698714645729, 3.1829717367300585, -13.324209534416688, 6.2785045354550411, -0.87489834284363188, -0.85263104321571348, 4.4885662153073236, -0.53110232172652128, -1.6389132121610095, -4.3945543864166812, -4.2936344828625694, 0.48745205753098192, 15.895360345460416, 25.169617383292081, 33.918445473292621, 23.996907911576923, 23.251277269359601, 5.1543156647143702, 18.554102826608389, 16.359265688234956, 10.231244633613841, 1.5587865083621433, -1.4683911434431964, -2.958105786087343, -1.5689869488245065, -0.96051225634847215, 1.7578951205789273, 6.6638352938822507, -9.4901775499106478, 4.1317473271038834, 10.951455398944859, -15.360897164532773, 5.739294741971535, -17.045217645164048, 5.8449684444103616, -3.5521886878464675, -7.3858280585812945, 5.7347340895196259, 0.4908832539545151, 0.98666637905349674, -1.0149409800154179, -1.6832477381822215, -2.5467748158366237, 2.0904065823844138, 13.443724261124899, 31.761133485201317, 33.671186166611122, 40.707191608760652, -1.1509826127936451, 21.096779572504321, 10.924705320167561, 7.3688776104039446, 6.4733533392666498, 1.1232923919614803, -2.4431302941492752, -2.7804484266994756, -1.6225398299131664, 0.6478030911844409, 2.5793951871330139, 3.1124056384095988, 9.3832743597685244, -14.195954313031031, -0.57608988546761064, 19.479390479219269, -31.200338855208866, 14.100113777774123, -5.3856662644378392, -10.946378631138824, 4.4142064356850845, -3.9066652322250062, 0.66844910598604979, 1.0227755630951001, 0.66137538568075327, -0.38567118503773246, 0.24821124990411303, 3.5872841231435211, 14.053276636456639, 24.260931372233497, 33.647459095648763, 7.6529271231588307, -9.2151377078706354, -38.311665858686638, -16.121399661234683, -5.9927868178298498, -2.7701365304211771, -3.7140088945870469, -3.0788396721523017, -3.0904878618769733, -1.8655827999533823, 0.43690140001808947, 4.1561194908680763, 4.3858952392085353, 2.7714027971729753, 9.257895969243517, -19.629364588289473, -14.072043519544888, 36.373196183604975, -13.61372365841147, -9.4583423311161248, 8.5284583277520429, -6.1744651457950592, -2.2310052363098367, -1.75629520897435, 1.1539693350814639, 1.7596902661237352, 1.8196834579374304, 2.022290334087173, 5.1646829084835781, 12.770276815017757, 24.46979490512981, 27.822785449092486, 29.828540342091252, 0.0, -3.7653763488297254, -24.757305904406468, -19.738984856989376, -8.2664619761594462, -4.6495144591838038, -3.656340919703911, -2.9147641885479052, -2.2830188616483764, -0.10916825448095578, 2.3916977668177819, 5.941240494184604, 2.1224657474819093, 3.9401472638367774, -2.1445277323266949, -10.774805376941604, 0.0, 10.774805376941531, 2.1445277323266829, -3.9401472638367951, -2.1224657474819155, -5.9412404941846173, -2.3916977668177926, 0.10916825448094437, 2.2830188616483764, 2.9147641885479065, 3.6563409197039234, 4.6495144591838136, 8.2664619761594498, 19.738984856989411, 24.75730590440644, 3.7653763488297773, 9.2151377078736516, -29.828540342087546, -27.822785449090652, -24.469794905129369, -12.770276815017642, -5.1646829084834636, -2.022290334087153, -1.8196834579374237, -1.7596902661237566, -1.1539693350814775, 1.7562952089743382, 2.2310052363098212, 6.1744651457950415, -8.5284583277521193, 9.4583423311161194, 13.613723658411436, -36.373196183604932, 14.07204351954484, 19.629364588289484, -9.2578959692435348, -2.7714027971730033, -4.3858952392085584, -4.1561194908680932, -0.43690140001811473, 1.8655827999533605, 3.0904878618769729, 3.0788396721523177, 3.7140088945872396, 2.7701365304214618, 5.9927868178306163, 16.121399661236502, 38.31166585868818, 1.1509826127964509, -7.6529271231568821, -33.647459095647825, -24.260931372233326, -14.053276636456571, -3.5872841231435073, -0.24821124990410889, 0.3856711850377551, -0.66137538568076071, -1.0227755630951023, -0.66844910598607266, 3.9066652322249751, -4.4142064356851165, 10.946378631138813, 5.3856662644378339, -14.100113777774116, 31.200338855208855, -19.479390479219351, 0.57608988546757856, 14.195954313030994, -9.3832743597685617, -3.1124056384095939, -2.5793951871330338, -0.64780309118445645, 1.6225398299131557, 2.7804484266994689, 2.4431302941492916, -1.1232923919613498, -6.4733533392663958, -7.368877610403441, -10.924705320166419, -21.096779572501951, -23.251277269357679, -40.707191608758833, -33.671186166610063, -31.761133485200901, -13.443724261124748, -2.0904065823843769, 2.5467748158366237, 1.6832477381822348, 1.0149409800154132, -0.98666637905348697, -0.49088325395452825, -5.734734089519665, 7.3858280585813008, 3.5521886878464564, -5.8449684444103243, 17.045217645163998, -5.7392947419715155, 15.360897164532778, -10.951455398944907, -4.1317473271038754, 9.4901775499106655, -6.6638352938822702, -1.7578951205789377, 0.96051225634844795, 1.5689869488244914, 2.9581057860873381, 1.4683911434432237, -1.5587865083620118, -10.231244633613667, -16.359265688234554, -18.554102826607274, -5.1543156647129926, -24.943328767927714, -23.996907911576475, -33.918445473292081, -25.169617383291836, -15.895360345460304, -0.48745205753098297, 4.2936344828625552, 4.3945543864167149, 1.6389132121610113, 0.53110232172653837, -4.4885662153073405, 0.85263104321570904, 0.87489834284363122, -6.2785045354550046, 13.324209534416719, -3.1829717367300314, 5.0577698714645702, -2.8823702512549096, 8.9257994152947653, -4.3959804108056124, -3.742325362160086, 4.3477010834395236, -2.7902732019969543, 1.2927419412763401, 1.8952846661475349, 2.4971924284976934, 1.1673355625318764, -2.4025753394703346, -5.4576855654411656, -13.644932734111133, -12.814680673201632, -28.901352722188015, -0.96974162117503315, -22.744598059671098, -21.558658775121231, -23.680136621529623, -11.949390330752514, -3.0953565929079563, 4.3994325344570004, 4.1829115306886644, 3.4842402749887649, -0.72052624692711631, 0.81910125894632069, -2.1077672614040264, -4.772931412347166, 7.1463089769422288, -2.1235611153433602, 2.6189977871286789, -1.8802124921713912, 3.5197176720292407, -0.1304949581879572, 5.5805618725494606, -3.191291372802759, -3.8284308308873531, 2.228265375461667, 0.0069858778603283057, 1.5690941230143916, 2.4444202103018267, 1.3522725353705702, -0.62283616740308378, -3.546929348907534, -2.1152085218133783, -6.6330620252487682, 11.947201833901675, -19.014215780515311, 5.4087151249861485, -7.159760470678993, -9.1039623125675071, -12.18538650615837, -2.2919486155920032, 1.7068861549694805, 4.1227589144067789, 1.6150024285043441, 2.4446070412760443, 0.027677673297527423, -3.981433151550863, 1.6262628596018724, -2.0131074000190696, 2.4176769851497326, -2.6381100233578612, 1.4672332071937413, 0.85834734780414157, 4.2071746247347095, 1.3317994275810989, 0.61519740478738694, -1.6967848504036496, -2.3700280505641422, 1.8697004151394931, 0.5733840782028331, 1.397546681499154, 0.99505064345958893, -1.2521971880796428, -2.6090675920379729, -7.8208026967229012, 1.1221271518159068, -30.877310974743335, -70.117668379782501, -49.576244746235311, -1.8234355680484657, 2.9542792497778261, -1.2400980139631994, -3.7638952884372125, 2.8433755069243154, 1.499131008976947, 3.4858876190620642, 1.1999635798105424, -0.78195787446931964, 0.9986473214357916, -2.332530309434083, -0.72950552648488864, -1.3748500076734225, 0.64031672309302556, -0.50673349306550342, 3.375425027785985, 1.930207445952772, 2.7261985428418698, -1.0649069250197167, -0.77076345191255435, -0.7069206586422051, -0.72458607165999755, 1.7584707522262737, 0.44324044078250502, -1.0747519793408324, -8.6535618432689372, -12.406583490274217, -25.375797504305602, -47.258739472196019, -34.226649356312784, -208.58597838816522, -92.321882041990833, -43.731983623163735, 23.236903073401958, 7.4696827367159822, 12.462674546124104, 2.9281859927886771, 7.6513645380808271, 3.3158091950668926, 0.8152878302494978, 1.7252645996655027, -1.4761658864245817, -0.88689757979195827, -1.7161555169970975, -0.48048213041447491, -0.61786747800518715, 1.7221472209588695, 1.4410603816132017, 2.8318141898836315, 1.5552847934305372, 0.05277298563978073, -1.5313768256641445, -0.9921576725859278, 0.40867746076360606, -0.20621269482631011, 1.3571647909533708, -4.6272034575156908, -24.528917872852457, -48.488510187113178, -97.122360992020845, -177.03891975992676, -310.33479459235781, -461.88238037931535, -256.00130492151709, -34.106574161017335, -2.9066782920893011, 25.868477512213314, 12.192196214097933, 25.523369493146241, 13.12242317098773, 5.1950335909144911, 4.4953343292507366, 0.13078900915048275, -0.73758290379785463, -2.6398410865992936, -1.3437508199980366, -1.9947594371394133, -0.13384423623915356, -0.082235364558330679, 2.6240286812162581, 2.7995613930164374, 3.1986596327502643, 0.082031723657369299, -0.85878662181523746, -1.9228187006577324, -0.91768473485829727, 2.7285347510623108, -5.5081763037407097, -16.528423808469462, -56.862298146519464, -120.24788693418984, -233.9571731646403, -367.42140066372525, -400.36625478870656, 32.238903864660138, 56.726426890699642, -26.189735785051667, 73.747213183594084, -25.856495589804108, 68.243510763698637, 40.854552179345092, 21.918559933832821, 17.964658686821831, 4.7205289930151793, 2.1976906085987129, -1.3072901204360032, -2.3902937959311101, -2.6652215067300165, -1.0190926814191563, -0.40862649299943438, 0.23490025627283342, 3.1224293708179411, 5.2622609905015993, 4.1057658132160988, 1.331963954168899, -2.0456835555590454, -2.1157075816862583, -2.504533118281568, -2.4803036198391473, 0.83416770813248287, -49.109708531705543, -122.25882006598383, -192.62108000541431, -359.76401050336045, -412.96733723829362, -397.42763261597815, 1066.0901100808455, 361.29505764988636, 280.2462227959299, -113.44009243151743, 69.042238954208585, 62.271759486118853, 60.869480400001216, 65.591240653703366, 20.164632449396354, 9.1879671692563107, 1.7806530124300617, -1.2377659738691233, -4.7505220002798652, -3.0896458550052697, -2.5520560959227772, 0.35173698335277165, 0.10870593803433028, 6.2828152868834488, 7.5557834297934026, 6.8702061592834163, 1.9290601504224327, -1.4310556478304128, -4.402811570224995, -4.9702839577387659, -8.4569554634772928, -28.849867481960956, -37.630624824957771, -187.57398243385583, -242.13940044346546, 49.090655504701473, 223.15101669036463, 1171.270132092355, 797.42142339187455, 1105.712587716775, -56.883206971068894, 58.961155821254195, -85.625899103861229, 67.595097514571449, 153.42214558232899, 61.379175063000453, 45.232132533425769, 12.736128845291734, 6.1241971022030093, -3.4081781277481404, -8.0099491969618857, -8.7133201843538846, -0.50258781153503296, -6.2100452165045663, -0.055102663998530817, 7.2904568591883807, 11.383176063308918, 8.3377118534845209, 5.009304162269923, -3.7481817410605087, -5.9093841314446331, -10.425252515086191, -13.171326963991898, -46.446591336113507, -153.25086116745101, -61.506465075545563, -49.92317026240935, 238.33663106152528, 1665.2932495998259, 1141.9271710506428, -2184.1299326736644, -2621.2839732861944, 1461.5017842629866, 622.62775933129569, -150.90670251969709, 353.39952612993454, 133.18984159990904, 96.051765336731378, 48.315266721271847, 26.315486653092378, 12.47210594725734, -0.11325917153558851, -7.3164558165842362, -6.2779141420297728, -6.325879336386472, -6.7615499928705614, -5.7853993354930182, 6.8948411718656626, 16.574215370008741, 12.843645059742064, 5.220057623492746, -3.813299856725167, -10.051165980763182, -16.420203889130285, -29.183435066681557, -64.570588674310201, -181.43163787734505, -272.38382351444022, 695.96261474412938, 397.20604751762363, -1430.9649107108592, -343.81610498084137, -10840.70196519443, 3453.3010516439876, -827.61688284819604, 1299.088897602802, 867.92363746103354, 248.20433151041067, 209.92149032340356, 104.5932404597956, 56.939768493357427, 19.205045070960029, 9.3006029966243737, -3.0671728952866175, 1.5669942788764133, -5.5752197676024959, -4.7947040656806426, -12.570054144236753, -3.2879617770347638, 0.44183444538609318, 16.179758937656128, 15.672094697047777, 15.514190495563801, -6.2249226907648021, -9.506443517257205, -24.595484776028343, -43.394725496932452, -113.80000983072682, -179.30887547689812, -162.42212696599955, 210.28695062763467, 461.44982475214965, -3231.3822724351485, -18380.248977426934, -21415.511526704078, -11789.651384311637, 6340.0761451283952, 3254.3286688062612, -274.13539619635947, 816.21574466320624, 214.24479740751747, 150.50951383829917, 62.077231813228565, 28.921613512340514, -1.7353747463964819, -0.92198929608524804, -10.299898240809465, 0.679005237978899, -28.352674755287008, 1.4030381833925814, -4.4649861577325289, 13.739274709477487, 12.454719286950338, 19.12568021630095, 11.158748163655963, -3.3051410229907021, -16.992665274592852, -22.790809731221124, -60.852179067446897, -118.67047187223945, -253.85827683649717, -106.10534760670436, 477.33409412636507, -4606.7423967050645, -6140.0706338628543, -9240.4816801839206]}};

var nose_filter = {"real": [3.0408379415611857, 0.37822261363137938, 1.1747173276627942, 0.87791572866957501, 0.27429578524536991, -0.26015038230887205, -0.04589694540462394, 0.18194913988848616, -0.19035992880648842, -0.050064472206627651, -0.016354960260506177, 0.073013903204916478, 0.15053197342937383, -0.47378158951033317, -0.33333577915227425, -0.30434085338299055, 0.26372284406307878, -0.30434085338299449, -0.33333577915227836, -0.47378158951033028, 0.15053197342937505, 0.073013903204915576, -0.016354960260505706, -0.050064472206628768, -0.19035992880648842, 0.18194913988848541, -0.045896945404624932, -0.2601503823088735, 0.27429578524536952, 0.87791572866957457, 1.1747173276627942, 0.3782226136313796, 1.5638480130127614, -1.0502161590016221, -0.28144140655806793, 0.66007876209063499, 0.25575295594566605, -0.11471557758718753, 0.22751157962613866, -0.29100003355994186, 0.29242994865853178, 0.14950061311078749, -0.02214037256893809, 0.034503572794411914, -0.17412889405901469, 0.060297128338254534, -0.49717312826403576, -0.10585857030501357, 0.082780177430083327, -0.11056584899062352, -0.72499416196392785, -0.15612863751308359, -0.36586758725441215, -0.19718551141955715, -0.043434328775718851, -0.060442748560529294, 0.1383233017601592, -0.071714399164362744, 0.31725814504248484, 0.16801904131477274, 0.58675004339129755, 1.5155025161072819, 0.99232752650122635, -1.0129349058609656, -1.6725083187014358, -0.66077224091757791, 2.2217962254133496, 0.98390492917013095, -0.16319024909703178, 0.67271651276019184, 0.16380771710007475, 0.21989373735679621, -0.12296413131763459, -0.18224776807046256, -0.011168077595514938, 0.10364961453623285, 0.1359801303077682, -0.26339593722715721, 0.039396952561874886, -0.33866696253626483, -0.0043101841409601402, 0.17740469505625342, -0.10830858623812685, -0.33186051211466239, 0.12060535717228799, 0.084703474730635803, -0.086262426064740078, -0.1297477439897661, -0.28426475792188655, 0.21965961682575447, 0.24955999100642301, 0.46804088594167448, -0.46946217188769823, -0.31724338121882617, 1.7716903674840139, 0.56577881124465312, 0.71512595047089234, 0.4910867492003736, 0.92310119575914651, -1.0939934957719639, 0.18102793706565934, 0.35484595526186652, 0.48676804973393767, -0.097923922056211768, -7.8200063684236368e-05, -0.016095705887683227, -0.084263209727683391, 0.0080331646697531477, -0.044853168166469837, 0.0062170702455977547, -0.15890945005602863, 0.22815908460498888, 0.17110516400703918, -0.29052216822588434, -0.18224178792918044, -0.018421573557969844, 0.032535239746583795, -0.08121081614537759, -0.029175915115094032, 0.092929862040843081, 0.16824405476099044, -0.24679227625704581, 0.00030176170486908785, 0.023943010115746295, -0.43281940369171445, -0.57166836623813821, 1.2482467538506352, 0.74385331371246666, 0.54787745216002559, 0.92898941300038174, 0.54473301805335128, -0.4877077226718825, -0.40370312470951597, 0.39096527623299848, 0.12644205243911047, 0.0424168022733412, 0.049219693586430309, -0.077748186566067037, -0.043614575991677208, -0.0041635061718157101, 0.07897222152752259, 0.053944973270972973, 0.11232623315704468, -0.070445625631503542, -0.072057201177642652, 0.12706805404252855, -0.13757198545862262, -0.31639223989443899, -0.029240486244660611, 0.10973045554309782, 0.04102655016489614, 0.01891084247324943, -0.056922369420476487, 0.030805208457151782, -0.1512000567754726, -0.058122663069861934, -0.30506910575481916, -0.79033868813295383, 0.026308878650124864, 1.7521122327973906, 0.64566220514793682, 0.40042515638418263, -0.33461208848408402, -0.55369429571770823, -0.030140868003777126, 0.27230784814155334, 0.008194429787378334, -0.030645866021173498, 0.023928227792328404, 0.090706510487419734, -0.021569631345745226, -0.0064127815367693367, -0.026343653609827326, 0.0079365608693974798, -0.18791450411345401, 0.14319521757460194, 0.17003550871316017, -0.24661106106331201, -0.21167593067635404, -0.098206750946426211, -0.048592759447365123, 0.0028129255950110439, 0.049868939755416952, 0.039023237394102607, -0.0036267311717218496, -0.12930461632538415, -0.067411320951837855, 0.010801205387038189, 0.074931291451028059, 0.0657071501308885, -0.22930577035731903, -0.34894672904561169, 0.37107135970432037, 0.49136473213042475, 0.10645611255411164, -0.27741376367012294, -0.015474080963115254, 0.13417678111594294, -0.00046677178847574514, -0.064152245495751381, 0.038292630722847554, 0.017696001575747813, 0.0052157631901947011, -0.023883294001795573, 0.00060518848897931612, -0.088395093514235953, -0.11757758027246699, -0.019555697374511325, 0.025650630137194243, -0.043746931993730094, -0.08846438922222799, -0.074442233736365312, -0.0099104052825428144, 0.064871673248634965, 0.03524540038796406, -0.0065163090427015676, -0.065286881502250399, 0.023130909787941502, -0.028452880392855154, -0.098638256951482817, -0.23382813425811513, -0.077933249962103476, 0.069575788839216612, 0.86635491100693507, 0.33668792873864722, 0.34253529215971401, -0.019122146869457048, -0.016521364547457899, 0.098161425946316522, -0.011130337821465129, -0.092543539386829035, -0.0046973120649884213, -0.0086885172531639618, 0.041915865623990751, 0.004043623749362439, -0.037907101781325205, -0.03902357631677511, -0.037690963997300889, -0.11419210623041842, -0.076732726183972602, 0.12573571356763677, 0.012633232837618465, -0.098942005293094951, -0.061888601165125671, -0.0090012900880717846, -0.014247675993027883, 0.027023228844142398, -0.0050282774165556453, -0.031667371615742887, -0.033818612421867206, -0.01148054478950835, 0.002410610826462259, 0.084402385062259444, 0.069824545029654947, 0.043930202648898894, 0.078872059827297045, 0.055053359776043469, 0.0133618922103162, 0.068453834537836655, 0.081701490128889276, -0.023034972903402569, -0.042406682273060693, 0.035148729718712253, -0.037569795749083354, -0.0041828274568459145, 0.012961699649937737, -0.015475583648045266, -0.027857672235467607, 0.011169867646763214, -0.052725469767566695, -0.0070148730067698924, 0.053188940442296044, -0.095289423698368528, 0.016377276604450954, -0.015232023889946105, -0.077682201861009353, -0.048207693014304241, 0.014396940553395536, 0.021075876818278678, -0.0024069559974744716, -0.016758259649352489, 0.031865879706987753, 0.032824623168326933, -0.074182732572421473, -0.080036865363297197, 0.055652716802045685, 0.11130862970905192, 0.072952972838101024, 0.035098396968263772, 0.070242479721294437, 0.040747896169172335, -0.022459274904977577, 0.014257984954846613, 0.019887732012022184, -0.040811004345713692, 0.0088191619820225595, 0.012579825412037176, 0.0010521231241174983, 0.006430724322423028, -0.0107697788586532, -0.065313535534231901, -0.062769573271966861, 0.11452944472315789, 0.040092306883550234, 0.12236977033818973, 0.13624403896529741, 0.027359429809611827, -0.0259369720098807, -0.021419082531908291, -0.02797214703330133, 0.0080320798501609496, 0.0013100558771969473, -0.0052561866064455981, -0.0097375289490629017, 0.028455863356249757, 0.056425701741664613, -0.0014166564531825356, -0.032528933027316242, -0.019619112630340951, 0.065700689463789611, -0.027574493612476551, -0.032810042710946841, -0.021337213333243964, 0.019592990080295629, -0.019759750092557201, -0.030135000999364853, 0.031698488621630008, 0.023522054710864718, -0.021766544372719836, -0.0029827434432790761, 0.0078373508878122541, -0.0028057606437618767, -0.033232550782043478, -0.070830818977105636, 0.059080455669844649, 0.36951320092865036, 0.091411128665944044, 0.16404233417264649, 0.062598270207454218, 0.044986403519809939, -0.081510896741027974, -0.042341618007147169, -0.019737461729971092, -0.0048974001169366831, 0.01654258945512711, 0.0088012977267579451, -0.013696041496545335, -0.0020268100930256635, 0.015845305908809133, 0.016458612619479462, 0.00059474001274681517, -0.078529066256991353, -0.013402803779002156, -0.0036013299995064228, 0.037573591582025043, -0.0076636494655425947, -0.0021144243161753088, 0.032140257903604356, 0.0203960516207237, -0.013294834505552555, 0.0021732333351695376, 0.015223562704661827, -0.01560949450401263, 0.015060609589555461, 0.099241248305729085, -0.19173261262163863, 0.2450151004066432, 0.26383919410790774, 0.33963060937430933, 0.34586223870135113, 0.1799263961717959, 0.13137374163691276, -0.036493858716968031, -0.041981936023927684, -0.060258932305754208, -0.0099079010405710068, -0.010024579181759819, 0.016637976300589805, 0.031629106230310143, -0.011441752446030828, -0.010113005489671789, -0.027490450999295705, -0.018258671855796018, 0.061296263921274532, 0.10180457538537498, 0.097647442588889397, 0.063246459754600901, 0.0018146068702083835, -0.012539173975430248, -0.008345642545901014, 0.020763503842579332, 0.035996162307667869, -0.015675575409266479, -0.029662747125522582, 0.021312770128680401, 0.08274253615935892, -0.10682054954404013, -0.033729052458342255, -0.12662108035586636, 0.18053751384272299, 0.70940599530087467, -0.21337246968950196, 0.09763637724258438, 0.15345959634626791, -0.11690110107335749, 0.030098075283007168, 0.034186076429122053, -0.021402902917041923, 0.0046349096026103891, 0.011776544425663813, -0.0089673934626629329, 0.025701507905379287, -0.029333520957471802, 0.0051215906448292756, -9.6207917787476249e-05, -0.027988212781709806, 0.093695296747695708, 0.10174972110658871, 0.1657472048824174, 0.097917377942654052, 0.0075790364114050627, 0.031051039914505564, 0.015692601846482499, -0.015197940538429407, 0.026154427883432859, 0.038178927860434288, 0.07391023019778703, 0.0062621769249755375, 0.14786394857966245, -0.24133125024592791, 0.31944609486771169, 0.50715637065140251, 0.3628700351691248, 1.3060302403517683, -0.51467834215318464, -0.23826829822593068, -0.0093468845104923252, 0.16015106243072727, 0.02805086056222977, -0.0035899004350242064, -0.0055435803643170143, -0.026732920924661639, -0.010772744125100176, -0.024390993371714485, 0.012627431507206405, -0.0087203787935273471, 0.017390054254405412, 0.12375300108425245, 0.24623032442851775, 0.32220608581938742, 0.14931322115435106, -0.030460558403777184, 0.017160725214558258, -0.0094839753900354314, -0.040937983123008212, 0.021461267056132466, 0.052605242734811673, 0.082583919156513017, 0.060994911510484674, 0.19212485777257118, 0.030490864773295545, 0.17592824054988929, 0.2988664581273196, -0.3440942993173739, 1.3210609586317499, 0.059297195869563314, 0.66450815180221101, -0.18837022473974091, 0.34310308052214539, 0.41335445680081984, 0.18880277280085617, -0.0025387166530481263, -0.027056960212979365, -0.014992917126512385, -0.065825070508153574, 0.0059924400617866053, 0.016058491686644451, 0.096318218677932735, 0.11648035795043635, 0.083105673180647682, 0.32671351148908129, 0.21720864831216413, 0.29412476851730657, 0.14853499339159934, 0.018970981025801619, -0.0063191769526926853, -0.01818046447321878, -0.033255690840711123, 0.042088106914846247, 0.11598544099090941, 0.13859711550376397, -0.01128947190338442, 0.086653868373652729, 0.5559656926196751, 0.37680556076813249, 0.88488899182435787, -1.1019114795534606, 1.0072326177374842, -0.25696609936231163, 0.22595605005106759, 0.20124367647634336, 0.25020565573121023, 0.15194580903531119, 0.054188690404279045, -0.031588472981034531, -0.072469006265441768, -0.025752917138555535, -0.0471489088024604, 0.079293556902861981, 0.16429646904639772, 0.19502382977708654, 0.21468548823411557, 0.26510515339808566, 0.4121092848683291, 0.24137856300787749, 0.039245063706659693, 0.01328784964664576, 0.063938494959291103, -0.056808918829038463, -0.039159725623022792, 0.028736615885883075, 0.075674855852819814, 0.10715382591497533, 0.29941075202959372, 0.24751816611443234, -0.14971685838339424, 0.92725020353048182, -0.58030730777587713, 1.4965419400087898, -0.58030730777587824, 0.92725020353048315, -0.1497168583833956, 0.24751816611443228, 0.29941075202959394, 0.10715382591497527, 0.075674855852819592, 0.028736615885883075, -0.039159725623022994, -0.05680891882903847, 0.063938494959291325, 0.013287849646645755, 0.039245063706659422, 0.24137856300787733, 0.41210928486832976, 0.32671351148908501, 0.21468548823411696, 0.19502382977708541, 0.16429646904639761, 0.079293556902861592, -0.047148908802460261, -0.025752917138555938, -0.072469006265442351, -0.031588472981034621, 0.054188690404279302, 0.15194580903531177, 0.25020565573121106, 0.20124367647634361, 0.22595605005106811, -0.25696609936231096, 1.007232617737484, -1.1019114795534584, 0.88488899182435599, 0.37680556076813088, 0.55596569261967799, 0.086653868373653353, -0.011289471903383815, 0.13859711550376486, 0.11598544099090989, 0.042088106914846005, -0.033255690840710936, -0.018180464473218153, -0.0063191769526928735, 0.018970981025801085, 0.14853499339159881, 0.2941247685173069, 0.21720864831216452, 0.24623032442851894, 0.083105673180647877, 0.11648035795043606, 0.096318218677932249, 0.016058491686644111, 0.0059924400617863598, -0.065825070508153657, -0.014992917126512623, -0.027056960212979545, -0.0025387166530475712, 0.18880277280085703, 0.41335445680082034, 0.34310308052214539, -0.18837022473973905, 0.66450815180220979, 0.059297195869561843, 1.3210609586317497, -0.34409429931737384, 0.2988664581273206, 0.17592824054988909, 0.030490864773296485, 0.19212485777257224, 0.06099491151048541, 0.082583919156513072, 0.052605242734811722, 0.021461267056132546, -0.040937983123008163, -0.0094839753900352007, 0.017160725214558203, -0.030460558403777944, 0.14931322115435064, 0.32220608581938709, 0.093695296747697082, 0.1237530010842532, 0.017390054254405134, -0.0087203787935278762, 0.012627431507206037, -0.024390993371714388, -0.010772744125100247, -0.026732920924662094, -0.0055435803643169856, -0.0035899004350241582, 0.028050860562230339, 0.16015106243072863, -0.0093468845104915464, -0.23826829822592965, -0.51467834215318398, 1.3060302403517683, 0.3628700351691248, 0.5071563706514024, 0.31944609486771208, -0.24133125024592691, 0.14786394857966259, 0.0062621769249767058, 0.073910230197787502, 0.038178927860434683, 0.026154427883432977, -0.015197940538429256, 0.015692601846482655, 0.031051039914505491, 0.0075790364114048233, 0.097917377942654316, 0.16574720488241704, 0.10174972110658852, 0.10180457538537414, -0.027988212781709362, -9.6207917787273747e-05, 0.0051215906448293215, -0.029333520957471861, 0.025701507905379183, -0.0089673934626627958, 0.01177654442566399, 0.0046349096026104134, -0.021402902917041607, 0.03418607642912222, 0.030098075283007585, -0.1169011010733573, 0.15345959634626896, 0.097636377242582312, -0.21337246968950468, 0.70940599530087356, 0.18053751384272154, -0.12662108035586525, -0.033729052458342325, -0.1068205495440398, 0.082742536159359198, 0.021312770128680637, -0.02966274712552271, -0.015675575409266458, 0.03599616230766798, 0.020763503842579301, -0.0083456425459010053, -0.012539173975430275, 0.001814606870208027, 0.063246459754600651, 0.097647442588889521, -0.013402803779000846, 0.061296263921273318, -0.018258671855796015, -0.027490450999295389, -0.010113005489671634, -0.011441752446030721, 0.031629106230310081, 0.016637976300589583, -0.010024579181759814, -0.0099079010405707553, -0.060258932305754062, -0.041981936023927795, -0.036493858716967892, 0.13137374163691345, 0.17992639617179582, 0.34586223870135102, 0.3396306093743105, 0.26383919410790552, 0.24501510040664315, -0.19173261262163757, 0.099241248305728891, 0.015060609589555881, -0.015609494504012908, 0.015223562704661735, 0.0021732333351695459, -0.013294834505552418, 0.02039605162072387, 0.032140257903604141, -0.0021144243161752658, -0.0076636494655425496, 0.037573591582025015, -0.0036013299995066783, -0.027574493612477238, -0.078529066256990701, 0.00059474001274650921, 0.016458612619479316, 0.015845305908809258, -0.0020268100930258088, -0.013696041496545191, 0.0088012977267581446, 0.016542589455127047, -0.0048974001169365296, -0.019737461729970797, -0.042341618007146614, -0.081510896741027863, 0.044986403519810654, 0.062598270207453191, 0.16404233417264671, 0.091411128665944058, 0.36951320092864953, 0.059080455669845232, -0.070830818977105567, -0.033232550782043346, -0.0028057606437617323, 0.0078373508878121518, -0.0029827434432791976, -0.021766544372719729, 0.023522054710864829, 0.031698488621629953, -0.030135000999364715, -0.019759750092557201, 0.019592990080295483, -0.021337213333244086, -0.032810042710946043, 0.035098396968265562, 0.065700689463788264, -0.019619112630341284, -0.032528933027315937, -0.001416656453182401, 0.056425701741664544, 0.028455863356249663, -0.0097375289490629503, -0.0052561866064455114, 0.0013100558771970501, 0.0080320798501610554, -0.027972147033301621, -0.021419082531907708, -0.025936972009880058, 0.027359429809612409, 0.13624403896529816, 0.12236977033819048, 0.040092306883550463, 0.11452944472315811, -0.062769573271967, -0.065313535534231998, -0.010769778858653123, 0.0064307243224230766, 0.0010521231241173155, 0.012579825412037126, 0.0088191619820226965, -0.040811004345713484, 0.019887732012021993, 0.014257984954846677, -0.022459274904977573, 0.040747896169171828, 0.070242479721293896, 0.055053359776043469, 0.072952972838101038, 0.11130862970905199, 0.055652716802045553, -0.080036865363297377, -0.074182732572421722, 0.032824623168326919, 0.031865879706987767, -0.016758259649352489, -0.0024069559974744621, 0.021075876818278654, 0.014396940553395566, -0.048207693014304456, -0.077682201861009201, -0.015232023889946197, 0.016377276604451121, -0.095289423698368528, 0.053188940442295753, -0.007014873006770006, -0.052725469767566646, 0.011169867646763318, -0.027857672235467666, -0.015475583648045285, 0.012961699649937817, -0.0041828274568459145, -0.037569795749083312, 0.035148729718712211, -0.042406682273060839, -0.023034972903402475, 0.081701490128889429, 0.068453834537836641, 0.013361892210316275, 0.33668792873864783, 0.078872059827295921, 0.043930202648898596, 0.069824545029654933, 0.084402385062259569, 0.0024106108264623457, -0.011480544789508253, -0.033818612421867275, -0.031667371615742741, -0.00502827741655568, 0.027023228844142416, -0.014247675993027993, -0.0090012900880712381, -0.061888601165125297, -0.098942005293094756, 0.01263323283761883, 0.12573571356763666, -0.076732726183971922, -0.11419210623041808, -0.037690963997301666, -0.039023576316775249, -0.037907101781325052, 0.0040436237493623132, 0.041915865623990772, -0.0086885172531639947, -0.0046973120649884377, -0.092543539386828647, -0.011130337821465186, 0.098161425946316272, -0.016521364547457937, -0.019122146869457519, 0.34253529215971379, 0.37107135970432042, 0.86635491100693385, 0.069575788839216376, -0.077933249962103462, -0.23382813425811527, -0.09863825695148333, -0.028452880392854651, 0.02313090978794155, -0.065286881502250455, -0.0065163090427018816, 0.035245400387964018, 0.064871673248635159, -0.009910405282542379, -0.074442233736364327, -0.088464389222228296, -0.043746931993730226, 0.025650630137194336, -0.019555697374510583, -0.11757758027246727, -0.088395093514236453, 0.00060518848897882292, -0.023883294001795972, 0.0052157631901946491, 0.017696001575747886, 0.038292630722847568, -0.064152245495751242, -0.00046677178847581285, 0.13417678111594261, -0.015474080963115183, -0.27741376367012288, 0.10645611255411111, 0.49136473213042497, 0.64566220514793704, -0.34894672904561197, -0.22930577035731828, 0.065707150130888653, 0.074931291451028587, 0.010801205387038527, -0.067411320951837883, -0.12930461632538409, -0.0036267311717218076, 0.039023237394102503, 0.049868939755416578, 0.0028129255950110478, -0.048592759447364742, -0.098206750946425017, -0.21167593067635238, -0.24661106106331246, 0.17003550871316073, 0.14319521757460188, -0.18791450411345456, 0.0079365608693964147, -0.026343653609827478, -0.0064127815367698198, -0.021569631345745438, 0.090706510487419845, 0.023928227792328456, -0.030645866021173446, 0.0081944297873781744, 0.27230784814155318, -0.030140868003777244, -0.55369429571770845, -0.33461208848408441, 0.40042515638418175, 0.54787745216002603, 1.7521122327973908, 0.02630887865012415, -0.7903386881329546, -0.30506910575481899, -0.058122663069862322, -0.1512000567754718, 0.030805208457151921, -0.056922369420476453, 0.018910842473248434, 0.041026550164896362, 0.10973045554309671, -0.029240486244660805, -0.3163922398944391, -0.13757198545862218, 0.12706805404252669, -0.072057201177643526, -0.070445625631504319, 0.11232623315704422, 0.053944973270972273, 0.078972221527521536, -0.00416350617181658, -0.043614575991677791, -0.077748186566067592, 0.049219693586430378, 0.042416802273341318, 0.12644205243911066, 0.39096527623299887, -0.40370312470951558, -0.48770772267188234, 0.54473301805335006, 0.92898941300038107, 0.71512595047089234, 0.74385331371246577, 1.2482467538506357, -0.57166836623813888, -0.43281940369171401, 0.023943010115746077, 0.00030176170486927514, -0.24679227625704431, 0.16824405476099039, 0.092929862040844205, -0.029175915115095267, -0.081210816145377299, 0.032535239746583337, -0.018421573557966798, -0.18224178792918325, -0.29052216822588622, 0.17110516400703951, 0.22815908460498383, -0.15890945005602886, 0.0062170702455973175, -0.044853168166470177, 0.0080331646697508995, -0.0842632097276826, -0.016095705887684088, -7.820006368420517e-05, -0.097923922056211893, 0.48676804973393806, 0.35484595526186524, 0.18102793706565945, -1.0939934957719641, 0.9231011957591454, 0.49108674920037432, -1.6725083187014362, 0.56577881124465212, 1.7716903674840145, -0.31724338121882639, -0.46946217188769945, 0.46804088594167398, 0.2495599910064237, 0.21965961682575341, -0.28426475792188616, -0.12974774398976752, -0.086262426064739897, 0.084703474730633041, 0.12060535717228706, -0.33186051211466344, -0.10830858623812538, 0.17740469505624151, -0.0043101841409599814, -0.33866696253627121, 0.0393969525618715, -0.26339593722715154, 0.13598013030776659, 0.10364961453623139, -0.011168077595515221, -0.18224776807046214, -0.12296413131763473, 0.21989373735679868, 0.16380771710007386, 0.67271651276019118, -0.16319024909703136, 0.98390492917013062, 2.2217962254133496, -0.66077224091757802, 1.5638480130127614, -1.0129349058609651, 0.99232752650122769, 1.5155025161072819, 0.58675004339129688, 0.16801904131477496, 0.31725814504248523, -0.071714399164359219, 0.13832330176015895, -0.060442748560523389, -0.043434328775720558, -0.19718551141955432, -0.36586758725441343, -0.15612863751307984, -0.72499416196393318, -0.11056584899062098, 0.082780177430082938, -0.10585857030502534, -0.49717312826403764, 0.060297128338251849, -0.1741288940590143, 0.034503572794408806, -0.022140372568936324, 0.14950061311078439, 0.29242994865853189, -0.29100003355994419, 0.22751157962613949, -0.11471557758718894, 0.25575295594566499, 0.66007876209063321, -0.28144140655806837, -1.050216159001623], "bottom": {"real": [5837.242024063461, 16421.190569053251, 8527.2275182117319, 3938.41845467232, 969.21000043764093, 269.87346390668256, 193.53992011404216, 135.14631901451781, 58.523829955616236, 29.311524302602624, 20.863281166035843, 14.808244655557742, 11.401757474781434, 9.6386493936653288, 8.0538591094176777, 7.4714398062124641, 7.2711776175262477, 7.4714398062124241, 8.0538591094176653, 9.638649393665327, 11.401757474781416, 14.808244655557761, 20.863281166035858, 29.311524302602734, 58.523829955616236, 135.14631901451779, 193.53992011404216, 269.87346390668273, 969.21000043764059, 3938.4184546723186, 8527.2275182117301, 16421.190569053259, 14982.474506443205, 4755.1985786680198, 3083.8642011691682, 1502.8058566448747, 596.26851293203197, 262.35520536881347, 201.52671733896852, 108.13603201941604, 57.999252895466505, 28.992297197792773, 19.233600066307524, 13.871180161098291, 10.761421361485239, 8.8506828512506655, 7.8125584926262617, 7.1234501229356377, 6.6618841738486525, 7.1762884709606958, 8.1416889804019927, 8.8663632607744063, 11.328672883224474, 14.773155762512141, 20.058056528572401, 28.688344099071909, 57.995376649220766, 126.94075502116374, 211.30702516808583, 262.54448595536269, 752.96024761972672, 2141.5368023327851, 3891.3661973657881, 5583.5460990085166, 9500.6528086677681, 4225.3848573287933, 1708.1934289355966, 562.9450489663958, 526.41420210821127, 290.26438540271903, 151.34732218304231, 89.304597077577796, 50.161041673414204, 27.913649363990057, 19.253723232543383, 14.310501425792925, 10.622538104620221, 8.6520747616015274, 7.6796432895344049, 6.9311889072641995, 6.5442165971044535, 6.8352472963781299, 7.2531587818267287, 8.8125700197174819, 10.256278085266516, 13.962876672312342, 18.680978544191657, 27.641611280844351, 51.70590284164593, 92.383035108628647, 175.23999552329536, 238.6238705323166, 446.2130896894364, 589.84950644143407, 1459.800700420838, 2983.6421667816849, 6639.6980670311659, 3615.9230624353354, 1045.9683029029898, 541.95698246733389, 551.2292078912385, 269.01748102372522, 121.81702466062521, 78.619304368994548, 46.266475261147157, 26.895860643920866, 18.966790938143397, 14.141216689343503, 10.624588727031869, 8.5120674584469107, 7.5084078178458054, 7.127942028564302, 6.5505226441602824, 6.5976614570745582, 7.5671769464103935, 8.4293753366132105, 10.446992271959362, 13.755112829750516, 18.515159362788847, 25.868606557166544, 43.593025933023839, 76.847860046206122, 125.03651194390009, 241.77755195523335, 523.08499299660048, 633.36555854289827, 855.69476790230692, 2473.0066947172836, 2803.9496552692158, 1850.6397468329815, 645.77314636959022, 447.00563976857688, 381.6372474267435, 196.7755433249871, 93.586816816137713, 72.612365740746853, 43.711482900929944, 27.782222145016455, 18.647268962291367, 13.844325818813939, 10.350953817244738, 8.7140342291788997, 7.3516641952705921, 6.886474159529909, 6.1226840838853605, 6.7186507131414492, 7.0148796268173141, 7.9020046012660439, 9.6536048586555445, 13.744699851401226, 17.872279960942961, 25.025889030797831, 38.775468597625853, 68.228616115874232, 97.806667851841851, 178.52012140604563, 362.80035213144055, 506.96305099601244, 508.39785887877764, 1271.7627571663681, 1970.0713813014595, 1211.9708052435174, 448.82610946730466, 388.91483700385658, 294.26646682781944, 147.68595350614527, 76.563818921604266, 57.53338100926053, 37.094893522892434, 25.168957624787666, 17.405368368923924, 12.931100650610183, 10.211256703797424, 8.3783082007702649, 6.8845647672161352, 6.2954630311895761, 6.1711525716900475, 6.2852637654745882, 7.1318002457288037, 7.8126464614985656, 9.3562580058102185, 12.456351018938477, 17.12365920646733, 22.851195586808732, 34.22708028584924, 57.273965595477058, 82.126801795962663, 114.0182287640494, 248.69630423497404, 396.25330408596494, 382.77662480077174, 646.86127060880278, 1066.1959535576209, 770.74521634546068, 344.77171326148743, 328.21152488387929, 223.6732358532505, 124.39997807543456, 66.042124980023658, 49.833499278727395, 36.080812354502541, 24.010000461569632, 16.241873057458708, 11.94801819096188, 9.663620823552634, 8.1734814269274114, 6.8263151892657215, 6.1094005534487641, 5.5560364128866686, 6.0895161225652297, 6.7371553850929349, 7.5614980494024309, 9.3035460399083956, 11.904089289656403, 15.753116847312391, 22.116186781807659, 33.401673308199264, 45.775772578430164, 60.542807604917392, 91.412240599681226, 164.58197575163385, 289.97996145010069, 367.09809735899603, 433.51729458889321, 538.99714678707312, 436.9735160339028, 214.45700003213321, 226.27353228768246, 190.72528880002966, 104.24105887361294, 63.096291028318397, 44.895692115573439, 34.378771692376986, 22.743616534455565, 14.943130070579064, 11.306154107321404, 9.490726177732828, 8.057539867813432, 6.6249917656310648, 5.80530835366394, 5.6727594087192097, 5.6803994552580717, 6.4512234217242401, 7.3091820969038412, 8.9053168517088785, 11.147020821533502, 13.978280110937801, 19.308076160210224, 27.380246565144393, 39.45337202937899, 53.823906577074318, 70.344986096434994, 125.18491111128095, 220.27402210338624, 239.02095964975129, 253.52805611791149, 337.90351459641266, 301.96557555412664, 163.14862666039761, 176.1964602722083, 155.2640157056349, 91.402170635856464, 57.9223709952281, 44.132906015519367, 31.477476121951593, 19.994026988386896, 14.669539930994308, 10.52228821405147, 8.9499245076841039, 7.4160858759377133, 6.0652235290917815, 5.5336836347972449, 5.3453345499720717, 5.5251998880295652, 6.049359333226362, 7.4989544637904162, 8.6441457110666775, 10.17217183387787, 12.922358897606493, 16.497840703497662, 24.473525343022239, 36.893225695749557, 46.488420049270196, 60.008949681859932, 101.55324863109907, 172.57213254679178, 186.99209153386954, 177.69050334329205, 224.71115213821386, 219.35401697656656, 131.98987419085088, 139.58612051732652, 133.97255559613592, 83.717667146076977, 52.48988401855501, 39.948149447326976, 29.992243301791387, 19.792293237610107, 13.550533437330548, 10.191515700191694, 8.7251285565258279, 7.0130966099588283, 6.0412905020539274, 5.1695609453883042, 5.2335464217738297, 5.2748937601741233, 5.9151189141762242, 6.6404924993384702, 8.2525633194354864, 9.86505065394757, 11.857247340871206, 15.821441128307118, 21.809722446513074, 33.204842604441232, 45.292100524348356, 53.588237099743992, 86.046570865333351, 138.34470513151498, 144.28338780744133, 137.47961624149846, 184.36194031651988, 195.75342807998493, 111.69248606852764, 108.22432115257934, 110.31477193613289, 70.737952758714727, 45.316084199866118, 35.221165127538775, 25.132656234698317, 17.808708328889288, 13.205138111505544, 9.8319756958291311, 8.3851869715659166, 6.6979147774695411, 5.5577949826186863, 5.0640136062157843, 4.915924071395172, 5.1747375238921238, 5.621849200313962, 6.3926522738336189, 7.8838556827841355, 9.5880495388903295, 11.2702077240605, 14.675031755421674, 19.961485602094882, 28.340133288775018, 38.071807302485439, 46.211805942072893, 70.896288173632385, 115.46517347822648, 119.73189294718243, 110.21299532100423, 137.49078682179271, 145.21239507063157, 90.736475500202033, 84.820134662984671, 87.028887735269166, 58.592780926558561, 39.140475702708279, 30.030590426700837, 23.561748558876776, 17.07171690133644, 12.059539847971436, 9.1303469917064106, 7.8824915696444915, 6.5574577163884546, 5.4508327472027114, 4.6319487889521351, 4.8556936697031698, 5.0952139895658046, 5.3626061482546099, 6.0231504777267588, 7.3929124540904754, 8.8697139145390977, 10.839689611405708, 13.484775054138881, 18.125520870461621, 25.51326521840107, 33.814821758723511, 43.000660712963757, 59.289067569698993, 89.523100480006264, 96.002834501641331, 88.248403951505949, 114.22377327036351, 136.39754784126862, 85.133937137494058, 70.757613581150778, 72.941136445046624, 50.417131404641061, 35.29732697897046, 27.270836476117434, 20.337170678571646, 15.328073102208975, 11.227626008224609, 8.8894703399043831, 7.3066732490559749, 6.1117570010797007, 5.2240396800825373, 4.6927944754047974, 4.4462691956761722, 4.8997943453914665, 5.030120352863074, 5.8504059853355139, 6.9021030785339024, 8.6936481048417669, 10.014300550884089, 12.783989981758968, 16.915182814597465, 23.037925870268026, 29.781501040175886, 36.137786628939317, 46.659613314406016, 72.542096884400053, 80.098309124706176, 76.772569487169434, 87.96931966600367, 100.35528192635977, 66.390743706670477, 56.297220892995071, 57.449776912893739, 42.311817158751616, 30.3950154293208, 24.633397231162515, 18.800000277532757, 13.906344724637259, 10.685561612392762, 8.7726633553262534, 7.3765778222647702, 6.0238006847876884, 5.2082074327498917, 4.5886719664559399, 4.6166410353959701, 4.6115148269570563, 4.9920772309179853, 5.6445124723515159, 6.7980683034043956, 7.4975962005340229, 9.6066586869080837, 12.06652313244911, 16.251663826300451, 21.003823940677318, 27.622933573071261, 33.836788273738165, 41.877854423447168, 58.532835369703733, 68.239320296767971, 62.326149739008642, 71.583830955139561, 81.611391861674278, 61.290606958364052, 49.963935495056425, 49.744027747354536, 38.555965139546075, 28.313241453630848, 22.404376161451804, 17.69007471646092, 13.348861556136391, 10.46674681432143, 8.1507364253451371, 6.7804933363165576, 5.7303247473649055, 4.9737961537641029, 4.6591603640435002, 4.3691273542401863, 4.5876440856805019, 4.8775279419312838, 5.5643157824289267, 6.5106424514611394, 7.6517258774697732, 9.3978270674435489, 12.208065227131403, 15.316902707006163, 20.982661610009878, 26.317869298031479, 32.313264556083666, 38.062860113666069, 50.105167484748129, 58.219661124046276, 59.861157680092496, 61.019020366450448, 69.642805168222978, 57.634563900118565, 46.967523109902231, 43.85887184820529, 34.957640557066753, 26.505039983640941, 21.71545909517323, 16.236775633007202, 12.875777825381771, 9.9834739610997616, 7.8930497070448, 6.6829715569803687, 5.6672193704500122, 5.0794246915518446, 4.681264046528276, 4.6186632297539427, 4.6211092904368423, 5.0897865773957403, 5.5691810710797096, 6.5035187317991277, 7.2014326998593701, 9.1703620437944053, 12.475838151915292, 15.6623920524898, 19.528853843427893, 25.077028045409381, 30.833489267211636, 39.113296407386123, 46.770991427918581, 55.937485646720255, 57.570245344451905, 57.637817589030213, 59.860391566610879, 52.776195682327739, 43.839296967027423, 39.833012832197511, 33.598213438023812, 26.072700016436322, 20.276975501521189, 16.195672497297036, 12.239826665071417, 9.6875213487165066, 7.7379543893933631, 6.3786782254807157, 5.5950259327840586, 5.1232903828272987, 4.5786592309737237, 4.5178908466513406, 4.578659230973722, 5.1232903828272978, 5.5950259327840595, 6.3786782254807148, 7.7379543893933684, 9.6875213487165084, 12.239826665071421, 16.195672497297036, 20.276975501521182, 26.072700016436304, 33.598213438023805, 39.833012832197511, 43.839296967027416, 52.776195682327739, 59.860391566610836, 61.019020366450441, 57.570245344451919, 55.937485646720255, 46.770991427918517, 39.113296407386116, 30.833489267211636, 25.077028045409371, 19.528853843427893, 15.662392052489803, 12.475838151915296, 9.1703620437944, 7.2014326998593674, 6.5035187317991294, 5.5691810710797114, 5.0897865773957385, 4.6211092904368405, 4.6186632297539418, 4.6812640465282733, 5.0794246915518446, 5.6672193704500087, 6.6829715569803696, 7.8930497070447982, 9.9834739610997651, 12.875777825381764, 16.236775633007209, 21.715459095173252, 26.505039983640959, 34.957640557066775, 43.858871848205247, 46.967523109902238, 57.634563900118593, 69.642805168222949, 71.583830955139618, 59.861157680092482, 58.21966112404624, 50.105167484748137, 38.062860113666083, 32.313264556083666, 26.317869298031482, 20.982661610009867, 15.316902707006161, 12.208065227131399, 9.3978270674435436, 7.6517258774697732, 6.5106424514611394, 5.5643157824289284, 4.8775279419312856, 4.587644085680501, 4.3691273542401872, 4.6591603640434966, 4.973796153764102, 5.7303247473649037, 6.7804933363165594, 8.1507364253451371, 10.466746814321423, 13.348861556136386, 17.69007471646092, 22.404376161451779, 28.313241453630852, 38.555965139546039, 49.744027747354508, 49.963935495056418, 61.290606958364073, 81.611391861674235, 87.969319666003628, 62.326149739008663, 68.239320296767957, 58.532835369703712, 41.877854423447168, 33.836788273738158, 27.622933573071283, 21.003823940677311, 16.251663826300444, 12.066523132449106, 9.6066586869080837, 7.4975962005340202, 6.7980683034043929, 5.6445124723515194, 4.9920772309179844, 4.6115148269570598, 4.6166410353959719, 4.5886719664559372, 5.2082074327498908, 6.0238006847876866, 7.3765778222647711, 8.7726633553262587, 10.685561612392764, 13.906344724637258, 18.80000027753276, 24.633397231162533, 30.395015429320793, 42.311817158751609, 57.449776912893732, 56.297220892995028, 66.390743706670506, 100.35528192635975, 114.22377327036349, 76.772569487169449, 80.098309124706219, 72.542096884400053, 46.659613314406002, 36.137786628939317, 29.781501040175893, 23.037925870268033, 16.915182814597468, 12.783989981758975, 10.014300550884082, 8.6936481048417651, 6.9021030785339006, 5.8504059853355228, 5.0301203528630678, 4.8997943453914612, 4.4462691956761731, 4.6927944754048019, 5.2240396800825328, 6.1117570010797033, 7.3066732490559732, 8.8894703399043813, 11.227626008224609, 15.32807310220897, 20.337170678571649, 27.270836476117438, 35.297326978970467, 50.417131404641083, 72.941136445046638, 70.757613581150821, 85.133937137494073, 136.39754784126856, 137.49078682179265, 88.248403951506006, 96.002834501641317, 89.523100480006221, 59.289067569698972, 43.000660712963743, 33.814821758723504, 25.51326521840107, 18.125520870461624, 13.484775054138884, 10.839689611405714, 8.8697139145391013, 7.3929124540904745, 6.0231504777267606, 5.362606148254609, 5.0952139895658073, 4.8556936697031734, 4.6319487889521325, 5.4508327472027096, 6.5574577163884502, 7.8824915696444933, 9.1303469917064124, 12.059539847971436, 17.071716901336433, 23.561748558876776, 30.030590426700826, 39.140475702708279, 58.592780926558504, 87.028887735269151, 84.820134662984628, 90.73647550020199, 145.21239507063157, 184.36194031652002, 110.2129953210042, 119.73189294718252, 115.4651734782265, 70.896288173632399, 46.211805942072878, 38.071807302485439, 28.340133288775018, 19.961485602094882, 14.675031755421674, 11.270207724060505, 9.5880495388903277, 7.8838556827841364, 6.3926522738336233, 5.6218492003139611, 5.1747375238921247, 4.9159240713951746, 5.0640136062157861, 5.5577949826186863, 6.697914777469534, 8.3851869715659184, 9.8319756958291471, 13.205138111505548, 17.808708328889303, 25.13265623469832, 35.221165127538775, 45.316084199866097, 70.737952758714712, 110.3147719361329, 108.22432115257941, 111.69248606852767, 195.75342807998487, 224.71115213821398, 137.47961624149852, 144.28338780744139, 138.3447051315149, 86.046570865333337, 53.588237099743992, 45.292100524348342, 33.204842604441232, 21.809722446513071, 15.82144112830712, 11.857247340871208, 9.86505065394757, 8.2525633194354864, 6.640492499338464, 5.9151189141762242, 5.2748937601741233, 5.2335464217738297, 5.1695609453883096, 6.0412905020539247, 7.0130966099588328, 8.725128556525835, 10.191515700191694, 13.550533437330545, 19.792293237610103, 29.992243301791408, 39.948149447327012, 52.489884018555003, 83.717667146076963, 133.97255559613592, 139.58612051732649, 131.98987419085091, 219.35401697656653, 337.90351459641266, 177.69050334329216, 186.99209153386957, 172.57213254679186, 101.55324863109904, 60.008949681859939, 46.488420049270182, 36.893225695749557, 24.473525343022239, 16.497840703497666, 12.922358897606497, 10.172171833877869, 8.6441457110666775, 7.4989544637904126, 6.0493593332263602, 5.5251998880295634, 5.3453345499720717, 5.5336836347972458, 6.0652235290917806, 7.4160858759377133, 8.949924507684111, 10.522288214051471, 14.669539930994311, 19.994026988386889, 31.477476121951593, 44.13290601551936, 57.922370995228107, 91.402170635856407, 155.2640157056349, 176.1964602722083, 163.14862666039767, 301.96557555412653, 538.99714678707278, 253.5280561179116, 239.02095964975135, 220.2740221033861, 125.18491111128091, 70.344986096434923, 53.823906577074332, 39.453372029378947, 27.380246565144397, 19.308076160210238, 13.978280110937792, 11.147020821533506, 8.9053168517088821, 7.3091820969038439, 6.4512234217242392, 5.6803994552580681, 5.6727594087192079, 5.8053083536639392, 6.6249917656310666, 8.0575398678134302, 9.4907261777328298, 11.306154107321403, 14.943130070579077, 22.743616534455558, 34.378771692377001, 44.895692115573446, 63.09629102831839, 104.241058873613, 190.72528880002952, 226.27353228768243, 214.45700003213315, 436.97351603390234, 1066.1959535576209, 433.51729458889332, 367.09809735899597, 289.97996145010086, 164.58197575163376, 91.412240599681198, 60.542807604917364, 45.775772578430157, 33.401673308199264, 22.116186781807642, 15.753116847312398, 11.904089289656401, 9.303546039908392, 7.5614980494024362, 6.7371553850929322, 6.0895161225652297, 5.5560364128866677, 6.1094005534487605, 6.8263151892657268, 8.1734814269274096, 9.6636208235526269, 11.948018190961893, 16.241873057458722, 24.010000461569639, 36.080812354502534, 49.833499278727416, 66.042124980023658, 124.39997807543459, 223.67323585325056, 328.21152488387946, 344.77171326148749, 770.74521634546022, 1970.0713813014588, 646.86127060880301, 382.77662480077169, 396.2533040859646, 248.69630423497387, 114.01822876404945, 82.126801795962692, 57.273965595476994, 34.227080285849233, 22.851195586808739, 17.12365920646733, 12.456351018938475, 9.3562580058102167, 7.8126464614985656, 7.1318002457288037, 6.2852637654745882, 6.1711525716900475, 6.2954630311895787, 6.8845647672161387, 8.3783082007702561, 10.211256703797417, 12.931100650610194, 17.405368368923916, 25.168957624787648, 37.094893522892434, 57.533381009260523, 76.563818921604266, 147.68595350614524, 294.26646682781944, 388.91483700385658, 448.82610946730478, 1211.9708052435162, 2803.9496552692158, 1271.7627571663686, 508.39785887877753, 506.96305099601244, 362.80035213144049, 178.52012140604566, 97.806667851841823, 68.228616115874146, 38.775468597625853, 25.025889030797838, 17.872279960942965, 13.74469985140124, 9.6536048586555427, 7.9020046012660456, 7.0148796268173159, 6.7186507131414386, 6.1226840838853631, 6.8864741595299055, 7.3516641952705939, 8.7140342291789032, 10.350953817244736, 13.844325818813926, 18.64726896229136, 27.782222145016434, 43.711482900929937, 72.612365740746867, 93.586816816137656, 196.7755433249871, 381.63724742674339, 447.00563976857711, 645.77314636959011, 1850.6397468329806, 6639.698067031165, 2473.0066947172841, 855.69476790230704, 633.36555854289816, 523.0849929966007, 241.77755195523349, 125.03651194390012, 76.847860046206094, 43.593025933023853, 25.868606557166554, 18.515159362788847, 13.755112829750496, 10.44699227195936, 8.4293753366132176, 7.5671769464103917, 6.5976614570745609, 6.5505226441602797, 7.1279420285643011, 7.5084078178458018, 8.5120674584469089, 10.624588727031863, 14.141216689343507, 18.966790938143404, 26.895860643920869, 46.266475261147157, 78.619304368994577, 121.81702466062518, 269.01748102372505, 551.22920789123827, 541.95698246733446, 1045.9683029029893, 3615.9230624353345, 9500.6528086677681, 2983.6421667816867, 1459.8007004208382, 589.84950644143373, 446.2130896894364, 238.62387053231652, 175.23999552329542, 92.383035108628548, 51.705902841645944, 27.641611280844312, 18.680978544191667, 13.962876672312348, 10.256278085266519, 8.8125700197175014, 7.2531587818267402, 6.8352472963781254, 6.5442165971044517, 6.9311889072641986, 7.6796432895344058, 8.6520747616015186, 10.622538104620222, 14.310501425792921, 19.253723232543386, 27.913649363990046, 50.161041673414196, 89.304597077577839, 151.34732218304231, 290.26438540271909, 526.41420210821127, 562.94504896639603, 1708.1934289355961, 4225.3848573287914, 14982.474506443201, 5583.5460990085194, 3891.3661973657854, 2141.5368023327842, 752.9602476197266, 262.54448595536314, 211.30702516808589, 126.94075502116375, 57.995376649220773, 28.688344099071898, 20.058056528572401, 14.773155762512143, 11.328672883224492, 8.8663632607744169, 8.1416889804020052, 7.1762884709607109, 6.6618841738486552, 7.1234501229356262, 7.8125584926262608, 8.8506828512506655, 10.761421361485221, 13.871180161098282, 19.233600066307527, 28.992297197792769, 57.999252895466505, 108.13603201941609, 201.52671733896852, 262.35520536881353, 596.26851293203185, 1502.8058566448742, 3083.8642011691672, 4755.1985786680179], "imag": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "imag": [0.0, -0.13871927675086548, -0.55827571496092165, -0.85383263724083092, -0.46701193383615952, 0.047809537946767316, -0.3426920474802197, 0.15831589374137059, 0.20589774809377467, -0.21944378817656213, -0.12654666933988368, -0.19544466487854822, -0.096446269450190733, -0.2265628704083768, 0.10840537931386109, -0.055457499657790024, 0.0, 0.055457499657784036, -0.10840537931384955, 0.22656287040837902, 0.096446269450189581, 0.19544466487854698, 0.1265466693398799, 0.21944378817656165, -0.20589774809377467, -0.15831589374137045, 0.34269204748022014, -0.047809537946767663, 0.46701193383615958, 0.85383263724082981, 0.55827571496092188, 0.13871927675086551, -1.279550584464304, -0.80695903119669909, -0.5066002982483182, -1.4561178571661, -0.13414323846201096, -0.25055297311154978, -0.64027404819684697, -0.19951473048424853, 0.33137912963317689, -0.047498243759329373, -0.24064979253244873, 0.1395435157196932, 0.17789090203786645, -0.044374683774468404, -0.36806933922228663, 0.19528135326361654, 0.32999646269142918, -0.13015393203002068, 0.1959681784626765, 0.28571835588367483, 0.22705801052414751, -0.14508578389537852, 0.23457709892354506, 0.21163882649779878, -0.20150153854805303, 0.060946718066345364, 0.31004041285864392, -0.26258387187077481, 0.13955938857309563, -0.2449447076348287, 0.068510051090992716, -1.1758121586434307, -1.3682011726001491, -1.6899938281650106, -0.75019268688655194, 0.68911282851752931, 0.44086751164178845, -0.23155959034339019, -0.54510315877084203, 0.26585764990704713, 0.2624959582084973, -0.045146091846171167, 0.011517786678353055, -0.057907844320373422, 0.076854124253010955, 0.0035092112107953564, -0.23588030048916386, -0.048277840380711062, -0.21489820671404902, 0.26817287178185911, -0.027468417557455105, 0.29873174456545087, 0.072899207479288589, 0.023829771073631354, 0.0066491170121291982, 0.0048298736467919092, -0.13057930804766787, -0.26946209593128789, 0.39240115086507854, 0.85317721061416651, -0.11752989424299426, 0.99998707389668307, 0.55787436167296656, -1.0314907737559058, -1.5043263157657751, -1.3830149751777026, -0.20446853801739454, -0.28364033101911829, 0.68303147161529054, 0.03902721990981517, -0.18273076418691683, -0.013466871818696777, 0.028891896132398606, -0.068621242214500722, -0.026792869524675422, 0.18842973810535804, 0.068392282535087487, -0.17097210848547728, -0.23288712244734344, -0.31416612358708279, 0.27284169211913839, -0.072438990225411531, 0.1202436118466384, 0.067443262257117789, -0.0040452326400191837, -0.15231382612170316, 0.020438609938141238, 0.10773227995476008, -0.1646961578394999, -0.034526357222664054, 0.34045699686317549, 0.3582562672018631, 0.50203282214727851, -0.90050578840564854, 1.1141651843864948, -1.0547694551235964, 0.15113295529591572, -0.42011997382980693, -1.1306687523196075, 0.59904899563122349, 0.12782476119556421, -0.26469201284371935, -0.0028564673365734715, 0.25878855026626812, 0.00078645201341040851, -0.17181320075266995, 0.013143422355015144, 0.050238396740841747, 0.072156922858987921, 0.041604673982592558, -0.0112715468909201, -0.016101389694688766, -0.31269363662275068, 0.094974334151300396, -0.067869387966968731, 0.14811752790953986, 0.010724993842567176, -0.071495661604357427, -0.037154193600070516, 0.05779163337935353, 0.094937931062917286, -0.1272883333159909, -0.017408469796284951, 0.62003762386212868, 0.074417004563971767, -0.12904495334293709, -1.4636084587609224, -0.036743730082780299, -0.77470195486186, -0.60686918965332004, 0.62872636200456622, -0.46894237369717673, -0.18368617361305525, 0.26816260026693856, 0.13447215443394772, 0.041008154934057489, -0.017107991149299187, -0.0680369475996533, -0.01240601732954733, 0.059356927461924558, 0.12615835751185028, 0.053672308552617974, 0.037749743592242362, -0.10597138547480481, 0.022172258797336697, -0.058681894939636686, 0.12792055300624736, -0.060154323470105943, 0.032298308999269151, -0.015701976416949814, 0.0007367446231764113, 0.07712597645572114, 0.055644084876628218, -0.065981740018919821, -0.14567847379973994, 0.039540586335773356, 0.24917063867041539, -0.6432675339043068, 0.36754664039982821, -0.069649876974948205, 0.2952063874323651, -0.011417685121456805, -1.0450941798657123, -0.17374602795438093, 0.19930768818407893, -0.1556206112582631, 0.055817128538076119, 0.17900936499027481, 0.0052374024484263433, -0.042596098823283683, -0.020834261928533829, 0.036686593450547957, 0.00076880260958178746, 0.061719692477810909, 0.027700064466885506, 0.10661165850403151, -0.13945785164947772, -0.050544258155460708, -0.11937846922953205, 0.034399558837173369, 0.02521789889898339, -0.0047468618190418272, -0.028256857448446509, 0.029239764799856467, 0.046539635523190424, -0.033316423902485758, -0.15842957449053302, 0.14741145606308881, 0.1752194519195491, -0.075629282019522973, -0.91968716746889456, -0.45504702044764878, -0.12177128356890227, -0.10462001130261206, 0.1804016527269576, -0.047005347129142915, -0.19200701617075638, 0.1133507155810588, 0.14315736053243958, -0.067545520465919412, -0.0022066601859379556, 0.0084001340729883862, 0.0049338006978182497, 0.016196236751475263, 0.066419574069183293, -0.012240235365542763, 0.014433128838537781, 0.023674926554515096, -0.017114978073907605, -0.14379898617791109, 0.084303725772385638, 0.0056779923265117766, 0.048321020114327755, 0.022849248448590556, 0.012395399307186424, 0.023865191872962568, -0.0060375152678495622, -0.021897165586045375, -0.092173327221095822, -0.17587869380621102, 0.091992925322100877, 0.014980171338571357, 0.0086063527817299007, 0.098130362913165001, 0.130338354535672, 0.094203305677599436, -0.19730813245926024, -0.10041080102702246, 0.075932042745803577, 0.021134287621881041, -0.059575532325244519, 0.0082992125422013917, 0.015272751179096435, 0.0090248536114060952, -0.019251438395354602, -0.015788972597383853, 0.003250945662643008, 0.032968975479440332, -0.015058032290062954, 0.017643635220692015, -0.068857003169531444, 0.030070570566209365, -0.12793975070954616, -0.043534834876013277, 0.0017423598025251587, 0.028592812647173952, 0.0036967486190428137, 0.0090453167838253218, -0.016259252101333162, -0.0052076817297827191, 0.018046490267575967, -0.026168992315517926, -0.083077034868877908, 0.032798990212655046, -0.027546636940189637, -0.12409557570816734, -0.0088356071822206419, -0.034333260533212014, 0.056177295075322577, 0.057994393113440637, -0.032566171451921935, -0.010465798382464413, 0.020079425427313443, -0.017396471253638312, -0.017870360905994483, 0.010919865739753416, 0.012363627500514531, -0.014313215415815719, 0.034201557920817111, 0.10796975372596095, 0.21064351401911494, -0.046016401957029461, -0.083803307026608195, -0.15128619138644472, -0.070745415327885988, -0.06951503451164355, 0.070638418064815661, -0.0080019035626016123, 0.02654845111893607, 0.019862790828204354, -0.0038698355762961699, -0.020866890117519677, -0.0048084432749845906, -0.0036451640963975299, -0.0026341276434262537, -0.0023099396961399252, 0.043908100663757832, 0.096772033742844044, 0.04918905117971889, 0.070600771528734244, -0.026773628633603139, -0.05973226936448265, 0.013552286601009756, 0.0032289712715403013, -0.023046337829044056, -0.010405151723131599, 0.019427096259341661, 0.018256051683800133, -0.056759870222018213, -0.032960560091393032, -0.017399004273096801, 0.12185282737260948, 0.037984234337547759, -0.12270039394272629, -0.055947445070994896, 0.04621845892784341, -0.1857137618225036, -0.063810892086947277, 0.07053672326645595, 0.03906718120738633, 0.01577517031413787, -0.0047456570119124219, -0.019801411975277249, 0.024637199092487311, 0.019457415538283646, -0.0067710516924983765, -0.028346017012320548, -0.0065098329229195291, -0.0013352981567293612, -0.023151697315085987, -0.06519950655383687, -0.1042256990435297, -0.023224778901070588, 0.0072963544312097499, -0.034708386400909293, -0.0023809918522597964, 0.016167541663812009, -0.0054340236987463174, 0.0027208109883995382, 0.0066841964011560553, -0.023932611476630623, -0.039005803210705049, 0.016396390506166533, 0.058067983872416511, 0.15112210885707694, 0.091953539825334094, -0.30878981646904202, 0.23773808023122034, -0.11496619447060334, -0.15410637679425881, 0.16398523681965352, -0.042160123131605852, -0.0057838899052936009, 0.021159112170606904, -0.00089194024953267548, -0.043632529695206895, 0.025594278576058532, 0.04827977682701759, 0.008656372871138766, -0.025123508323013247, -0.021222695138498154, 0.012727342518660707, 0.0027327273075534982, 0.016727222825244921, -0.062351999721191126, -0.095086485134993501, 0.009789315676701096, 0.020526538310240195, -0.0017729650965628652, 0.0042367342426148282, 0.0096918161659650896, -0.014518052118829046, -0.0045810353743419062, -0.069451504639382974, -0.036289590762181183, 0.22708969966074724, 0.3665342673930222, -0.59625762091850343, 0.36774772058649913, 0.2627894192943519, -0.10703484463450727, -0.13950623949894417, -0.080806137493453625, -0.018761372187400087, -0.14807112835842171, 0.015533054933596769, -0.013156170331620851, 0.033053795814988449, 0.012901798319361097, 0.00377273404398293, -0.0087050725477761486, -0.026200884444946355, -0.069983120002794802, -0.045851102565308888, -0.0080215915074989454, -0.048063119818621811, -0.055909188302307122, 0.015567334119352533, -0.069113723063989038, -0.0072474243428621863, 0.042526562044161449, 0.039806904605142766, -0.027582495505149615, 0.0049261433754253488, -0.04754279011762625, -0.074122351214929355, 0.22223052073714245, -0.0077417273670608014, -0.080825286420915882, 0.62390518555370134, -0.18988737165776209, -0.013310214088767865, -0.13538196037364333, -0.38370084094404533, -0.32853605615928166, -0.23095349816725769, 0.0024573680892555631, -0.060148519255615616, 0.030360401196840837, -0.0084214745912351684, 0.033027304906486414, 0.030739864021722699, 0.0097039926999964547, -0.060698557392036313, -0.04746519227839175, -0.053530300822357386, -0.046174234082698239, 0.0052112044634668644, 0.020596160958060543, -0.15878906772803425, -0.02193329327109424, 0.0079342423803948989, 0.027919450264392773, 0.0070430807013025284, 0.020085011074200358, -0.075935043112063852, -0.041652272773957957, 0.16889959178925665, 0.18647295463827135, 0.014154913289577202, 0.060521107576468509, -0.63637312336837226, 0.90191957381577925, 0.27922666018549325, -0.48673882008850766, -0.33370031357259311, -0.3513559741645329, -0.2622745616761345, -0.17197492325356289, -0.0057315027931728107, -0.04469091820910031, 0.053283308768024513, 0.039465599946438043, -0.014174493080162808, -0.04946368453866596, -0.022857667990750397, -0.16881304090125779, -0.080812526909499666, 0.00058234446045326367, 0.084338425974376116, -0.12518231680881081, -0.040506406338050263, -0.08374410530080309, -0.001350704062862842, 0.030200114248426838, 0.042299889130269351, 0.011310849850443803, 0.081759178445920677, 0.035289563063634108, -0.12268118169149339, 0.058157249768416797, 0.19453030659557169, -0.32019695139960919, 1.2621857571853639, 0.24947885513851267, -0.86827138009746829, -0.26346017480935824, -0.40312000272498982, -0.22820944406317872, 0.0813299683314989, 0.0038871367161771898, -0.10891614598123801, 0.00043800911235750134, -0.043289297526922212, 0.012593343881888895, -0.0042686636670869688, -0.008833188472774969, -0.024141666831206311, -0.03923653338217388, -0.25435751708422283, 0.0, 0.13106581900761921, 0.22441332039311174, -0.094768447018961463, 0.0024812204443016074, 0.036286268392045858, 0.0056698536823630895, -0.010705526315732189, 0.082044918512892334, 0.0010532751265284197, 0.015101105715477795, 0.090653505450224631, 0.27613653682211553, 0.17494988738073455, 0.30956821269851931, 0.034540476362705901, 0.0, -0.034540476362701966, -0.30956821269851847, -0.17494988738073411, -0.27613653682211575, -0.090653505450227129, -0.015101105715478274, -0.0010532751265287738, -0.082044918512892334, 0.010705526315732109, -0.0056698536823632534, -0.036286268392045982, -0.0024812204443015839, 0.094768447018961921, -0.22441332039311199, -0.13106581900761924, -0.00058234446045052997, 0.25435751708422299, 0.039236533382173068, 0.024141666831206714, 0.0088331884727747174, 0.0042686636670865837, -0.012593343881888968, 0.04328929752692242, -0.00043800911235742604, 0.1089161459812379, -0.0038871367161778295, -0.081329968331500163, 0.22820944406317803, 0.40312000272499021, 0.26346017480936107, 0.86827138009747229, -0.24947885513851314, -1.2621857571853632, 0.32019695139960752, -0.19453030659557399, -0.058157249768416672, 0.12268118169149329, -0.035289563063634503, -0.081759178445920649, -0.011310849850443772, -0.042299889130268831, -0.030200114248426623, 0.0013507040628626303, 0.083744105300802674, 0.040506406338050895, 0.12518231680881103, -0.084338425974375644, 0.046174234082696289, 0.08081252690949875, 0.16881304090125832, 0.022857667990750261, 0.04946368453866589, 0.014174493080162815, -0.039465599946438334, -0.053283308768024965, 0.044690918209100129, 0.0057315027931725314, 0.1719749232535624, 0.26227456167613394, 0.3513559741645329, 0.33370031357259339, 0.48673882008850966, -0.27922666018549408, -0.90191957381578058, 0.63637312336837637, -0.060521107576467635, -0.014154913289577215, -0.18647295463827063, -0.16889959178925743, 0.041652272773958374, 0.075935043112064518, -0.020085011074200423, -0.0070430807013025249, -0.02791945026439252, -0.0079342423803949891, 0.021933293271094115, 0.15878906772803389, -0.02059616095805995, -0.0052112044634673969, 0.008021591507499164, 0.05353030082235833, 0.047465192278390397, 0.060698557392036064, -0.0097039926999963107, -0.030739864021722747, -0.033027304906486449, 0.008421474591235165, -0.03036040119684083, 0.060148519255615165, -0.0024573680892551967, 0.23095349816725866, 0.32853605615928261, 0.38370084094404566, 0.13538196037364647, 0.01331021408876858, 0.18988737165776171, -0.62390518555369734, 0.080825286420916714, 0.0077417273670609497, -0.22223052073714233, 0.074122351214929452, 0.047542790117626306, -0.0049261433754249724, 0.027582495505149737, -0.039806904605142586, -0.042526562044161428, 0.0072474243428622999, 0.069113723063988594, -0.015567334119352927, 0.055909188302305984, 0.048063119818621922, -0.0027327273075535455, 0.045851102565308353, 0.069983120002795093, 0.026200884444945973, 0.0087050725477759057, -0.0037727340439829347, -0.012901798319361227, -0.033053795814988754, 0.013156170331620811, -0.015533054933596691, 0.14807112835842184, 0.018761372187400604, 0.080806137493454139, 0.13950623949894433, 0.10703484463450816, -0.26278941929435246, -0.36774772058649907, 0.59625762091850687, -0.36653426739302131, -0.22708969966074771, 0.036289590762181079, 0.069451504639383266, 0.0045810353743422905, 0.014518052118829408, -0.0096918161659651156, -0.0042367342426148941, 0.0017729650965627938, -0.020526538310240098, -0.0097893156767009607, 0.095086485134992974, 0.062351999721190751, -0.01672722282524514, 0.065199506553837216, -0.012727342518659639, 0.021222695138497675, 0.025123508323013449, -0.0086563728711387469, -0.048279776827017555, -0.025594278576058595, 0.04363252969520693, 0.00089194024953267417, -0.021159112170607019, 0.0057838899052937813, 0.042160123131606046, -0.16398523681965352, 0.15410637679425865, 0.11496619447060411, -0.23773808023122042, 0.30878981646904247, -0.091953539825333053, -0.15112210885707561, -0.058067983872415838, -0.016396390506166002, 0.039005803210705077, 0.023932611476630637, -0.006684196401155907, -0.0027208109883995707, 0.0054340236987462662, -0.016167541663812044, 0.0023809918522598732, 0.034708386400909043, -0.0072963544312100569, 0.023224778901069786, 0.10422569904352962, -0.049189051179719279, 0.023151697315084544, 0.0013352981567299367, 0.0065098329229194736, 0.02834601701232067, 0.0067710516924982707, -0.019457415538283694, -0.024637199092487305, 0.019801411975277225, 0.0047456570119127489, -0.015775170314137797, -0.03906718120738624, -0.070536723266456214, 0.063810892086946833, 0.18571376182250354, -0.046218458927843417, 0.055947445070994993, 0.1227003939427266, -0.037984234337547038, -0.12185282737260873, 0.01739900427309727, 0.032960560091392817, 0.056759870222018227, -0.018256051683799891, -0.019427096259341584, 0.010405151723131587, 0.023046337829044038, -0.0032289712715403299, -0.013552286601009622, 0.059732269364482463, 0.026773628633603028, -0.070600771528734632, 0.008835607182220432, -0.096772033742842878, -0.043908100663758234, 0.0023099396961402566, 0.0026341276434262424, 0.0036451640963978101, 0.004808443274984581, 0.020866890117519587, 0.0038698355762962896, -0.019862790828204292, -0.026548451118935872, 0.0080019035626017337, -0.0706384180648158, 0.069515034511643051, 0.070745415327885364, 0.15128619138644453, 0.083803307026608292, 0.046016401957029593, -0.21064351401911435, -0.10796975372596025, -0.034201557920816583, 0.01431321541581594, -0.012363627500514576, -0.010919865739753575, 0.017870360905994497, 0.017396471253638378, -0.02007942542731345, 0.01046579838246435, 0.032566171451921762, -0.05799439311344054, -0.056177295075322847, 0.034333260533212451, -0.130338354535672, 0.12409557570816747, 0.027546636940189641, -0.032798990212655137, 0.083077034868877978, 0.026168992315517999, -0.018046490267575984, 0.005207681729782772, 0.016259252101333162, -0.009045316783825131, -0.0036967486190426836, -0.028592812647173869, -0.0017423598025251908, 0.043534834876013409, 0.12793975070954686, -0.030070570566209584, 0.068857003169531444, -0.017643635220692303, 0.015058032290063167, -0.032968975479440069, -0.0032509456626426633, 0.015788972597383943, 0.019251438395354474, -0.0090248536114061126, -0.015272751179096435, -0.0082992125422014836, 0.059575532325244533, -0.021134287621881149, -0.075932042745803632, 0.10041080102702246, 0.19730813245926007, -0.094203305677599283, 0.12177128356890216, -0.098130362913164085, -0.0086063527817301141, -0.014980171338571052, -0.091992925322100572, 0.17587869380621152, 0.092173327221095724, 0.021897165586045479, 0.0060375152678496429, -0.02386519187296254, -0.012395399307185896, -0.022849248448590303, -0.048321020114327692, -0.0056779923265118269, -0.084303725772385735, 0.1437989861779114, 0.017114978073907855, -0.023674926554513819, -0.014433128838537597, 0.012240235365543381, -0.066419574069182918, -0.016196236751474646, -0.0049338006978182185, -0.0084001340729884851, 0.0022066601859378697, 0.067545520465919467, -0.1431573605324398, -0.11335071558105927, 0.19200701617075636, 0.047005347129143109, -0.18040165272695829, 0.10462001130261284, -0.2952063874323646, 0.45504702044764878, 0.91968716746889512, 0.075629282019523555, -0.17521945191954877, -0.14741145606308895, 0.15842957449053352, 0.033316423902485841, -0.046539635523190549, -0.029239764799856394, 0.028256857448446561, 0.0047468618190423398, -0.025217898898983061, -0.034399558837173737, 0.11937846922953181, 0.050544258155460854, 0.1394578516494776, -0.10661165850403005, -0.027700064466883865, -0.061719692477810832, -0.00076880260958129979, -0.036686593450547596, 0.020834261928534131, 0.042596098823283357, -0.0052374024484263546, -0.17900936499027453, -0.055817128538076279, 0.1556206112582631, -0.19930768818407885, 0.17374602795438115, 1.0450941798657116, 0.011417685121456564, 0.77470195486186011, 0.069649876974948843, -0.36754664039982721, 0.64326753390430735, -0.24917063867041553, -0.039540586335773169, 0.14567847379973992, 0.065981740018920196, -0.055644084876628218, -0.07712597645572139, -0.00073674462317611055, 0.015701976416950342, -0.032298308999268784, 0.060154323470106401, -0.12792055300624763, 0.058681894939637193, -0.022172258797336572, 0.105971385474807, -0.037749743592242278, -0.053672308552617946, -0.12615835751184992, -0.059356927461923663, 0.012406017329547145, 0.068036947599653702, 0.017107991149299284, -0.041008154934057878, -0.13447215443394772, -0.26816260026693878, 0.18368617361305564, 0.46894237369717728, -0.62872636200456533, 0.60686918965331993, -0.15113295529591578, 0.036743730082780514, 1.463608458760923, 0.12904495334293731, -0.074417004563971351, -0.62003762386212891, 0.017408469796284774, 0.1272883333159911, -0.094937931062917147, -0.057791633379354237, 0.037154193600070003, 0.071495661604358593, -0.010724993842566222, -0.14811752790953939, 0.067869387966970118, -0.094974334151300438, 0.31269363662275046, 0.01610138969469304, 0.011271546890921311, -0.0416046739825933, -0.072156922858987255, -0.050238396740841143, -0.013143422355014638, 0.17181320075266959, -0.00078645201341033847, -0.2587885502662679, 0.0028564673365731054, 0.26469201284371935, -0.12782476119556443, -0.59904899563122194, 1.130668752319608, 0.4201199738298067, 1.5043263157657745, 1.0547694551235969, -1.1141651843864939, 0.90050578840564954, -0.50203282214727829, -0.35825626720186354, -0.34045699686317654, 0.034526357222664658, 0.16469615783949973, -0.10773227995476188, -0.020438609938140839, 0.15231382612170388, 0.0040452326400209297, -0.067443262257115694, -0.120243611846639, 0.072438990225412794, -0.27284169211913811, 0.31416612358708496, 0.23288712244734694, 0.17097210848547523, -0.068392282535087695, -0.1884297381053561, 0.026792869524674363, 0.068621242214500999, -0.028891896132398506, 0.01346687181869554, 0.18273076418691644, -0.039027219909814823, -0.68303147161529132, 0.28364033101911773, 0.20446853801739462, 1.3830149751777017, 1.3682011726001495, 1.0314907737559074, -0.55787436167296611, -0.99998707389668362, 0.11752989424299397, -0.85317721061416762, -0.39240115086507799, 0.26946209593128989, 0.13057930804766765, -0.0048298736467919578, -0.0066491170121302217, -0.023829771073630532, -0.072899207479286424, -0.29873174456544577, 0.027468417557455698, -0.26817287178186705, 0.21489820671404794, 0.048277840380711166, 0.23588030048916517, -0.0035092112107956196, -0.076854124253010928, 0.057907844320372041, -0.011517786678353752, 0.045146091846170348, -0.2624959582084973, -0.26585764990704652, 0.54510315877084026, 0.23155959034339049, -0.44086751164178861, -0.68911282851752897, 0.75019268688655205, 1.6899938281650098, 1.2795505844643045, 1.1758121586434311, -0.068510051090992494, 0.24494470763482898, -0.13955938857309558, 0.26258387187077409, -0.31004041285864437, -0.060946718066343622, 0.20150153854805294, -0.21163882649779717, -0.23457709892354675, 0.14508578389537688, -0.22705801052414679, -0.2857183558836735, -0.19596817846267664, 0.13015393203001066, -0.32999646269142935, -0.19528135326362211, 0.36806933922229168, 0.044374683774465004, -0.17789090203786717, -0.13954351571969323, 0.24064979253244634, 0.047498243759330878, -0.33137912963317673, 0.19951473048424839, 0.64027404819684597, 0.25055297311154973, 0.13414323846201037, 1.4561178571660989, 0.50660029824831798, 0.80695903119669876], "height": 32, "width": 32, "top": {"real": [17750.107020847583, 6210.8656159662787, 10017.081922566327, 3457.5995074393513, 265.850218137708, -70.207684810343054, -8.882891147089472, 24.589756503786479, -11.140592103834141, -1.46746599378154, -0.34121813437428317, 1.0812077419156148, 1.7163290532419633, -4.5666146304635689, -2.6846394014203829, -2.2738643666223468, 1.917575640981823, -2.2738643666223641, -2.6846394014204122, -4.5666146304635395, 1.7163290532419744, 1.0812077419156028, -0.34121813437427356, -1.4674659937815784, -11.140592103834141, 24.589756503786372, -8.8828911470896639, -70.20768481034348, 265.8502181377076, 3457.5995074393486, 10017.081922566325, 6210.8656159662851, 23430.31298691556, -4993.9863865787011, -867.92707841112326, 991.9702295167051, 152.49743471969379, -30.096228916888641, 45.849661798659078, -31.467588946689009, 16.960718546454469, 4.334366206560186, -0.42583907131000093, 0.47860527443285728, -1.8738744001784808, 0.5336707597630499, -3.8841941455247579, -0.75407824565303971, 0.55147195392985549, -0.79345242739339283, -5.9026769793174889, -1.384293215600769, -4.1447942145798233, -2.9130522743117342, -0.87120822186396762, -1.7340023689981476, 8.0221119849442548, -9.1034799758133218, 67.038874839272566, 44.112472832699858, 441.79945796279685, 3245.5044122716786, 3861.5097933424754, -5655.7687421695537, -15889.920855591003, -2792.0170209163471, 3795.2577126849956, 553.88440852995757, -85.905664770254234, 195.26564512659746, 24.791859336013662, 19.637521614531401, -6.1680089153590449, -5.0872002952886746, -0.21502707506361318, 1.4832779566036471, 1.4444541156654906, -2.278921340791467, 0.30255454236990775, -2.3473646939882187, -0.02820677859184775, 1.2126049622480428, -0.78557937342030726, -2.9245439997897638, 1.236962081731878, 1.1827041713801927, -1.6114665304853286, -3.5864367039316236, -14.698165954413065, 20.29282209316159, 43.732891706759197, 111.68572777077691, -209.48016621032312, -187.12585183373633, 2586.3148393820152, 1688.0815183011628, 4748.2203910254093, 1775.7319020900284, 965.53459113591498, -592.89741380746352, 99.787886354888371, 95.459765036004825, 59.296635518443523, -7.6987106331430111, -0.0036180413118668542, -0.43290786252066471, -1.598202682681902, 0.11359872229615781, -0.47654646487314006, 0.052920121324431191, -1.1931569571302629, 1.6263047283546588, 1.1208282513608689, -1.916766911729648, -1.3790558562903064, -0.15528235781115707, 0.33989539819890602, -1.1170639390757935, -0.54019671791116586, 2.4039660385463359, 7.3342674422729397, -18.965458306286095, 0.037731231015075362, 5.7888823722245277, -226.40133474887324, -362.07505408372458, 1068.1182163210274, 1839.5542246985658, 1536.2207931138801, 1719.2247320855465, 351.77395499971544, -218.00810259302051, -154.06814929171503, 76.932404651951941, 11.83330919947551, 3.0799843602247936, 2.1514657945922595, -2.1600173905506583, -0.81329272919310069, -0.057640935991259419, 0.81743781787660708, 0.47007834357539929, 0.82578474649026179, -0.485121980563267, -0.44118347877967812, 0.85372587191033056, -0.96505091801449949, -2.5001329354507269, -0.28227610008090631, 1.5082121759974054, 0.73323799037869442, 0.47326064521443867, -2.2071915479661444, 2.1017967421924912, -14.788373732218277, -10.376064867674437, -110.67917899227207, -400.67251265606825, 13.375377575225066, 2228.271084047331, 1272.0006323499422, 485.30359922269918, -150.18264185504094, -215.33992676901764, -8.8694467345951651, 40.216044199991913, 0.62739683840663496, -1.763160286154926, 0.88761506214793773, 2.2829883187502253, -0.37542737915458396, -0.082924323502338942, -0.2690018095258665, 0.066494953017985289, -1.2937095742683771, 0.90148019848405447, 1.049315066873844, -1.5500155662664761, -1.5096304544124948, -0.76725462527686761, -0.45464639460382006, 0.03503878860161394, 0.85393872935961013, 0.89172763012310696, -0.12413241898971583, -7.4057881467564117, -5.5362761946156125, 1.231534306746803, 18.635135255424384, 26.03667534143711, -87.772888824715437, -225.72012452523001, 395.63478219787083, 378.71701677039351, 36.703056312438811, -91.050394397947159, -3.4611377608751717, 16.691588629055683, -0.030826600791664327, -3.1969308796412692, 1.3816292236713215, 0.42488100600164197, 0.084713763632908196, -0.28535803119354425, 0.0058483120842748731, -0.72249565507011926, -0.80262162213105104, -0.11947358836291604, 0.14251583505573939, -0.26639764768858409, -0.59599833623749066, -0.56289480519068613, -0.092201911820288446, 0.77223819072116529, 0.55522491064190738, -0.14411590791637013, -2.1806910872492855, 1.0588352659849944, -1.722617263430356, -9.0167440767821265, -38.483896322518888, -22.599080819691828, 25.541139705127691, 375.57983717352784, 181.47383294778024, 149.67885098073037, -4.1008782517976057, -3.7383475143657869, 18.721866312633942, -1.1602382001305473, -5.8391540939420112, -0.21088907624048864, -0.29870055099180226, 0.95331837446181378, 0.060424395643205529, -0.42858353450158043, -0.37036207729837234, -0.30369644506457261, -0.75652176347658984, -0.44545713631522388, 0.71326845215283508, 0.071761808928956311, -0.63829698193917794, -0.45235505563855871, -0.080159340308425753, -0.15881914095274483, 0.37773826228539636, -0.097086363313521495, -0.86706044290909523, -1.3342582973973045, -0.61792777020441481, 0.16957438507140327, 10.565905071599056, 15.380533375221102, 10.500239194747859, 19.996280010030237, 18.60272375866586, 4.0348314717803326, 11.168149094486143, 14.395513359675057, -3.576502394652771, -3.8760628092228431, 2.0358977627782506, -1.6580642648165547, -0.13166485139511078, 0.2591565726162201, -0.22701969228044258, -0.29312645623416966, 0.099969472199353857, -0.39101661164543228, -0.042546772814251566, 0.29433076927773894, -0.50935384874181677, 0.090487726861141621, -0.092143985882572388, -0.58253529440268437, -0.41671432281001702, 0.14644815319126417, 0.2723500443275419, -0.039709576626662156, -0.41013369223337515, 1.1756350920235048, 1.5259648698081887, -4.4516278662013118, -8.128003687892722, 9.6041080205516938, 20.813833475064627, 12.963050463991683, 7.8870012209429445, 15.407970089260955, 5.3783096889109112, -3.1350030536179672, 1.9101786820520572, 1.6649545288728531, -2.1421648847872561, 0.35230920085802159, 0.37729718445187704, 0.020823929394603979, 0.087139744957248078, -0.10976037032555666, -0.56986899401739111, -0.44020908152219312, 0.69190564661152409, 0.20725962387572397, 0.64042787368671816, 0.71867283099896739, 0.16183428074791173, -0.17223426808716463, -0.17676233483878773, -0.27594664738318686, 0.095238357444986099, 0.020726971935864241, -0.11463597101365795, -0.32333311610982368, 1.2888258236383847, 3.0237538834517612, -0.12189842989060286, -4.5002056479068653, -2.8307120360813536, 9.0325055742836575, -5.0836871456416608, -6.4226783361185662, -2.3832064029645541, 2.1204380507892151, -2.1797923249754283, -2.1316882770768921, 1.4364513793862836, 0.82847417311036753, -0.54705107713687473, -0.053118808001263999, 0.10349330090189141, -0.027586170457780668, -0.27866115184949369, -0.4744187891270259, 0.32835706009268834, 1.8712198771790323, 0.44937016780231559, 0.8488760221500451, 0.35191803530681381, 0.28758243475250972, -0.6426201464805843, -0.40597353100929789, -0.22244529364246871, -0.071869502235051647, 0.33021466122988641, 0.24942995069051274, -0.5214330526633183, -0.093662554700336673, 1.1233733739102922, 1.9003965613191238, 0.07120934753760759, -8.6549236119446178, -1.8427620371931031, -0.52295775466804406, 3.4092952720370122, -0.65003177967723336, -0.1840159964371442, 1.8831870902689825, 0.7983111628921199, -0.39925172982701851, 0.051205177403033819, 0.2598923527237304, -0.18824332097783142, 0.13750859145926242, 0.78226830313090512, -1.2572785001190825, 1.3355363328556911, 1.2220896356262305, 1.6491421999762639, 1.7622421170936717, 0.96487439834416744, 0.79128381470112286, -0.26979590260649117, -0.37236776211072153, -0.65318812250908376, -0.13360581679076858, -0.1817007191765827, 0.4244891020544192, 1.0695325895656689, -0.49200291489349485, -0.59959066580988751, -2.4610304070506381, -1.7528842523917616, 5.4092974592427554, 11.628502736704702, 13.318871722095572, 5.3844201289172418, 0.12839725172390623, -0.91462159985003533, -0.4207633568928546, 0.73289618436063231, 0.98164545606019249, -0.31879685258307294, -0.45467275635234927, 0.23929181220408463, 0.73553732103708702, -0.78050285180289647, -0.20614377250205779, -0.66147354811396541, 0.84722544756444751, 3.1542100241342745, -1.0454812204468338, 0.49112272834774079, 0.89780094097137775, -0.80686344960242362, 0.26166207514350009, 0.34234964401672252, -0.27361449647202374, 0.078400343257288022, 0.27130715748636108, -0.26706243773596255, 0.92879560872659372, -1.3686907450256593, 0.37153092475944227, -0.0077060915391855903, -2.1487270106054996, 8.2423115107991176, 10.211121947580189, 11.004080199445575, 5.512476255300478, 0.43541395104991965, 1.3138259234516578, 0.47697687525002369, -0.37437690637871951, 0.49170325146724819, 0.53092933204425685, 0.78977231856458541, 0.054935970034302541, 1.0907299238052364, -1.4537313504920895, 1.6637415256529431, 2.3271742206176285, 1.6752406948773604, 6.0227778178364675, -2.5693140331095292, -1.3449083811022362, -0.063540759326359386, 1.2007479971921078, 0.26947504329539196, -0.043317616642408706, -0.090092404474960294, -0.56149356452164179, -0.29757479536733583, -0.82531287850485402, 0.52880973840083989, -0.51042849628299192, 1.1866854822445434, 7.7130480762288167, 17.626109919920186, 26.29568713002228, 9.1514979514586194, -1.521929375229722, 0.85364359123771261, -0.365663824522519, -1.1590870007863963, 0.48082630002696519, 0.93059067445638155, 1.1024013035834523, 0.63841829574218301, 1.5659590764611497, 0.20674310541385973, 1.0081259505833966, 1.4865008399227626, -1.6031905208728288, 5.7718835709767413, 0.2720344299284404, 3.2411570780563994, -1.0481514144590243, 2.2338214812745694, 3.1628749936702945, 1.7743358086362808, -0.03099281849361625, -0.41442882712954171, -0.31459130661253104, -1.7323756021672925, 0.19363530105298493, 0.61123212270521721, 4.8260404786904152, 6.7814469674820135, 4.974801806376985, 19.935738411546794, 15.127019575257112, 16.951752765718286, 6.976320734749117, 0.83204582564536733, -0.22090351652873133, -0.48187393778382737, -0.72216259413318939, 0.68337514879437744, 1.4934027691778771, 1.3836806937153638, -0.089108362899698895, 0.57910533764344185, 3.1507795425198797, 1.9139554692796912, 4.1423990225960203, -5.0893580330573318, 4.6545320074577088, -1.3079026033800338, 1.2583901568403451, 1.3087920196200225, 1.8018391908724931, 1.3933980798910508, 0.67604933114803067, -0.49475104816844406, -1.4152366315362725, -0.64580662533466104, -1.4537653735214031, 3.1014323943375786, 7.6843087454063586, 10.909142678924193, 12.359496229531475, 15.280082473470735, 24.669023160454167, 12.739042274822818, 1.7204760023261643, 0.52929508548715176, 2.1482192005482723, -1.481161898887601, -0.79404079710432474, 0.46540881956838565, 0.92624711854277975, 1.0380549761479756, 2.3168267428989626, 1.5788387366050483, -0.83766970523004924, 4.7505720502223729, -2.6570294115495297, 6.7612131323955511, -2.6570294115495336, 4.7505720502223783, -0.83766970523005702, 1.5788387366050476, 2.3168267428989657, 1.0380549761479752, 0.9262471185427773, 0.46540881956838565, -0.79404079710432862, -1.4811618988876001, 2.148219200548279, 0.52929508548715154, 1.7204760023261518, 12.739042274822809, 24.669023160454188, 19.935738411547018, 12.35949622953156, 10.909142678924129, 7.6843087454063417, 3.101432394337563, -1.4537653735213987, -0.64580662533467093, -1.4152366315362839, -0.49475104816844562, 0.67604933114803401, 1.3933980798910552, 1.8018391908724987, 1.3087920196200247, 1.2583901568403484, -1.3079026033800301, 4.6545320074577061, -5.0893580330573203, 4.1423990225960088, 1.913955469279683, 3.1507795425198943, 0.57910533764344618, -0.089108362899694094, 1.3836806937153729, 1.4934027691778826, 0.68337514879437378, -0.72216259413318618, -0.4818739377838111, -0.22090351652873805, 0.83204582564534302, 6.976320734749093, 16.951752765718314, 15.127019575257133, 17.626109919920285, 4.9748018063769956, 6.7814469674819922, 4.8260404786903921, 0.61123212270520444, 0.19363530105297699, -1.7323756021672947, -0.31459130661253587, -0.41442882712954437, -0.030992818493609464, 1.7743358086362877, 3.162874993670298, 2.2338214812745694, -1.0481514144590143, 3.241157078056395, 0.27203442992843363, 5.7718835709767413, -1.6031905208728274, 1.4865008399227673, 1.0081259505833953, 0.20674310541386615, 1.5659590764611582, 0.63841829574219022, 1.1024013035834526, 0.93059067445638244, 0.48082630002696636, -1.1590870007863949, -0.36566382452250978, 0.85364359123770939, -1.5219293752297598, 9.1514979514585963, 26.295687130022237, 8.2423115107992349, 7.7130480762288673, 1.1866854822445243, -0.51042849628302267, 0.52880973840082446, -0.82531287850485058, -0.297574795367338, -0.56149356452165111, -0.090092404474959795, -0.043317616642408116, 0.26947504329539745, 1.2007479971921178, -0.063540759326354057, -1.3449083811022313, -2.5693140331095257, 6.0227778178364719, 1.675240694877361, 2.3271742206176271, 1.6637415256529449, -1.4537313504920832, 1.0907299238052377, 0.054935970034312817, 0.78977231856459063, 0.53092933204426229, 0.49170325146725052, -0.37437690637871607, 0.4769768752500283, 1.3138259234516545, 0.43541395104990577, 5.5124762553004887, 11.004080199445557, 10.211121947580168, 11.628502736704604, -2.1487270106054663, -0.0077060915391693741, 0.37153092475944555, -1.3686907450256616, 0.92879560872659006, -0.26706243773595856, 0.27130715748636525, 0.078400343257288438, -0.27361449647201985, 0.34234964401672396, 0.26166207514350365, -0.80686344960242218, 0.8978009409713853, 0.49112272834772974, -1.045481220446846, 3.1542100241342701, 0.84722544756444151, -0.66147354811395898, -0.20614377250205829, -0.7805028518028938, 0.73553732103708935, 0.23929181220408727, -0.45467275635235105, -0.31879685258307255, 0.98164545606019549, 0.73289618436063131, -0.42076335689285432, -0.91462159985003766, 0.12839725172388108, 5.3844201289172204, 13.318871722095585, -1.8427620371929223, 5.4092974592426515, -1.7528842523917609, -2.4610304070506088, -0.59959066580987819, -0.49200291489348996, 1.0695325895656664, 0.42448910205441354, -0.18170071917658262, -0.13360581679076522, -0.65318812250908243, -0.3723677621107227, -0.26979590260649017, 0.7912838147011273, 0.96487439834416677, 1.7622421170936722, 1.6491421999762705, 1.2220896356262196, 1.3355363328556904, -1.2572785001190749, 0.78226830313090379, 0.13750859145926628, -0.18824332097783478, 0.25989235272372874, 0.051205177403034013, -0.39925172982701423, 0.79831116289212645, 1.8831870902689678, -0.18401599643714045, -0.65003177967722925, 3.4092952720370082, -0.52295775466808114, -5.0836871456417914, -8.654923611944545, 0.071209347537571008, 1.9003965613191072, 1.1233733739103013, -0.093662554700343362, -0.52143305266331286, 0.24942995069051838, 0.33021466122988513, -0.071869502235049398, -0.22244529364246549, -0.40597353100929245, -0.64262014648058341, 0.28758243475251449, 0.35191803530680799, 0.84887602215004632, 0.44937016780231587, 1.8712198771790289, 0.32835706009269156, -0.47441878912702484, -0.27866115184949264, -0.027586170457779294, 0.1034933009018901, -0.053118808001266206, -0.54705107713687218, 0.82847417311037153, 1.4364513793862805, -2.1316882770768819, -2.1797923249754287, 2.1204380507892009, -2.3832064029645679, -6.4226783361184081, 7.8870012209433504, 9.0325055742834763, -2.8307120360814029, -4.5002056479068191, -0.12189842989059124, 3.0237538834517572, 1.2888258236383801, -0.32333311610982529, -0.11463597101365604, 0.020726971935865871, 0.09523835744498739, -0.27594664738318975, -0.17676233483878293, -0.17223426808716019, 0.16183428074791517, 0.71867283099897139, 0.64042787368672205, 0.20725962387572536, 0.69190564661152509, -0.44020908152219435, -0.56986899401739244, -0.10976037032555588, 0.087139744957248716, 0.020823929394600361, 0.37729718445187588, 0.35230920085802736, -2.142164884787245, 1.6649545288728365, 1.9101786820520659, -3.1350030536179658, 5.3783096889108455, 15.40797008926083, 18.60272375866586, 12.963050463991696, 20.813833475064644, 9.604108020551676, -8.1280036878927362, -4.4516278662013278, 1.5259648698081876, 1.1756350920235052, -0.41013369223337515, -0.039709576626662003, 0.27235004432754167, 0.14644815319126442, -0.41671432281001886, -0.58253529440268281, -0.092143985882572915, 0.090487726861142509, -0.50935384874181677, 0.29433076927773738, -0.042546772814252246, -0.39101661164543189, 0.09996947219935487, -0.29312645623417033, -0.22701969228044291, 0.2591565726162216, -0.13166485139511078, -1.6580642648165524, 2.0358977627782484, -3.8760628092228537, -3.5765023946527563, 14.395513359675084, 11.168149094486147, 4.034831471780354, 181.47383294778047, 19.996280010029963, 10.50023919474779, 15.38053337522109, 10.565905071599067, 0.16957438507140921, -0.6179277702044097, -1.3342582973973056, -0.86706044290909146, -0.097086363313522245, 0.37773826228539636, -0.1588191409527461, -0.080159340308420923, -0.45235505563855616, -0.63829698193917661, 0.071761808928958337, 0.71326845215283419, -0.44545713631521988, -0.75652176347658784, -0.30369644506457882, -0.37036207729837373, -0.42858353450157866, 0.060424395643203697, 0.953318374461814, -0.29870055099180354, -0.21088907624048941, -5.8391540939419864, -1.1602382001305538, 18.721866312633882, -3.7383475143657954, -4.100878251797706, 149.67885098073012, 395.63478219787089, 375.57983717352744, 25.541139705127598, -22.599080819691835, -38.483896322518888, -9.0167440767821709, -1.7226172634303247, 1.0588352659849967, -2.1806910872492873, -0.14411590791637696, 0.55522491064190693, 0.77223819072116739, -0.092201911820284366, -0.56289480519067914, -0.59599833623749254, -0.26639764768858487, 0.14251583505573989, -0.11947358836291141, -0.80262162213105359, -0.72249565507012325, 0.0058483120842701027, -0.28535803119354936, 0.084713763632907418, 0.42488100600164375, 1.3816292236713219, -3.1969308796412634, -0.030826600791668796, 16.691588629055648, -3.4611377608751566, -91.050394397947187, 36.703056312438633, 378.71701677039351, 1272.0006323499422, -225.72012452523026, -87.772888824715139, 26.036675341437149, 18.635135255424501, 1.2315343067468421, -5.536276194615616, -7.4057881467564011, -0.12413241898971436, 0.89172763012310496, 0.8539387293596038, 0.035038788601613982, -0.4546463946038164, -0.76725462527685828, -1.509630454412483, -1.550015566266479, 1.0493150668738473, 0.90148019848405436, -1.2937095742683813, 0.066494953017976297, -0.26900180952586789, -0.082924323502345257, -0.37542737915458746, 2.2829883187502267, 0.88761506214793962, -1.7631602861549227, 0.62739683840662275, 40.216044199991877, -8.8694467345952006, -215.33992676901772, -150.18264185504114, 485.3035992226977, 1536.2207931138814, 2228.2710840473319, 13.3753775752247, -400.67251265606865, -110.679178992272, -10.376064867674508, -14.788373732218197, 2.1017967421924983, -2.207191547966143, 0.47326064521441386, 0.73323799037869852, 1.5082121759973919, -0.28227610008090809, -2.5001329354507282, -0.96505091801449672, 0.8537258719103169, -0.44118347877968372, -0.48512198056327205, 0.82578474649025857, 0.47007834357539341, 0.81743781787659597, -0.057640935991271409, -0.81329272919311113, -2.1600173905506721, 2.1514657945922622, 3.0799843602248034, 11.833309199475522, 76.932404651952027, -154.06814929171483, -218.00810259302057, 351.77395499971459, 1719.2247320855445, 4748.2203910254084, 1839.554224698564, 1068.1182163210278, -362.07505408372486, -226.40133474887313, 5.7888823722244789, 0.037731231015098787, -18.965458306285971, 7.3342674422729388, 2.4039660385463657, -0.54019671791118873, -1.1170639390757879, 0.33989539819890108, -0.15528235781113153, -1.3790558562903272, -1.9167669117296613, 1.1208282513608707, 1.6263047283546224, -1.193156957130264, 0.052920121324427458, -0.4765464648731435, 0.11359872229612604, -1.5982026826818876, -0.43290786252068791, -0.0036180413118654109, -7.6987106331430244, 59.296635518443559, 95.459765036004427, 99.787886354888386, -592.89741380746432, 965.53459113591339, 1775.7319020900306, -15889.920855591006, 1688.0815183011607, 2586.3148393820165, -187.12585183373636, -209.48016621032366, 111.68572777077674, 43.732891706759332, 20.292822093161472, -14.698165954413049, -3.5864367039316574, -1.611466530485326, 1.1827041713801545, 1.2369620817318689, -2.9245439997897797, -0.78557937342029793, 1.2126049622479607, -0.028206778591846705, -2.3473646939882631, 0.30255454236988177, -2.278921340791416, 1.4444541156654738, 1.483277956603626, -0.21502707506361871, -5.0872002952886604, -6.168008915359052, 19.637521614531632, 24.791859336013527, 195.26564512659732, -85.905664770254006, 553.88440852995757, 3795.2577126849942, -2792.0170209163462, 23430.312986915553, -5655.7687421695537, 3861.5097933424781, 3245.5044122716772, 441.79945796279628, 44.112472832700512, 67.038874839272665, -9.1034799758128742, 8.0221119849442406, -1.7340023689979776, -0.87120822186400182, -2.9130522743116929, -4.1447942145798446, -1.3842932156007377, -5.9026769793175413, -0.7934524273933764, 0.55147195392985315, -0.75407824565312243, -3.8841941455247726, 0.53367075976302614, -1.8738744001784735, 0.47860527443281381, -0.42583907130996707, 4.3343662065600954, 16.960718546454476, -31.467588946689279, 45.849661798659248, -30.096228916889014, 152.4974347196931, 991.97022951670215, -867.92707841112428, -4993.9863865787029], "imag": [0.0, -2277.9356791272003, -4760.5440393641002, -3362.7502157108247, -452.6326365977277, 12.902525613472081, -66.324591493039264, 21.395810280639775, 12.049924797684376, -6.4322319301924828, -2.6401787430633603, -2.8941924141450355, -1.0996569736184965, -2.1837600734887777, 0.87308165169681873, -0.4143473704962265, 0.0, 0.41434737049617953, -0.87308165169672458, 2.1837600734887985, 1.0996569736184816, 2.8941924141450213, 2.6401787430632839, 6.4322319301924944, -12.049924797684376, -21.395810280639751, 66.32459149303935, -12.902525613472182, 452.63263659772764, 3362.7502157108197, 4760.5440393641011, 2277.9356791272016, -19170.834011440937, -3837.2504381898657, -1562.2865240696121, -2188.2624437144, -79.985389317630222, -65.73387671644744, -129.03232713044309, -21.574731283989859, 19.219741943874205, -1.3770831994436832, -4.6285618656089973, 1.9356332468609161, 1.914358953204174, -0.39274625271235863, -2.8755632420164114, 1.3910769799127469, 2.1983982122300691, -0.93402216187723952, 1.5955119590990243, 2.5332827335358816, 2.5722659267438073, -2.1433748844126024, 4.7051607105169868, 6.0715674792926295, -11.686157623491814, 7.736622407403881, 65.513717323045199, -68.939947660481394, 105.08267177765576, -524.55810593663, 266.59769699529215, -6565.2013915603111, -12998.804313286138, -7140.8743305075541, -1281.4742181751476, 387.93265499317204, 232.0789193763446, -67.213502175129548, -82.499903393484686, 23.742310304940581, 13.167070698799225, -1.2601921779485123, 0.22176027695648487, -0.82869028871129857, 0.81638586337482588, 0.030361957750051641, -1.8114765667849664, -0.33462283171345614, -1.4063404110660631, 1.8330278968089115, -0.19923279402973898, 2.6325944160953934, 0.74767454410312451, 0.33273215463055067, 0.1242120122414053, 0.13350548988021607, -6.7517210150420688, -24.893726268864828, 68.764375920932309, 203.58844824671789, -52.443377241039173, 589.84188198577237, 814.38538391702434, -3077.5993672243876, -9988.2725309741327, -5000.8757444384873, -213.86760970710961, -153.72085790515706, 376.50689706328353, 10.499004391497454, -22.259718007212538, -1.0587560944123571, 1.3367261976572533, -1.845627367813951, -0.50817475490747221, 2.6646257572641145, 0.72663987403826902, -1.4553261209412862, -1.7486114908592469, -2.2393579162674944, 1.7872556824974239, -0.4779279337995983, 0.90990468751900189, 0.56850457149088529, -0.042260514128558184, -2.0950938638350283, 0.37842412015856491, 2.7868839636562086, -7.1796038797667068, -2.6532766677526052, 42.569555354666804, 86.618323256686423, 262.60583525697274, -570.34935164465662, 953.3853188584327, -2608.4519239039555, 423.76919790180068, -777.49072200787271, -730.15551768721184, 267.77827954485849, 48.782690015655945, -52.084914641107339, -0.26732768536918228, 18.791248861451912, 0.034376983736590996, -4.7733525107569852, 0.2450889317389604, 0.69551673309505335, 0.74689297610787508, 0.36254455317814038, -0.082864627703290866, -0.11088180406499534, -1.9145243520823481, 0.63809937787576865, -0.47609558693404908, 1.1704253870693357, 0.1035348526676573, -0.98268640942924379, -0.66403014974353547, 1.4462870038602533, 3.6812627646537175, -8.6847068298461885, -1.7026644231740631, 110.68919188818327, 26.998515460375977, -65.421023262373453, -744.09540667092062, -46.729307478653496, -1526.2181503116453, -735.50774046161519, 282.18880697804167, -182.37864683063907, -54.052681314235201, 39.603849315110104, 10.295701682078779, 2.359337802307917, -0.63461911007383953, -1.7124190510555728, -0.21593130161202514, 0.76755040332111413, 1.2882353738829533, 0.44968314290067118, 0.25989055470659483, -0.66713893962057369, 0.13682839189736165, -0.36883118795348507, 0.91230383136371929, -0.46996446240256329, 0.30219131214854422, -0.19558932994062075, 0.012615763849470061, 1.762420772813289, 1.9045345605049635, -3.7790359077733253, -11.964107143689581, 4.5083476182968525, 61.96781696120042, -254.89688572081204, 140.68826246910922, -45.053807917761794, 314.74785574475101, -8.8001261891015723, -360.31891091191073, -57.025448777424479, 44.579795546563595, -19.359200628613657, 3.6862817789376683, 8.9206630611283089, 0.18896973496668307, -1.0227323524081069, -0.33838743748909134, 0.43833208591156991, 0.0074294169071561673, 0.50446476014305897, 0.1890893708139402, 0.65133332546862077, -0.77483290182744535, -0.30779007494077709, -0.80427129683389309, 0.26011219704759059, 0.23461588343644721, -0.056507066939534729, -0.44513357712322738, 0.64667209976975049, 1.5545017016282721, -1.5250850436867627, -9.5917712473092696, 13.475211488788412, 28.837963587037802, -21.930976284520067, -337.61540934331555, -197.27075321520147, -65.634374404237917, -45.716174186409042, 38.688397244662028, -10.636065931319841, -36.620593610799475, 11.815798616251305, 9.0326984830007095, -3.0325028906240825, -0.075862266735019127, 0.19104942819406223, 0.073726425569811863, 0.18311714867084192, 0.63036999033226249, -0.098626184449280729, 0.095619359707605045, 0.13744024889930673, -0.097089152898782338, -0.81683568275166918, 0.54386217024143169, 0.041501479859297266, 0.43031399471588661, 0.25470104821283102, 0.17326636360277617, 0.46079094226119127, -0.16530865667454481, -0.86391702025516282, -4.9611285532463629, -12.372184270457062, 11.516126179313906, 3.2997425925449804, 2.0570987009733872, 24.878800155519915, 44.041788084316849, 28.446155418037641, -32.190550839656126, -17.692027714058376, 11.789513877445387, 1.9317197634824401, -3.4507560855810171, 0.36626836712779354, 0.48074766055651602, 0.18044316667269442, -0.28240974426973131, -0.16613612027343372, 0.029095718259237995, 0.24450075339721422, -0.091330331747513635, 0.097634295479075664, -0.36806371804963284, 0.16614591312540511, -0.77395352504544712, -0.3264657443238585, 0.015061212014132833, 0.29085100346092985, 0.047770712409502418, 0.14922819541222396, -0.39792121836056477, -0.1921281774085053, 0.83895281997413806, -1.5703737430868945, -8.4367427775736452, 5.6601916863792336, -5.1510032561702124, -22.050605310259861, -1.9854594697574779, -7.5311386138630718, 7.4148341093741337, 8.0952123464619365, -4.3629732153959058, -0.87617222540110651, 1.0539667118389069, -0.69495683349647086, -0.53597221218340763, 0.21612918483653182, 0.16753374785242167, -0.14587335963051168, 0.2984129896925935, 0.75720231383362635, 1.2725586605629424, -0.23788459440434945, -0.43858849762191893, -0.79801858694486538, -0.41846754429723099, -0.46161406526582383, 0.58294801786464678, -0.078939183973068427, 0.31479155143425391, 0.31425797573231379, -0.084400039832661436, -0.69288180199641103, -0.21778449617622889, -0.19533791786522492, -0.22665765093841067, -0.31956792613405932, 6.3352095159571435, 13.304182061875538, 9.0685889178215753, 13.820343051841526, -2.9904131431626517, -6.4644843028741459, 1.4950174056035006, 0.22841081726546483, -1.0443697855595202, -0.36648156701751267, 0.48825453192442753, 0.32511669967392476, -0.74952192547288132, -0.32406742573949188, -0.14589390394899102, 0.81615985313544603, 0.21110858701983537, -0.62135646441400272, -0.27503339195756299, 0.23916839371037824, -1.0440547633891395, -0.40792084439497517, 0.55610134656922072, 0.37457806876122546, 0.17778944632276653, -0.069642667350154328, -0.39526560004564598, 0.69822150614317735, 0.740778974977921, -0.31290252683747921, -2.0096273906801638, -0.75165898775917361, -0.15987777595408992, -2.5516179078608778, -8.9643314564796608, -15.134863386021781, -2.1073345817546003, 0.61887776540407591, -3.0206322635570779, -0.13950893398737912, 0.63280527166495781, -0.16318694006603662, 0.06410706438489891, 0.11411070867346804, -0.2886162817684455, -0.35613651800395313, 0.12924440993745664, 0.38077834891929796, 0.82374133978448782, 0.42592408743381815, -1.4993887570975311, 1.2113263922466315, -0.61651842130949264, -0.92820589700907985, 1.2123284995709924, -0.37394823077908607, -0.062695571319925397, 0.28532586796592635, -0.016166881608109255, -1.1132083022635739, 0.86546596809253507, 2.0760623026361933, 0.51322827606545562, -2.2491343600113889, -2.0374388890600263, 1.1231676638159473, 0.31214242438772172, 2.2815521755579042, -5.3082712246609329, -6.7280927719717081, 0.71404381047788856, 1.0348891792697787, -0.062580928735681385, 0.11553928672311624, 0.19710411955257187, -0.22253376417909151, -0.05143415191355815, -0.61738709055352659, -0.26515618204121805, 1.3879170617746586, 1.9147895569711311, -2.7981144693643607, 1.6351053618238791, 1.2876141106871726, -0.53839815046157202, -0.81616813855627257, -0.55773229035800009, -0.16310476776122179, -1.4828287822897712, 0.19857441865721279, -0.22253902629935005, 0.76149089771667944, 0.38423492006819204, 0.13633825788919049, -0.40617531895308634, -1.9006670978622686, -5.6055295794952666, -3.5201069577585091, -0.70565394755327504, -4.8233879396582013, -3.7118525914264513, 0.87639764763224848, -3.9705679716456896, -0.3066516936670704, 1.2925955094882555, 0.98057929368147423, -0.5185509231518588, 0.068504647941653091, -0.50802141302695303, -0.65025043431383311, 1.6393007306999561, -0.046634622615140439, -0.42095485749155304, 2.8628962346767608, -0.87664183209871016, -0.061380249620325719, -0.67583720185830587, -2.165804182360429, -2.2334105499018988, -1.7315960703588726, 0.023607096501577673, -0.72578349898044647, 0.49340703388266716, -0.17688316963519096, 0.91231104952944475, 1.0401382704665323, 0.40638239361664558, -3.5528586670065754, -3.2389924588328527, -3.336337544628424, -3.3053285670589143, 0.42529364953930032, 1.2623512061316915, -7.9337267372836493, -1.0910503490681764, 0.30591237262721482, 0.79049013658839029, 0.15779582936744363, 0.35530534658354934, -1.0136463777621887, -0.43596379336607172, 1.3766560550226186, 1.2643786263280588, 0.081112249920068616, 0.30101965208538256, -2.9649644331404845, 3.940601481283172, 1.2809925361642973, -2.3740821954043603, -1.8568139214134618, -2.2875531209700912, -2.0068530505793203, -1.6161905886738603, -0.069970559948539499, -0.68452644609555957, 1.1180256373411306, 1.0386505011587546, -0.45802414484767806, -1.8827293053017495, -1.1452872829873149, -9.8282380345909921, -4.8375314158562777, 0.035534088492687292, 5.8735645683280717, -7.2148282372822923, -1.9024855757814658, -3.6729219824305321, -0.04721742712852893, 0.80045523566507781, 0.91856151213872683, 0.18365173124028911, 1.0527130168554166, 0.35231243394437906, -0.96832866520995176, 0.38866324603453256, 1.1024459216780036, -1.6264163010988006, 5.9086248051519128, 1.1522588148293589, -4.0123769411888297, -1.3409560614230069, -2.2450482885496141, -1.484164394238348, 0.58569229342098317, 0.035646451001070931, -1.3588202093923047, 0.006860270440306241, -0.84539036438792836, 0.31580363771161246, -0.13161779536446233, -0.34549511895795371, -1.1291296924180168, -2.1947930228924113, -14.643424663744323, 0.0, 7.8456512467946364, 11.843681310787776, -4.1545820919682566, 0.098834485797376734, 1.2191537903053737, 0.14782839419733967, -0.21707569483499198, 1.3287726303022269, 0.012891904979339022, 0.146292284007916, 0.70147269041246085, 1.7613861146868823, 0.97884915683286033, 1.5860078469473597, 0.15814907094033309, 0.0, -0.158149070940315, -1.5860078469473551, -0.978849156832858, -1.7613861146868832, -0.70147269041248062, -0.14629228400792066, -0.012891904979343359, -1.3287726303022269, 0.21707569483499028, -0.14782839419734384, -1.2191537903053777, -0.098834485797375804, 4.1545820919682752, -11.843681310787789, -7.8456512467946329, -0.035534088492520481, 14.643424663744339, 2.194793022892366, 1.1291296924180338, 0.34549511895794383, 0.13161779536445045, -0.31580363771161418, 0.84539036438793247, -0.0068602704403050632, 1.3588202093923036, -0.035646451001076773, -0.58569229342099216, 1.484164394238344, 2.2450482885496172, 1.3409560614230207, 4.0123769411888466, -1.1522588148293609, -5.9086248051519057, 1.6264163010987922, -1.102445921678016, -0.38866324603453178, 0.96832866520995076, -0.35231243394438311, -1.0527130168554157, -0.18365173124028866, -0.91856151213871651, -0.80045523566507271, 0.047217427128521561, 3.6729219824305099, 1.9024855757814958, 7.21482823728231, -5.8735645683280371, 3.3053285670587775, 4.8375314158562217, 9.828238034591017, 1.1452872829873084, 1.8827293053017478, 0.45802414484767828, -1.0386505011587623, -1.1180256373411397, 0.68452644609555668, 0.069970559948536071, 1.6161905886738546, 2.0068530505793158, 2.2875531209700912, 1.856813921413464, 2.3740821954043709, -1.2809925361643011, -3.9406014812831787, 2.9649644331405014, -0.30101965208537818, -0.081112249920068671, -1.2643786263280541, -1.3766560550226248, 0.43596379336607571, 1.0136463777621971, -0.35530534658355051, -0.15779582936744335, -0.79049013658838307, -0.30591237262721799, 1.0910503490681696, 7.9337267372836298, -1.2623512061316555, -0.42529364953934357, 0.70565394755329391, 3.336337544628484, 3.2389924588327594, 3.5528586670065589, -0.40638239361663953, -1.0401382704665338, -0.91231104952944642, 0.17688316963519082, -0.49340703388266682, 0.72578349898044092, -0.023607096501574151, 1.7315960703588795, 2.2334105499019046, 2.1658041823604322, 0.67583720185832141, 0.061380249620329064, 0.87664183209870872, -2.8628962346767408, 0.4209548574915572, 0.046634622615141327, -1.6393007306999556, 0.65025043431383445, 0.50802141302695369, -0.068504647941647845, 0.51855092315186113, -0.98057929368147057, -1.2925955094882546, 0.30665169366707518, 3.9705679716456634, -0.8763976476322699, 3.7118525914263776, 4.8233879396582111, -0.31214242438772705, 3.5201069577584692, 5.6055295794952924, 1.9006670978622411, 0.40617531895307485, -0.13633825788919066, -0.38423492006819598, -0.76149089771668665, 0.22253902629934941, -0.1985744186572119, 1.4828287822897714, 0.16310476776122626, 0.55773229035800354, 0.8161681385562749, 0.5383981504615758, -1.2876141106871739, -1.6351053618238793, 2.7981144693643794, -1.9147895569711246, -1.3879170617746619, 0.26515618204121727, 0.61738709055352903, 0.051434151913562459, 0.22253376417909698, -0.19710411955257243, -0.11553928672311804, 0.062580928735678887, -1.0348891792697743, -0.71404381047787879, 6.7280927719716743, 5.3082712246609018, -2.2815521755579335, 8.9643314564797052, -1.1231676638158536, 2.0374388890599802, 2.2491343600114058, -0.51322827606545429, -2.0760623026361911, -0.86546596809253695, 1.1132083022635748, 0.016166881608109234, -0.28532586796592802, 0.062695571319927382, 0.37394823077908801, -1.2123284995709924, 0.92820589700907918, 0.61651842130949663, -1.2113263922466326, 1.4993887570975342, -0.42592408743381316, -0.82374133978448039, -0.38077834891929335, -0.12924440993745251, 0.35613651800395341, 0.28861628176844567, -0.11411070867346547, -0.064107064384899673, 0.16318694006603501, -0.63280527166495915, 0.13950893398738348, 3.0206322635570557, -0.61887776540410167, 2.1073345817545266, 15.134863386021769, -9.0685889178216552, 2.5516179078607184, 0.15987777595415892, 0.75165898775916729, 2.0096273906801727, 0.31290252683747422, -0.74077897497792289, -0.69822150614317713, 0.39526560004564548, 0.069642667350159129, -0.1777894463227658, -0.37457806876122451, -0.55610134656922283, 0.40792084439497267, 1.0440547633891391, -0.23916839371037832, 0.2750333919575636, 0.62135646441400449, -0.21110858701983135, -0.81615985313544015, 0.14589390394899499, 0.32406742573949032, 0.74952192547288177, -0.32511669967392071, -0.48825453192442569, 0.36648156701751228, 1.0443697855595189, -0.22841081726546683, -1.4950174056034862, 6.4644843028741308, 2.9904131431626397, -13.820343051841599, 1.9854594697574315, -13.304182061875386, -6.3352095159572039, 0.3195679261341049, 0.22665765093840967, 0.19533791786523994, 0.21778449617622839, 0.69288180199640803, 0.084400039832664031, -0.31425797573231284, -0.31479155143425158, 0.078939183973069621, -0.58294801786464789, 0.46161406526582016, 0.41846754429722727, 0.79801858694486438, 0.43858849762191948, 0.23788459440435036, -1.2725586605629382, -0.75720231383362191, -0.29841298969258917, 0.14587335963051393, -0.16753374785242225, -0.21612918483653495, 0.53597221218340851, 0.69495683349647419, -1.0539667118389073, 0.87617222540110107, 4.3629732153958827, -8.0952123464619206, -7.414834109374171, 7.5311386138631651, -44.041788084316849, 22.050605310259897, 5.1510032561702142, -5.6601916863792514, 8.4367427775736488, 1.5703737430868991, -0.83895281997413862, 0.19212817740850727, 0.39792121836056477, -0.14922819541222082, -0.047770712409500753, -0.2908510034609289, -0.015061212014133111, 0.32646574432385927, 0.77395352504545112, -0.16614591312540627, 0.36806371804963284, -0.097634295479077288, 0.091330331747514912, -0.24450075339721231, -0.029095718259234932, 0.16613612027343472, 0.28240974426972948, -0.18044316667269469, -0.48074766055651602, -0.36626836712779753, 3.4507560855810189, -1.9317197634824488, -11.789513877445398, 17.692027714058376, 32.190550839656112, -28.446155418037584, 65.634374404237818, -24.878800155519698, -2.0570987009734387, -3.2997425925449106, -11.516126179313863, 12.372184270457085, 4.9611285532463585, 0.86391702025516592, 0.16530865667454706, -0.46079094226119116, -0.1732663636027687, -0.25470104821282824, -0.43031399471588622, -0.041501479859297648, -0.54386217024143224, 0.81683568275167029, 0.097089152898783726, -0.13744024889929929, -0.095619359707603865, 0.098626184449285684, -0.63036999033225893, -0.18311714867083492, -0.07372642556981146, -0.19104942819406445, 0.075862266735016198, 3.0325028906240856, -9.0326984830007238, -11.815798616251362, 36.620593610799446, 10.636065931319884, -38.68839724466217, 45.716174186409333, -314.74785574475044, 197.27075321520152, 337.61540934331566, 21.930976284520245, -28.837963587037731, -13.475211488788421, 9.5917712473092944, 1.5250850436867665, -1.5545017016282761, -0.64667209976974838, 0.44513357712322837, 0.056507066939540815, -0.23461588343644407, -0.26011219704759359, 0.8042712968338912, 0.30779007494077798, 0.77483290182744469, -0.65133332546861145, -0.18908937081392915, -0.50446476014305819, -0.0074294169071514489, -0.43833208591156614, 0.3383874374890965, 1.0227323524080993, -0.18896973496668346, -8.9206630611282982, -3.6862817789376785, 19.35920062861366, -44.579795546563581, 57.025448777424586, 360.31891091191056, 8.8001261891013822, 1526.2181503116453, 45.053807917762221, -140.68826246910882, 254.89688572081207, -61.967816961200398, -4.5083476182968329, 11.964107143689583, 3.7790359077733431, -1.9045345605049631, -1.7624207728132955, -0.01261576384946491, 0.19558932994062728, -0.30219131214854072, 0.4699644624025669, -0.91230383136372128, 0.36883118795348824, -0.13682839189736087, 0.66713893962058779, -0.25989055470659439, -0.44968314290067052, -1.2882353738829488, -0.76755040332110314, 0.21593130161202181, 1.7124190510555817, 0.6346191100738432, -2.3593378023079388, -10.295701682078779, -39.603849315110132, 54.052681314235315, 182.3786468306393, -282.18880697804133, 735.50774046161428, -423.76919790180091, 46.72930747865378, 744.09540667092074, 65.421023262373566, -26.998515460375824, -110.68919188818332, 1.7026644231740455, 8.6847068298461902, -3.6812627646537122, -1.4462870038602713, 0.66403014974352648, 0.98268640942926089, -0.10353485266764806, -1.1704253870693322, 0.47609558693405896, -0.63809937787576798, 1.9145243520823476, 0.11088180406502474, 0.082864627703299776, -0.36254455317814699, -0.74689297610786809, -0.69551673309504447, -0.24508893173895085, 4.773352510756971, -0.034376983736587929, -18.791248861451901, 0.26732768536914786, 52.084914641107339, -48.782690015656009, -267.77827954485792, 730.15551768721207, 777.49072200787191, 9988.2725309741272, 2608.4519239039569, -953.38531885843202, 570.34935164465708, -262.60583525697274, -86.61832325668658, -42.569555354666946, 2.6532766677526505, 7.1796038797667014, -2.7868839636562561, -0.37842412015855753, 2.0950938638350354, 0.042260514128576405, -0.56850457149086808, -0.90990468751900622, 0.4779279337996068, -1.7872556824974217, 2.239357916267509, 1.748611490859272, 1.4553261209412682, -0.72663987403827102, -2.6646257572640879, 0.50817475490745234, 1.8456273678139588, -1.3367261976572486, 1.0587560944122603, 22.259718007212488, -10.499004391497355, -376.50689706328382, 153.72085790515695, 213.86760970710961, 5000.8757444384837, 12998.804313286144, 3077.5993672243935, -814.38538391702389, -589.84188198577237, 52.443377241039045, -203.58844824671809, -68.764375920932238, 24.893726268864992, 6.7517210150420599, -0.13350548988021724, -0.12421201224142447, -0.33273215463053935, -0.74767454410310241, -2.6325944160953538, 0.19923279402974362, -1.8330278968089646, 1.4063404110660558, 0.33462283171345686, 1.8114765667849764, -0.030361957750053889, -0.81638586337482577, 0.82869028871127859, -0.22176027695649836, 1.260192177948489, -13.167070698799225, -23.742310304940538, 82.499903393484416, 67.213502175129648, -232.07891937634469, -387.93265499317204, 1281.4742181751474, 7140.8743305075477, 19170.83401144094, 6565.2013915603166, -266.59769699529113, 524.55810593663034, -105.08267177765569, 68.939947660481323, -65.513717323045299, -7.7366224074036598, 11.686157623491809, -6.0715674792925807, -4.7051607105170206, 2.1433748844125784, -2.5722659267438033, -2.5332827335358727, -1.5955119590990279, 0.93402216187716958, -2.1983982122300714, -1.3910769799127845, 2.875563242016451, 0.39274625271232855, -1.9143589532041787, -1.9356332468609148, 4.6285618656089529, 1.3770831994437265, -19.219741943874194, 21.574731283989856, 129.03232713044289, 65.73387671644744, 79.985389317629867, 2188.2624437143977, 1562.286524069611, 3837.2504381898625]}};

/**
 * Numeric Javascript
 * Copyright (C) 2011 by Sébastien Loisel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

"use strict";

var numeric = ( false)?(function numeric() {}):(exports);
if(typeof global !== "undefined") { global.numeric = numeric; }

window.numeric = numeric;

numeric.version = "1.2.6";

// 1. Utility functions
numeric.bench = function bench (f,interval) {
    var t1,t2,n,i;
    if(typeof interval === "undefined") { interval = 15; }
    n = 0.5;
    t1 = new Date();
    while(1) {
        n*=2;
        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
        while(i>0) { f(); i--; }
        t2 = new Date();
        if(t2-t1 > interval) break;
    }
    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
    while(i>0) { f(); i--; }
    t2 = new Date();
    return 1000*(3*n-1)/(t2-t1);
}

numeric._myIndexOf = (function _myIndexOf(w) {
    var n = this.length,k;
    for(k=0;k<n;++k) if(this[k]===w) return k;
    return -1;
});
numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

numeric.Function = Function;
numeric.precision = 4;
numeric.largeArray = 50;

numeric.prettyPrint = function prettyPrint(x) {
    function fmtnum(x) {
        if(x === 0) { return '0'; }
        if(isNaN(x)) { return 'NaN'; }
        if(x<0) { return '-'+fmtnum(-x); }
        if(isFinite(x)) {
            var scale = Math.floor(Math.log(x) / Math.log(10));
            var normalized = x / Math.pow(10,scale);
            var basic = normalized.toPrecision(numeric.precision);
            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
            return parseFloat(basic).toString()+'e'+scale.toString();
        }
        return 'Infinity';
    }
    var ret = [];
    function foo(x) {
        var k;
        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
        if(typeof x === "number") {
            var a = fmtnum(x);
            var b = x.toPrecision(numeric.precision);
            var c = parseFloat(x.toString()).toString();
            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
            return false;
        }
        if(x === null) { ret.push("null"); return false; }
        if(typeof x === "function") { 
            ret.push(x.toString());
            var flag = false;
            for(k in x) { if(x.hasOwnProperty(k)) { 
                if(flag) ret.push(',\n');
                else ret.push('\n{');
                flag = true; 
                ret.push(k); 
                ret.push(': \n'); 
                foo(x[k]); 
            } }
            if(flag) ret.push('}\n');
            return true;
        }
        if(x instanceof Array) {
            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
            var flag = false;
            ret.push('[');
            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
            ret.push(']');
            return true;
        }
        ret.push('{');
        var flag = false;
        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
        ret.push('}');
        return true;
    }
    foo(x);
    return ret.join('');
}

numeric.parseDate = function parseDate(d) {
    function foo(d) {
        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseFloat = function parseFloat_(d) {
    function foo(d) {
        if(typeof d === 'string') { return parseFloat(d); }
        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseCSV = function parseCSV(t) {
    var foo = t.split('\n');
    var j,k;
    var ret = [];
    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
    var stripper = function(n) { return n.substr(0,n.length-1); }
    var count = 0;
    for(k=0;k<foo.length;k++) {
      var bar = (foo[k]+",").match(pat),baz;
      if(bar.length>0) {
          ret[count] = [];
          for(j=0;j<bar.length;j++) {
              baz = stripper(bar[j]);
              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
              else ret[count][j] = baz;
          }
          count++;
      }
    }
    return ret;
}

numeric.toCSV = function toCSV(A) {
    var s = numeric.dim(A);
    var i,j,m,n,row,ret;
    m = s[0];
    n = s[1];
    ret = [];
    for(i=0;i<m;i++) {
        row = [];
        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
        ret[i] = row.join(', ');
    }
    return ret.join('\n')+'\n';
}

numeric.getURL = function getURL(url) {
    var client = new XMLHttpRequest();
    client.open("GET",url,false);
    client.send();
    return client;
}

numeric.imageURL = function imageURL(img) {
    function base64(A) {
        var n = A.length, i,x,y,z,p,q,r,s;
        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var ret = "";
        for(i=0;i<n;i+=3) {
            x = A[i];
            y = A[i+1];
            z = A[i+2];
            p = x >> 2;
            q = ((x & 3) << 4) + (y >> 4);
            r = ((y & 15) << 2) + (z >> 6);
            s = z & 63;
            if(i+1>=n) { r = s = 64; }
            else if(i+2>=n) { s = 64; }
            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
            }
        return ret;
    }
    function crc32Array (a,from,to) {
        if(typeof from === "undefined") { from = 0; }
        if(typeof to === "undefined") { to = a.length; }
        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
     
        var crc = -1, y = 0, n = a.length,i;

        for (i = from; i < to; i++) {
            y = (crc ^ a[i]) & 0xFF;
            crc = (crc >>> 8) ^ table[y];
        }
     
        return crc ^ (-1);
    }

    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
    var stream = [
                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
                  0,0,0,13,                                                  //  8: IHDR Chunk length
                  73, 72, 68, 82,                                            // 12: "IHDR" 
                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
                  8,                                                         // 24: bit depth
                  2,                                                         // 25: RGB
                  0,                                                         // 26: deflate
                  0,                                                         // 27: no filter
                  0,                                                         // 28: no interlace
                  -1,-2,-3,-4,                                               // 29: CRC
                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
                  73, 68, 65, 84,                                            // 37: "IDAT"
                  // RFC 1950 header starts here
                  8,                                                         // 41: RFC1950 CMF
                  29                                                         // 42: RFC1950 FLG
                  ];
    crc32 = crc32Array(stream,12,29);
    stream[29] = (crc32>>24)&255;
    stream[30] = (crc32>>16)&255;
    stream[31] = (crc32>>8)&255;
    stream[32] = (crc32)&255;
    s1 = 1;
    s2 = 0;
    for(i=0;i<h;i++) {
        if(i<h-1) { stream.push(0); }
        else { stream.push(1); }
        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
        stream.push(a); stream.push(b);
        stream.push((~a)&255); stream.push((~b)&255);
        if(i===0) stream.push(0);
        for(j=0;j<w;j++) {
            for(k=0;k<3;k++) {
                a = img[k][i][j];
                if(a>255) a = 255;
                else if(a<0) a=0;
                else a = Math.round(a);
                s1 = (s1 + a )%65521;
                s2 = (s2 + s1)%65521;
                stream.push(a);
            }
        }
        stream.push(0);
    }
    adler32 = (s2<<16)+s1;
    stream.push((adler32>>24)&255);
    stream.push((adler32>>16)&255);
    stream.push((adler32>>8)&255);
    stream.push((adler32)&255);
    length = stream.length - 41;
    stream[33] = (length>>24)&255;
    stream[34] = (length>>16)&255;
    stream[35] = (length>>8)&255;
    stream[36] = (length)&255;
    crc32 = crc32Array(stream,37);
    stream.push((crc32>>24)&255);
    stream.push((crc32>>16)&255);
    stream.push((crc32>>8)&255);
    stream.push((crc32)&255);
    stream.push(0);
    stream.push(0);
    stream.push(0);
    stream.push(0);
//    a = stream.length;
    stream.push(73);  // I
    stream.push(69);  // E
    stream.push(78);  // N
    stream.push(68);  // D
    stream.push(174); // CRC1
    stream.push(66);  // CRC2
    stream.push(96);  // CRC3
    stream.push(130); // CRC4
    return 'data:image/png;base64,'+base64(stream);
}

// 2. Linear algebra with Arrays.
numeric._dim = function _dim(x) {
    var ret = [];
    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
    return ret;
}

numeric.dim = function dim(x) {
    var y,z;
    if(typeof x === "object") {
        y = x[0];
        if(typeof y === "object") {
            z = y[0];
            if(typeof z === "object") {
                return numeric._dim(x);
            }
            return [x.length,y.length];
        }
        return [x.length];
    }
    return [];
}

numeric.mapreduce = function mapreduce(body,init) {
    return Function('x','accum','_s','_k',
            'if(typeof accum === "undefined") accum = '+init+';\n'+
            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i,xi;\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) {\n'+
            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
            '    }'+
            '    return accum;\n'+
            '}\n'+
            'for(i=_n-1;i>=1;i-=2) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '    xi = x[i-1];\n'+
            '    '+body+';\n'+
            '}\n'+
            'if(i === 0) {\n'+
            '    xi = x[i];\n'+
            '    '+body+'\n'+
            '}\n'+
            'return accum;'
            );
}
numeric.mapreduce2 = function mapreduce2(body,setup) {
    return Function('x',
            'var n = x.length;\n'+
            'var i,xi;\n'+setup+';\n'+
            'for(i=n-1;i!==-1;--i) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '}\n'+
            'return accum;'
            );
}


numeric.same = function same(x,y) {
    var i,n;
    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
    n = x.length;
    if(n !== y.length) { return false; }
    for(i=0;i<n;i++) {
        if(x[i] === y[i]) { continue; }
        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
        else { return false; }
    }
    return true;
}

numeric.rep = function rep(s,v,k) {
    if(typeof k === "undefined") { k=0; }
    var n = s[k], ret = Array(n), i;
    if(k === s.length-1) {
        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
        if(i===-1) { ret[0] = v; }
        return ret;
    }
    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
    return ret;
}


numeric.dotMMsmall = function dotMMsmall(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
    p = x.length; q = y.length; r = y[0].length;
    ret = Array(p);
    for(i=p-1;i>=0;i--) {
        foo = Array(r);
        bar = x[i];
        for(k=r-1;k>=0;k--) {
            woo = bar[q-1]*y[q-1][k];
            for(j=q-2;j>=1;j-=2) {
                i0 = j-1;
                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
            }
            if(j===0) { woo += bar[0]*y[0][k]; }
            foo[k] = woo;
        }
        ret[i] = foo;
    }
    return ret;
}
numeric._getCol = function _getCol(A,j,x) {
    var n = A.length, i;
    for(i=n-1;i>0;--i) {
        x[i] = A[i][j];
        --i;
        x[i] = A[i][j];
    }
    if(i===0) x[0] = A[0][j];
}
numeric.dotMMbig = function dotMMbig(x,y){
    var gc = numeric._getCol, p = y.length, v = Array(p);
    var m = x.length, n = y[0].length, A = new Array(m), xj;
    var VV = numeric.dotVV;
    var i,j,k,z;
    --p;
    --m;
    for(i=m;i!==-1;--i) A[i] = Array(n);
    --n;
    for(i=n;i!==-1;--i) {
        gc(y,i,v);
        for(j=m;j!==-1;--j) {
            z=0;
            xj = x[j];
            A[j][i] = VV(xj,v);
        }
    }
    return A;
}

numeric.dotMV = function dotMV(x,y) {
    var p = x.length, q = y.length,i;
    var ret = Array(p), dotVV = numeric.dotVV;
    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
    return ret;
}

numeric.dotVM = function dotVM(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
    p = x.length; q = y[0].length;
    ret = Array(q);
    for(k=q-1;k>=0;k--) {
        woo = x[p-1]*y[p-1][k];
        for(j=p-2;j>=1;j-=2) {
            i0 = j-1;
            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
        }
        if(j===0) { woo += x[0]*y[0][k]; }
        ret[k] = woo;
    }
    return ret;
}

numeric.dotVV = function dotVV(x,y) {
    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
    for(i=n-2;i>=1;i-=2) {
        i1 = i-1;
        ret += x[i]*y[i] + x[i1]*y[i1];
    }
    if(i===0) { ret += x[0]*y[0]; }
    return ret;
}

numeric.dot = function dot(x,y) {
    var d = numeric.dim;
    switch(d(x).length*1000+d(y).length) {
    case 2002:
        if(y.length < 10) return numeric.dotMMsmall(x,y);
        else return numeric.dotMMbig(x,y);
    case 2001: return numeric.dotMV(x,y);
    case 1002: return numeric.dotVM(x,y);
    case 1001: return numeric.dotVV(x,y);
    case 1000: return numeric.mulVS(x,y);
    case 1: return numeric.mulSV(x,y);
    case 0: return x*y;
    default: throw new Error('numeric.dot only works on vectors and matrices');
    }
}

numeric.diag = function diag(d) {
    var i,i1,j,n = d.length, A = Array(n), Ai;
    for(i=n-1;i>=0;i--) {
        Ai = Array(n);
        i1 = i+2;
        for(j=n-1;j>=i1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j>i) { Ai[j] = 0; }
        Ai[i] = d[i];
        for(j=i-1;j>=1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j===0) { Ai[0] = 0; }
        A[i] = Ai;
    }
    return A;
}
numeric.getDiag = function(A) {
    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
    for(i=n-1;i>=1;--i) {
        ret[i] = A[i][i];
        --i;
        ret[i] = A[i][i];
    }
    if(i===0) {
        ret[0] = A[0][0];
    }
    return ret;
}

numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
numeric.pointwise = function pointwise(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = '_s';
    fun[params.length+1] = '_k';
    fun[params.length+2] = (
            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
            '    return ret;\n'+
            '}\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            '    '+body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric.pointwise2 = function pointwise2(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = (
            'var _n = '+thevec+'.length;\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric._biforeach = (function _biforeach(x,y,s,k,f) {
    if(k === s.length-1) { f(x,y); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
});
numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
    if(k === s.length-1) { return f(x,y); }
    var i,n=s[k],ret = Array(n);
    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
    return ret;
});
numeric._foreach = (function _foreach(x,s,k,f) {
    if(k === s.length-1) { f(x); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
});
numeric._foreach2 = (function _foreach2(x,s,k,f) {
    if(k === s.length-1) { return f(x); }
    var i,n=s[k], ret = Array(n);
    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
    return ret;
});

/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

numeric.ops2 = {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/',
        mod: '%',
        and: '&&',
        or:  '||',
        eq:  '===',
        neq: '!==',
        lt:  '<',
        gt:  '>',
        leq: '<=',
        geq: '>=',
        band: '&',
        bor: '|',
        bxor: '^',
        lshift: '<<',
        rshift: '>>',
        rrshift: '>>>'
};
numeric.opseq = {
        addeq: '+=',
        subeq: '-=',
        muleq: '*=',
        diveq: '/=',
        modeq: '%=',
        lshifteq: '<<=',
        rshifteq: '>>=',
        rrshifteq: '>>>=',
        bandeq: '&=',
        boreq: '|=',
        bxoreq: '^='
};
numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
                    'exp','floor','log','round','sin','sqrt','tan',
                    'isNaN','isFinite'];
numeric.mathfuns2 = ['atan2','pow','max','min'];
numeric.ops1 = {
        neg: '-',
        not: '!',
        bnot: '~',
        clone: ''
};
numeric.mapreducers = {
        any: ['if(xi) return true;','var accum = false;'],
        all: ['if(!xi) return false;','var accum = true;'],
        sum: ['accum += xi;','var accum = 0;'],
        prod: ['accum *= xi;','var accum = 1;'],
        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
};

(function () {
    var i,o;
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        numeric.ops2[o] = o;
    }
    for(i in numeric.ops2) {
        if(numeric.ops2.hasOwnProperty(i)) {
            o = numeric.ops2[i];
            var code, codeeq, setup = '';
            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
                setup = 'var '+o+' = Math.'+o+';\n';
                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
            } else {
                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
                if(numeric.opseq.hasOwnProperty(i+'eq')) {
                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
                } else {
                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
                }
            }
            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
            numeric[i] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
                    'var dim = numeric.dim;\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof x === "object") {\n'+
                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
                    '  else '+codeeq('x','y')+'\n'+
                    '}\nreturn x;\n');
            numeric[o] = numeric[i];
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
            numeric[i+'eq'] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
                    'var s = numeric.dim(x);\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
                    '  else numeric._biforeach(x,y,s,0,S);\n'+
                    '}\nreturn x;\n');
        }
    }
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        delete numeric.ops2[o];
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        numeric.ops1[o] = o;
    }
    for(i in numeric.ops1) {
        if(numeric.ops1.hasOwnProperty(i)) {
            setup = '';
            o = numeric.ops1[i];
            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
            }
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
            numeric[i+'eq'] = Function('x',
                    'if(typeof x !== "object") return '+o+'x\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'eqV;\n'+
                    'var s = numeric.dim(x);\n'+
                    'numeric._foreach(x,s,0,V);\n'+
                    'return x;\n');
            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
            numeric[i] = Function('x',
                    'if(typeof x !== "object") return '+o+'(x)\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'V;\n'+
                    'var s = numeric.dim(x);\n'+
                    'return numeric._foreach2(x,s,0,V);\n');
        }
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        delete numeric.ops1[o];
    }
    for(i in numeric.mapreducers) {
        if(numeric.mapreducers.hasOwnProperty(i)) {
            o = numeric.mapreducers[i];
            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
            numeric[i] = Function('x','s','k',
                    o[1]+
                    'if(typeof x !== "object") {'+
                    '    xi = x;\n'+
                    o[0]+';\n'+
                    '    return accum;\n'+
                    '}'+
                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
                    'if(typeof k === "undefined") k = 0;\n'+
                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
                    'var xi;\n'+
                    'var n = x.length, i;\n'+
                    'for(i=n-1;i!==-1;--i) {\n'+
                    '   xi = arguments.callee(x[i]);\n'+
                    o[0]+';\n'+
                    '}\n'+
                    'return accum;\n');
        }
    }
}());

numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
numeric.trunc = function trunc(x,y) {
    if(typeof x === "object") {
        if(typeof y === "object") return numeric.truncVV(x,y);
        return numeric.truncVS(x,y);
    }
    if (typeof y === "object") return numeric.truncSV(x,y);
    return Math.round(x/y)*y;
}

numeric.inv = function inv(x) {
    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
    var A = numeric.clone(x), Ai, Aj;
    var I = numeric.identity(m), Ii, Ij;
    var i,j,k,x;
    for(j=0;j<n;++j) {
        var i0 = -1;
        var v0 = -1;
        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
        x = Aj[j];
        for(k=j;k!==n;++k)    Aj[k] /= x; 
        for(k=n-1;k!==-1;--k) Ij[k] /= x;
        for(i=m-1;i!==-1;--i) {
            if(i!==j) {
                Ai = A[i];
                Ii = I[i];
                x = Ai[j];
                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
                if(k===0) Ii[0] -= Ij[0]*x;
            }
        }
    }
    return I;
}

numeric.det = function det(x) {
    var s = numeric.dim(x);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
    for(j=0;j<n-1;j++) {
        k=j;
        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
        if(k !== j) {
            temp = A[k]; A[k] = A[j]; A[j] = temp;
            ret *= -1;
        }
        Aj = A[j];
        for(i=j+1;i<n;i++) {
            Ai = A[i];
            alpha = Ai[j]/Aj[j];
            for(k=j+1;k<n-1;k+=2) {
                k1 = k+1;
                Ai[k] -= Aj[k]*alpha;
                Ai[k1] -= Aj[k1]*alpha;
            }
            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
        }
        if(Aj[j] === 0) { return 0; }
        ret *= Aj[j];
    }
    return ret*A[j][j];
}

numeric.transpose = function transpose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
            --j;
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = A0[j];
            --j;
            ret[j][0] = A0[j];
        }
        if(j===0) { ret[0][0] = A0[0]; }
    }
    return ret;
}
numeric.negtranspose = function negtranspose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
            --j;
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = -A0[j];
            --j;
            ret[j][0] = -A0[j];
        }
        if(j===0) { ret[0][0] = -A0[0]; }
    }
    return ret;
}

numeric._random = function _random(s,k) {
    var i,n=s[k],ret=Array(n), rnd;
    if(k === s.length-1) {
        rnd = Math.random;
        for(i=n-1;i>=1;i-=2) {
            ret[i] = rnd();
            ret[i-1] = rnd();
        }
        if(i===0) { ret[0] = rnd(); }
        return ret;
    }
    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
    return ret;
}
numeric.random = function random(s) { return numeric._random(s,0); }

numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }

numeric.linspace = function linspace(a,b,n) {
    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
    if(n<2) { return n===1?[a]:[]; }
    var i,ret = Array(n);
    n--;
    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
    return ret;
}

numeric.getBlock = function getBlock(x,from,to) {
    var s = numeric.dim(x);
    function foo(x,k) {
        var i,a = from[k], n = to[k]-a, ret = Array(n);
        if(k === s.length-1) {
            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
            return ret;
        }
        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
        return ret;
    }
    return foo(x,0);
}

numeric.setBlock = function setBlock(x,from,to,B) {
    var s = numeric.dim(x);
    function foo(x,y,k) {
        var i,a = from[k], n = to[k]-a;
        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
    }
    foo(x,B,0);
    return x;
}

numeric.getRange = function getRange(A,I,J) {
    var m = I.length, n = J.length;
    var i,j;
    var B = Array(m), Bi, AI;
    for(i=m-1;i!==-1;--i) {
        B[i] = Array(n);
        Bi = B[i];
        AI = A[I[i]];
        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
    }
    return B;
}

numeric.blockMatrix = function blockMatrix(X) {
    var s = numeric.dim(X);
    if(s.length<4) return numeric.blockMatrix([X]);
    var m=s[0],n=s[1],M,N,i,j,Xij;
    M = 0; N = 0;
    for(i=0;i<m;++i) M+=X[i][0].length;
    for(j=0;j<n;++j) N+=X[0][j][0].length;
    var Z = Array(M);
    for(i=0;i<M;++i) Z[i] = Array(N);
    var I=0,J,ZI,k,l,Xijk;
    for(i=0;i<m;++i) {
        J=N;
        for(j=n-1;j!==-1;--j) {
            Xij = X[i][j];
            J -= Xij[0].length;
            for(k=Xij.length-1;k!==-1;--k) {
                Xijk = Xij[k];
                ZI = Z[I+k];
                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
            }
        }
        I += X[i][0].length;
    }
    return Z;
}

numeric.tensor = function tensor(x,y) {
    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
    var s1 = numeric.dim(x), s2 = numeric.dim(y);
    if(s1.length !== 1 || s2.length !== 1) {
        throw new Error('numeric: tensor product is only defined for vectors');
    }
    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
    for(i=m-1;i>=0;i--) {
        Ai = Array(n);
        xi = x[i];
        for(j=n-1;j>=3;--j) {
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
        }
        while(j>=0) { Ai[j] = xi * y[j]; --j; }
        A[i] = Ai;
    }
    return A;
}

// 3. The Tensor type T
numeric.T = function T(x,y) { this.x = x; this.y = y; }
numeric.t = function t(x,y) { return new numeric.T(x,y); }

numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
    var io = numeric.indexOf;
    if(typeof setup !== "string") {
        var k;
        setup = '';
        for(k in numeric) {
            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
                setup += 'var '+k+' = numeric.'+k+';\n';
            }
        }
    }
    return Function(['y'],
            'var x = this;\n'+
            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
            setup+'\n'+
            'if(x.y) {'+
            '  if(y.y) {'+
            '    return new numeric.T('+cc+');\n'+
            '  }\n'+
            '  return new numeric.T('+cr+');\n'+
            '}\n'+
            'if(y.y) {\n'+
            '  return new numeric.T('+rc+');\n'+
            '}\n'+
            'return new numeric.T('+rr+');\n'
    );
}

numeric.T.prototype.add = numeric.Tbinop(
        'add(x.x,y.x)',
        'add(x.x,y.x),y.y',
        'add(x.x,y.x),x.y',
        'add(x.x,y.x),add(x.y,y.y)');
numeric.T.prototype.sub = numeric.Tbinop(
        'sub(x.x,y.x)',
        'sub(x.x,y.x),neg(y.y)',
        'sub(x.x,y.x),x.y',
        'sub(x.x,y.x),sub(x.y,y.y)');
numeric.T.prototype.mul = numeric.Tbinop(
        'mul(x.x,y.x)',
        'mul(x.x,y.x),mul(x.x,y.y)',
        'mul(x.x,y.x),mul(x.y,y.x)',
        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

numeric.T.prototype.reciprocal = function reciprocal() {
    var mul = numeric.mul, div = numeric.div;
    if(this.y) {
        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
    }
    return new T(div(1,this.x));
}
numeric.T.prototype.div = function div(y) {
    if(!(y instanceof numeric.T)) y = new numeric.T(y);
    if(y.y) { return this.mul(y.reciprocal()); }
    var div = numeric.div;
    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
    return new numeric.T(div(this.x,y.x));
}
numeric.T.prototype.dot = numeric.Tbinop(
        'dot(x.x,y.x)',
        'dot(x.x,y.x),dot(x.x,y.y)',
        'dot(x.x,y.x),dot(x.y,y.x)',
        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
        );
numeric.T.prototype.transpose = function transpose() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),t(y)); }
    return new numeric.T(t(x));
}
numeric.T.prototype.transjugate = function transjugate() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
    return new numeric.T(t(x));
}
numeric.Tunop = function Tunop(r,c,s) {
    if(typeof s !== "string") { s = ''; }
    return Function(
            'var x = this;\n'+
            s+'\n'+
            'if(x.y) {'+
            '  '+c+';\n'+
            '}\n'+
            r+';\n'
    );
}

numeric.T.prototype.exp = numeric.Tunop(
        'return new numeric.T(ex)',
        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
numeric.T.prototype.conj = numeric.Tunop(
        'return new numeric.T(x.x);',
        'return new numeric.T(x.x,numeric.neg(x.y));');
numeric.T.prototype.neg = numeric.Tunop(
        'return new numeric.T(neg(x.x));',
        'return new numeric.T(neg(x.x),neg(x.y));',
        'var neg = numeric.neg;');
numeric.T.prototype.sin = numeric.Tunop(
        'return new numeric.T(numeric.sin(x.x))',
        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
numeric.T.prototype.cos = numeric.Tunop(
        'return new numeric.T(numeric.cos(x.x))',
        'return x.exp().add(x.neg().exp()).div(2);');
numeric.T.prototype.abs = numeric.Tunop(
        'return new numeric.T(numeric.abs(x.x));',
        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
        'var mul = numeric.mul;');
numeric.T.prototype.log = numeric.Tunop(
        'return new numeric.T(numeric.log(x.x));',
        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
        'return new numeric.T(numeric.log(r.x),theta.x);');
numeric.T.prototype.norm2 = numeric.Tunop(
        'return numeric.norm2(x.x);',
        'var f = numeric.norm2Squared;\n'+
        'return Math.sqrt(f(x.x)+f(x.y));');
numeric.T.prototype.inv = function inv() {
    var A = this;
    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
    var n = A.x.length, i, j, k;
    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
    var i,j,k,d,d1,ax,ay,bx,by,temp;
    for(i=0;i<n;i++) {
        ax = Ax[i][i]; ay = Ay[i][i];
        d = ax*ax+ay*ay;
        k = i;
        for(j=i+1;j<n;j++) {
            ax = Ax[j][i]; ay = Ay[j][i];
            d1 = ax*ax+ay*ay;
            if(d1 > d) { k=j; d = d1; }
        }
        if(k!==i) {
            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
        }
        Aix = Ax[i]; Aiy = Ay[i];
        Rix = Rx[i]; Riy = Ry[i];
        ax = Aix[i]; ay = Aiy[i];
        for(j=i+1;j<n;j++) {
            bx = Aix[j]; by = Aiy[j];
            Aix[j] = (bx*ax+by*ay)/d;
            Aiy[j] = (by*ax-bx*ay)/d;
        }
        for(j=0;j<n;j++) {
            bx = Rix[j]; by = Riy[j];
            Rix[j] = (bx*ax+by*ay)/d;
            Riy[j] = (by*ax-bx*ay)/d;
        }
        for(j=i+1;j<n;j++) {
            Ajx = Ax[j]; Ajy = Ay[j];
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ajx[i]; ay = Ajy[i];
            for(k=i+1;k<n;k++) {
                bx = Aix[k]; by = Aiy[k];
                Ajx[k] -= bx*ax-by*ay;
                Ajy[k] -= by*ax+bx*ay;
            }
            for(k=0;k<n;k++) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= bx*ax-by*ay;
                Rjy[k] -= by*ax+bx*ay;
            }
        }
    }
    for(i=n-1;i>0;i--) {
        Rix = Rx[i]; Riy = Ry[i];
        for(j=i-1;j>=0;j--) {
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ax[j][i]; ay = Ay[j][i];
            for(k=n-1;k>=0;k--) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= ax*bx - ay*by;
                Rjy[k] -= ax*by + ay*bx;
            }
        }
    }
    return new numeric.T(Rx,Ry);
}
numeric.T.prototype.get = function get(i) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length;
    if(y) {
        while(k<n) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        return new numeric.T(x,y);
    }
    while(k<n) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    return new numeric.T(x);
}
numeric.T.prototype.set = function set(i,v) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
    if(n===0) {
        if(vy) { this.y = vy; }
        else if(y) { this.y = undefined; }
        this.x = x;
        return this;
    }
    if(vy) {
        if(y) { /* ok */ }
        else {
            y = numeric.rep(numeric.dim(x),0);
            this.y = y;
        }
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        y[ik] = vy;
        return this;
    }
    if(y) {
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
        else y[ik] = 0;
        return this;
    }
    while(k<n-1) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    ik = i[k];
    x[ik] = vx;
    return this;
}
numeric.T.prototype.getRows = function getRows(i0,i1) {
    var n = i1-i0+1, j;
    var rx = Array(n), ry, x = this.x, y = this.y;
    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
    if(y) {
        ry = Array(n);
        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
        return new numeric.T(rx,ry);
    }
    return new numeric.T(rx);
}
numeric.T.prototype.setRows = function setRows(i0,i1,A) {
    var j;
    var rx = this.x, ry = this.y, x = A.x, y = A.y;
    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
    } else if(ry) {
        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
    }
    return this;
}
numeric.T.prototype.getRow = function getRow(k) {
    var x = this.x, y = this.y;
    if(y) { return new numeric.T(x[k],y[k]); }
    return new numeric.T(x[k]);
}
numeric.T.prototype.setRow = function setRow(i,v) {
    var rx = this.x, ry = this.y, x = v.x, y = v.y;
    rx[i] = x;
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        ry[i] = y;
    } else if(ry) {
        ry = numeric.rep([x.length],0);
    }
    return this;
}

numeric.T.prototype.getBlock = function getBlock(from,to) {
    var x = this.x, y = this.y, b = numeric.getBlock;
    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
    return new numeric.T(b(x,from,to));
}
numeric.T.prototype.setBlock = function setBlock(from,to,A) {
    if(!(A instanceof numeric.T)) A = new numeric.T(A);
    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
    if(Ay) {
        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
        b(x,from,to,Ax);
        b(y,from,to,Ay);
        return this;
    }
    b(x,from,to,Ax);
    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
}
numeric.T.rep = function rep(s,v) {
    var T = numeric.T;
    if(!(v instanceof T)) v = new T(v);
    var x = v.x, y = v.y, r = numeric.rep;
    if(y) return new T(r(s,x),r(s,y));
    return new T(r(s,x));
}
numeric.T.diag = function diag(d) {
    if(!(d instanceof numeric.T)) d = new numeric.T(d);
    var x = d.x, y = d.y, diag = numeric.diag;
    if(y) return new numeric.T(diag(x),diag(y));
    return new numeric.T(diag(x));
}
numeric.T.eig = function eig() {
    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
    return numeric.eig(this.x);
}
numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
numeric.T.prototype.getDiag = function getDiag() {
    var n = numeric;
    var x = this.x, y = this.y;
    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
    return new n.T(n.getDiag(x));
}

// 4. Eigenvalues of real matrices

numeric.house = function house(x) {
    var v = numeric.clone(x);
    var s = x[0] >= 0 ? 1 : -1;
    var alpha = s*numeric.norm2(x);
    v[0] += alpha;
    var foo = numeric.norm2(v);
    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
    return numeric.div(v,foo);
}

numeric.toUpperHessenberg = function toUpperHessenberg(me) {
    var s = numeric.dim(me);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
    for(j=0;j<m-2;j++) {
        x = Array(m-j-1);
        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
        if(numeric.norm2(x)>0) {
            v = numeric.house(x);
            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
            B = Array(m-j-1);
            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    return {H:A, Q:Q};
}

numeric.epsilon = 2.220446049250313e-16;

numeric.QRFrancis = function(H,maxiter) {
    if(typeof maxiter === "undefined") { maxiter = 10000; }
    H = numeric.clone(H);
    var H0 = numeric.clone(H);
    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
    var epsilon = numeric.epsilon;
    for(iter=0;iter<maxiter;iter++) {
        for(j=0;j<m-1;j++) {
            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
                B = Array(j+1);
                for(i=0;i<=j;i++) { B[i] = Q[i]; }
                C = numeric.dot(QH1.Q,B);
                for(i=0;i<=j;i++) { Q[i] = C[i]; }
                B = Array(m-j-1);
                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
                C = numeric.dot(QH2.Q,B);
                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
            }
        }
        a = H[m-2][m-2]; b = H[m-2][m-1];
        c = H[m-1][m-2]; d = H[m-1][m-1];
        tr = a+d;
        det = (a*d-b*c);
        Hloc = numeric.getBlock(H, [0,0], [2,2]);
        if(tr*tr>=4*det) {
            var s1,s2;
            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,s1+s2)),
                               numeric.diag(numeric.rep([3],s1*s2)));
        } else {
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,tr)),
                               numeric.diag(numeric.rep([3],det)));
        }
        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
        v = numeric.house(x);
        B = [H[0],H[1],H[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
        B = numeric.getBlock(H, [0,0],[m-1,2]);
        C = numeric.tensor(numeric.dot(B,v),v);
        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
        B = [Q[0],Q[1],Q[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        var J;
        for(j=0;j<m-2;j++) {
            for(k=j;k<=j+1;k++) {
                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
                    B = Array(k+1);
                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
                    C = numeric.dot(QH1.Q,B);
                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
                    B = Array(m-k-1);
                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
                    C = numeric.dot(QH2.Q,B);
                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
                }
            }
            J = Math.min(m-1,j+3);
            x = Array(J-j);
            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
            v = numeric.house(x);
            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
            B = Array(J-j);
            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
}

numeric.eig = function eig(A,maxiter) {
    var QH = numeric.toUpperHessenberg(A);
    var QB = numeric.QRFrancis(QH.H,maxiter);
    var T = numeric.T;
    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
    var m = B.length,j;
    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
    var sqrt = Math.sqrt;
    for(k=0;k<m;k++) {
        i = B[k][0];
        if(i === B[k][1]) {
            // nothing
        } else {
            j = i+1;
            a = H[i][i];
            b = H[i][j];
            c = H[j][i];
            d = H[j][j];
            if(b === 0 && c === 0) continue;
            p1 = -a-d;
            p2 = a*d-b*c;
            disc = p1*p1-4*p2;
            if(disc>=0) {
                if(p1<0) x = -0.5*(p1-sqrt(disc));
                else     x = -0.5*(p1+sqrt(disc));
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1);
                    p = (a-x)/n1;
                    q = b/n1;
                } else {
                    n2 = sqrt(n2);
                    p = c/n2;
                    q = (d-x)/n2;
                }
                Q0 = new T([[q,-p],[p,q]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            } else {
                x = -0.5*p1;
                y = 0.5*sqrt(-disc);
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1+y*y);
                    p = (a-x)/n1;
                    q = b/n1;
                    x = 0;
                    y /= n1;
                } else {
                    n2 = sqrt(n2+y*y);
                    p = c/n2;
                    q = (d-x)/n2;
                    x = y/n2;
                    y = 0;
                }
                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            }
        }
    }
    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
    for(j=0;j<n;j++) {
        if(j>0) {
            for(k=j-1;k>=0;k--) {
                var Rk = R.get([k,k]), Rj = R.get([j,j]);
                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
                    x = R.getRow(k).getBlock([k],[j-1]);
                    y = E.getRow(j).getBlock([k],[j-1]);
                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
                } else {
                    E.setRow(j,E.getRow(k));
                    continue;
                }
            }
        }
    }
    for(j=0;j<n;j++) {
        x = E.getRow(j);
        E.setRow(j,x.div(x.norm2()));
    }
    E = E.transpose();
    E = Q.transjugate().dot(E);
    return { lambda:R.getDiag(), E:E };
};

// 5. Compressed Column Storage matrices
numeric.ccsSparse = function ccsSparse(A) {
    var m = A.length,n,foo, i,j, counts = [];
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            j = parseInt(j);
            while(j>=counts.length) counts[counts.length] = 0;
            if(foo[j]!==0) counts[j]++;
        }
    }
    var n = counts.length;
    var Ai = Array(n+1);
    Ai[0] = 0;
    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            if(foo[j]!==0) {
                counts[j]--;
                Aj[Ai[j]+counts[j]] = i;
                Av[Ai[j]+counts[j]] = foo[j];
            }
        }
    }
    return [Ai,Aj,Av];
}
numeric.ccsFull = function ccsFull(A) {
    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
    var B = numeric.rep([m,n],0);
    for(i=0;i<n;i++) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
    }
    return B;
}
numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
    if(typeof bj === "undefined") x = numeric.rep([m],0);
    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
    if(typeof xj === "undefined") xj = [];
    function dfs(j) {
        var k;
        if(x[j] !== 0) return;
        x[j] = 1;
        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
        xj[n] = j;
        ++n;
    }
    var i,j,j0,j1,k,l,l0,l1,a;
    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
    xj.length = n;
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = max(Ai[j+1],j0);
        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k!==j1;++k) {
            l = Aj[k];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsDFS = function ccsDFS(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[J];
    k1[0] = k11 = Ai[J+1];
    while(1) {
        if(km >= k11) {
            xj[n] = j[m];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Pinv[Aj[km]];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k<j1;++k) {
            l = Pinv[Aj[k]];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,x,xj,i,Pinv,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(x[k]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(x[i])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
            a = x[i]; x[i] = x[e]; x[e] = a;
        }
        a = Li[i];
        e = Ui[i];
        d = x[i];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = x[k];
            xj[j] = 0;
            x[k] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsDFS0 = function ccsDFS0(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[Pinv[J]];
    k1[0] = k11 = Ai[Pinv[J]+1];
    while(1) {
        if(isNaN(km)) throw new Error("Ow!");
        if(km >= k11) {
            xj[n] = Pinv[j[m]];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Aj[km];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                foo = Pinv[foo];
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        l = P[j];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
        a = y[l];
        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
        y[l] = a;
    }
}
numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS0(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,y,xj,i,Pinv,P,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(y[P[k]]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(y[P[i]])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
        }
        a = Li[i];
        e = Ui[i];
        d = y[P[i]];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = y[P[k]];
            xj[j] = 0;
            y[P[k]] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsLUP = numeric.ccsLUP0;

numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
    var s = numeric.ccsDim(A),m=s[0],n=s[1];
    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
    else if(typeof i === "number") { i = [i]; }
    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
    else if(typeof j === "number") { j = [j]; }
    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
    var Ai = A[0], Aj = A[1], Av = A[2];
    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
    for(q=0;q<Q;++q) {
        jq = j[q];
        var q0 = Ai[jq];
        var q1 = Ai[jq+1];
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 1;
            x[r] = Av[p];
        }
        for(p=0;p<P;++p) {
            ip = i[p];
            if(flags[ip]) {
                Bj[count] = p;
                Bv[count] = x[i[p]];
                ++count;
            }
        }
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 0;
        }
        Bi[q+1] = count;
    }
    return B;
}

numeric.ccsDot = function ccsDot(A,B) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var Bi = B[0], Bj = B[1], Bv = B[2];
    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
    var m = sA[0], n = sA[1], o = sB[1];
    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
    var i,j,k,j0,j1,i0,i1,l,p,a,b;
    for(k=0;k!==o;++k) {
        j0 = Bi[k];
        j1 = Bi[k+1];
        p = 0;
        for(j=j0;j<j1;++j) {
            a = Bj[j];
            b = Bv[j];
            i0 = Ai[a];
            i1 = Ai[a+1];
            for(i=i0;i<i1;++i) {
                l = Aj[i];
                if(flags[l]===0) {
                    xj[p] = l;
                    flags[l] = 1;
                    p = p+1;
                }
                x[l] = x[l] + Av[i]*b;
            }
        }
        j0 = Ci[k];
        j1 = j0+p;
        Ci[k+1] = j1;
        for(j=p-1;j!==-1;--j) {
            b = j0+j;
            i = xj[j];
            Cj[b] = i;
            Cv[b] = x[i];
            flags[i] = 0;
            x[i] = 0;
        }
        Ci[k+1] = Ci[k]+p;
    }
    return C;
}

numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
    var L = LUP.L, U = LUP.U, P = LUP.P;
    var Bi = B[0];
    var flag = false;
    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
    var Bj = B[1], Bv = B[2];
    var n = L[0].length-1, m = Bi.length-1;
    var x = numeric.rep([n],0), xj = Array(n);
    var b = numeric.rep([n],0), bj = Array(n);
    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
    var sol = numeric.ccsTSolve;
    var i,j,j0,j1,k,J,N=0;
    for(i=0;i<m;++i) {
        k = 0;
        j0 = Bi[i];
        j1 = Bi[i+1];
        for(j=j0;j<j1;++j) { 
            J = LUP.Pinv[Bj[j]];
            bj[k] = J;
            b[J] = Bv[j];
            ++k;
        }
        bj.length = k;
        sol(L,b,x,bj,xj);
        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
        sol(U,x,b,xj,bj);
        if(flag) return b;
        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
        for(j=bj.length-1;j!==-1;--j) {
            J = bj[j];
            Xj[N] = J;
            Xv[N] = b[J];
            b[J] = 0;
            ++N;
        }
        Xi[i+1] = N;
    }
    return [Xi,Xj,Xv];
}

numeric.ccsbinop = function ccsbinop(body,setup) {
    if(typeof setup === "undefined") setup='';
    return Function('X','Y',
            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
            'var xk,yk,zk;\n'+
            'var i,j,j0,j1,k,p=0;\n'+
            setup+
            'for(i=0;i<n;++i) {\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Xj[j];\n'+
            '    x[k] = 1;\n'+
            '    Zj[p] = k;\n'+
            '    ++p;\n'+
            '  }\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Yj[j];\n'+
            '    y[k] = Yv[j];\n'+
            '    if(x[k] === 0) {\n'+
            '      Zj[p] = k;\n'+
            '      ++p;\n'+
            '    }\n'+
            '  }\n'+
            '  Zi[i+1] = p;\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Zj[j];\n'+
            '    xk = x[k];\n'+
            '    yk = y[k];\n'+
            body+'\n'+
            '    Zv[j] = zk;\n'+
            '  }\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
            '}\n'+
            'return [Zi,Zj,Zv];'
            );
};

(function() {
    var k,A,B,C;
    for(k in numeric.ops2) {
        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
        else A = 'NaN';
        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
        else B = 'NaN';
        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
        else C = 'NaN';
        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
        numeric['ccs'+k] = Function('X','Y',
                'if(typeof X === "number") return '+A+';\n'+
                'if(typeof Y === "number") return '+B+';\n'+
                'return '+C+';\n'
                );
    }
}());

numeric.ccsScatter = function ccsScatter(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = numeric.sup(Aj)+1,m=Ai.length;
    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
    var counts = numeric.rep([n],0),i;
    for(i=0;i<m;++i) counts[Aj[i]]++;
    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
    var ptr = Ri.slice(0),k,Aii;
    for(i=0;i<m;++i) {
        Aii = Aj[i];
        k = ptr[Aii];
        Rj[k] = Ai[i];
        Rv[k] = Av[i];
        ptr[Aii]=ptr[Aii]+1;
    }
    return [Ri,Rj,Rv];
}

numeric.ccsGather = function ccsGather(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = Ai.length-1,m = Aj.length;
    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
    var i,j,j0,j1,p;
    p=0;
    for(i=0;i<n;++i) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j!==j1;++j) {
            Rj[p] = i;
            Ri[p] = Aj[j];
            Rv[p] = Av[j];
            ++p;
        }
    }
    return [Ri,Rj,Rv];
}

// The following sparse linear algebra routines are deprecated.

numeric.sdim = function dim(A,ret,k) {
    if(typeof ret === "undefined") { ret = []; }
    if(typeof A !== "object") return ret;
    if(typeof k === "undefined") { k=0; }
    if(!(k in ret)) { ret[k] = 0; }
    if(A.length > ret[k]) ret[k] = A.length;
    var i;
    for(i in A) {
        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
    }
    return ret;
};

numeric.sclone = function clone(A,k,n) {
    if(typeof k === "undefined") { k=0; }
    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
    var i,ret = Array(A.length);
    if(k === n-1) {
        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
        return ret;
    }
    for(i in A) {
        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
    }
    return ret;
}

numeric.sdiag = function diag(d) {
    var n = d.length,i,ret = Array(n),i1,i2,i3;
    for(i=n-1;i>=1;i-=2) {
        i1 = i-1;
        ret[i] = []; ret[i][i] = d[i];
        ret[i1] = []; ret[i1][i1] = d[i1];
    }
    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
    return ret;
}

numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }

numeric.stranspose = function transpose(A) {
    var ret = [], n = A.length, i,j,Ai;
    for(i in A) {
        if(!(A.hasOwnProperty(i))) continue;
        Ai = A[i];
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(typeof ret[j] !== "object") { ret[j] = []; }
            ret[j][i] = Ai[j];
        }
    }
    return ret;
}

numeric.sLUP = function LUP(A,tol) {
    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
};

numeric.sdotMM = function dotMM(A,B) {
    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
    var i,j,k,accum;
    var ret = Array(p),reti;
    for(i=p-1;i>=0;i--) {
        reti = [];
        Ai = A[i];
        for(k=r-1;k>=0;k--) {
            accum = 0;
            BTk = BT[k];
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(j in BTk) { accum += Ai[j]*BTk[j]; }
            }
            if(accum) reti[k] = accum;
        }
        ret[i] = reti;
    }
    return ret;
}

numeric.sdotMV = function dotMV(A,x) {
    var p = A.length, Ai, i,j;
    var ret = Array(p), accum;
    for(i=p-1;i>=0;i--) {
        Ai = A[i];
        accum = 0;
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(x[j]) accum += Ai[j]*x[j];
        }
        if(accum) ret[i] = accum;
    }
    return ret;
}

numeric.sdotVM = function dotMV(x,A) {
    var i,j,Ai,alpha;
    var ret = [], accum;
    for(i in x) {
        if(!x.hasOwnProperty(i)) continue;
        Ai = A[i];
        alpha = x[i];
        for(j in Ai) {
            if(!Ai.hasOwnProperty(j)) continue;
            if(!ret[j]) { ret[j] = 0; }
            ret[j] += alpha*Ai[j];
        }
    }
    return ret;
}

numeric.sdotVV = function dotVV(x,y) {
    var i,ret=0;
    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
    return ret;
}

numeric.sdot = function dot(A,B) {
    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
    var k = m*1000+n;
    switch(k) {
    case 0: return A*B;
    case 1001: return numeric.sdotVV(A,B);
    case 2001: return numeric.sdotMV(A,B);
    case 1002: return numeric.sdotVM(A,B);
    case 2002: return numeric.sdotMM(A,B);
    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
    }
}

numeric.sscatter = function scatter(V) {
    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
    for(i=n-1;i>=0;--i) {
        if(!V[m-1][i]) continue;
        Aj = A;
        for(j=0;j<m-2;j++) {
            Vij = V[j][i];
            if(!Aj[Vij]) Aj[Vij] = [];
            Aj = Aj[Vij];
        }
        Aj[V[j][i]] = V[j+1][i];
    }
    return A;
}

numeric.sgather = function gather(A,ret,k) {
    if(typeof ret === "undefined") ret = [];
    if(typeof k === "undefined") k = [];
    var n,i,Ai;
    n = k.length;
    for(i in A) {
        if(A.hasOwnProperty(i)) {
            k[n] = parseInt(i);
            Ai = A[i];
            if(typeof Ai === "number") {
                if(Ai) {
                    if(ret.length === 0) {
                        for(i=n+1;i>=0;--i) ret[i] = [];
                    }
                    for(i=n;i>=0;--i) ret[i].push(k[i]);
                    ret[n+1].push(Ai);
                }
            } else gather(Ai,ret,k);
        }
    }
    if(k.length>n) k.pop();
    return ret;
}

// 6. Coordinate matrices
numeric.cLU = function LU(A) {
    var I = A[0], J = A[1], V = A[2];
    var p = I.length, m=0, i,j,k,a,b,c;
    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
    m++;
    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
    var Ui, Uj,alpha;
    for(k=0;k<p;k++) {
        i = I[k];
        j = J[k];
        if(j<left[i]) left[i] = j;
        if(j>right[i]) right[i] = j;
    }
    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
    var countL = 0, countU = 0;
    for(i=0;i<m;i++) {
        U[i] = numeric.rep([right[i]-left[i]+1],0);
        L[i] = numeric.rep([i-left[i]],0);
        countL += i-left[i]+1;
        countU += right[i]-i+1;
    }
    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
    for(i=0;i<m-1;i++) {
        a = i-left[i];
        Ui = U[i];
        for(j=i+1;left[j]<=i && j<m;j++) {
            b = i-left[j];
            c = right[i]-i;
            Uj = U[j];
            alpha = Uj[b]/Ui[a];
            if(alpha) {
                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
                L[j][i-left[j]] = alpha;
            }
        }
    }
    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
    var p,q,foo;
    p=0; q=0;
    for(i=0;i<m;i++) {
        a = left[i];
        b = right[i];
        foo = U[i];
        for(j=i;j<=b;j++) {
            if(foo[j-a]) {
                Ui[p] = i;
                Uj[p] = j;
                Uv[p] = foo[j-a];
                p++;
            }
        }
        foo = L[i];
        for(j=a;j<i;j++) {
            if(foo[j-a]) {
                Li[q] = i;
                Lj[q] = j;
                Lv[q] = foo[j-a];
                q++;
            }
        }
        Li[q] = i;
        Lj[q] = i;
        Lv[q] = 1;
        q++;
    }
    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
};

numeric.cLUsolve = function LUsolve(lu,b) {
    var L = lu.L, U = lu.U, ret = numeric.clone(b);
    var Li = L[0], Lj = L[1], Lv = L[2];
    var Ui = U[0], Uj = U[1], Uv = U[2];
    var p = Ui.length, q = Li.length;
    var m = ret.length,i,j,k;
    k = 0;
    for(i=0;i<m;i++) {
        while(Lj[k] < i) {
            ret[i] -= Lv[k]*ret[Lj[k]];
            k++;
        }
        k++;
    }
    k = p-1;
    for(i=m-1;i>=0;i--) {
        while(Uj[k] > i) {
            ret[i] -= Uv[k]*ret[Uj[k]];
            k--;
        }
        ret[i] /= Uv[k];
        k--;
    }
    return ret;
};

numeric.cgrid = function grid(n,shape) {
    if(typeof n === "number") n = [n,n];
    var ret = numeric.rep(n,-1);
    var i,j,count;
    if(typeof shape !== "function") {
        switch(shape) {
        case 'L':
            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
            break;
        default:
            shape = function(i,j) { return true; };
            break;
        }
    }
    count=0;
    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
        if(shape(i,j)) {
            ret[i][j] = count;
            count++;
        }
    return ret;
}

numeric.cdelsq = function delsq(g) {
    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
    var Li = [], Lj = [], Lv = [];
    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
        if(g[i][j]<0) continue;
        for(k=0;k<4;k++) {
            p = i+dir[k][0];
            q = j+dir[k][1];
            if(g[p][q]<0) continue;
            Li.push(g[i][j]);
            Lj.push(g[p][q]);
            Lv.push(-1);
        }
        Li.push(g[i][j]);
        Lj.push(g[i][j]);
        Lv.push(4);
    }
    return [Li,Lj,Lv];
}

numeric.cdotMV = function dotMV(A,x) {
    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
    N=0;
    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
    N++;
    ret = numeric.rep([N],0);
    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
    return ret;
}

// 7. Splines

numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
numeric.Spline.prototype._at = function _at(x1,p) {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var x1,a,b,t;
    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
    t = (x1-x[p])/(x[p+1]-x[p]);
    var s = t*(1-t);
    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
}
numeric.Spline.prototype.at = function at(x0) {
    if(typeof x0 === "number") {
        var x = this.x;
        var n = x.length;
        var p,q,mid,floor = Math.floor,a,b,t;
        p = 0;
        q = n-1;
        while(q-p>1) {
            mid = floor((p+q)/2);
            if(x[mid] <= x0) p = mid;
            else q = mid;
        }
        return this._at(x0,p);
    }
    var n = x0.length, i, ret = Array(n);
    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
    return ret;
}
numeric.Spline.prototype.diff = function diff() {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var n = yl.length;
    var i,dx,dy;
    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
    for(i=n-1;i!==-1;--i) {
        dx = x[i+1]-x[i];
        dy = sub(yr[i+1],yl[i]);
        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
    }
    return new numeric.Spline(x,zl,zr,pl,pr);
}
numeric.Spline.prototype.roots = function roots() {
    function sqr(x) { return x*x; }
    function heval(y0,y1,k0,k1,x) {
        var A = k0*2-(y1-y0);
        var B = -k1*2+(y1-y0);
        var t = (x+1)*0.5;
        var s = t*(1-t);
        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
    }
    var ret = [];
    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
    if(typeof yl[0] === "number") {
        yl = [yl];
        yr = [yr];
        kl = [kl];
        kr = [kr];
    }
    var m = yl.length,n=x.length-1,i,j,k,y,s,t;
    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
    var sqrt = Math.sqrt;
    for(i=0;i!==m;++i) {
        ai = yl[i];
        bi = yr[i];
        ci = kl[i];
        di = kr[i];
        ri = [];
        for(j=0;j!==n;j++) {
            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
            dx = (x[j+1]-x[j]);
            cx = x[j];
            y0 = ai[j];
            y1 = bi[j+1];
            k0 = ci[j]/dx;
            k1 = di[j+1]/dx;
            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
            A = k1+3*y0+2*k0-3*y1;
            B = 3*(k1+k0+2*(y0-y1));
            if(D<=0) {
                z0 = A/B;
                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
                else stops = [x[j],x[j+1]];
            } else {
                z0 = (A-sqrt(D))/B;
                z1 = (A+sqrt(D))/B;
                stops = [x[j]];
                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
                stops.push(x[j+1]);
            }
            t0 = stops[0];
            z0 = this._at(t0,j);
            for(k=0;k<stops.length-1;k++) {
                t1 = stops[k+1];
                z1 = this._at(t1,j);
                if(z0 === 0) {
                    ri.push(t0); 
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                if(z1 === 0 || z0*z1>0) {
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                var side = 0;
                while(1) {
                    tm = (z0*t1-z1*t0)/(z0-z1);
                    if(tm <= t0 || tm >= t1) { break; }
                    zm = this._at(tm,j);
                    if(zm*z1>0) {
                        t1 = tm;
                        z1 = zm;
                        if(side === -1) z0*=0.5;
                        side = -1;
                    } else if(zm*z0>0) {
                        t0 = tm;
                        z0 = zm;
                        if(side === 1) z1*=0.5;
                        side = 1;
                    } else break;
                }
                ri.push(tm);
                t0 = stops[k+1];
                z0 = this._at(t0, j);
            }
            if(z1 === 0) ri.push(t1);
        }
        ret[i] = ri;
    }
    if(typeof this.yl[0] === "number") return ret[0];
    return ret;
}
numeric.spline = function spline(x,y,k1,kn) {
    var n = x.length, b = [], dx = [], dy = [];
    var i;
    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
    if(typeof k1 === "string" || typeof kn === "string") { 
        k1 = kn = "periodic";
    }
    // Build sparse tridiagonal system
    var T = [[],[],[]];
    switch(typeof k1) {
    case "undefined":
        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
        T[0].push(0,0);
        T[1].push(0,1);
        T[2].push(2/dx[0],1/dx[0]);
        break;
    case "string":
        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
        T[0].push(0,0,0);
        T[1].push(n-2,0,1);
        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
        break;
    default:
        b[0] = k1;
        T[0].push(0);
        T[1].push(0);
        T[2].push(1);
        break;
    }
    for(i=1;i<n-1;i++) {
        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
        T[0].push(i,i,i);
        T[1].push(i-1,i,i+1);
        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
    }
    switch(typeof kn) {
    case "undefined":
        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
        T[0].push(n-1,n-1);
        T[1].push(n-2,n-1);
        T[2].push(1/dx[n-2],2/dx[n-2]);
        break;
    case "string":
        T[1][T[1].length-1] = 0;
        break;
    default:
        b[n-1] = kn;
        T[0].push(n-1);
        T[1].push(n-1);
        T[2].push(1);
        break;
    }
    if(typeof b[0] !== "number") b = numeric.transpose(b);
    else b = [b];
    var k = Array(b.length);
    if(typeof k1 === "string") {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
            k[i][n-1] = k[i][0];
        }
    } else {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
        }
    }
    if(typeof y[0] === "number") k = k[0];
    else k = numeric.transpose(k);
    return new numeric.Spline(x,y,y,k,k);
}

// 8. FFT
numeric.fftpow2 = function fftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    fftpow2(xe,ye);
    fftpow2(xo,yo);
    j = n/2;
    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric._ifftpow2 = function _ifftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    _ifftpow2(xe,ye);
    _ifftpow2(xo,yo);
    j = n/2;
    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric.ifftpow2 = function ifftpow2(x,y) {
    numeric._ifftpow2(x,y);
    numeric.diveq(x,x.length);
    numeric.diveq(y,y.length);
}
numeric.convpow2 = function convpow2(ax,ay,bx,by) {
    numeric.fftpow2(ax,ay);
    numeric.fftpow2(bx,by);
    var i,n = ax.length,axi,bxi,ayi,byi;
    for(i=n-1;i!==-1;--i) {
        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
        ax[i] = axi*bxi-ayi*byi;
        ay[i] = axi*byi+ayi*bxi;
    }
    numeric.ifftpow2(ax,ay);
}
numeric.T.prototype.fft = function fft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X;
}
numeric.T.prototype.ifft = function ifft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X.div(n);
}

//9. Unconstrained optimization
numeric.gradient = function gradient(f,x) {
    var n = x.length;
    var f0 = f(x);
    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
    var max = Math.max;
    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
    var t0,t1,t2,it=0,d1,d2,N;
    for(i=0;i<n;i++) {
        var h = max(1e-6*f0,1e-8);
        while(1) {
            ++it;
            if(it>20) { throw new Error("Numerical gradient fails"); }
            x0[i] = x[i]+h;
            f1 = f(x0);
            x0[i] = x[i]-h;
            f2 = f(x0);
            x0[i] = x[i];
            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
            J[i] = (f1-f2)/(2*h);
            t0 = x[i]-h;
            t1 = x[i];
            t2 = x[i]+h;
            d1 = (f1-f0)/h;
            d2 = (f0-f2)/h;
            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
            if(errest>eps) { h/=16; }
            else break;
            }
    }
    return J;
}

numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
    var grad = numeric.gradient;
    if(typeof options === "undefined") { options = {}; }
    if(typeof tol === "undefined") { tol = 1e-8; }
    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
    if(typeof maxit === "undefined") maxit = 1000;
    x0 = numeric.clone(x0);
    var n = x0.length;
    var f0 = f(x0),f1,df0;
    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
    var max = Math.max, norm2 = numeric.norm2;
    tol = max(tol,numeric.epsilon);
    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
    var msg = "";
    g0 = gradient(x0);
    while(it<maxit) {
        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
        step = neg(dot(H1,g0));
        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
        nstep = norm2(step);
        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
        t = 1;
        df0 = dot(g0,step);
        // line search
        x1 = x0;
        while(it < maxit) {
            if(t*nstep < tol) { break; }
            s = mul(step,t);
            x1 = add(x0,s);
            f1 = f(x1);
            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
                t *= 0.5;
                ++it;
                continue;
            }
            break;
        }
        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
        if(it === maxit) { msg = "maxit reached during line search"; break; }
        g1 = gradient(x1);
        y = sub(g1,g0);
        ys = dot(y,s);
        Hy = dot(H1,y);
        H1 = sub(add(H1,
                mul(
                        (ys+dot(y,Hy))/(ys*ys),
                        ten(s,s)    )),
                div(add(ten(Hy,s),ten(s,Hy)),ys));
        x0 = x1;
        f0 = f1;
        g0 = g1;
        ++it;
    }
    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
}

// 10. Ode solver (Dormand-Prince)
numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
    this.x = x;
    this.y = y;
    this.f = f;
    this.ymid = ymid;
    this.iterations = iterations;
    this.events = events;
    this.message = msg;
}
numeric.Dopri.prototype._at = function _at(xi,j) {
    function sqr(x) { return x*x; }
    var sol = this;
    var xs = sol.x;
    var ys = sol.y;
    var k1 = sol.f;
    var ymid = sol.ymid;
    var n = xs.length;
    var x0,x1,xh,y0,y1,yh,xi;
    var floor = Math.floor,h;
    var c = 0.5;
    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
    x0 = xs[j];
    x1 = xs[j+1];
    y0 = ys[j];
    y1 = ys[j+1];
    h  = x1-x0;
    xh = x0+c*h;
    yh = ymid[j];
    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
    return add(add(add(add(mul(y0,w[0]),
                           mul(yh,w[1])),
                           mul(y1,w[2])),
                           mul( p,w[3])),
                           mul( q,w[4]));
}
numeric.Dopri.prototype.at = function at(x) {
    var i,j,k,floor = Math.floor;
    if(typeof x !== "number") {
        var n = x.length, ret = Array(n);
        for(i=n-1;i!==-1;--i) {
            ret[i] = this.at(x[i]);
        }
        return ret;
    }
    var x0 = this.x;
    i = 0; j = x0.length-1;
    while(j-i>1) {
        k = floor(0.5*(i+j));
        if(x0[k] <= x) i = k;
        else j = k;
    }
    return this._at(x,i);
}

numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
    if(typeof tol === "undefined") { tol = 1e-6; }
    if(typeof maxit === "undefined") { maxit = 1000; }
    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
    var A2 = 1/5;
    var A3 = [3/40,9/40];
    var A4 = [44/45,-56/15,32/9];
    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
    var bm = [0.5*6025192743/30085553152,
              0,
              0.5*51252292925/65400821598,
              0.5*-2691868925/45128329728,
              0.5*187940372067/1594534317056,
              0.5*-1776094331/19743644256,
              0.5*11237099/235043384];
    var c = [1/5,3/10,4/5,8/9,1,1];
    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
    var i = 0,er,j;
    var h = (x1-x0)/10;
    var it = 0;
    var add = numeric.add, mul = numeric.mul, y1,erinf;
    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
    var e0, e1, ev;
    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
    if(typeof event === "function") e0 = event(x0,y0);
    while(x0<x1 && it<maxit) {
        ++it;
        if(x0+h>x1) h = x1-x0;
        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
        k7 = f(x0+h,y1);
        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
        if(typeof er === "number") erinf = abs(er);
        else erinf = norminf(er);
        if(erinf > tol) { // reject
            h = 0.2*h*pow(tol/erinf,0.25);
            if(x0+h === x0) {
                ret.msg = "Step size became too small";
                break;
            }
            continue;
        }
        ymid[i] = add(add(add(add(add(add(y0,
                mul(k1[i],h*bm[0])),
                mul(k3   ,h*bm[2])),
                mul(k4   ,h*bm[3])),
                mul(k5   ,h*bm[4])),
                mul(k6   ,h*bm[5])),
                mul(k7   ,h*bm[6]));
        ++i;
        xs[i] = x0+h;
        ys[i] = y1;
        k1[i] = k7;
        if(typeof event === "function") {
            var yi,xl = x0,xr = x0+0.5*h,xi;
            e1 = event(xr,ymid[i-1]);
            ev = and(lt(e0,0),lt(0,e1));
            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
            if(any(ev)) {
                var xc, yc, en,ei;
                var side=0, sl = 1.0, sr = 1.0;
                while(1) {
                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
                    else {
                        xi = xr;
                        for(j=e0.length-1;j!==-1;--j) {
                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
                        }
                    }
                    if(xi <= xl || xi >= xr) break;
                    yi = ret._at(xi, i-1);
                    ei = event(xi,yi);
                    en = and(lt(e0,0),lt(0,ei));
                    if(any(en)) {
                        xr = xi;
                        e1 = ei;
                        ev = en;
                        sr = 1.0;
                        if(side === -1) sl *= 0.5;
                        else sl = 1.0;
                        side = -1;
                    } else {
                        xl = xi;
                        e0 = ei;
                        sl = 1.0;
                        if(side === 1) sr *= 0.5;
                        else sr = 1.0;
                        side = 1;
                    }
                }
                y1 = ret._at(0.5*(x0+xi),i-1);
                ret.f[i] = f(xi,yi);
                ret.x[i] = xi;
                ret.y[i] = yi;
                ret.ymid[i-1] = y1;
                ret.events = ev;
                ret.iterations = it;
                return ret;
            }
        }
        x0 += h;
        y0 = y1;
        e0 = e1;
        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
    }
    ret.iterations = it;
    return ret;
}

// 11. Ax = b
numeric.LU = function(A, fast) {
  fast = fast || false;

  var abs = Math.abs;
  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
  var max;
  var n = A.length, n1 = n-1;
  var P = new Array(n);
  if(!fast) A = numeric.clone(A);

  for (k = 0; k < n; ++k) {
    Pk = k;
    Ak = A[k];
    max = abs(Ak[k]);
    for (j = k + 1; j < n; ++j) {
      absAjk = abs(A[j][k]);
      if (max < absAjk) {
        max = absAjk;
        Pk = j;
      }
    }
    P[k] = Pk;

    if (Pk != k) {
      A[k] = A[Pk];
      A[Pk] = Ak;
      Ak = A[k];
    }

    Akk = Ak[k];

    for (i = k + 1; i < n; ++i) {
      A[i][k] /= Akk;
    }

    for (i = k + 1; i < n; ++i) {
      Ai = A[i];
      for (j = k + 1; j < n1; ++j) {
        Ai[j] -= Ai[k] * Ak[j];
        ++j;
        Ai[j] -= Ai[k] * Ak[j];
      }
      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
    }
  }

  return {
    LU: A,
    P:  P
  };
}

numeric.LUsolve = function LUsolve(LUP, b) {
  var i, j;
  var LU = LUP.LU;
  var n   = LU.length;
  var x = numeric.clone(b);
  var P   = LUP.P;
  var Pi, LUi, LUii, tmp;

  for (i=n-1;i!==-1;--i) x[i] = b[i];
  for (i = 0; i < n; ++i) {
    Pi = P[i];
    if (P[i] !== i) {
      tmp = x[i];
      x[i] = x[Pi];
      x[Pi] = tmp;
    }

    LUi = LU[i];
    for (j = 0; j < i; ++j) {
      x[i] -= x[j] * LUi[j];
    }
  }

  for (i = n - 1; i >= 0; --i) {
    LUi = LU[i];
    for (j = i + 1; j < n; ++j) {
      x[i] -= x[j] * LUi[j];
    }

    x[i] /= LUi[i];
  }

  return x;
}

numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }

// 12. Linear programming
numeric.echelonize = function echelonize(A) {
    var s = numeric.dim(A), m = s[0], n = s[1];
    var I = numeric.identity(m);
    var P = Array(m);
    var i,j,k,l,Ai,Ii,Z,a;
    var abs = Math.abs;
    var diveq = numeric.diveq;
    A = numeric.clone(A);
    for(i=0;i<m;++i) {
        k = 0;
        Ai = A[i];
        Ii = I[i];
        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
        P[i] = k;
        diveq(Ii,Ai[k]);
        diveq(Ai,Ai[k]);
        for(j=0;j<m;++j) if(j!==i) {
            Z = A[j]; a = Z[k];
            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
            Z = I[j];
            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
        }
    }
    return {I:I, A:A, P:P};
}

numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var m = c.length, n = b.length,y;
    var unbounded = false, cb,i0=0;
    var alpha = 1.0;
    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
    var muleq = numeric.muleq;
    var norm = numeric.norminf, any = numeric.any,min = Math.min;
    var all = numeric.all, gt = numeric.gt;
    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
    var dotcc = dot(c,c);
    var g;
    for(count=i0;count<maxit;++count) {
        var i,j,d;
        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
        var A1 = transpose(A0);
        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
        alpha = 0.25*abs(dotcc/dot(c,p));
        var a1 = 100*sqrt(dotcc/dot(p,p));
        if(!isFinite(alpha) || alpha>a1) alpha = a1;
        g = add(c,mul(alpha,p));
        H = dot(A1,A0);
        for(i=m-1;i!==-1;--i) H[i][i] += 1;
        d = solve(H,div(g,alpha),true);
        var t0 = div(z,dot(A,d));
        var t = 1.0;
        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
        y = sub(x,mul(d,t));
        z = sub(b,dot(A,y));
        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
        x = y;
        if(alpha<tol) return { solution: y, message: "", iterations: count };
        if(flag) {
            var s = dot(c,g), Ag = dot(A,g);
            unbounded = true;
            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
        } else {
            if(x[m-1]>=0) unbounded = false;
            else unbounded = true;
        }
        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
    }
    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
}

numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
    var m = c.length, n = b.length,y;
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var c0 = numeric.rep([m],0).concat([1]);
    var J = numeric.rep([n,1],-1);
    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
    var b0 = b;
    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
    var x = numeric.clone(x0.solution);
    x.length = m;
    var foo = numeric.inf(sub(b,dot(A,x)));
    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
    ret.iterations += x0.iterations;
    return ret;
};

numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
    if(typeof maxit === "undefined") maxit = 1000;
    if(typeof tol === "undefined") tol = numeric.epsilon;
    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
    var m = Aeq.length, n = Aeq[0].length, o = A.length;
    var B = numeric.echelonize(Aeq);
    var flags = numeric.rep([n],0);
    var P = B.P;
    var Q = [];
    var i;
    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
    var g = numeric.getRange;
    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
    var A3 = dot(A1,B.I);
    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
    var c1 = Array(P.length), c2 = Array(Q.length);
    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
    var x2 = S.solution;
    if(x2!==x2) return S;
    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
    var x = Array(c.length);
    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
    return { solution: x, message:S.message, iterations: S.iterations };
}

numeric.MPStoLP = function MPStoLP(MPS) {
    if(MPS instanceof String) { MPS.split('\n'); }
    var state = 0;
    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
    var n = MPS.length;
    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
    var name;
    var c = [], A = [], b = [];
    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
    for(i=0;i<n;++i) {
        z = MPS[i];
        var w0 = z.match(/\S*/g);
        var w = [];
        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
        if(w.length === 0) continue;
        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
        if(j<states.length) {
            state = j;
            if(j===1) { name = w[1]; }
            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
            continue;
        }
        switch(state) {
        case 0: case 1: err('Unexpected line');
        case 2: 
            switch(w[0]) {
            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
            default: err('Parse error '+numeric.prettyPrint(w));
            }
            break;
        case 3:
            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
            var p = vars[w[0]];
            for(j=1;j<w.length;j+=2) {
                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
                var q = rows[w[j]];
                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
            }
            break;
        case 4:
            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
            break;
        case 5: /*FIXME*/ break;
        case 6: err('Internal error');
        }
    }
    err('Reached end of file without ENDATA');
}
// seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */

// Patched by Seb so that seedrandom.js does not pollute the Math object.
// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
// slower.
numeric.seedrandom = { pow:Math.pow, random:Math.random };

(function (pool, math, width, chunks, significance, overflow, startdenom) {


//
// seedrandom()
// This is the seedrandom function described above.
//
math['seedrandom'] = function seedrandom(seed, use_entropy) {
  var key = [];
  var arc4;

  // Flatten the seed string or build one from local entropy if needed.
  seed = mixkey(flatten(
    use_entropy ? [seed, pool] :
    arguments.length ? seed :
    [new Date().getTime(), pool, window], 3), key);

  // Use the seed to initialize an ARC4 generator.
  arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(arc4.S, pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  math['random'] = function random() {  // Closure to return a random double:
    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
    var d = startdenom;                 //   and denominator d = 2 ^ 48.
    var x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  // Return the seed that was used
  return seed;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, u, me = this, keylen = key.length;
  var i = 0, j = me.i = me.j = me.m = 0;
  me.S = [];
  me.c = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) { me.S[i] = i++; }
  for (i = 0; i < width; i++) {
    t = me.S[i];
    j = lowbits(j + t + key[i % keylen]);
    u = me.S[j];
    me.S[i] = u;
    me.S[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  me.g = function getnext(count) {
    var s = me.S;
    var i = lowbits(me.i + 1); var t = s[i];
    var j = lowbits(me.j + t); var u = s[j];
    s[i] = u;
    s[j] = t;
    var r = s[lowbits(t + u)];
    while (--count) {
      i = lowbits(i + 1); t = s[i];
      j = lowbits(j + t); u = s[j];
      s[i] = u;
      s[j] = t;
      r = r * width + s[lowbits(t + u)];
    }
    me.i = i;
    me.j = j;
    return r;
  };
  // For robust unpredictability discard an initial batch of values.
  // See http://www.rsa.com/rsalabs/node.asp?id=2009
  me.g(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
/** @param {Object=} result 
  * @param {string=} prop
  * @param {string=} typ */
function flatten(obj, depth, result, prop, typ) {
  result = [];
  typ = typeof(obj);
  if (depth && typ == 'object') {
    for (prop in obj) {
      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
  }
  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
/** @param {number=} smear 
  * @param {number=} j */
function mixkey(seed, key, smear, j) {
  seed += '';                         // Ensure the seed is a string
  smear = 0;
  for (j = 0; j < seed.length; j++) {
    key[lowbits(j)] =
      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
  }
  seed = '';
  for (j in key) { seed += String.fromCharCode(key[j]); }
  return seed;
}

//
// lowbits()
// A quick "n mod width" for width a power of 2.
//
function lowbits(n) { return n & (width - 1); }

//
// The following constants are related to IEEE 754 limits.
//
startdenom = math.pow(width, chunks);
significance = math.pow(2, significance);
overflow = significance * 2;

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

// End anonymous scope, and pass initial values.
}(
  [],   // pool: entropy pool starts empty
  numeric.seedrandom, // math: package containing random, pow, and seedrandom
  256,  // width: each RC4 output is 0 <= x < 256
  6,    // chunks: at least six RC4 outputs for each double
  52    // significance: there are 52 significant digits in a double
  ));
/* This file is a slightly modified version of quadprog.js from Alberto Santini.
 * It has been slightly modified by SÃ©bastien Loisel to make sure that it handles
 * 0-based Arrays instead of 1-based Arrays.
 * License is in resources/LICENSE.quadprog */
(function(exports) {

function base0to1(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
    return ret;
}
function base1to0(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
    return ret;
}

function dpori(a, lda, n) {
    var i, j, k, kp1, t;

    for (k = 1; k <= n; k = k + 1) {
        a[k][k] = 1 / a[k][k];
        t = -a[k][k];
        //~ dscal(k - 1, t, a[1][k], 1);
        for (i = 1; i < k; i = i + 1) {
            a[i][k] = t * a[i][k];
        }

        kp1 = k + 1;
        if (n < kp1) {
            break;
        }
        for (j = kp1; j <= n; j = j + 1) {
            t = a[k][j];
            a[k][j] = 0;
            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
            for (i = 1; i <= k; i = i + 1) {
                a[i][j] = a[i][j] + (t * a[i][k]);
            }
        }
    }

}

function dposl(a, lda, n, b) {
    var i, k, kb, t;

    for (k = 1; k <= n; k = k + 1) {
        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
        t = 0;
        for (i = 1; i < k; i = i + 1) {
            t = t + (a[i][k] * b[i]);
        }

        b[k] = (b[k] - t) / a[k][k];
    }

    for (kb = 1; kb <= n; kb = kb + 1) {
        k = n + 1 - kb;
        b[k] = b[k] / a[k][k];
        t = -b[k];
        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
        for (i = 1; i < k; i = i + 1) {
            b[i] = b[i] + (t * a[i][k]);
        }
    }
}

function dpofa(a, lda, n, info) {
    var i, j, jm1, k, t, s;

    for (j = 1; j <= n; j = j + 1) {
        info[1] = j;
        s = 0;
        jm1 = j - 1;
        if (jm1 < 1) {
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        } else {
            for (k = 1; k <= jm1; k = k + 1) {
                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
                t = a[k][j];
                for (i = 1; i < k; i = i + 1) {
                    t = t - (a[i][j] * a[i][k]);
                }
                t = t / a[k][k];
                a[k][j] = t;
                s = s + t * t;
            }
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        }
        info[1] = 0;
    }
}

function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
        temp, sum, t1, tt, gc, gs, nu,
        t1inf, t2min,
        vsmall, tmpa, tmpb,
        go;

    r = Math.min(n, q);
    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

    vsmall = 1.0e-60;
    do {
        vsmall = vsmall + vsmall;
        tmpa = 1 + 0.1 * vsmall;
        tmpb = 1 + 0.2 * vsmall;
    } while (tmpa <= 1 || tmpb <= 1);

    for (i = 1; i <= n; i = i + 1) {
        work[i] = dvec[i];
    }
    for (i = n + 1; i <= l; i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }

    info = [];

    if (ierr[1] === 0) {
        dpofa(dmat, fddmat, n, info);
        if (info[1] !== 0) {
            ierr[1] = 2;
            return;
        }
        dposl(dmat, fddmat, n, dvec);
        dpori(dmat, fddmat, n);
    } else {
        for (j = 1; j <= n; j = j + 1) {
            sol[j] = 0;
            for (i = 1; i <= j; i = i + 1) {
                sol[j] = sol[j] + dmat[i][j] * dvec[i];
            }
        }
        for (j = 1; j <= n; j = j + 1) {
            dvec[j] = 0;
            for (i = j; i <= n; i = i + 1) {
                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
            }
        }
    }

    crval[1] = 0;
    for (j = 1; j <= n; j = j + 1) {
        sol[j] = dvec[j];
        crval[1] = crval[1] + work[j] * sol[j];
        work[j] = 0;
        for (i = j + 1; i <= n; i = i + 1) {
            dmat[i][j] = 0;
        }
    }
    crval[1] = -crval[1] / 2;
    ierr[1] = 0;

    iwzv = n;
    iwrv = iwzv + n;
    iwuv = iwrv + r;
    iwrm = iwuv + r + 1;
    iwsv = iwrm + (r * (r + 1)) / 2;
    iwnbv = iwsv + q;

    for (i = 1; i <= q; i = i + 1) {
        sum = 0;
        for (j = 1; j <= n; j = j + 1) {
            sum = sum + amat[j][i] * amat[j][i];
        }
        work[iwnbv + i] = Math.sqrt(sum);
    }
    nact = 0;
    iter[1] = 0;
    iter[2] = 0;

    function fn_goto_50() {
        iter[1] = iter[1] + 1;

        l = iwsv;
        for (i = 1; i <= q; i = i + 1) {
            l = l + 1;
            sum = -bvec[i];
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + amat[j][i] * sol[j];
            }
            if (Math.abs(sum) < vsmall) {
                sum = 0;
            }
            if (i > meq) {
                work[l] = sum;
            } else {
                work[l] = -Math.abs(sum);
                if (sum > 0) {
                    for (j = 1; j <= n; j = j + 1) {
                        amat[j][i] = -amat[j][i];
                    }
                    bvec[i] = -bvec[i];
                }
            }
        }

        for (i = 1; i <= nact; i = i + 1) {
            work[iwsv + iact[i]] = 0;
        }

        nvl = 0;
        temp = 0;
        for (i = 1; i <= q; i = i + 1) {
            if (work[iwsv + i] < temp * work[iwnbv + i]) {
                nvl = i;
                temp = work[iwsv + i] / work[iwnbv + i];
            }
        }
        if (nvl === 0) {
            return 999;
        }

        return 0;
    }

    function fn_goto_55() {
        for (i = 1; i <= n; i = i + 1) {
            sum = 0;
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + dmat[j][i] * amat[j][nvl];
            }
            work[i] = sum;
        }

        l1 = iwzv;
        for (i = 1; i <= n; i = i + 1) {
            work[l1 + i] = 0;
        }
        for (j = nact + 1; j <= n; j = j + 1) {
            for (i = 1; i <= n; i = i + 1) {
                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
            }
        }

        t1inf = true;
        for (i = nact; i >= 1; i = i - 1) {
            sum = work[i];
            l = iwrm + (i * (i + 3)) / 2;
            l1 = l - i;
            for (j = i + 1; j <= nact; j = j + 1) {
                sum = sum - work[l] * work[iwrv + j];
                l = l + j;
            }
            sum = sum / work[l1];
            work[iwrv + i] = sum;
            if (iact[i] < meq) {
                // continue;
                break;
            }
            if (sum < 0) {
                // continue;
                break;
            }
            t1inf = false;
            it1 = i;
        }

        if (!t1inf) {
            t1 = work[iwuv + it1] / work[iwrv + it1];
            for (i = 1; i <= nact; i = i + 1) {
                if (iact[i] < meq) {
                    // continue;
                    break;
                }
                if (work[iwrv + i] < 0) {
                    // continue;
                    break;
                }
                temp = work[iwuv + i] / work[iwrv + i];
                if (temp < t1) {
                    t1 = temp;
                    it1 = i;
                }
            }
        }

        sum = 0;
        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
            sum = sum + work[i] * work[i];
        }
        if (Math.abs(sum) <= vsmall) {
            if (t1inf) {
                ierr[1] = 1;
                // GOTO 999
                return 999;
            } else {
                for (i = 1; i <= nact; i = i + 1) {
                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
                }
                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
                // GOTO 700
                return 700;
            }
        } else {
            sum = 0;
            for (i = 1; i <= n; i = i + 1) {
                sum = sum + work[iwzv + i] * amat[i][nvl];
            }
            tt = -work[iwsv + nvl] / sum;
            t2min = true;
            if (!t1inf) {
                if (t1 < tt) {
                    tt = t1;
                    t2min = false;
                }
            }

            for (i = 1; i <= n; i = i + 1) {
                sol[i] = sol[i] + tt * work[iwzv + i];
                if (Math.abs(sol[i]) < vsmall) {
                    sol[i] = 0;
                }
            }

            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
            for (i = 1; i <= nact; i = i + 1) {
                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
            }
            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

            if (t2min) {
                nact = nact + 1;
                iact[nact] = nvl;

                l = iwrm + ((nact - 1) * nact) / 2 + 1;
                for (i = 1; i <= nact - 1; i = i + 1) {
                    work[l] = work[i];
                    l = l + 1;
                }

                if (nact === n) {
                    work[l] = work[n];
                } else {
                    for (i = n; i >= nact + 1; i = i - 1) {
                        if (work[i] === 0) {
                            // continue;
                            break;
                        }
                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
                        if (work[i - 1] >= 0) {
                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        } else {
                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        }
                        gc = work[i - 1] / temp;
                        gs = work[i] / temp;

                        if (gc === 1) {
                            // continue;
                            break;
                        }
                        if (gc === 0) {
                            work[i - 1] = gs * temp;
                            for (j = 1; j <= n; j = j + 1) {
                                temp = dmat[j][i - 1];
                                dmat[j][i - 1] = dmat[j][i];
                                dmat[j][i] = temp;
                            }
                        } else {
                            work[i - 1] = temp;
                            nu = gs / (1 + gc);
                            for (j = 1; j <= n; j = j + 1) {
                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                                dmat[j][i - 1] = temp;

                            }
                        }
                    }
                    work[l] = work[nact];
                }
            } else {
                sum = -bvec[nvl];
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + sol[j] * amat[j][nvl];
                }
                if (nvl > meq) {
                    work[iwsv + nvl] = sum;
                } else {
                    work[iwsv + nvl] = -Math.abs(sum);
                    if (sum > 0) {
                        for (j = 1; j <= n; j = j + 1) {
                            amat[j][nvl] = -amat[j][nvl];
                        }
                        bvec[nvl] = -bvec[nvl];
                    }
                }
                // GOTO 700
                return 700;
            }
        }

        return 0;
    }

    function fn_goto_797() {
        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
        l1 = l + it1;
        if (work[l1] === 0) {
            // GOTO 798
            return 798;
        }
        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        if (work[l1 - 1] >= 0) {
            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        } else {
            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        }
        gc = work[l1 - 1] / temp;
        gs = work[l1] / temp;

        if (gc === 1) {
            // GOTO 798
            return 798;
        }
        if (gc === 0) {
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = work[l1 - 1];
                work[l1 - 1] = work[l1];
                work[l1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = dmat[i][it1];
                dmat[i][it1] = dmat[i][it1 + 1];
                dmat[i][it1 + 1] = temp;
            }
        } else {
            nu = gs / (1 + gc);
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = gc * work[l1 - 1] + gs * work[l1];
                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
                work[l1 - 1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
                dmat[i][it1] = temp;
            }
        }

        return 0;
    }

    function fn_goto_798() {
        l1 = l - it1;
        for (i = 1; i <= it1; i = i + 1) {
            work[l1] = work[l];
            l = l + 1;
            l1 = l1 + 1;
        }

        work[iwuv + it1] = work[iwuv + it1 + 1];
        iact[it1] = iact[it1 + 1];
        it1 = it1 + 1;
        if (it1 < nact) {
            // GOTO 797
            return 797;
        }

        return 0;
    }

    function fn_goto_799() {
        work[iwuv + nact] = work[iwuv + nact + 1];
        work[iwuv + nact + 1] = 0;
        iact[nact] = 0;
        nact = nact - 1;
        iter[2] = iter[2] + 1;

        return 0;
    }

    go = 0;
    while (true) {
        go = fn_goto_50();
        if (go === 999) {
            return;
        }
        while (true) {
            go = fn_goto_55();
            if (go === 0) {
                break;
            }
            if (go === 999) {
                return;
            }
            if (go === 700) {
                if (it1 === nact) {
                    fn_goto_799();
                } else {
                    while (true) {
                        fn_goto_797();
                        go = fn_goto_798();
                        if (go !== 797) {
                            break;
                        }
                    }
                    fn_goto_799();
                }
            }
        }
    }

}

function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
    Dmat = base0to1(Dmat);
    dvec = base0to1(dvec);
    Amat = base0to1(Amat);
    var i, n, q,
        nact, r,
        crval = [], iact = [], sol = [], work = [], iter = [],
        message;

    meq = meq || 0;
    factorized = factorized ? base0to1(factorized) : [undefined, 0];
    bvec = bvec ? base0to1(bvec) : [];

    // In Fortran the array index starts from 1
    n = Dmat.length - 1;
    q = Amat[1].length - 1;

    if (!bvec) {
        for (i = 1; i <= q; i = i + 1) {
            bvec[i] = 0;
        }
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }
    nact = 0;
    r = Math.min(n, q);
    for (i = 1; i <= n; i = i + 1) {
        sol[i] = 0;
    }
    crval[1] = 0;
    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= 2; i = i + 1) {
        iter[i] = 0;
    }

    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
        bvec, n, q, meq, iact, nact, iter, work, factorized);

    message = "";
    if (factorized[1] === 1) {
        message = "constraints are inconsistent, no solution!";
    }
    if (factorized[1] === 2) {
        message = "matrix D in quadratic function is not positive definite!";
    }

    return {
        solution: base1to0(sol),
        value: base1to0(crval),
        unconstrained_solution: base1to0(dvec),
        iterations: base1to0(iter),
        iact: base1to0(iact),
        message: message
    };
}
exports.solveQP = solveQP;
}(numeric));
/*
Shanti Rao sent me this routine by private email. I had to modify it
slightly to work on Arrays instead of using a Matrix object.
It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
*/

numeric.svd= function svd(A) {
    var temp;
//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
  var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
  var tolerance= 1.e-64/prec;
  var itmax= 50;
  var c=0;
  var i=0;
  var j=0;
  var k=0;
  var l=0;
  
  var u= numeric.clone(A);
  var m= u.length;
  
  var n= u[0].length;
  
  if (m < n) throw "Need more rows than columns"
  
  var e = new Array(n);
  var q = new Array(n);
  for (i=0; i<n; i++) e[i] = q[i] = 0.0;
  var v = numeric.rep([n,n],0);
//  v.zero();
  
  function pythag(a,b)
  {
    a = Math.abs(a)
    b = Math.abs(b)
    if (a > b)
      return a*Math.sqrt(1.0+(b*b/a/a))
    else if (b == 0.0) 
      return a
    return b*Math.sqrt(1.0+(a*a/b/b))
  }

  //Householder's reduction to bidiagonal form

  var f= 0.0;
  var g= 0.0;
  var h= 0.0;
  var x= 0.0;
  var y= 0.0;
  var z= 0.0;
  var s= 0.0;
  
  for (i=0; i < n; i++)
  { 
    e[i]= g;
    s= 0.0;
    l= i+1;
    for (j=i; j < m; j++) 
      s += (u[j][i]*u[j][i]);
    if (s <= tolerance)
      g= 0.0;
    else
    { 
      f= u[i][i];
      g= Math.sqrt(s);
      if (f >= 0.0) g= -g;
      h= f*g-s
      u[i][i]=f-g;
      for (j=l; j < n; j++)
      {
        s= 0.0
        for (k=i; k < m; k++) 
          s += u[k][i]*u[k][j]
        f= s/h
        for (k=i; k < m; k++) 
          u[k][j]+=f*u[k][i]
      }
    }
    q[i]= g
    s= 0.0
    for (j=l; j < n; j++) 
      s= s + u[i][j]*u[i][j]
    if (s <= tolerance)
      g= 0.0
    else
    { 
      f= u[i][i+1]
      g= Math.sqrt(s)
      if (f >= 0.0) g= -g
      h= f*g - s
      u[i][i+1] = f-g;
      for (j=l; j < n; j++) e[j]= u[i][j]/h
      for (j=l; j < m; j++)
      { 
        s=0.0
        for (k=l; k < n; k++) 
          s += (u[j][k]*u[i][k])
        for (k=l; k < n; k++) 
          u[j][k]+=s*e[k]
      } 
    }
    y= Math.abs(q[i])+Math.abs(e[i])
    if (y>x) 
      x=y
  }
  
  // accumulation of right hand gtransformations
  for (i=n-1; i != -1; i+= -1)
  { 
    if (g != 0.0)
    {
      h= g*u[i][i+1]
      for (j=l; j < n; j++) 
        v[j][i]=u[i][j]/h
      for (j=l; j < n; j++)
      { 
        s=0.0
        for (k=l; k < n; k++) 
          s += u[i][k]*v[k][j]
        for (k=l; k < n; k++) 
          v[k][j]+=(s*v[k][i])
      } 
    }
    for (j=l; j < n; j++)
    {
      v[i][j] = 0;
      v[j][i] = 0;
    }
    v[i][i] = 1;
    g= e[i]
    l= i
  }
  
  // accumulation of left hand transformations
  for (i=n-1; i != -1; i+= -1)
  { 
    l= i+1
    g= q[i]
    for (j=l; j < n; j++) 
      u[i][j] = 0;
    if (g != 0.0)
    {
      h= u[i][i]*g
      for (j=l; j < n; j++)
      {
        s=0.0
        for (k=l; k < m; k++) s += u[k][i]*u[k][j];
        f= s/h
        for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
      }
      for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
    }
    else
      for (j=i; j < m; j++) u[j][i] = 0;
    u[i][i] += 1;
  }
  
  // diagonalization of the bidiagonal form
  prec= prec*x
  for (k=n-1; k != -1; k+= -1)
  {
    for (var iteration=0; iteration < itmax; iteration++)
    { // test f splitting
      var test_convergence = false
      for (l=k; l != -1; l+= -1)
      { 
        if (Math.abs(e[l]) <= prec)
        { test_convergence= true
          break 
        }
        if (Math.abs(q[l-1]) <= prec)
          break 
      }
      if (!test_convergence)
      { // cancellation of e[l] if l>0
        c= 0.0
        s= 1.0
        var l1= l-1
        for (i =l; i<k+1; i++)
        { 
          f= s*e[i]
          e[i]= c*e[i]
          if (Math.abs(f) <= prec)
            break
          g= q[i]
          h= pythag(f,g)
          q[i]= h
          c= g/h
          s= -f/h
          for (j=0; j < m; j++)
          { 
            y= u[j][l1]
            z= u[j][i]
            u[j][l1] =  y*c+(z*s)
            u[j][i] = -y*s+(z*c)
          } 
        } 
      }
      // test f convergence
      z= q[k]
      if (l== k)
      { //convergence
        if (z<0.0)
        { //q[k] is made non-negative
          q[k]= -z
          for (j=0; j < n; j++)
            v[j][k] = -v[j][k]
        }
        break  //break out of iteration loop and move on to next k value
      }
      if (iteration >= itmax-1)
        throw 'Error: no convergence.'
      // shift from bottom 2x2 minor
      x= q[l]
      y= q[k-1]
      g= e[k-1]
      h= e[k]
      f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
      g= pythag(f,1.0)
      if (f < 0.0)
        f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
      else
        f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
      // next QR transformation
      c= 1.0
      s= 1.0
      for (i=l+1; i< k+1; i++)
      { 
        g= e[i]
        y= q[i]
        h= s*g
        g= c*g
        z= pythag(f,h)
        e[i-1]= z
        c= f/z
        s= h/z
        f= x*c+g*s
        g= -x*s+g*c
        h= y*s
        y= y*c
        for (j=0; j < n; j++)
        { 
          x= v[j][i-1]
          z= v[j][i]
          v[j][i-1] = x*c+z*s
          v[j][i] = -x*s+z*c
        }
        z= pythag(f,h)
        q[i-1]= z
        c= f/z
        s= h/z
        f= c*g+s*y
        x= -s*g+c*y
        for (j=0; j < m; j++)
        {
          y= u[j][i-1]
          z= u[j][i]
          u[j][i-1] = y*c+z*s
          u[j][i] = -y*s+z*c
        }
      }
      e[l]= 0.0
      e[k]= f
      q[k]= x
    } 
  }
    
  //vt= transpose(v)
  //return (u,q,vt)
  for (i=0;i<q.length; i++) 
    if (q[i] < prec) q[i] = 0
    
  //sort eigenvalues  
  for (i=0; i< n; i++)
  {  
  //writeln(q)
   for (j=i-1; j >= 0; j--)
   {
    if (q[j] < q[i])
    {
  //  writeln(i,'-',j)
     c = q[j]
     q[j] = q[i]
     q[i] = c
     for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
     for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
//     u.swapCols(i,j)
//     v.swapCols(i,j)
     i = j     
    }
   }  
  }
  
  return {U:u,S:q,V:v}
};

var jsfeat=jsfeat||{REVISION:"ALPHA"};self.Int32Array=self.Int32Array||Array;self.Uint32Array=self.Uint32Array||Array;self.Uint8Array=self.Uint8Array||Array;self.Float32Array=self.Float32Array||Array;self.Float64Array=self.Float64Array||Array;(function(o){var l=1.192092896e-7;var i=1e-37;var j=256,g=512,f=1024,t=2048,s=4096;var w=1,k=2,a=3,m=4;var v=new Int32Array([-1,1,4,-1,4,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,8]);var u=(function(){return function(x){return(x&65280)}})();var h=(function(){return function(x){return(x&255)}})();var b=(function(){return function(x){return v[(x&65280)>>8]}})();var d=1;var p=1;var e=2;var r=(function(){function x(z,y){this.size=((z+7)|0)&-8;if(typeof y==="undefined"){this.buffer=new ArrayBuffer(this.size)}else{this.buffer=y;this.size=y.length}this.u8=new Uint8Array(this.buffer);this.i32=new Int32Array(this.buffer);this.f32=new Float32Array(this.buffer);this.f64=new Float64Array(this.buffer)}return x})();var n=(function(){function x(B,z,A,y){this.type=u(A)|0;this.channel=h(A)|0;this.cols=B|0;this.rows=z|0;if(typeof y==="undefined"){this.buffer=new r((B*b(A)*h(A))*z)}else{this.buffer=y}this.data=this.type&j?this.buffer.u8:(this.type&g?this.buffer.i32:(this.type&f?this.buffer.f32:this.buffer.f64))}x.prototype.set_data_type=function(y){this.type=u(y)|0;this.channel=h(y)|0;delete this.data;delete this.buffer;this.buffer=new r((this.cols*b(y)*h(y))*this.rows);this.data=this.type&j?this.buffer.u8:(this.type&g?this.buffer.i32:(this.type&f?this.buffer.f32:this.buffer.f64))};x.prototype.set_data=function(z){var y=z.length;while(--y>=0){this.data[y]=z[y]}};return x})();var q=(function(){function x(y){this.levels=y|0;this.data=new Array(y);this.pyrdown=jsfeat.imgproc.pyrdown}x.prototype.allocate=function(y,A,B){var z=this.levels;while(--z>=0){this.data[z]=new n(y>>z,A>>z,B)}};x.prototype.build=function(B,A){if(typeof A==="undefined"){A=true}var D=2,z=B,y=this.data[0];if(!A){var C=B.cols*B.rows;while(--C>=0){y.data[C]=B.data[C]}}y=this.data[1];this.pyrdown(z,y);for(;D<this.levels;++D){z=y;y=this.data[D];this.pyrdown(z,y)}};return x})();var c=(function(){function x(z,C,A,B){if(typeof z==="undefined"){z=0}if(typeof C==="undefined"){C=0}if(typeof A==="undefined"){A=0}if(typeof B==="undefined"){B=0}this.x=z;this.y=C;this.score=A;this.level=B}return x})();o.U8_t=j;o.S32_t=g;o.F32_t=f;o.S64_t=t;o.F64_t=s;o.C1_t=w;o.C2_t=k;o.C3_t=a;o.C4_t=m;o.EPSILON=l;o.FLT_MIN=i;o.BOX_BLUR_NOSCALE=d;o.SVD_U_T=p;o.SVD_V_T=e;o.get_data_type=u;o.get_channel=h;o.get_data_type_size=b;o.data_t=r;o.matrix_t=n;o.pyramid_t=q;o.point2d_t=c})(jsfeat);(function(b){var a=(function(){var f=(function(){function g(h){this.next=null;this.data=new jsfeat.data_t(h);this.size=this.data.size;this.buffer=this.data.buffer;this.u8=this.data.u8;this.i32=this.data.i32;this.f32=this.data.f32;this.f64=this.data.f64}g.prototype.resize=function(h){delete this.data;this.data=new jsfeat.data_t(h);this.size=this.data.size;this.buffer=this.data.buffer;this.u8=this.data.u8;this.i32=this.data.i32;this.f32=this.data.f32;this.f64=this.data.f64};return g})();var e,c;var d=0;return{allocate:function(g,k){e=c=new f(k);for(var h=0;h<g;++h){var j=new f(k);c=c.next=j;d++}},get_buffer:function(g){var h=e;e=e.next;d--;if(g>h.size){h.resize(g)}return h},put_buffer:function(g){c=c.next=g;d++}}})();b.cache=a;a.allocate(30,640*4)})(jsfeat);(function(b){var a=(function(){var c=new Int32Array(48*2);return{get_gaussian_kernel:function(p,m,e,l){var f=0,j=0,o=0,n=0,d=0;var g=0;var h=jsfeat.cache.get_buffer(p<<2);var k=h.f32;if((p&1)==1&&p<=7&&m<=0){switch(p>>1){case 0:k[0]=1;g=1;break;case 1:k[0]=0.25,k[1]=0.5,k[2]=0.25;g=0.25+0.5+0.25;break;case 2:k[0]=0.0625,k[1]=0.25,k[2]=0.375,k[3]=0.25,k[4]=0.0625;g=0.0625+0.25+0.375+0.25+0.0625;break;case 3:k[0]=0.03125,k[1]=0.109375,k[2]=0.21875,k[3]=0.28125,k[4]=0.21875,k[5]=0.109375,k[6]=0.03125;g=0.03125+0.109375+0.21875+0.28125+0.21875+0.109375+0.03125;break}}else{n=m>0?m:((p-1)*0.5-1)*0.3+0.8;d=-0.5/(n*n);for(;f<p;++f){j=f-(p-1)*0.5;o=Math.exp(d*j*j);k[f]=o;g+=o}}if(l&jsfeat.U8_t){g=256/g;for(f=0;f<p;++f){e[f]=(k[f]*g+0.5)|0}}else{g=1/g;for(f=0;f<p;++f){e[f]=k[f]*g}}jsfeat.cache.put_buffer(h)},qsort:function(o,J,s,u){var D=7;var v,r,q,p;var C=0,j=0,G=0,B=0,z=0,A=0,e=0,y=0,E=0;var x=0,w=0,h=0,g=0,l=0,I=0,H=0,F=0,f=0;var k=c;if((s-J+1)<=1){return}k[0]=J;k[1]=s;while(C>=0){j=k[C<<1];G=k[(C<<1)+1];C--;for(;;){z=(G-j)+1;if(z<=D){for(e=j+1;e<=G;e++){for(y=e;y>j&&u(o[y],o[y-1]);y--){v=o[y];o[y]=o[y-1];o[y-1]=v}}break}else{f=0;x=j;h=G;l=j+(z>>1);if(z>40){E=z>>3;I=j,H=j+E,F=j+(E<<1);r=o[I],q=o[H],p=o[F];j=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F));I=l-E,H=l,F=l+E;r=o[I],q=o[H],p=o[F];l=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F));I=G-(E<<1),H=G-E,F=G;r=o[I],q=o[H],p=o[F];G=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F))}I=j,H=l,F=G;r=o[I],q=o[H],p=o[F];l=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F));if(l!=x){v=o[l];o[l]=o[x];o[x]=v;l=x}j=w=x+1;G=g=h;r=o[l];for(;;){while(j<=G&&!u(r,o[j])){if(!u(o[j],r)){if(j>w){v=o[w];o[w]=o[j];o[j]=v}f=1;w++}j++}while(j<=G&&!u(o[G],r)){if(!u(r,o[G])){if(G<g){v=o[g];o[g]=o[G];o[G]=v}f=1;g--}G--}if(j>G){break}v=o[j];o[j]=o[G];o[G]=v;f=1;j++;G--}if(f==0){j=x,G=h;for(e=j+1;e<=G;e++){for(y=e;y>j&&u(o[y],o[y-1]);y--){v=o[y];o[y]=o[y-1];o[y-1]=v}}break}z=Math.min((w-x),(j-w));A=(j-z)|0;for(B=0;B<z;++B,++A){v=o[x+B];o[x+B]=o[A];o[A]=v}z=Math.min((h-g),(g-G));A=(h-z+1)|0;for(B=0;B<z;++B,++A){v=o[j+B];o[j+B]=o[A];o[A]=v}z=(j-w);A=(g-G);if(z>1){if(A>1){if(z>A){++C;k[C<<1]=x;k[(C<<1)+1]=x+z-1;j=h-A+1,G=h}else{++C;k[C<<1]=h-A+1;k[(C<<1)+1]=h;j=x,G=x+z-1}}else{j=x,G=x+z-1}}else{if(A>1){j=h-A+1,G=h}else{break}}}}}},median:function(k,d,i){var e;var f=0,j=0,g=0,h=(d+i)>>1;for(;;){if(i<=d){return k[h]}if(i==(d+1)){if(k[d]>k[i]){e=k[d];k[d]=k[i];k[i]=e}return k[h]}f=((d+i)>>1);if(k[f]>k[i]){e=k[f];k[f]=k[i];k[i]=e}if(k[d]>k[i]){e=k[d];k[d]=k[i];k[i]=e}if(k[f]>k[d]){e=k[f];k[f]=k[d];k[d]=e}j=(d+1);e=k[f];k[f]=k[j];k[j]=e;g=i;for(;;){do{++j}while(k[d]>k[j]);do{--g}while(k[g]>k[d]);if(g<j){break}e=k[j];k[j]=k[g];k[g]=e}e=k[d];k[d]=k[g];k[g]=e;if(g<=h){d=j}else{if(g>=h){i=(g-1)}}}return 0}}})();b.math=a})(jsfeat);(function(b){var a=(function(){return{transpose:function(f,d){var l=0,h=0,k=d.rows,c=d.cols;var n=0,e=0,m=0;var o=d.data,g=f.data;for(;l<k;e+=1,n+=c,l++){m=e;for(h=0;h<c;m+=k,h++){g[m]=o[n+h]}}},multiply:function(l,n,m){var u=0,s=0,o=0;var r=0,t=0,q=0,w=0,g=0;var f=n.cols,e=n.rows,p=m.cols;var v=n.data,d=m.data,h=l.data;var c=0;for(;u<e;r+=f,u++){for(w=0,s=0;s<p;g++,w++,s++){q=w;t=r;c=0;for(o=0;o<f;t++,q+=p,o++){c+=v[t]*d[q]}h[g]=c}}},multiply_ABt:function(c,g,d){var p=0,n=0,m=0;var r=0,l=0,f=0,u=0;var e=g.cols,o=g.rows,q=d.rows;var v=g.data,t=d.data,h=c.data;var s=0;for(;p<o;r+=e,p++){for(f=0,n=0;n<q;u++,n++){l=r;s=0;for(m=0;m<e;l++,f++,m++){s+=v[l]*t[f]}h[u]=s}}},multiply_AtB:function(l,n,m){var u=0,s=0,o=0;var r=0,t=0,q=0,w=0,g=0;var f=n.cols,e=n.rows,p=m.cols;var v=n.data,d=m.data,h=l.data;var c=0;for(;u<f;r++,u++){for(w=0,s=0;s<p;g++,w++,s++){q=w;t=r;c=0;for(o=0;o<e;t+=f,q+=p,o++){c+=v[t]*d[q]}h[g]=c}}},multiply_AAt:function(d,h){var q=0,o=0,n=0;var c=0,r=0,m=0,g=0,e=0,u=0;var f=h.cols,p=h.rows;var t=h.data,l=d.data;var s=0;for(;q<p;c+=p+1,r=m,q++){e=c;u=c;g=r;for(o=q;o<p;e++,u+=p,o++){m=r;s=0;for(n=0;n<f;n++){s+=t[m++]*t[g++]}l[e]=s;l[u]=s}}},multiply_AtA:function(c,g){var r=0,p=0,n=0;var s=0,m=0,f=0,o=0,d=0,l=0;var e=g.cols,q=g.rows;var u=g.data,h=c.data;var t=0;for(;r<e;o+=e,r++){s=r;l=o+r;d=l;for(p=r;p<e;d++,l+=e,p++){m=s;f=p;t=0;for(n=0;n<q;m+=e,f+=e,n++){t+=u[m]*u[f]}h[d]=t;h[l]=t}}}}})();b.matmath=a})(jsfeat);(function(b){var a=(function(){var f=function(g,j,i,h){h=g[j];g[j]=g[i];g[i]=h};var d=function(h,g){h=Math.abs(h);g=Math.abs(g);if(h>g){g/=h;return h*Math.sqrt(1+g*g)}if(g>0){h/=g;return g*Math.sqrt(1+h*h)}return 0};var c=function(H,o,q,r,h,I){var C=jsfeat.EPSILON;var N=0,M=0,L=0,J=0,K=0,D=0,R=0,G=0;var u=0,v=I*I*30;var E=0,U=0,F=0,x=0,z=0,B=0,Q=0,T=0,w=0;var P=jsfeat.cache.get_buffer(I<<2);var S=jsfeat.cache.get_buffer(I<<2);var O=P.i32;var g=S.i32;if(r){for(;N<I;N++){L=N*h;for(M=0;M<I;M++){r[L+M]=0}r[L+N]=1}}for(L=0;L<I;L++){q[L]=H[(o+1)*L];if(L<I-1){for(J=L+1,E=Math.abs(H[o*L+J]),N=L+2;N<I;N++){U=Math.abs(H[o*L+N]);if(E<U){E=U,J=N}}O[L]=J}if(L>0){for(J=0,E=Math.abs(H[L]),N=1;N<L;N++){U=Math.abs(H[o*N+L]);if(E<U){E=U,J=N}}g[L]=J}}if(I>1){for(;u<v;u++){for(L=0,E=Math.abs(H[O[0]]),N=1;N<I-1;N++){U=Math.abs(H[o*N+O[N]]);if(E<U){E=U,L=N}}K=O[L];for(N=1;N<I;N++){U=Math.abs(H[o*g[N]+N]);if(E<U){E=U,L=g[N],K=N}}F=H[o*L+K];if(Math.abs(F)<=C){break}x=(q[K]-q[L])*0.5;z=Math.abs(x)+d(F,x);B=d(F,z);Q=z/B;B=F/B;z=(F/z)*F;if(x<0){B=-B,z=-z}H[o*L+K]=0;q[L]-=z;q[K]+=z;for(N=0;N<L;N++){R=(o*N+L);G=(o*N+K);T=H[R];w=H[G];H[R]=T*Q-w*B;H[G]=T*B+w*Q}for(N=(L+1);N<K;N++){R=(o*L+N);G=(o*N+K);T=H[R];w=H[G];H[R]=T*Q-w*B;H[G]=T*B+w*Q}N=K+1;R=(o*L+N);G=(o*K+N);for(;N<I;N++,R++,G++){T=H[R];w=H[G];H[R]=T*Q-w*B;H[G]=T*B+w*Q}if(r){R=h*L;G=h*K;for(N=0;N<I;N++,R++,G++){T=r[R];w=r[G];r[R]=T*Q-w*B;r[G]=T*B+w*Q}}for(M=0;M<2;M++){D=M==0?L:K;if(D<I-1){for(J=D+1,E=Math.abs(H[o*D+J]),N=D+2;N<I;N++){U=Math.abs(H[o*D+N]);if(E<U){E=U,J=N}}O[D]=J}if(D>0){for(J=0,E=Math.abs(H[D]),N=1;N<D;N++){U=Math.abs(H[o*N+D]);if(E<U){E=U,J=N}}g[D]=J}}}}for(L=0;L<I-1;L++){J=L;for(N=L+1;N<I;N++){if(q[J]<q[N]){J=N}}if(L!=J){f(q,J,L,E);if(r){for(N=0;N<I;N++){f(r,h*J+N,h*L+N,E)}}}}jsfeat.cache.put_buffer(P);jsfeat.cache.put_buffer(S)};var e=function(D,l,h,M,v,T,S,E){var C=jsfeat.EPSILON*10;var q=jsfeat.FLT_MIN;var X=0,V=0,U=0,A=0,u=Math.max(T,30);var K=0,J=0,R=0,Q=0,F=0;var Y=0,O=0,N=0;var H=0,G=0,x=0,I=0,w=0,L=0,aa=0,P=0,Z=0;var z=4660;var B=0,y=0,o=0;var r=jsfeat.cache.get_buffer(S<<3);var g=r.f64;for(;X<S;X++){for(U=0,x=0;U<T;U++){N=D[X*l+U];x+=N*N}g[X]=x;if(M){for(U=0;U<S;U++){M[X*v+U]=0}M[X*v+X]=1}}for(;A<u;A++){F=0;for(X=0;X<S-1;X++){for(V=X+1;V<S;V++){K=(X*l)|0,J=(V*l)|0;aa=g[X],P=0,Z=g[V];U=3;P+=D[K]*D[J];P+=D[K+1]*D[J+1];P+=D[K+2]*D[J+2];for(;U<T;U++){P+=D[K+U]*D[J+U]}if(Math.abs(P)<=C*Math.sqrt(aa*Z)){continue}P*=2;I=aa-Z,w=d(P,I);if(I<0){L=(w-I)*0.5;O=Math.sqrt(L/w);Y=(P/(w*O*2))}else{Y=Math.sqrt((w+I)/(w*2));O=(P/(w*Y*2));L=P*P*0.5/(w+I)}g[X]+=L;g[V]-=L;if((A&1)&&g[X]>0&&g[V]>0){U=3;H=Y*D[K]+O*D[J];G=-O*D[K]+Y*D[J];D[K]=H;D[J]=G;H=Y*D[K+1]+O*D[J+1];G=-O*D[K+1]+Y*D[J+1];D[K+1]=H;D[J+1]=G;H=Y*D[K+2]+O*D[J+2];G=-O*D[K+2]+Y*D[J+2];D[K+2]=H;D[J+2]=G;for(;U<T;U++){H=Y*D[K+U]+O*D[J+U];G=-O*D[K+U]+Y*D[J+U];D[K+U]=H;D[J+U]=G}}else{aa=Z=0;U=3;H=Y*D[K]+O*D[J];G=-O*D[K]+Y*D[J];D[K]=H;D[J]=G;aa+=H*H;Z+=G*G;H=Y*D[K+1]+O*D[J+1];G=-O*D[K+1]+Y*D[J+1];D[K+1]=H;D[J+1]=G;aa+=H*H;Z+=G*G;H=Y*D[K+2]+O*D[J+2];G=-O*D[K+2]+Y*D[J+2];D[K+2]=H;D[J+2]=G;aa+=H*H;Z+=G*G;for(;U<T;U++){H=Y*D[K+U]+O*D[J+U];G=-O*D[K+U]+Y*D[J+U];D[K+U]=H;D[J+U]=G;aa+=H*H;Z+=G*G}g[X]=aa;g[V]=Z}F=1;if(M){R=(X*v)|0,Q=(V*v)|0;U=3;H=Y*M[R]+O*M[Q];G=-O*M[R]+Y*M[Q];M[R]=H;M[Q]=G;H=Y*M[R+1]+O*M[Q+1];G=-O*M[R+1]+Y*M[Q+1];M[R+1]=H;M[Q+1]=G;H=Y*M[R+2]+O*M[Q+2];G=-O*M[R+2]+Y*M[Q+2];M[R+2]=H;M[Q+2]=G;for(;U<S;U++){H=Y*M[R+U]+O*M[Q+U];G=-O*M[R+U]+Y*M[Q+U];M[R+U]=H;M[Q+U]=G}}}}if(F==0){break}}for(X=0;X<S;X++){for(U=0,x=0;U<T;U++){N=D[X*l+U];x+=N*N}g[X]=Math.sqrt(x)}for(X=0;X<S-1;X++){V=X;for(U=X+1;U<S;U++){if(g[V]<g[U]){V=U}}if(X!=V){f(g,X,V,x);if(M){for(U=0;U<T;U++){f(D,X*l+U,V*l+U,N)}for(U=0;U<S;U++){f(M,X*v+U,V*v+U,N)}}}}for(X=0;X<S;X++){h[X]=g[X]}if(!M){jsfeat.cache.put_buffer(r);return}for(X=0;X<E;X++){x=X<S?g[X]:0;while(x<=q){y=(1/T);for(U=0;U<T;U++){z=(z*214013+2531011);B=(((z>>16)&32767)&256)!=0?y:-y;D[X*l+U]=B}for(A=0;A<2;A++){for(V=0;V<X;V++){x=0;for(U=0;U<T;U++){x+=D[X*l+U]*D[V*l+U]}o=0;for(U=0;U<T;U++){N=(D[X*l+U]-x*D[V*l+U]);D[X*l+U]=N;o+=Math.abs(N)}o=o?1/o:0;for(U=0;U<T;U++){D[X*l+U]*=o}}}x=0;for(U=0;U<T;U++){N=D[X*l+U];x+=N*N}x=Math.sqrt(x)}O=(1/x);for(U=0;U<T;U++){D[X*l+U]*=O}}jsfeat.cache.put_buffer(r)};return{lu_solve:function(l,g){var q=0,o=0,n=0,h=1,v=l.cols;var w=l.data,r=g.data;var x,m,u,y;for(q=0;q<v;q++){n=q;for(o=q+1;o<v;o++){if(Math.abs(w[o*v+q])>Math.abs(w[n*v+q])){n=o}}if(Math.abs(w[n*v+q])<jsfeat.EPSILON){return 0}if(n!=q){for(o=q;o<v;o++){f(w,q*v+o,n*v+o,x)}f(r,q,n,x);h=-h}u=-1/w[q*v+q];for(o=q+1;o<v;o++){m=w[o*v+q]*u;for(n=q+1;n<v;n++){w[o*v+n]+=m*w[q*v+n]}r[o]+=m*r[q]}w[q*v+q]=-u}for(q=v-1;q>=0;q--){y=r[q];for(n=q+1;n<v;n++){y-=w[q*v+n]*r[n]}r[q]=y*w[q*v+q]}return 1},cholesky_solve:function(h,g){var l=0,v=0,r=0,s=0,n=0,p=0,o=0;var u=h.cols;var t=h.data,q=g.data;var k,m;for(l=0;l<u;l++){m=1;s=(l*u);n=s;for(v=l;v<u;v++){k=t[(n+l)];for(r=0;r<l;r++){k-=t[(r*u+l)]*t[(n+r)]}if(v==l){t[(n+l)]=k;if(k==0){return 0}m=1/k}else{t[(s+v)]=k;t[(n+l)]=k*m}n=(n+u)}}s=0;for(p=0;p<u;p++){k=q[p];for(o=0;o<p;o++){k-=t[(s+o)]*q[o]}q[p]=k;s=(s+u)}s=0;for(p=0;p<u;p++){q[p]/=t[(s+p)];s=(s+u)}p=(u-1);for(;p>=0;p--){k=q[p];o=(p+1);s=(o*u);for(;o<u;o++){k-=t[(s+p)]*q[o];s=(s+u)}q[p]=k}return 1},svd_decompose:function(t,k,p,l,o){if(typeof o==="undefined"){o=0}var r=0,z=0,x=0,g=t.rows,D=t.cols,w=g,v=D;var s=t.type|jsfeat.C1_t;if(w<v){r=1;z=w;w=v;v=z}var q=jsfeat.cache.get_buffer((w*w)<<3);var h=jsfeat.cache.get_buffer(v<<3);var C=jsfeat.cache.get_buffer((v*v)<<3);var u=new jsfeat.matrix_t(w,w,s,q.data);var B=new jsfeat.matrix_t(1,v,s,h.data);var y=new jsfeat.matrix_t(v,v,s,C.data);if(r==0){jsfeat.matmath.transpose(u,t)}else{for(z=0;z<D*g;z++){u.data[z]=t.data[z]}for(;z<v*w;z++){u.data[z]=0}}e(u.data,w,B.data,y.data,v,w,v,w);if(k){for(z=0;z<v;z++){k.data[z]=B.data[z]}for(;z<D;z++){k.data[z]=0}}if(r==0){if(p&&(o&jsfeat.SVD_U_T)){z=w*w;while(--z>=0){p.data[z]=u.data[z]}}else{if(p){jsfeat.matmath.transpose(p,u)}}if(l&&(o&jsfeat.SVD_V_T)){z=v*v;while(--z>=0){l.data[z]=y.data[z]}}else{if(l){jsfeat.matmath.transpose(l,y)}}}else{if(p&&(o&jsfeat.SVD_U_T)){z=v*v;while(--z>=0){p.data[z]=y.data[z]}}else{if(p){jsfeat.matmath.transpose(p,y)}}if(l&&(o&jsfeat.SVD_V_T)){z=w*w;while(--z>=0){l.data[z]=u.data[z]}}else{if(l){jsfeat.matmath.transpose(l,u)}}}jsfeat.cache.put_buffer(q);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(C)},svd_solve:function(v,l,s){var E=0,C=0,z=0;var w=0,u=0;var o=v.rows,p=v.cols;var h=0,I=0,x=0;var r=v.type|jsfeat.C1_t;var F=jsfeat.cache.get_buffer((o*o)<<3);var m=jsfeat.cache.get_buffer(p<<3);var H=jsfeat.cache.get_buffer((p*p)<<3);var t=new jsfeat.matrix_t(o,o,r,F.data);var G=new jsfeat.matrix_t(1,p,r,m.data);var D=new jsfeat.matrix_t(p,p,r,H.data);var n=s.data,y=t.data,q=G.data,g=D.data;this.svd_decompose(v,G,t,D,0);x=jsfeat.EPSILON*q[0]*p;for(;E<p;E++,u+=p){I=0;for(C=0;C<p;C++){if(q[C]>x){for(z=0,h=0,w=0;z<o;z++,w+=p){h+=y[w+C]*n[z]}I+=h*g[u+C]/q[C]}}l.data[E]=I}jsfeat.cache.put_buffer(F);jsfeat.cache.put_buffer(m);jsfeat.cache.put_buffer(H)},svd_invert:function(E,t){var C=0,z=0,y=0;var v=0,s=0,h=0;var n=t.rows,o=t.cols;var l=0,w=0;var q=t.type|jsfeat.C1_t;var D=jsfeat.cache.get_buffer((n*n)<<3);var m=jsfeat.cache.get_buffer(o<<3);var G=jsfeat.cache.get_buffer((o*o)<<3);var u=new jsfeat.matrix_t(n,n,q,D.data);var F=new jsfeat.matrix_t(1,o,q,m.data);var B=new jsfeat.matrix_t(o,o,q,G.data);var r=E.data,x=u.data,p=F.data,g=B.data;this.svd_decompose(t,F,u,B,0);w=jsfeat.EPSILON*p[0]*o;for(;C<o;C++,s+=o){for(z=0,v=0;z<n;z++,h++){for(y=0,l=0;y<o;y++,v++){if(p[y]>w){l+=g[s+y]*x[v]/p[y]}}r[h]=l}}jsfeat.cache.put_buffer(D);jsfeat.cache.put_buffer(m);jsfeat.cache.put_buffer(G)},eigenVV:function(j,p,r){var k=j.cols,m=k*k;var g=j.type|jsfeat.C1_t;var o=jsfeat.cache.get_buffer((k*k)<<3);var h=jsfeat.cache.get_buffer(k<<3);var l=new jsfeat.matrix_t(k,k,g,o.data);var q=new jsfeat.matrix_t(1,k,g,h.data);while(--m>=0){l.data[m]=j.data[m]}c(l.data,k,q.data,p?p.data:null,k,k);if(r){while(--k>=0){r.data[k]=q.data[k]}}jsfeat.cache.put_buffer(o);jsfeat.cache.put_buffer(h)}}})();b.linalg=a})(jsfeat);(function(b){var a=(function(){return{affine_3point_transform:function(l,h,o,f,m,g,n,d,j,e,k,c,i){},perspective_4point_transform:function(B,w,ac,s,Z,v,ab,r,W,u,aa,p,U,t,Y,m,S){var J=w;var I=u;var H=ab;var G=J*I*H;var F=Y;var E=J*F;var D=I*E;var C=aa;var o=J*C;var l=v;var h=ac;var f=t;var d=h*f;var au=d*l;var T=f*l*C;var R=f*H;var O=f*C;var N=I*H;var M=F*I;var L=F*l;var K=C*l;var A=1/(R-O-N+M-L+K);var y=J*f;var x=h*l;var q=H*J;var n=F*q;var k=h*I;var g=d*C;var c=h*C*l;var V=H*F*I;var Q=F*h;var at=-(D-G+o*l-l*E-d*I+au-T+R*I)*A;var ar=(G-D-y*H+y*C+au-I*x+L*I-T)*A;var aq=J;var ap=(-C*E+n+k*H-d*H+g-c+L*C-V)*A;var ao=(-n+q*C-Q*I+g-c+Q*l+V-R*C)*A;var am=h;var ak=(-o+q+k-x+O-R-M+L)*A;var ai=(-E+o+d-k+L-K-R+N)*A;J=s;I=p;H=W;G=J*I*H;F=S;E=J*F;D=I*E;C=U;o=J*C;l=r;h=Z;f=m;d=h*f;au=d*l;T=f*l*C;R=f*H;O=f*C;N=I*H;M=F*I;L=F*l;K=C*l;A=1/(R-O-N+M-L+K);y=J*f;x=h*l;q=H*J;n=F*q;k=h*I;g=d*C;c=h*C*l;V=H*F*I;Q=F*h;var an=-(D-G+o*l-l*E-d*I+au-T+R*I)*A;var al=(G-D-y*H+y*C+au-I*x+L*I-T)*A;var aj=J;var ah=(-C*E+n+k*H-d*H+g-c+L*C-V)*A;var ag=(-n+q*C-Q*I+g-c+Q*l+V-R*C)*A;var af=h;var ae=(-o+q+k-x+O-R-M+L)*A;var ad=(-E+o+d-k+L-K-R+N)*A;I=ao-ai*am;H=at*ao;G=at*am;E=ap*ar;D=aq*ap;o=ar*ak;var j=aq*ak;f=1/(H-G*ai-E+D*ai+o*am-j*ao);au=-ap+am*ak;var P=-ap*ai+ao*ak;K=-ar+aq*ai;var z=at-j;x=at*ai-o;q=-ar*am+aq*ao;var i=G-D;var e=H-E;c=I*f;var av=K*f;var X=q*f;B[0]=an*c+al*(au*f)-aj*(P*f);B[1]=an*av+al*(z*f)-aj*(x*f);B[2]=-an*X-al*(i*f)+aj*(e*f);B[3]=ah*c+ag*(au*f)-af*(P*f);B[4]=ah*av+ag*(z*f)-af*(x*f);B[5]=-ah*X-ag*(i*f)+af*(e*f);B[6]=ae*c+ad*(au*f)-P*f;B[7]=ae*av+ad*(z*f)-x*f;B[8]=-ae*X-ad*(i*f)+e*f},invert_affine_transform:function(c,k){var i=c[0],h=c[1],g=c[2];var f=c[3],e=c[4],d=c[5];var j=1/(i*e-h*f);k[0]=j*e;k[1]=j*-h;k[2]=j*(h*d-g*e);k[3]=j*-f;k[4]=j*i;k[5]=j*(g*f-i*d)},invert_perspective_transform:function(c,k){var i=c[0],h=c[1],g=c[2];var f=c[3],e=c[4],d=c[5];var n=c[6],m=c[7],l=c[8];var j=1/(i*(e*l-d*m)-h*(f*l-d*n)+g*(f*m-e*n));k[0]=j*(e*l-d*m);k[1]=j*(g*m-h*l);k[2]=j*(h*d-g*e);k[3]=j*(d*n-f*l);k[4]=j*(i*l-g*n);k[5]=j*(g*f-i*d);k[6]=j*(f*m-e*n);k[7]=j*(h*n-i*m);k[8]=j*(i*e-h*f)}}})();b.transform=a})(jsfeat);(function(b){var a=(function(){var c=function(q,R,O,p){var z=[],r=0;var y=q.channel,v=q.cols,J=q.rows;var P=q.data,m=R.data;var I=v/O,H=J/p;var n=(I*H*65536)|0;var x=0,u=0,C=0,A=0,t=0,s=0,G=0,F=0,D=0,B=0;var Q=0,N=0,K=0,o=0,M=0,E=0;var l=jsfeat.cache.get_buffer((O*y)<<2);var g=jsfeat.cache.get_buffer((O*y)<<2);var L=l.i32;var j=g.i32;for(;x<O;x++){D=x*I,B=D+I;t=(D+1-0.000001)|0,s=B|0;t=Math.min(t,v-1);s=Math.min(s,v-1);if(t>D){z[r++]={si:((t-1)*y)|0,di:(x*y)|0,alpha:((t-D)*256)|0}}for(C=t;C<s;C++){z[r++]={si:(C*y)|0,di:(x*y)|0,alpha:256}}if(B-s>0.001){z[r++]={si:(s*y)|0,di:(x*y)|0,alpha:((B-s)*256)|0}}}for(x=0;x<O*y;x++){L[x]=j[x]=0}u=0;for(A=0;A<J;A++){Q=v*A;for(F=0;F<r;F++){K=z[F].di;o=z[F].alpha;t=z[F].si;for(G=0;G<y;G++){L[K+G]+=P[Q+t+G]*o}}if((u+1)*H<=A+1||A==J-1){M=(Math.max(A+1-(u+1)*H,0)*256)|0;E=256-M;N=O*u;if(M<=0){for(x=0;x<O*y;x++){m[N+x]=Math.min(Math.max((j[x]+L[x]*256)/n,0),255);j[x]=L[x]=0}}else{for(x=0;x<O*y;x++){m[N+x]=Math.min(Math.max((j[x]+L[x]*E)/n,0),255);j[x]=L[x]*M;L[x]=0}}u++}else{for(x=0;x<O*y;x++){j[x]+=L[x]*256;L[x]=0}}}jsfeat.cache.put_buffer(g);jsfeat.cache.put_buffer(l)};var f=function(p,R,N,o){var y=[],q=0;var x=p.channel,u=p.cols,I=p.rows;var O=p.data,m=R.data;var H=u/N,G=I/o;var Q=1/(H*G);var v=0,t=0,B=0,z=0,s=0,r=0,F=0,E=0,C=0,A=0;var P=0,M=0,J=0,n=0,L=0,D=0;var l=jsfeat.cache.get_buffer((N*x)<<2);var g=jsfeat.cache.get_buffer((N*x)<<2);var K=l.f32;var j=g.f32;for(;v<N;v++){C=v*H,A=C+H;s=(C+1-0.000001)|0,r=A|0;s=Math.min(s,u-1);r=Math.min(r,u-1);if(s>C){y[q++]={si:((s-1)*x)|0,di:(v*x)|0,alpha:(s-C)*Q}}for(B=s;B<r;B++){y[q++]={si:(B*x)|0,di:(v*x)|0,alpha:Q}}if(A-r>0.001){y[q++]={si:(r*x)|0,di:(v*x)|0,alpha:(A-r)*Q}}}for(v=0;v<N*x;v++){K[v]=j[v]=0}t=0;for(z=0;z<I;z++){P=u*z;for(E=0;E<q;E++){J=y[E].di;n=y[E].alpha;s=y[E].si;for(F=0;F<x;F++){K[J+F]+=O[P+s+F]*n}}if((t+1)*G<=z+1||z==I-1){L=Math.max(z+1-(t+1)*G,0);D=1-L;M=N*t;if(Math.abs(L)<0.001){for(v=0;v<N*x;v++){m[M+v]=j[v]+K[v];j[v]=K[v]=0}}else{for(v=0;v<N*x;v++){m[M+v]=j[v]+K[v]*D;j[v]=K[v]*L;K[v]=0}}t++}else{for(v=0;v<N*x;v++){j[v]+=K[v];K[v]=0}}}jsfeat.cache.put_buffer(g);jsfeat.cache.put_buffer(l)};var e=function(D,F,m,s,B,t,g,n){var z=0,y=0,x=0,A=0,u=0,l=0,G=0,E=0,C=0,v=t[0],r=0;var q=s<<1,p=s*3,o=s<<2;for(;z<B;++z){l=F[A];for(y=0;y<n;++y){D[y]=l}for(y=0;y<=s-2;y+=2){D[y+n]=F[A+y];D[y+n+1]=F[A+y+1]}for(;y<s;++y){D[y+n]=F[A+y]}l=F[A+s-1];for(y=s;y<n+s;++y){D[y+n]=l}for(y=0;y<=s-4;y+=4){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u+y]=l>>8;m[u+y+1]=G>>8;m[u+y+2]=E>>8;m[u+y+3]=C>>8}for(;y<s;++y){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u+y]=l>>8}A+=s;u+=s}for(z=0;z<s;++z){l=m[z];for(y=0;y<n;++y){D[y]=l}x=z;for(y=0;y<=B-2;y+=2,x+=q){D[y+n]=m[x];D[y+n+1]=m[x+s]}for(;y<B;++y,x+=s){D[y+n]=m[x]}l=m[(B-1)*s+z];for(y=B;y<n+B;++y){D[y+n]=l}u=z;for(y=0;y<=B-4;y+=4,u+=o){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u]=l>>8;m[u+s]=G>>8;m[u+q]=E>>8;m[u+p]=C>>8}for(;y<B;++y,u+=s){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u]=l>>8}}};var d=function(D,F,m,s,B,t,g,n){var z=0,y=0,x=0,A=0,u=0,l=0,G=0,E=0,C=0,v=t[0],r=0;var q=s<<1,p=s*3,o=s<<2;for(;z<B;++z){l=F[A];for(y=0;y<n;++y){D[y]=l}for(y=0;y<=s-2;y+=2){D[y+n]=F[A+y];D[y+n+1]=F[A+y+1]}for(;y<s;++y){D[y+n]=F[A+y]}l=F[A+s-1];for(y=s;y<n+s;++y){D[y+n]=l}for(y=0;y<=s-4;y+=4){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u+y]=l;m[u+y+1]=G;m[u+y+2]=E;m[u+y+3]=C}for(;y<s;++y){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u+y]=l}A+=s;u+=s}for(z=0;z<s;++z){l=m[z];for(y=0;y<n;++y){D[y]=l}x=z;for(y=0;y<=B-2;y+=2,x+=q){D[y+n]=m[x];D[y+n+1]=m[x+s]}for(;y<B;++y,x+=s){D[y+n]=m[x]}l=m[(B-1)*s+z];for(y=B;y<n+B;++y){D[y+n]=l}u=z;for(y=0;y<=B-4;y+=4,u+=o){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u]=l;m[u+s]=G;m[u+q]=E;m[u+p]=C}for(;y<B;++y,u+=s){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u]=l}}};return{grayscale:function(g,p){var k=g.length|0,q=(k-16)|0;var m=0;var o=4899,h=9617,l=1868;for(var n=0;n<=q;n+=16,m+=4){p[m]=(g[n]*o+g[n+1]*h+g[n+2]*l+8192)>>14;p[m+1]=(g[n+4]*o+g[n+5]*h+g[n+6]*l+8192)>>14;p[m+2]=(g[n+8]*o+g[n+9]*h+g[n+10]*l+8192)>>14;p[m+3]=(g[n+12]*o+g[n+13]*h+g[n+14]*l+8192)>>14}for(;n<k;n+=4,++m){p[m]=(g[n]*o+g[n+1]*h+g[n+2]*l+8192)>>14}},resample:function(l,m,i,k){var j=l.rows,g=l.cols;if(j>k&&g>i){if(l.type&jsfeat.U8_t&&m.type&jsfeat.U8_t&&j*g/(k*i)<256){c(l,m,i,k)}else{f(l,m,i,k)}}},box_blur_gray:function(s,K,n,l){if(typeof l==="undefined"){l=0}var A=s.cols,F=s.rows,t=F<<1,z=A<<1;var E=0,v=0,u=0,m=0;var C=((n<<1)+1)|0;var p=(n+1)|0,I=(p+1)|0;var q=8192;var J=l&jsfeat.BOX_BLUR_NOSCALE?1:(16384/(C*C)+0.5)|0;var D=jsfeat.cache.get_buffer((A*F)<<2);var j=0,H=0,o=0,r=0,k=0;var G=D.i32;var g=s.data;var B=0;for(u=0;u<F;++u){H=u;j=p*g[o];for(E=(o+1)|0,m=(o+n)|0;E<=m;++E){j+=g[E]}r=(o+p)|0;k=o;B=g[k];for(v=0;v<n;++v,H+=F){G[H]=j;j+=g[r]-B;r++}for(;v<A-I;v+=2,H+=t){G[H]=j;j+=g[r]-g[k];G[H+F]=j;j+=g[r+1]-g[k+1];r+=2;k+=2}for(;v<A-p;++v,H+=F){G[H]=j;j+=g[r]-g[k];r++;k++}B=g[r-1];for(;v<A;++v,H+=F){G[H]=j;j+=B-g[k];k++}o+=A}o=0;g=K.data;if(J==1){for(u=0;u<A;++u){H=u;j=p*G[o];for(E=(o+1)|0,m=(o+n)|0;E<=m;++E){j+=G[E]}r=o+p;k=o;B=G[k];for(v=0;v<n;++v,H+=A){g[H]=j;j+=G[r]-B;r++}for(;v<F-I;v+=2,H+=z){g[H]=j;j+=G[r]-G[k];g[H+A]=j;j+=G[r+1]-G[k+1];r+=2;k+=2}for(;v<F-p;++v,H+=A){g[H]=j;j+=G[r]-G[k];r++;k++}B=G[r-1];for(;v<F;++v,H+=A){g[H]=j;j+=B-G[k];k++}o+=F}}else{for(u=0;u<A;++u){H=u;j=p*G[o];for(E=(o+1)|0,m=(o+n)|0;E<=m;++E){j+=G[E]}r=o+p;k=o;B=G[k];for(v=0;v<n;++v,H+=A){g[H]=(j*J+q)>>14;j+=G[r]-B;r++}for(;v<F-I;v+=2,H+=z){g[H]=(j*J+q)>>14;j+=G[r]-G[k];g[H+A]=(j*J+q)>>14;j+=G[r+1]-G[k+1];r+=2;k+=2}for(;v<F-p;++v,H+=A){g[H]=(j*J+q)>>14;j+=G[r]-G[k];r++;k++}B=G[r-1];for(;v<F;++v,H+=A){g[H]=(j*J+q)>>14;j+=B-G[k];k++}o+=F}}jsfeat.cache.put_buffer(D)},gaussian_blur:function(g,s,r,v){if(typeof v==="undefined"){v=0}if(typeof r==="undefined"){r=0}r=r==0?(Math.max(1,(4*v+1-1e-8))*2+1)|0:r;var x=r>>1;var t=g.cols,p=g.rows;var u=g.type,n=u&jsfeat.U8_t;var m=g.data,j=s.data;var k,i,q=(r+Math.max(p,t))|0;var l=jsfeat.cache.get_buffer(q<<2);var o=jsfeat.cache.get_buffer(r<<2);if(n){k=l.u8;i=o.i32}else{if(u&jsfeat.S32_t){k=l.i32;i=o.f32}else{k=l.f32;i=o.f32}}jsfeat.math.get_gaussian_kernel(r,v,i,u);if(n){e(k,m,j,t,p,i,r,x)}else{d(k,m,j,t,p,i,r,x)}jsfeat.cache.put_buffer(l);jsfeat.cache.put_buffer(o)},pyrdown:function(i,o){var r=i.cols,m=i.rows;var l=r>>1,n=m>>1;var q=0,p=0,g=0,t=0,s=0;var k=i.data,j=o.data;for(p=0;p<n;++p){t=g;for(q=0;q<=l-2;q+=2,s+=2,t+=4){j[s]=(k[t]+k[t+1]+k[t+r]+k[t+r+1]+2)>>2;j[s+1]=(k[t+2]+k[t+3]+k[t+r+2]+k[t+r+3]+2)>>2}for(;q<l;++q,++s,t+=2){j[s]=(k[t]+k[t+1]+k[t+r]+k[t+r+1]+2)>>2}g+=r<<1}},scharr_derivatives:function(i,F){var o=i.cols,r=i.rows;var G=o<<1,n=0,l=0,t=0,D,C,B,A,z,v;var u=0,s=0,q=0,g=0;var m,k;var E=i.data;var j=jsfeat.cache.get_buffer((o+2)<<2);var p=jsfeat.cache.get_buffer((o+2)<<2);if(i.type&jsfeat.U8_t||i.type&jsfeat.S32_t){m=j.i32;k=p.i32}else{m=j.f32;k=p.f32}for(;l<r;++l,s+=o){u=((l>0?l-1:1)*o)|0;q=((l<r-1?l+1:r-2)*o)|0;g=(l*G)|0;for(n=0,t=1;n<=o-2;n+=2,t+=2){D=E[u+n],C=E[q+n];m[t]=((D+C)*3+(E[s+n])*10);k[t]=(C-D);D=E[u+n+1],C=E[q+n+1];m[t+1]=((D+C)*3+(E[s+n+1])*10);k[t+1]=(C-D)}for(;n<o;++n,++t){D=E[u+n],C=E[q+n];m[t]=((D+C)*3+(E[s+n])*10);k[t]=(C-D)}n=(o+1)|0;m[0]=m[1];m[n]=m[o];k[0]=k[1];k[n]=k[o];for(n=0;n<=o-4;n+=4){D=k[n+2],C=k[n+1],B=k[n+3],A=k[n+4],z=m[n+2],v=m[n+3];F[g++]=(z-m[n]);F[g++]=((D+k[n])*3+C*10);F[g++]=(v-m[n+1]);F[g++]=((B+C)*3+D*10);F[g++]=((m[n+4]-z));F[g++]=(((A+D)*3+B*10));F[g++]=((m[n+5]-v));F[g++]=(((k[n+5]+B)*3+A*10))}for(;n<o;++n){F[g++]=((m[n+2]-m[n]));F[g++]=(((k[n+2]+k[n])*3+k[n+1]*10))}}jsfeat.cache.put_buffer(j);jsfeat.cache.put_buffer(p)},sobel_derivatives:function(i,F){var o=i.cols,r=i.rows;var G=o<<1,n=0,l=0,t=0,D,C,B,A,z,v;var u=0,s=0,q=0,g=0;var m,k;var E=i.data;var j=jsfeat.cache.get_buffer((o+2)<<2);var p=jsfeat.cache.get_buffer((o+2)<<2);if(i.type&jsfeat.U8_t||i.type&jsfeat.S32_t){m=j.i32;k=p.i32}else{m=j.f32;k=p.f32}for(;l<r;++l,s+=o){u=((l>0?l-1:1)*o)|0;q=((l<r-1?l+1:r-2)*o)|0;g=(l*G)|0;for(n=0,t=1;n<=o-2;n+=2,t+=2){D=E[u+n],C=E[q+n];m[t]=((D+C)+(E[s+n]*2));k[t]=(C-D);D=E[u+n+1],C=E[q+n+1];m[t+1]=((D+C)+(E[s+n+1]*2));k[t+1]=(C-D)}for(;n<o;++n,++t){D=E[u+n],C=E[q+n];m[t]=((D+C)+(E[s+n]*2));k[t]=(C-D)}n=(o+1)|0;m[0]=m[1];m[n]=m[o];k[0]=k[1];k[n]=k[o];for(n=0;n<=o-4;n+=4){D=k[n+2],C=k[n+1],B=k[n+3],A=k[n+4],z=m[n+2],v=m[n+3];F[g++]=(z-m[n]);F[g++]=(D+k[n]+C*2);F[g++]=(v-m[n+1]);F[g++]=(B+C+D*2);F[g++]=(m[n+4]-z);F[g++]=(A+D+B*2);F[g++]=(m[n+5]-v);F[g++]=(k[n+5]+B+A*2)}for(;n<o;++n){F[g++]=(m[n+2]-m[n]);F[g++]=(k[n+2]+k[n]+k[n+1]*2)}}jsfeat.cache.put_buffer(j);jsfeat.cache.put_buffer(p)},compute_integral_image:function(g,l,y,u){var t=g.cols|0,w=g.rows|0,o=g.data;var r=(t+1)|0;var B=0,z=0,h=0,x=0,q=0,n=0,A=0,m=0;if(l&&y){for(;q<r;++q){l[q]=0,y[q]=0}h=(r+1)|0,x=1;for(q=0,m=0;q<w;++q,++h,++x){B=z=0;for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){A=o[m];B+=A,z+=A*A;l[h]=l[x]+B;y[h]=y[x]+z;A=o[m+1];B+=A,z+=A*A;l[h+1]=l[x+1]+B;y[h+1]=y[x+1]+z}for(;n<t;++n,++m,++h,++x){A=o[m];B+=A,z+=A*A;l[h]=l[x]+B;y[h]=y[x]+z}}}else{if(l){for(;q<r;++q){l[q]=0}h=(r+1)|0,x=1;for(q=0,m=0;q<w;++q,++h,++x){B=0;for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){B+=o[m];l[h]=l[x]+B;B+=o[m+1];l[h+1]=l[x+1]+B}for(;n<t;++n,++m,++h,++x){B+=o[m];l[h]=l[x]+B}}}else{if(y){for(;q<r;++q){y[q]=0}h=(r+1)|0,x=1;for(q=0,m=0;q<w;++q,++h,++x){z=0;for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){A=o[m];z+=A*A;y[h]=y[x]+z;A=o[m+1];z+=A*A;y[h+1]=y[x+1]+z}for(;n<t;++n,++m,++h,++x){A=o[m];z+=A*A;y[h]=y[x]+z}}}}}if(u){for(q=0;q<r;++q){u[q]=0}h=(r+1)|0,x=0;for(q=0,m=0;q<w;++q,++h,++x){for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){u[h]=o[m]+u[x];u[h+1]=o[m+1]+u[x+1]}for(;n<t;++n,++m,++h,++x){u[h]=o[m]+u[x]}}h=(r+t)|0,x=t;for(q=0;q<w;++q,h+=r,x+=r){u[h]+=u[x]}for(n=t-1;n>0;--n){h=n+w*r,x=h-r;for(q=w;q>0;--q,h-=r,x-=r){u[h]+=u[x]+u[x+1]}}}},equalize_histogram:function(j,r){var s=j.cols,q=j.rows,o=j.data,l=r.data,t=s*q;var p=0,n=0,k,g;var m=jsfeat.cache.get_buffer(256<<2);k=m.i32;for(;p<256;++p){k[p]=0}for(p=0;p<t;++p){++k[o[p]]}n=k[0];for(p=1;p<256;++p){n=k[p]+=n}g=255/t;for(p=0;p<t;++p){l[p]=(k[o[p]]*g+0.5)|0}jsfeat.cache.put_buffer(m)},canny:function(t,U,D,k){var B=t.cols,K=t.rows,R=t.data,n=U.data;var J=0,G=0,p=0,z=B<<1,Q=0,I=0,M=0,v=0,u=0,C=0;var g=0,T=0;var o=jsfeat.cache.get_buffer((K*z)<<2);var l=jsfeat.cache.get_buffer((3*(B+2))<<2);var m=jsfeat.cache.get_buffer(((K+2)*(B+2))<<2);var r=jsfeat.cache.get_buffer((K*B)<<2);var P=l.i32;var S=m.i32;var q=r.i32;var F=o.i32;var O=1,N=(B+2+1)|0,L=(2*(B+2)+1)|0,A=(B+2)|0,H=(A+1)|0,E=0;this.sobel_derivatives(t,F);if(D>k){J=D;D=k;k=J}J=(3*(B+2))|0;while(--J>=0){P[J]=0}J=((K+2)*(B+2))|0;while(--J>=0){S[J]=0}for(;G<B;++G,p+=2){v=F[p],u=F[p+1];P[N+G]=((v^(v>>31))-(v>>31))+((u^(u>>31))-(u>>31))}for(J=1;J<=K;++J,p+=z){if(J==K){G=L+B;while(--G>=L){P[G]=0}}else{for(G=0;G<B;G++){v=F[p+(G<<1)],u=F[p+(G<<1)+1];P[L+G]=((v^(v>>31))-(v>>31))+((u^(u>>31))-(u>>31))}}Q=(p-z)|0;S[H-1]=0;I=0;for(G=0;G<B;++G,Q+=2){M=P[N+G];if(M>D){v=F[Q];u=F[Q+1];C=v^u;v=((v^(v>>31))-(v>>31))|0;u=((u^(u>>31))-(u>>31))|0;g=v*13573;T=g+((v+v)<<15);u<<=15;if(u<g){if(M>P[N+G-1]&&M>=P[N+G+1]){if(M>k&&!I&&S[H+G-A]!=2){S[H+G]=2;I=1;q[E++]=H+G}else{S[H+G]=1}continue}}else{if(u>T){if(M>P[O+G]&&M>=P[L+G]){if(M>k&&!I&&S[H+G-A]!=2){S[H+G]=2;I=1;q[E++]=H+G}else{S[H+G]=1}continue}}else{C=C<0?-1:1;if(M>P[O+G-C]&&M>P[L+G+C]){if(M>k&&!I&&S[H+G-A]!=2){S[H+G]=2;I=1;q[E++]=H+G}else{S[H+G]=1}continue}}}}S[H+G]=0;I=0}S[H+B]=0;H+=A;G=O;O=N;N=L;L=G}G=H-A-1;for(J=0;J<A;++J,++G){S[G]=0}while(E>0){H=q[--E];H-=A+1;if(S[H]==1){S[H]=2,q[E++]=H}H+=1;if(S[H]==1){S[H]=2,q[E++]=H}H+=1;if(S[H]==1){S[H]=2,q[E++]=H}H+=A;if(S[H]==1){S[H]=2,q[E++]=H}H-=2;if(S[H]==1){S[H]=2,q[E++]=H}H+=A;if(S[H]==1){S[H]=2,q[E++]=H}H+=1;if(S[H]==1){S[H]=2,q[E++]=H}H+=1;if(S[H]==1){S[H]=2,q[E++]=H}}H=A+1;O=0;for(J=0;J<K;++J,H+=A){for(G=0;G<B;++G){n[O++]=(S[H+G]==2)*255}}jsfeat.cache.put_buffer(o);jsfeat.cache.put_buffer(l);jsfeat.cache.put_buffer(m);jsfeat.cache.put_buffer(r)},warp_perspective:function(q,Q,u,P){if(typeof P==="undefined"){P=0}var C=q.cols,F=q.rows,o=Q.cols,D=Q.rows;var K=q.data,l=Q.data;var t=0,s=0,O=0,v=0,G=0,r=0,E=0,w=0,i=0,h=0,g=0,M=0,J=0,k=0,j=0;var B=u[0],A=u[1],z=u[2],N=u[3],L=u[4],I=u[5],p=u[6],n=u[7],m=u[8];for(var H=0;s<D;++s){w=A*s+z,i=L*s+I,h=n*s+m;for(t=0;t<o;++t,++H,w+=B,i+=N,h+=p){g=1/h;r=w*g,E=i*g;v=r|0,G=E|0;if(r>0&&E>0&&v<(C-1)&&G<(F-1)){M=Math.max(r-v,0);J=Math.max(E-G,0);O=C*G+v;k=K[O]+M*(K[O+1]-K[O]);j=K[O+C]+M*(K[O+C+1]-K[O+C]);l[H]=k+J*(j-k)}else{l[H]=P}}}},warp_affine:function(k,J,o,I){if(typeof I==="undefined"){I=0}var t=k.cols,w=k.rows,j=J.cols,u=J.rows;var D=k.data,i=J.data;var n=0,m=0,H=0,p=0,z=0,l=0,v=0,F=0,C=0,h=0,g=0;var s=o[0],r=o[1],q=o[2],G=o[3],E=o[4],B=o[5];for(var A=0;m<u;++m){l=r*m+q;v=E*m+B;for(n=0;n<j;++n,++A,l+=s,v+=G){p=l|0;z=v|0;if(l>0&&v>0&&p<(t-1)&&z<(w-1)){F=Math.max(l-p,0);C=Math.max(v-z,0);H=t*z+p;h=D[H]+F*(D[H+1]-D[H]);g=D[H+t]+F*(D[H+t+1]-D[H+t]);i[A]=h+C*(g-h)}else{i[A]=I}}}}}})();b.imgproc=a})(jsfeat);(function(a){var b=(function(){var h=new Int32Array([0,3,1,3,2,2,3,1,3,0,3,-1,2,-2,1,-3,0,-3,-1,-3,-2,-2,-3,-1,-3,0,-3,1,-2,2,-1,3]);var f=new Uint8Array(512);var e=new Int32Array(25);var i=new Int32Array(25);var d=function(l,n,o){var j=0;var m=h;for(;j<o;++j){l[j]=m[j<<1]+m[(j<<1)+1]*n}for(;j<25;++j){l[j]=l[j-o]}},g=function(j,n,l,r,p){var q=25,o=0,w=j[n];var m=p,t=0,u=0,s=0;for(;o<q;++o){r[o]=w-j[n+l[o]]}for(o=0;o<16;o+=2){t=Math.min(r[o+1],r[o+2]);t=Math.min(t,r[o+3]);if(t<=m){continue}t=Math.min(t,r[o+4]);t=Math.min(t,r[o+5]);t=Math.min(t,r[o+6]);t=Math.min(t,r[o+7]);t=Math.min(t,r[o+8]);m=Math.max(m,Math.min(t,r[o]));m=Math.max(m,Math.min(t,r[o+9]))}u=-m;for(o=0;o<16;o+=2){s=Math.max(r[o+1],r[o+2]);s=Math.max(s,r[o+3]);s=Math.max(s,r[o+4]);s=Math.max(s,r[o+5]);if(s>=u){continue}s=Math.max(s,r[o+6]);s=Math.max(s,r[o+7]);s=Math.max(s,r[o+8]);u=Math.min(u,Math.max(s,r[o]));u=Math.min(u,Math.max(s,r[o+9]))}return -u-1};var c=20;return{set_threshold:function(j){c=Math.min(Math.max(j,0),255);for(var k=-255;k<=255;++k){f[(k+255)]=(k<-c?1:(k>c?2:0))}return c},detect:function(L,H,D){if(typeof D==="undefined"){D=3}var A=8,t=25;var u=L.data,X=L.cols,ar=L.rows;var ap=0,an=0,al=0,E=0,W=0,aq=0;var B=jsfeat.cache.get_buffer(3*X);var O=jsfeat.cache.get_buffer(((X+1)*3)<<2);var I=B.u8;var F=O.i32;var M=e;var J=i;var y=Math.max(3,D);var Z=Math.min((ar-2),(ar-D));var z=Math.max(3,D);var aa=Math.min((X-3),(X-D));var ah=0,P=0,C;var Q=g;var G=f;var p=c;var Y=0,ao=0,au=0,aw=0,U=0,V=0,av=0,R=0,at=0;var T=0,S=0,o=0;d(M,X,16);var am=M[0];var ak=M[1];var aj=M[2];var ai=M[3];var ag=M[4];var af=M[5];var ae=M[6];var ad=M[7];var ac=M[8];var ab=M[9];var s=M[10];var r=M[11];var q=M[12];var n=M[13];var m=M[14];var l=M[15];for(ap=0;ap<X*3;++ap){I[ap]=0}for(ap=y;ap<Z;++ap){av=((ap*X)+z)|0;aq=(ap-3)%3;V=(aq*X)|0;U=(aq*(X+1))|0;for(an=0;an<X;++an){I[V+an]=0}aw=0;if(ap<(Z-1)){an=z;for(;an<aa;++an,++av){Y=u[av];ao=(-Y+255);au=(G[ao+u[av+am]]|G[ao+u[av+ac]]);if(au==0){continue}au&=(G[ao+u[av+aj]]|G[ao+u[av+s]]);au&=(G[ao+u[av+ag]]|G[ao+u[av+q]]);au&=(G[ao+u[av+ae]]|G[ao+u[av+m]]);if(au==0){continue}au&=(G[ao+u[av+ak]]|G[ao+u[av+ab]]);au&=(G[ao+u[av+ai]]|G[ao+u[av+r]]);au&=(G[ao+u[av+af]]|G[ao+u[av+n]]);au&=(G[ao+u[av+ad]]|G[ao+u[av+l]]);if(au&1){E=(Y-p);ah=0;for(al=0;al<t;++al){W=u[(av+M[al])];if(W<E){++ah;if(ah>A){++aw;F[U+aw]=an;I[V+an]=Q(u,av,M,J,p);break}}else{ah=0}}}if(au&2){E=(Y+p);ah=0;for(al=0;al<t;++al){W=u[(av+M[al])];if(W>E){++ah;if(ah>A){++aw;F[U+aw]=an;I[V+an]=Q(u,av,M,J,p);break}}else{ah=0}}}}}F[U+X]=aw;if(ap==y){continue}aq=(ap-4+3)%3;R=(aq*X)|0;U=(aq*(X+1))|0;aq=(ap-5+3)%3;at=(aq*X)|0;aw=F[U+X];for(al=0;al<aw;++al){an=F[U+al];T=(an+1)|0;S=(an-1)|0;o=I[R+an];if((o>I[R+T]&&o>I[R+S]&&o>I[at+S]&&o>I[at+an]&&o>I[at+T]&&o>I[V+S]&&o>I[V+an]&&o>I[V+T])){C=H[P];C.x=an,C.y=(ap-1),C.score=o;P++}}}jsfeat.cache.put_buffer(B);jsfeat.cache.put_buffer(O);return P}}})();a.fast_corners=b;b.set_threshold(20)})(jsfeat);(function(b){var a=(function(){var d=function(e,j,m,i,n,g){var k=0,l=0,f=(n*m)|0,o=f;for(k=n;k<i-n;++k,f+=m,o=f){for(l=m-n;l>=n;--l){j[o]=-4*e[o]+e[o+n]+e[o-n]+e[o+g]+e[o-g];++o}}};var c=function(e,f,k,m,g,l,h){var o=-2*e[f]+e[f+m]+e[f-m];var i=-2*e[f]+e[f+g]+e[f-g];var n=e[f+l]+e[f-l]-e[f+h]-e[f-h];var j=(Math.sqrt(((o-i)*(o-i)+4*n*n)))|0;return Math.min(Math.abs(k-j),Math.abs(-(k+j)))};return{laplacian_threshold:30,min_eigen_value_threshold:25,detect:function(l,u){var o=0,n=0;var p=l.cols,v=l.rows,q=l.data;var C=5,f=(5*p)|0;var B=(3+3*p)|0,g=(3-3*p)|0;var e=jsfeat.cache.get_buffer((p*v)<<2);var j=e.i32;var i=0,k=0,m=0,r=0,t;var s=0;var A=this.laplacian_threshold;var z=this.min_eigen_value_threshold;o=p*v;while(--o>=0){j[o]=0}d(q,j,p,v,C,f);k=(p+1)|0;for(n=1;n<v-1;++n,k+=p){for(o=1,m=k;o<p-1;++o,++m){i=j[m];if((i<-A&&i<j[m-1]&&i<j[m+1]&&i<j[m-p]&&i<j[m+p]&&i<j[m-p-1]&&i<j[m+p-1]&&i<j[m-p+1]&&i<j[m+p+1])||(i>A&&i>j[m-1]&&i>j[m+1]&&i>j[m-p]&&i>j[m+p]&&i>j[m-p-1]&&i>j[m+p-1]&&i>j[m-p+1]&&i>j[m+p+1])){r=c(q,m,i,C,f,B,g);if(r>z){t=u[s];t.x=o,t.y=n,t.score=r;++s;++o,++m}}}}jsfeat.cache.put_buffer(e);return s}}})();b.yape06=a})(jsfeat);(function(a){var b=(function(){var d=function(l,m,k){var j=0;var h,n;h=k;for(n=0;n<h;n++,j++){h=(Math.sqrt((k*k-n*n))+0.5)|0;m[j]=(h+l*n)}for(h--;h<n&&h>=0;h--,j++){n=(Math.sqrt((k*k-h*h))+0.5)|0;m[j]=(h+l*n)}for(;-h<n;h--,j++){n=(Math.sqrt((k*k-h*h))+0.5)|0;m[j]=(h+l*n)}for(n--;n>=0;n--,j++){h=(-Math.sqrt((k*k-n*n))-0.5)|0;m[j]=(h+l*n)}for(;n>h;n--,j++){h=(-Math.sqrt((k*k-n*n))-0.5)|0;m[j]=(h+l*n)}for(h++;h<=0;h++,j++){n=(-Math.sqrt((k*k-h*h))-0.5)|0;m[j]=(h+l*n)}for(;h<-n;h++,j++){n=(-Math.sqrt((k*k-h*h))-0.5)|0;m[j]=(h+l*n)}for(n++;n<0;n++,j++){h=(Math.sqrt((k*k-n*n))+0.5)|0;m[j]=(h+l*n)}m[j]=m[0];m[j+1]=m[1];return j};var g=function(h,j,i){var k=0;if(h[j+1]!=0){k++}if(h[j-1]!=0){k++}if(h[j+i]!=0){k++}if(h[j+i+1]!=0){k++}if(h[j+i-1]!=0){k++}if(h[j-i]!=0){k++}if(h[j-i+1]!=0){k++}if(h[j-i-1]!=0){k++}return k};var c=function(l,m,i,k,j){var h,n;if(i>0){m-=k*j;for(n=-j;n<=j;++n){for(h=-j;h<=j;++h){if(l[m+h]>i){return false}}m+=k}}else{m-=k*j;for(n=-j;n<=j;++n){for(h=-j;h<=j;++h){if(l[m+h]<i){return false}}m+=k}}return true};var e=function(s,r,m,u,p,i,l,n){var k=0;var q=0,o=(l-1)|0;var j=0,w=0,v=0,t=0;var h=0;j=s[r+i[q]];if((j<=p)){if((j>=u)){w=s[r+i[o]];if((w<=p)){if((w>=u)){m[r]=0;return}else{o++;v=s[r+i[o]];if((v>p)){o++;t=s[r+i[o]];if((t>p)){h=3}else{if((t<u)){h=6}else{m[r]=0;return}}}else{o++;t=s[r+i[o]];if((t>p)){h=7}else{if((t<u)){h=2}else{m[r]=0;return}}}}}else{o++;v=s[r+i[o]];if((v>p)){o++;t=s[r+i[o]];if((t>p)){h=3}else{if((t<u)){h=6}else{m[r]=0;return}}}else{if((v<u)){o++;t=s[r+i[o]];if((t>p)){h=7}else{if((t<u)){h=2}else{m[r]=0;return}}}else{m[r]=0;return}}}}else{w=s[r+i[o]];if((w>p)){m[r]=0;return}o++;v=s[r+i[o]];if((v>p)){m[r]=0;return}o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}h=1}}else{w=s[r+i[o]];if((w<u)){m[r]=0;return}o++;v=s[r+i[o]];if((v<u)){m[r]=0;return}o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}h=0}for(q=1;q<=l;q++){j=s[r+i[q]];switch(h){case 0:if((j>p)){v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=0;break}if((j<u)){if((v>p)){m[r]=0;return}if((t>p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=8;break}if((v<=p)){m[r]=0;return}if((t<=p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 1:if((j<u)){v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=1;break}if((j>p)){if((v<u)){m[r]=0;return}if((t<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=9;break}if((v>=u)){m[r]=0;return}if((t>=u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){k-=j+v;h=2;break}if((t>p)){k-=j+v;h=7;break}m[r]=0;return;case 2:if((j>p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((j<u)){if((t>p)){m[r]=0;return}k-=j+v;h=4;break}if((t>p)){k-=j+v;h=7;break}if((t<u)){k-=j+v;h=2;break}m[r]=0;return;case 3:if((j<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((j>p)){if((t<u)){m[r]=0;return}k-=j+v;h=5;break}if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 4:if((j>p)){m[r]=0;return}if((j<u)){v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=1;break}if((t>=u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){k-=j+v;h=2;break}if((t>p)){k-=j+v;h=7;break}m[r]=0;return;case 5:if((j<u)){m[r]=0;return}if((j>p)){v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=0;break}if((t<=p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 7:if((j>p)){m[r]=0;return}if((j<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 6:if((j>p)){m[r]=0;return}if((j<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){k-=j+v;h=2;break}if((t>p)){k-=j+v;h=7;break}m[r]=0;return;case 8:if((j>p)){if((t<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=9;break}if((j<u)){v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=1;break}m[r]=0;return;case 9:if((j<u)){if((t>p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=8;break}if((j>p)){v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=0;break}m[r]=0;return;default:break}}m[r]=(k+n*s[r])};var f=(function(){function h(i,j,k){this.dirs=new Int32Array(1024);this.dirs_count=d(i,this.dirs,k)|0;this.scores=new Int32Array(i*j);this.radius=k|0}return h})();return{level_tables:[],tau:7,init:function(m,j,h,l){if(typeof l==="undefined"){l=1}var k;h=Math.min(h,7);h=Math.max(h,3);for(k=0;k<l;++k){this.level_tables[k]=new f(m>>k,j>>k,h)}},detect:function(k,J,G){if(typeof G==="undefined"){G=4}var A=this.level_tables[0];var i=A.radius|0,q=(i-1)|0;var m=A.dirs;var n=A.dirs_count|0;var v=n>>1;var O=k.data,u=k.cols|0,K=k.rows|0,N=u>>1;var H=A.scores;var s=0,r=0,j=0,l=0,o=0,p=0,z=0,I=0;var F=this.tau|0;var D=0,E;var C=Math.max(i+1,G)|0;var B=Math.max(i+1,G)|0;var M=Math.min(u-i-2,u-G)|0;var L=Math.min(K-i-2,K-G)|0;j=(B*u+C)|0;for(r=B;r<L;++r,j+=u){for(s=C,l=j;s<M;++s,++l){o=O[l]+F,p=O[l]-F;if(p<O[l+i]&&O[l+i]<o&&p<O[l-i]&&O[l-i]<o){H[l]=0}else{e(O,l,H,p,o,m,v,n)}}}j=(B*u+C)|0;for(r=B;r<L;++r,j+=u){for(s=C,l=j;s<M;++s,++l){I=H[l];z=Math.abs(I);if(z<5){++s,++l}else{if(g(H,l,u)>=3&&c(H,l,I,N,i)){E=J[D];E.x=s,E.y=r,E.score=z;++D;s+=q,l+=q}}}}return D}}})();a.yape=b})(jsfeat);(function(b){var a=(function(){var c=jsfeat.imgproc.scharr_derivatives;return{track:function(n,u,ao,aK,k,N,R,K,f,q){if(typeof R==="undefined"){R=30}if(typeof K==="undefined"){K=new Uint8Array(k)}if(typeof f==="undefined"){f=0.01}if(typeof q==="undefined"){q=0.0001}var e=(N-1)*0.5;var h=(N*N)|0;var Z=h<<1;var r=n.data,S=u.data;var g=r[0].data,F=S[0].data;var M=r[0].cols,aA=r[0].rows,ax=0,aG=0;var ay=jsfeat.cache.get_buffer(h<<2);var s=jsfeat.cache.get_buffer(Z<<2);var t=jsfeat.cache.get_buffer((aA*(M<<1))<<2);var w=ay.i32;var ab=s.i32;var az=t.i32;var aa=0,I=0,aL=0,ar=0,aH=0,at=0;var al=0,aE=0,aC=0,ae=0,ad=0;var E=0,z=0,X=0,V=0;var p=0,o=0,aD=0,aB=0;var Q=0,P=0,J=0,H=0,ah=0,aj=0,l=0;var d=0,A=0,O=0;var U=0,T=0,av=0,au=0;var ag=14;var C=14;var Y=C-5;var aw=(1<<((Y)-1));var ac=(1<<ag);var m=(1<<((C)-1));var W=1/(1<<20);var aJ=0,aI=0,aq=0,ap=0,ak=0,v=0,B=0;var an=0,am=0,af=0,ai=0,aF=0;var G=1.1920929e-7;f*=f;for(;Q<k;++Q){K[Q]=1}var L=(n.levels-1)|0;ah=L;for(;ah>=0;--ah){al=(1/(1<<ah));ax=M>>ah;aG=aA>>ah;aa=ax<<1;g=r[ah].data;F=S[ah].data;A=(ax-N)|0;O=(aG-N)|0;c(r[ah],az);for(aj=0;aj<k;++aj){Q=aj<<1;P=Q+1;aE=ao[Q]*al;aC=ao[P]*al;if(ah==L){ae=aE;ad=aC}else{ae=aK[Q]*2;ad=aK[P]*2}aK[Q]=ae;aK[P]=ad;aE-=e;aC-=e;p=aE|0;o=aC|0;J=(p<=d)|(p>=A)|(o<=d)|(o>=O);if(J!=0){if(ah==0){K[aj]=0}continue}U=aE-p;T=aC-o;aJ=(((1-U)*(1-T)*ac)+0.5)|0;aI=((U*(1-T)*ac)+0.5)|0;aq=(((1-U)*T*ac)+0.5)|0;ap=(ac-aJ-aI-aq);an=0,am=0,af=0;for(H=0;H<N;++H){I=((H+o)*ax+p)|0;aL=I<<1;ar=(H*N)|0;aH=ar<<1;for(J=0;J<N;++J,++I,++ar,aL+=2){ak=((g[I])*aJ+(g[I+1])*aI+(g[I+ax])*aq+(g[I+ax+1])*ap);ak=(((ak)+aw)>>(Y));v=(az[aL]*aJ+az[aL+2]*aI+az[aL+aa]*aq+az[aL+aa+2]*ap);v=(((v)+m)>>(C));B=(az[aL+1]*aJ+az[aL+3]*aI+az[aL+aa+1]*aq+az[aL+aa+3]*ap);B=(((B)+m)>>(C));w[ar]=ak;ab[aH++]=v;ab[aH++]=B;an+=v*v;am+=v*B;af+=B*B}}an*=W;am*=W;af*=W;ai=an*af-am*am;aF=(af+an-Math.sqrt((an-af)*(an-af)+4*am*am))/Z;if(aF<q||ai<G){if(ah==0){K[aj]=0}continue}ai=1/ai;ae-=e;ad-=e;E=0;z=0;for(l=0;l<R;++l){aD=ae|0;aB=ad|0;J=(aD<=d)|(aD>=A)|(aB<=d)|(aB>=O);if(J!=0){if(ah==0){K[aj]=0}break}U=ae-aD;T=ad-aB;aJ=(((1-U)*(1-T)*ac)+0.5)|0;aI=((U*(1-T)*ac)+0.5)|0;aq=(((1-U)*T*ac)+0.5)|0;ap=(ac-aJ-aI-aq);av=0,au=0;for(H=0;H<N;++H){at=((H+aB)*ax+aD)|0;ar=(H*N)|0;aH=ar<<1;for(J=0;J<N;++J,++at,++ar){ak=((F[at])*aJ+(F[at+1])*aI+(F[at+ax])*aq+(F[at+ax+1])*ap);ak=(((ak)+aw)>>(Y));ak=(ak-w[ar]);av+=ak*ab[aH++];au+=ak*ab[aH++]}}av*=W;au*=W;X=((am*au-af*av)*ai);V=((am*av-an*au)*ai);ae+=X;ad+=V;aK[Q]=ae+e;aK[P]=ad+e;if(X*X+V*V<=f){break}if(l>0&&Math.abs(X+E)<0.01&&Math.abs(V+z)<0.01){aK[Q]-=X*0.5;aK[P]-=V*0.5;break}E=X;z=V}}}jsfeat.cache.put_buffer(ay);jsfeat.cache.put_buffer(s);jsfeat.cache.put_buffer(t)}}})();b.optical_flow_lk=a})(jsfeat);(function(b){var a=(function(){var c=function(e,d){var f=(e.width*0.25+0.5)|0;return d.x<=e.x+f&&d.x>=e.x-f&&d.y<=e.y+f&&d.y>=e.y-f&&d.width<=(e.width*1.5+0.5)|0&&(d.width*1.5+0.5)|0>=e.width};return{edges_density:0.07,detect_single_scale:function(E,ad,af,q,d,f,D,B){var z=(B.size[0]*D)|0,N=(B.size[1]*D)|0,V=(0.5*D+1.5)|0,U=V;var Z,X,W,Q,O,T=(d-z)|0,R=(f-N)|0;var H=(d+1)|0,w,p,r,S;var e=1/(z*N);var t,o,l,u,s,ae,A,g=true,L,h,n,G,m;var M,K,J,I,v,C;var ac=0,ab=z,aa=N*H,Y=aa+z;var F=((z*N)*255*this.edges_density)|0;var P=[];for(O=0;O<R;O+=U){ac=O*H;for(Q=0;Q<T;Q+=V,ac+=V){p=E[ac]-E[ac+ab]-E[ac+aa]+E[ac+Y];if(q){w=(q[ac]-q[ac+ab]-q[ac+aa]+q[ac+Y]);if(w<F||p<20){Q+=V,ac+=V;continue}}p*=e;r=(ad[ac]-ad[ac+ab]-ad[ac+aa]+ad[ac+Y])*e-p*p;S=r>0?Math.sqrt(r):1;t=B.complexClassifiers;s=t.length;g=true;for(Z=0;Z<s;++Z){o=t[Z];L=o.threshold;l=o.simpleClassifiers;ae=l.length;h=0;for(X=0;X<ae;++X){u=l[X];n=0;m=u.features;A=m.length;if(u.tilted===1){for(W=0;W<A;++W){G=m[W];M=~~(Q+G[0]*D)+~~(O+G[1]*D)*H;v=~~(G[2]*D);C=~~(G[3]*D);K=v*H;J=C*H;n+=(af[M]-af[M+v+K]-af[M-C+J]+af[M+v-C+K+J])*G[4]}}else{for(W=0;W<A;++W){G=m[W];M=~~(Q+G[0]*D)+~~(O+G[1]*D)*H;v=~~(G[2]*D);C=~~(G[3]*D);J=C*H;n+=(E[M]-E[M+v]-E[M+J]+E[M+J+v])*G[4]}}h+=(n*e<u.threshold*S)?u.left_val:u.right_val}if(h<L){g=false;break}}if(g){P.push({x:Q,y:O,width:z,height:N,neighbor:1,confidence:h});Q+=V,ac+=V}}}return P},detect_multi_scale:function(e,m,f,h,d,n,i,g,k){if(typeof g==="undefined"){g=1.2}if(typeof k==="undefined"){k=1}var o=i.size[0];var j=i.size[1];var l=[];while(k*o<d&&k*j<n){l=l.concat(this.detect_single_scale(e,m,f,h,d,n,k,i));k*=g}return l},group_rectangles:function(g,l){if(typeof l==="undefined"){l=1}var y,v,q=g.length;var r=[];for(y=0;y<q;++y){r[y]={parent:-1,element:g[y],rank:0}}for(y=0;y<q;++y){if(!r[y].element){continue}var t=y;while(r[t].parent!=-1){t=r[t].parent}for(v=0;v<q;++v){if(y!=v&&r[v].element&&c(r[y].element,r[v].element)){var s=v;while(r[s].parent!=-1){s=r[s].parent}if(s!=t){if(r[t].rank>r[s].rank){r[s].parent=t}else{r[t].parent=s;if(r[t].rank==r[s].rank){r[s].rank++}t=s}var A,d=v;while(r[d].parent!=-1){A=d;d=r[d].parent;r[A].parent=t}d=y;while(r[d].parent!=-1){A=d;d=r[d].parent;r[A].parent=t}}}}}var w=[];var o=0;for(y=0;y<q;y++){v=-1;var e=y;if(r[e].element){while(r[e].parent!=-1){e=r[e].parent}if(r[e].rank>=0){r[e].rank=~o++}v=~r[e].rank}w[y]=v}var m=[];for(y=0;y<o+1;++y){m[y]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0}}for(y=0;y<q;++y){var z=g[y];var k=w[y];if(m[k].neighbors==0){m[k].confidence=z.confidence}++m[k].neighbors;m[k].x+=z.x;m[k].y+=z.y;m[k].width+=z.width;m[k].height+=z.height;m[k].confidence=Math.max(m[k].confidence,z.confidence)}var h=[];for(y=0;y<o;++y){q=m[y].neighbors;if(q>=l){h.push({x:(m[y].x*2+q)/(2*q),y:(m[y].y*2+q)/(2*q),width:(m[y].width*2+q)/(2*q),height:(m[y].height*2+q)/(2*q),neighbors:m[y].neighbors,confidence:m[y].confidence})}}var p=[];q=h.length;for(y=0;y<q;++y){var z=h[y];var x=true;for(v=0;v<q;++v){var u=h[v];var f=(u.width*0.25+0.5)|0;if(y!=v&&z.x>=u.x-f&&z.y>=u.y-f&&z.x+z.width<=u.x+u.width+f&&z.y+z.height<=u.y+u.height+f&&(u.neighbors>Math.max(3,z.neighbors)||z.neighbors<3)){x=false;break}}if(x){p.push(z)}}return p}}})();b.haar=a})(jsfeat);(function(a){var b=(function(){var c=function(e,d){var f=(e.width*0.25+0.5)|0;return d.x<=e.x+f&&d.x>=e.x-f&&d.y<=e.y+f&&d.y>=e.y-f&&d.width<=(e.width*1.5+0.5)|0&&(d.width*1.5+0.5)|0>=e.width};return{interval:4,scale:1.1486,next:5,scale_to:1,prepare_cascade:function(f){var l=f.stage_classifier.length;for(var g=0;g<l;g++){var i=f.stage_classifier[g].feature;var d=f.stage_classifier[g].count;var h=f.stage_classifier[g]._feature=new Array(d);for(var e=0;e<d;e++){h[e]={size:i[e].size,px:new Array(i[e].size),pz:new Array(i[e].size),nx:new Array(i[e].size),nz:new Array(i[e].size)}}}},build_pyramid:function(e,p,x,t,m){if(typeof t==="undefined"){t=4}if(typeof m==="undefined"){m=true}if(m){var l=e.getContext("2d");var n=e.width*e.height;var v=l.getImageData(0,0,e.width,e.height);var k=v.data;var o=new Uint32Array(k.buffer);var j=jsfeat.cache.get_buffer(n);var f=j.u8;jsfeat.imgproc.grayscale(k,f);var h=(255<<24);var r=n,d=0;while(--r>=0){d=f[r];o[r]=h|(d<<16)|(d<<8)|d}l.putImageData(v,0,0);jsfeat.cache.put_buffer(j)}this.interval=t;this.scale=Math.pow(2,1/(this.interval+1));this.next=(this.interval+1)|0;this.scale_to=(Math.log(Math.min(e.width/p,e.height/x))/Math.log(this.scale))|0;var q=document.createElement("canvas");q.width=e.width;q.height=e.height;var s=q.getContext("2d");var w=new Array((this.scale_to+this.next*2)*4);w[0]={width:e.width,height:e.height,data:e.getContext("2d").getImageData(0,0,e.width,e.height).data};var u,g;for(r=1;r<=this.interval;++r){u=(e.width/Math.pow(this.scale,r))|0;g=(e.height/Math.pow(this.scale,r))|0;s.drawImage(e,0,0,e.width,e.height,0,0,u,g);w[r*4]={width:u,height:g,data:s.getImageData(0,0,u,g).data}}for(r=this.next;r<this.scale_to+this.next*2;++r){u=w[r*4-this.next*4].width>>1;g=w[r*4-this.next*4].height>>1;s.drawImage(e,0,0,e.width,e.height,0,0,u,g);w[r*4]={width:u,height:g,data:s.getImageData(0,0,u,g).data}}for(r=this.next*2;r<this.scale_to+this.next*2;++r){u=w[r*4-this.next*4].width>>1;g=w[r*4-this.next*4].height>>1;s.drawImage(e,1,0,e.width-1,e.height,0,0,u-2,g);w[r*4+1]={width:u,height:g,data:s.getImageData(0,0,u,g).data};s.drawImage(e,0,1,e.width,e.height-1,0,0,u,g-2);w[r*4+2]={width:u,height:g,data:s.getImageData(0,0,u,g).data};s.drawImage(e,1,1,e.width-1,e.height-1,0,0,u-2,g-2);w[r*4+3]={width:u,height:g,data:s.getImageData(0,0,u,g).data}}return w},detect:function(z,H){var g=this.interval;var J=this.scale;var l=this.next;var h=this.scale_to;var X=0,W=0,V=0,S=0,O=0,N=0,Q=0,w=0,F=0,E=0,R=0,Z=0,I=0,Y=0,t=0,U=0,e=0;var B=0,T,M,A,D,C,K=true,m=true;var u=1,s=1;var r=[0,1,0,1];var o=[0,0,1,1];var G=[];var v=[],d=[0,0,0];var L=[0,0,0];var P=[0,0,0];for(X=0;X<h;X++){t=(X<<2);U=z[t+(l<<3)].width-(H.width>>2);e=z[t+(l<<3)].height-(H.height>>2);L[0]=z[t].width<<2;L[1]=z[t+(l<<2)].width<<2;L[2]=z[t+(l<<3)].width<<2;P[0]=(z[t].width<<4)-(U<<4);P[1]=(z[t+(l<<2)].width<<3)-(U<<3);P[2]=(z[t+(l<<3)].width<<2)-(U<<2);w=H.stage_classifier.length;for(W=0;W<w;W++){A=H.stage_classifier[W].feature;M=H.stage_classifier[W]._feature;F=H.stage_classifier[W].count;for(V=0;V<F;V++){D=M[V];C=A[V];E=C.size|0;for(Q=0;Q<E;Q++){D.px[Q]=(C.px[Q]<<2)+C.py[Q]*L[C.pz[Q]];D.pz[Q]=C.pz[Q];D.nx[Q]=(C.nx[Q]<<2)+C.ny[Q]*L[C.nz[Q]];D.nz[Q]=C.nz[Q]}}}v[0]=z[t].data;v[1]=z[t+(l<<2)].data;for(Q=0;Q<4;Q++){v[2]=z[t+(l<<3)+Q].data;d[0]=(r[Q]<<3)+o[Q]*(z[t].width<<3);d[1]=(r[Q]<<2)+o[Q]*(z[t+(l<<2)].width<<2);d[2]=0;for(N=0;N<e;N++){for(O=0;O<U;O++){B=0;K=true;w=H.stage_classifier.length;for(W=0;W<w;W++){B=0;T=H.stage_classifier[W].alpha;M=H.stage_classifier[W]._feature;F=H.stage_classifier[W].count;for(V=0;V<F;V++){D=M[V];Z=v[D.pz[0]][d[D.pz[0]]+D.px[0]];I=v[D.nz[0]][d[D.nz[0]]+D.nx[0]];if(Z<=I){B+=T[V<<1]}else{m=true;E=D.size;for(Y=0;Y<E;Y++){if(D.pz[Y]>=0){R=v[D.pz[Y]][d[D.pz[Y]]+D.px[Y]];if(R<Z){if(R<=I){m=false;break}Z=R}}if(D.nz[Y]>=0){S=v[D.nz[Y]][d[D.nz[Y]]+D.nx[Y]];if(S>I){if(Z<=S){m=false;break}I=S}}}B+=(m)?T[(V<<1)+1]:T[V<<1]}}if(B<H.stage_classifier[W].threshold){K=false;break}}if(K){G.push({x:(O*4+r[Q]*2)*u,y:(N*4+o[Q]*2)*s,width:H.width*u,height:H.height*s,neighbor:1,confidence:B})}d[0]+=16;d[1]+=8;d[2]+=4}d[0]+=P[0];d[1]+=P[1];d[2]+=P[2]}}u*=J;s*=J}return G},group_rectangles:function(g,l){if(typeof l==="undefined"){l=1}var y,v,q=g.length;var r=[];for(y=0;y<q;++y){r[y]={parent:-1,element:g[y],rank:0}}for(y=0;y<q;++y){if(!r[y].element){continue}var t=y;while(r[t].parent!=-1){t=r[t].parent}for(v=0;v<q;++v){if(y!=v&&r[v].element&&c(r[y].element,r[v].element)){var s=v;while(r[s].parent!=-1){s=r[s].parent}if(s!=t){if(r[t].rank>r[s].rank){r[s].parent=t}else{r[t].parent=s;if(r[t].rank==r[s].rank){r[s].rank++}t=s}var A,d=v;while(r[d].parent!=-1){A=d;d=r[d].parent;r[A].parent=t}d=y;while(r[d].parent!=-1){A=d;d=r[d].parent;r[A].parent=t}}}}}var w=[];var o=0;for(y=0;y<q;y++){v=-1;var e=y;if(r[e].element){while(r[e].parent!=-1){e=r[e].parent}if(r[e].rank>=0){r[e].rank=~o++}v=~r[e].rank}w[y]=v}var m=[];for(y=0;y<o+1;++y){m[y]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0}}for(y=0;y<q;++y){var z=g[y];var k=w[y];if(m[k].neighbors==0){m[k].confidence=z.confidence}++m[k].neighbors;m[k].x+=z.x;m[k].y+=z.y;m[k].width+=z.width;m[k].height+=z.height;m[k].confidence=Math.max(m[k].confidence,z.confidence)}var h=[];for(y=0;y<o;++y){q=m[y].neighbors;if(q>=l){h.push({x:(m[y].x*2+q)/(2*q),y:(m[y].y*2+q)/(2*q),width:(m[y].width*2+q)/(2*q),height:(m[y].height*2+q)/(2*q),neighbors:m[y].neighbors,confidence:m[y].confidence})}}var p=[];q=h.length;for(y=0;y<q;++y){var z=h[y];var x=true;for(v=0;v<q;++v){var u=h[v];var f=(u.width*0.25+0.5)|0;if(y!=v&&z.x>=u.x-f&&z.y>=u.y-f&&z.x+z.width<=u.x+u.width+f&&z.y+z.height<=u.y+u.height+f&&(u.neighbors>Math.max(3,z.neighbors)||z.neighbors<3)){x=false;break}}if(x){p.push(z)}}return p}}})();a.bbf=b})(jsfeat);
/**
 * this cascade is derived from https://github.com/mtschirs/js-objectdetect implementation
 * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t
 */
(function(global) {
  global.frontalface = {complexClassifiers:[{simpleClassifiers:[{features:[[3,7,14,4,-1.],[3,9,14,2,2.]],threshold:4.0141958743333817e-003,right_val:0.8378106951713562,left_val:0.0337941907346249},{features:[[1,2,18,4,-1.],[7,2,6,4,3.]],threshold:0.0151513395830989,right_val:0.7488812208175659,left_val:0.1514132022857666},{features:[[1,7,15,9,-1.],[1,10,15,3,3.]],threshold:4.2109931819140911e-003,right_val:0.6374819874763489,left_val:0.0900492817163467}],threshold:0.8226894140243530},{simpleClassifiers:[{features:[[5,6,2,6,-1.],[5,9,2,3,2.]],threshold:1.6227109590545297e-003,right_val:0.7110946178436279,left_val:0.0693085864186287},{features:[[7,5,6,3,-1.],[9,5,2,3,3.]],threshold:2.2906649392098188e-003,right_val:0.6668692231178284,left_val:0.1795803010463715},{features:[[4,0,12,9,-1.],[4,3,12,3,3.]],threshold:5.0025708042085171e-003,right_val:0.6554006934165955,left_val:0.1693672984838486},{features:[[6,9,10,8,-1.],[6,13,10,4,2.]],threshold:7.9659894108772278e-003,right_val:0.0914145186543465,left_val:0.5866332054138184},{features:[[3,6,14,8,-1.],[3,10,14,4,2.]],threshold:-3.5227010957896709e-003,right_val:0.6031895875930786,left_val:0.1413166970014572},{features:[[14,1,6,10,-1.],[14,1,3,10,2.]],threshold:0.0366676896810532,right_val:0.7920318245887756,left_val:0.3675672113895416},{features:[[7,8,5,12,-1.],[7,12,5,4,3.]],threshold:9.3361474573612213e-003,right_val:0.2088509947061539,left_val:0.6161385774612427},{features:[[1,1,18,3,-1.],[7,1,6,3,3.]],threshold:8.6961314082145691e-003,right_val:0.6360273957252502,left_val:0.2836230993270874},{features:[[1,8,17,2,-1.],[1,9,17,1,2.]],threshold:1.1488880263641477e-003,right_val:0.5800700783729553,left_val:0.2223580926656723},{features:[[16,6,4,2,-1.],[16,7,4,1,2.]],threshold:-2.1484689787030220e-003,right_val:0.5787054896354675,left_val:0.2406464070081711},{features:[[5,17,2,2,-1.],[5,18,2,1,2.]],threshold:2.1219060290604830e-003,right_val:0.1362237036228180,left_val:0.5559654831886292},{features:[[14,2,6,12,-1.],[14,2,3,12,2.]],threshold:-0.0939491465687752,right_val:0.4717740118503571,left_val:0.8502737283706665},{features:[[4,0,4,12,-1.],[4,0,2,6,2.],[6,6,2,6,2.]],threshold:1.3777789426967502e-003,right_val:0.2834529876708984,left_val:0.5993673801422119},{features:[[2,11,18,8,-1.],[8,11,6,8,3.]],threshold:0.0730631574988365,right_val:0.7060034275054932,left_val:0.4341886043548584},{features:[[5,7,10,2,-1.],[5,8,10,1,2.]],threshold:3.6767389974556863e-004,right_val:0.6051574945449829,left_val:0.3027887940406799},{features:[[15,11,5,3,-1.],[15,12,5,1,3.]],threshold:-6.0479710809886456e-003,right_val:0.5675256848335266,left_val:0.1798433959484100}],threshold:6.9566087722778320},{simpleClassifiers:[{features:[[5,3,10,9,-1.],[5,6,10,3,3.]],threshold:-0.0165106896311045,right_val:0.1424857974052429,left_val:0.6644225120544434},{features:[[9,4,2,14,-1.],[9,11,2,7,2.]],threshold:2.7052499353885651e-003,right_val:0.1288477033376694,left_val:0.6325352191925049},{features:[[3,5,4,12,-1.],[3,9,4,4,3.]],threshold:2.8069869149476290e-003,right_val:0.6193193197250366,left_val:0.1240288019180298},{features:[[4,5,12,5,-1.],[8,5,4,5,3.]],threshold:-1.5402400167658925e-003,right_val:0.5670015811920166,left_val:0.1432143002748489},{features:[[5,6,10,8,-1.],[5,10,10,4,2.]],threshold:-5.6386279175058007e-004,right_val:0.5905207991600037,left_val:0.1657433062791824},{features:[[8,0,6,9,-1.],[8,3,6,3,3.]],threshold:1.9253729842603207e-003,right_val:0.5738824009895325,left_val:0.2695507109165192},{features:[[9,12,1,8,-1.],[9,16,1,4,2.]],threshold:-5.0214841030538082e-003,right_val:0.5782774090766907,left_val:0.1893538981676102},{features:[[0,7,20,6,-1.],[0,9,20,2,3.]],threshold:2.6365420781075954e-003,right_val:0.5695425868034363,left_val:0.2309329062700272},{features:[[7,0,6,17,-1.],[9,0,2,17,3.]],threshold:-1.5127769438549876e-003,right_val:0.5956642031669617,left_val:0.2759602069854736},{features:[[9,0,6,4,-1.],[11,0,2,4,3.]],threshold:-0.0101574398577213,right_val:0.5522047281265259,left_val:0.1732538044452667},{features:[[5,1,6,4,-1.],[7,1,2,4,3.]],threshold:-0.0119536602869630,right_val:0.5559014081954956,left_val:0.1339409947395325},{features:[[12,1,6,16,-1.],[14,1,2,16,3.]],threshold:4.8859491944313049e-003,right_val:0.6188849210739136,left_val:0.3628703951835632},{features:[[0,5,18,8,-1.],[0,5,9,4,2.],[9,9,9,4,2.]],threshold:-0.0801329165697098,right_val:0.5475944876670837,left_val:0.0912110507488251},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:1.0643280111253262e-003,right_val:0.5711399912834168,left_val:0.3715142905712128},{features:[[3,1,4,8,-1.],[3,1,2,4,2.],[5,5,2,4,2.]],threshold:-1.3419450260698795e-003,right_val:0.3318097889423370,left_val:0.5953313708305359},{features:[[3,6,14,10,-1.],[10,6,7,5,2.],[3,11,7,5,2.]],threshold:-0.0546011403203011,right_val:0.5602846145629883,left_val:0.1844065934419632},{features:[[2,1,6,16,-1.],[4,1,2,16,3.]],threshold:2.9071690514683723e-003,right_val:0.6131715178489685,left_val:0.3594244122505188},{features:[[0,18,20,2,-1.],[0,19,20,1,2.]],threshold:7.4718717951327562e-004,right_val:0.3459562957286835,left_val:0.5994353294372559},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:4.3013808317482471e-003,right_val:0.6990845203399658,left_val:0.4172652065753937},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.5017572119832039e-003,right_val:0.7801457047462463,left_val:0.4509715139865875},{features:[[0,12,9,6,-1.],[0,14,9,2,3.]],threshold:0.0241385009139776,right_val:0.1319826990365982,left_val:0.5438212752342224}],threshold:9.4985427856445313},{simpleClassifiers:[{features:[[5,7,3,4,-1.],[5,9,3,2,2.]],threshold:1.9212230108678341e-003,right_val:0.6199870705604553,left_val:0.1415266990661621},{features:[[9,3,2,16,-1.],[9,11,2,8,2.]],threshold:-1.2748669541906565e-004,right_val:0.1884928941726685,left_val:0.6191074252128601},{features:[[3,6,13,8,-1.],[3,10,13,4,2.]],threshold:5.1409931620582938e-004,right_val:0.5857927799224854,left_val:0.1487396955490112},{features:[[12,3,8,2,-1.],[12,3,4,2,2.]],threshold:4.1878609918057919e-003,right_val:0.6359239816665649,left_val:0.2746909856796265},{features:[[8,8,4,12,-1.],[8,12,4,4,3.]],threshold:5.1015717908740044e-003,right_val:0.2175628989934921,left_val:0.5870851278305054},{features:[[11,3,8,6,-1.],[15,3,4,3,2.],[11,6,4,3,2.]],threshold:-2.1448440384119749e-003,right_val:0.2979590892791748,left_val:0.5880944728851318},{features:[[7,1,6,19,-1.],[9,1,2,19,3.]],threshold:-2.8977119363844395e-003,right_val:0.5876647233963013,left_val:0.2373327016830444},{features:[[9,0,6,4,-1.],[11,0,2,4,3.]],threshold:-0.0216106791049242,right_val:0.5194202065467835,left_val:0.1220654994249344},{features:[[3,1,9,3,-1.],[6,1,3,3,3.]],threshold:-4.6299318782985210e-003,right_val:0.5817409157752991,left_val:0.2631230950355530},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:5.9393711853772402e-004,right_val:0.5698544979095459,left_val:0.3638620078563690},{features:[[0,3,6,10,-1.],[3,3,3,10,2.]],threshold:0.0538786612451077,right_val:0.7559366226196289,left_val:0.4303531050682068},{features:[[3,4,15,15,-1.],[3,9,15,5,3.]],threshold:1.8887349870055914e-003,right_val:0.5613427162170410,left_val:0.2122603058815002},{features:[[6,5,8,6,-1.],[6,7,8,2,3.]],threshold:-2.3635339457541704e-003,right_val:0.2642767131328583,left_val:0.5631849169731140},{features:[[4,4,12,10,-1.],[10,4,6,5,2.],[4,9,6,5,2.]],threshold:0.0240177996456623,right_val:0.2751705944538117,left_val:0.5797107815742493},{features:[[6,4,4,4,-1.],[8,4,2,4,2.]],threshold:2.0543030404951423e-004,right_val:0.5752568840980530,left_val:0.2705242037773132},{features:[[15,11,1,2,-1.],[15,12,1,1,2.]],threshold:8.4790197433903813e-004,right_val:0.2334876954555512,left_val:0.5435624718666077},{features:[[3,11,2,2,-1.],[3,12,2,1,2.]],threshold:1.4091329649090767e-003,right_val:0.2063155025243759,left_val:0.5319424867630005},{features:[[16,11,1,3,-1.],[16,12,1,1,3.]],threshold:1.4642629539594054e-003,right_val:0.3068861067295075,left_val:0.5418980717658997},{features:[[3,15,6,4,-1.],[3,15,3,2,2.],[6,17,3,2,2.]],threshold:1.6352549428120255e-003,right_val:0.6112868189811707,left_val:0.3695372939109802},{features:[[6,7,8,2,-1.],[6,8,8,1,2.]],threshold:8.3172752056270838e-004,right_val:0.6025236248970032,left_val:0.3565036952495575},{features:[[3,11,1,3,-1.],[3,12,1,1,3.]],threshold:-2.0998890977352858e-003,right_val:0.5362827181816101,left_val:0.1913982033729553},{features:[[6,0,12,2,-1.],[6,1,12,1,2.]],threshold:-7.4213981861248612e-004,right_val:0.5529310107231140,left_val:0.3835555016994476},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:3.2655049581080675e-003,right_val:0.7101895809173584,left_val:0.4312896132469177},{features:[[7,15,6,2,-1.],[7,16,6,1,2.]],threshold:8.9134991867467761e-004,right_val:0.6391963958740234,left_val:0.3984830975532532},{features:[[0,5,4,6,-1.],[0,7,4,2,3.]],threshold:-0.0152841797098517,right_val:0.5433713793754578,left_val:0.2366732954978943},{features:[[4,12,12,2,-1.],[8,12,4,2,3.]],threshold:4.8381411470472813e-003,right_val:0.3239189088344574,left_val:0.5817500948905945},{features:[[6,3,1,9,-1.],[6,6,1,3,3.]],threshold:-9.1093179071322083e-004,right_val:0.2911868989467621,left_val:0.5540593862533569},{features:[[10,17,3,2,-1.],[11,17,1,2,3.]],threshold:-6.1275060288608074e-003,right_val:0.5196629166603088,left_val:0.1775255054235458},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-4.4576259097084403e-004,right_val:0.5533593893051148,left_val:0.3024170100688934},{features:[[7,6,6,4,-1.],[9,6,2,4,3.]],threshold:0.0226465407758951,right_val:0.6975377202033997,left_val:0.4414930939674377},{features:[[7,17,3,2,-1.],[8,17,1,2,3.]],threshold:-1.8804960418492556e-003,right_val:0.5497952103614807,left_val:0.2791394889354706},{features:[[10,17,3,3,-1.],[11,17,1,3,3.]],threshold:7.0889107882976532e-003,right_val:0.2385547012090683,left_val:0.5263199210166931},{features:[[8,12,3,2,-1.],[8,13,3,1,2.]],threshold:1.7318050377070904e-003,right_val:0.6983600854873657,left_val:0.4319379031658173},{features:[[9,3,6,2,-1.],[11,3,2,2,3.]],threshold:-6.8482700735330582e-003,right_val:0.5390920042991638,left_val:0.3082042932510376},{features:[[3,11,14,4,-1.],[3,13,14,2,2.]],threshold:-1.5062530110299122e-005,right_val:0.3120366036891937,left_val:0.5521922111511231},{features:[[1,10,18,4,-1.],[10,10,9,2,2.],[1,12,9,2,2.]],threshold:0.0294755697250366,right_val:0.1770603060722351,left_val:0.5401322841644287},{features:[[0,10,3,3,-1.],[0,11,3,1,3.]],threshold:8.1387329846620560e-003,right_val:0.1211019009351730,left_val:0.5178617835044861},{features:[[9,1,6,6,-1.],[11,1,2,6,3.]],threshold:0.0209429506212473,right_val:0.3311221897602081,left_val:0.5290294289588928},{features:[[8,7,3,6,-1.],[9,7,1,6,3.]],threshold:-9.5665529370307922e-003,right_val:0.4451968967914581,left_val:0.7471994161605835}],threshold:18.4129695892333980},{simpleClassifiers:[{features:[[1,0,18,9,-1.],[1,3,18,3,3.]],threshold:-2.8206960996612906e-004,right_val:0.6076732277870178,left_val:0.2064086049795151},{features:[[12,10,2,6,-1.],[12,13,2,3,2.]],threshold:1.6790600493550301e-003,right_val:0.1255383938550949,left_val:0.5851997137069702},{features:[[0,5,19,8,-1.],[0,9,19,4,2.]],threshold:6.9827912375330925e-004,right_val:0.5728961229324341,left_val:0.0940184295177460},{features:[[7,0,6,9,-1.],[9,0,2,9,3.]],threshold:7.8959012171253562e-004,right_val:0.5694308876991272,left_val:0.1781987994909287},{features:[[5,3,6,1,-1.],[7,3,2,1,3.]],threshold:-2.8560499195009470e-003,right_val:0.5788664817810059,left_val:0.1638399064540863},{features:[[11,3,6,1,-1.],[13,3,2,1,3.]],threshold:-3.8122469559311867e-003,right_val:0.5508564710617065,left_val:0.2085440009832382},{features:[[5,10,4,6,-1.],[5,13,4,3,2.]],threshold:1.5896620461717248e-003,right_val:0.1857215017080307,left_val:0.5702760815620422},{features:[[11,3,6,1,-1.],[13,3,2,1,3.]],threshold:0.0100783398374915,right_val:0.2189770042896271,left_val:0.5116943120956421},{features:[[4,4,12,6,-1.],[4,6,12,2,3.]],threshold:-0.0635263025760651,right_val:0.4043813049793243,left_val:0.7131379842758179},{features:[[15,12,2,6,-1.],[15,14,2,2,3.]],threshold:-9.1031491756439209e-003,right_val:0.5463973283767700,left_val:0.2567181885242462},{features:[[9,3,2,2,-1.],[10,3,1,2,2.]],threshold:-2.4035000242292881e-003,right_val:0.5590974092483521,left_val:0.1700665950775147},{features:[[9,3,3,1,-1.],[10,3,1,1,3.]],threshold:1.5226360410451889e-003,right_val:0.2619054019451141,left_val:0.5410556793212891},{features:[[1,1,4,14,-1.],[3,1,2,14,2.]],threshold:0.0179974399507046,right_val:0.6535220742225647,left_val:0.3732436895370483},{features:[[9,0,4,4,-1.],[11,0,2,2,2.],[9,2,2,2,2.]],threshold:-6.4538191072642803e-003,right_val:0.5537446141242981,left_val:0.2626481950283051},{features:[[7,5,1,14,-1.],[7,12,1,7,2.]],threshold:-0.0118807600811124,right_val:0.5544745922088623,left_val:0.2003753930330277},{features:[[19,0,1,4,-1.],[19,2,1,2,2.]],threshold:1.2713660253211856e-003,right_val:0.3031975924968720,left_val:0.5591902732849121},{features:[[5,5,6,4,-1.],[8,5,3,4,2.]],threshold:1.1376109905540943e-003,right_val:0.5646508932113648,left_val:0.2730407118797302},{features:[[9,18,3,2,-1.],[10,18,1,2,3.]],threshold:-4.2651998810470104e-003,right_val:0.5461820960044861,left_val:0.1405909061431885},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:-2.9602861031889915e-003,right_val:0.5459290146827698,left_val:0.1795035004615784},{features:[[4,5,12,6,-1.],[4,7,12,2,3.]],threshold:-8.8448226451873779e-003,right_val:0.2809219956398010,left_val:0.5736783146858215},{features:[[3,12,2,6,-1.],[3,14,2,2,3.]],threshold:-6.6430689767003059e-003,right_val:0.5503826141357422,left_val:0.2370675951242447},{features:[[10,8,2,12,-1.],[10,12,2,4,3.]],threshold:3.9997808635234833e-003,right_val:0.3304282128810883,left_val:0.5608199834823608},{features:[[7,18,3,2,-1.],[8,18,1,2,3.]],threshold:-4.1221720166504383e-003,right_val:0.5378993153572083,left_val:0.1640105992555618},{features:[[9,0,6,2,-1.],[11,0,2,2,3.]],threshold:0.0156249096617103,right_val:0.2288603931665421,left_val:0.5227649211883545},{features:[[5,11,9,3,-1.],[5,12,9,1,3.]],threshold:-0.0103564197197557,right_val:0.4252927899360657,left_val:0.7016193866729736},{features:[[9,0,6,2,-1.],[11,0,2,2,3.]],threshold:-8.7960809469223022e-003,right_val:0.5355830192565918,left_val:0.2767347097396851},{features:[[1,1,18,5,-1.],[7,1,6,5,3.]],threshold:0.1622693985700607,right_val:0.7442579269409180,left_val:0.4342240095138550},{features:[[8,0,4,4,-1.],[10,0,2,2,2.],[8,2,2,2,2.]],threshold:4.5542530715465546e-003,right_val:0.2582125067710877,left_val:0.5726485848426819},{features:[[3,12,1,3,-1.],[3,13,1,1,3.]],threshold:-2.1309209987521172e-003,right_val:0.5361018776893616,left_val:0.2106848061084747},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-0.0132084200158715,right_val:0.4552468061447144,left_val:0.7593790888786316},{features:[[5,4,10,12,-1.],[5,4,5,6,2.],[10,10,5,6,2.]],threshold:-0.0659966766834259,right_val:0.5344039797782898,left_val:0.1252475976943970},{features:[[9,6,9,12,-1.],[9,10,9,4,3.]],threshold:7.9142656177282333e-003,right_val:0.5601043105125427,left_val:0.3315384089946747},{features:[[2,2,12,14,-1.],[2,2,6,7,2.],[8,9,6,7,2.]],threshold:0.0208942797034979,right_val:0.2768838107585907,left_val:0.5506049990653992}],threshold:15.3241395950317380},{simpleClassifiers:[{features:[[4,7,12,2,-1.],[8,7,4,2,3.]],threshold:1.1961159761995077e-003,right_val:0.6156241297721863,left_val:0.1762690991163254},{features:[[7,4,6,4,-1.],[7,6,6,2,2.]],threshold:-1.8679830245673656e-003,right_val:0.1832399964332581,left_val:0.6118106842041016},{features:[[4,5,11,8,-1.],[4,9,11,4,2.]],threshold:-1.9579799845814705e-004,right_val:0.5723816156387329,left_val:0.0990442633628845},{features:[[3,10,16,4,-1.],[3,12,16,2,2.]],threshold:-8.0255657667294145e-004,right_val:0.2377282977104187,left_val:0.5579879879951477},{features:[[0,0,16,2,-1.],[0,1,16,1,2.]],threshold:-2.4510810617357492e-003,right_val:0.5858935117721558,left_val:0.2231457978487015},{features:[[7,5,6,2,-1.],[9,5,2,2,3.]],threshold:5.0361850298941135e-004,right_val:0.5794103741645813,left_val:0.2653993964195252},{features:[[3,2,6,10,-1.],[3,2,3,5,2.],[6,7,3,5,2.]],threshold:4.0293349884450436e-003,right_val:0.2484865039587021,left_val:0.5803827047348023},{features:[[10,5,8,15,-1.],[10,10,8,5,3.]],threshold:-0.0144517095759511,right_val:0.5484204888343811,left_val:0.1830351948738098},{features:[[3,14,8,6,-1.],[3,14,4,3,2.],[7,17,4,3,2.]],threshold:2.0380979403853416e-003,right_val:0.6051092743873596,left_val:0.3363558948040009},{features:[[14,2,2,2,-1.],[14,3,2,1,2.]],threshold:-1.6155190533027053e-003,right_val:0.5441246032714844,left_val:0.2286642044782639},{features:[[1,10,7,6,-1.],[1,13,7,3,2.]],threshold:3.3458340913057327e-003,right_val:0.2392338067293167,left_val:0.5625913143157959},{features:[[15,4,4,3,-1.],[15,4,2,3,2.]],threshold:1.6379579901695251e-003,right_val:0.5964621901512146,left_val:0.3906993865966797},{features:[[2,9,14,6,-1.],[2,9,7,3,2.],[9,12,7,3,2.]],threshold:0.0302512105554342,right_val:0.1575746983289719,left_val:0.5248482227325440},{features:[[5,7,10,4,-1.],[5,9,10,2,2.]],threshold:0.0372519902884960,right_val:0.6748418807983398,left_val:0.4194310903549194},{features:[[6,9,8,8,-1.],[6,9,4,4,2.],[10,13,4,4,2.]],threshold:-0.0251097902655602,right_val:0.5473451018333435,left_val:0.1882549971342087},{features:[[14,1,3,2,-1.],[14,2,3,1,2.]],threshold:-5.3099058568477631e-003,right_val:0.5227110981941223,left_val:0.1339973062276840},{features:[[1,4,4,2,-1.],[3,4,2,2,2.]],threshold:1.2086479691788554e-003,right_val:0.6109635829925537,left_val:0.3762088119983673},{features:[[11,10,2,8,-1.],[11,14,2,4,2.]],threshold:-0.0219076797366142,right_val:0.5404006838798523,left_val:0.2663142979145050},{features:[[0,0,5,3,-1.],[0,1,5,1,3.]],threshold:5.4116579703986645e-003,right_val:0.2232273072004318,left_val:0.5363578796386719},{features:[[2,5,18,8,-1.],[11,5,9,4,2.],[2,9,9,4,2.]],threshold:0.0699463263154030,right_val:0.2453698068857193,left_val:0.5358232855796814},{features:[[6,6,1,6,-1.],[6,9,1,3,2.]],threshold:3.4520021290518343e-004,right_val:0.5376930236816406,left_val:0.2409671992063522},{features:[[19,1,1,3,-1.],[19,2,1,1,3.]],threshold:1.2627709656953812e-003,right_val:0.3155693113803864,left_val:0.5425856709480286},{features:[[7,6,6,6,-1.],[9,6,2,6,3.]],threshold:0.0227195098996162,right_val:0.6597865223884583,left_val:0.4158405959606171},{features:[[19,1,1,3,-1.],[19,2,1,1,3.]],threshold:-1.8111000536009669e-003,right_val:0.5505244731903076,left_val:0.2811253070831299},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:3.3469670452177525e-003,right_val:0.1891465038061142,left_val:0.5260028243064880},{features:[[8,4,8,12,-1.],[12,4,4,6,2.],[8,10,4,6,2.]],threshold:4.0791751234792173e-004,right_val:0.3344210088253021,left_val:0.5673509240150452},{features:[[5,2,6,3,-1.],[7,2,2,3,3.]],threshold:0.0127347996458411,right_val:0.2395612001419067,left_val:0.5343592166900635},{features:[[6,1,9,10,-1.],[6,6,9,5,2.]],threshold:-7.3119727894663811e-003,right_val:0.4022207856178284,left_val:0.6010890007019043},{features:[[0,4,6,12,-1.],[2,4,2,12,3.]],threshold:-0.0569487512111664,right_val:0.4543190896511078,left_val:0.8199151158332825},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-5.0116591155529022e-003,right_val:0.5357710719108582,left_val:0.2200281023979187},{features:[[7,14,5,3,-1.],[7,15,5,1,3.]],threshold:6.0334368608891964e-003,right_val:0.7181751132011414,left_val:0.4413081109523773},{features:[[15,13,3,3,-1.],[15,14,3,1,3.]],threshold:3.9437441155314445e-003,right_val:0.2791733145713806,left_val:0.5478860735893250},{features:[[6,14,8,3,-1.],[6,15,8,1,3.]],threshold:-3.6591119132936001e-003,right_val:0.3989723920822144,left_val:0.6357867717742920},{features:[[15,13,3,3,-1.],[15,14,3,1,3.]],threshold:-3.8456181064248085e-003,right_val:0.5300664901733398,left_val:0.3493686020374298},{features:[[2,13,3,3,-1.],[2,14,3,1,3.]],threshold:-7.1926261298358440e-003,right_val:0.5229672789573669,left_val:0.1119614988565445},{features:[[4,7,12,12,-1.],[10,7,6,6,2.],[4,13,6,6,2.]],threshold:-0.0527989417314529,right_val:0.5453451275825501,left_val:0.2387102991342545},{features:[[9,7,2,6,-1.],[10,7,1,6,2.]],threshold:-7.9537667334079742e-003,right_val:0.4439376890659332,left_val:0.7586917877197266},{features:[[8,9,5,2,-1.],[8,10,5,1,2.]],threshold:-2.7344180271029472e-003,right_val:0.5489321947097778,left_val:0.2565476894378662},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-1.8507939530536532e-003,right_val:0.4252474904060364,left_val:0.6734347939491272},{features:[[9,6,2,8,-1.],[9,10,2,4,2.]],threshold:0.0159189198166132,right_val:0.2292661964893341,left_val:0.5488352775573731},{features:[[7,7,3,6,-1.],[8,7,1,6,3.]],threshold:-1.2687679845839739e-003,right_val:0.4022389948368073,left_val:0.6104331016540527},{features:[[11,3,3,3,-1.],[12,3,1,3,3.]],threshold:6.2883910723030567e-003,right_val:0.1536193042993546,left_val:0.5310853123664856},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-6.2259892001748085e-003,right_val:0.5241606235504150,left_val:0.1729111969470978},{features:[[5,6,10,3,-1.],[5,7,10,1,3.]],threshold:-0.0121325999498367,right_val:0.4325182139873505,left_val:0.6597759723663330}],threshold:21.0106391906738280},{simpleClassifiers:[{features:[[7,3,6,9,-1.],[7,6,6,3,3.]],threshold:-3.9184908382594585e-003,right_val:0.1469330936670303,left_val:0.6103435158729553},{features:[[6,7,9,1,-1.],[9,7,3,1,3.]],threshold:1.5971299726516008e-003,right_val:0.5896466970443726,left_val:0.2632363140583038},{features:[[2,8,16,8,-1.],[2,12,16,4,2.]],threshold:0.0177801102399826,right_val:0.1760361939668655,left_val:0.5872874259948731},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:6.5334769897162914e-004,right_val:0.5596066117286682,left_val:0.1567801982164383},{features:[[1,5,6,15,-1.],[1,10,6,5,3.]],threshold:-2.8353091329336166e-004,right_val:0.5732036232948303,left_val:0.1913153976202011},{features:[[10,0,6,9,-1.],[10,3,6,3,3.]],threshold:1.6104689566418529e-003,right_val:0.5623080730438232,left_val:0.2914913892745972},{features:[[6,6,7,14,-1.],[6,13,7,7,2.]],threshold:-0.0977506190538406,right_val:0.5648233294487000,left_val:0.1943476945161820},{features:[[13,7,3,6,-1.],[13,9,3,2,3.]],threshold:5.5182358482852578e-004,right_val:0.5504639744758606,left_val:0.3134616911411285},{features:[[1,8,15,4,-1.],[6,8,5,4,3.]],threshold:-0.0128582203760743,right_val:0.5760142803192139,left_val:0.2536481916904450},{features:[[11,2,3,10,-1.],[11,7,3,5,2.]],threshold:4.1530239395797253e-003,right_val:0.3659774065017700,left_val:0.5767722129821777},{features:[[3,7,4,6,-1.],[3,9,4,2,3.]],threshold:1.7092459602281451e-003,right_val:0.5918939113616943,left_val:0.2843191027641296},{features:[[13,3,6,10,-1.],[15,3,2,10,3.]],threshold:7.5217359699308872e-003,right_val:0.6183109283447266,left_val:0.4052427113056183},{features:[[5,7,8,10,-1.],[5,7,4,5,2.],[9,12,4,5,2.]],threshold:2.2479810286313295e-003,right_val:0.3135401010513306,left_val:0.5783755183219910},{features:[[4,4,12,12,-1.],[10,4,6,6,2.],[4,10,6,6,2.]],threshold:0.0520062111318111,right_val:0.1916636973619461,left_val:0.5541312098503113},{features:[[1,4,6,9,-1.],[3,4,2,9,3.]],threshold:0.0120855299755931,right_val:0.6644591093063355,left_val:0.4032655954360962},{features:[[11,3,2,5,-1.],[11,3,1,5,2.]],threshold:1.4687820112158079e-005,right_val:0.5709382891654968,left_val:0.3535977900028229},{features:[[7,3,2,5,-1.],[8,3,1,5,2.]],threshold:7.1395188570022583e-006,right_val:0.5610269904136658,left_val:0.3037444949150085},{features:[[10,14,2,3,-1.],[10,15,2,1,3.]],threshold:-4.6001640148460865e-003,right_val:0.4580326080322266,left_val:0.7181087136268616},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.0058949012309313e-003,right_val:0.2953684031963348,left_val:0.5621951818466187},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.5050270855426788e-003,right_val:0.7619017958641052,left_val:0.4615387916564941},{features:[[4,11,12,6,-1.],[4,14,12,3,2.]],threshold:0.0117468303069472,right_val:0.1772529035806656,left_val:0.5343837141990662},{features:[[11,11,5,9,-1.],[11,14,5,3,3.]],threshold:-0.0583163388073444,right_val:0.5340772271156311,left_val:0.1686245948076248},{features:[[6,15,3,2,-1.],[6,16,3,1,2.]],threshold:2.3629379575140774e-004,right_val:0.6026803851127625,left_val:0.3792056143283844},{features:[[11,0,3,5,-1.],[12,0,1,5,3.]],threshold:-7.8156180679798126e-003,right_val:0.5324323773384094,left_val:0.1512867063283920},{features:[[5,5,6,7,-1.],[8,5,3,7,2.]],threshold:-0.0108761601150036,right_val:0.5319945216178894,left_val:0.2081822007894516},{features:[[13,0,1,9,-1.],[13,3,1,3,3.]],threshold:-2.7745519764721394e-003,right_val:0.5210328102111816,left_val:0.4098246991634369},{features:[[3,2,4,8,-1.],[3,2,2,4,2.],[5,6,2,4,2.]],threshold:-7.8276381827890873e-004,right_val:0.3478842079639435,left_val:0.5693274140357971},{features:[[13,12,4,6,-1.],[13,14,4,2,3.]],threshold:0.0138704096898437,right_val:0.2257698029279709,left_val:0.5326750874519348},{features:[[3,12,4,6,-1.],[3,14,4,2,3.]],threshold:-0.0236749108880758,right_val:0.5200707912445068,left_val:0.1551305055618286},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:-1.4879409718560055e-005,right_val:0.3820176124572754,left_val:0.5500566959381104},{features:[[4,4,4,3,-1.],[4,5,4,1,3.]],threshold:3.6190641112625599e-003,right_val:0.6639748215675354,left_val:0.4238683879375458},{features:[[7,5,11,8,-1.],[7,9,11,4,2.]],threshold:-0.0198171101510525,right_val:0.5382357835769653,left_val:0.2150038033723831},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-3.8154039066284895e-003,right_val:0.4215297102928162,left_val:0.6675711274147034},{features:[[9,1,6,1,-1.],[11,1,2,1,3.]],threshold:-4.9775829538702965e-003,right_val:0.5386328101158142,left_val:0.2267289012670517},{features:[[5,5,3,3,-1.],[5,6,3,1,3.]],threshold:2.2441020701080561e-003,right_val:0.6855735778808594,left_val:0.4308691024780273},{features:[[0,9,20,6,-1.],[10,9,10,3,2.],[0,12,10,3,2.]],threshold:0.0122824599966407,right_val:0.3467479050159454,left_val:0.5836614966392517},{features:[[8,6,3,5,-1.],[9,6,1,5,3.]],threshold:-2.8548699337989092e-003,right_val:0.4311453998088837,left_val:0.7016944885253906},{features:[[11,0,1,3,-1.],[11,1,1,1,3.]],threshold:-3.7875669077038765e-003,right_val:0.5224946141242981,left_val:0.2895345091819763},{features:[[4,2,4,2,-1.],[4,3,4,1,2.]],threshold:-1.2201230274513364e-003,right_val:0.5481644868850708,left_val:0.2975570857524872},{features:[[12,6,4,3,-1.],[12,7,4,1,3.]],threshold:0.0101605998352170,right_val:0.8182697892189026,left_val:0.4888817965984345},{features:[[5,0,6,4,-1.],[7,0,2,4,3.]],threshold:-0.0161745697259903,right_val:0.5239992737770081,left_val:0.1481492966413498},{features:[[9,7,3,8,-1.],[10,7,1,8,3.]],threshold:0.0192924607545137,right_val:0.7378190755844116,left_val:0.4786309897899628},{features:[[9,7,2,2,-1.],[10,7,1,2,2.]],threshold:-3.2479539513587952e-003,right_val:0.4470643997192383,left_val:0.7374222874641419},{features:[[6,7,14,4,-1.],[13,7,7,2,2.],[6,9,7,2,2.]],threshold:-9.3803480267524719e-003,right_val:0.5537996292114258,left_val:0.3489154875278473},{features:[[0,5,3,6,-1.],[0,7,3,2,3.]],threshold:-0.0126061299815774,right_val:0.5315443277359009,left_val:0.2379686981439591},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:-0.0256219301372766,right_val:0.5138769745826721,left_val:0.1964688003063202},{features:[[4,11,3,4,-1.],[4,13,3,2,2.]],threshold:-7.5741496402770281e-005,right_val:0.3365853130817413,left_val:0.5590522885322571},{features:[[5,9,12,8,-1.],[11,9,6,4,2.],[5,13,6,4,2.]],threshold:-0.0892108827829361,right_val:0.5162634849548340,left_val:0.0634046569466591},{features:[[9,12,1,3,-1.],[9,13,1,1,3.]],threshold:-2.7670480776578188e-003,right_val:0.4490706026554108,left_val:0.7323467731475830},{features:[[10,15,2,4,-1.],[10,17,2,2,2.]],threshold:2.7152578695677221e-004,right_val:0.5985518097877502,left_val:0.4114834964275360}],threshold:23.9187908172607420},{simpleClassifiers:[{features:[[7,7,6,1,-1.],[9,7,2,1,3.]],threshold:1.4786219689995050e-003,right_val:0.6643316745758057,left_val:0.2663545012474060},{features:[[12,3,6,6,-1.],[15,3,3,3,2.],[12,6,3,3,2.]],threshold:-1.8741659587249160e-003,right_val:0.2518512904644013,left_val:0.6143848896026611},{features:[[0,4,10,6,-1.],[0,6,10,2,3.]],threshold:-1.7151009524241090e-003,right_val:0.2397463023662567,left_val:0.5766341090202332},{features:[[8,3,8,14,-1.],[12,3,4,7,2.],[8,10,4,7,2.]],threshold:-1.8939269939437509e-003,right_val:0.2529144883155823,left_val:0.5682045817375183},{features:[[4,4,7,15,-1.],[4,9,7,5,3.]],threshold:-5.3006052039563656e-003,right_val:0.5556079745292664,left_val:0.1640675961971283},{features:[[12,2,6,8,-1.],[15,2,3,4,2.],[12,6,3,4,2.]],threshold:-0.0466625317931175,right_val:0.4762830138206482,left_val:0.6123154163360596},{features:[[2,2,6,8,-1.],[2,2,3,4,2.],[5,6,3,4,2.]],threshold:-7.9431332414969802e-004,right_val:0.2839404046535492,left_val:0.5707858800888062},{features:[[2,13,18,7,-1.],[8,13,6,7,3.]],threshold:0.0148916700854898,right_val:0.6006367206573486,left_val:0.4089672863483429},{features:[[4,3,8,14,-1.],[4,3,4,7,2.],[8,10,4,7,2.]],threshold:-1.2046529445797205e-003,right_val:0.2705289125442505,left_val:0.5712450742721558},{features:[[18,1,2,6,-1.],[18,3,2,2,3.]],threshold:6.0619381256401539e-003,right_val:0.3262225985527039,left_val:0.5262504220008850},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-2.5286648888140917e-003,right_val:0.4199256896972656,left_val:0.6853830814361572},{features:[[18,1,2,6,-1.],[18,3,2,2,3.]],threshold:-5.9010218828916550e-003,right_val:0.5434812903404236,left_val:0.3266282081604004},{features:[[0,1,2,6,-1.],[0,3,2,2,3.]],threshold:5.6702760048210621e-003,right_val:0.2319003939628601,left_val:0.5468410849571228},{features:[[1,5,18,6,-1.],[1,7,18,2,3.]],threshold:-3.0304100364446640e-003,right_val:0.2708238065242767,left_val:0.5570667982101440},{features:[[0,2,6,7,-1.],[3,2,3,7,2.]],threshold:2.9803649522364140e-003,right_val:0.5890625715255737,left_val:0.3700568974018097},{features:[[7,3,6,14,-1.],[7,10,6,7,2.]],threshold:-0.0758405104279518,right_val:0.5419948101043701,left_val:0.2140070050954819},{features:[[3,7,13,10,-1.],[3,12,13,5,2.]],threshold:0.0192625392228365,right_val:0.2726590037345886,left_val:0.5526772141456604},{features:[[11,15,2,2,-1.],[11,16,2,1,2.]],threshold:1.8888259364757687e-004,right_val:0.6017209887504578,left_val:0.3958011865615845},{features:[[2,11,16,4,-1.],[2,11,8,2,2.],[10,13,8,2,2.]],threshold:0.0293695498257875,right_val:0.1435758024454117,left_val:0.5241373777389526},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:1.0417619487270713e-003,right_val:0.5929983258247376,left_val:0.3385409116744995},{features:[[6,10,3,9,-1.],[6,13,3,3,3.]],threshold:2.6125640142709017e-003,right_val:0.3021597862243652,left_val:0.5485377907752991},{features:[[14,6,1,6,-1.],[14,9,1,3,2.]],threshold:9.6977467183023691e-004,right_val:0.5532032847404480,left_val:0.3375276029109955},{features:[[5,10,4,1,-1.],[7,10,2,1,2.]],threshold:5.9512659208849072e-004,right_val:0.3359399139881134,left_val:0.5631743073463440},{features:[[3,8,15,5,-1.],[8,8,5,5,3.]],threshold:-0.1015655994415283,right_val:0.5230425000190735,left_val:0.0637350380420685},{features:[[1,6,5,4,-1.],[1,8,5,2,2.]],threshold:0.0361566990613937,right_val:0.1029528975486755,left_val:0.5136963129043579},{features:[[3,1,17,6,-1.],[3,3,17,2,3.]],threshold:3.4624140243977308e-003,right_val:0.5558289289474487,left_val:0.3879320025444031},{features:[[6,7,8,2,-1.],[10,7,4,2,2.]],threshold:0.0195549800992012,right_val:0.1875859946012497,left_val:0.5250086784362793},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:-2.3121440317481756e-003,right_val:0.4679641127586365,left_val:0.6672028899192810},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-1.8605289515107870e-003,right_val:0.4334670901298523,left_val:0.7163379192352295},{features:[[8,9,4,2,-1.],[8,10,4,1,2.]],threshold:-9.4026362057775259e-004,right_val:0.5650203227996826,left_val:0.3021360933780670},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:-5.2418331615626812e-003,right_val:0.5250256061553955,left_val:0.1820009052753449},{features:[[9,5,6,4,-1.],[9,5,3,4,2.]],threshold:1.1729019752237946e-004,right_val:0.5445973277091980,left_val:0.3389188051223755},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:1.1878840159624815e-003,right_val:0.6253563165664673,left_val:0.4085349142551422},{features:[[4,7,12,6,-1.],[10,7,6,3,2.],[4,10,6,3,2.]],threshold:-0.0108813596889377,right_val:0.5700082778930664,left_val:0.3378399014472961},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:1.7354859737679362e-003,right_val:0.6523038744926453,left_val:0.4204635918140411},{features:[[9,7,3,3,-1.],[9,8,3,1,3.]],threshold:-6.5119052305817604e-003,right_val:0.5428143739700317,left_val:0.2595216035842896},{features:[[7,4,3,8,-1.],[8,4,1,8,3.]],threshold:-1.2136430013924837e-003,right_val:0.3977893888950348,left_val:0.6165143847465515},{features:[[10,0,3,6,-1.],[11,0,1,6,3.]],threshold:-0.0103542404249310,right_val:0.5219504833221436,left_val:0.1628028005361557},{features:[[6,3,4,8,-1.],[8,3,2,8,2.]],threshold:5.5858830455690622e-004,right_val:0.5503574013710022,left_val:0.3199650943279266},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:0.0152996499091387,right_val:0.6122388243675232,left_val:0.4103994071483612},{features:[[8,13,3,6,-1.],[8,16,3,3,2.]],threshold:-0.0215882100164890,right_val:0.5197384953498840,left_val:0.1034912988543510},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:-0.1283462941646576,right_val:0.4893102943897247,left_val:0.8493865132331848},{features:[[0,7,10,4,-1.],[0,7,5,2,2.],[5,9,5,2,2.]],threshold:-2.2927189711481333e-003,right_val:0.5471575260162354,left_val:0.3130157887935638},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:0.0799151062965393,right_val:0.6073989272117615,left_val:0.4856320917606354},{features:[[0,3,6,13,-1.],[3,3,3,13,2.]],threshold:-0.0794410929083824,right_val:0.4624533057212830,left_val:0.8394674062728882},{features:[[9,1,4,1,-1.],[9,1,2,1,2.]],threshold:-5.2800010889768600e-003,right_val:0.5306698083877564,left_val:0.1881695985794067},{features:[[8,0,2,1,-1.],[9,0,1,1,2.]],threshold:1.0463109938427806e-003,right_val:0.2583065927028656,left_val:0.5271229147911072},{features:[[10,16,4,4,-1.],[12,16,2,2,2.],[10,18,2,2,2.]],threshold:2.6317298761568964e-004,right_val:0.5735440850257874,left_val:0.4235304892063141},{features:[[9,6,2,3,-1.],[10,6,1,3,2.]],threshold:-3.6173160187900066e-003,right_val:0.4495444893836975,left_val:0.6934396028518677},{features:[[4,5,12,2,-1.],[8,5,4,2,3.]],threshold:0.0114218797534704,right_val:0.4138193130493164,left_val:0.5900921225547791},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-1.9963278900831938e-003,right_val:0.4327239990234375,left_val:0.6466382741928101}],threshold:24.5278797149658200},{simpleClassifiers:[{features:[[6,4,8,6,-1.],[6,6,8,2,3.]],threshold:-9.9691245704889297e-003,right_val:0.2482212036848068,left_val:0.6142324209213257},{features:[[9,5,2,12,-1.],[9,11,2,6,2.]],threshold:7.3073059320449829e-004,right_val:0.2321965992450714,left_val:0.5704951882362366},{features:[[4,6,6,8,-1.],[4,10,6,4,2.]],threshold:6.4045301405712962e-004,right_val:0.5814933180809021,left_val:0.2112251967191696},{features:[[12,2,8,5,-1.],[12,2,4,5,2.]],threshold:4.5424019917845726e-003,right_val:0.5866311788558960,left_val:0.2950482070446014},{features:[[0,8,18,3,-1.],[0,9,18,1,3.]],threshold:9.2477443104144186e-005,right_val:0.5791326761245728,left_val:0.2990990877151489},{features:[[8,12,4,8,-1.],[8,16,4,4,2.]],threshold:-8.6603146046400070e-003,right_val:0.5635542273521423,left_val:0.2813029885292053},{features:[[0,2,8,5,-1.],[4,2,4,5,2.]],threshold:8.0515816807746887e-003,right_val:0.6054757237434387,left_val:0.3535369038581848},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:4.3835240649059415e-004,right_val:0.2731510996818543,left_val:0.5596532225608826},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-9.8168973636347800e-005,right_val:0.3638561069965363,left_val:0.5978031754493713},{features:[[11,3,3,1,-1.],[12,3,1,1,3.]],threshold:-1.1298790341243148e-003,right_val:0.5432729125022888,left_val:0.2755252122879028},{features:[[7,13,5,3,-1.],[7,14,5,1,3.]],threshold:6.4356150105595589e-003,right_val:0.7069833278656006,left_val:0.4305641949176788},{features:[[11,11,7,6,-1.],[11,14,7,3,2.]],threshold:-0.0568293295800686,right_val:0.5294997096061707,left_val:0.2495242953300476},{features:[[2,11,7,6,-1.],[2,14,7,3,2.]],threshold:4.0668169967830181e-003,right_val:0.2497723996639252,left_val:0.5478553175926209},{features:[[12,14,2,6,-1.],[12,16,2,2,3.]],threshold:4.8164798499783501e-005,right_val:0.5706356167793274,left_val:0.3938601016998291},{features:[[8,14,3,3,-1.],[8,15,3,1,3.]],threshold:6.1795017682015896e-003,right_val:0.7394766807556152,left_val:0.4407606124877930},{features:[[11,0,3,5,-1.],[12,0,1,5,3.]],threshold:6.4985752105712891e-003,right_val:0.2479152977466583,left_val:0.5445243120193481},{features:[[6,1,4,9,-1.],[8,1,2,9,2.]],threshold:-1.0211090557277203e-003,right_val:0.5338971018791199,left_val:0.2544766962528229},{features:[[10,3,6,1,-1.],[12,3,2,1,3.]],threshold:-5.4247528314590454e-003,right_val:0.5324069261550903,left_val:0.2718858122825623},{features:[[8,8,3,4,-1.],[8,10,3,2,2.]],threshold:-1.0559899965301156e-003,right_val:0.5534508824348450,left_val:0.3178288042545319},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:6.6465808777138591e-004,right_val:0.6558194160461426,left_val:0.4284219145774841},{features:[[5,18,4,2,-1.],[5,19,4,1,2.]],threshold:-2.7524109464138746e-004,right_val:0.3810262978076935,left_val:0.5902860760688782},{features:[[2,1,18,6,-1.],[2,3,18,2,3.]],threshold:4.2293202131986618e-003,right_val:0.5709385871887207,left_val:0.3816489875316620},{features:[[6,0,3,2,-1.],[7,0,1,2,3.]],threshold:-3.2868210691958666e-003,right_val:0.5259544253349304,left_val:0.1747743934392929},{features:[[13,8,6,2,-1.],[16,8,3,1,2.],[13,9,3,1,2.]],threshold:1.5611879643984139e-004,right_val:0.5725612044334412,left_val:0.3601722121238709},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:-7.3621381488919724e-006,right_val:0.3044497072696686,left_val:0.5401858091354370},{features:[[0,13,20,4,-1.],[10,13,10,2,2.],[0,15,10,2,2.]],threshold:-0.0147672500461340,right_val:0.5573434829711914,left_val:0.3220770061016083},{features:[[7,7,6,5,-1.],[9,7,2,5,3.]],threshold:0.0244895908981562,right_val:0.6518812775611877,left_val:0.4301528036594391},{features:[[11,0,2,2,-1.],[11,1,2,1,2.]],threshold:-3.7652091123163700e-004,right_val:0.5598236918449402,left_val:0.3564583063125610},{features:[[1,8,6,2,-1.],[1,8,3,1,2.],[4,9,3,1,2.]],threshold:7.3657688517414499e-006,right_val:0.5561897754669190,left_val:0.3490782976150513},{features:[[0,2,20,2,-1.],[10,2,10,1,2.],[0,3,10,1,2.]],threshold:-0.0150999398902059,right_val:0.5335299968719482,left_val:0.1776272058486939},{features:[[7,14,5,3,-1.],[7,15,5,1,3.]],threshold:-3.8316650316119194e-003,right_val:0.4221394062042236,left_val:0.6149687767028809},{features:[[7,13,6,6,-1.],[10,13,3,3,2.],[7,16,3,3,2.]],threshold:0.0169254001230001,right_val:0.2166585028171539,left_val:0.5413014888763428},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-3.0477850232273340e-003,right_val:0.4354617893695831,left_val:0.6449490785598755},{features:[[16,11,1,6,-1.],[16,13,1,2,3.]],threshold:3.2140589319169521e-003,right_val:0.3523217141628265,left_val:0.5400155186653137},{features:[[3,11,1,6,-1.],[3,13,1,2,3.]],threshold:-4.0023201145231724e-003,right_val:0.5338417291641235,left_val:0.2774524092674255},{features:[[4,4,14,12,-1.],[11,4,7,6,2.],[4,10,7,6,2.]],threshold:7.4182129465043545e-003,right_val:0.3702817857265472,left_val:0.5676739215850830},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-8.8764587417244911e-003,right_val:0.4583688974380493,left_val:0.7749221920967102},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:2.7311739977449179e-003,right_val:0.3996661007404327,left_val:0.5338721871376038},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-2.5082379579544067e-003,right_val:0.3777498900890350,left_val:0.5611963272094727},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:-8.0541074275970459e-003,right_val:0.5179182887077332,left_val:0.2915228903293610},{features:[[3,1,4,10,-1.],[3,1,2,5,2.],[5,6,2,5,2.]],threshold:-9.7938813269138336e-004,right_val:0.3700192868709564,left_val:0.5536432862281799},{features:[[5,7,10,2,-1.],[5,7,5,2,2.]],threshold:-5.8745909482240677e-003,right_val:0.5679376125335693,left_val:0.3754391074180603},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-4.4936719350516796e-003,right_val:0.4480949938297272,left_val:0.7019699215888977},{features:[[15,12,2,3,-1.],[15,13,2,1,3.]],threshold:-5.4389229044318199e-003,right_val:0.5313386917114258,left_val:0.2310364991426468},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-7.5094640487805009e-004,right_val:0.4129343032836914,left_val:0.5864868760108948},{features:[[13,4,1,12,-1.],[13,10,1,6,2.]],threshold:1.4528800420521293e-005,right_val:0.5619621276855469,left_val:0.3732407093048096},{features:[[4,5,12,12,-1.],[4,5,6,6,2.],[10,11,6,6,2.]],threshold:0.0407580696046352,right_val:0.2720521986484528,left_val:0.5312091112136841},{features:[[7,14,7,3,-1.],[7,15,7,1,3.]],threshold:6.6505931317806244e-003,right_val:0.6693493723869324,left_val:0.4710015952587128},{features:[[3,12,2,3,-1.],[3,13,2,1,3.]],threshold:4.5759351924061775e-003,right_val:0.1637275964021683,left_val:0.5167819261550903},{features:[[3,2,14,2,-1.],[10,2,7,1,2.],[3,3,7,1,2.]],threshold:6.5269311890006065e-003,right_val:0.2938531935214996,left_val:0.5397608876228333},{features:[[0,1,3,10,-1.],[1,1,1,10,3.]],threshold:-0.0136603796854615,right_val:0.4532200098037720,left_val:0.7086488008499146},{features:[[9,0,6,5,-1.],[11,0,2,5,3.]],threshold:0.0273588690906763,right_val:0.3589231967926025,left_val:0.5206481218338013},{features:[[5,7,6,2,-1.],[8,7,3,2,2.]],threshold:6.2197551596909761e-004,right_val:0.5441123247146606,left_val:0.3507075905799866},{features:[[7,1,6,10,-1.],[7,6,6,5,2.]],threshold:-3.3077080734074116e-003,right_val:0.4024891853332520,left_val:0.5859522819519043},{features:[[1,1,18,3,-1.],[7,1,6,3,3.]],threshold:-0.0106311095878482,right_val:0.4422602951526642,left_val:0.6743267178535461},{features:[[16,3,3,6,-1.],[16,5,3,2,3.]],threshold:0.0194416493177414,right_val:0.1797904968261719,left_val:0.5282716155052185}],threshold:27.1533508300781250},{simpleClassifiers:[{features:[[6,3,7,6,-1.],[6,6,7,3,2.]],threshold:-5.5052167735993862e-003,right_val:0.2626559138298035,left_val:0.5914731025695801},{features:[[4,7,12,2,-1.],[8,7,4,2,3.]],threshold:1.9562279339879751e-003,right_val:0.5741627216339111,left_val:0.2312581986188889},{features:[[0,4,17,10,-1.],[0,9,17,5,2.]],threshold:-8.8924784213304520e-003,right_val:0.5626654028892517,left_val:0.1656530052423477},{features:[[3,4,15,16,-1.],[3,12,15,8,2.]],threshold:0.0836383774876595,right_val:0.1957294940948486,left_val:0.5423449873924255},{features:[[7,15,6,4,-1.],[7,17,6,2,2.]],threshold:1.2282270472496748e-003,right_val:0.5992503762245178,left_val:0.3417904078960419},{features:[[15,2,4,9,-1.],[15,2,2,9,2.]],threshold:5.7629169896245003e-003,right_val:0.6079903841018677,left_val:0.3719581961631775},{features:[[2,3,3,2,-1.],[2,4,3,1,2.]],threshold:-1.6417410224676132e-003,right_val:0.5576915740966797,left_val:0.2577486038208008},{features:[[13,6,7,9,-1.],[13,9,7,3,3.]],threshold:3.4113149158656597e-003,right_val:0.5514171719551086,left_val:0.2950749099254608},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-0.0110693201422691,right_val:0.4477078914642334,left_val:0.7569358944892883},{features:[[0,2,20,6,-1.],[10,2,10,3,2.],[0,5,10,3,2.]],threshold:0.0348659716546535,right_val:0.2669621109962463,left_val:0.5583708882331848},{features:[[3,2,6,10,-1.],[3,2,3,5,2.],[6,7,3,5,2.]],threshold:6.5701099811121821e-004,right_val:0.2988890111446381,left_val:0.5627313256263733},{features:[[13,10,3,4,-1.],[13,12,3,2,2.]],threshold:-0.0243391301482916,right_val:0.5108863115310669,left_val:0.2771185040473938},{features:[[4,10,3,4,-1.],[4,12,3,2,2.]],threshold:5.9435202274471521e-004,right_val:0.3120341897010803,left_val:0.5580651760101318},{features:[[7,5,6,3,-1.],[9,5,2,3,3.]],threshold:2.2971509024500847e-003,right_val:0.5679075717926025,left_val:0.3330250084400177},{features:[[7,6,6,8,-1.],[7,10,6,4,2.]],threshold:-3.7801829166710377e-003,right_val:0.5344808101654053,left_val:0.2990534901618958},{features:[[0,11,20,6,-1.],[0,14,20,3,2.]],threshold:-0.1342066973447800,right_val:0.5392568111419678,left_val:0.1463858932256699},{features:[[4,13,4,6,-1.],[4,13,2,3,2.],[6,16,2,3,2.]],threshold:7.5224548345431685e-004,right_val:0.5692734718322754,left_val:0.3746953904628754},{features:[[6,0,8,12,-1.],[10,0,4,6,2.],[6,6,4,6,2.]],threshold:-0.0405455417931080,right_val:0.5484297871589661,left_val:0.2754747867584229},{features:[[2,0,15,2,-1.],[2,1,15,1,2.]],threshold:1.2572970008477569e-003,right_val:0.5756075978279114,left_val:0.3744584023952484},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-7.4249948374927044e-003,right_val:0.4728231132030487,left_val:0.7513859272003174},{features:[[3,12,1,2,-1.],[3,13,1,1,2.]],threshold:5.0908129196614027e-004,right_val:0.2932321131229401,left_val:0.5404896736145020},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-1.2808450264856219e-003,right_val:0.4273349046707153,left_val:0.6169779896736145},{features:[[7,3,3,1,-1.],[8,3,1,1,3.]],threshold:-1.8348860321566463e-003,right_val:0.5206472277641296,left_val:0.2048496007919312},{features:[[17,7,3,6,-1.],[17,9,3,2,3.]],threshold:0.0274848695844412,right_val:0.1675522029399872,left_val:0.5252984762191773},{features:[[7,2,3,2,-1.],[8,2,1,2,3.]],threshold:2.2372419480234385e-003,right_val:0.2777658104896545,left_val:0.5267782807350159},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:-8.8635291904211044e-003,right_val:0.4812048971652985,left_val:0.6954557895660400},{features:[[4,4,5,3,-1.],[4,5,5,1,3.]],threshold:4.1753971017897129e-003,right_val:0.6349195837974548,left_val:0.4291887879371643},{features:[[19,3,1,2,-1.],[19,4,1,1,2.]],threshold:-1.7098189564421773e-003,right_val:0.5361248850822449,left_val:0.2930536866188049},{features:[[5,5,4,3,-1.],[5,6,4,1,3.]],threshold:6.5328548662364483e-003,right_val:0.7409694194793701,left_val:0.4495325088500977},{features:[[17,7,3,6,-1.],[17,9,3,2,3.]],threshold:-9.5372907817363739e-003,right_val:0.5416501760482788,left_val:0.3149119913578033},{features:[[0,7,3,6,-1.],[0,9,3,2,3.]],threshold:0.0253109894692898,right_val:0.1311707943677902,left_val:0.5121892094612122},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:0.0364609695971012,right_val:0.2591339945793152,left_val:0.5175911784172058},{features:[[0,4,5,6,-1.],[0,6,5,2,3.]],threshold:0.0208543296903372,right_val:0.1582316011190414,left_val:0.5137140154838562},{features:[[10,5,6,2,-1.],[12,5,2,2,3.]],threshold:-8.7207747856155038e-004,right_val:0.4398978948593140,left_val:0.5574309825897217},{features:[[4,5,6,2,-1.],[6,5,2,2,3.]],threshold:-1.5227000403683633e-005,right_val:0.3708069920539856,left_val:0.5548940896987915},{features:[[8,1,4,6,-1.],[8,3,4,2,3.]],threshold:-8.4316509310156107e-004,right_val:0.5554211139678955,left_val:0.3387419879436493},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:3.6037859972566366e-003,right_val:0.3411171138286591,left_val:0.5358061790466309},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-6.8057891912758350e-003,right_val:0.4345862865447998,left_val:0.6125202775001526},{features:[[0,1,5,9,-1.],[0,4,5,3,3.]],threshold:-0.0470216609537601,right_val:0.5193738937377930,left_val:0.2358165979385376},{features:[[16,0,4,15,-1.],[16,0,2,15,2.]],threshold:-0.0369541086256504,right_val:0.4760943949222565,left_val:0.7323111295700073},{features:[[1,10,3,2,-1.],[1,11,3,1,2.]],threshold:1.0439479956403375e-003,right_val:0.3411330878734589,left_val:0.5419455170631409},{features:[[14,4,1,10,-1.],[14,9,1,5,2.]],threshold:-2.1050689974799752e-004,right_val:0.5554947257041931,left_val:0.2821694016456604},{features:[[0,1,4,12,-1.],[2,1,2,12,2.]],threshold:-0.0808315873146057,right_val:0.4697434902191162,left_val:0.9129930138587952},{features:[[11,11,4,2,-1.],[11,11,2,2,2.]],threshold:-3.6579059087671340e-004,right_val:0.3978292942047119,left_val:0.6022670269012451},{features:[[5,11,4,2,-1.],[7,11,2,2,2.]],threshold:-1.2545920617412776e-004,right_val:0.3845539987087250,left_val:0.5613213181495667},{features:[[3,8,15,5,-1.],[8,8,5,5,3.]],threshold:-0.0687864869832993,right_val:0.5300496816635132,left_val:0.2261611968278885},{features:[[0,0,6,10,-1.],[3,0,3,10,2.]],threshold:0.0124157899990678,right_val:0.5828812122344971,left_val:0.4075691998004913},{features:[[11,4,3,2,-1.],[12,4,1,2,3.]],threshold:-4.7174817882478237e-003,right_val:0.5267757773399353,left_val:0.2827253937721252},{features:[[8,12,3,8,-1.],[8,16,3,4,2.]],threshold:0.0381368584930897,right_val:0.1023615971207619,left_val:0.5074741244316101},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-2.8168049175292253e-003,right_val:0.4359692931175232,left_val:0.6169006824493408},{features:[[7,14,4,3,-1.],[7,15,4,1,3.]],threshold:8.1303603947162628e-003,right_val:0.7606095075607300,left_val:0.4524433016777039},{features:[[11,4,3,2,-1.],[12,4,1,2,3.]],threshold:6.0056019574403763e-003,right_val:0.1859712004661560,left_val:0.5240408778190613},{features:[[3,15,14,4,-1.],[3,15,7,2,2.],[10,17,7,2,2.]],threshold:0.0191393196582794,right_val:0.2332071959972382,left_val:0.5209379196166992},{features:[[2,2,16,4,-1.],[10,2,8,2,2.],[2,4,8,2,2.]],threshold:0.0164457596838474,right_val:0.3264234960079193,left_val:0.5450702905654907},{features:[[0,8,6,12,-1.],[3,8,3,12,2.]],threshold:-0.0373568907380104,right_val:0.4533241987228394,left_val:0.6999046802520752},{features:[[5,7,10,2,-1.],[5,7,5,2,2.]],threshold:-0.0197279006242752,right_val:0.5412809848785400,left_val:0.2653664946556091},{features:[[9,7,2,5,-1.],[10,7,1,5,2.]],threshold:6.6972579807043076e-003,right_val:0.7138652205467224,left_val:0.4480566084384918},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:7.4457528535276651e-004,right_val:0.5471320152282715,left_val:0.4231350123882294},{features:[[0,13,8,2,-1.],[0,14,8,1,2.]],threshold:1.1790640419349074e-003,right_val:0.3130455017089844,left_val:0.5341702103614807},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:0.0349806100130081,right_val:0.3430530130863190,left_val:0.5118659734725952},{features:[[1,7,6,4,-1.],[1,7,3,2,2.],[4,9,3,2,2.]],threshold:5.6859792675822973e-004,right_val:0.5468639731407166,left_val:0.3532187044620514},{features:[[12,6,1,12,-1.],[12,12,1,6,2.]],threshold:-0.0113406497985125,right_val:0.5348700881004334,left_val:0.2842353880405426},{features:[[9,5,2,6,-1.],[10,5,1,6,2.]],threshold:-6.6228108480572701e-003,right_val:0.4492664933204651,left_val:0.6883640289306641},{features:[[14,12,2,3,-1.],[14,13,2,1,3.]],threshold:-8.0160330981016159e-003,right_val:0.5224308967590332,left_val:0.1709893941879273},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:1.4206819469109178e-003,right_val:0.2993383109569550,left_val:0.5290846228599548},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-2.7801711112260818e-003,right_val:0.4460499882698059,left_val:0.6498854160308838},{features:[[5,2,2,4,-1.],[5,2,1,2,2.],[6,4,1,2,2.]],threshold:-1.4747589593753219e-003,right_val:0.5388113260269165,left_val:0.3260438144207001},{features:[[5,5,11,3,-1.],[5,6,11,1,3.]],threshold:-0.0238303393125534,right_val:0.4801219999790192,left_val:0.7528941035270691},{features:[[7,6,4,12,-1.],[7,12,4,6,2.]],threshold:6.9369790144264698e-003,right_val:0.3261427879333496,left_val:0.5335165858268738},{features:[[12,13,8,5,-1.],[12,13,4,5,2.]],threshold:8.2806255668401718e-003,right_val:0.5737829804420471,left_val:0.4580394029617310},{features:[[7,6,1,12,-1.],[7,12,1,6,2.]],threshold:-0.0104395002126694,right_val:0.5233827829360962,left_val:0.2592320144176483}],threshold:34.5541114807128910},{simpleClassifiers:[{features:[[1,2,6,3,-1.],[4,2,3,3,2.]],threshold:7.2006587870419025e-003,right_val:0.6849808096885681,left_val:0.3258886039257050},{features:[[9,5,6,10,-1.],[12,5,3,5,2.],[9,10,3,5,2.]],threshold:-2.8593589086085558e-003,right_val:0.2537829875946045,left_val:0.5838881134986877},{features:[[5,5,8,12,-1.],[5,5,4,6,2.],[9,11,4,6,2.]],threshold:6.8580528022721410e-004,right_val:0.2812424004077911,left_val:0.5708081722259522},{features:[[0,7,20,6,-1.],[0,9,20,2,3.]],threshold:7.9580191522836685e-003,right_val:0.5544260740280151,left_val:0.2501051127910614},{features:[[4,2,2,2,-1.],[4,3,2,1,2.]],threshold:-1.2124150525778532e-003,right_val:0.5433350205421448,left_val:0.2385368049144745},{features:[[4,18,12,2,-1.],[8,18,4,2,3.]],threshold:7.9426132142543793e-003,right_val:0.6220757961273193,left_val:0.3955070972442627},{features:[[7,4,4,16,-1.],[7,12,4,8,2.]],threshold:2.4630590341985226e-003,right_val:0.2992357909679413,left_val:0.5639708042144775},{features:[[7,6,7,8,-1.],[7,10,7,4,2.]],threshold:-6.0396599583327770e-003,right_val:0.5411676764488220,left_val:0.2186512947082520},{features:[[6,3,3,1,-1.],[7,3,1,1,3.]],threshold:-1.2988339876756072e-003,right_val:0.5364584922790527,left_val:0.2350706011056900},{features:[[11,15,2,4,-1.],[11,17,2,2,2.]],threshold:2.2299369447864592e-004,right_val:0.5729606151580811,left_val:0.3804112970829010},{features:[[3,5,4,8,-1.],[3,9,4,4,2.]],threshold:1.4654280385002494e-003,right_val:0.5258268713951111,left_val:0.2510167956352234},{features:[[7,1,6,12,-1.],[7,7,6,6,2.]],threshold:-8.1210042117163539e-004,right_val:0.3851158916950226,left_val:0.5992823839187622},{features:[[4,6,6,2,-1.],[6,6,2,2,3.]],threshold:-1.3836020370945334e-003,right_val:0.3636586964130402,left_val:0.5681396126747131},{features:[[16,4,4,6,-1.],[16,6,4,2,3.]],threshold:-0.0279364492744207,right_val:0.5377560257911682,left_val:0.1491317003965378},{features:[[3,3,5,2,-1.],[3,4,5,1,2.]],threshold:-4.6919551095925272e-004,right_val:0.5572484731674194,left_val:0.3692429959774017},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-4.9829659983515739e-003,right_val:0.4532504081726074,left_val:0.6758509278297424},{features:[[2,16,4,2,-1.],[2,17,4,1,2.]],threshold:1.8815309740602970e-003,right_val:0.2932539880275726,left_val:0.5368022918701172},{features:[[7,13,6,6,-1.],[10,13,3,3,2.],[7,16,3,3,2.]],threshold:-0.0190675500780344,right_val:0.5330067276954651,left_val:0.1649377048015595},{features:[[7,0,3,4,-1.],[8,0,1,4,3.]],threshold:-4.6906559728085995e-003,right_val:0.5119361877441406,left_val:0.1963925957679749},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:5.9777139686048031e-003,right_val:0.7008398175239563,left_val:0.4671171903610230},{features:[[0,4,4,6,-1.],[0,6,4,2,3.]],threshold:-0.0333031304180622,right_val:0.5104162096977234,left_val:0.1155416965484619},{features:[[5,6,12,3,-1.],[9,6,4,3,3.]],threshold:0.0907441079616547,right_val:0.1306173056364059,left_val:0.5149660110473633},{features:[[7,6,6,14,-1.],[9,6,2,14,3.]],threshold:9.3555898638442159e-004,right_val:0.5439859032630920,left_val:0.3605481088161469},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:0.0149016501381993,right_val:0.7687569856643677,left_val:0.4886212050914764},{features:[[6,12,2,4,-1.],[6,14,2,2,2.]],threshold:6.1594118596985936e-004,right_val:0.3240939080715179,left_val:0.5356813073158264},{features:[[10,12,7,6,-1.],[10,14,7,2,3.]],threshold:-0.0506709888577461,right_val:0.5230404138565064,left_val:0.1848621964454651},{features:[[1,0,15,2,-1.],[1,1,15,1,2.]],threshold:6.8665749859064817e-004,right_val:0.5517945885658264,left_val:0.3840579986572266},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:8.3712432533502579e-003,right_val:0.6131753921508789,left_val:0.4288564026355743},{features:[[5,3,3,1,-1.],[6,3,1,1,3.]],threshold:-1.2953069526702166e-003,right_val:0.5280737876892090,left_val:0.2913674116134644},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:-0.0419416800141335,right_val:0.4856030941009522,left_val:0.7554799914360046},{features:[[0,3,20,10,-1.],[0,8,20,5,2.]],threshold:-0.0235293805599213,right_val:0.5256081223487854,left_val:0.2838279902935028},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:0.0408574491739273,right_val:0.6277297139167786,left_val:0.4870935082435608},{features:[[0,0,6,6,-1.],[3,0,3,6,2.]],threshold:-0.0254068691283464,right_val:0.4575029015541077,left_val:0.7099707722663879},{features:[[19,15,1,2,-1.],[19,16,1,1,2.]],threshold:-4.1415440500713885e-004,right_val:0.5469412207603455,left_val:0.4030886888504028},{features:[[0,2,4,8,-1.],[2,2,2,8,2.]],threshold:0.0218241196125746,right_val:0.6768701076507568,left_val:0.4502024054527283},{features:[[2,1,18,4,-1.],[11,1,9,2,2.],[2,3,9,2,2.]],threshold:0.0141140399500728,right_val:0.3791700005531311,left_val:0.5442860722541809},{features:[[8,12,1,2,-1.],[8,13,1,1,2.]],threshold:6.7214590671937913e-005,right_val:0.5873476266860962,left_val:0.4200463891029358},{features:[[5,2,10,6,-1.],[10,2,5,3,2.],[5,5,5,3,2.]],threshold:-7.9417638480663300e-003,right_val:0.5585265755653381,left_val:0.3792561888694763},{features:[[9,7,2,4,-1.],[10,7,1,4,2.]],threshold:-7.2144409641623497e-003,right_val:0.4603548943996429,left_val:0.7253103852272034},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:2.5817339774221182e-003,right_val:0.5900238752365112,left_val:0.4693301916122437},{features:[[4,5,12,8,-1.],[8,5,4,8,3.]],threshold:0.1340931951999664,right_val:0.1808844953775406,left_val:0.5149213075637817},{features:[[15,15,4,3,-1.],[15,16,4,1,3.]],threshold:2.2962710354477167e-003,right_val:0.3717867136001587,left_val:0.5399743914604187},{features:[[8,18,3,1,-1.],[9,18,1,1,3.]],threshold:-2.1575849968940020e-003,right_val:0.5148863792419434,left_val:0.2408495992422104},{features:[[9,13,4,3,-1.],[9,14,4,1,3.]],threshold:-4.9196188338100910e-003,right_val:0.4738740026950836,left_val:0.6573588252067566},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:1.6267469618469477e-003,right_val:0.6303114295005798,left_val:0.4192821979522705},{features:[[19,15,1,2,-1.],[19,16,1,1,2.]],threshold:3.3413388882763684e-004,right_val:0.3702101111412048,left_val:0.5540298223495483},{features:[[0,15,8,4,-1.],[0,17,8,2,2.]],threshold:-0.0266980808228254,right_val:0.5101410746574402,left_val:0.1710917949676514},{features:[[9,3,6,4,-1.],[11,3,2,4,3.]],threshold:-0.0305618792772293,right_val:0.5168793797492981,left_val:0.1904218047857285},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:2.8511548880487680e-003,right_val:0.6313853859901428,left_val:0.4447506964206696},{features:[[3,14,14,6,-1.],[3,16,14,2,3.]],threshold:-0.0362114794552326,right_val:0.5377349257469177,left_val:0.2490727007389069},{features:[[6,3,6,6,-1.],[6,6,6,3,2.]],threshold:-2.4115189444273710e-003,right_val:0.3664236962795258,left_val:0.5381243228912354},{features:[[5,11,10,6,-1.],[5,14,10,3,2.]],threshold:-7.7253201743587852e-004,right_val:0.3541550040245056,left_val:0.5530232191085815},{features:[[3,10,3,4,-1.],[4,10,1,4,3.]],threshold:2.9481729143299162e-004,right_val:0.5667243003845215,left_val:0.4132699072360992},{features:[[13,9,2,2,-1.],[13,9,1,2,2.]],threshold:-6.2334560789167881e-003,right_val:0.5198668837547302,left_val:0.0987872332334518},{features:[[5,3,6,4,-1.],[7,3,2,4,3.]],threshold:-0.0262747295200825,right_val:0.5028107166290283,left_val:0.0911274924874306},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:5.3212260827422142e-003,right_val:0.6222720742225647,left_val:0.4726648926734924},{features:[[2,12,2,3,-1.],[2,13,2,1,3.]],threshold:-4.1129058226943016e-003,right_val:0.5137804746627808,left_val:0.2157457023859024},{features:[[9,8,3,12,-1.],[9,12,3,4,3.]],threshold:3.2457809429615736e-003,right_val:0.3721776902675629,left_val:0.5410770773887634},{features:[[3,14,4,6,-1.],[3,14,2,3,2.],[5,17,2,3,2.]],threshold:-0.0163597092032433,right_val:0.4685291945934296,left_val:0.7787874937057495},{features:[[16,15,2,2,-1.],[16,16,2,1,2.]],threshold:3.2166109303943813e-004,right_val:0.4240373969078064,left_val:0.5478987097740173},{features:[[2,15,2,2,-1.],[2,16,2,1,2.]],threshold:6.4452440710738301e-004,right_val:0.3501324951648712,left_val:0.5330560803413391},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-7.8909732401371002e-003,right_val:0.4726569056510925,left_val:0.6923521161079407},{features:[[0,7,20,1,-1.],[10,7,10,1,2.]],threshold:0.0483362115919590,right_val:0.0757492035627365,left_val:0.5055900216102600},{features:[[7,6,8,3,-1.],[7,6,4,3,2.]],threshold:-7.5178127735853195e-004,right_val:0.5538573861122131,left_val:0.3783741891384125},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-2.4953910615295172e-003,right_val:0.5359612107276917,left_val:0.3081651031970978},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-2.2385010961443186e-003,right_val:0.4649342894554138,left_val:0.6633958816528320},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-1.7988430336117744e-003,right_val:0.4347187876701355,left_val:0.6596844792366028},{features:[[11,1,3,5,-1.],[12,1,1,5,3.]],threshold:8.7860915809869766e-003,right_val:0.2315579950809479,left_val:0.5231832861900330},{features:[[6,2,3,6,-1.],[7,2,1,6,3.]],threshold:3.6715380847454071e-003,right_val:0.2977376878261566,left_val:0.5204250216484070},{features:[[14,14,6,5,-1.],[14,14,3,5,2.]],threshold:-0.0353364497423172,right_val:0.4861505031585693,left_val:0.7238878011703491},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-6.9189240457490087e-004,right_val:0.5229824781417847,left_val:0.3105022013187408},{features:[[10,7,1,3,-1.],[10,8,1,1,3.]],threshold:-3.3946109469980001e-003,right_val:0.5210173726081848,left_val:0.3138968050479889},{features:[[6,6,2,2,-1.],[6,6,1,1,2.],[7,7,1,1,2.]],threshold:9.8569283727556467e-004,right_val:0.6585097908973694,left_val:0.4536580145359039},{features:[[2,11,18,4,-1.],[11,11,9,2,2.],[2,13,9,2,2.]],threshold:-0.0501631014049053,right_val:0.5198916792869568,left_val:0.1804454028606415},{features:[[6,6,2,2,-1.],[6,6,1,1,2.],[7,7,1,1,2.]],threshold:-2.2367259953171015e-003,right_val:0.4651359021663666,left_val:0.7255702018737793},{features:[[0,15,20,2,-1.],[0,16,20,1,2.]],threshold:7.4326287722215056e-004,right_val:0.5898545980453491,left_val:0.4412921071052551},{features:[[4,14,2,3,-1.],[4,15,2,1,3.]],threshold:-9.3485182151198387e-004,right_val:0.5366017818450928,left_val:0.3500052988529205},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0174979399889708,right_val:0.8315284848213196,left_val:0.4912194907665253},{features:[[8,7,2,3,-1.],[8,8,2,1,3.]],threshold:-1.5200000489130616e-003,right_val:0.5370560288429260,left_val:0.3570275902748108},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:7.8003940870985389e-004,right_val:0.5967335104942322,left_val:0.4353772103786469}],threshold:39.1072883605957030},{simpleClassifiers:[{features:[[5,4,10,4,-1.],[5,6,10,2,2.]],threshold:-9.9945552647113800e-003,right_val:0.3054533004760742,left_val:0.6162583231925964},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-1.1085229925811291e-003,right_val:0.3155578076839447,left_val:0.5818294882774353},{features:[[4,7,3,6,-1.],[4,9,3,2,3.]],threshold:1.0364380432292819e-003,right_val:0.5692911744117737,left_val:0.2552052140235901},{features:[[11,15,4,4,-1.],[13,15,2,2,2.],[11,17,2,2,2.]],threshold:6.8211311008781195e-004,right_val:0.5934931039810181,left_val:0.3685089945793152},{features:[[7,8,4,2,-1.],[7,9,4,1,2.]],threshold:-6.8057340104132891e-004,right_val:0.5474792122840881,left_val:0.2332392036914825},{features:[[13,1,4,3,-1.],[13,1,2,3,2.]],threshold:2.6068789884448051e-004,right_val:0.5667545795440674,left_val:0.3257457017898560},{features:[[5,15,4,4,-1.],[5,15,2,2,2.],[7,17,2,2,2.]],threshold:5.1607372006401420e-004,right_val:0.5845472812652588,left_val:0.3744716942310333},{features:[[9,5,4,7,-1.],[9,5,2,7,2.]],threshold:8.5007521556690335e-004,right_val:0.5522807240486145,left_val:0.3420371115207672},{features:[[5,6,8,3,-1.],[9,6,4,3,2.]],threshold:-1.8607829697430134e-003,right_val:0.5375424027442932,left_val:0.2804419994354248},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-1.5033970121294260e-003,right_val:0.5498952269554138,left_val:0.2579050958156586},{features:[[7,15,5,3,-1.],[7,16,5,1,3.]],threshold:2.3478909861296415e-003,right_val:0.6313710808753967,left_val:0.4175156056880951},{features:[[11,10,4,3,-1.],[11,10,2,3,2.]],threshold:-2.8880240279249847e-004,right_val:0.4052666127681732,left_val:0.5865169763565064},{features:[[6,9,8,10,-1.],[6,14,8,5,2.]],threshold:8.9405477046966553e-003,right_val:0.2318654060363770,left_val:0.5211141109466553},{features:[[10,11,6,2,-1.],[10,11,3,2,2.]],threshold:-0.0193277392536402,right_val:0.5241525769233704,left_val:0.2753432989120483},{features:[[4,11,6,2,-1.],[7,11,3,2,2.]],threshold:-2.0202060113660991e-004,right_val:0.3677195906639099,left_val:0.5722978711128235},{features:[[11,3,8,1,-1.],[11,3,4,1,2.]],threshold:2.1179069299250841e-003,right_val:0.5542430877685547,left_val:0.4466108083724976},{features:[[6,3,3,2,-1.],[7,3,1,2,3.]],threshold:-1.7743760254234076e-003,right_val:0.5300959944725037,left_val:0.2813253104686737},{features:[[14,5,6,5,-1.],[14,5,3,5,2.]],threshold:4.2234458960592747e-003,right_val:0.5795428156852722,left_val:0.4399709999561310},{features:[[7,5,2,12,-1.],[7,11,2,6,2.]],threshold:-0.0143752200528979,right_val:0.5292059183120728,left_val:0.2981117963790894},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-0.0153491804376245,right_val:0.4748171865940094,left_val:0.7705215215682983},{features:[[4,1,2,3,-1.],[5,1,1,3,2.]],threshold:1.5152279956964776e-005,right_val:0.5576897263526917,left_val:0.3718844056129456},{features:[[18,3,2,6,-1.],[18,5,2,2,3.]],threshold:-9.1293919831514359e-003,right_val:0.5286766886711121,left_val:0.3615196049213409},{features:[[0,3,2,6,-1.],[0,5,2,2,3.]],threshold:2.2512159775942564e-003,right_val:0.3486298024654388,left_val:0.5364704728126526},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-4.9696918576955795e-003,right_val:0.4676836133003235,left_val:0.6927651762962341},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:-0.0128290103748441,right_val:0.4660735130310059,left_val:0.7712153792381287},{features:[[18,0,2,6,-1.],[18,2,2,2,3.]],threshold:-9.3660065904259682e-003,right_val:0.5351287722587585,left_val:0.3374983966350555},{features:[[0,0,2,6,-1.],[0,2,2,2,3.]],threshold:3.2452319283038378e-003,right_val:0.3289610147476196,left_val:0.5325189828872681},{features:[[8,14,6,3,-1.],[8,15,6,1,3.]],threshold:-0.0117235602810979,right_val:0.4754300117492676,left_val:0.6837652921676636},{features:[[7,4,2,4,-1.],[8,4,1,4,2.]],threshold:2.9257940695970319e-005,right_val:0.5360502004623413,left_val:0.3572087883949280},{features:[[8,5,4,6,-1.],[8,7,4,2,3.]],threshold:-2.2244219508138485e-005,right_val:0.3552064001560211,left_val:0.5541427135467529},{features:[[6,4,2,2,-1.],[7,4,1,2,2.]],threshold:5.0881509669125080e-003,right_val:0.1256462037563324,left_val:0.5070844292640686},{features:[[3,14,14,4,-1.],[10,14,7,2,2.],[3,16,7,2,2.]],threshold:0.0274296794086695,right_val:0.1625818014144898,left_val:0.5269560217857361},{features:[[6,15,6,2,-1.],[6,15,3,1,2.],[9,16,3,1,2.]],threshold:-6.4142867922782898e-003,right_val:0.4584197103977203,left_val:0.7145588994026184},{features:[[14,15,6,2,-1.],[14,16,6,1,2.]],threshold:3.3479959238320589e-003,right_val:0.3494696915149689,left_val:0.5398612022399902},{features:[[2,12,12,8,-1.],[2,16,12,4,2.]],threshold:-0.0826354920864105,right_val:0.5160226225852966,left_val:0.2439192980527878},{features:[[7,7,7,2,-1.],[7,8,7,1,2.]],threshold:1.0261740535497665e-003,right_val:0.5767908096313477,left_val:0.3886891901493073},{features:[[0,2,18,2,-1.],[0,3,18,1,2.]],threshold:-1.6307090409100056e-003,right_val:0.5347700715065002,left_val:0.3389458060264587},{features:[[9,6,2,5,-1.],[9,6,1,5,2.]],threshold:2.4546680506318808e-003,right_val:0.6387246847152710,left_val:0.4601413905620575},{features:[[7,5,3,8,-1.],[8,5,1,8,3.]],threshold:-9.9476519972085953e-004,right_val:0.4120396077632904,left_val:0.5769879221916199},{features:[[9,6,3,4,-1.],[10,6,1,4,3.]],threshold:0.0154091902077198,right_val:0.7089822292327881,left_val:0.4878709018230438},{features:[[4,13,3,2,-1.],[4,14,3,1,2.]],threshold:1.1784400558099151e-003,right_val:0.2895244956016541,left_val:0.5263553261756897},{features:[[9,4,6,3,-1.],[11,4,2,3,3.]],threshold:-0.0277019198983908,right_val:0.5219606757164002,left_val:0.1498828977346420},{features:[[5,4,6,3,-1.],[7,4,2,3,3.]],threshold:-0.0295053999871016,right_val:0.4999816119670868,left_val:0.0248933192342520},{features:[[14,11,5,2,-1.],[14,12,5,1,2.]],threshold:4.5159430010244250e-004,right_val:0.4029662907123566,left_val:0.5464622974395752},{features:[[1,2,6,9,-1.],[3,2,2,9,3.]],threshold:7.1772639639675617e-003,right_val:0.5866296887397766,left_val:0.4271056950092316},{features:[[14,6,6,13,-1.],[14,6,3,13,2.]],threshold:-0.0741820484399796,right_val:0.4919027984142304,left_val:0.6874179244041443},{features:[[3,6,14,8,-1.],[3,6,7,4,2.],[10,10,7,4,2.]],threshold:-0.0172541607171297,right_val:0.5348739027976990,left_val:0.3370676040649414},{features:[[16,0,4,11,-1.],[16,0,2,11,2.]],threshold:0.0148515598848462,right_val:0.6129904985427856,left_val:0.4626792967319489},{features:[[3,4,12,12,-1.],[3,4,6,6,2.],[9,10,6,6,2.]],threshold:0.0100020002573729,right_val:0.3423453867435455,left_val:0.5346122980117798},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:2.0138120744377375e-003,right_val:0.5824304223060608,left_val:0.4643830060958862},{features:[[4,11,4,2,-1.],[4,12,4,1,2.]],threshold:1.5135470312088728e-003,right_val:0.2856149971485138,left_val:0.5196396112442017},{features:[[10,7,2,2,-1.],[10,7,1,2,2.]],threshold:3.1381431035697460e-003,right_val:0.5958529710769653,left_val:0.4838162958621979},{features:[[8,7,2,2,-1.],[9,7,1,2,2.]],threshold:-5.1450440660119057e-003,right_val:0.4741412103176117,left_val:0.8920302987098694},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-4.4736708514392376e-003,right_val:0.5337278842926025,left_val:0.2033942937850952},{features:[[5,6,3,3,-1.],[5,7,3,1,3.]],threshold:1.9628470763564110e-003,right_val:0.6725863218307495,left_val:0.4571633934974670},{features:[[10,0,3,3,-1.],[11,0,1,3,3.]],threshold:5.4260450415313244e-003,right_val:0.2845670878887177,left_val:0.5271108150482178},{features:[[5,6,6,2,-1.],[5,6,3,1,2.],[8,7,3,1,2.]],threshold:4.9611460417509079e-004,right_val:0.5718597769737244,left_val:0.4138312935829163},{features:[[12,16,4,3,-1.],[12,17,4,1,3.]],threshold:9.3728788197040558e-003,right_val:0.2804847061634064,left_val:0.5225151181221008},{features:[[3,12,3,2,-1.],[3,13,3,1,2.]],threshold:6.0500897234305739e-004,right_val:0.3314523994922638,left_val:0.5236768722534180},{features:[[9,12,3,2,-1.],[9,13,3,1,2.]],threshold:5.6792551185935736e-004,right_val:0.6276971101760864,left_val:0.4531059861183167},{features:[[1,11,16,4,-1.],[1,11,8,2,2.],[9,13,8,2,2.]],threshold:0.0246443394571543,right_val:0.2017143964767456,left_val:0.5130851864814758},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-0.0102904504165053,right_val:0.4876641035079956,left_val:0.7786595225334168},{features:[[4,4,5,3,-1.],[4,5,5,1,3.]],threshold:2.0629419013857841e-003,right_val:0.5881264209747315,left_val:0.4288598895072937},{features:[[12,16,4,3,-1.],[12,17,4,1,3.]],threshold:-5.0519481301307678e-003,right_val:0.5286008715629578,left_val:0.3523977994918823},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-5.7692620903253555e-003,right_val:0.4588094055652618,left_val:0.6841086149215698},{features:[[9,0,2,2,-1.],[9,1,2,1,2.]],threshold:-4.5789941214025021e-004,right_val:0.5485978126525879,left_val:0.3565520048141480},{features:[[8,9,4,2,-1.],[8,10,4,1,2.]],threshold:-7.5918837683275342e-004,right_val:0.5254197120666504,left_val:0.3368793129920960},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:-1.7737259622663260e-003,right_val:0.5454015135765076,left_val:0.3422161042690277},{features:[[0,13,6,3,-1.],[2,13,2,3,3.]],threshold:-8.5610467940568924e-003,right_val:0.4485856890678406,left_val:0.6533612012863159},{features:[[16,14,3,2,-1.],[16,15,3,1,2.]],threshold:1.7277270089834929e-003,right_val:0.3925352990627289,left_val:0.5307580232620239},{features:[[1,18,18,2,-1.],[7,18,6,2,3.]],threshold:-0.0281996093690395,right_val:0.4588584005832672,left_val:0.6857458949089050},{features:[[16,14,3,2,-1.],[16,15,3,1,2.]],threshold:-1.7781109781935811e-003,right_val:0.5369856953620911,left_val:0.4037851095199585},{features:[[1,14,3,2,-1.],[1,15,3,1,2.]],threshold:3.3177141449414194e-004,right_val:0.3705750107765198,left_val:0.5399798750877380},{features:[[7,14,6,3,-1.],[7,15,6,1,3.]],threshold:2.6385399978607893e-003,right_val:0.6452730894088745,left_val:0.4665437042713165},{features:[[5,14,8,3,-1.],[5,15,8,1,3.]],threshold:-2.1183069329708815e-003,right_val:0.4064677059650421,left_val:0.5914781093597412},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:-0.0147732896730304,right_val:0.5294762849807739,left_val:0.3642038106918335},{features:[[6,6,4,14,-1.],[8,6,2,14,2.]],threshold:-0.0168154407292604,right_val:0.5144972801208496,left_val:0.2664231956005096},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:-6.3370140269398689e-003,right_val:0.4852097928524017,left_val:0.6779531240463257},{features:[[7,16,6,1,-1.],[9,16,2,1,3.]],threshold:-4.4560048991115764e-005,right_val:0.4153054058551788,left_val:0.5613964796066284},{features:[[9,12,3,3,-1.],[9,13,3,1,3.]],threshold:-1.0240620467811823e-003,right_val:0.4566304087638855,left_val:0.5964478254318237},{features:[[7,0,3,3,-1.],[8,0,1,3,3.]],threshold:-2.3161689750850201e-003,right_val:0.5188159942626953,left_val:0.2976115047931671},{features:[[4,0,16,18,-1.],[4,9,16,9,2.]],threshold:0.5321757197380066,right_val:0.2202631980180740,left_val:0.5187839269638062},{features:[[1,1,16,14,-1.],[1,8,16,7,2.]],threshold:-0.1664305031299591,right_val:0.5060343146324158,left_val:0.1866022944450378},{features:[[3,9,15,4,-1.],[8,9,5,4,3.]],threshold:0.1125352978706360,right_val:0.1185022965073586,left_val:0.5212125182151794},{features:[[6,12,7,3,-1.],[6,13,7,1,3.]],threshold:9.3046864494681358e-003,right_val:0.6826149225234985,left_val:0.4589937031269074},{features:[[14,15,2,3,-1.],[14,16,2,1,3.]],threshold:-4.6255099587142467e-003,right_val:0.5225008726119995,left_val:0.3079940974712372},{features:[[2,3,16,14,-1.],[2,3,8,7,2.],[10,10,8,7,2.]],threshold:-0.1111646965146065,right_val:0.5080801844596863,left_val:0.2101044058799744},{features:[[16,2,4,18,-1.],[18,2,2,9,2.],[16,11,2,9,2.]],threshold:-0.0108884396031499,right_val:0.4790464043617249,left_val:0.5765355229377747},{features:[[4,15,2,3,-1.],[4,16,2,1,3.]],threshold:5.8564301580190659e-003,right_val:0.1563598960638046,left_val:0.5065100193023682},{features:[[16,2,4,18,-1.],[18,2,2,9,2.],[16,11,2,9,2.]],threshold:0.0548543892800808,right_val:0.7230510711669922,left_val:0.4966914951801300},{features:[[1,1,8,3,-1.],[1,2,8,1,3.]],threshold:-0.0111973397433758,right_val:0.5098798274993897,left_val:0.2194979041814804},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:4.4069071300327778e-003,right_val:0.6770902872085571,left_val:0.4778401851654053},{features:[[5,11,5,9,-1.],[5,14,5,3,3.]],threshold:-0.0636652931571007,right_val:0.5081024169921875,left_val:0.1936362981796265},{features:[[16,0,4,11,-1.],[16,0,2,11,2.]],threshold:-9.8081491887569427e-003,right_val:0.4810341000556946,left_val:0.5999063253402710},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:-2.1717099007219076e-003,right_val:0.5235472917556763,left_val:0.3338333964347839},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:-0.0133155202493072,right_val:0.4919213056564331,left_val:0.6617069840431213},{features:[[1,3,3,7,-1.],[2,3,1,7,3.]],threshold:2.5442079640924931e-003,right_val:0.6082184910774231,left_val:0.4488744139671326},{features:[[7,8,6,12,-1.],[7,12,6,4,3.]],threshold:0.0120378397405148,right_val:0.3292432129383087,left_val:0.5409392118453980},{features:[[0,0,4,11,-1.],[2,0,2,11,2.]],threshold:-0.0207010507583618,right_val:0.4594995975494385,left_val:0.6819120049476624},{features:[[14,0,6,20,-1.],[14,0,3,20,2.]],threshold:0.0276082791388035,right_val:0.5767282843589783,left_val:0.4630792140960693},{features:[[0,3,1,2,-1.],[0,4,1,1,2.]],threshold:1.2370620388537645e-003,right_val:0.2635016143321991,left_val:0.5165379047393799},{features:[[5,5,10,8,-1.],[10,5,5,4,2.],[5,9,5,4,2.]],threshold:-0.0376693382859230,right_val:0.5278980135917664,left_val:0.2536393105983734},{features:[[4,7,12,4,-1.],[4,7,6,2,2.],[10,9,6,2,2.]],threshold:-1.8057259730994701e-003,right_val:0.5517500042915344,left_val:0.3985156118869782}],threshold:50.6104812622070310},{simpleClassifiers:[{features:[[2,1,6,4,-1.],[5,1,3,4,2.]],threshold:4.4299028813838959e-003,right_val:0.6335226297378540,left_val:0.2891018092632294},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-2.3813319858163595e-003,right_val:0.3477487862110138,left_val:0.6211789250373840},{features:[[5,6,2,6,-1.],[5,9,2,3,2.]],threshold:2.2915711160749197e-003,right_val:0.5582118034362793,left_val:0.2254412025213242},{features:[[9,16,6,4,-1.],[12,16,3,2,2.],[9,18,3,2,2.]],threshold:9.9457940086722374e-004,right_val:0.5930070877075195,left_val:0.3711710870265961},{features:[[9,4,2,12,-1.],[9,10,2,6,2.]],threshold:7.7164667891338468e-004,right_val:0.3347995877265930,left_val:0.5651720166206360},{features:[[7,1,6,18,-1.],[9,1,2,18,3.]],threshold:-1.1386410333216190e-003,right_val:0.5508630871772766,left_val:0.3069126009941101},{features:[[4,12,12,2,-1.],[8,12,4,2,3.]],threshold:-1.6403039626311511e-004,right_val:0.3699047863483429,left_val:0.5762827992439270},{features:[[8,8,6,2,-1.],[8,9,6,1,2.]],threshold:2.9793529392918572e-005,right_val:0.5437911152839661,left_val:0.2644244134426117},{features:[[8,0,3,6,-1.],[9,0,1,6,3.]],threshold:8.5774902254343033e-003,right_val:0.1795724928379059,left_val:0.5051138997077942},{features:[[11,18,3,2,-1.],[11,19,3,1,2.]],threshold:-2.6032689493149519e-004,right_val:0.4446826875209808,left_val:0.5826969146728516},{features:[[1,1,17,4,-1.],[1,3,17,2,2.]],threshold:-6.1404630541801453e-003,right_val:0.5346971750259399,left_val:0.3113852143287659},{features:[[11,8,4,12,-1.],[11,8,2,12,2.]],threshold:-0.0230869501829147,right_val:0.5331197977066040,left_val:0.3277946114540100},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-0.0142436502501369,right_val:0.4588063061237335,left_val:0.7381709814071655},{features:[[12,3,2,17,-1.],[12,3,1,17,2.]],threshold:0.0194871295243502,right_val:0.2274471968412399,left_val:0.5256630778312683},{features:[[4,7,6,1,-1.],[6,7,2,1,3.]],threshold:-9.6681108698248863e-004,right_val:0.3815006911754608,left_val:0.5511230826377869},{features:[[18,3,2,3,-1.],[18,4,2,1,3.]],threshold:3.1474709976464510e-003,right_val:0.2543726861476898,left_val:0.5425636768341065},{features:[[8,4,3,4,-1.],[8,6,3,2,2.]],threshold:-1.8026070029009134e-004,right_val:0.3406304121017456,left_val:0.5380191802978516},{features:[[4,5,12,10,-1.],[4,10,12,5,2.]],threshold:-6.0266260989010334e-003,right_val:0.5420572161674500,left_val:0.3035801947116852},{features:[[5,18,4,2,-1.],[7,18,2,2,2.]],threshold:4.4462960795499384e-004,right_val:0.5660110116004944,left_val:0.3990997076034546},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:2.2609760053455830e-003,right_val:0.3940688073635101,left_val:0.5562806725502014},{features:[[7,7,6,6,-1.],[9,7,2,6,3.]],threshold:0.0511330589652061,right_val:0.7118561863899231,left_val:0.4609653949737549},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:-0.0177863091230392,right_val:0.5322144031524658,left_val:0.2316166013479233},{features:[[8,0,3,4,-1.],[9,0,1,4,3.]],threshold:-4.9679628573358059e-003,right_val:0.5122029185295105,left_val:0.2330771982669830},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:2.0667689386755228e-003,right_val:0.6455488204956055,left_val:0.4657444059848785},{features:[[0,12,6,3,-1.],[0,13,6,1,3.]],threshold:7.4413768015801907e-003,right_val:0.2361633926630020,left_val:0.5154392123222351},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-3.6277279723435640e-003,right_val:0.4476661086082459,left_val:0.6219773292541504},{features:[[3,12,2,3,-1.],[3,13,2,1,3.]],threshold:-5.3530759178102016e-003,right_val:0.5102208256721497,left_val:0.1837355047464371},{features:[[5,6,12,7,-1.],[9,6,4,7,3.]],threshold:0.1453091949224472,right_val:0.1535930931568146,left_val:0.5145987272262573},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:2.4394490756094456e-003,right_val:0.3624661862850189,left_val:0.5343660116195679},{features:[[14,6,1,3,-1.],[14,7,1,1,3.]],threshold:-3.1283390708267689e-003,right_val:0.4845592081546783,left_val:0.6215007901191711},{features:[[2,0,3,14,-1.],[3,0,1,14,3.]],threshold:1.7940260004252195e-003,right_val:0.5824198126792908,left_val:0.4299261868000031},{features:[[12,14,5,6,-1.],[12,16,5,2,3.]],threshold:0.0362538211047649,right_val:0.1439467966556549,left_val:0.5260334014892578},{features:[[4,14,5,6,-1.],[4,16,5,2,3.]],threshold:-5.1746722310781479e-003,right_val:0.5287045240402222,left_val:0.3506538867950440},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:6.5383297624066472e-004,right_val:0.6122040152549744,left_val:0.4809640944004059},{features:[[5,0,3,14,-1.],[6,0,1,14,3.]],threshold:-0.0264802295714617,right_val:0.5045586228370667,left_val:0.1139362007379532},{features:[[10,15,2,3,-1.],[10,16,2,1,3.]],threshold:-3.0440660193562508e-003,right_val:0.4794734120368958,left_val:0.6352095007896423},{features:[[0,2,2,3,-1.],[0,3,2,1,3.]],threshold:3.6993520334362984e-003,right_val:0.2498510926961899,left_val:0.5131118297576904},{features:[[5,11,12,6,-1.],[5,14,12,3,2.]],threshold:-3.6762931267730892e-004,right_val:0.3709532022476196,left_val:0.5421394705772400},{features:[[6,11,3,9,-1.],[6,14,3,3,3.]],threshold:-0.0413822606205940,right_val:0.5081691741943359,left_val:0.1894959956407547},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:-1.0532729793339968e-003,right_val:0.4783608913421631,left_val:0.6454367041587830},{features:[[5,6,1,3,-1.],[5,7,1,1,3.]],threshold:-2.1648600231856108e-003,right_val:0.4499826133251190,left_val:0.6215031147003174},{features:[[4,9,13,3,-1.],[4,10,13,1,3.]],threshold:-5.6747748749330640e-004,right_val:0.5419334769248962,left_val:0.3712610900402069},{features:[[1,7,15,6,-1.],[6,7,5,6,3.]],threshold:0.1737584024667740,right_val:0.1215742006897926,left_val:0.5023643970489502},{features:[[4,5,12,6,-1.],[8,5,4,6,3.]],threshold:-2.9049699660390615e-003,right_val:0.5381883978843689,left_val:0.3240267932415009},{features:[[8,10,4,3,-1.],[8,11,4,1,3.]],threshold:1.2299539521336555e-003,right_val:0.5703486204147339,left_val:0.4165507853031158},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:-5.4329237900674343e-004,right_val:0.5547549128532410,left_val:0.3854042887687683},{features:[[1,11,5,3,-1.],[1,12,5,1,3.]],threshold:-8.3297258242964745e-003,right_val:0.5097082853317261,left_val:0.2204494029283524},{features:[[7,1,7,12,-1.],[7,7,7,6,2.]],threshold:-1.0417630255687982e-004,right_val:0.4303036034107208,left_val:0.5607066154479981},{features:[[0,1,6,10,-1.],[0,1,3,5,2.],[3,6,3,5,2.]],threshold:0.0312047004699707,right_val:0.6982004046440125,left_val:0.4621657133102417},{features:[[16,1,4,3,-1.],[16,2,4,1,3.]],threshold:7.8943502157926559e-003,right_val:0.2269068062305450,left_val:0.5269594192504883},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:-4.3645310215651989e-003,right_val:0.4537956118583679,left_val:0.6359223127365112},{features:[[12,2,3,5,-1.],[13,2,1,5,3.]],threshold:7.6793059706687927e-003,right_val:0.2740483880043030,left_val:0.5274767875671387},{features:[[0,3,4,6,-1.],[0,5,4,2,3.]],threshold:-0.0254311393946409,right_val:0.5071732997894287,left_val:0.2038519978523254},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:8.2000601105391979e-004,right_val:0.6119868159294128,left_val:0.4587455093860626},{features:[[8,18,3,1,-1.],[9,18,1,1,3.]],threshold:2.9284600168466568e-003,right_val:0.2028204947710037,left_val:0.5071274042129517},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:4.5256470912136137e-005,right_val:0.5430821776390076,left_val:0.4812104105949402},{features:[[7,10,2,2,-1.],[7,10,1,1,2.],[8,11,1,1,2.]],threshold:1.3158309739083052e-003,right_val:0.6779323220252991,left_val:0.4625813961029053},{features:[[11,11,4,4,-1.],[11,13,4,2,2.]],threshold:1.5870389761403203e-003,right_val:0.3431465029716492,left_val:0.5386291742324829},{features:[[8,12,3,8,-1.],[9,12,1,8,3.]],threshold:-0.0215396601706743,right_val:0.5003222823143005,left_val:0.0259425006806850},{features:[[13,0,6,3,-1.],[13,1,6,1,3.]],threshold:0.0143344802781940,right_val:0.1590632945299149,left_val:0.5202844738960266},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:-8.3881383761763573e-003,right_val:0.4648044109344482,left_val:0.7282481193542481},{features:[[5,7,10,10,-1.],[10,7,5,5,2.],[5,12,5,5,2.]],threshold:9.1906841844320297e-003,right_val:0.3923191130161285,left_val:0.5562356710433960},{features:[[3,18,8,2,-1.],[3,18,4,1,2.],[7,19,4,1,2.]],threshold:-5.8453059755265713e-003,right_val:0.4629127979278565,left_val:0.6803392767906189},{features:[[10,2,6,8,-1.],[12,2,2,8,3.]],threshold:-0.0547077991068363,right_val:0.5206125974655151,left_val:0.2561671137809753},{features:[[4,2,6,8,-1.],[6,2,2,8,3.]],threshold:9.1142775490880013e-003,right_val:0.3053877055644989,left_val:0.5189620256423950},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:-0.0155750000849366,right_val:0.5169094800949097,left_val:0.1295074969530106},{features:[[7,11,2,1,-1.],[8,11,1,1,2.]],threshold:-1.2050600344082341e-004,right_val:0.4230825006961823,left_val:0.5735098123550415},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:1.2273970060050488e-003,right_val:0.4079791903495789,left_val:0.5289878249168396},{features:[[7,15,2,2,-1.],[7,15,1,1,2.],[8,16,1,1,2.]],threshold:-1.2186600361019373e-003,right_val:0.4574409127235413,left_val:0.6575639843940735},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:-3.3256649039685726e-003,right_val:0.5195019841194153,left_val:0.3628047108650208},{features:[[6,0,3,7,-1.],[7,0,1,7,3.]],threshold:-0.0132883097976446,right_val:0.5043488740921021,left_val:0.1284265965223312},{features:[[18,1,2,7,-1.],[18,1,1,7,2.]],threshold:-3.3839771058410406e-003,right_val:0.4757505953311920,left_val:0.6292240023612976},{features:[[2,0,8,20,-1.],[2,10,8,10,2.]],threshold:-0.2195422053337097,right_val:0.5065013766288757,left_val:0.1487731933593750},{features:[[3,0,15,6,-1.],[3,2,15,2,3.]],threshold:4.9111708067357540e-003,right_val:0.5665838718414307,left_val:0.4256102144718170},{features:[[4,3,12,2,-1.],[4,4,12,1,2.]],threshold:-1.8744950648397207e-004,right_val:0.5586857199668884,left_val:0.4004144072532654},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:-5.2178641781210899e-003,right_val:0.4812706112861633,left_val:0.6009116172790527},{features:[[7,0,3,4,-1.],[8,0,1,4,3.]],threshold:-1.1111519997939467e-003,right_val:0.5287089943885803,left_val:0.3514933884143829},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:4.4036400504410267e-003,right_val:0.5924085974693298,left_val:0.4642275869846344},{features:[[1,7,6,13,-1.],[3,7,2,13,3.]],threshold:0.1229949966073036,right_val:0.0691524818539619,left_val:0.5025529265403748},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:-0.0123135102912784,right_val:0.4934012889862061,left_val:0.5884591937065125},{features:[[0,0,4,5,-1.],[2,0,2,5,2.]],threshold:4.1471039876341820e-003,right_val:0.5893477797508240,left_val:0.4372239112854004},{features:[[14,12,3,6,-1.],[14,14,3,2,3.]],threshold:-3.5502649843692780e-003,right_val:0.5396270155906677,left_val:0.4327551126480103},{features:[[3,12,3,6,-1.],[3,14,3,2,3.]],threshold:-0.0192242693156004,right_val:0.5068330764770508,left_val:0.1913134008646011},{features:[[16,1,4,3,-1.],[16,2,4,1,3.]],threshold:1.4395059552043676e-003,right_val:0.4243533015251160,left_val:0.5308178067207336},{features:[[8,7,2,10,-1.],[8,7,1,5,2.],[9,12,1,5,2.]],threshold:-6.7751999013125896e-003,right_val:0.4540086090564728,left_val:0.6365395784378052},{features:[[11,11,4,4,-1.],[11,13,4,2,2.]],threshold:7.0119630545377731e-003,right_val:0.3026199936866760,left_val:0.5189834237098694},{features:[[0,1,4,3,-1.],[0,2,4,1,3.]],threshold:5.4014651104807854e-003,right_val:0.2557682991027832,left_val:0.5105062127113342},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:9.0274988906458020e-004,right_val:0.5861827731132507,left_val:0.4696914851665497},{features:[[7,15,3,5,-1.],[8,15,1,5,3.]],threshold:0.0114744501188397,right_val:0.1527177989482880,left_val:0.5053645968437195},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-6.7023430019617081e-003,right_val:0.4890604019165039,left_val:0.6508980989456177},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-2.0462959073483944e-003,right_val:0.4514600038528442,left_val:0.6241816878318787},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:-9.9951568990945816e-003,right_val:0.5400953888893127,left_val:0.3432781100273132},{features:[[0,5,5,6,-1.],[0,7,5,2,3.]],threshold:-0.0357007086277008,right_val:0.5074077844619751,left_val:0.1878059059381485},{features:[[9,5,6,4,-1.],[9,5,3,4,2.]],threshold:4.5584561303257942e-004,right_val:0.5402569770812988,left_val:0.3805277049541473},{features:[[0,0,18,10,-1.],[6,0,6,10,3.]],threshold:-0.0542606003582478,right_val:0.4595097005367279,left_val:0.6843714714050293},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:6.0600461438298225e-003,right_val:0.4500527977943420,left_val:0.5502905249595642},{features:[[6,6,4,14,-1.],[8,6,2,14,2.]],threshold:-6.4791832119226456e-003,right_val:0.5310757160186768,left_val:0.3368858098983765},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:-1.4939469983801246e-003,right_val:0.4756175875663757,left_val:0.6487640142440796},{features:[[5,1,2,3,-1.],[6,1,1,3,2.]],threshold:1.4610530342906713e-005,right_val:0.5451064109802246,left_val:0.4034579098224640},{features:[[18,1,2,18,-1.],[19,1,1,9,2.],[18,10,1,9,2.]],threshold:-7.2321938350796700e-003,right_val:0.4824739992618561,left_val:0.6386873722076416},{features:[[2,1,4,3,-1.],[2,2,4,1,3.]],threshold:-4.0645818226039410e-003,right_val:0.5157335996627808,left_val:0.2986421883106232},{features:[[18,1,2,18,-1.],[19,1,1,9,2.],[18,10,1,9,2.]],threshold:0.0304630808532238,right_val:0.7159956097602844,left_val:0.5022199749946594},{features:[[1,14,4,6,-1.],[1,14,2,3,2.],[3,17,2,3,2.]],threshold:-8.0544911324977875e-003,right_val:0.4619275033473969,left_val:0.6492452025413513},{features:[[10,11,7,6,-1.],[10,13,7,2,3.]],threshold:0.0395051389932632,right_val:0.2450613975524902,left_val:0.5150570869445801},{features:[[0,10,6,10,-1.],[0,10,3,5,2.],[3,15,3,5,2.]],threshold:8.4530208259820938e-003,right_val:0.6394037008285523,left_val:0.4573669135570526},{features:[[11,0,3,4,-1.],[12,0,1,4,3.]],threshold:-1.1688120430335402e-003,right_val:0.5483661293983460,left_val:0.3865512013435364},{features:[[5,10,5,6,-1.],[5,13,5,3,2.]],threshold:2.8070670086890459e-003,right_val:0.2701480090618134,left_val:0.5128579139709473},{features:[[14,6,1,8,-1.],[14,10,1,4,2.]],threshold:4.7365209320560098e-004,right_val:0.5387461185455322,left_val:0.4051581919193268},{features:[[1,7,18,6,-1.],[1,7,9,3,2.],[10,10,9,3,2.]],threshold:0.0117410803213716,right_val:0.3719413876533508,left_val:0.5295950174331665},{features:[[9,7,2,2,-1.],[9,7,1,2,2.]],threshold:3.1833238899707794e-003,right_val:0.6895126104354858,left_val:0.4789406955242157},{features:[[5,9,4,5,-1.],[7,9,2,5,2.]],threshold:7.0241501089185476e-004,right_val:0.3918080925941467,left_val:0.5384489297866821}],threshold:54.6200714111328130},{simpleClassifiers:[{features:[[7,6,6,3,-1.],[9,6,2,3,3.]],threshold:0.0170599296689034,right_val:0.7142534852027893,left_val:0.3948527872562408},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:0.0218408405780792,right_val:0.6090016961097717,left_val:0.3370316028594971},{features:[[7,15,2,4,-1.],[7,17,2,2,2.]],threshold:2.4520049919374287e-004,right_val:0.5987902283668518,left_val:0.3500576019287109},{features:[[1,0,19,9,-1.],[1,3,19,3,3.]],threshold:8.3272606134414673e-003,right_val:0.5697240829467773,left_val:0.3267528116703033},{features:[[3,7,3,6,-1.],[3,9,3,2,3.]],threshold:5.7148298947140574e-004,right_val:0.5531656742095947,left_val:0.3044599890708923},{features:[[13,7,4,4,-1.],[15,7,2,2,2.],[13,9,2,2,2.]],threshold:6.7373987985774875e-004,right_val:0.5672631263732910,left_val:0.3650012016296387},{features:[[3,7,4,4,-1.],[3,7,2,2,2.],[5,9,2,2,2.]],threshold:3.4681590477703139e-005,right_val:0.5388727188110352,left_val:0.3313541114330292},{features:[[9,6,10,8,-1.],[9,10,10,4,2.]],threshold:-5.8563398197293282e-003,right_val:0.5498778820037842,left_val:0.2697942852973938},{features:[[3,8,14,12,-1.],[3,14,14,6,2.]],threshold:8.5102273151278496e-003,right_val:0.2762879133224487,left_val:0.5269358158111572},{features:[[6,5,10,12,-1.],[11,5,5,6,2.],[6,11,5,6,2.]],threshold:-0.0698172077536583,right_val:0.5259246826171875,left_val:0.2909603118896484},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-8.6113670840859413e-004,right_val:0.4073697924613953,left_val:0.5892577171325684},{features:[[9,5,6,5,-1.],[9,5,3,5,2.]],threshold:9.7149249631911516e-004,right_val:0.5415862202644348,left_val:0.3523564040660858},{features:[[9,4,2,4,-1.],[9,6,2,2,2.]],threshold:-1.4727490452060010e-005,right_val:0.3503156006336212,left_val:0.5423017740249634},{features:[[9,5,6,5,-1.],[9,5,3,5,2.]],threshold:0.0484202913939953,right_val:0.3411195874214172,left_val:0.5193945765495300},{features:[[5,5,6,5,-1.],[8,5,3,5,2.]],threshold:1.3257140526548028e-003,right_val:0.5335376262664795,left_val:0.3157769143581390},{features:[[11,2,6,1,-1.],[13,2,2,1,3.]],threshold:1.4922149603080470e-005,right_val:0.5536553859710693,left_val:0.4451299905776978},{features:[[3,2,6,1,-1.],[5,2,2,1,3.]],threshold:-2.7173398993909359e-003,right_val:0.5248088836669922,left_val:0.3031741976737976},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:2.9219500720500946e-003,right_val:0.6606041789054871,left_val:0.4781453013420105},{features:[[0,10,1,4,-1.],[0,12,1,2,2.]],threshold:-1.9804988987743855e-003,right_val:0.5287625193595886,left_val:0.3186308145523071},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:-4.0012109093368053e-003,right_val:0.4749928116798401,left_val:0.6413596868515015},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:-4.3491991236805916e-003,right_val:0.5098996758460999,left_val:0.1507498025894165},{features:[[6,15,9,2,-1.],[6,16,9,1,2.]],threshold:1.3490889687091112e-003,right_val:0.5881167054176331,left_val:0.4316158890724182},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0185970701277256,right_val:0.9089794158935547,left_val:0.4735553860664368},{features:[[18,4,2,4,-1.],[18,6,2,2,2.]],threshold:-1.8562379991635680e-003,right_val:0.5577837228775024,left_val:0.3553189039230347},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:2.2940430790185928e-003,right_val:0.6580877900123596,left_val:0.4500094950199127},{features:[[15,16,3,2,-1.],[15,17,3,1,2.]],threshold:2.9982850537635386e-004,right_val:0.3975878953933716,left_val:0.5629242062568665},{features:[[0,0,3,9,-1.],[0,3,3,3,3.]],threshold:3.5455459728837013e-003,right_val:0.3605485856533051,left_val:0.5381547212600708},{features:[[9,7,3,3,-1.],[9,8,3,1,3.]],threshold:9.6104722470045090e-003,right_val:0.1796745955944061,left_val:0.5255997180938721},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:-6.2783220782876015e-003,right_val:0.5114030241966248,left_val:0.2272856980562210},{features:[[9,5,2,6,-1.],[9,5,1,6,2.]],threshold:3.4598479978740215e-003,right_val:0.6608219146728516,left_val:0.4626308083534241},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-1.3112019514665008e-003,right_val:0.4436857998371124,left_val:0.6317539811134338},{features:[[7,6,8,12,-1.],[11,6,4,6,2.],[7,12,4,6,2.]],threshold:2.6876179035753012e-003,right_val:0.4054022133350372,left_val:0.5421109795570374},{features:[[5,6,8,12,-1.],[5,6,4,6,2.],[9,12,4,6,2.]],threshold:3.9118169806897640e-003,right_val:0.3273454904556274,left_val:0.5358477830886841},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-0.0142064504325390,right_val:0.4975781142711639,left_val:0.7793576717376709},{features:[[2,16,3,2,-1.],[2,17,3,1,2.]],threshold:7.1705528534948826e-004,right_val:0.3560903966426849,left_val:0.5297319889068604},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:1.6635019565001130e-003,right_val:0.5816481709480286,left_val:0.4678094089031220},{features:[[2,12,6,6,-1.],[2,14,6,2,3.]],threshold:3.3686188980937004e-003,right_val:0.3446420133113861,left_val:0.5276734232902527},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:0.0127995302900672,right_val:0.7472159266471863,left_val:0.4834679961204529},{features:[[6,14,6,3,-1.],[6,15,6,1,3.]],threshold:3.3901201095432043e-003,right_val:0.6401721239089966,left_val:0.4511859118938446},{features:[[14,15,5,3,-1.],[14,16,5,1,3.]],threshold:4.7070779837667942e-003,right_val:0.3555220961570740,left_val:0.5335658788681030},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.4819339849054813e-003,right_val:0.5772724151611328,left_val:0.4250707030296326},{features:[[14,15,5,3,-1.],[14,16,5,1,3.]],threshold:-6.9995759986341000e-003,right_val:0.5292900204658508,left_val:0.3003320097923279},{features:[[5,3,6,2,-1.],[7,3,2,2,3.]],threshold:0.0159390103071928,right_val:0.1675581932067871,left_val:0.5067319273948669},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:7.6377349905669689e-003,right_val:0.7085601091384888,left_val:0.4795069992542267},{features:[[1,15,5,3,-1.],[1,16,5,1,3.]],threshold:6.7334040068089962e-003,right_val:0.2162470072507858,left_val:0.5133113265037537},{features:[[8,13,4,6,-1.],[10,13,2,3,2.],[8,16,2,3,2.]],threshold:-0.0128588099032640,right_val:0.5251371860504150,left_val:0.1938841938972473},{features:[[7,8,3,3,-1.],[8,8,1,3,3.]],threshold:-6.2270800117403269e-004,right_val:0.4197868108749390,left_val:0.5686538219451904},{features:[[12,0,5,4,-1.],[12,2,5,2,2.]],threshold:-5.2651681471616030e-004,right_val:0.5429695844650269,left_val:0.4224168956279755},{features:[[0,2,20,2,-1.],[0,2,10,1,2.],[10,3,10,1,2.]],threshold:0.0110750999301672,right_val:0.2514517903327942,left_val:0.5113775134086609},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-0.0367282517254353,right_val:0.4849618971347809,left_val:0.7194662094116211},{features:[[4,3,6,1,-1.],[6,3,2,1,3.]],threshold:-2.8207109426148236e-004,right_val:0.5394446253776550,left_val:0.3840261995792389},{features:[[4,18,13,2,-1.],[4,19,13,1,2.]],threshold:-2.7489690110087395e-003,right_val:0.4569182097911835,left_val:0.5937088727951050},{features:[[2,10,3,6,-1.],[2,12,3,2,3.]],threshold:0.0100475195795298,right_val:0.2802298069000244,left_val:0.5138576030731201},{features:[[14,12,6,8,-1.],[17,12,3,4,2.],[14,16,3,4,2.]],threshold:-8.1497840583324432e-003,right_val:0.4636121094226837,left_val:0.6090037226676941},{features:[[4,13,10,6,-1.],[4,13,5,3,2.],[9,16,5,3,2.]],threshold:-6.8833888508379459e-003,right_val:0.5254660248756409,left_val:0.3458611071109772},{features:[[14,12,1,2,-1.],[14,13,1,1,2.]],threshold:-1.4039360394235700e-005,right_val:0.4082083106040955,left_val:0.5693104267120361},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:1.5498419525101781e-003,right_val:0.5806517004966736,left_val:0.4350537061691284},{features:[[14,12,2,2,-1.],[14,13,2,1,2.]],threshold:-6.7841499112546444e-003,right_val:0.5182775259017944,left_val:0.1468873023986816},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:2.1705629478674382e-004,right_val:0.3456174135208130,left_val:0.5293524265289307},{features:[[8,12,9,2,-1.],[8,13,9,1,2.]],threshold:3.1198898795992136e-004,right_val:0.5942413806915283,left_val:0.4652450978755951},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:5.4507530294358730e-003,right_val:0.7024846076965332,left_val:0.4653508961200714},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:-2.5818689027801156e-004,right_val:0.3768967092037201,left_val:0.5497295260429382},{features:[[5,6,9,12,-1.],[5,12,9,6,2.]],threshold:-0.0174425393342972,right_val:0.5457497835159302,left_val:0.3919087946414948},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:-0.0453435294330120,right_val:0.5154908895492554,left_val:0.1631357073783875},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:1.9190689781680703e-003,right_val:0.2791895866394043,left_val:0.5145897865295410},{features:[[5,4,11,3,-1.],[5,5,11,1,3.]],threshold:-6.0177869163453579e-003,right_val:0.4756332933902741,left_val:0.6517636179924011},{features:[[7,1,5,10,-1.],[7,6,5,5,2.]],threshold:-4.0720738470554352e-003,right_val:0.4092685878276825,left_val:0.5514652729034424},{features:[[2,8,18,2,-1.],[2,9,18,1,2.]],threshold:3.9855059003457427e-004,right_val:0.5285550951957703,left_val:0.3165240883827210},{features:[[7,17,5,3,-1.],[7,18,5,1,3.]],threshold:-6.5418570302426815e-003,right_val:0.4652808904647827,left_val:0.6853377819061279},{features:[[5,9,12,1,-1.],[9,9,4,1,3.]],threshold:3.4845089539885521e-003,right_val:0.4502759873867035,left_val:0.5484588146209717},{features:[[0,14,6,6,-1.],[0,14,3,3,2.],[3,17,3,3,2.]],threshold:-0.0136967804282904,right_val:0.4572555124759674,left_val:0.6395779848098755},{features:[[5,9,12,1,-1.],[9,9,4,1,3.]],threshold:-0.0173471402376890,right_val:0.5181614756584168,left_val:0.2751072943210602},{features:[[3,9,12,1,-1.],[7,9,4,1,3.]],threshold:-4.0885428898036480e-003,right_val:0.5194984078407288,left_val:0.3325636088848114},{features:[[14,10,6,7,-1.],[14,10,3,7,2.]],threshold:-9.4687901437282562e-003,right_val:0.4851819872856140,left_val:0.5942280888557434},{features:[[1,0,16,2,-1.],[1,1,16,1,2.]],threshold:1.7084840219467878e-003,right_val:0.5519806146621704,left_val:0.4167110919952393},{features:[[10,9,10,9,-1.],[10,12,10,3,3.]],threshold:9.4809094443917274e-003,right_val:0.4208514988422394,left_val:0.5433894991874695},{features:[[0,1,10,2,-1.],[5,1,5,2,2.]],threshold:-4.7389650717377663e-003,right_val:0.4560655057430267,left_val:0.6407189965248108},{features:[[17,3,2,3,-1.],[17,4,2,1,3.]],threshold:6.5761050209403038e-003,right_val:0.2258227020502091,left_val:0.5214555263519287},{features:[[1,3,2,3,-1.],[1,4,2,1,3.]],threshold:-2.1690549328923225e-003,right_val:0.5156704783439636,left_val:0.3151527941226959},{features:[[9,7,3,6,-1.],[10,7,1,6,3.]],threshold:0.0146601703017950,right_val:0.6689941287040710,left_val:0.4870837032794952},{features:[[6,5,4,3,-1.],[8,5,2,3,2.]],threshold:1.7231999663636088e-004,right_val:0.5251078009605408,left_val:0.3569748997688294},{features:[[7,5,6,6,-1.],[9,5,2,6,3.]],threshold:-0.0218037609010935,right_val:0.4966329932212830,left_val:0.8825920820236206},{features:[[3,4,12,12,-1.],[3,4,6,6,2.],[9,10,6,6,2.]],threshold:-0.0947361066937447,right_val:0.5061113834381104,left_val:0.1446162015199661},{features:[[9,2,6,15,-1.],[11,2,2,15,3.]],threshold:5.5825551971793175e-003,right_val:0.4238066077232361,left_val:0.5396478772163391},{features:[[2,2,6,17,-1.],[4,2,2,17,3.]],threshold:1.9517090404406190e-003,right_val:0.5497786998748779,left_val:0.4170410931110382},{features:[[14,10,6,7,-1.],[14,10,3,7,2.]],threshold:0.0121499001979828,right_val:0.5664274096488953,left_val:0.4698367118835449},{features:[[0,10,6,7,-1.],[3,10,3,7,2.]],threshold:-7.5169620104134083e-003,right_val:0.4463135898113251,left_val:0.6267772912979126},{features:[[9,2,6,15,-1.],[11,2,2,15,3.]],threshold:-0.0716679096221924,right_val:0.5221003293991089,left_val:0.3097011148929596},{features:[[5,2,6,15,-1.],[7,2,2,15,3.]],threshold:-0.0882924199104309,right_val:0.5006365180015564,left_val:0.0811238884925842},{features:[[17,9,3,6,-1.],[17,11,3,2,3.]],threshold:0.0310630798339844,right_val:0.1282255947589874,left_val:0.5155503749847412},{features:[[6,7,6,6,-1.],[8,7,2,6,3.]],threshold:0.0466218404471874,right_val:0.7363960742950440,left_val:0.4699777960777283},{features:[[1,10,18,6,-1.],[10,10,9,3,2.],[1,13,9,3,2.]],threshold:-0.0121894897893071,right_val:0.5518996715545654,left_val:0.3920530080795288},{features:[[0,9,10,9,-1.],[0,12,10,3,3.]],threshold:0.0130161102861166,right_val:0.3685136139392853,left_val:0.5260658264160156},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:-3.4952899441123009e-003,right_val:0.4716280996799469,left_val:0.6339294910430908},{features:[[5,12,3,4,-1.],[5,14,3,2,2.]],threshold:-4.4015039748046547e-005,right_val:0.3776184916496277,left_val:0.5333027243614197},{features:[[3,3,16,12,-1.],[3,9,16,6,2.]],threshold:-0.1096649020910263,right_val:0.5198346972465515,left_val:0.1765342056751251},{features:[[1,1,12,12,-1.],[1,1,6,6,2.],[7,7,6,6,2.]],threshold:-9.0279558207839727e-004,right_val:0.3838908076286316,left_val:0.5324159860610962},{features:[[10,4,2,4,-1.],[11,4,1,2,2.],[10,6,1,2,2.]],threshold:7.1126641705632210e-004,right_val:0.5755224227905273,left_val:0.4647929966449738},{features:[[0,9,10,2,-1.],[0,9,5,1,2.],[5,10,5,1,2.]],threshold:-3.1250279862433672e-003,right_val:0.5166770815849304,left_val:0.3236708939075470},{features:[[9,11,3,3,-1.],[9,12,3,1,3.]],threshold:2.4144679773598909e-003,right_val:0.6459717750549316,left_val:0.4787439107894898},{features:[[3,12,9,2,-1.],[3,13,9,1,2.]],threshold:4.4391240226104856e-004,right_val:0.6010255813598633,left_val:0.4409308135509491},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.2611189342569560e-004,right_val:0.5493255853652954,left_val:0.4038113951683044}],threshold:50.1697311401367190},{simpleClassifiers:[{features:[[3,4,13,6,-1.],[3,6,13,2,3.]],threshold:-0.0469012893736362,right_val:0.3743801116943359,left_val:0.6600171923637390},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-1.4568349579349160e-003,right_val:0.3437797129154205,left_val:0.5783991217613220},{features:[[1,0,6,8,-1.],[4,0,3,8,2.]],threshold:5.5598369799554348e-003,right_val:0.5908216238021851,left_val:0.3622266948223114},{features:[[9,5,2,12,-1.],[9,11,2,6,2.]],threshold:7.3170487303286791e-004,right_val:0.2873558104038239,left_val:0.5500419139862061},{features:[[4,4,3,10,-1.],[4,9,3,5,2.]],threshold:1.3318009441718459e-003,right_val:0.5431019067764282,left_val:0.2673169970512390},{features:[[6,17,8,3,-1.],[6,18,8,1,3.]],threshold:2.4347059661522508e-004,right_val:0.5741388797760010,left_val:0.3855027854442596},{features:[[0,5,10,6,-1.],[0,7,10,2,3.]],threshold:-3.0512469820678234e-003,right_val:0.3462845087051392,left_val:0.5503209829330444},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:-6.8657199153676629e-004,right_val:0.5429509282112122,left_val:0.3291221857070923},{features:[[7,5,4,5,-1.],[9,5,2,5,2.]],threshold:1.4668200165033340e-003,right_val:0.5351811051368713,left_val:0.3588382005691528},{features:[[12,14,3,6,-1.],[12,16,3,2,3.]],threshold:3.2021870720200241e-004,right_val:0.5700234174728394,left_val:0.4296841919422150},{features:[[1,11,8,2,-1.],[1,12,8,1,2.]],threshold:7.4122188379988074e-004,right_val:0.3366870880126953,left_val:0.5282164812088013},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:3.8330298848450184e-003,right_val:0.6257336139678955,left_val:0.4559567868709564},{features:[[0,5,3,6,-1.],[0,7,3,2,3.]],threshold:-0.0154564399272203,right_val:0.5129452943801880,left_val:0.2350116968154907},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:2.6796779129654169e-003,right_val:0.4155062139034271,left_val:0.5329415202140808},{features:[[4,14,4,6,-1.],[4,14,2,3,2.],[6,17,2,3,2.]],threshold:2.8296569362282753e-003,right_val:0.5804538130760193,left_val:0.4273087978363037},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:-3.9444249123334885e-003,right_val:0.5202686190605164,left_val:0.2912611961364746},{features:[[8,2,4,12,-1.],[8,6,4,4,3.]],threshold:2.7179559692740440e-003,right_val:0.3585677146911621,left_val:0.5307688117027283},{features:[[14,0,6,8,-1.],[17,0,3,4,2.],[14,4,3,4,2.]],threshold:5.9077627956867218e-003,right_val:0.5941585898399353,left_val:0.4703775048255920},{features:[[7,17,3,2,-1.],[8,17,1,2,3.]],threshold:-4.2240349575877190e-003,right_val:0.5088796019554138,left_val:0.2141567021608353},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:4.0725888684391975e-003,right_val:0.6841061115264893,left_val:0.4766413867473602},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0101495301350951,right_val:0.3748497068881989,left_val:0.5360798835754395},{features:[[14,0,2,10,-1.],[15,0,1,5,2.],[14,5,1,5,2.]],threshold:-1.8864999583456665e-004,right_val:0.3853805065155029,left_val:0.5720130205154419},{features:[[5,3,8,6,-1.],[5,3,4,3,2.],[9,6,4,3,2.]],threshold:-4.8864358104765415e-003,right_val:0.5340958833694458,left_val:0.3693122863769531},{features:[[14,0,6,10,-1.],[17,0,3,5,2.],[14,5,3,5,2.]],threshold:0.0261584799736738,right_val:0.6059989929199219,left_val:0.4962374866008759},{features:[[9,14,1,2,-1.],[9,15,1,1,2.]],threshold:4.8560759751126170e-004,right_val:0.6012468934059143,left_val:0.4438945949077606},{features:[[15,10,4,3,-1.],[15,11,4,1,3.]],threshold:0.0112687097862363,right_val:0.1840388029813767,left_val:0.5244250297546387},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:-2.8114619199186563e-003,right_val:0.4409897029399872,left_val:0.6060283780097961},{features:[[3,13,14,4,-1.],[10,13,7,2,2.],[3,15,7,2,2.]],threshold:-5.6112729944288731e-003,right_val:0.5589237213134766,left_val:0.3891170918941498},{features:[[1,10,4,3,-1.],[1,11,4,1,3.]],threshold:8.5680093616247177e-003,right_val:0.2062619030475617,left_val:0.5069345831871033},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-3.8172779022715986e-004,right_val:0.4192610979080200,left_val:0.5882201790809631},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-1.7680290329735726e-004,right_val:0.4003368914127350,left_val:0.5533605813980103},{features:[[3,5,16,15,-1.],[3,10,16,5,3.]],threshold:6.5112537704408169e-003,right_val:0.5444191098213196,left_val:0.3310146927833557},{features:[[6,12,4,2,-1.],[8,12,2,2,2.]],threshold:-6.5948683186434209e-005,right_val:0.3944905996322632,left_val:0.5433831810951233},{features:[[4,4,12,10,-1.],[10,4,6,5,2.],[4,9,6,5,2.]],threshold:6.9939051754772663e-003,right_val:0.4192714095115662,left_val:0.5600358247756958},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-4.6744439750909805e-003,right_val:0.4604960978031158,left_val:0.6685466766357422},{features:[[8,12,4,8,-1.],[10,12,2,4,2.],[8,16,2,4,2.]],threshold:0.0115898502990603,right_val:0.2926830053329468,left_val:0.5357121229171753},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0130078401416540,right_val:0.7307463288307190,left_val:0.4679817855358124},{features:[[12,2,3,2,-1.],[13,2,1,2,3.]],threshold:-1.1008579749614000e-003,right_val:0.5415065288543701,left_val:0.3937501013278961},{features:[[8,15,3,2,-1.],[8,16,3,1,2.]],threshold:6.0472649056464434e-004,right_val:0.5604041218757629,left_val:0.4242376089096069},{features:[[6,0,9,14,-1.],[9,0,3,14,3.]],threshold:-0.0144948400557041,right_val:0.5293182730674744,left_val:0.3631210029125214},{features:[[9,6,2,3,-1.],[10,6,1,3,2.]],threshold:-5.3056948818266392e-003,right_val:0.4621821045875549,left_val:0.6860452294349670},{features:[[10,8,2,3,-1.],[10,9,2,1,3.]],threshold:-8.1829127157106996e-004,right_val:0.5420439243316650,left_val:0.3944096863269806},{features:[[0,9,4,6,-1.],[0,11,4,2,3.]],threshold:-0.0190775208175182,right_val:0.5037891864776611,left_val:0.1962621957063675},{features:[[6,0,8,2,-1.],[6,1,8,1,2.]],threshold:3.5549470339901745e-004,right_val:0.5613973140716553,left_val:0.4086259007453919},{features:[[6,14,7,3,-1.],[6,15,7,1,3.]],threshold:1.9679730758070946e-003,right_val:0.5926123261451721,left_val:0.4489121139049530},{features:[[8,10,8,9,-1.],[8,13,8,3,3.]],threshold:6.9189141504466534e-003,right_val:0.3728385865688324,left_val:0.5335925817489624},{features:[[5,2,3,2,-1.],[6,2,1,2,3.]],threshold:2.9872779268771410e-003,right_val:0.2975643873214722,left_val:0.5111321210861206},{features:[[14,1,6,8,-1.],[17,1,3,4,2.],[14,5,3,4,2.]],threshold:-6.2264618463814259e-003,right_val:0.4824537932872772,left_val:0.5541489720344544},{features:[[0,1,6,8,-1.],[0,1,3,4,2.],[3,5,3,4,2.]],threshold:0.0133533002808690,right_val:0.6414797902107239,left_val:0.4586423933506012},{features:[[1,2,18,6,-1.],[10,2,9,3,2.],[1,5,9,3,2.]],threshold:0.0335052385926247,right_val:0.3429994881153107,left_val:0.5392425060272217},{features:[[9,3,2,1,-1.],[10,3,1,1,2.]],threshold:-2.5294460356235504e-003,right_val:0.5013315081596375,left_val:0.1703713983297348},{features:[[13,2,4,6,-1.],[15,2,2,3,2.],[13,5,2,3,2.]],threshold:-1.2801629491150379e-003,right_val:0.4697405099868774,left_val:0.5305461883544922},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:7.0687388069927692e-003,right_val:0.6436504721641541,left_val:0.4615545868873596},{features:[[13,5,1,3,-1.],[13,6,1,1,3.]],threshold:9.6880499040707946e-004,right_val:0.6043894290924072,left_val:0.4833599030971527},{features:[[2,16,5,3,-1.],[2,17,5,1,3.]],threshold:3.9647659286856651e-003,right_val:0.3231816887855530,left_val:0.5187637209892273},{features:[[13,2,4,6,-1.],[15,2,2,3,2.],[13,5,2,3,2.]],threshold:-0.0220577307045460,right_val:0.5200980901718140,left_val:0.4079256951808929},{features:[[3,2,4,6,-1.],[3,2,2,3,2.],[5,5,2,3,2.]],threshold:-6.6906312713399529e-004,right_val:0.3815600872039795,left_val:0.5331609249114990},{features:[[13,5,1,2,-1.],[13,6,1,1,2.]],threshold:-6.7009328631684184e-004,right_val:0.4688901901245117,left_val:0.5655422210693359},{features:[[5,5,2,2,-1.],[5,6,2,1,2.]],threshold:7.4284552829340100e-004,right_val:0.6287400126457214,left_val:0.4534381031990051},{features:[[13,9,2,2,-1.],[13,9,1,2,2.]],threshold:2.2227810695767403e-003,right_val:0.3303655982017517,left_val:0.5350633263587952},{features:[[5,9,2,2,-1.],[6,9,1,2,2.]],threshold:-5.4130521602928638e-003,right_val:0.5005434751510620,left_val:0.1113687008619309},{features:[[13,17,3,2,-1.],[13,18,3,1,2.]],threshold:-1.4520040167553816e-005,right_val:0.4325133860111237,left_val:0.5628737807273865},{features:[[6,16,4,4,-1.],[6,16,2,2,2.],[8,18,2,2,2.]],threshold:2.3369169502984732e-004,right_val:0.5447791218757629,left_val:0.4165835082530975},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:4.2894547805190086e-003,right_val:0.6778649091720581,left_val:0.4860391020774841},{features:[[0,13,9,6,-1.],[0,15,9,2,3.]],threshold:5.9103150852024555e-003,right_val:0.3612113893032074,left_val:0.5262305140495300},{features:[[9,14,2,6,-1.],[9,17,2,3,2.]],threshold:0.0129005396738648,right_val:0.3250288069248200,left_val:0.5319377183914185},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:4.6982979401946068e-003,right_val:0.6665925979614258,left_val:0.4618245065212250},{features:[[1,10,18,6,-1.],[1,12,18,2,3.]],threshold:0.0104398597031832,right_val:0.3883604109287262,left_val:0.5505670905113220},{features:[[8,11,4,2,-1.],[8,12,4,1,2.]],threshold:3.0443191062659025e-003,right_val:0.7301844954490662,left_val:0.4697853028774262},{features:[[7,9,6,2,-1.],[7,10,6,1,2.]],threshold:-6.1593751888722181e-004,right_val:0.5464984178543091,left_val:0.3830839097499847},{features:[[8,8,2,3,-1.],[8,9,2,1,3.]],threshold:-3.4247159492224455e-003,right_val:0.5089530944824219,left_val:0.2566300034523010},{features:[[17,5,3,4,-1.],[18,5,1,4,3.]],threshold:-9.3538565561175346e-003,right_val:0.4940795898437500,left_val:0.6469966173171997},{features:[[1,19,18,1,-1.],[7,19,6,1,3.]],threshold:0.0523389987647533,right_val:0.7878770828247070,left_val:0.4745982885360718},{features:[[9,0,3,2,-1.],[10,0,1,2,3.]],threshold:3.5765620414167643e-003,right_val:0.2748498022556305,left_val:0.5306664705276489},{features:[[1,8,1,6,-1.],[1,10,1,2,3.]],threshold:7.1555317845195532e-004,right_val:0.4041908979415894,left_val:0.5413125753402710},{features:[[12,17,8,3,-1.],[12,17,4,3,2.]],threshold:-0.0105166798457503,right_val:0.4815283119678497,left_val:0.6158512234687805},{features:[[0,5,3,4,-1.],[1,5,1,4,3.]],threshold:7.7347927726805210e-003,right_val:0.7028980851173401,left_val:0.4695805907249451},{features:[[9,7,2,3,-1.],[9,8,2,1,3.]],threshold:-4.3226778507232666e-003,right_val:0.5304684042930603,left_val:0.2849566042423248},{features:[[7,11,2,2,-1.],[7,11,1,1,2.],[8,12,1,1,2.]],threshold:-2.5534399319440126e-003,right_val:0.4688892066478729,left_val:0.7056984901428223},{features:[[11,3,2,5,-1.],[11,3,1,5,2.]],threshold:1.0268510231981054e-004,right_val:0.5573464035987854,left_val:0.3902932107448578},{features:[[7,3,2,5,-1.],[8,3,1,5,2.]],threshold:7.1395188570022583e-006,right_val:0.5263987779617310,left_val:0.3684231936931610},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-1.6711989883333445e-003,right_val:0.5387271046638489,left_val:0.3849175870418549},{features:[[5,6,2,3,-1.],[5,7,2,1,3.]],threshold:4.9260449595749378e-003,right_val:0.7447251081466675,left_val:0.4729771912097931},{features:[[4,19,15,1,-1.],[9,19,5,1,3.]],threshold:4.3908702209591866e-003,right_val:0.5591921806335449,left_val:0.4809181094169617},{features:[[1,19,15,1,-1.],[6,19,5,1,3.]],threshold:-0.0177936293184757,right_val:0.4676927030086517,left_val:0.6903678178787231},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:2.0469669252634048e-003,right_val:0.3308162093162537,left_val:0.5370690226554871},{features:[[5,0,4,15,-1.],[7,0,2,15,2.]],threshold:0.0298914890736341,right_val:0.3309059143066406,left_val:0.5139865279197693},{features:[[9,6,2,5,-1.],[9,6,1,5,2.]],threshold:1.5494900289922953e-003,right_val:0.6078342795372009,left_val:0.4660237133502960},{features:[[9,5,2,7,-1.],[10,5,1,7,2.]],threshold:1.4956969534978271e-003,right_val:0.5863919854164124,left_val:0.4404835999011993},{features:[[16,11,3,3,-1.],[16,12,3,1,3.]],threshold:9.5885928021743894e-004,right_val:0.4208523035049439,left_val:0.5435971021652222},{features:[[1,11,3,3,-1.],[1,12,3,1,3.]],threshold:4.9643701640889049e-004,right_val:0.4000622034072876,left_val:0.5370578169822693},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-2.7280810754746199e-003,right_val:0.4259642958641052,left_val:0.5659412741661072},{features:[[0,15,6,2,-1.],[0,16,6,1,2.]],threshold:2.3026480339467525e-003,right_val:0.3350869119167328,left_val:0.5161657929420471},{features:[[1,0,18,6,-1.],[7,0,6,6,3.]],threshold:0.2515163123607636,right_val:0.7147309780120850,left_val:0.4869661927223206},{features:[[6,0,3,4,-1.],[7,0,1,4,3.]],threshold:-4.6328022144734859e-003,right_val:0.5083789825439453,left_val:0.2727448940277100},{features:[[14,10,4,10,-1.],[16,10,2,5,2.],[14,15,2,5,2.]],threshold:-0.0404344908893108,right_val:0.5021767020225525,left_val:0.6851438879966736},{features:[[3,2,3,2,-1.],[4,2,1,2,3.]],threshold:1.4972220014897175e-005,right_val:0.5522555112838745,left_val:0.4284465014934540},{features:[[11,2,2,2,-1.],[11,3,2,1,2.]],threshold:-2.4050309730228037e-004,right_val:0.5390074849128723,left_val:0.4226118922233582},{features:[[2,10,4,10,-1.],[2,10,2,5,2.],[4,15,2,5,2.]],threshold:0.0236578397452831,right_val:0.7504366040229797,left_val:0.4744631946086884},{features:[[0,13,20,6,-1.],[10,13,10,3,2.],[0,16,10,3,2.]],threshold:-8.1449104472994804e-003,right_val:0.5538362860679627,left_val:0.4245058894157410},{features:[[0,5,2,15,-1.],[1,5,1,15,2.]],threshold:-3.6992130335420370e-003,right_val:0.4529713094234467,left_val:0.5952357053756714},{features:[[1,7,18,4,-1.],[10,7,9,2,2.],[1,9,9,2,2.]],threshold:-6.7718601785600185e-003,right_val:0.5473399758338928,left_val:0.4137794077396393},{features:[[0,0,2,17,-1.],[1,0,1,17,2.]],threshold:4.2669530957937241e-003,right_val:0.5797994136810303,left_val:0.4484114944934845},{features:[[2,6,16,6,-1.],[10,6,8,3,2.],[2,9,8,3,2.]],threshold:1.7791989957913756e-003,right_val:0.4432444870471954,left_val:0.5624858736991882},{features:[[8,14,1,3,-1.],[8,15,1,1,3.]],threshold:1.6774770338088274e-003,right_val:0.6364241838455200,left_val:0.4637751877307892},{features:[[8,15,4,2,-1.],[8,16,4,1,2.]],threshold:1.1732629500329494e-003,right_val:0.5914415717124939,left_val:0.4544503092765808},{features:[[5,2,8,2,-1.],[5,2,4,1,2.],[9,3,4,1,2.]],threshold:8.6998171173036098e-004,right_val:0.3885917961597443,left_val:0.5334752798080444},{features:[[6,11,8,6,-1.],[6,14,8,3,2.]],threshold:7.6378340600058436e-004,right_val:0.3744941949844360,left_val:0.5398585200309753},{features:[[9,13,2,2,-1.],[9,14,2,1,2.]],threshold:1.5684569370932877e-004,right_val:0.5614616274833679,left_val:0.4317873120307922},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:-0.0215113703161478,right_val:0.5185542702674866,left_val:0.1785925030708313},{features:[[9,12,2,2,-1.],[9,13,2,1,2.]],threshold:1.3081369979772717e-004,right_val:0.5682849884033203,left_val:0.4342499077320099},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:0.0219920407980680,right_val:0.2379394024610519,left_val:0.5161716938018799},{features:[[9,13,1,3,-1.],[9,14,1,1,3.]],threshold:-8.0136500764638186e-004,right_val:0.4466426968574524,left_val:0.5986763238906860},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:-8.2736099138855934e-003,right_val:0.5251057147979736,left_val:0.4108217954635620},{features:[[0,4,2,6,-1.],[0,6,2,2,3.]],threshold:3.6831789184361696e-003,right_val:0.3397518098354340,left_val:0.5173814296722412},{features:[[9,12,3,3,-1.],[9,13,3,1,3.]],threshold:-7.9525681212544441e-003,right_val:0.4845924079418182,left_val:0.6888983249664307},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:1.5382299898192286e-003,right_val:0.3454113900661469,left_val:0.5178567171096802},{features:[[13,13,4,3,-1.],[13,14,4,1,3.]],threshold:-0.0140435304492712,right_val:0.5188667774200440,left_val:0.1678421050310135},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.4315890148282051e-003,right_val:0.5655773878097534,left_val:0.4368256926536560},{features:[[5,2,10,6,-1.],[5,4,10,2,3.]],threshold:-0.0340142287313938,right_val:0.4959217011928558,left_val:0.7802296280860901},{features:[[3,13,4,3,-1.],[3,14,4,1,3.]],threshold:-0.0120272999629378,right_val:0.5032231807708740,left_val:0.1585101038217545},{features:[[3,7,15,5,-1.],[8,7,5,5,3.]],threshold:0.1331661939620972,right_val:0.2755128145217896,left_val:0.5163304805755615},{features:[[3,7,12,2,-1.],[7,7,4,2,3.]],threshold:-1.5221949433907866e-003,right_val:0.5214552283287048,left_val:0.3728317916393280},{features:[[10,3,3,9,-1.],[11,3,1,9,3.]],threshold:-9.3929271679371595e-004,right_val:0.4511165022850037,left_val:0.5838379263877869},{features:[[8,6,4,6,-1.],[10,6,2,6,2.]],threshold:0.0277197398245335,right_val:0.7331544756889343,left_val:0.4728286862373352},{features:[[9,7,4,3,-1.],[9,8,4,1,3.]],threshold:3.1030150130391121e-003,right_val:0.4101563096046448,left_val:0.5302202105522156},{features:[[0,9,4,9,-1.],[2,9,2,9,2.]],threshold:0.0778612196445465,right_val:0.1272961944341660,left_val:0.4998334050178528},{features:[[9,13,3,5,-1.],[10,13,1,5,3.]],threshold:-0.0158549398183823,right_val:0.5165656208992004,left_val:0.0508333593606949},{features:[[7,7,6,3,-1.],[9,7,2,3,3.]],threshold:-4.9725300632417202e-003,right_val:0.4684231877326965,left_val:0.6798133850097656},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-9.7676506265997887e-004,right_val:0.4788931906223297,left_val:0.6010771989822388},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-2.4647710379213095e-003,right_val:0.5220503807067871,left_val:0.3393397927284241},{features:[[5,9,12,2,-1.],[9,9,4,2,3.]],threshold:-6.7937700077891350e-003,right_val:0.5239663124084473,left_val:0.4365136921405792},{features:[[5,6,10,3,-1.],[10,6,5,3,2.]],threshold:0.0326080210506916,right_val:0.2425214946269989,left_val:0.5052723884582520},{features:[[10,12,3,1,-1.],[11,12,1,1,3.]],threshold:-5.8514421107247472e-004,right_val:0.4758574068546295,left_val:0.5733973979949951},{features:[[0,1,11,15,-1.],[0,6,11,5,3.]],threshold:-0.0296326000243425,right_val:0.5263597965240479,left_val:0.3892289102077484}],threshold:66.6691207885742190},{simpleClassifiers:[{features:[[1,0,18,6,-1.],[7,0,6,6,3.]],threshold:0.0465508513152599,right_val:0.6240522861480713,left_val:0.3276950120925903},{features:[[7,7,6,1,-1.],[9,7,2,1,3.]],threshold:7.9537127166986465e-003,right_val:0.6942939162254334,left_val:0.4256485104560852},{features:[[5,16,6,4,-1.],[5,16,3,2,2.],[8,18,3,2,2.]],threshold:6.8221561377868056e-004,right_val:0.5900732874870300,left_val:0.3711487054824829},{features:[[6,5,9,8,-1.],[6,9,9,4,2.]],threshold:-1.9348249770700932e-004,right_val:0.5300545096397400,left_val:0.2041133940219879},{features:[[5,10,2,6,-1.],[5,13,2,3,2.]],threshold:-2.6710508973337710e-004,right_val:0.3103179037570953,left_val:0.5416126251220703},{features:[[7,6,8,10,-1.],[11,6,4,5,2.],[7,11,4,5,2.]],threshold:2.7818060480058193e-003,right_val:0.3467069864273071,left_val:0.5277832746505737},{features:[[5,6,8,10,-1.],[5,6,4,5,2.],[9,11,4,5,2.]],threshold:-4.6779078547842801e-004,right_val:0.3294492065906525,left_val:0.5308231115341187},{features:[[9,5,2,2,-1.],[9,6,2,1,2.]],threshold:-3.0335160772665404e-005,right_val:0.3852097094058991,left_val:0.5773872733116150},{features:[[5,12,8,2,-1.],[5,13,8,1,2.]],threshold:7.8038009814918041e-004,right_val:0.6150057911872864,left_val:0.4317438900470734},{features:[[10,2,8,2,-1.],[10,3,8,1,2.]],threshold:-4.2553851380944252e-003,right_val:0.5324292778968811,left_val:0.2933903932571411},{features:[[4,0,2,10,-1.],[4,0,1,5,2.],[5,5,1,5,2.]],threshold:-2.4735610350035131e-004,right_val:0.3843030035495758,left_val:0.5468844771385193},{features:[[9,10,2,2,-1.],[9,11,2,1,2.]],threshold:-1.4724259381182492e-004,right_val:0.5755587220191956,left_val:0.4281542897224426},{features:[[2,8,15,3,-1.],[2,9,15,1,3.]],threshold:1.1864770203828812e-003,right_val:0.5471466183662415,left_val:0.3747301101684570},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:2.3936580400913954e-003,right_val:0.6111528873443604,left_val:0.4537783861160278},{features:[[7,2,3,2,-1.],[8,2,1,2,3.]],threshold:-1.5390539774671197e-003,right_val:0.5189538002014160,left_val:0.2971341907978058},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:-7.1968790143728256e-003,right_val:0.4726476967334747,left_val:0.6699066758155823},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-4.1499789222143590e-004,right_val:0.5260317921638489,left_val:0.3384954035282135},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:4.4359830208122730e-003,right_val:0.3920140862464905,left_val:0.5399122238159180},{features:[[1,5,3,4,-1.],[2,5,1,4,3.]],threshold:2.6606200262904167e-003,right_val:0.6119617819786072,left_val:0.4482578039169312},{features:[[14,8,4,6,-1.],[14,10,4,2,3.]],threshold:-1.5287200221791863e-003,right_val:0.5340266227722168,left_val:0.3711237907409668},{features:[[1,4,3,8,-1.],[2,4,1,8,3.]],threshold:-4.7397250309586525e-003,right_val:0.4455145001411438,left_val:0.6031088232994080},{features:[[8,13,4,6,-1.],[8,16,4,3,2.]],threshold:-0.0148291299119592,right_val:0.5341861844062805,left_val:0.2838754057884216},{features:[[3,14,2,2,-1.],[3,15,2,1,2.]],threshold:9.2275557108223438e-004,right_val:0.3361653983592987,left_val:0.5209547281265259},{features:[[14,8,4,6,-1.],[14,10,4,2,3.]],threshold:0.0835298076272011,right_val:0.0811644494533539,left_val:0.5119969844818115},{features:[[2,8,4,6,-1.],[2,10,4,2,3.]],threshold:-7.5633148662745953e-004,right_val:0.5189831256866455,left_val:0.3317120075225830},{features:[[10,14,1,6,-1.],[10,17,1,3,2.]],threshold:9.8403859883546829e-003,right_val:0.2334959059953690,left_val:0.5247598290443420},{features:[[7,5,3,6,-1.],[8,5,1,6,3.]],threshold:-1.5953830443322659e-003,right_val:0.4295622110366821,left_val:0.5750094056129456},{features:[[11,2,2,6,-1.],[12,2,1,3,2.],[11,5,1,3,2.]],threshold:3.4766020689858124e-005,right_val:0.5564029216766357,left_val:0.4342445135116577},{features:[[6,6,6,5,-1.],[8,6,2,5,3.]],threshold:0.0298629105091095,right_val:0.6579188108444214,left_val:0.4579147100448608},{features:[[17,1,3,6,-1.],[17,3,3,2,3.]],threshold:0.0113255903124809,right_val:0.3673888146877289,left_val:0.5274311900138855},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-8.7828645482659340e-003,right_val:0.4642167091369629,left_val:0.7100368738174439},{features:[[9,18,3,2,-1.],[10,18,1,2,3.]],threshold:4.3639959767460823e-003,right_val:0.2705877125263214,left_val:0.5279216170310974},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:4.1804728098213673e-003,right_val:0.2449083030223846,left_val:0.5072525143623352},{features:[[12,3,5,2,-1.],[12,4,5,1,2.]],threshold:-4.5668511302210391e-004,right_val:0.5548691153526306,left_val:0.4283105134963989},{features:[[7,1,5,12,-1.],[7,7,5,6,2.]],threshold:-3.7140368949621916e-003,right_val:0.4103653132915497,left_val:0.5519387722015381},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-0.0253042895346880,right_val:0.4869889020919800,left_val:0.6867002248764038},{features:[[4,2,2,2,-1.],[4,3,2,1,2.]],threshold:-3.4454080741852522e-004,right_val:0.5287693142890930,left_val:0.3728874027729034},{features:[[11,14,4,2,-1.],[13,14,2,1,2.],[11,15,2,1,2.]],threshold:-8.3935231668874621e-004,right_val:0.4616062045097351,left_val:0.6060152053833008},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:0.0172800496220589,right_val:0.1819823980331421,left_val:0.5049635767936707},{features:[[9,7,2,3,-1.],[9,8,2,1,3.]],threshold:-6.3595077954232693e-003,right_val:0.5232778787612915,left_val:0.1631239950656891},{features:[[5,5,1,3,-1.],[5,6,1,1,3.]],threshold:1.0298109846189618e-003,right_val:0.6176549196243286,left_val:0.4463278055191040},{features:[[10,10,6,1,-1.],[10,10,3,1,2.]],threshold:1.0117109632119536e-003,right_val:0.4300698935985565,left_val:0.5473384857177734},{features:[[4,10,6,1,-1.],[7,10,3,1,2.]],threshold:-0.0103088002651930,right_val:0.5000867247581482,left_val:0.1166985034942627},{features:[[9,17,3,3,-1.],[9,18,3,1,3.]],threshold:5.4682018235325813e-003,right_val:0.6719213724136353,left_val:0.4769287109375000},{features:[[4,14,1,3,-1.],[4,15,1,1,3.]],threshold:-9.1696460731327534e-004,right_val:0.5178164839744568,left_val:0.3471089899539948},{features:[[12,5,3,3,-1.],[12,6,3,1,3.]],threshold:2.3922820109874010e-003,right_val:0.6216310858726502,left_val:0.4785236120223999},{features:[[4,5,12,3,-1.],[4,6,12,1,3.]],threshold:-7.5573818758130074e-003,right_val:0.4410085082054138,left_val:0.5814796090126038},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-7.7024032361805439e-004,right_val:0.5465722084045410,left_val:0.3878000080585480},{features:[[4,9,3,3,-1.],[5,9,1,3,3.]],threshold:-8.7125990539789200e-003,right_val:0.4995836019515991,left_val:0.1660051047801971},{features:[[6,0,9,17,-1.],[9,0,3,17,3.]],threshold:-0.0103063201531768,right_val:0.5274233818054199,left_val:0.4093391001224518},{features:[[9,12,1,3,-1.],[9,13,1,1,3.]],threshold:-2.0940979011356831e-003,right_val:0.4572280049324036,left_val:0.6206194758415222},{features:[[9,5,2,15,-1.],[9,10,2,5,3.]],threshold:6.8099051713943481e-003,right_val:0.4155600070953369,left_val:0.5567759275436401},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:-1.0746059706434608e-003,right_val:0.4353024959564209,left_val:0.5638927817344666},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:2.1550289820879698e-003,right_val:0.6749758124351502,left_val:0.4826265871524811},{features:[[7,1,6,5,-1.],[9,1,2,5,3.]],threshold:0.0317423194646835,right_val:0.1883248984813690,left_val:0.5048379898071289},{features:[[0,0,20,2,-1.],[0,0,10,2,2.]],threshold:-0.0783827230334282,right_val:0.5260158181190491,left_val:0.2369548976421356},{features:[[2,13,5,3,-1.],[2,14,5,1,3.]],threshold:5.7415119372308254e-003,right_val:0.2776469886302948,left_val:0.5048828721046448},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-2.9014600440859795e-003,right_val:0.4693317115306854,left_val:0.6238604784011841},{features:[[2,5,9,15,-1.],[2,10,9,5,3.]],threshold:-2.6427931152284145e-003,right_val:0.5169777274131775,left_val:0.3314141929149628},{features:[[5,0,12,10,-1.],[11,0,6,5,2.],[5,5,6,5,2.]],threshold:-0.1094966009259224,right_val:0.5183441042900085,left_val:0.2380045056343079},{features:[[5,1,2,3,-1.],[6,1,1,3,2.]],threshold:7.4075913289561868e-005,right_val:0.5362150073051453,left_val:0.4069635868072510},{features:[[10,7,6,1,-1.],[12,7,2,1,3.]],threshold:-5.0593802006915212e-004,right_val:0.4374594092369080,left_val:0.5506706237792969},{features:[[3,1,2,10,-1.],[3,1,1,5,2.],[4,6,1,5,2.]],threshold:-8.2131777890026569e-004,right_val:0.4209375977516174,left_val:0.5525709986686707},{features:[[13,7,2,1,-1.],[13,7,1,1,2.]],threshold:-6.0276539443293586e-005,right_val:0.4748266041278839,left_val:0.5455474853515625},{features:[[4,13,4,6,-1.],[4,15,4,2,3.]],threshold:6.8065142259001732e-003,right_val:0.3424577116966248,left_val:0.5157995820045471},{features:[[13,7,2,1,-1.],[13,7,1,1,2.]],threshold:1.7202789895236492e-003,right_val:0.6331263780593872,left_val:0.5013207793235779},{features:[[5,7,2,1,-1.],[6,7,1,1,2.]],threshold:-1.3016929733566940e-004,right_val:0.4226869940757752,left_val:0.5539718270301819},{features:[[2,12,18,4,-1.],[11,12,9,2,2.],[2,14,9,2,2.]],threshold:-4.8016388900578022e-003,right_val:0.5430780053138733,left_val:0.4425095021724701},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-2.5399310979992151e-003,right_val:0.4697605073451996,left_val:0.7145782113075256},{features:[[16,3,4,2,-1.],[16,4,4,1,2.]],threshold:-1.4278929447755218e-003,right_val:0.5399605035781860,left_val:0.4070445001125336},{features:[[0,2,2,18,-1.],[0,2,1,9,2.],[1,11,1,9,2.]],threshold:-0.0251425504684448,right_val:0.4747352004051209,left_val:0.7884690761566162},{features:[[1,2,18,4,-1.],[10,2,9,2,2.],[1,4,9,2,2.]],threshold:-3.8899609353393316e-003,right_val:0.5577110052108765,left_val:0.4296191930770874},{features:[[9,14,1,3,-1.],[9,15,1,1,3.]],threshold:4.3947459198534489e-003,right_val:0.7023944258689880,left_val:0.4693162143230438},{features:[[2,12,18,4,-1.],[11,12,9,2,2.],[2,14,9,2,2.]],threshold:0.0246784202754498,right_val:0.3812510073184967,left_val:0.5242322087287903},{features:[[0,12,18,4,-1.],[0,12,9,2,2.],[9,14,9,2,2.]],threshold:0.0380476787686348,right_val:0.1687828004360199,left_val:0.5011739730834961},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:7.9424865543842316e-003,right_val:0.6369568109512329,left_val:0.4828582108020783},{features:[[6,4,7,3,-1.],[6,5,7,1,3.]],threshold:-1.5110049862414598e-003,right_val:0.4487667977809906,left_val:0.5906485915184021},{features:[[13,17,3,3,-1.],[13,18,3,1,3.]],threshold:6.4201741479337215e-003,right_val:0.2990570068359375,left_val:0.5241097807884216},{features:[[8,1,3,4,-1.],[9,1,1,4,3.]],threshold:-2.9802159406244755e-003,right_val:0.5078489780426025,left_val:0.3041465878486633},{features:[[11,4,2,4,-1.],[11,4,1,4,2.]],threshold:-7.4580078944563866e-004,right_val:0.5256826281547546,left_val:0.4128139019012451},{features:[[0,17,9,3,-1.],[3,17,3,3,3.]],threshold:-0.0104709500446916,right_val:0.4494296014308929,left_val:0.5808395147323608},{features:[[11,0,2,8,-1.],[12,0,1,4,2.],[11,4,1,4,2.]],threshold:9.3369204550981522e-003,right_val:0.2658948898315430,left_val:0.5246552824974060},{features:[[0,8,6,12,-1.],[0,8,3,6,2.],[3,14,3,6,2.]],threshold:0.0279369000345469,right_val:0.7087256908416748,left_val:0.4674955010414124},{features:[[10,7,4,12,-1.],[10,13,4,6,2.]],threshold:7.4277678504586220e-003,right_val:0.3758518099784851,left_val:0.5409486889839172},{features:[[5,3,8,14,-1.],[5,10,8,7,2.]],threshold:-0.0235845092684031,right_val:0.5238550901412964,left_val:0.3758639991283417},{features:[[14,10,6,1,-1.],[14,10,3,1,2.]],threshold:1.1452640173956752e-003,right_val:0.5804247260093689,left_val:0.4329578876495361},{features:[[0,4,10,4,-1.],[0,6,10,2,2.]],threshold:-4.3468660442158580e-004,right_val:0.3873069882392883,left_val:0.5280618071556091},{features:[[10,0,5,8,-1.],[10,4,5,4,2.]],threshold:0.0106485402211547,right_val:0.5681251883506775,left_val:0.4902113080024719},{features:[[8,1,4,8,-1.],[8,1,2,4,2.],[10,5,2,4,2.]],threshold:-3.9418050437234342e-004,right_val:0.4318251013755798,left_val:0.5570880174636841},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-1.3270479394122958e-004,right_val:0.4343554973602295,left_val:0.5658439993858337},{features:[[8,9,3,4,-1.],[9,9,1,4,3.]],threshold:-2.0125510636717081e-003,right_val:0.4537523984909058,left_val:0.6056739091873169},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:2.4854319635778666e-003,right_val:0.4138010144233704,left_val:0.5390477180480957},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:1.8237880431115627e-003,right_val:0.5717188715934753,left_val:0.4354828894138336},{features:[[7,1,13,3,-1.],[7,2,13,1,3.]],threshold:-0.0166566595435143,right_val:0.5216122865676880,left_val:0.3010913133621216},{features:[[7,13,6,1,-1.],[9,13,2,1,3.]],threshold:8.0349558265879750e-004,right_val:0.3818396925926209,left_val:0.5300151109695435},{features:[[12,11,3,6,-1.],[12,13,3,2,3.]],threshold:3.4170378930866718e-003,right_val:0.4241400063037872,left_val:0.5328028798103333},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-3.6222729249857366e-004,right_val:0.4186977148056030,left_val:0.5491728186607361},{features:[[1,4,18,10,-1.],[10,4,9,5,2.],[1,9,9,5,2.]],threshold:-0.1163002029061317,right_val:0.5226451158523560,left_val:0.1440722048282623},{features:[[8,6,4,9,-1.],[8,9,4,3,3.]],threshold:-0.0146950101479888,right_val:0.4715717136859894,left_val:0.7747725248336792},{features:[[8,6,4,3,-1.],[8,7,4,1,3.]],threshold:2.1972130052745342e-003,right_val:0.3315644860267639,left_val:0.5355433821678162},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-4.6965209185145795e-004,right_val:0.4458136856555939,left_val:0.5767235159873962},{features:[[14,15,4,3,-1.],[14,16,4,1,3.]],threshold:6.5144998952746391e-003,right_val:0.3647888898849487,left_val:0.5215674042701721},{features:[[5,10,3,10,-1.],[6,10,1,10,3.]],threshold:0.0213000606745481,right_val:0.1567950993776321,left_val:0.4994204938411713},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:3.1881409231573343e-003,right_val:0.6287270188331604,left_val:0.4742200076580048},{features:[[0,8,1,6,-1.],[0,10,1,2,3.]],threshold:9.0019777417182922e-004,right_val:0.3943752050399780,left_val:0.5347954034805298},{features:[[10,15,1,3,-1.],[10,16,1,1,3.]],threshold:-5.1772277802228928e-003,right_val:0.5013138055801392,left_val:0.6727191805839539},{features:[[2,15,4,3,-1.],[2,16,4,1,3.]],threshold:-4.3764649890363216e-003,right_val:0.5128793120384216,left_val:0.3106675148010254},{features:[[18,3,2,8,-1.],[19,3,1,4,2.],[18,7,1,4,2.]],threshold:2.6299960445612669e-003,right_val:0.5755215883255005,left_val:0.4886310100555420},{features:[[0,3,2,8,-1.],[0,3,1,4,2.],[1,7,1,4,2.]],threshold:-2.0458688959479332e-003,right_val:0.4558076858520508,left_val:0.6025794148445129},{features:[[3,7,14,10,-1.],[10,7,7,5,2.],[3,12,7,5,2.]],threshold:0.0694827064871788,right_val:0.2185259014368057,left_val:0.5240747928619385},{features:[[0,7,19,3,-1.],[0,8,19,1,3.]],threshold:0.0240489393472672,right_val:0.2090622037649155,left_val:0.5011867284774780},{features:[[12,6,3,3,-1.],[12,7,3,1,3.]],threshold:3.1095340382307768e-003,right_val:0.7108548283576965,left_val:0.4866712093353272},{features:[[0,6,1,3,-1.],[0,7,1,1,3.]],threshold:-1.2503260513767600e-003,right_val:0.5156195163726807,left_val:0.3407891094684601},{features:[[12,6,3,3,-1.],[12,7,3,1,3.]],threshold:-1.0281190043315291e-003,right_val:0.4439432024955750,left_val:0.5575572252273560},{features:[[5,6,3,3,-1.],[5,7,3,1,3.]],threshold:-8.8893622159957886e-003,right_val:0.4620442092418671,left_val:0.6402000784873962},{features:[[8,2,4,2,-1.],[8,3,4,1,2.]],threshold:-6.1094801640138030e-004,right_val:0.5448899865150452,left_val:0.3766441941261292},{features:[[6,3,4,12,-1.],[8,3,2,12,2.]],threshold:-5.7686357758939266e-003,right_val:0.5133677124977112,left_val:0.3318648934364319},{features:[[13,6,2,3,-1.],[13,7,2,1,3.]],threshold:1.8506490159779787e-003,right_val:0.6406934857368469,left_val:0.4903570115566254},{features:[[0,10,20,4,-1.],[0,12,20,2,2.]],threshold:-0.0997994691133499,right_val:0.5015562176704407,left_val:0.1536051034927368},{features:[[2,0,17,14,-1.],[2,7,17,7,2.]],threshold:-0.3512834906578064,right_val:0.5174378752708435,left_val:0.0588231310248375},{features:[[0,0,6,10,-1.],[0,0,3,5,2.],[3,5,3,5,2.]],threshold:-0.0452445708215237,right_val:0.4677872955799103,left_val:0.6961488723754883},{features:[[14,6,6,4,-1.],[14,6,3,4,2.]],threshold:0.0714815780520439,right_val:0.1038092970848084,left_val:0.5167986154556274},{features:[[0,6,6,4,-1.],[3,6,3,4,2.]],threshold:2.1895780228078365e-003,right_val:0.5532060861587524,left_val:0.4273078143596649},{features:[[13,2,7,2,-1.],[13,3,7,1,2.]],threshold:-5.9242651332169771e-004,right_val:0.5276389122009277,left_val:0.4638943970203400},{features:[[0,2,7,2,-1.],[0,3,7,1,2.]],threshold:1.6788389766588807e-003,right_val:0.3932034969329834,left_val:0.5301648974418640},{features:[[6,11,14,2,-1.],[13,11,7,1,2.],[6,12,7,1,2.]],threshold:-2.2163488902151585e-003,right_val:0.4757033884525299,left_val:0.5630694031715393},{features:[[8,5,2,2,-1.],[8,5,1,1,2.],[9,6,1,1,2.]],threshold:1.1568699846975505e-004,right_val:0.5535702705383301,left_val:0.4307535886764526},{features:[[13,9,2,3,-1.],[13,9,1,3,2.]],threshold:-7.2017288766801357e-003,right_val:0.5193064212799072,left_val:0.1444882005453110},{features:[[1,1,3,12,-1.],[2,1,1,12,3.]],threshold:8.9081272017210722e-004,right_val:0.5593621134757996,left_val:0.4384432137012482},{features:[[17,4,1,3,-1.],[17,5,1,1,3.]],threshold:1.9605009583756328e-004,right_val:0.4705956876277924,left_val:0.5340415835380554},{features:[[2,4,1,3,-1.],[2,5,1,1,3.]],threshold:5.2022142335772514e-004,right_val:0.3810079097747803,left_val:0.5213856101036072},{features:[[14,5,1,3,-1.],[14,6,1,1,3.]],threshold:9.4588572392240167e-004,right_val:0.6130738854408264,left_val:0.4769414961338043},{features:[[7,16,2,3,-1.],[7,17,2,1,3.]],threshold:9.1698471806012094e-005,right_val:0.5429363250732422,left_val:0.4245009124279022},{features:[[8,13,4,6,-1.],[10,13,2,3,2.],[8,16,2,3,2.]],threshold:2.1833200007677078e-003,right_val:0.4191075861454010,left_val:0.5457730889320374},{features:[[5,5,1,3,-1.],[5,6,1,1,3.]],threshold:-8.6039671441540122e-004,right_val:0.4471659958362579,left_val:0.5764588713645935},{features:[[16,0,4,20,-1.],[16,0,2,20,2.]],threshold:-0.0132362395524979,right_val:0.4695009887218475,left_val:0.6372823119163513},{features:[[5,1,2,6,-1.],[5,1,1,3,2.],[6,4,1,3,2.]],threshold:4.3376701069064438e-004,right_val:0.3945829868316650,left_val:0.5317873954772949}],threshold:67.6989212036132810},{simpleClassifiers:[{features:[[5,4,10,4,-1.],[5,6,10,2,2.]],threshold:-0.0248471498489380,right_val:0.3873311877250671,left_val:0.6555516719818115},{features:[[15,2,4,12,-1.],[15,2,2,12,2.]],threshold:6.1348611488938332e-003,right_val:0.5973997712135315,left_val:0.3748072087764740},{features:[[7,6,4,12,-1.],[7,12,4,6,2.]],threshold:6.4498498104512691e-003,right_val:0.2548811137676239,left_val:0.5425491929054260},{features:[[14,5,1,8,-1.],[14,9,1,4,2.]],threshold:6.3491211039945483e-004,right_val:0.5387253761291504,left_val:0.2462442070245743},{features:[[1,4,14,10,-1.],[1,4,7,5,2.],[8,9,7,5,2.]],threshold:1.4023890253156424e-003,right_val:0.3528657853603363,left_val:0.5594322085380554},{features:[[11,6,6,14,-1.],[14,6,3,7,2.],[11,13,3,7,2.]],threshold:3.0044000595808029e-004,right_val:0.5765938162803650,left_val:0.3958503901958466},{features:[[3,6,6,14,-1.],[3,6,3,7,2.],[6,13,3,7,2.]],threshold:1.0042409849120304e-004,right_val:0.5534998178482056,left_val:0.3698996901512146},{features:[[4,9,15,2,-1.],[9,9,5,2,3.]],threshold:-5.0841490738093853e-003,right_val:0.5547800064086914,left_val:0.3711090981960297},{features:[[7,14,6,3,-1.],[7,15,6,1,3.]],threshold:-0.0195372607558966,right_val:0.4579297006130219,left_val:0.7492755055427551},{features:[[6,3,14,4,-1.],[13,3,7,2,2.],[6,5,7,2,2.]],threshold:-7.4532740654831287e-006,right_val:0.3904069960117340,left_val:0.5649787187576294},{features:[[1,9,15,2,-1.],[6,9,5,2,3.]],threshold:-3.6079459823668003e-003,right_val:0.5267801284790039,left_val:0.3381088078022003},{features:[[6,11,8,9,-1.],[6,14,8,3,3.]],threshold:2.0697501022368670e-003,right_val:0.3714388906955719,left_val:0.5519291162490845},{features:[[7,4,3,8,-1.],[8,4,1,8,3.]],threshold:-4.6463840408250690e-004,right_val:0.4113566875457764,left_val:0.5608214735984802},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:7.5490452582016587e-004,right_val:0.5329356193542481,left_val:0.3559206128120422},{features:[[5,7,6,4,-1.],[5,7,3,2,2.],[8,9,3,2,2.]],threshold:-9.8322238773107529e-004,right_val:0.3763205111026764,left_val:0.5414795875549316},{features:[[1,1,18,19,-1.],[7,1,6,19,3.]],threshold:-0.0199406407773495,right_val:0.4705299139022827,left_val:0.6347903013229370},{features:[[1,2,6,5,-1.],[4,2,3,5,2.]],threshold:3.7680300883948803e-003,right_val:0.5563716292381287,left_val:0.3913489878177643},{features:[[12,17,6,2,-1.],[12,18,6,1,2.]],threshold:-9.4528505578637123e-003,right_val:0.5215116739273071,left_val:0.2554892897605896},{features:[[2,17,6,2,-1.],[2,18,6,1,2.]],threshold:2.9560849070549011e-003,right_val:0.3063920140266419,left_val:0.5174679160118103},{features:[[17,3,3,6,-1.],[17,5,3,2,3.]],threshold:9.1078737750649452e-003,right_val:0.2885963022708893,left_val:0.5388448238372803},{features:[[8,17,3,3,-1.],[8,18,3,1,3.]],threshold:1.8219229532405734e-003,right_val:0.5852196812629700,left_val:0.4336043000221252},{features:[[10,13,2,6,-1.],[10,16,2,3,2.]],threshold:0.0146887395530939,right_val:0.2870005965232849,left_val:0.5287361741065979},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:-0.0143879903480411,right_val:0.4647370874881744,left_val:0.7019448876380920},{features:[[17,3,3,6,-1.],[17,5,3,2,3.]],threshold:-0.0189866498112679,right_val:0.5247011780738831,left_val:0.2986552119255066},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:1.1527639580890536e-003,right_val:0.5931661725044251,left_val:0.4323473870754242},{features:[[9,3,6,2,-1.],[11,3,2,2,3.]],threshold:0.0109336702153087,right_val:0.3130319118499756,left_val:0.5286864042282105},{features:[[0,3,3,6,-1.],[0,5,3,2,3.]],threshold:-0.0149327302351594,right_val:0.5084077119827271,left_val:0.2658419013023377},{features:[[8,5,4,6,-1.],[8,7,4,2,3.]],threshold:-2.9970539617352188e-004,right_val:0.3740724027156830,left_val:0.5463526844978333},{features:[[5,5,3,2,-1.],[5,6,3,1,2.]],threshold:4.1677621193230152e-003,right_val:0.7435721755027771,left_val:0.4703496992588043},{features:[[10,1,3,4,-1.],[11,1,1,4,3.]],threshold:-6.3905320130288601e-003,right_val:0.5280538201332092,left_val:0.2069258987903595},{features:[[1,2,5,9,-1.],[1,5,5,3,3.]],threshold:4.5029609464108944e-003,right_val:0.3483543097972870,left_val:0.5182648897171021},{features:[[13,6,2,3,-1.],[13,7,2,1,3.]],threshold:-9.2040365561842918e-003,right_val:0.4932360053062439,left_val:0.6803777217864990},{features:[[0,6,14,3,-1.],[7,6,7,3,2.]],threshold:0.0813272595405579,right_val:0.2253051996231079,left_val:0.5058398842811585},{features:[[2,11,18,8,-1.],[2,15,18,4,2.]],threshold:-0.1507928073406220,right_val:0.5264679789543152,left_val:0.2963424921035767},{features:[[5,6,2,3,-1.],[5,7,2,1,3.]],threshold:3.3179009333252907e-003,right_val:0.7072932124137878,left_val:0.4655495882034302},{features:[[10,6,4,2,-1.],[12,6,2,1,2.],[10,7,2,1,2.]],threshold:7.7402801252901554e-004,right_val:0.5668237805366516,left_val:0.4780347943305969},{features:[[6,6,4,2,-1.],[6,6,2,1,2.],[8,7,2,1,2.]],threshold:6.8199541419744492e-004,right_val:0.5722156763076782,left_val:0.4286996126174927},{features:[[10,1,3,4,-1.],[11,1,1,4,3.]],threshold:5.3671570494771004e-003,right_val:0.3114621937274933,left_val:0.5299307107925415},{features:[[7,1,2,7,-1.],[8,1,1,7,2.]],threshold:9.7018666565418243e-005,right_val:0.5269461870193481,left_val:0.3674638867378235},{features:[[4,2,15,14,-1.],[4,9,15,7,2.]],threshold:-0.1253408938646317,right_val:0.5245791077613831,left_val:0.2351492047309876},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-5.2516269497573376e-003,right_val:0.4693767130374908,left_val:0.7115936875343323},{features:[[2,3,18,4,-1.],[11,3,9,2,2.],[2,5,9,2,2.]],threshold:-7.8342109918594360e-003,right_val:0.5409085750579834,left_val:0.4462651014328003},{features:[[9,7,2,2,-1.],[10,7,1,2,2.]],threshold:-1.1310069821774960e-003,right_val:0.4417662024497986,left_val:0.5945618748664856},{features:[[13,9,2,3,-1.],[13,9,1,3,2.]],threshold:1.7601120052859187e-003,right_val:0.3973453044891357,left_val:0.5353249907493591},{features:[[5,2,6,2,-1.],[7,2,2,2,3.]],threshold:-8.1581249833106995e-004,right_val:0.5264726877212524,left_val:0.3760268092155457},{features:[[9,5,2,7,-1.],[9,5,1,7,2.]],threshold:-3.8687589112669230e-003,right_val:0.4749819934368134,left_val:0.6309912800788879},{features:[[5,9,2,3,-1.],[6,9,1,3,2.]],threshold:1.5207129763439298e-003,right_val:0.3361223936080933,left_val:0.5230181813240051},{features:[[6,0,14,18,-1.],[6,9,14,9,2.]],threshold:0.5458673834800720,right_val:0.1172635033726692,left_val:0.5167139768600464},{features:[[2,16,6,3,-1.],[2,17,6,1,3.]],threshold:0.0156501904129982,right_val:0.1393294930458069,left_val:0.4979439079761505},{features:[[9,7,3,6,-1.],[10,7,1,6,3.]],threshold:-0.0117318602278829,right_val:0.4921196103096008,left_val:0.7129650712013245},{features:[[7,8,4,3,-1.],[7,9,4,1,3.]],threshold:-6.1765122227370739e-003,right_val:0.5049701929092407,left_val:0.2288102954626083},{features:[[7,12,6,3,-1.],[7,13,6,1,3.]],threshold:2.2457661107182503e-003,right_val:0.6048725843429565,left_val:0.4632433950901032},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-5.1915869116783142e-003,right_val:0.4602192938327789,left_val:0.6467421054840088},{features:[[7,12,6,2,-1.],[9,12,2,2,3.]],threshold:-0.0238278806209564,right_val:0.5226079225540161,left_val:0.1482000946998596},{features:[[5,11,4,6,-1.],[5,14,4,3,2.]],threshold:1.0284580057486892e-003,right_val:0.3375957012176514,left_val:0.5135489106178284},{features:[[11,12,7,2,-1.],[11,13,7,1,2.]],threshold:-0.0100788502022624,right_val:0.5303567051887512,left_val:0.2740561068058014},{features:[[6,10,8,6,-1.],[6,10,4,3,2.],[10,13,4,3,2.]],threshold:2.6168930344283581e-003,right_val:0.3972454071044922,left_val:0.5332670807838440},{features:[[11,10,3,4,-1.],[11,12,3,2,2.]],threshold:5.4385367548093200e-004,right_val:0.4063411951065064,left_val:0.5365604162216187},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:5.3510512225329876e-003,right_val:0.6889045834541321,left_val:0.4653759002685547},{features:[[13,3,1,9,-1.],[13,6,1,3,3.]],threshold:-1.5274790348485112e-003,right_val:0.3624723851680756,left_val:0.5449501276016235},{features:[[1,13,14,6,-1.],[1,15,14,2,3.]],threshold:-0.0806244164705276,right_val:0.5000287294387817,left_val:0.1656087040901184},{features:[[13,6,1,6,-1.],[13,9,1,3,2.]],threshold:0.0221920292824507,right_val:0.2002808004617691,left_val:0.5132731199264526},{features:[[0,4,3,8,-1.],[1,4,1,8,3.]],threshold:7.3100631125271320e-003,right_val:0.6366536021232605,left_val:0.4617947936058044},{features:[[18,0,2,18,-1.],[18,0,1,18,2.]],threshold:-6.4063072204589844e-003,right_val:0.4867860972881317,left_val:0.5916250944137573},{features:[[2,3,6,2,-1.],[2,4,6,1,2.]],threshold:-7.6415040530264378e-004,right_val:0.5315797924995422,left_val:0.3888409137725830},{features:[[9,0,8,6,-1.],[9,2,8,2,3.]],threshold:7.6734489994123578e-004,right_val:0.5605279803276062,left_val:0.4159064888954163},{features:[[6,6,1,6,-1.],[6,9,1,3,2.]],threshold:6.1474501853808761e-004,right_val:0.5120148062705994,left_val:0.3089022040367127},{features:[[14,8,6,3,-1.],[14,9,6,1,3.]],threshold:-5.0105270929634571e-003,right_val:0.5207306146621704,left_val:0.3972199857234955},{features:[[0,0,2,18,-1.],[1,0,1,18,2.]],threshold:-8.6909132078289986e-003,right_val:0.4608575999736786,left_val:0.6257408261299133},{features:[[1,18,18,2,-1.],[10,18,9,1,2.],[1,19,9,1,2.]],threshold:-0.0163914598524570,right_val:0.5242266058921814,left_val:0.2085209935903549},{features:[[3,15,2,2,-1.],[3,16,2,1,2.]],threshold:4.0973909199237823e-004,right_val:0.3780320882797241,left_val:0.5222427248954773},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-2.5242289993911982e-003,right_val:0.4611890017986298,left_val:0.5803927183151245},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:5.0945312250405550e-004,right_val:0.5846015810966492,left_val:0.4401271939277649},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:1.9656419754028320e-003,right_val:0.4184590876102448,left_val:0.5322325229644775},{features:[[7,5,6,2,-1.],[9,5,2,2,3.]],threshold:5.6298897834494710e-004,right_val:0.5234565734863281,left_val:0.3741844892501831},{features:[[15,5,5,2,-1.],[15,6,5,1,2.]],threshold:-6.7946797935292125e-004,right_val:0.5356478095054627,left_val:0.4631041884422302},{features:[[0,5,5,2,-1.],[0,6,5,1,2.]],threshold:7.2856349870562553e-003,right_val:0.2377564013004303,left_val:0.5044670104980469},{features:[[17,14,1,6,-1.],[17,17,1,3,2.]],threshold:-0.0174594894051552,right_val:0.5050435066223145,left_val:0.7289121150970459},{features:[[2,9,9,3,-1.],[5,9,3,3,3.]],threshold:-0.0254217498004436,right_val:0.4678100049495697,left_val:0.6667134761810303},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:-1.5647639520466328e-003,right_val:0.5323626995086670,left_val:0.4391759037971497},{features:[[0,0,4,18,-1.],[2,0,2,18,2.]],threshold:0.0114443600177765,right_val:0.5680012106895447,left_val:0.4346440136432648},{features:[[17,6,1,3,-1.],[17,7,1,1,3.]],threshold:-6.7352550104260445e-004,right_val:0.5296812057495117,left_val:0.4477140903472900},{features:[[2,14,1,6,-1.],[2,17,1,3,2.]],threshold:9.3194209039211273e-003,right_val:0.7462607026100159,left_val:0.4740200042724609},{features:[[19,8,1,2,-1.],[19,9,1,1,2.]],threshold:1.3328490604180843e-004,right_val:0.4752134978771210,left_val:0.5365061759948731},{features:[[5,3,3,3,-1.],[6,3,1,3,3.]],threshold:-7.8815799206495285e-003,right_val:0.5015255212783814,left_val:0.1752219051122665},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:-5.7985680177807808e-003,right_val:0.4896200895309448,left_val:0.7271236777305603},{features:[[2,6,1,3,-1.],[2,7,1,1,3.]],threshold:-3.8922499516047537e-004,right_val:0.5344941020011902,left_val:0.4003908932209015},{features:[[12,4,8,2,-1.],[16,4,4,1,2.],[12,5,4,1,2.]],threshold:-1.9288610201328993e-003,right_val:0.4803955852985382,left_val:0.5605612993240356},{features:[[0,4,8,2,-1.],[0,4,4,1,2.],[4,5,4,1,2.]],threshold:8.4214154630899429e-003,right_val:0.7623608708381653,left_val:0.4753246903419495},{features:[[2,16,18,4,-1.],[2,18,18,2,2.]],threshold:8.1655876711010933e-003,right_val:0.4191643893718720,left_val:0.5393261909484863},{features:[[7,15,2,4,-1.],[7,17,2,2,2.]],threshold:4.8280550981871784e-004,right_val:0.5399821996688843,left_val:0.4240800142288208},{features:[[4,0,14,3,-1.],[4,1,14,1,3.]],threshold:-2.7186630759388208e-003,right_val:0.5424923896789551,left_val:0.4244599938392639},{features:[[0,0,4,20,-1.],[2,0,2,20,2.]],threshold:-0.0125072300434113,right_val:0.4550411105155945,left_val:0.5895841717720032},{features:[[12,4,4,8,-1.],[14,4,2,4,2.],[12,8,2,4,2.]],threshold:-0.0242865197360516,right_val:0.5189179778099060,left_val:0.2647134959697723},{features:[[6,7,2,2,-1.],[6,7,1,1,2.],[7,8,1,1,2.]],threshold:-2.9676330741494894e-003,right_val:0.4749749898910523,left_val:0.7347682714462280},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:-0.0125289997085929,right_val:0.5177599787712097,left_val:0.2756049931049347},{features:[[8,7,3,2,-1.],[8,8,3,1,2.]],threshold:-1.0104000102728605e-003,right_val:0.5144724249839783,left_val:0.3510560989379883},{features:[[8,2,6,12,-1.],[8,8,6,6,2.]],threshold:-2.1348530426621437e-003,right_val:0.4667319953441620,left_val:0.5637925863265991},{features:[[4,0,11,12,-1.],[4,4,11,4,3.]],threshold:0.0195642597973347,right_val:0.6137639880180359,left_val:0.4614573121070862},{features:[[14,9,6,11,-1.],[16,9,2,11,3.]],threshold:-0.0971463471651077,right_val:0.5193555951118469,left_val:0.2998378872871399},{features:[[0,14,4,3,-1.],[0,15,4,1,3.]],threshold:4.5014568604528904e-003,right_val:0.3045755922794342,left_val:0.5077884793281555},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:6.3706971704959869e-003,right_val:0.6887500882148743,left_val:0.4861018955707550},{features:[[5,11,3,2,-1.],[5,12,3,1,2.]],threshold:-9.0721528977155685e-003,right_val:0.5017563104629517,left_val:0.1673395931720734},{features:[[9,15,3,3,-1.],[10,15,1,3,3.]],threshold:-5.3537208586931229e-003,right_val:0.5242633223533630,left_val:0.2692756950855255},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:-0.0109328404068947,right_val:0.4736028909683228,left_val:0.7183864116668701},{features:[[9,15,3,3,-1.],[10,15,1,3,3.]],threshold:8.2356072962284088e-003,right_val:0.2389862984418869,left_val:0.5223966836929321},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-1.0038160253316164e-003,right_val:0.4433943033218384,left_val:0.5719355940818787},{features:[[2,10,16,4,-1.],[10,10,8,2,2.],[2,12,8,2,2.]],threshold:4.0859128348529339e-003,right_val:0.4148836135864258,left_val:0.5472841858863831},{features:[[2,3,4,17,-1.],[4,3,2,17,2.]],threshold:0.1548541933298111,right_val:0.0610615983605385,left_val:0.4973812103271484},{features:[[15,13,2,7,-1.],[15,13,1,7,2.]],threshold:2.0897459762636572e-004,right_val:0.5423889160156250,left_val:0.4709174036979675},{features:[[2,2,6,1,-1.],[5,2,3,1,2.]],threshold:3.3316991175524890e-004,right_val:0.5300992131233215,left_val:0.4089626967906952},{features:[[5,2,12,4,-1.],[9,2,4,4,3.]],threshold:-0.0108134001493454,right_val:0.4957334101200104,left_val:0.6104369759559631},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0456560105085373,right_val:0.2866660058498383,left_val:0.5069689154624939},{features:[[13,7,2,2,-1.],[14,7,1,1,2.],[13,8,1,1,2.]],threshold:1.2569549726322293e-003,right_val:0.6318171024322510,left_val:0.4846917092800140},{features:[[0,12,20,6,-1.],[0,14,20,2,3.]],threshold:-0.1201507002115250,right_val:0.4980959892272949,left_val:0.0605261400341988},{features:[[14,7,2,3,-1.],[14,7,1,3,2.]],threshold:-1.0533799650147557e-004,right_val:0.4708042144775391,left_val:0.5363109707832336},{features:[[0,8,9,12,-1.],[3,8,3,12,3.]],threshold:-0.2070319056510925,right_val:0.4979098141193390,left_val:0.0596603304147720},{features:[[3,0,16,2,-1.],[3,0,8,2,2.]],threshold:1.2909180077258497e-004,right_val:0.5377997756004334,left_val:0.4712977111339569},{features:[[6,15,3,3,-1.],[6,16,3,1,3.]],threshold:3.8818528992123902e-004,right_val:0.5534191131591797,left_val:0.4363538026809692},{features:[[8,15,6,3,-1.],[8,16,6,1,3.]],threshold:-2.9243610333651304e-003,right_val:0.4825215935707092,left_val:0.5811185836791992},{features:[[0,10,1,6,-1.],[0,12,1,2,3.]],threshold:8.3882332546636462e-004,right_val:0.4038138985633850,left_val:0.5311700105667114},{features:[[10,9,4,3,-1.],[10,10,4,1,3.]],threshold:-1.9061550265178084e-003,right_val:0.5260015130043030,left_val:0.3770701885223389},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:8.9514348655939102e-003,right_val:0.7682183980941773,left_val:0.4766167998313904},{features:[[5,7,10,1,-1.],[5,7,5,1,2.]],threshold:0.0130834598094225,right_val:0.3062222003936768,left_val:0.5264462828636169},{features:[[4,0,12,19,-1.],[10,0,6,19,2.]],threshold:-0.2115933001041412,right_val:0.4695810079574585,left_val:0.6737198233604431},{features:[[0,6,20,6,-1.],[10,6,10,3,2.],[0,9,10,3,2.]],threshold:3.1493250280618668e-003,right_val:0.4386953115463257,left_val:0.5644835233688355},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:3.9754100725986063e-004,right_val:0.5895630121231079,left_val:0.4526061117649078},{features:[[15,6,2,2,-1.],[16,6,1,1,2.],[15,7,1,1,2.]],threshold:-1.3814480043947697e-003,right_val:0.4942413866519928,left_val:0.6070582270622253},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:-5.8122188784182072e-004,right_val:0.4508252143859863,left_val:0.5998213291168213},{features:[[14,4,1,12,-1.],[14,10,1,6,2.]],threshold:-2.3905329871922731e-003,right_val:0.5223848223686218,left_val:0.4205588996410370},{features:[[2,5,16,10,-1.],[2,5,8,5,2.],[10,10,8,5,2.]],threshold:0.0272689294070005,right_val:0.3563301861286163,left_val:0.5206447243690491},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-3.7658358924090862e-003,right_val:0.5218814015388489,left_val:0.3144704103469849},{features:[[1,4,2,2,-1.],[1,5,2,1,2.]],threshold:-1.4903489500284195e-003,right_val:0.5124437212944031,left_val:0.3380196094512940},{features:[[5,0,15,5,-1.],[10,0,5,5,3.]],threshold:-0.0174282304942608,right_val:0.4919725954532623,left_val:0.5829960703849793},{features:[[0,0,15,5,-1.],[5,0,5,5,3.]],threshold:-0.0152780301868916,right_val:0.4617887139320374,left_val:0.6163144707679749},{features:[[11,2,2,17,-1.],[11,2,1,17,2.]],threshold:0.0319956094026566,right_val:0.1712764054536820,left_val:0.5166357159614563},{features:[[7,2,2,17,-1.],[8,2,1,17,2.]],threshold:-3.8256710395216942e-003,right_val:0.5131387710571289,left_val:0.3408012092113495},{features:[[15,11,2,9,-1.],[15,11,1,9,2.]],threshold:-8.5186436772346497e-003,right_val:0.4997941851615906,left_val:0.6105518937110901},{features:[[3,11,2,9,-1.],[4,11,1,9,2.]],threshold:9.0641621500253677e-004,right_val:0.5582311153411865,left_val:0.4327270984649658},{features:[[5,16,14,4,-1.],[5,16,7,4,2.]],threshold:0.0103448498994112,right_val:0.5452420115470886,left_val:0.4855653047561646}],threshold:69.2298736572265630},{simpleClassifiers:[{features:[[1,4,18,1,-1.],[7,4,6,1,3.]],threshold:7.8981826081871986e-003,right_val:0.5946462154388428,left_val:0.3332524895668030},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:1.6170160379260778e-003,right_val:0.5577868819236755,left_val:0.3490641117095947},{features:[[9,8,2,12,-1.],[9,12,2,4,3.]],threshold:-5.5449741194024682e-004,right_val:0.3291530013084412,left_val:0.5542566180229187},{features:[[12,1,6,6,-1.],[12,3,6,2,3.]],threshold:1.5428980113938451e-003,right_val:0.5545979142189026,left_val:0.3612579107284546},{features:[[5,2,6,6,-1.],[5,2,3,3,2.],[8,5,3,3,2.]],threshold:-1.0329450014978647e-003,right_val:0.5576140284538269,left_val:0.3530139029026032},{features:[[9,16,6,4,-1.],[12,16,3,2,2.],[9,18,3,2,2.]],threshold:7.7698158565908670e-004,right_val:0.5645321011543274,left_val:0.3916778862476349},{features:[[1,2,18,3,-1.],[7,2,6,3,3.]],threshold:0.1432030051946640,right_val:0.7023633122444153,left_val:0.4667482078075409},{features:[[7,4,9,10,-1.],[7,9,9,5,2.]],threshold:-7.3866490274667740e-003,right_val:0.5289257764816284,left_val:0.3073684871196747},{features:[[5,9,4,4,-1.],[7,9,2,4,2.]],threshold:-6.2936742324382067e-004,right_val:0.4037049114704132,left_val:0.5622118115425110},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:7.8893528552725911e-004,right_val:0.3557874858379364,left_val:0.5267661213874817},{features:[[7,11,5,3,-1.],[7,12,5,1,3.]],threshold:-0.0122280502691865,right_val:0.4625549912452698,left_val:0.6668320894241333},{features:[[7,11,6,6,-1.],[10,11,3,3,2.],[7,14,3,3,2.]],threshold:3.5420239437371492e-003,right_val:0.3869673013687134,left_val:0.5521438121795654},{features:[[0,0,10,9,-1.],[0,3,10,3,3.]],threshold:-1.0585320414975286e-003,right_val:0.5320926904678345,left_val:0.3628678023815155},{features:[[13,14,1,6,-1.],[13,16,1,2,3.]],threshold:1.4935660146875307e-005,right_val:0.5363323092460632,left_val:0.4632444977760315},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:5.2537708543241024e-003,right_val:0.3265708982944489,left_val:0.5132231712341309},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-8.2338023930788040e-003,right_val:0.4774140119552612,left_val:0.6693689823150635},{features:[[6,14,1,6,-1.],[6,16,1,2,3.]],threshold:2.1866810129722580e-005,right_val:0.5457931160926819,left_val:0.4053862094879150},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:-3.8150229956954718e-003,right_val:0.4793178141117096,left_val:0.6454995870590210},{features:[[6,4,3,3,-1.],[7,4,1,3,3.]],threshold:1.1105879675596952e-003,right_val:0.3529678881168366,left_val:0.5270407199859619},{features:[[9,0,11,3,-1.],[9,1,11,1,3.]],threshold:-5.7707689702510834e-003,right_val:0.5352957844734192,left_val:0.3803547024726868},{features:[[0,6,20,3,-1.],[0,7,20,1,3.]],threshold:-3.0158339068293571e-003,right_val:0.3887133002281189,left_val:0.5339403152465820},{features:[[10,1,1,2,-1.],[10,2,1,1,2.]],threshold:-8.5453689098358154e-004,right_val:0.5273603796958923,left_val:0.3564616143703461},{features:[[9,6,2,6,-1.],[10,6,1,6,2.]],threshold:0.0110505102202296,right_val:0.6849737763404846,left_val:0.4671907126903534},{features:[[5,8,12,1,-1.],[9,8,4,1,3.]],threshold:0.0426058396697044,right_val:0.0702200904488564,left_val:0.5151473283767700},{features:[[3,8,12,1,-1.],[7,8,4,1,3.]],threshold:-3.0781750101596117e-003,right_val:0.5152602195739746,left_val:0.3041661083698273},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-5.4815728217363358e-003,right_val:0.4897229969501495,left_val:0.6430295705795288},{features:[[3,9,6,2,-1.],[6,9,3,2,2.]],threshold:3.1881860923022032e-003,right_val:0.3826209902763367,left_val:0.5307493209838867},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:3.5947180003859103e-004,right_val:0.5421904921531677,left_val:0.4650047123432159},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:-4.0705031715333462e-003,right_val:0.5079116225242615,left_val:0.2849679887294769},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:-0.0145941702648997,right_val:0.5128461718559265,left_val:0.2971645891666412},{features:[[7,10,2,1,-1.],[8,10,1,1,2.]],threshold:-1.1947689927183092e-004,right_val:0.4343082010746002,left_val:0.5631098151206970},{features:[[6,4,9,13,-1.],[9,4,3,13,3.]],threshold:-6.9344649091362953e-004,right_val:0.5359959006309509,left_val:0.4403578042984009},{features:[[6,8,4,2,-1.],[6,9,4,1,2.]],threshold:1.4834799912932795e-005,right_val:0.5164697766304016,left_val:0.3421008884906769},{features:[[16,2,4,6,-1.],[16,2,2,6,2.]],threshold:9.0296985581517220e-003,right_val:0.6114075183868408,left_val:0.4639343023300171},{features:[[0,17,6,3,-1.],[0,18,6,1,3.]],threshold:-8.0640818923711777e-003,right_val:0.5075494050979614,left_val:0.2820158898830414},{features:[[10,10,3,10,-1.],[10,15,3,5,2.]],threshold:0.0260621197521687,right_val:0.2688778042793274,left_val:0.5208905935287476},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:0.0173146594315767,right_val:0.6738539934158325,left_val:0.4663713872432709},{features:[[10,4,4,3,-1.],[10,4,2,3,2.]],threshold:0.0226666405797005,right_val:0.2212723940610886,left_val:0.5209349989891052},{features:[[8,4,3,8,-1.],[9,4,1,8,3.]],threshold:-2.1965929772704840e-003,right_val:0.4538190066814423,left_val:0.6063101291656494},{features:[[6,6,9,13,-1.],[9,6,3,13,3.]],threshold:-9.5282476395368576e-003,right_val:0.5247430801391602,left_val:0.4635204970836639},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:8.0943619832396507e-003,right_val:0.3913882076740265,left_val:0.5289440155029297},{features:[[14,2,6,8,-1.],[16,2,2,8,3.]],threshold:-0.0728773325681686,right_val:0.4990234971046448,left_val:0.7752001881599426},{features:[[6,0,3,6,-1.],[7,0,1,6,3.]],threshold:-6.9009521976113319e-003,right_val:0.5048090219497681,left_val:0.2428039014339447},{features:[[14,2,6,8,-1.],[16,2,2,8,3.]],threshold:-0.0113082397729158,right_val:0.4842376112937927,left_val:0.5734364986419678},{features:[[0,5,6,6,-1.],[0,8,6,3,2.]],threshold:0.0596132017672062,right_val:0.2524977028369904,left_val:0.5029836297035217},{features:[[9,12,6,2,-1.],[12,12,3,1,2.],[9,13,3,1,2.]],threshold:-2.8624620754271746e-003,right_val:0.4898459911346436,left_val:0.6073045134544373},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:4.4781449250876904e-003,right_val:0.2220316976308823,left_val:0.5015289187431335},{features:[[11,6,2,2,-1.],[12,6,1,1,2.],[11,7,1,1,2.]],threshold:-1.7513240454718471e-003,right_val:0.4933868944644928,left_val:0.6614428758621216},{features:[[1,9,18,2,-1.],[7,9,6,2,3.]],threshold:0.0401634201407433,right_val:0.3741044998168945,left_val:0.5180878043174744},{features:[[11,6,2,2,-1.],[12,6,1,1,2.],[11,7,1,1,2.]],threshold:3.4768949262797832e-004,right_val:0.5818032026290894,left_val:0.4720416963100433},{features:[[3,4,12,8,-1.],[7,4,4,8,3.]],threshold:2.6551650371402502e-003,right_val:0.5221335887908936,left_val:0.3805010914802551},{features:[[13,11,5,3,-1.],[13,12,5,1,3.]],threshold:-8.7706279009580612e-003,right_val:0.5231295228004456,left_val:0.2944166064262390},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:-5.5122091434895992e-003,right_val:0.4722816944122315,left_val:0.7346177101135254},{features:[[14,7,2,3,-1.],[14,7,1,3,2.]],threshold:6.8672042107209563e-004,right_val:0.4242413043975830,left_val:0.5452876091003418},{features:[[5,4,1,3,-1.],[5,5,1,1,3.]],threshold:5.6019669864326715e-004,right_val:0.5601285099983215,left_val:0.4398862123489380},{features:[[13,4,2,3,-1.],[13,5,2,1,3.]],threshold:2.4143769405782223e-003,right_val:0.6136621832847595,left_val:0.4741686880588532},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:-1.5680900542065501e-003,right_val:0.4516409933567047,left_val:0.6044552922248840},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-3.6827491130679846e-003,right_val:0.5294982194900513,left_val:0.2452459037303925},{features:[[8,9,2,2,-1.],[8,10,2,1,2.]],threshold:-2.9409190756268799e-004,right_val:0.5251451134681702,left_val:0.3732838034629822},{features:[[15,14,1,4,-1.],[15,16,1,2,2.]],threshold:4.2847759323194623e-004,right_val:0.4065535068511963,left_val:0.5498809814453125},{features:[[3,12,2,2,-1.],[3,13,2,1,2.]],threshold:-4.8817070201039314e-003,right_val:0.4999957084655762,left_val:0.2139908969402313},{features:[[12,15,2,2,-1.],[13,15,1,1,2.],[12,16,1,1,2.]],threshold:2.7272020815871656e-004,right_val:0.5813428759574890,left_val:0.4650287032127380},{features:[[9,13,2,2,-1.],[9,14,2,1,2.]],threshold:2.0947199664078653e-004,right_val:0.5572792887687683,left_val:0.4387486875057221},{features:[[4,11,14,9,-1.],[4,14,14,3,3.]],threshold:0.0485011897981167,right_val:0.3212889134883881,left_val:0.5244972705841065},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:-4.5166411437094212e-003,right_val:0.4545882046222687,left_val:0.6056813001632690},{features:[[15,14,1,4,-1.],[15,16,1,2,2.]],threshold:-0.0122916800901294,right_val:0.5152214169502258,left_val:0.2040929049253464},{features:[[4,14,1,4,-1.],[4,16,1,2,2.]],threshold:4.8549679922871292e-004,right_val:0.3739503026008606,left_val:0.5237604975700378},{features:[[14,0,6,13,-1.],[16,0,2,13,3.]],threshold:0.0305560491979122,right_val:0.5938246250152588,left_val:0.4960533976554871},{features:[[4,1,2,12,-1.],[4,1,1,6,2.],[5,7,1,6,2.]],threshold:-1.5105320198927075e-004,right_val:0.4145204126834869,left_val:0.5351303815841675},{features:[[11,14,6,6,-1.],[14,14,3,3,2.],[11,17,3,3,2.]],threshold:2.4937440175563097e-003,right_val:0.5514941215515137,left_val:0.4693366885185242},{features:[[3,14,6,6,-1.],[3,14,3,3,2.],[6,17,3,3,2.]],threshold:-0.0123821301385760,right_val:0.4681667983531952,left_val:0.6791396737098694},{features:[[14,17,3,2,-1.],[14,18,3,1,2.]],threshold:-5.1333461888134480e-003,right_val:0.5229160189628601,left_val:0.3608739078044891},{features:[[3,17,3,2,-1.],[3,18,3,1,2.]],threshold:5.1919277757406235e-004,right_val:0.3633613884449005,left_val:0.5300073027610779},{features:[[14,0,6,13,-1.],[16,0,2,13,3.]],threshold:0.1506042033433914,right_val:0.2211782038211823,left_val:0.5157316923141480},{features:[[0,0,6,13,-1.],[2,0,2,13,3.]],threshold:7.7144149690866470e-003,right_val:0.5776609182357788,left_val:0.4410496950149536},{features:[[10,10,7,6,-1.],[10,12,7,2,3.]],threshold:9.4443522393703461e-003,right_val:0.3756650090217590,left_val:0.5401855111122131},{features:[[6,15,2,2,-1.],[6,15,1,1,2.],[7,16,1,1,2.]],threshold:2.5006249779835343e-004,right_val:0.5607374906539917,left_val:0.4368270933628082},{features:[[6,11,8,6,-1.],[10,11,4,3,2.],[6,14,4,3,2.]],threshold:-3.3077150583267212e-003,right_val:0.5518230795860291,left_val:0.4244799017906189},{features:[[7,6,2,2,-1.],[7,6,1,1,2.],[8,7,1,1,2.]],threshold:7.4048910755664110e-004,right_val:0.5900576710700989,left_val:0.4496962130069733},{features:[[2,2,16,6,-1.],[10,2,8,3,2.],[2,5,8,3,2.]],threshold:0.0440920516848564,right_val:0.3156355023384094,left_val:0.5293493270874023},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:3.3639909233897924e-003,right_val:0.5848662257194519,left_val:0.4483296871185303},{features:[[11,7,3,10,-1.],[11,12,3,5,2.]],threshold:-3.9760079234838486e-003,right_val:0.5483639240264893,left_val:0.4559507071971893},{features:[[6,7,3,10,-1.],[6,12,3,5,2.]],threshold:2.7716930489987135e-003,right_val:0.3792484104633331,left_val:0.5341786146163940},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:-2.4123019829858094e-004,right_val:0.4576973021030426,left_val:0.5667188763618469},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:4.9425667384639382e-004,right_val:0.5628787279129028,left_val:0.4421244859695435},{features:[[10,1,1,3,-1.],[10,2,1,1,3.]],threshold:-3.8876468897797167e-004,right_val:0.5391063094139099,left_val:0.4288370907306671},{features:[[1,2,4,18,-1.],[1,2,2,9,2.],[3,11,2,9,2.]],threshold:-0.0500488989055157,right_val:0.4703742861747742,left_val:0.6899513006210327},{features:[[12,4,4,12,-1.],[12,10,4,6,2.]],threshold:-0.0366354808211327,right_val:0.5191826224327087,left_val:0.2217779010534287},{features:[[0,0,1,6,-1.],[0,2,1,2,3.]],threshold:2.4273579474538565e-003,right_val:0.3497397899627686,left_val:0.5136224031448364},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:1.9558030180633068e-003,right_val:0.6408380866050720,left_val:0.4826192855834961},{features:[[8,7,4,3,-1.],[8,8,4,1,3.]],threshold:-1.7494610510766506e-003,right_val:0.5272685289382935,left_val:0.3922835886478424},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:0.0139550799503922,right_val:0.8416504859924316,left_val:0.5078201889991760},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-2.1896739781368524e-004,right_val:0.4314234852790833,left_val:0.5520489811897278},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:-1.5131309628486633e-003,right_val:0.5382571220397949,left_val:0.3934605121612549},{features:[[8,7,2,3,-1.],[9,7,1,3,2.]],threshold:-4.3622800149023533e-003,right_val:0.4736475944519043,left_val:0.7370628714561462},{features:[[12,7,8,6,-1.],[16,7,4,3,2.],[12,10,4,3,2.]],threshold:0.0651605874300003,right_val:0.3281595110893250,left_val:0.5159279704093933},{features:[[0,7,8,6,-1.],[0,7,4,3,2.],[4,10,4,3,2.]],threshold:-2.3567399475723505e-003,right_val:0.5172886252403259,left_val:0.3672826886177063},{features:[[18,2,2,10,-1.],[19,2,1,5,2.],[18,7,1,5,2.]],threshold:0.0151466596871614,right_val:0.6687604188919067,left_val:0.5031493902206421},{features:[[0,2,6,4,-1.],[3,2,3,4,2.]],threshold:-0.0228509604930878,right_val:0.4709596931934357,left_val:0.6767519712448120},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:4.8867650330066681e-003,right_val:0.4059878885746002,left_val:0.5257998108863831},{features:[[7,15,2,2,-1.],[7,15,1,1,2.],[8,16,1,1,2.]],threshold:1.7619599821045995e-003,right_val:0.6688278913497925,left_val:0.4696272909641266},{features:[[11,13,1,6,-1.],[11,16,1,3,2.]],threshold:-1.2942519970238209e-003,right_val:0.5344281792640686,left_val:0.4320712983608246},{features:[[8,13,1,6,-1.],[8,16,1,3,2.]],threshold:0.0109299495816231,right_val:0.1637486070394516,left_val:0.4997706115245819},{features:[[14,3,2,1,-1.],[14,3,1,1,2.]],threshold:2.9958489903947338e-005,right_val:0.5633224248886108,left_val:0.4282417893409729},{features:[[8,15,2,3,-1.],[8,16,2,1,3.]],threshold:-6.5884361974895000e-003,right_val:0.4700526893138886,left_val:0.6772121191024780},{features:[[12,15,7,4,-1.],[12,17,7,2,2.]],threshold:3.2527779694646597e-003,right_val:0.4536148905754089,left_val:0.5313397049903870},{features:[[4,14,12,3,-1.],[4,15,12,1,3.]],threshold:-4.0435739792883396e-003,right_val:0.4413388967514038,left_val:0.5660061836242676},{features:[[10,3,3,2,-1.],[11,3,1,2,3.]],threshold:-1.2523540062829852e-003,right_val:0.5356451869010925,left_val:0.3731913864612579},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:1.9246719602961093e-004,right_val:0.3738811016082764,left_val:0.5189986228942871},{features:[[10,11,4,6,-1.],[10,14,4,3,2.]],threshold:-0.0385896712541580,right_val:0.5188810825347900,left_val:0.2956373989582062},{features:[[7,13,2,2,-1.],[7,13,1,1,2.],[8,14,1,1,2.]],threshold:1.5489870565943420e-004,right_val:0.5509533286094666,left_val:0.4347135126590729},{features:[[4,11,14,4,-1.],[11,11,7,2,2.],[4,13,7,2,2.]],threshold:-0.0337638482451439,right_val:0.5195475816726685,left_val:0.3230330049991608},{features:[[1,18,18,2,-1.],[7,18,6,2,3.]],threshold:-8.2657067105174065e-003,right_val:0.4552114009857178,left_val:0.5975489020347595},{features:[[11,18,2,2,-1.],[12,18,1,1,2.],[11,19,1,1,2.]],threshold:1.4481440302915871e-005,right_val:0.5497426986694336,left_val:0.4745678007602692},{features:[[7,18,2,2,-1.],[7,18,1,1,2.],[8,19,1,1,2.]],threshold:1.4951299817766994e-005,right_val:0.5480644106864929,left_val:0.4324473142623901},{features:[[12,18,8,2,-1.],[12,19,8,1,2.]],threshold:-0.0187417995184660,right_val:0.5178533196449280,left_val:0.1580052971839905},{features:[[7,14,6,2,-1.],[7,15,6,1,2.]],threshold:1.7572239739820361e-003,right_val:0.5773764252662659,left_val:0.4517636895179749},{features:[[8,12,4,8,-1.],[10,12,2,4,2.],[8,16,2,4,2.]],threshold:-3.1391119118779898e-003,right_val:0.5460842251777649,left_val:0.4149647951126099},{features:[[4,9,3,3,-1.],[4,10,3,1,3.]],threshold:6.6656779381446540e-005,right_val:0.5293084979057312,left_val:0.4039090871810913},{features:[[7,10,6,2,-1.],[9,10,2,2,3.]],threshold:6.7743421532213688e-003,right_val:0.6121956110000610,left_val:0.4767651855945587},{features:[[5,0,4,15,-1.],[7,0,2,15,2.]],threshold:-7.3868161998689175e-003,right_val:0.5187280774116516,left_val:0.3586258888244629},{features:[[8,6,12,14,-1.],[12,6,4,14,3.]],threshold:0.0140409301966429,right_val:0.5576155781745911,left_val:0.4712139964103699},{features:[[5,16,3,3,-1.],[5,17,3,1,3.]],threshold:-5.5258329957723618e-003,right_val:0.5039281249046326,left_val:0.2661027014255524},{features:[[8,1,12,19,-1.],[12,1,4,19,3.]],threshold:0.3868423998355866,right_val:0.2525899112224579,left_val:0.5144339799880981},{features:[[3,0,3,2,-1.],[3,1,3,1,2.]],threshold:1.1459240340627730e-004,right_val:0.5423371195793152,left_val:0.4284994900226593},{features:[[10,12,4,5,-1.],[10,12,2,5,2.]],threshold:-0.0184675697237253,right_val:0.5213062167167664,left_val:0.3885835111141205},{features:[[6,12,4,5,-1.],[8,12,2,5,2.]],threshold:-4.5907011372037232e-004,right_val:0.4235909879207611,left_val:0.5412563085556030},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:1.2527540093287826e-003,right_val:0.6624091267585754,left_val:0.4899305105209351},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:1.4910609461367130e-003,right_val:0.4040051996707916,left_val:0.5286778211593628},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:-7.5435562757775187e-004,right_val:0.4795120060443878,left_val:0.6032990217208862},{features:[[7,6,4,10,-1.],[7,11,4,5,2.]],threshold:-6.9478838704526424e-003,right_val:0.5373504161834717,left_val:0.4084401130676270},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:2.8092920547351241e-004,right_val:0.5759382247924805,left_val:0.4846062958240509},{features:[[2,13,5,2,-1.],[2,14,5,1,2.]],threshold:9.6073717577382922e-004,right_val:0.3554979860782623,left_val:0.5164741277694702},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:-2.6883929967880249e-004,right_val:0.4731765985488892,left_val:0.5677582025527954},{features:[[7,11,2,2,-1.],[7,11,1,1,2.],[8,12,1,1,2.]],threshold:2.1599370520561934e-003,right_val:0.7070567011833191,left_val:0.4731487035751343},{features:[[14,13,3,3,-1.],[14,14,3,1,3.]],threshold:5.6235301308333874e-003,right_val:0.2781791985034943,left_val:0.5240243077278137},{features:[[3,13,3,3,-1.],[3,14,3,1,3.]],threshold:-5.0243991427123547e-003,right_val:0.5062304139137268,left_val:0.2837013900279999},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:-9.7611639648675919e-003,right_val:0.4934569001197815,left_val:0.7400717735290527},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:4.1515100747346878e-003,right_val:0.3407008051872253,left_val:0.5119131207466126},{features:[[13,5,3,3,-1.],[13,6,3,1,3.]],threshold:6.2465080991387367e-003,right_val:0.6579058766365051,left_val:0.4923788011074066},{features:[[0,9,5,3,-1.],[0,10,5,1,3.]],threshold:-7.0597478188574314e-003,right_val:0.5032842159271240,left_val:0.2434711009263992},{features:[[13,5,3,3,-1.],[13,6,3,1,3.]],threshold:-2.0587709732353687e-003,right_val:0.4695087075233460,left_val:0.5900310873985291},{features:[[9,12,2,8,-1.],[9,12,1,4,2.],[10,16,1,4,2.]],threshold:-2.4146060459315777e-003,right_val:0.5189201831817627,left_val:0.3647317886352539},{features:[[11,7,2,2,-1.],[12,7,1,1,2.],[11,8,1,1,2.]],threshold:-1.4817609917372465e-003,right_val:0.4940128028392792,left_val:0.6034948229789734},{features:[[0,16,6,4,-1.],[3,16,3,4,2.]],threshold:-6.3016400672495365e-003,right_val:0.4560427963733673,left_val:0.5818989872932434},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:3.4763428848236799e-003,right_val:0.3483993113040924,left_val:0.5217475891113281},{features:[[9,5,2,6,-1.],[9,7,2,2,3.]],threshold:-0.0222508702427149,right_val:0.5032082796096802,left_val:0.2360700070858002},{features:[[12,15,8,4,-1.],[12,15,4,4,2.]],threshold:-0.0306125506758690,right_val:0.4914919137954712,left_val:0.6499186754226685},{features:[[0,14,8,6,-1.],[4,14,4,6,2.]],threshold:0.0130574796348810,right_val:0.5683764219284058,left_val:0.4413323104381561},{features:[[9,0,3,2,-1.],[10,0,1,2,3.]],threshold:-6.0095742810517550e-004,right_val:0.5333483219146729,left_val:0.4359731078147888},{features:[[4,15,4,2,-1.],[6,15,2,2,2.]],threshold:-4.1514250915497541e-004,right_val:0.4326060116291046,left_val:0.5504062771797180},{features:[[12,7,3,13,-1.],[13,7,1,13,3.]],threshold:-0.0137762902304530,right_val:0.5201548933982849,left_val:0.4064112901687622},{features:[[5,7,3,13,-1.],[6,7,1,13,3.]],threshold:-0.0322965085506439,right_val:0.4977194964885712,left_val:0.0473519712686539},{features:[[9,6,3,9,-1.],[9,9,3,3,3.]],threshold:0.0535569787025452,right_val:0.6666939258575440,left_val:0.4881733059883118},{features:[[4,4,7,12,-1.],[4,10,7,6,2.]],threshold:8.1889545544981956e-003,right_val:0.4240820109844208,left_val:0.5400037169456482},{features:[[12,12,2,2,-1.],[13,12,1,1,2.],[12,13,1,1,2.]],threshold:2.1055320394225419e-004,right_val:0.5563852787017822,left_val:0.4802047908306122},{features:[[6,12,2,2,-1.],[6,12,1,1,2.],[7,13,1,1,2.]],threshold:-2.4382730480283499e-003,right_val:0.4773685038089752,left_val:0.7387793064117432},{features:[[8,9,4,2,-1.],[10,9,2,1,2.],[8,10,2,1,2.]],threshold:3.2835570164024830e-003,right_val:0.3171291947364807,left_val:0.5288546085357666},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:2.3729570675641298e-003,right_val:0.7060170769691467,left_val:0.4750812947750092},{features:[[16,6,3,2,-1.],[16,7,3,1,2.]],threshold:-1.4541699783876538e-003,right_val:0.5330739021301270,left_val:0.3811730146408081}],threshold:79.2490768432617190},{simpleClassifiers:[{features:[[0,7,19,4,-1.],[0,9,19,2,2.]],threshold:0.0557552389800549,right_val:0.6806036829948425,left_val:0.4019156992435455},{features:[[10,2,10,1,-1.],[10,2,5,1,2.]],threshold:2.4730248842388391e-003,right_val:0.5965719819068909,left_val:0.3351148962974548},{features:[[9,4,2,12,-1.],[9,10,2,6,2.]],threshold:-3.5031698644161224e-004,right_val:0.3482286930084229,left_val:0.5557708144187927},{features:[[12,18,4,1,-1.],[12,18,2,1,2.]],threshold:5.4167630150914192e-004,right_val:0.5693380832672119,left_val:0.4260858893394470},{features:[[1,7,6,4,-1.],[1,7,3,2,2.],[4,9,3,2,2.]],threshold:7.7193678589537740e-004,right_val:0.5433688759803772,left_val:0.3494240045547485},{features:[[12,0,6,13,-1.],[14,0,2,13,3.]],threshold:-1.5999219613149762e-003,right_val:0.5484359264373779,left_val:0.4028499126434326},{features:[[2,0,6,13,-1.],[4,0,2,13,3.]],threshold:-1.1832080053864047e-004,right_val:0.5425465106964111,left_val:0.3806901872158051},{features:[[10,5,8,8,-1.],[10,9,8,4,2.]],threshold:3.2909031142480671e-004,right_val:0.5429521799087524,left_val:0.2620100080966950},{features:[[8,3,2,5,-1.],[9,3,1,5,2.]],threshold:2.9518108931370080e-004,right_val:0.5399264097213745,left_val:0.3799768984317780},{features:[[8,4,9,1,-1.],[11,4,3,1,3.]],threshold:9.0466710389591753e-005,right_val:0.5440226197242737,left_val:0.4433645009994507},{features:[[3,4,9,1,-1.],[6,4,3,1,3.]],threshold:1.5007190086180344e-005,right_val:0.5409119725227356,left_val:0.3719654977321625},{features:[[1,0,18,10,-1.],[7,0,6,10,3.]],threshold:0.1393561065196991,right_val:0.4479042887687683,left_val:0.5525395870208740},{features:[[7,17,5,3,-1.],[7,18,5,1,3.]],threshold:1.6461990308016539e-003,right_val:0.5772169828414917,left_val:0.4264501035213471},{features:[[7,11,6,1,-1.],[9,11,2,1,3.]],threshold:4.9984431825578213e-004,right_val:0.5685871243476868,left_val:0.4359526038169861},{features:[[2,2,3,2,-1.],[2,3,3,1,2.]],threshold:-1.0971280280500650e-003,right_val:0.5205408930778503,left_val:0.3390136957168579},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:6.6919892560690641e-004,right_val:0.5980659723281860,left_val:0.4557456076145172},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:8.6471042595803738e-004,right_val:0.2944033145904541,left_val:0.5134841203689575},{features:[[11,4,2,4,-1.],[11,4,1,4,2.]],threshold:-2.7182599296793342e-004,right_val:0.5377181172370911,left_val:0.3906578123569489},{features:[[7,4,2,4,-1.],[8,4,1,4,2.]],threshold:3.0249499104684219e-005,right_val:0.5225688815116882,left_val:0.3679609894752502},{features:[[9,6,2,4,-1.],[9,6,1,4,2.]],threshold:-8.5225896909832954e-003,right_val:0.4892365038394928,left_val:0.7293102145195007},{features:[[6,13,8,3,-1.],[6,14,8,1,3.]],threshold:1.6705560265108943e-003,right_val:0.5696138143539429,left_val:0.4345324933528900},{features:[[9,15,3,4,-1.],[10,15,1,4,3.]],threshold:-7.1433838456869125e-003,right_val:0.5225623846054077,left_val:0.2591280043125153},{features:[[9,2,2,17,-1.],[10,2,1,17,2.]],threshold:-0.0163193698972464,right_val:0.4651575982570648,left_val:0.6922279000282288},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:4.8034260980784893e-003,right_val:0.3286302983760834,left_val:0.5352262854576111},{features:[[8,15,3,4,-1.],[9,15,1,4,3.]],threshold:-7.5421929359436035e-003,right_val:0.5034546256065369,left_val:0.2040544003248215},{features:[[7,13,7,3,-1.],[7,14,7,1,3.]],threshold:-0.0143631100654602,right_val:0.4889059066772461,left_val:0.6804888844490051},{features:[[8,16,3,3,-1.],[9,16,1,3,3.]],threshold:8.9063588529825211e-004,right_val:0.3895480930805206,left_val:0.5310695767402649},{features:[[6,2,8,10,-1.],[6,7,8,5,2.]],threshold:-4.4060191139578819e-003,right_val:0.4372426867485046,left_val:0.5741562843322754},{features:[[2,5,8,8,-1.],[2,9,8,4,2.]],threshold:-1.8862540309783071e-004,right_val:0.5098205208778381,left_val:0.2831785976886749},{features:[[14,16,2,2,-1.],[14,17,2,1,2.]],threshold:-3.7979281041771173e-003,right_val:0.5246580243110657,left_val:0.3372507989406586},{features:[[4,16,2,2,-1.],[4,17,2,1,2.]],threshold:1.4627049677073956e-004,right_val:0.3911710083484650,left_val:0.5306674242019653},{features:[[10,11,4,6,-1.],[10,14,4,3,2.]],threshold:-4.9164638767251745e-005,right_val:0.3942720890045166,left_val:0.5462496280670166},{features:[[6,11,4,6,-1.],[6,14,4,3,2.]],threshold:-0.0335825011134148,right_val:0.5048211812973023,left_val:0.2157824039459229},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-3.5339309833943844e-003,right_val:0.4872696995735169,left_val:0.6465312242507935},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:5.0144111737608910e-003,right_val:0.6248074769973755,left_val:0.4617668092250824},{features:[[10,0,4,6,-1.],[12,0,2,3,2.],[10,3,2,3,2.]],threshold:0.0188173707574606,right_val:0.2000052034854889,left_val:0.5220689177513123},{features:[[0,3,20,2,-1.],[0,4,20,1,2.]],threshold:-1.3434339780360460e-003,right_val:0.5301619768142700,left_val:0.4014537930488586},{features:[[12,0,8,2,-1.],[16,0,4,1,2.],[12,1,4,1,2.]],threshold:1.7557960236445069e-003,right_val:0.5653169751167297,left_val:0.4794039130210877},{features:[[2,12,10,8,-1.],[2,16,10,4,2.]],threshold:-0.0956374630331993,right_val:0.5006706714630127,left_val:0.2034195065498352},{features:[[17,7,2,10,-1.],[18,7,1,5,2.],[17,12,1,5,2.]],threshold:-0.0222412291914225,right_val:0.5046340227127075,left_val:0.7672473192214966},{features:[[1,7,2,10,-1.],[1,7,1,5,2.],[2,12,1,5,2.]],threshold:-0.0155758196488023,right_val:0.4755851030349731,left_val:0.7490342259407044},{features:[[15,10,3,6,-1.],[15,12,3,2,3.]],threshold:5.3599118255078793e-003,right_val:0.4004670977592468,left_val:0.5365303754806519},{features:[[4,4,6,2,-1.],[6,4,2,2,3.]],threshold:-0.0217634998261929,right_val:0.4964174926280975,left_val:0.0740154981613159},{features:[[0,5,20,6,-1.],[0,7,20,2,3.]],threshold:-0.1656159013509750,right_val:0.5218086242675781,left_val:0.2859103083610535},{features:[[0,0,8,2,-1.],[0,0,4,1,2.],[4,1,4,1,2.]],threshold:1.6461320046801120e-004,right_val:0.5380793213844299,left_val:0.4191615879535675},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-8.9077502489089966e-003,right_val:0.4877404868602753,left_val:0.6273192763328552},{features:[[1,13,6,2,-1.],[1,14,6,1,2.]],threshold:8.6346449097618461e-004,right_val:0.3671025931835175,left_val:0.5159940719604492},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:-1.3751760125160217e-003,right_val:0.4579083919525147,left_val:0.5884376764297485},{features:[[6,1,6,1,-1.],[8,1,2,1,3.]],threshold:-1.4081239933148026e-003,right_val:0.5139945149421692,left_val:0.3560509979724884},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-3.9342888630926609e-003,right_val:0.4664272069931030,left_val:0.5994288921356201},{features:[[1,6,18,2,-1.],[10,6,9,2,2.]],threshold:-0.0319669283926487,right_val:0.5144183039665222,left_val:0.3345462083816528},{features:[[15,11,1,2,-1.],[15,12,1,1,2.]],threshold:-1.5089280168467667e-005,right_val:0.4414057135581970,left_val:0.5582656264305115},{features:[[6,5,1,2,-1.],[6,6,1,1,2.]],threshold:5.1994470413774252e-004,right_val:0.6168993711471558,left_val:0.4623680114746094},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:-3.4220460802316666e-003,right_val:0.4974805116653442,left_val:0.6557074785232544},{features:[[2,15,1,2,-1.],[2,16,1,1,2.]],threshold:1.7723299970384687e-004,right_val:0.3901908099651337,left_val:0.5269501805305481},{features:[[12,4,4,3,-1.],[12,5,4,1,3.]],threshold:1.5716759953647852e-003,right_val:0.5790457725524902,left_val:0.4633373022079468},{features:[[0,0,7,3,-1.],[0,1,7,1,3.]],threshold:-8.9041329920291901e-003,right_val:0.5053591132164002,left_val:0.2689608037471771},{features:[[9,12,6,2,-1.],[9,12,3,2,2.]],threshold:4.0677518700249493e-004,right_val:0.4329898953437805,left_val:0.5456603169441223},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:6.7604780197143555e-003,right_val:0.6689761877059937,left_val:0.4648993909358978},{features:[[18,4,2,3,-1.],[18,5,2,1,3.]],threshold:2.9100088868290186e-003,right_val:0.3377839922904968,left_val:0.5309703946113586},{features:[[3,0,8,6,-1.],[3,2,8,2,3.]],threshold:1.3885459629818797e-003,right_val:0.5349133014678955,left_val:0.4074738919734955},{features:[[0,2,20,6,-1.],[10,2,10,3,2.],[0,5,10,3,2.]],threshold:-0.0767642632126808,right_val:0.5228242278099060,left_val:0.1992176026105881},{features:[[4,7,2,4,-1.],[5,7,1,4,2.]],threshold:-2.2688310127705336e-004,right_val:0.4253072142601013,left_val:0.5438501834869385},{features:[[3,10,15,2,-1.],[8,10,5,2,3.]],threshold:-6.3094152137637138e-003,right_val:0.5378909707069397,left_val:0.4259178936481476},{features:[[3,0,12,11,-1.],[9,0,6,11,2.]],threshold:-0.1100727990269661,right_val:0.4721749126911163,left_val:0.6904156804084778},{features:[[13,0,2,6,-1.],[13,0,1,6,2.]],threshold:2.8619659133255482e-004,right_val:0.5548306107521057,left_val:0.4524914920330048},{features:[[0,19,2,1,-1.],[1,19,1,1,2.]],threshold:2.9425329557852820e-005,right_val:0.4236463904380798,left_val:0.5370373725891113},{features:[[16,10,4,10,-1.],[18,10,2,5,2.],[16,15,2,5,2.]],threshold:-0.0248865708708763,right_val:0.4969303905963898,left_val:0.6423557996749878},{features:[[4,8,10,3,-1.],[4,9,10,1,3.]],threshold:0.0331488512456417,right_val:0.1613811999559403,left_val:0.4988475143909454},{features:[[14,12,3,3,-1.],[14,13,3,1,3.]],threshold:7.8491691965609789e-004,right_val:0.4223009049892426,left_val:0.5416026115417481},{features:[[0,10,4,10,-1.],[0,10,2,5,2.],[2,15,2,5,2.]],threshold:4.7087189741432667e-003,right_val:0.6027557849884033,left_val:0.4576328992843628},{features:[[18,3,2,6,-1.],[18,5,2,2,3.]],threshold:2.4144479539245367e-003,right_val:0.4422498941421509,left_val:0.5308973193168640},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:1.9523180089890957e-003,right_val:0.6663324832916260,left_val:0.4705634117126465},{features:[[7,7,7,2,-1.],[7,8,7,1,2.]],threshold:1.3031980488449335e-003,right_val:0.5526962280273438,left_val:0.4406126141548157},{features:[[0,3,2,6,-1.],[0,5,2,2,3.]],threshold:4.4735497795045376e-003,right_val:0.3301498889923096,left_val:0.5129023790359497},{features:[[11,1,3,1,-1.],[12,1,1,1,3.]],threshold:-2.6652868837118149e-003,right_val:0.5175036191940308,left_val:0.3135471045970917},{features:[[5,0,2,6,-1.],[6,0,1,6,2.]],threshold:1.3666770246345550e-004,right_val:0.5306876897811890,left_val:0.4119370877742767},{features:[[1,1,18,14,-1.],[7,1,6,14,3.]],threshold:-0.0171264503151178,right_val:0.4836578965187073,left_val:0.6177806258201599},{features:[[4,6,8,3,-1.],[8,6,4,3,2.]],threshold:-2.6601430727168918e-004,right_val:0.5169736742973328,left_val:0.3654330968856812},{features:[[9,12,6,2,-1.],[9,12,3,2,2.]],threshold:-0.0229323804378510,right_val:0.5163992047309876,left_val:0.3490915000438690},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.3316550068557262e-003,right_val:0.3709389865398407,left_val:0.5166299939155579},{features:[[10,7,3,5,-1.],[11,7,1,5,3.]],threshold:0.0169256608933210,right_val:0.8053988218307495,left_val:0.5014736056327820},{features:[[7,7,3,5,-1.],[8,7,1,5,3.]],threshold:-8.9858826249837875e-003,right_val:0.4657020866870880,left_val:0.6470788717269898},{features:[[13,0,3,10,-1.],[14,0,1,10,3.]],threshold:-0.0118746999651194,right_val:0.5258755087852478,left_val:0.3246378898620606},{features:[[4,11,3,2,-1.],[4,12,3,1,2.]],threshold:1.9350569345988333e-004,right_val:0.3839643895626068,left_val:0.5191941857337952},{features:[[17,3,3,6,-1.],[18,3,1,6,3.]],threshold:5.8713490143418312e-003,right_val:0.6187043190002441,left_val:0.4918133914470673},{features:[[1,8,18,10,-1.],[1,13,18,5,2.]],threshold:-0.2483879029750824,right_val:0.4988150000572205,left_val:0.1836802959442139},{features:[[13,0,3,10,-1.],[14,0,1,10,3.]],threshold:0.0122560001909733,right_val:0.3632029891014099,left_val:0.5227053761482239},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:8.3990179700776935e-004,right_val:0.5774148106575012,left_val:0.4490250051021576},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:2.5407369248569012e-003,right_val:0.5858299136161804,left_val:0.4804787039756775},{features:[[4,0,3,10,-1.],[5,0,1,10,3.]],threshold:-0.0148224299773574,right_val:0.5023537278175354,left_val:0.2521049976348877},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:-5.7973959483206272e-003,right_val:0.4853715002536774,left_val:0.5996695756912231},{features:[[0,9,1,2,-1.],[0,10,1,1,2.]],threshold:7.2662148158997297e-004,right_val:0.3671779930591583,left_val:0.5153716802597046},{features:[[18,1,2,10,-1.],[18,1,1,10,2.]],threshold:-0.0172325801104307,right_val:0.4994656145572662,left_val:0.6621719002723694},{features:[[0,1,2,10,-1.],[1,1,1,10,2.]],threshold:7.8624086454510689e-003,right_val:0.6256101727485657,left_val:0.4633395075798035},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-4.7343620099127293e-003,right_val:0.5281885266304016,left_val:0.3615573048591614},{features:[[2,8,3,3,-1.],[3,8,1,3,3.]],threshold:8.3048478700220585e-004,right_val:0.5550957918167114,left_val:0.4442889094352722},{features:[[11,0,2,6,-1.],[12,0,1,3,2.],[11,3,1,3,2.]],threshold:7.6602199114859104e-003,right_val:0.2613354921340942,left_val:0.5162935256958008},{features:[[7,0,2,6,-1.],[7,0,1,3,2.],[8,3,1,3,2.]],threshold:-4.1048377752304077e-003,right_val:0.5019031763076782,left_val:0.2789632081985474},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:4.8512578941881657e-003,right_val:0.5661668181419373,left_val:0.4968984127044678},{features:[[1,3,3,7,-1.],[2,3,1,7,3.]],threshold:9.9896453320980072e-004,right_val:0.5551813244819641,left_val:0.4445607960224152},{features:[[14,1,6,16,-1.],[16,1,2,16,3.]],threshold:-0.2702363133430481,right_val:0.5151314139366150,left_val:0.0293882098048925},{features:[[0,1,6,16,-1.],[2,1,2,16,3.]],threshold:-0.0130906803533435,right_val:0.4447459876537323,left_val:0.5699399709701538},{features:[[2,0,16,8,-1.],[10,0,8,4,2.],[2,4,8,4,2.]],threshold:-9.4342790544033051e-003,right_val:0.5487895011901856,left_val:0.4305466115474701},{features:[[6,8,5,3,-1.],[6,9,5,1,3.]],threshold:-1.5482039889320731e-003,right_val:0.5128080844879150,left_val:0.3680317103862763},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:5.3746132180094719e-003,right_val:0.6101555824279785,left_val:0.4838916957378388},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:1.5786769799888134e-003,right_val:0.4118548035621643,left_val:0.5325223207473755},{features:[[9,6,2,4,-1.],[9,6,1,4,2.]],threshold:3.6856050137430429e-003,right_val:0.6252303123474121,left_val:0.4810948073863983},{features:[[0,7,15,1,-1.],[5,7,5,1,3.]],threshold:9.3887019902467728e-003,right_val:0.3629410862922669,left_val:0.5200229883193970},{features:[[8,2,7,9,-1.],[8,5,7,3,3.]],threshold:0.0127926301211119,right_val:0.6738016009330750,left_val:0.4961709976196289},{features:[[1,7,16,4,-1.],[1,7,8,2,2.],[9,9,8,2,2.]],threshold:-3.3661040943115950e-003,right_val:0.5283598899841309,left_val:0.4060279130935669},{features:[[6,12,8,2,-1.],[6,13,8,1,2.]],threshold:3.9771420415490866e-004,right_val:0.5900775194168091,left_val:0.4674113988876343},{features:[[8,11,3,3,-1.],[8,12,3,1,3.]],threshold:1.4868030557408929e-003,right_val:0.6082053780555725,left_val:0.4519116878509522},{features:[[4,5,14,10,-1.],[11,5,7,5,2.],[4,10,7,5,2.]],threshold:-0.0886867493391037,right_val:0.5180991888046265,left_val:0.2807899117469788},{features:[[4,12,3,2,-1.],[4,13,3,1,2.]],threshold:-7.4296112870797515e-005,right_val:0.4087625145912170,left_val:0.5295584201812744},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-1.4932939848222304e-005,right_val:0.4538542926311493,left_val:0.5461400151252747},{features:[[4,9,7,6,-1.],[4,11,7,2,3.]],threshold:5.9162238612771034e-003,right_val:0.4192134141921997,left_val:0.5329161286354065},{features:[[7,10,6,3,-1.],[7,11,6,1,3.]],threshold:1.1141640134155750e-003,right_val:0.5706217288970947,left_val:0.4512017965316773},{features:[[9,11,2,2,-1.],[9,12,2,1,2.]],threshold:8.9249362645205110e-005,right_val:0.5897638201713562,left_val:0.4577805995941162},{features:[[0,5,20,6,-1.],[0,7,20,2,3.]],threshold:2.5319510605186224e-003,right_val:0.3357639014720917,left_val:0.5299603939056397},{features:[[6,4,6,1,-1.],[8,4,2,1,3.]],threshold:0.0124262003228068,right_val:0.1346601992845535,left_val:0.4959059059619904},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:0.0283357501029968,right_val:6.1043637106195092e-004,left_val:0.5117079019546509},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:6.6165882162749767e-003,right_val:0.7011628150939941,left_val:0.4736349880695343},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:8.0468766391277313e-003,right_val:0.3282819986343384,left_val:0.5216417908668518},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-1.1193980462849140e-003,right_val:0.4563739001750946,left_val:0.5809860825538635},{features:[[2,12,16,8,-1.],[2,16,16,4,2.]],threshold:0.0132775902748108,right_val:0.4103901088237763,left_val:0.5398362278938294},{features:[[0,15,15,2,-1.],[0,16,15,1,2.]],threshold:4.8794739996083081e-004,right_val:0.5410590767860413,left_val:0.4249286055564880},{features:[[15,4,5,6,-1.],[15,6,5,2,3.]],threshold:0.0112431701272726,right_val:0.3438215851783752,left_val:0.5269963741302490},{features:[[9,5,2,4,-1.],[10,5,1,4,2.]],threshold:-8.9896668214350939e-004,right_val:0.4456613063812256,left_val:0.5633075833320618},{features:[[8,10,9,6,-1.],[8,12,9,2,3.]],threshold:6.6677159629762173e-003,right_val:0.4362679123878479,left_val:0.5312889218330383},{features:[[2,19,15,1,-1.],[7,19,5,1,3.]],threshold:0.0289472993463278,right_val:0.6575797796249390,left_val:0.4701794981956482},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-0.0234000496566296,right_val:0.5137398838996887,left_val:0.},{features:[[0,15,20,4,-1.],[0,17,20,2,2.]],threshold:-0.0891170501708984,right_val:0.4942430853843689,left_val:0.0237452797591686},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-0.0140546001493931,right_val:0.5117511153221130,left_val:0.3127323091030121},{features:[[7,16,3,4,-1.],[8,16,1,4,3.]],threshold:8.1239398568868637e-003,right_val:0.2520025968551636,left_val:0.5009049177169800},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-4.9964650534093380e-003,right_val:0.4927811920642853,left_val:0.6387143731117249},{features:[[8,11,4,6,-1.],[8,14,4,3,2.]],threshold:3.1253970228135586e-003,right_val:0.3680452108383179,left_val:0.5136849880218506},{features:[[9,6,2,12,-1.],[9,10,2,4,3.]],threshold:6.7669642157852650e-003,right_val:0.4363631904125214,left_val:0.5509843826293945},{features:[[8,17,4,3,-1.],[8,18,4,1,3.]],threshold:-2.3711440153419971e-003,right_val:0.4586946964263916,left_val:0.6162335276603699},{features:[[9,18,8,2,-1.],[13,18,4,1,2.],[9,19,4,1,2.]],threshold:-5.3522791713476181e-003,right_val:0.4920490980148315,left_val:0.6185457706451416},{features:[[1,18,8,2,-1.],[1,19,8,1,2.]],threshold:-0.0159688591957092,right_val:0.4983252882957459,left_val:0.1382617950439453},{features:[[13,5,6,15,-1.],[15,5,2,15,3.]],threshold:4.7676060348749161e-003,right_val:0.5490046143531799,left_val:0.4688057899475098},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-2.4714691098779440e-003,right_val:0.5003952980041504,left_val:0.2368514984846115},{features:[[9,5,2,3,-1.],[9,5,1,3,2.]],threshold:-7.1033788844943047e-004,right_val:0.4721533060073853,left_val:0.5856394171714783},{features:[[1,5,6,15,-1.],[3,5,2,15,3.]],threshold:-0.1411755979061127,right_val:0.4961591064929962,left_val:0.0869000628590584},{features:[[4,1,14,8,-1.],[11,1,7,4,2.],[4,5,7,4,2.]],threshold:0.1065180972218514,right_val:0.1741005033254623,left_val:0.5138837099075317},{features:[[2,4,4,16,-1.],[2,4,2,8,2.],[4,12,2,8,2.]],threshold:-0.0527447499334812,right_val:0.4772881865501404,left_val:0.7353636026382446},{features:[[12,4,3,12,-1.],[12,10,3,6,2.]],threshold:-4.7431760467588902e-003,right_val:0.5292701721191406,left_val:0.3884406089782715},{features:[[4,5,10,12,-1.],[4,5,5,6,2.],[9,11,5,6,2.]],threshold:9.9676765967160463e-004,right_val:0.4003424048423767,left_val:0.5223492980003357},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:8.0284131690859795e-003,right_val:0.7212964296340942,left_val:0.4959106147289276},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:8.6025858763605356e-004,right_val:0.5538476109504700,left_val:0.4444884061813355},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:9.3191501218825579e-004,right_val:0.4163244068622589,left_val:0.5398371219635010},{features:[[6,4,7,3,-1.],[6,5,7,1,3.]],threshold:-2.5082060601562262e-003,right_val:0.4562500119209290,left_val:0.5854265093803406},{features:[[2,0,18,2,-1.],[11,0,9,1,2.],[2,1,9,1,2.]],threshold:-2.1378761157393456e-003,right_val:0.5280259251594544,left_val:0.4608069062232971},{features:[[0,0,18,2,-1.],[0,0,9,1,2.],[9,1,9,1,2.]],threshold:-2.1546049974858761e-003,right_val:0.5255997180938721,left_val:0.3791126906871796},{features:[[13,13,4,6,-1.],[15,13,2,3,2.],[13,16,2,3,2.]],threshold:-7.6214009895920753e-003,right_val:0.4952073991298676,left_val:0.5998609066009522},{features:[[3,13,4,6,-1.],[3,13,2,3,2.],[5,16,2,3,2.]],threshold:2.2055360022932291e-003,right_val:0.5588530898094177,left_val:0.4484206140041351},{features:[[10,12,2,6,-1.],[10,15,2,3,2.]],threshold:1.2586950324475765e-003,right_val:0.4423840939998627,left_val:0.5450747013092041},{features:[[5,9,10,10,-1.],[5,9,5,5,2.],[10,14,5,5,2.]],threshold:-5.0926720723509789e-003,right_val:0.5263035893440247,left_val:0.4118275046348572},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:-2.5095739401876926e-003,right_val:0.4998494982719421,left_val:0.5787907838821411},{features:[[7,12,6,8,-1.],[10,12,3,8,2.]],threshold:-0.0773275569081306,right_val:0.4811120033264160,left_val:0.8397865891456604},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:-0.0414858199656010,right_val:0.5176993012428284,left_val:0.2408611029386520},{features:[[8,11,2,1,-1.],[9,11,1,1,2.]],threshold:1.0355669655837119e-004,right_val:0.5417054295539856,left_val:0.4355360865592957},{features:[[10,5,1,12,-1.],[10,9,1,4,3.]],threshold:1.3255809899419546e-003,right_val:0.4894095063209534,left_val:0.5453971028327942},{features:[[0,11,6,9,-1.],[3,11,3,9,2.]],threshold:-8.0598732456564903e-003,right_val:0.4577918946743012,left_val:0.5771024227142334},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:0.0190586205571890,right_val:0.3400475084781647,left_val:0.5169867873191834},{features:[[4,2,4,10,-1.],[4,2,2,5,2.],[6,7,2,5,2.]],threshold:-0.0350578911602497,right_val:0.5000503063201904,left_val:0.2203243970870972},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:5.7296059094369411e-003,right_val:0.6597570776939392,left_val:0.5043408274650574},{features:[[0,14,6,3,-1.],[0,15,6,1,3.]],threshold:-0.0116483299061656,right_val:0.4996652901172638,left_val:0.2186284959316254},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:1.4544479781761765e-003,right_val:0.5503727793693543,left_val:0.5007681846618652},{features:[[6,1,3,2,-1.],[7,1,1,2,3.]],threshold:-2.5030909455381334e-004,right_val:0.5241670012474060,left_val:0.4129841029644013},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:-8.2907272735610604e-004,right_val:0.4974496066570282,left_val:0.5412868261337280},{features:[[5,4,4,2,-1.],[5,4,2,1,2.],[7,5,2,1,2.]],threshold:1.0862209601327777e-003,right_val:0.5879228711128235,left_val:0.4605529904365540},{features:[[13,0,2,12,-1.],[14,0,1,6,2.],[13,6,1,6,2.]],threshold:2.0000500080641359e-004,right_val:0.4705209136009216,left_val:0.5278854966163635},{features:[[6,0,3,10,-1.],[7,0,1,10,3.]],threshold:2.9212920926511288e-003,right_val:0.3755536973476410,left_val:0.5129609704017639},{features:[[3,0,17,8,-1.],[3,4,17,4,2.]],threshold:0.0253874007612467,right_val:0.5790768265724182,left_val:0.4822691977024078},{features:[[0,4,20,4,-1.],[0,6,20,2,2.]],threshold:-3.1968469265848398e-003,right_val:0.3962840139865875,left_val:0.5248395204544067}],threshold:87.6960296630859380},{simpleClassifiers:[{features:[[0,3,8,2,-1.],[4,3,4,2,2.]],threshold:5.8031738735735416e-003,right_val:0.5961983203887940,left_val:0.3498983979225159},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-9.0003069490194321e-003,right_val:0.4478552043437958,left_val:0.6816636919975281},{features:[[5,7,6,4,-1.],[5,7,3,2,2.],[8,9,3,2,2.]],threshold:-1.1549659539014101e-003,right_val:0.3578251004219055,left_val:0.5585706233978272},{features:[[8,3,4,9,-1.],[8,6,4,3,3.]],threshold:-1.1069850297644734e-003,right_val:0.3050428032875061,left_val:0.5365036129951477},{features:[[8,15,1,4,-1.],[8,17,1,2,2.]],threshold:1.0308309720130637e-004,right_val:0.5344635844230652,left_val:0.3639095127582550},{features:[[4,5,12,7,-1.],[8,5,4,7,3.]],threshold:-5.0984839908778667e-003,right_val:0.5504264831542969,left_val:0.2859157025814056},{features:[[4,2,4,10,-1.],[4,2,2,5,2.],[6,7,2,5,2.]],threshold:8.2572200335562229e-004,right_val:0.3476041853427887,left_val:0.5236523747444153},{features:[[3,0,17,2,-1.],[3,1,17,1,2.]],threshold:9.9783325567841530e-003,right_val:0.6219646930694580,left_val:0.4750322103500366},{features:[[2,2,16,15,-1.],[2,7,16,5,3.]],threshold:-0.0374025292694569,right_val:0.5278062820434570,left_val:0.3343375921249390},{features:[[15,2,5,2,-1.],[15,3,5,1,2.]],threshold:4.8548257909715176e-003,right_val:0.3700444102287293,left_val:0.5192180871963501},{features:[[9,3,2,2,-1.],[10,3,1,2,2.]],threshold:-1.8664470408111811e-003,right_val:0.5091944932937622,left_val:0.2929843962192535},{features:[[4,5,16,15,-1.],[4,10,16,5,3.]],threshold:0.0168888904154301,right_val:0.5431225895881653,left_val:0.3686845898628235},{features:[[7,13,5,6,-1.],[7,16,5,3,2.]],threshold:-5.8372621424496174e-003,right_val:0.5221335887908936,left_val:0.3632183969020844},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:-1.4713739510625601e-003,right_val:0.4700650870800018,left_val:0.5870683789253235},{features:[[8,3,3,1,-1.],[9,3,1,1,3.]],threshold:-1.1522950371727347e-003,right_val:0.5140954256057739,left_val:0.3195894956588745},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-4.2560300789773464e-003,right_val:0.4814921021461487,left_val:0.6301859021186829},{features:[[0,2,5,2,-1.],[0,3,5,1,2.]],threshold:-6.7378291860222816e-003,right_val:0.5025808215141296,left_val:0.1977048069238663},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:0.0113826701417565,right_val:0.6867045760154724,left_val:0.4954132139682770},{features:[[1,7,12,1,-1.],[5,7,4,1,3.]],threshold:5.1794708706438541e-003,right_val:0.3350647985935211,left_val:0.5164427757263184},{features:[[7,5,6,14,-1.],[7,12,6,7,2.]],threshold:-0.1174378991127014,right_val:0.5234413743019104,left_val:0.2315246015787125},{features:[[0,0,8,10,-1.],[0,0,4,5,2.],[4,5,4,5,2.]],threshold:0.0287034492939711,right_val:0.6722521185874939,left_val:0.4664297103881836},{features:[[9,1,3,2,-1.],[10,1,1,2,3.]],threshold:4.8231030814349651e-003,right_val:0.2723532915115356,left_val:0.5220875144004822},{features:[[8,1,3,2,-1.],[9,1,1,2,3.]],threshold:2.6798530016094446e-003,right_val:0.2906948924064636,left_val:0.5079277157783508},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:8.0504082143306732e-003,right_val:0.6395021080970764,left_val:0.4885950982570648},{features:[[7,4,6,16,-1.],[7,12,6,8,2.]],threshold:4.8054959625005722e-003,right_val:0.3656663894653320,left_val:0.5197256803512573},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-2.2420159075409174e-003,right_val:0.4763701856136322,left_val:0.6153467893600464},{features:[[2,3,2,6,-1.],[2,5,2,2,3.]],threshold:-0.0137577103450894,right_val:0.5030903220176697,left_val:0.2637344896793366},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:-0.1033829972147942,right_val:0.5182461142539978,left_val:0.2287521958351135},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-9.4432085752487183e-003,right_val:0.4694949090480804,left_val:0.6953303813934326},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:8.0271181650459766e-004,right_val:0.4268783926963806,left_val:0.5450655221939087},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:-4.1945669800043106e-003,right_val:0.4571642875671387,left_val:0.6091387867927551},{features:[[13,11,3,6,-1.],[13,13,3,2,3.]],threshold:0.0109422104433179,right_val:0.3284547030925751,left_val:0.5241063237190247},{features:[[3,14,2,6,-1.],[3,17,2,3,2.]],threshold:-5.7841069065034389e-004,right_val:0.4179368913173676,left_val:0.5387929081916809},{features:[[14,3,6,2,-1.],[14,4,6,1,2.]],threshold:-2.0888620056211948e-003,right_val:0.5301715731620789,left_val:0.4292691051959992},{features:[[0,8,16,2,-1.],[0,9,16,1,2.]],threshold:3.2383969519287348e-003,right_val:0.5220744013786316,left_val:0.3792347908020020},{features:[[14,3,6,2,-1.],[14,4,6,1,2.]],threshold:4.9075027927756310e-003,right_val:0.4126757979393005,left_val:0.5237283110618591},{features:[[0,0,5,6,-1.],[0,2,5,2,3.]],threshold:-0.0322779417037964,right_val:0.4994502067565918,left_val:0.1947655975818634},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-8.9711230248212814e-003,right_val:0.4929032027721405,left_val:0.6011285185813904},{features:[[4,11,3,6,-1.],[4,13,3,2,3.]],threshold:0.0153210898861289,right_val:0.2039822041988373,left_val:0.5009753704071045},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:2.0855569746345282e-003,right_val:0.5721694827079773,left_val:0.4862189888954163},{features:[[9,5,1,3,-1.],[9,6,1,1,3.]],threshold:5.0615021027624607e-003,right_val:0.1801805943250656,left_val:0.5000218749046326},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-3.7174751050770283e-003,right_val:0.4897592961788178,left_val:0.5530117154121399},{features:[[6,6,8,12,-1.],[6,12,8,6,2.]],threshold:-0.0121705001220107,right_val:0.5383723974227905,left_val:0.4178605973720551},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:4.6248398721218109e-003,right_val:0.5761327147483826,left_val:0.4997169971466065},{features:[[5,12,9,2,-1.],[8,12,3,2,3.]],threshold:-2.1040429419372231e-004,right_val:0.4097681045532227,left_val:0.5331807136535645},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-0.0146417804062366,right_val:0.5051776170730591,left_val:0.5755925178527832},{features:[[4,5,4,3,-1.],[4,6,4,1,3.]],threshold:3.3199489116668701e-003,right_val:0.6031805872917175,left_val:0.4576976895332336},{features:[[6,6,9,2,-1.],[9,6,3,2,3.]],threshold:3.7236879579722881e-003,right_val:0.5415883064270020,left_val:0.4380396902561188},{features:[[4,11,1,3,-1.],[4,12,1,1,3.]],threshold:8.2951161311939359e-004,right_val:0.3702219128608704,left_val:0.5163031816482544},{features:[[14,12,6,6,-1.],[14,12,3,6,2.]],threshold:-0.0114084901288152,right_val:0.4862565100193024,left_val:0.6072946786880493},{features:[[7,0,3,7,-1.],[8,0,1,7,3.]],threshold:-4.5320121571421623e-003,right_val:0.5088962912559509,left_val:0.3292475938796997},{features:[[9,8,3,3,-1.],[10,8,1,3,3.]],threshold:5.1276017911732197e-003,right_val:0.6122708916664124,left_val:0.4829767942428589},{features:[[8,8,3,3,-1.],[9,8,1,3,3.]],threshold:9.8583158105611801e-003,right_val:0.6556177139282227,left_val:0.4660679996013641},{features:[[5,10,11,3,-1.],[5,11,11,1,3.]],threshold:0.0369859188795090,right_val:0.1690472066402435,left_val:0.5204849243164063},{features:[[5,7,10,1,-1.],[10,7,5,1,2.]],threshold:4.6491161920130253e-003,right_val:0.3725225031375885,left_val:0.5167322158813477},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:-4.2664702050387859e-003,right_val:0.4987342953681946,left_val:0.6406493186950684},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-4.7956590424291790e-004,right_val:0.4464873969554901,left_val:0.5897293090820313},{features:[[11,9,4,2,-1.],[11,9,2,2,2.]],threshold:3.6827160511165857e-003,right_val:0.3472662866115570,left_val:0.5441560745239258},{features:[[5,9,4,2,-1.],[7,9,2,2,2.]],threshold:-0.0100598800927401,right_val:0.5004829764366150,left_val:0.2143162935972214},{features:[[14,10,2,4,-1.],[14,12,2,2,2.]],threshold:-3.0361840617842972e-004,right_val:0.4590323865413666,left_val:0.5386424064636231},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-1.4545479789376259e-003,right_val:0.4497095048427582,left_val:0.5751184225082398},{features:[[14,17,6,3,-1.],[14,18,6,1,3.]],threshold:1.6515209572389722e-003,right_val:0.4238520860671997,left_val:0.5421937704086304},{features:[[4,5,12,12,-1.],[4,5,6,6,2.],[10,11,6,6,2.]],threshold:-7.8468639403581619e-003,right_val:0.5258157253265381,left_val:0.4077920913696289},{features:[[6,9,8,8,-1.],[10,9,4,4,2.],[6,13,4,4,2.]],threshold:-5.1259850151836872e-003,right_val:0.5479453206062317,left_val:0.4229275882244110},{features:[[0,4,15,4,-1.],[5,4,5,4,3.]],threshold:-0.0368909612298012,right_val:0.4674678146839142,left_val:0.6596375703811646},{features:[[13,2,4,1,-1.],[13,2,2,1,2.]],threshold:2.4035639944486320e-004,right_val:0.5573202967643738,left_val:0.4251135885715485},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:-1.5150169929256663e-005,right_val:0.4074114859104157,left_val:0.5259246826171875},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:2.2108471021056175e-003,right_val:0.5886352062225342,left_val:0.4671722948551178},{features:[[9,13,2,3,-1.],[9,14,2,1,3.]],threshold:-1.1568620102480054e-003,right_val:0.4487161934375763,left_val:0.5711066126823425},{features:[[13,11,2,3,-1.],[13,12,2,1,3.]],threshold:4.9996292218565941e-003,right_val:0.2898327112197876,left_val:0.5264198184013367},{features:[[7,12,4,4,-1.],[7,12,2,2,2.],[9,14,2,2,2.]],threshold:-1.4656189596280456e-003,right_val:0.5197871923446655,left_val:0.3891738057136536},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:-1.1975039960816503e-003,right_val:0.4927955865859985,left_val:0.5795872807502747},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:-4.4954330660402775e-003,right_val:0.5012555122375488,left_val:0.2377603054046631},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:1.4997160178609192e-004,right_val:0.5617607831954956,left_val:0.4876626133918762},{features:[[0,17,6,3,-1.],[0,18,6,1,3.]],threshold:2.6391509454697371e-003,right_val:0.3765509128570557,left_val:0.5168088078498840},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:-2.9368131072260439e-004,right_val:0.4874630868434906,left_val:0.5446649193763733},{features:[[8,11,2,2,-1.],[8,11,1,1,2.],[9,12,1,1,2.]],threshold:1.4211760135367513e-003,right_val:0.6691331863403320,left_val:0.4687897861003876},{features:[[12,5,8,4,-1.],[12,5,4,4,2.]],threshold:0.0794276371598244,right_val:0.2732945978641510,left_val:0.5193443894386292},{features:[[0,5,8,4,-1.],[4,5,4,4,2.]],threshold:0.0799375027418137,right_val:0.1782083958387375,left_val:0.4971731007099152},{features:[[13,2,4,1,-1.],[13,2,2,1,2.]],threshold:0.0110892597585917,right_val:0.3209475874900818,left_val:0.5165994763374329},{features:[[3,2,4,1,-1.],[5,2,2,1,2.]],threshold:1.6560709627810866e-004,right_val:0.5307276248931885,left_val:0.4058471918106079},{features:[[10,0,4,2,-1.],[12,0,2,1,2.],[10,1,2,1,2.]],threshold:-5.3354292176663876e-003,right_val:0.5158129930496216,left_val:0.3445056974887848},{features:[[7,12,3,1,-1.],[8,12,1,1,3.]],threshold:1.1287260567769408e-003,right_val:0.6075533032417297,left_val:0.4594863057136536},{features:[[8,11,4,8,-1.],[10,11,2,4,2.],[8,15,2,4,2.]],threshold:-0.0219692196696997,right_val:0.5228595733642578,left_val:0.1680400967597961},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.1775320055894554e-004,right_val:0.5215672850608826,left_val:0.3861596882343292},{features:[[3,18,15,2,-1.],[3,19,15,1,2.]],threshold:2.0200149447191507e-004,right_val:0.4363039135932922,left_val:0.5517979264259338},{features:[[2,6,2,12,-1.],[2,6,1,6,2.],[3,12,1,6,2.]],threshold:-0.0217331498861313,right_val:0.4789851009845734,left_val:0.7999460101127625},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-8.4399932529777288e-004,right_val:0.5374773144721985,left_val:0.4085975885391235},{features:[[7,10,3,2,-1.],[8,10,1,2,3.]],threshold:-4.3895249837078154e-004,right_val:0.4366143047809601,left_val:0.5470405220985413},{features:[[11,11,3,1,-1.],[12,11,1,1,3.]],threshold:1.5092400135472417e-003,right_val:0.5842149257659912,left_val:0.4988996982574463},{features:[[6,11,3,1,-1.],[7,11,1,1,3.]],threshold:-3.5547839943319559e-003,right_val:0.4721005856990814,left_val:0.6753690242767334},{features:[[9,2,4,2,-1.],[11,2,2,1,2.],[9,3,2,1,2.]],threshold:4.8191400128416717e-004,right_val:0.4357109069824219,left_val:0.5415853857994080},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:-6.0264398343861103e-003,right_val:0.4991880953311920,left_val:0.2258509993553162},{features:[[2,1,18,3,-1.],[8,1,6,3,3.]],threshold:-0.0116681400686502,right_val:0.4927498996257782,left_val:0.6256554722785950},{features:[[5,1,4,14,-1.],[7,1,2,14,2.]],threshold:-2.8718370012938976e-003,right_val:0.5245801806449890,left_val:0.3947784900665283},{features:[[8,16,12,3,-1.],[8,16,6,3,2.]],threshold:0.0170511696487665,right_val:0.5794224143028259,left_val:0.4752511084079742},{features:[[1,17,18,3,-1.],[7,17,6,3,3.]],threshold:-0.0133520802482963,right_val:0.4544535875320435,left_val:0.6041104793548584},{features:[[9,14,2,6,-1.],[9,17,2,3,2.]],threshold:-3.9301801007241011e-004,right_val:0.5544905066490173,left_val:0.4258275926113129},{features:[[9,12,1,8,-1.],[9,16,1,4,2.]],threshold:3.0483349692076445e-003,right_val:0.3780272901058197,left_val:0.5233420133590698},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:-4.3579288758337498e-003,right_val:0.4838674068450928,left_val:0.6371889114379883},{features:[[9,6,2,12,-1.],[9,10,2,4,3.]],threshold:5.6661018170416355e-003,right_val:0.4163666069507599,left_val:0.5374705791473389},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:6.0677339206449687e-005,right_val:0.5311625003814697,left_val:0.4638795852661133},{features:[[0,1,4,8,-1.],[2,1,2,8,2.]],threshold:0.0367381609976292,right_val:0.6466524004936218,left_val:0.4688656032085419},{features:[[9,1,6,2,-1.],[12,1,3,1,2.],[9,2,3,1,2.]],threshold:8.6528137326240540e-003,right_val:0.2188657969236374,left_val:0.5204318761825562},{features:[[1,3,12,14,-1.],[1,10,12,7,2.]],threshold:-0.1537135988473892,right_val:0.4958840012550354,left_val:0.1630371958017349},{features:[[8,12,4,2,-1.],[10,12,2,1,2.],[8,13,2,1,2.]],threshold:-4.1560421232134104e-004,right_val:0.4696458876132965,left_val:0.5774459242820740},{features:[[1,9,10,2,-1.],[1,9,5,1,2.],[6,10,5,1,2.]],threshold:-1.2640169588848948e-003,right_val:0.5217198133468628,left_val:0.3977175951004028},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:-3.5473341122269630e-003,right_val:0.4808315038681030,left_val:0.6046528220176697},{features:[[6,8,8,3,-1.],[6,9,8,1,3.]],threshold:3.0019069527043030e-005,right_val:0.5228201150894165,left_val:0.3996723890304565},{features:[[9,15,5,3,-1.],[9,16,5,1,3.]],threshold:1.3113019522279501e-003,right_val:0.5765997767448425,left_val:0.4712158143520355},{features:[[8,7,4,3,-1.],[8,8,4,1,3.]],threshold:-1.3374709524214268e-003,right_val:0.5253170132637024,left_val:0.4109584987163544},{features:[[7,7,6,2,-1.],[7,8,6,1,2.]],threshold:0.0208767093718052,right_val:0.1757981926202774,left_val:0.5202993750572205},{features:[[5,7,8,2,-1.],[5,7,4,1,2.],[9,8,4,1,2.]],threshold:-7.5497948564589024e-003,right_val:0.4694975018501282,left_val:0.6566609740257263},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0241885501891375,right_val:0.3370220959186554,left_val:0.5128673911094666},{features:[[4,7,4,2,-1.],[4,8,4,1,2.]],threshold:-2.9358828905969858e-003,right_val:0.4694541096687317,left_val:0.6580786705017090},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:0.0575579293072224,right_val:0.2775259912014008,left_val:0.5146445035934448},{features:[[4,9,3,3,-1.],[5,9,1,3,3.]],threshold:-1.1343370424583554e-003,right_val:0.5192667245864868,left_val:0.3836601972579956},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0168169997632504,right_val:0.6177260875701904,left_val:0.5085592865943909},{features:[[0,2,6,9,-1.],[0,5,6,3,3.]],threshold:5.0535178743302822e-003,right_val:0.3684791922569275,left_val:0.5138763189315796},{features:[[17,3,3,6,-1.],[18,3,1,6,3.]],threshold:-4.5874710194766521e-003,right_val:0.4835202097892761,left_val:0.5989655256271362},{features:[[0,3,3,6,-1.],[1,3,1,6,3.]],threshold:1.6882460331544280e-003,right_val:0.5723056793212891,left_val:0.4509486854076386},{features:[[17,14,1,2,-1.],[17,15,1,1,2.]],threshold:-1.6554000321775675e-003,right_val:0.5243319272994995,left_val:0.3496770858764648},{features:[[4,9,4,3,-1.],[6,9,2,3,2.]],threshold:-0.0193738006055355,right_val:0.4968712925910950,left_val:0.1120536997914314},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0103744501248002,right_val:0.4395213127136231,left_val:0.5148196816444397},{features:[[5,9,3,3,-1.],[5,10,3,1,3.]],threshold:1.4973050565458834e-004,right_val:0.5269886851310730,left_val:0.4084999859333038},{features:[[9,5,6,8,-1.],[12,5,3,4,2.],[9,9,3,4,2.]],threshold:-0.0429819300770760,right_val:0.5018504261970520,left_val:0.6394104957580566},{features:[[5,5,6,8,-1.],[5,5,3,4,2.],[8,9,3,4,2.]],threshold:8.3065936341881752e-003,right_val:0.6698353290557861,left_val:0.4707553982734680},{features:[[16,1,4,6,-1.],[16,4,4,3,2.]],threshold:-4.1285790503025055e-003,right_val:0.5323647260665894,left_val:0.4541369080543518},{features:[[1,0,6,20,-1.],[3,0,2,20,3.]],threshold:1.7399420030415058e-003,right_val:0.5439866185188294,left_val:0.4333961904048920},{features:[[12,11,3,2,-1.],[13,11,1,2,3.]],threshold:1.1739750334527344e-004,right_val:0.5543426275253296,left_val:0.4579687118530273},{features:[[5,11,3,2,-1.],[6,11,1,2,3.]],threshold:1.8585780344437808e-004,right_val:0.5426754951477051,left_val:0.4324643909931183},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:5.5587692186236382e-003,right_val:0.3550611138343811,left_val:0.5257220864295960},{features:[[0,0,8,3,-1.],[4,0,4,3,2.]],threshold:-7.9851560294628143e-003,right_val:0.4630635976791382,left_val:0.6043018102645874},{features:[[15,0,2,5,-1.],[15,0,1,5,2.]],threshold:6.0594122624024749e-004,right_val:0.5533195137977600,left_val:0.4598254859447479},{features:[[4,1,3,2,-1.],[5,1,1,2,3.]],threshold:-2.2983040253166109e-004,right_val:0.5322461128234863,left_val:0.4130752086639404},{features:[[7,0,6,15,-1.],[9,0,2,15,3.]],threshold:4.3740210821852088e-004,right_val:0.5409289002418518,left_val:0.4043039977550507},{features:[[6,11,3,1,-1.],[7,11,1,1,3.]],threshold:2.9482020181603730e-004,right_val:0.5628852248191834,left_val:0.4494963884353638},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:0.0103126596659422,right_val:0.2704316973686218,left_val:0.5177510976791382},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-7.7241109684109688e-003,right_val:0.4980553984642029,left_val:0.1988019049167633},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:-4.6797208487987518e-003,right_val:0.5018296241760254,left_val:0.6644750237464905},{features:[[0,1,4,6,-1.],[0,4,4,3,2.]],threshold:-5.0755459815263748e-003,right_val:0.5185269117355347,left_val:0.3898304998874664},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:2.2479740437120199e-003,right_val:0.5660336017608643,left_val:0.4801808893680573},{features:[[2,16,3,3,-1.],[2,17,3,1,3.]],threshold:8.3327008178457618e-004,right_val:0.3957188129425049,left_val:0.5210919976234436},{features:[[13,8,6,10,-1.],[16,8,3,5,2.],[13,13,3,5,2.]],threshold:-0.0412793308496475,right_val:0.5007054209709168,left_val:0.6154541969299316},{features:[[0,9,5,2,-1.],[0,10,5,1,2.]],threshold:-5.0930189900100231e-004,right_val:0.5228403806686401,left_val:0.3975942134857178},{features:[[12,11,2,2,-1.],[13,11,1,1,2.],[12,12,1,1,2.]],threshold:1.2568780221045017e-003,right_val:0.5939183235168457,left_val:0.4979138076305389},{features:[[3,15,3,3,-1.],[3,16,3,1,3.]],threshold:8.0048497766256332e-003,right_val:0.1633366048336029,left_val:0.4984497129917145},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:-1.1879300000146031e-003,right_val:0.4942624866962433,left_val:0.5904964804649353},{features:[[5,7,3,2,-1.],[5,8,3,1,2.]],threshold:6.1948952497914433e-004,right_val:0.5328726172447205,left_val:0.4199557900428772},{features:[[9,5,9,9,-1.],[9,8,9,3,3.]],threshold:6.6829859279096127e-003,right_val:0.4905889034271240,left_val:0.5418602824211121},{features:[[5,0,3,7,-1.],[6,0,1,7,3.]],threshold:-3.7062340416014194e-003,right_val:0.5138000249862671,left_val:0.3725939095020294},{features:[[5,2,12,5,-1.],[9,2,4,5,3.]],threshold:-0.0397394113242626,right_val:0.5050346851348877,left_val:0.6478961110115051},{features:[[6,11,2,2,-1.],[6,11,1,1,2.],[7,12,1,1,2.]],threshold:1.4085009461268783e-003,right_val:0.6377884149551392,left_val:0.4682339131832123},{features:[[15,15,3,2,-1.],[15,16,3,1,2.]],threshold:3.9322688826359808e-004,right_val:0.4150482118129730,left_val:0.5458530187606812},{features:[[2,15,3,2,-1.],[2,16,3,1,2.]],threshold:-1.8979819724336267e-003,right_val:0.5149704217910767,left_val:0.3690159916877747},{features:[[14,12,6,8,-1.],[17,12,3,4,2.],[14,16,3,4,2.]],threshold:-0.0139704402536154,right_val:0.4811357855796814,left_val:0.6050562858581543},{features:[[2,8,15,6,-1.],[7,8,5,6,3.]],threshold:-0.1010081991553307,right_val:0.4992361962795258,left_val:0.2017080038785934},{features:[[2,2,18,17,-1.],[8,2,6,17,3.]],threshold:-0.0173469204455614,right_val:0.4899486005306244,left_val:0.5713148713111877},{features:[[5,1,4,1,-1.],[7,1,2,1,2.]],threshold:1.5619759506080300e-004,right_val:0.5392642021179199,left_val:0.4215388894081116},{features:[[5,2,12,5,-1.],[9,2,4,5,3.]],threshold:0.1343892961740494,right_val:0.3767612874507904,left_val:0.5136151909828186},{features:[[3,2,12,5,-1.],[7,2,4,5,3.]],threshold:-0.0245822407305241,right_val:0.4747906923294067,left_val:0.7027357816696167},{features:[[4,9,12,4,-1.],[10,9,6,2,2.],[4,11,6,2,2.]],threshold:-3.8553720805794001e-003,right_val:0.5427716970443726,left_val:0.4317409098148346},{features:[[5,15,6,2,-1.],[5,15,3,1,2.],[8,16,3,1,2.]],threshold:-2.3165249731391668e-003,right_val:0.4618647992610931,left_val:0.5942698717117310},{features:[[10,14,2,3,-1.],[10,15,2,1,3.]],threshold:-4.8518120311200619e-003,right_val:0.4884895086288452,left_val:0.6191568970680237},{features:[[0,13,20,2,-1.],[0,13,10,1,2.],[10,14,10,1,2.]],threshold:2.4699938949197531e-003,right_val:0.4017199873924255,left_val:0.5256664752960205},{features:[[4,9,12,8,-1.],[10,9,6,4,2.],[4,13,6,4,2.]],threshold:0.0454969592392445,right_val:0.2685773968696594,left_val:0.5237867832183838},{features:[[8,13,3,6,-1.],[8,16,3,3,2.]],threshold:-0.0203195996582508,right_val:0.4979738891124725,left_val:0.2130445986986160},{features:[[10,12,2,2,-1.],[10,13,2,1,2.]],threshold:2.6994998916052282e-004,right_val:0.5543122291564941,left_val:0.4814041852951050},{features:[[9,12,2,2,-1.],[9,12,1,1,2.],[10,13,1,1,2.]],threshold:-1.8232699949294329e-003,right_val:0.4709989130496979,left_val:0.6482579708099365},{features:[[4,11,14,4,-1.],[11,11,7,2,2.],[4,13,7,2,2.]],threshold:-6.3015790656208992e-003,right_val:0.5306236147880554,left_val:0.4581927955150604},{features:[[8,5,4,2,-1.],[8,6,4,1,2.]],threshold:-2.4139499873854220e-004,right_val:0.4051763117313385,left_val:0.5232086777687073},{features:[[10,10,6,3,-1.],[12,10,2,3,3.]],threshold:-1.0330369696021080e-003,right_val:0.4789193868637085,left_val:0.5556201934814453},{features:[[2,14,1,2,-1.],[2,15,1,1,2.]],threshold:1.8041160365100950e-004,right_val:0.4011810123920441,left_val:0.5229442715644836},{features:[[13,8,6,12,-1.],[16,8,3,6,2.],[13,14,3,6,2.]],threshold:-0.0614078603684902,right_val:0.5010703206062317,left_val:0.6298682093620300},{features:[[1,8,6,12,-1.],[1,8,3,6,2.],[4,14,3,6,2.]],threshold:-0.0695439130067825,right_val:0.4773184061050415,left_val:0.7228280901908875},{features:[[10,0,6,10,-1.],[12,0,2,10,3.]],threshold:-0.0705426633358002,right_val:0.5182529091835022,left_val:0.2269513010978699},{features:[[5,11,8,4,-1.],[5,11,4,2,2.],[9,13,4,2,2.]],threshold:2.4423799477517605e-003,right_val:0.4098151028156281,left_val:0.5237097144126892},{features:[[10,16,8,4,-1.],[14,16,4,2,2.],[10,18,4,2,2.]],threshold:1.5494349645450711e-003,right_val:0.5468043088912964,left_val:0.4773750901222229},{features:[[7,7,6,6,-1.],[9,7,2,6,3.]],threshold:-0.0239142198115587,right_val:0.4783824980258942,left_val:0.7146975994110107},{features:[[10,2,4,10,-1.],[10,2,2,10,2.]],threshold:-0.0124536901712418,right_val:0.5241122841835022,left_val:0.2635296881198883},{features:[[6,1,4,9,-1.],[8,1,2,9,2.]],threshold:-2.0760179904755205e-004,right_val:0.5113608837127686,left_val:0.3623757064342499},{features:[[12,19,2,1,-1.],[12,19,1,1,2.]],threshold:2.9781080229440704e-005,right_val:0.5432801842689514,left_val:0.4705932140350342}],threshold:90.2533493041992190},{simpleClassifiers:[{features:[[1,2,4,9,-1.],[3,2,2,9,2.]],threshold:0.0117727499455214,right_val:0.6421167254447937,left_val:0.3860518932342529},{features:[[7,5,6,4,-1.],[9,5,2,4,3.]],threshold:0.0270375702530146,right_val:0.6754038929939270,left_val:0.4385654926300049},{features:[[9,4,2,4,-1.],[9,6,2,2,2.]],threshold:-3.6419500247575343e-005,right_val:0.3423315882682800,left_val:0.5487101078033447},{features:[[14,5,2,8,-1.],[14,9,2,4,2.]],threshold:1.9995409529656172e-003,right_val:0.5400317907333374,left_val:0.3230532109737396},{features:[[7,6,5,12,-1.],[7,12,5,6,2.]],threshold:4.5278300531208515e-003,right_val:0.2935043871402741,left_val:0.5091639757156372},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:4.7890920541249216e-004,right_val:0.5344064235687256,left_val:0.4178153872489929},{features:[[4,6,2,6,-1.],[4,9,2,3,2.]],threshold:1.1720920447260141e-003,right_val:0.5132070779800415,left_val:0.2899182140827179},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:9.5305702416226268e-004,right_val:0.5560845136642456,left_val:0.4280124902725220},{features:[[6,18,2,2,-1.],[7,18,1,2,2.]],threshold:1.5099150004971307e-005,right_val:0.5404760241508484,left_val:0.4044871926307678},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:-6.0817901976406574e-004,right_val:0.5503466129302979,left_val:0.4271768927574158},{features:[[2,0,16,6,-1.],[2,2,16,2,3.]],threshold:3.3224520739167929e-003,right_val:0.5369734764099121,left_val:0.3962723910808563},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:-1.1037490330636501e-003,right_val:0.5237749814987183,left_val:0.4727177917957306},{features:[[4,11,10,3,-1.],[4,12,10,1,3.]],threshold:-1.4350269921123981e-003,right_val:0.4223509132862091,left_val:0.5603008270263672},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:2.0767399109899998e-003,right_val:0.4732725918292999,left_val:0.5225917100906372},{features:[[3,3,6,2,-1.],[3,4,6,1,2.]],threshold:-1.6412809782195836e-004,right_val:0.5432739853858948,left_val:0.3999075889587402},{features:[[16,0,4,7,-1.],[16,0,2,7,2.]],threshold:8.8302437216043472e-003,right_val:0.6027327179908752,left_val:0.4678385853767395},{features:[[0,14,9,6,-1.],[0,16,9,2,3.]],threshold:-0.0105520701035857,right_val:0.5213974714279175,left_val:0.3493967056274414},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-2.2731600329279900e-003,right_val:0.4749062955379486,left_val:0.6185818910598755},{features:[[4,6,6,2,-1.],[6,6,2,2,3.]],threshold:-8.4786332445219159e-004,right_val:0.3843482136726379,left_val:0.5285341143608093},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:1.2081359745934606e-003,right_val:0.3447335958480835,left_val:0.5360640883445740},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:2.6512730401009321e-003,right_val:0.6193962097167969,left_val:0.4558292031288147},{features:[[10,9,2,2,-1.],[10,10,2,1,2.]],threshold:-1.1012479662895203e-003,right_val:0.5327628254890442,left_val:0.3680230081081390},{features:[[3,1,4,3,-1.],[5,1,2,3,2.]],threshold:4.9561518244445324e-004,right_val:0.5274940729141235,left_val:0.3960595130920410},{features:[[16,0,4,7,-1.],[16,0,2,7,2.]],threshold:-0.0439017713069916,right_val:0.4992839097976685,left_val:0.7020444869995117},{features:[[0,0,20,1,-1.],[10,0,10,1,2.]],threshold:0.0346903502941132,right_val:0.2766602933406830,left_val:0.5049164295196533},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:-2.7442190330475569e-003,right_val:0.5274971127510071,left_val:0.2672632932662964},{features:[[0,4,3,4,-1.],[1,4,1,4,3.]],threshold:3.3316588960587978e-003,right_val:0.6001101732254028,left_val:0.4579482972621918},{features:[[16,3,3,6,-1.],[16,5,3,2,3.]],threshold:-0.0200445707887411,right_val:0.5235717892646790,left_val:0.3171594142913818},{features:[[1,3,3,6,-1.],[1,5,3,2,3.]],threshold:1.3492030557245016e-003,right_val:0.4034324884414673,left_val:0.5265362858772278},{features:[[6,2,12,6,-1.],[12,2,6,3,2.],[6,5,6,3,2.]],threshold:2.9702018946409225e-003,right_val:0.4571984112262726,left_val:0.5332456827163696},{features:[[8,10,4,3,-1.],[8,11,4,1,3.]],threshold:6.3039981760084629e-003,right_val:0.6034635901451111,left_val:0.4593310952186585},{features:[[4,2,14,6,-1.],[11,2,7,3,2.],[4,5,7,3,2.]],threshold:-0.0129365902394056,right_val:0.5372971296310425,left_val:0.4437963962554932},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:4.0148729458451271e-003,right_val:0.6437833905220032,left_val:0.4680323898792267},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-2.6401679497212172e-003,right_val:0.5314332842826843,left_val:0.3709631860256195},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:0.0139184398576617,right_val:0.7130808830261231,left_val:0.4723555147647858},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:-4.5087869511917233e-004,right_val:0.5370404124259949,left_val:0.4492394030094147},{features:[[7,13,5,2,-1.],[7,14,5,1,2.]],threshold:2.5384349282830954e-004,right_val:0.5514402985572815,left_val:0.4406864047050476},{features:[[7,12,6,3,-1.],[7,13,6,1,3.]],threshold:2.2710000630468130e-003,right_val:0.5967984199523926,left_val:0.4682416915893555},{features:[[5,11,4,4,-1.],[5,13,4,2,2.]],threshold:2.4120779708027840e-003,right_val:0.3018598854541779,left_val:0.5079392194747925},{features:[[11,4,3,3,-1.],[12,4,1,3,3.]],threshold:-3.6025670851813629e-005,right_val:0.4471096992492676,left_val:0.5601037144660950},{features:[[6,4,3,3,-1.],[7,4,1,3,3.]],threshold:-7.4905529618263245e-003,right_val:0.4989944100379944,left_val:0.2207535058259964},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:-0.0175131205469370,right_val:0.5017648935317993,left_val:0.6531215906143189},{features:[[3,6,12,7,-1.],[7,6,4,7,3.]],threshold:0.1428163051605225,right_val:0.1482062041759491,left_val:0.4967963099479675},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:5.5345268920063972e-003,right_val:0.5954223871231079,left_val:0.4898946881294251},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:-9.6323591424152255e-004,right_val:0.5196074247360230,left_val:0.3927116990089417},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:-2.0370010752230883e-003,right_val:0.4884858131408691,left_val:0.5613325238227844},{features:[[1,5,3,6,-1.],[2,5,1,6,3.]],threshold:1.6614829655736685e-003,right_val:0.5578880906105042,left_val:0.4472880065441132},{features:[[1,9,18,1,-1.],[7,9,6,1,3.]],threshold:-3.1188090797513723e-003,right_val:0.5397477746009827,left_val:0.3840532898902893},{features:[[0,9,8,7,-1.],[4,9,4,7,2.]],threshold:-6.4000617712736130e-003,right_val:0.4533218145370483,left_val:0.5843983888626099},{features:[[12,11,8,2,-1.],[12,12,8,1,2.]],threshold:3.1319601112045348e-004,right_val:0.4234727919101715,left_val:0.5439221858978272},{features:[[0,11,8,2,-1.],[0,12,8,1,2.]],threshold:-0.0182220991700888,right_val:0.4958404898643494,left_val:0.1288464963436127},{features:[[9,13,2,3,-1.],[9,14,2,1,3.]],threshold:8.7969247251749039e-003,right_val:0.7153480052947998,left_val:0.4951297938823700},{features:[[4,10,12,4,-1.],[4,10,6,2,2.],[10,12,6,2,2.]],threshold:-4.2395070195198059e-003,right_val:0.5194936990737915,left_val:0.3946599960327148},{features:[[9,3,3,7,-1.],[10,3,1,7,3.]],threshold:9.7086271271109581e-003,right_val:0.6064900159835815,left_val:0.4897503852844238},{features:[[7,2,3,5,-1.],[8,2,1,5,3.]],threshold:-3.9934171363711357e-003,right_val:0.5060828924179077,left_val:0.3245440125465393},{features:[[9,12,4,6,-1.],[11,12,2,3,2.],[9,15,2,3,2.]],threshold:-0.0167850591242313,right_val:0.5203778743743897,left_val:0.1581953018903732},{features:[[8,7,3,6,-1.],[9,7,1,6,3.]],threshold:0.0182720907032490,right_val:0.6626979112625122,left_val:0.4680935144424439},{features:[[15,4,4,2,-1.],[15,5,4,1,2.]],threshold:5.6872838176786900e-003,right_val:0.3512184917926788,left_val:0.5211697816848755},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-1.0739039862528443e-003,right_val:0.4529845118522644,left_val:0.5768386125564575},{features:[[14,2,6,4,-1.],[14,4,6,2,2.]],threshold:-3.7093870341777802e-003,right_val:0.5313581228256226,left_val:0.4507763087749481},{features:[[7,16,6,1,-1.],[9,16,2,1,3.]],threshold:-2.1110709349159151e-004,right_val:0.4333376884460449,left_val:0.5460820198059082},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:1.0670139454305172e-003,right_val:0.4078390896320343,left_val:0.5371856093406677},{features:[[8,7,3,10,-1.],[9,7,1,10,3.]],threshold:3.5943021066486835e-003,right_val:0.5643836259841919,left_val:0.4471287131309509},{features:[[11,10,2,6,-1.],[11,12,2,2,3.]],threshold:-5.1776031032204628e-003,right_val:0.5280330181121826,left_val:0.4499393105506897},{features:[[6,10,4,1,-1.],[8,10,2,1,2.]],threshold:-2.5414369883947074e-004,right_val:0.4407708048820496,left_val:0.5516173243522644},{features:[[10,9,2,2,-1.],[10,10,2,1,2.]],threshold:6.3522560521960258e-003,right_val:0.2465227991342545,left_val:0.5194190144538879},{features:[[8,9,2,2,-1.],[8,10,2,1,2.]],threshold:-4.4205080484971404e-004,right_val:0.5139682292938232,left_val:0.3830705881118774},{features:[[12,7,2,2,-1.],[13,7,1,1,2.],[12,8,1,1,2.]],threshold:7.4488727841526270e-004,right_val:0.5974786877632141,left_val:0.4891090989112854},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-3.5116379149258137e-003,right_val:0.4768764972686768,left_val:0.7413681745529175},{features:[[13,0,3,14,-1.],[14,0,1,14,3.]],threshold:-0.0125409103929996,right_val:0.5252826809883118,left_val:0.3648819029331207},{features:[[4,0,3,14,-1.],[5,0,1,14,3.]],threshold:9.4931852072477341e-003,right_val:0.3629586994647980,left_val:0.5100492835044861},{features:[[13,4,3,14,-1.],[14,4,1,14,3.]],threshold:0.0129611501470208,right_val:0.4333561062812805,left_val:0.5232442021369934},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.7209449112415314e-003,right_val:0.6331052780151367,left_val:0.4648149013519287},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-2.3119079414755106e-003,right_val:0.4531058073043823,left_val:0.5930309891700745},{features:[[4,2,3,16,-1.],[5,2,1,16,3.]],threshold:-2.8262299019843340e-003,right_val:0.5257101058959961,left_val:0.3870477974414825},{features:[[7,2,8,10,-1.],[7,7,8,5,2.]],threshold:-1.4311339473351836e-003,right_val:0.4561854898929596,left_val:0.5522503256797791},{features:[[6,14,7,3,-1.],[6,15,7,1,3.]],threshold:1.9378310535103083e-003,right_val:0.5736966729164124,left_val:0.4546220898628235},{features:[[9,2,10,12,-1.],[14,2,5,6,2.],[9,8,5,6,2.]],threshold:2.6343559147790074e-004,right_val:0.4571875035762787,left_val:0.5345739126205444},{features:[[6,7,8,2,-1.],[6,8,8,1,2.]],threshold:7.8257522545754910e-004,right_val:0.5220187902450562,left_val:0.3967815935611725},{features:[[8,13,4,6,-1.],[8,16,4,3,2.]],threshold:-0.0195504408329725,right_val:0.5243508219718933,left_val:0.2829642891883850},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:4.3914958951063454e-004,right_val:0.5899090170860291,left_val:0.4590066969394684},{features:[[16,2,4,6,-1.],[16,4,4,2,3.]],threshold:0.0214520003646612,right_val:0.2855378985404968,left_val:0.5231410861015320},{features:[[6,6,4,2,-1.],[6,6,2,1,2.],[8,7,2,1,2.]],threshold:5.8973580598831177e-004,right_val:0.5506421923637390,left_val:0.4397256970405579},{features:[[16,2,4,6,-1.],[16,4,4,2,3.]],threshold:-0.0261576101183891,right_val:0.5189175009727478,left_val:0.3135079145431519},{features:[[0,2,4,6,-1.],[0,4,4,2,3.]],threshold:-0.0139598604291677,right_val:0.5040717720985413,left_val:0.3213272988796234},{features:[[9,6,2,6,-1.],[9,6,1,6,2.]],threshold:-6.3699018210172653e-003,right_val:0.4849506914615631,left_val:0.6387544870376587},{features:[[3,4,6,10,-1.],[3,9,6,5,2.]],threshold:-8.5613820701837540e-003,right_val:0.5032019019126892,left_val:0.2759132087230682},{features:[[9,5,2,6,-1.],[9,5,1,6,2.]],threshold:9.6622901037335396e-004,right_val:0.5834879279136658,left_val:0.4685640931129456},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:7.6550268568098545e-004,right_val:0.3896422088146210,left_val:0.5175207257270813},{features:[[13,13,3,2,-1.],[13,14,3,1,2.]],threshold:-8.1833340227603912e-003,right_val:0.5208122134208679,left_val:0.2069136947393417},{features:[[2,16,10,4,-1.],[2,16,5,2,2.],[7,18,5,2,2.]],threshold:-9.3976939097046852e-003,right_val:0.4641222953796387,left_val:0.6134091019630432},{features:[[5,6,10,6,-1.],[10,6,5,3,2.],[5,9,5,3,2.]],threshold:4.8028980381786823e-003,right_val:0.4395219981670380,left_val:0.5454108119010925},{features:[[7,14,1,3,-1.],[7,15,1,1,3.]],threshold:-3.5680569708347321e-003,right_val:0.4681093990802765,left_val:0.6344485282897949},{features:[[14,16,6,3,-1.],[14,17,6,1,3.]],threshold:4.0733120404183865e-003,right_val:0.4015620052814484,left_val:0.5292683243751526},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.2568129459396005e-003,right_val:0.5452824831008911,left_val:0.4392988085746765},{features:[[7,4,10,3,-1.],[7,5,10,1,3.]],threshold:-2.9065010603517294e-003,right_val:0.4863379895687103,left_val:0.5898832082748413},{features:[[0,4,5,4,-1.],[0,6,5,2,2.]],threshold:-2.4409340694546700e-003,right_val:0.5247421860694885,left_val:0.4069364964962006},{features:[[13,11,3,9,-1.],[13,14,3,3,3.]],threshold:0.0248307008296251,right_val:0.3682524859905243,left_val:0.5182725787162781},{features:[[4,11,3,9,-1.],[4,14,3,3,3.]],threshold:-0.0488540083169937,right_val:0.4961281120777130,left_val:0.1307577937841415},{features:[[9,7,2,1,-1.],[9,7,1,1,2.]],threshold:-1.6110379947349429e-003,right_val:0.4872662127017975,left_val:0.6421005725860596},{features:[[5,0,6,17,-1.],[7,0,2,17,3.]],threshold:-0.0970094799995422,right_val:0.4950988888740540,left_val:0.0477693490684032},{features:[[10,3,6,3,-1.],[10,3,3,3,2.]],threshold:1.1209240183234215e-003,right_val:0.5354745984077454,left_val:0.4616267085075378},{features:[[2,2,15,4,-1.],[7,2,5,4,3.]],threshold:-1.3064090162515640e-003,right_val:0.4638805985450745,left_val:0.6261854171752930},{features:[[8,2,8,2,-1.],[12,2,4,1,2.],[8,3,4,1,2.]],threshold:4.5771620352752507e-004,right_val:0.4646640121936798,left_val:0.5384417772293091},{features:[[8,1,3,6,-1.],[8,3,3,2,3.]],threshold:-6.3149951165542006e-004,right_val:0.5130257010459900,left_val:0.3804047107696533},{features:[[9,17,2,2,-1.],[9,18,2,1,2.]],threshold:1.4505970466416329e-004,right_val:0.5664461851119995,left_val:0.4554310142993927},{features:[[0,0,2,14,-1.],[1,0,1,14,2.]],threshold:-0.0164745505899191,right_val:0.4715859889984131,left_val:0.6596958041191101},{features:[[12,0,7,3,-1.],[12,1,7,1,3.]],threshold:0.0133695797994733,right_val:0.3035964965820313,left_val:0.5195466279983521},{features:[[1,14,1,2,-1.],[1,15,1,1,2.]],threshold:1.0271780047332868e-004,right_val:0.4107066094875336,left_val:0.5229176282882690},{features:[[14,12,2,8,-1.],[15,12,1,4,2.],[14,16,1,4,2.]],threshold:-5.5311559699475765e-003,right_val:0.4960907101631165,left_val:0.6352887749671936},{features:[[1,0,7,3,-1.],[1,1,7,1,3.]],threshold:-2.6187049224972725e-003,right_val:0.5140984058380127,left_val:0.3824546039104462},{features:[[14,12,2,8,-1.],[15,12,1,4,2.],[14,16,1,4,2.]],threshold:5.0834268331527710e-003,right_val:0.6220818758010864,left_val:0.4950439929962158},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0798181593418121,right_val:0.1322475969791412,left_val:0.4952335953712463},{features:[[6,1,8,9,-1.],[6,4,8,3,3.]],threshold:-0.0992265865206718,right_val:0.5008416771888733,left_val:0.7542728781700134},{features:[[5,2,2,2,-1.],[5,3,2,1,2.]],threshold:-6.5174017800018191e-004,right_val:0.5130121111869812,left_val:0.3699302971363068},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:-0.0189968496561050,right_val:0.4921202957630158,left_val:0.6689178943634033},{features:[[0,17,20,2,-1.],[0,17,10,1,2.],[10,18,10,1,2.]],threshold:0.0173468999564648,right_val:0.1859198063611984,left_val:0.4983300864696503},{features:[[10,3,2,6,-1.],[11,3,1,3,2.],[10,6,1,3,2.]],threshold:5.5082101607695222e-004,right_val:0.5522121787071228,left_val:0.4574424028396606},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.0056050270795822e-003,right_val:0.3856469988822937,left_val:0.5131744742393494},{features:[[10,7,6,13,-1.],[10,7,3,13,2.]],threshold:-7.7688191086053848e-003,right_val:0.5434309244155884,left_val:0.4361700117588043},{features:[[5,15,10,5,-1.],[10,15,5,5,2.]],threshold:0.0508782789111137,right_val:0.6840639710426331,left_val:0.4682720899581909},{features:[[10,4,4,10,-1.],[10,4,2,10,2.]],threshold:-2.2901780903339386e-003,right_val:0.5306099057197571,left_val:0.4329245090484619},{features:[[5,7,2,1,-1.],[6,7,1,1,2.]],threshold:-1.5715380141045898e-004,right_val:0.4378164112567902,left_val:0.5370057225227356},{features:[[10,3,6,7,-1.],[10,3,3,7,2.]],threshold:0.1051924005150795,right_val:0.0673614665865898,left_val:0.5137274265289307},{features:[[4,3,6,7,-1.],[7,3,3,7,2.]],threshold:2.7198919560760260e-003,right_val:0.5255665183067322,left_val:0.4112060964107513},{features:[[1,7,18,5,-1.],[7,7,6,5,3.]],threshold:0.0483377799391747,right_val:0.4438967108726502,left_val:0.5404623746871948},{features:[[3,17,4,3,-1.],[5,17,2,3,2.]],threshold:9.5703761326149106e-004,right_val:0.5399510860443115,left_val:0.4355969130992889},{features:[[8,14,12,6,-1.],[14,14,6,3,2.],[8,17,6,3,2.]],threshold:-0.0253712590783834,right_val:0.5031024813652039,left_val:0.5995175242424011},{features:[[0,13,20,4,-1.],[0,13,10,2,2.],[10,15,10,2,2.]],threshold:0.0524579510092735,right_val:0.1398351043462753,left_val:0.4950287938117981},{features:[[4,5,14,2,-1.],[11,5,7,1,2.],[4,6,7,1,2.]],threshold:-0.0123656298965216,right_val:0.4964106082916260,left_val:0.6397299170494080},{features:[[1,2,10,12,-1.],[1,2,5,6,2.],[6,8,5,6,2.]],threshold:-0.1458971947431564,right_val:0.4946322143077850,left_val:0.1001669988036156},{features:[[6,1,14,3,-1.],[6,2,14,1,3.]],threshold:-0.0159086007624865,right_val:0.5208340883255005,left_val:0.3312329947948456},{features:[[8,16,2,3,-1.],[8,17,2,1,3.]],threshold:3.9486068999394774e-004,right_val:0.5426102876663208,left_val:0.4406363964080811},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-5.2454001270234585e-003,right_val:0.5189967155456543,left_val:0.2799589931964874},{features:[[5,15,4,2,-1.],[5,15,2,1,2.],[7,16,2,1,2.]],threshold:-5.0421799533069134e-003,right_val:0.4752142131328583,left_val:0.6987580060958862},{features:[[10,15,1,3,-1.],[10,16,1,1,3.]],threshold:2.9812189750373363e-003,right_val:0.6307479739189148,left_val:0.4983288943767548},{features:[[8,16,4,4,-1.],[8,16,2,2,2.],[10,18,2,2,2.]],threshold:-7.2884308174252510e-003,right_val:0.5026869773864746,left_val:0.2982333004474640},{features:[[6,11,8,6,-1.],[6,14,8,3,2.]],threshold:1.5094350092113018e-003,right_val:0.3832970857620239,left_val:0.5308442115783691},{features:[[2,13,5,2,-1.],[2,14,5,1,2.]],threshold:-9.3340799212455750e-003,right_val:0.4969817101955414,left_val:0.2037964016199112},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:0.0286671407520771,right_val:0.6928027272224426,left_val:0.5025696754455566},{features:[[1,9,18,4,-1.],[7,9,6,4,3.]],threshold:0.1701968014240265,right_val:0.1476442962884903,left_val:0.4960052967071533},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:-3.2614478841423988e-003,right_val:0.4826056063175201,left_val:0.5603063702583313},{features:[[0,2,1,6,-1.],[0,4,1,2,3.]],threshold:5.5769277969375253e-004,right_val:0.4129633009433746,left_val:0.5205562114715576},{features:[[5,0,15,20,-1.],[5,10,15,10,2.]],threshold:0.3625833988189697,right_val:0.3768612146377564,left_val:0.5221652984619141},{features:[[1,14,6,6,-1.],[1,14,3,3,2.],[4,17,3,3,2.]],threshold:-0.0116151301190257,right_val:0.4637489914894104,left_val:0.6022682785987854},{features:[[8,14,4,6,-1.],[10,14,2,3,2.],[8,17,2,3,2.]],threshold:-4.0795197710394859e-003,right_val:0.5337479114532471,left_val:0.4070447087287903},{features:[[7,11,2,1,-1.],[8,11,1,1,2.]],threshold:5.7204300537705421e-004,right_val:0.5900393128395081,left_val:0.4601835012435913},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:6.7543348995968699e-004,right_val:0.4345428943634033,left_val:0.5398252010345459},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:6.3295697327703238e-004,right_val:0.4051358997821808,left_val:0.5201563239097595},{features:[[12,14,4,6,-1.],[14,14,2,3,2.],[12,17,2,3,2.]],threshold:1.2435320531949401e-003,right_val:0.5547441244125366,left_val:0.4642387926578522},{features:[[4,14,4,6,-1.],[4,14,2,3,2.],[6,17,2,3,2.]],threshold:-4.7363857738673687e-003,right_val:0.4672552049160004,left_val:0.6198567152023315},{features:[[13,14,2,6,-1.],[14,14,1,3,2.],[13,17,1,3,2.]],threshold:-6.4658462069928646e-003,right_val:0.5019000768661499,left_val:0.6837332844734192},{features:[[5,14,2,6,-1.],[5,14,1,3,2.],[6,17,1,3,2.]],threshold:3.5017321351915598e-004,right_val:0.5363622903823853,left_val:0.4344803094863892},{features:[[7,0,6,12,-1.],[7,4,6,4,3.]],threshold:1.5754920605104417e-004,right_val:0.5732020735740662,left_val:0.4760079085826874},{features:[[0,7,12,2,-1.],[4,7,4,2,3.]],threshold:9.9774366244673729e-003,right_val:0.3635039925575256,left_val:0.5090985894203186},{features:[[10,3,3,13,-1.],[11,3,1,13,3.]],threshold:-4.1464529931545258e-004,right_val:0.4593802094459534,left_val:0.5570064783096314},{features:[[7,3,3,13,-1.],[8,3,1,13,3.]],threshold:-3.5888899583369493e-004,right_val:0.4339134991168976,left_val:0.5356845855712891},{features:[[10,8,6,3,-1.],[10,9,6,1,3.]],threshold:4.0463250479660928e-004,right_val:0.5436776876449585,left_val:0.4439803063869476},{features:[[3,11,3,2,-1.],[4,11,1,2,3.]],threshold:-8.2184787606820464e-004,right_val:0.5176299214363098,left_val:0.4042294919490814},{features:[[13,12,6,8,-1.],[16,12,3,4,2.],[13,16,3,4,2.]],threshold:5.9467419050633907e-003,right_val:0.5633779764175415,left_val:0.4927651882171631},{features:[[7,6,6,5,-1.],[9,6,2,5,3.]],threshold:-0.0217533893883228,right_val:0.4800840914249420,left_val:0.8006293773651123},{features:[[17,11,2,7,-1.],[17,11,1,7,2.]],threshold:-0.0145403798669577,right_val:0.5182222723960877,left_val:0.3946054875850678},{features:[[3,13,8,2,-1.],[7,13,4,2,2.]],threshold:-0.0405107699334621,right_val:0.4935792982578278,left_val:0.0213249903172255},{features:[[6,9,8,3,-1.],[6,10,8,1,3.]],threshold:-5.8458268176764250e-004,right_val:0.5314025282859802,left_val:0.4012795984745026},{features:[[4,3,4,3,-1.],[4,4,4,1,3.]],threshold:5.5151800625026226e-003,right_val:0.5896260738372803,left_val:0.4642418920993805},{features:[[11,3,4,3,-1.],[11,4,4,1,3.]],threshold:-6.0626221820712090e-003,right_val:0.5016477704048157,left_val:0.6502159237861633},{features:[[1,4,17,12,-1.],[1,8,17,4,3.]],threshold:0.0945358425378799,right_val:0.4126827120780945,left_val:0.5264708995819092},{features:[[11,3,4,3,-1.],[11,4,4,1,3.]],threshold:4.7315051779150963e-003,right_val:0.5892447829246521,left_val:0.4879199862480164},{features:[[4,8,6,3,-1.],[4,9,6,1,3.]],threshold:-5.2571471314877272e-004,right_val:0.5189412832260132,left_val:0.3917280137538910},{features:[[12,3,5,3,-1.],[12,4,5,1,3.]],threshold:-2.5464049540460110e-003,right_val:0.4985705912113190,left_val:0.5837599039077759},{features:[[1,11,2,7,-1.],[2,11,1,7,2.]],threshold:-0.0260756891220808,right_val:0.4955821931362152,left_val:0.1261983960866928},{features:[[15,12,2,8,-1.],[16,12,1,4,2.],[15,16,1,4,2.]],threshold:-5.4779709316790104e-003,right_val:0.5010265707969666,left_val:0.5722513794898987},{features:[[4,8,11,3,-1.],[4,9,11,1,3.]],threshold:5.1337741315364838e-003,right_val:0.4226376116275787,left_val:0.5273262262344360},{features:[[9,13,6,2,-1.],[12,13,3,1,2.],[9,14,3,1,2.]],threshold:4.7944980906322598e-004,right_val:0.5819587111473084,left_val:0.4450066983699799},{features:[[6,13,4,3,-1.],[6,14,4,1,3.]],threshold:-2.1114079281687737e-003,right_val:0.4511714875698090,left_val:0.5757653117179871},{features:[[9,12,3,3,-1.],[10,12,1,3,3.]],threshold:-0.0131799904629588,right_val:0.5160734057426453,left_val:0.1884381026029587},{features:[[5,3,3,3,-1.],[5,4,3,1,3.]],threshold:-4.7968099825084209e-003,right_val:0.4736118912696838,left_val:0.6589789986610413},{features:[[9,4,2,3,-1.],[9,5,2,1,3.]],threshold:6.7483168095350266e-003,right_val:0.3356395065784454,left_val:0.5259429812431335},{features:[[0,2,16,3,-1.],[0,3,16,1,3.]],threshold:1.4623369788751006e-003,right_val:0.4264092147350311,left_val:0.5355271100997925},{features:[[15,12,2,8,-1.],[16,12,1,4,2.],[15,16,1,4,2.]],threshold:4.7645159065723419e-003,right_val:0.5786827802658081,left_val:0.5034406781196594},{features:[[3,12,2,8,-1.],[3,12,1,4,2.],[4,16,1,4,2.]],threshold:6.8066660314798355e-003,right_val:0.6677829027175903,left_val:0.4756605029106140},{features:[[14,13,3,6,-1.],[14,15,3,2,3.]],threshold:3.6608621012419462e-003,right_val:0.4311546981334686,left_val:0.5369611978530884},{features:[[3,13,3,6,-1.],[3,15,3,2,3.]],threshold:0.0214496403932571,right_val:0.1888816058635712,left_val:0.4968641996383667},{features:[[6,5,10,2,-1.],[11,5,5,1,2.],[6,6,5,1,2.]],threshold:4.1678901761770248e-003,right_val:0.5815368890762329,left_val:0.4930733144283295},{features:[[2,14,14,6,-1.],[2,17,14,3,2.]],threshold:8.6467564105987549e-003,right_val:0.4132595062255859,left_val:0.5205205082893372},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-3.6114078829996288e-004,right_val:0.4800927937030792,left_val:0.5483555197715759},{features:[[4,16,2,2,-1.],[4,16,1,1,2.],[5,17,1,1,2.]],threshold:1.0808729566633701e-003,right_val:0.6041421294212341,left_val:0.4689902067184448},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:5.7719959877431393e-003,right_val:0.3053277134895325,left_val:0.5171142220497131},{features:[[0,17,20,2,-1.],[0,17,10,1,2.],[10,18,10,1,2.]],threshold:1.5720770461484790e-003,right_val:0.4178803861141205,left_val:0.5219978094100952},{features:[[13,6,1,3,-1.],[13,7,1,1,3.]],threshold:-1.9307859474793077e-003,right_val:0.4812920093536377,left_val:0.5860369801521301},{features:[[8,13,3,2,-1.],[9,13,1,2,3.]],threshold:-7.8926272690296173e-003,right_val:0.4971733987331390,left_val:0.1749276965856552},{features:[[12,2,3,3,-1.],[13,2,1,3,3.]],threshold:-2.2224679123610258e-003,right_val:0.5212848186492920,left_val:0.4342589080333710},{features:[[3,18,2,2,-1.],[3,18,1,1,2.],[4,19,1,1,2.]],threshold:1.9011989934369922e-003,right_val:0.6892055273056030,left_val:0.4765186905860901},{features:[[9,16,3,4,-1.],[10,16,1,4,3.]],threshold:2.7576119173318148e-003,right_val:0.4337486028671265,left_val:0.5262191295623779},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:5.1787449046969414e-003,right_val:0.7843729257583618,left_val:0.4804069101810455},{features:[[13,1,5,2,-1.],[13,2,5,1,2.]],threshold:-9.0273341629654169e-004,right_val:0.5353423953056335,left_val:0.4120846986770630},{features:[[7,14,6,2,-1.],[7,14,3,1,2.],[10,15,3,1,2.]],threshold:5.1797959022223949e-003,right_val:0.6425960063934326,left_val:0.4740372896194458},{features:[[11,3,3,4,-1.],[12,3,1,4,3.]],threshold:-0.0101140001788735,right_val:0.5175017714500427,left_val:0.2468792051076889},{features:[[1,13,12,6,-1.],[5,13,4,6,3.]],threshold:-0.0186170600354671,right_val:0.4628978967666626,left_val:0.5756294131278992},{features:[[14,11,5,2,-1.],[14,12,5,1,2.]],threshold:5.9225959703326225e-003,right_val:0.3214271068572998,left_val:0.5169625878334045},{features:[[2,15,14,4,-1.],[2,15,7,2,2.],[9,17,7,2,2.]],threshold:-6.2945079989731312e-003,right_val:0.5141636729240418,left_val:0.3872014880180359},{features:[[3,7,14,2,-1.],[10,7,7,1,2.],[3,8,7,1,2.]],threshold:6.5353019163012505e-003,right_val:0.6310489773750305,left_val:0.4853048920631409},{features:[[1,11,4,2,-1.],[1,12,4,1,2.]],threshold:1.0878399480134249e-003,right_val:0.3723258972167969,left_val:0.5117315053939819},{features:[[14,0,6,14,-1.],[16,0,2,14,3.]],threshold:-0.0225422400981188,right_val:0.4887112975120544,left_val:0.5692740082740784},{features:[[4,11,1,3,-1.],[4,12,1,1,3.]],threshold:-3.0065660830587149e-003,right_val:0.5003992915153503,left_val:0.2556012868881226},{features:[[14,0,6,14,-1.],[16,0,2,14,3.]],threshold:7.4741272255778313e-003,right_val:0.5675926804542542,left_val:0.4810872972011566},{features:[[1,10,3,7,-1.],[2,10,1,7,3.]],threshold:0.0261623207479715,right_val:0.1777237057685852,left_val:0.4971194863319397},{features:[[8,12,9,2,-1.],[8,13,9,1,2.]],threshold:9.4352738233283162e-004,right_val:0.5491250753402710,left_val:0.4940010905265808},{features:[[0,6,20,1,-1.],[10,6,10,1,2.]],threshold:0.0333632417023182,right_val:0.2790724039077759,left_val:0.5007612109184265},{features:[[8,4,4,4,-1.],[8,4,2,4,2.]],threshold:-0.0151186501607299,right_val:0.4973031878471375,left_val:0.7059578895568848},{features:[[0,0,2,2,-1.],[0,1,2,1,2.]],threshold:9.8648946732282639e-004,right_val:0.3776761889457703,left_val:0.5128620266914368}],threshold:104.7491989135742200},{simpleClassifiers:[{features:[[5,3,10,9,-1.],[5,6,10,3,3.]],threshold:-0.0951507985591888,right_val:0.4017286896705627,left_val:0.6470757126808167},{features:[[15,2,4,10,-1.],[15,2,2,10,2.]],threshold:6.2702340073883533e-003,right_val:0.5746449232101440,left_val:0.3999822139739990},{features:[[8,2,2,7,-1.],[9,2,1,7,2.]],threshold:3.0018089455552399e-004,right_val:0.5538809895515442,left_val:0.3558770120143890},{features:[[7,4,12,1,-1.],[11,4,4,1,3.]],threshold:1.1757409665733576e-003,right_val:0.5382617712020874,left_val:0.4256534874439240},{features:[[3,4,9,1,-1.],[6,4,3,1,3.]],threshold:4.4235268433112651e-005,right_val:0.5589926838874817,left_val:0.3682908117771149},{features:[[15,10,1,4,-1.],[15,12,1,2,2.]],threshold:-2.9936920327600092e-005,right_val:0.4020367860794067,left_val:0.5452470183372498},{features:[[4,10,6,4,-1.],[7,10,3,4,2.]],threshold:3.0073199886828661e-003,right_val:0.3317843973636627,left_val:0.5239058136940002},{features:[[15,9,1,6,-1.],[15,12,1,3,2.]],threshold:-0.0105138896033168,right_val:0.5307983756065369,left_val:0.4320689141750336},{features:[[7,17,6,3,-1.],[7,18,6,1,3.]],threshold:8.3476826548576355e-003,right_val:0.6453298926353455,left_val:0.4504637122154236},{features:[[14,3,2,16,-1.],[15,3,1,8,2.],[14,11,1,8,2.]],threshold:-3.1492270063608885e-003,right_val:0.5370525121688843,left_val:0.4313425123691559},{features:[[4,9,1,6,-1.],[4,12,1,3,2.]],threshold:-1.4435649973165710e-005,right_val:0.3817971944808960,left_val:0.5326603055000305},{features:[[12,1,5,2,-1.],[12,2,5,1,2.]],threshold:-4.2855090578086674e-004,right_val:0.5382009744644165,left_val:0.4305163919925690},{features:[[6,18,4,2,-1.],[6,18,2,1,2.],[8,19,2,1,2.]],threshold:1.5062429883982986e-004,right_val:0.5544965267181397,left_val:0.4235970973968506},{features:[[2,4,16,10,-1.],[10,4,8,5,2.],[2,9,8,5,2.]],threshold:0.0715598315000534,right_val:0.2678802907466888,left_val:0.5303059816360474},{features:[[6,5,1,10,-1.],[6,10,1,5,2.]],threshold:8.4095180500298738e-004,right_val:0.5205433964729309,left_val:0.3557108938694000},{features:[[4,8,15,2,-1.],[9,8,5,2,3.]],threshold:0.0629865005612373,right_val:0.2861376106739044,left_val:0.5225362777709961},{features:[[1,8,15,2,-1.],[6,8,5,2,3.]],threshold:-3.3798629883676767e-003,right_val:0.5201697945594788,left_val:0.3624185919761658},{features:[[9,5,3,6,-1.],[9,7,3,2,3.]],threshold:-1.1810739670181647e-004,right_val:0.3959893882274628,left_val:0.5474476814270020},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-5.4505601292476058e-004,right_val:0.5215715765953064,left_val:0.3740422129631043},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-1.8454910023137927e-003,right_val:0.4584448933601379,left_val:0.5893052220344544},{features:[[1,0,16,3,-1.],[1,1,16,1,3.]],threshold:-4.3832371011376381e-004,right_val:0.5385351181030273,left_val:0.4084582030773163},{features:[[11,2,7,2,-1.],[11,3,7,1,2.]],threshold:-2.4000830017030239e-003,right_val:0.5293580293655396,left_val:0.3777455091476440},{features:[[5,1,10,18,-1.],[5,7,10,6,3.]],threshold:-0.0987957417964935,right_val:0.5070089101791382,left_val:0.2963612079620361},{features:[[17,4,3,2,-1.],[18,4,1,2,3.]],threshold:3.1798239797353745e-003,right_val:0.6726443767547607,left_val:0.4877632856369019},{features:[[8,13,1,3,-1.],[8,14,1,1,3.]],threshold:3.2406419632025063e-004,right_val:0.5561109781265259,left_val:0.4366911053657532},{features:[[3,14,14,6,-1.],[3,16,14,2,3.]],threshold:-0.0325472503900528,right_val:0.5308616161346436,left_val:0.3128157854080200},{features:[[0,2,3,4,-1.],[1,2,1,4,3.]],threshold:-7.7561130747199059e-003,right_val:0.4639872014522553,left_val:0.6560224890708923},{features:[[12,1,5,2,-1.],[12,2,5,1,2.]],threshold:0.0160272493958473,right_val:0.3141897916793823,left_val:0.5172680020332336},{features:[[3,1,5,2,-1.],[3,2,5,1,2.]],threshold:7.1002350523485802e-006,right_val:0.5336294770240784,left_val:0.4084446132183075},{features:[[10,13,2,3,-1.],[10,14,2,1,3.]],threshold:7.3422808200120926e-003,right_val:0.6603465080261231,left_val:0.4966922104358673},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:-1.6970280557870865e-003,right_val:0.4500182867050171,left_val:0.5908237099647522},{features:[[14,12,2,3,-1.],[14,13,2,1,3.]],threshold:2.4118260480463505e-003,right_val:0.3599720895290375,left_val:0.5315160751342773},{features:[[7,2,2,3,-1.],[7,3,2,1,3.]],threshold:-5.5300937965512276e-003,right_val:0.4996814131736755,left_val:0.2334040999412537},{features:[[5,6,10,4,-1.],[10,6,5,2,2.],[5,8,5,2,2.]],threshold:-2.6478730142116547e-003,right_val:0.4684734046459198,left_val:0.5880935788154602},{features:[[9,13,1,6,-1.],[9,16,1,3,2.]],threshold:0.0112956296652555,right_val:0.1884590983390808,left_val:0.4983777105808258},{features:[[10,12,2,2,-1.],[11,12,1,1,2.],[10,13,1,1,2.]],threshold:-6.6952878842130303e-004,right_val:0.4799019992351532,left_val:0.5872138142585754},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:1.4410680159926414e-003,right_val:0.3501011133193970,left_val:0.5131189227104187},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:2.4637870956212282e-003,right_val:0.4117639064788818,left_val:0.5339372158050537},{features:[[8,17,2,3,-1.],[8,18,2,1,3.]],threshold:3.3114518737420440e-004,right_val:0.5398246049880981,left_val:0.4313383102416992},{features:[[16,4,4,6,-1.],[16,6,4,2,3.]],threshold:-0.0335572697222233,right_val:0.5179154872894287,left_val:0.2675336897373200},{features:[[0,4,4,6,-1.],[0,6,4,2,3.]],threshold:0.0185394193977118,right_val:0.2317177057266235,left_val:0.4973869919776917},{features:[[14,6,2,3,-1.],[14,6,1,3,2.]],threshold:-2.9698139405809343e-004,right_val:0.4643664062023163,left_val:0.5529708266258240},{features:[[4,9,8,1,-1.],[8,9,4,1,2.]],threshold:-4.5577259152196348e-004,right_val:0.4469191133975983,left_val:0.5629584193229675},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-0.0101589802652597,right_val:0.4925918877124786,left_val:0.6706212759017944},{features:[[5,12,10,6,-1.],[5,14,10,2,3.]],threshold:-2.2413829356082715e-005,right_val:0.3912901878356934,left_val:0.5239421725273132},{features:[[11,12,1,2,-1.],[11,13,1,1,2.]],threshold:7.2034963523037732e-005,right_val:0.5501788854598999,left_val:0.4799438118934631},{features:[[8,15,4,2,-1.],[8,16,4,1,2.]],threshold:-6.9267209619283676e-003,right_val:0.4698084890842438,left_val:0.6930009722709656},{features:[[6,9,8,8,-1.],[10,9,4,4,2.],[6,13,4,4,2.]],threshold:-7.6997838914394379e-003,right_val:0.5480883121490479,left_val:0.4099623858928680},{features:[[7,12,4,6,-1.],[7,12,2,3,2.],[9,15,2,3,2.]],threshold:-7.3130549862980843e-003,right_val:0.5057886242866516,left_val:0.3283475935459137},{features:[[10,11,3,1,-1.],[11,11,1,1,3.]],threshold:1.9650589674711227e-003,right_val:0.6398249864578247,left_val:0.4978047013282776},{features:[[9,7,2,10,-1.],[9,7,1,5,2.],[10,12,1,5,2.]],threshold:7.1647600270807743e-003,right_val:0.6222137212753296,left_val:0.4661160111427307},{features:[[8,0,6,6,-1.],[10,0,2,6,3.]],threshold:-0.0240786392241716,right_val:0.5222162008285523,left_val:0.2334644943475723},{features:[[3,11,2,6,-1.],[3,13,2,2,3.]],threshold:-0.0210279691964388,right_val:0.4938226044178009,left_val:0.1183653995394707},{features:[[16,12,1,2,-1.],[16,13,1,1,2.]],threshold:3.6017020465806127e-004,right_val:0.4116711020469666,left_val:0.5325019955635071},{features:[[1,14,6,6,-1.],[1,14,3,3,2.],[4,17,3,3,2.]],threshold:-0.0172197297215462,right_val:0.4664269089698792,left_val:0.6278762221336365},{features:[[13,1,3,6,-1.],[14,1,1,6,3.]],threshold:-7.8672142699360847e-003,right_val:0.5249736905097961,left_val:0.3403415083885193},{features:[[8,8,2,2,-1.],[8,9,2,1,2.]],threshold:-4.4777389848604798e-004,right_val:0.5086259245872498,left_val:0.3610411882400513},{features:[[9,9,3,3,-1.],[10,9,1,3,3.]],threshold:5.5486010387539864e-003,right_val:0.6203498244285584,left_val:0.4884265959262848},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:-6.9461148232221603e-003,right_val:0.5011097192764282,left_val:0.2625930011272430},{features:[[14,0,2,3,-1.],[14,0,1,3,2.]],threshold:1.3569870498031378e-004,right_val:0.5628312230110169,left_val:0.4340794980525971},{features:[[1,0,18,9,-1.],[7,0,6,9,3.]],threshold:-0.0458802506327629,right_val:0.4696274995803833,left_val:0.6507998704910278},{features:[[11,5,4,15,-1.],[11,5,2,15,2.]],threshold:-0.0215825606137514,right_val:0.5287616848945618,left_val:0.3826502859592438},{features:[[5,5,4,15,-1.],[7,5,2,15,2.]],threshold:-0.0202095396816731,right_val:0.5074477195739746,left_val:0.3233368098735809},{features:[[14,0,2,3,-1.],[14,0,1,3,2.]],threshold:5.8496710844337940e-003,right_val:0.4489670991897583,left_val:0.5177603960037231},{features:[[4,0,2,3,-1.],[5,0,1,3,2.]],threshold:-5.7476379879517481e-005,right_val:0.5246363878250122,left_val:0.4020850956439972},{features:[[11,12,2,2,-1.],[12,12,1,1,2.],[11,13,1,1,2.]],threshold:-1.1513100471347570e-003,right_val:0.4905154109001160,left_val:0.6315072178840637},{features:[[7,12,2,2,-1.],[7,12,1,1,2.],[8,13,1,1,2.]],threshold:1.9862831104546785e-003,right_val:0.6497151255607605,left_val:0.4702459871768951},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:-5.2719512023031712e-003,right_val:0.5227652788162231,left_val:0.3650383949279785},{features:[[4,11,3,3,-1.],[4,12,3,1,3.]],threshold:1.2662699446082115e-003,right_val:0.3877618014812470,left_val:0.5166100859642029},{features:[[12,7,4,2,-1.],[12,8,4,1,2.]],threshold:-6.2919440679252148e-003,right_val:0.5023847818374634,left_val:0.7375894188880920},{features:[[8,10,3,2,-1.],[9,10,1,2,3.]],threshold:6.7360111279413104e-004,right_val:0.5495585799217224,left_val:0.4423226118087769},{features:[[9,9,3,2,-1.],[10,9,1,2,3.]],threshold:-1.0523450328037143e-003,right_val:0.4859583079814911,left_val:0.5976396203041077},{features:[[8,9,3,2,-1.],[9,9,1,2,3.]],threshold:-4.4216238893568516e-004,right_val:0.4398930966854096,left_val:0.5955939292907715},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:1.1747940443456173e-003,right_val:0.4605058133602142,left_val:0.5349888205528259},{features:[[5,0,3,4,-1.],[6,0,1,4,3.]],threshold:5.2457437850534916e-003,right_val:0.2941577136516571,left_val:0.5049191117286682},{features:[[4,14,12,4,-1.],[10,14,6,2,2.],[4,16,6,2,2.]],threshold:-0.0245397202670574,right_val:0.5218586921691895,left_val:0.2550177872180939},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:7.3793041519820690e-004,right_val:0.5490816235542297,left_val:0.4424861073493958},{features:[[10,10,3,8,-1.],[10,14,3,4,2.]],threshold:1.4233799884095788e-003,right_val:0.4081355929374695,left_val:0.5319514274597168},{features:[[8,10,4,8,-1.],[8,10,2,4,2.],[10,14,2,4,2.]],threshold:-2.4149110540747643e-003,right_val:0.5238950252532959,left_val:0.4087659120559692},{features:[[10,8,3,1,-1.],[11,8,1,1,3.]],threshold:-1.2165299849584699e-003,right_val:0.4908052980899811,left_val:0.5674579143524170},{features:[[9,12,1,6,-1.],[9,15,1,3,2.]],threshold:-1.2438809499144554e-003,right_val:0.5256118178367615,left_val:0.4129425883293152},{features:[[10,8,3,1,-1.],[11,8,1,1,3.]],threshold:6.1942739412188530e-003,right_val:0.7313653230667114,left_val:0.5060194134712219},{features:[[7,8,3,1,-1.],[8,8,1,1,3.]],threshold:-1.6607169527560472e-003,right_val:0.4596369862556458,left_val:0.5979632139205933},{features:[[5,2,15,14,-1.],[5,9,15,7,2.]],threshold:-0.0273162592202425,right_val:0.5308842062950134,left_val:0.4174365103244782},{features:[[2,1,2,10,-1.],[2,1,1,5,2.],[3,6,1,5,2.]],threshold:-1.5845570014789701e-003,right_val:0.4519486129283905,left_val:0.5615804791450501},{features:[[14,14,2,3,-1.],[14,15,2,1,3.]],threshold:-1.5514739789068699e-003,right_val:0.5360785126686096,left_val:0.4076187014579773},{features:[[2,7,3,3,-1.],[3,7,1,3,3.]],threshold:3.8446558755822480e-004,right_val:0.5430442094802856,left_val:0.4347293972969055},{features:[[17,4,3,3,-1.],[17,5,3,1,3.]],threshold:-0.0146722598001361,right_val:0.5146093964576721,left_val:0.1659304946660996},{features:[[0,4,3,3,-1.],[0,5,3,1,3.]],threshold:8.1608882173895836e-003,right_val:0.1884745955467224,left_val:0.4961819052696228},{features:[[13,5,6,2,-1.],[16,5,3,1,2.],[13,6,3,1,2.]],threshold:1.1121659772470593e-003,right_val:0.6093816161155701,left_val:0.4868263900279999},{features:[[4,19,12,1,-1.],[8,19,4,1,3.]],threshold:-7.2603770531713963e-003,right_val:0.4690375924110413,left_val:0.6284325122833252},{features:[[12,12,2,4,-1.],[12,14,2,2,2.]],threshold:-2.4046430189628154e-004,right_val:0.4046044051647186,left_val:0.5575000047683716},{features:[[3,15,1,3,-1.],[3,16,1,1,3.]],threshold:-2.3348190006799996e-004,right_val:0.5252848267555237,left_val:0.4115762114524841},{features:[[11,16,6,4,-1.],[11,16,3,4,2.]],threshold:5.5736480280756950e-003,right_val:0.5690100789070129,left_val:0.4730072915554047},{features:[[2,10,3,10,-1.],[3,10,1,10,3.]],threshold:0.0306237693876028,right_val:0.1740095019340515,left_val:0.4971886873245239},{features:[[12,8,2,4,-1.],[12,8,1,4,2.]],threshold:9.2074798885732889e-004,right_val:0.4354872107505798,left_val:0.5372117757797241},{features:[[6,8,2,4,-1.],[7,8,1,4,2.]],threshold:-4.3550739064812660e-005,right_val:0.4347316920757294,left_val:0.5366883873939514},{features:[[10,14,2,3,-1.],[10,14,1,3,2.]],threshold:-6.6452710889279842e-003,right_val:0.5160533189773560,left_val:0.3435518145561218},{features:[[5,1,10,3,-1.],[10,1,5,3,2.]],threshold:0.0432219989597797,right_val:0.7293652892112732,left_val:0.4766792058944702},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:2.2331769578158855e-003,right_val:0.5633171200752258,left_val:0.5029315948486328},{features:[[5,6,9,2,-1.],[8,6,3,2,3.]],threshold:3.1829739455133677e-003,right_val:0.5192136764526367,left_val:0.4016092121601105},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-1.8027749320026487e-004,right_val:0.5417919754981995,left_val:0.4088315963745117},{features:[[2,11,16,6,-1.],[2,11,8,3,2.],[10,14,8,3,2.]],threshold:-5.2934689447283745e-003,right_val:0.5243561863899231,left_val:0.4075677096843720},{features:[[12,7,2,2,-1.],[13,7,1,1,2.],[12,8,1,1,2.]],threshold:1.2750959722325206e-003,right_val:0.6387010812759399,left_val:0.4913282990455627},{features:[[9,5,2,3,-1.],[9,6,2,1,3.]],threshold:4.3385322205722332e-003,right_val:0.2947346866130829,left_val:0.5031672120094299},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:8.5250744596123695e-003,right_val:0.6308869123458862,left_val:0.4949789047241211},{features:[[5,1,8,12,-1.],[5,7,8,6,2.]],threshold:-9.4266352243721485e-004,right_val:0.4285649955272675,left_val:0.5328366756439209},{features:[[13,5,2,2,-1.],[13,6,2,1,2.]],threshold:1.3609660090878606e-003,right_val:0.5941501259803772,left_val:0.4991525113582611},{features:[[5,5,2,2,-1.],[5,6,2,1,2.]],threshold:4.4782509212382138e-004,right_val:0.5854480862617493,left_val:0.4573504030704498},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:1.3360050506889820e-003,right_val:0.5849052071571350,left_val:0.4604358971118927},{features:[[4,14,2,3,-1.],[4,15,2,1,3.]],threshold:-6.0967548051849008e-004,right_val:0.5229423046112061,left_val:0.3969388902187347},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-2.3656780831515789e-003,right_val:0.4898357093334198,left_val:0.5808320045471191},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.0734340175986290e-003,right_val:0.5470039248466492,left_val:0.4351210892200470},{features:[[9,14,2,6,-1.],[10,14,1,3,2.],[9,17,1,3,2.]],threshold:2.1923359017819166e-003,right_val:0.3842903971672058,left_val:0.5355060100555420},{features:[[8,14,3,2,-1.],[9,14,1,2,3.]],threshold:5.4968618787825108e-003,right_val:0.2827191948890686,left_val:0.5018138885498047},{features:[[9,5,6,6,-1.],[11,5,2,6,3.]],threshold:-0.0753688216209412,right_val:0.5148826837539673,left_val:0.1225076019763947},{features:[[5,5,6,6,-1.],[7,5,2,6,3.]],threshold:0.0251344703137875,right_val:0.7025446295738220,left_val:0.4731766879558563},{features:[[13,13,1,2,-1.],[13,14,1,1,2.]],threshold:-2.9358599931583740e-005,right_val:0.4656086862087250,left_val:0.5430532097816467},{features:[[0,2,10,2,-1.],[0,3,10,1,2.]],threshold:-5.8355910005047917e-004,right_val:0.5190119743347168,left_val:0.4031040072441101},{features:[[13,13,1,2,-1.],[13,14,1,1,2.]],threshold:-2.6639450807124376e-003,right_val:0.5161771178245544,left_val:0.4308126866817474},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-1.3804089976474643e-003,right_val:0.4695515930652618,left_val:0.6219829916954041},{features:[[13,5,2,7,-1.],[13,5,1,7,2.]],threshold:1.2313219485804439e-003,right_val:0.4425831139087677,left_val:0.5379363894462585},{features:[[6,13,1,2,-1.],[6,14,1,1,2.]],threshold:-1.4644179827882908e-005,right_val:0.4222503006458283,left_val:0.5281640291213989},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:-0.0128188095986843,right_val:0.5179932713508606,left_val:0.2582092881202698},{features:[[0,3,2,16,-1.],[0,3,1,8,2.],[1,11,1,8,2.]],threshold:0.0228521898388863,right_val:0.7609264254570007,left_val:0.4778693020343781},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:8.2305970136076212e-004,right_val:0.4671724140644074,left_val:0.5340992212295532},{features:[[6,0,3,7,-1.],[7,0,1,7,3.]],threshold:0.0127701200544834,right_val:0.1472366005182266,left_val:0.4965761005878449},{features:[[11,16,8,4,-1.],[11,16,4,4,2.]],threshold:-0.0500515103340149,right_val:0.5016592144966126,left_val:0.6414994001388550},{features:[[1,16,8,4,-1.],[5,16,4,4,2.]],threshold:0.0157752707600594,right_val:0.5685362219810486,left_val:0.4522320032119751},{features:[[13,5,2,7,-1.],[13,5,1,7,2.]],threshold:-0.0185016207396984,right_val:0.5137959122657776,left_val:0.2764748930931091},{features:[[5,5,2,7,-1.],[6,5,1,7,2.]],threshold:2.4626250378787518e-003,right_val:0.3795408010482788,left_val:0.5141941905021668},{features:[[18,6,2,14,-1.],[18,13,2,7,2.]],threshold:0.0629161670804024,right_val:0.6580433845520020,left_val:0.5060648918151856},{features:[[6,10,3,4,-1.],[6,12,3,2,2.]],threshold:-2.1648500478477217e-005,right_val:0.4019886851310730,left_val:0.5195388197898865},{features:[[14,7,1,2,-1.],[14,8,1,1,2.]],threshold:2.1180990152060986e-003,right_val:0.5954458713531494,left_val:0.4962365031242371},{features:[[0,1,18,6,-1.],[0,1,9,3,2.],[9,4,9,3,2.]],threshold:-0.0166348908096552,right_val:0.5175446867942810,left_val:0.3757933080196381},{features:[[14,7,1,2,-1.],[14,8,1,1,2.]],threshold:-2.8899470344185829e-003,right_val:0.5057178735733032,left_val:0.6624013781547546},{features:[[0,6,2,14,-1.],[0,13,2,7,2.]],threshold:0.0767832621932030,right_val:0.8047714829444885,left_val:0.4795796871185303},{features:[[17,0,3,12,-1.],[18,0,1,12,3.]],threshold:3.9170677773654461e-003,right_val:0.5719941854476929,left_val:0.4937882125377655},{features:[[0,6,18,3,-1.],[0,7,18,1,3.]],threshold:-0.0726706013083458,right_val:0.4943903982639313,left_val:0.0538945607841015},{features:[[6,0,14,16,-1.],[6,8,14,8,2.]],threshold:0.5403950214385986,right_val:0.1143338978290558,left_val:0.5129774212837219},{features:[[0,0,3,12,-1.],[1,0,1,12,3.]],threshold:2.9510019812732935e-003,right_val:0.5698574185371399,left_val:0.4528343975543976},{features:[[13,0,3,7,-1.],[14,0,1,7,3.]],threshold:3.4508369863033295e-003,right_val:0.4218730926513672,left_val:0.5357726812362671},{features:[[5,7,1,2,-1.],[5,8,1,1,2.]],threshold:-4.2077939724549651e-004,right_val:0.4637925922870636,left_val:0.5916172862052918},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:3.3051050268113613e-003,right_val:0.4382042884826660,left_val:0.5273385047912598},{features:[[5,7,7,2,-1.],[5,8,7,1,2.]],threshold:4.7735060798004270e-004,right_val:0.5181884765625000,left_val:0.4046528041362763},{features:[[8,6,6,9,-1.],[8,9,6,3,3.]],threshold:-0.0259285103529692,right_val:0.5089386105537415,left_val:0.7452235817909241},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-2.9729790985584259e-003,right_val:0.5058795213699341,left_val:0.3295435905456543},{features:[[13,0,6,4,-1.],[16,0,3,2,2.],[13,2,3,2,2.]],threshold:5.8508329093456268e-003,right_val:0.5793024897575378,left_val:0.4857144057750702},{features:[[1,2,18,12,-1.],[1,6,18,4,3.]],threshold:-0.0459675192832947,right_val:0.5380653142929077,left_val:0.4312731027603149},{features:[[3,2,17,12,-1.],[3,6,17,4,3.]],threshold:0.1558596044778824,right_val:0.1684713959693909,left_val:0.5196170210838318},{features:[[5,14,7,3,-1.],[5,15,7,1,3.]],threshold:0.0151648297905922,right_val:0.6735026836395264,left_val:0.4735757112503052},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-1.0604249546304345e-003,right_val:0.4775702953338623,left_val:0.5822926759719849},{features:[[3,14,3,3,-1.],[3,15,3,1,3.]],threshold:6.6476291976869106e-003,right_val:0.2319535017013550,left_val:0.4999198913574219},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:-0.0122311301529408,right_val:0.5262982249259949,left_val:0.4750893115997315},{features:[[0,4,6,6,-1.],[0,6,6,2,3.]],threshold:5.6528882123529911e-003,right_val:0.3561818897724152,left_val:0.5069767832756043},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:1.2977829901501536e-003,right_val:0.5619062781333923,left_val:0.4875693917274475},{features:[[4,5,4,3,-1.],[4,6,4,1,3.]],threshold:0.0107815898954868,right_val:0.6782308220863342,left_val:0.4750770032405853},{features:[[18,0,2,6,-1.],[18,2,2,2,3.]],threshold:2.8654779307544231e-003,right_val:0.4290736019611359,left_val:0.5305461883544922},{features:[[8,1,4,9,-1.],[10,1,2,9,2.]],threshold:2.8663428965955973e-003,right_val:0.5539351105690002,left_val:0.4518479108810425},{features:[[6,6,8,2,-1.],[6,6,4,2,2.]],threshold:-5.1983320154249668e-003,right_val:0.5434188842773438,left_val:0.4149119853973389},{features:[[6,5,4,2,-1.],[6,5,2,1,2.],[8,6,2,1,2.]],threshold:5.3739990107715130e-003,right_val:0.6507657170295715,left_val:0.4717896878719330},{features:[[10,5,2,3,-1.],[10,6,2,1,3.]],threshold:-0.0146415298804641,right_val:0.5161777138710022,left_val:0.2172164022922516},{features:[[9,5,1,3,-1.],[9,6,1,1,3.]],threshold:-1.5042580344015732e-005,right_val:0.4298836886882782,left_val:0.5337383747100830},{features:[[9,10,2,2,-1.],[9,11,2,1,2.]],threshold:-1.1875660129589960e-004,right_val:0.5582447052001953,left_val:0.4604594111442566},{features:[[0,8,4,3,-1.],[0,9,4,1,3.]],threshold:0.0169955305755138,right_val:0.0738800764083862,left_val:0.4945895075798035},{features:[[6,0,8,6,-1.],[6,3,8,3,2.]],threshold:-0.0350959412753582,right_val:0.4977591037750244,left_val:0.7005509138107300},{features:[[1,0,6,4,-1.],[1,0,3,2,2.],[4,2,3,2,2.]],threshold:2.4217350874096155e-003,right_val:0.5477694272994995,left_val:0.4466265141963959},{features:[[13,0,3,7,-1.],[14,0,1,7,3.]],threshold:-9.6340337768197060e-004,right_val:0.5313338041305542,left_val:0.4714098870754242},{features:[[9,16,2,2,-1.],[9,17,2,1,2.]],threshold:1.6391130338888615e-004,right_val:0.5342242121696472,left_val:0.4331546127796173},{features:[[11,4,6,10,-1.],[11,9,6,5,2.]],threshold:-0.0211414601653814,right_val:0.5204498767852783,left_val:0.2644700109958649},{features:[[0,10,19,2,-1.],[0,11,19,1,2.]],threshold:8.7775202700868249e-004,right_val:0.4152742922306061,left_val:0.5208349823951721},{features:[[9,5,8,9,-1.],[9,8,8,3,3.]],threshold:-0.0279439203441143,right_val:0.5018811821937561,left_val:0.6344125270843506},{features:[[4,0,3,7,-1.],[5,0,1,7,3.]],threshold:6.7297378554940224e-003,right_val:0.3500863909721375,left_val:0.5050438046455383},{features:[[8,6,4,12,-1.],[10,6,2,6,2.],[8,12,2,6,2.]],threshold:0.0232810396701097,right_val:0.6968677043914795,left_val:0.4966318011283875},{features:[[0,2,6,4,-1.],[0,4,6,2,2.]],threshold:-0.0116449799388647,right_val:0.5049629807472229,left_val:0.3300260007381439},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:0.0157643090933561,right_val:0.7321153879165649,left_val:0.4991598129272461},{features:[[8,0,3,7,-1.],[9,0,1,7,3.]],threshold:-1.3611479662358761e-003,right_val:0.5160670876502991,left_val:0.3911735117435455},{features:[[9,5,3,4,-1.],[10,5,1,4,3.]],threshold:-8.1522337859496474e-004,right_val:0.4949719011783600,left_val:0.5628911256790161},{features:[[8,5,3,4,-1.],[9,5,1,4,3.]],threshold:-6.0066272271797061e-004,right_val:0.4550595879554749,left_val:0.5853595137596130},{features:[[7,6,6,1,-1.],[9,6,2,1,3.]],threshold:4.9715518252924085e-004,right_val:0.5443599224090576,left_val:0.4271470010280609},{features:[[7,14,4,4,-1.],[7,14,2,2,2.],[9,16,2,2,2.]],threshold:2.3475370835512877e-003,right_val:0.3887656927108765,left_val:0.5143110752105713},{features:[[13,14,4,6,-1.],[15,14,2,3,2.],[13,17,2,3,2.]],threshold:-8.9261569082736969e-003,right_val:0.4971720874309540,left_val:0.6044502258300781},{features:[[7,8,1,8,-1.],[7,12,1,4,2.]],threshold:-0.0139199104160070,right_val:0.5000367760658264,left_val:0.2583160996437073},{features:[[16,0,2,8,-1.],[17,0,1,4,2.],[16,4,1,4,2.]],threshold:1.0209949687123299e-003,right_val:0.5560358166694641,left_val:0.4857374131679535},{features:[[2,0,2,8,-1.],[2,0,1,4,2.],[3,4,1,4,2.]],threshold:-2.7441629208624363e-003,right_val:0.4645777046680450,left_val:0.5936884880065918},{features:[[6,1,14,3,-1.],[6,2,14,1,3.]],threshold:-0.0162001308053732,right_val:0.5193495154380798,left_val:0.3163014948368073},{features:[[7,9,3,10,-1.],[7,14,3,5,2.]],threshold:4.3331980705261230e-003,right_val:0.3458878993988037,left_val:0.5061224102973938},{features:[[9,14,2,2,-1.],[9,15,2,1,2.]],threshold:5.8497930876910686e-004,right_val:0.5870177745819092,left_val:0.4779017865657806},{features:[[7,7,6,8,-1.],[7,11,6,4,2.]],threshold:-2.2466450463980436e-003,right_val:0.5374773144721985,left_val:0.4297851026058197},{features:[[9,7,3,6,-1.],[9,10,3,3,2.]],threshold:2.3146099410951138e-003,right_val:0.4640969932079315,left_val:0.5438671708106995},{features:[[7,13,3,3,-1.],[7,14,3,1,3.]],threshold:8.7679121643304825e-003,right_val:0.6771789789199829,left_val:0.4726893007755280},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.2448020172305405e-004,right_val:0.5428048968315125,left_val:0.4229173064231873},{features:[[0,1,18,2,-1.],[6,1,6,2,3.]],threshold:-7.4336021207273006e-003,right_val:0.4683673977851868,left_val:0.6098880767822266},{features:[[7,1,6,14,-1.],[7,8,6,7,2.]],threshold:-2.3189240600913763e-003,right_val:0.4424242079257965,left_val:0.5689436793327332},{features:[[1,9,18,1,-1.],[7,9,6,1,3.]],threshold:-2.1042178850620985e-003,right_val:0.5187087059020996,left_val:0.3762221038341522},{features:[[9,7,2,2,-1.],[9,7,1,2,2.]],threshold:4.6034841216169298e-004,right_val:0.5771207213401794,left_val:0.4699405133724213},{features:[[9,3,2,9,-1.],[10,3,1,9,2.]],threshold:1.0547629790380597e-003,right_val:0.5601701736450195,left_val:0.4465216994285584},{features:[[18,14,2,3,-1.],[18,15,2,1,3.]],threshold:8.7148818420246243e-004,right_val:0.3914709091186523,left_val:0.5449805259704590},{features:[[7,11,3,1,-1.],[8,11,1,1,3.]],threshold:3.3364820410497487e-004,right_val:0.5645738840103149,left_val:0.4564009010791779},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:-1.4853250468149781e-003,right_val:0.4692778885364533,left_val:0.5747377872467041},{features:[[7,14,3,6,-1.],[8,14,1,6,3.]],threshold:3.0251620337367058e-003,right_val:0.3762814104557037,left_val:0.5166196823120117},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:5.0280741415917873e-003,right_val:0.6151527166366577,left_val:0.5002111792564392},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-5.8164511574432254e-004,right_val:0.4390751123428345,left_val:0.5394598245620728},{features:[[7,9,6,9,-1.],[7,12,6,3,3.]],threshold:0.0451415292918682,right_val:0.2063035964965820,left_val:0.5188326835632324},{features:[[0,14,2,3,-1.],[0,15,2,1,3.]],threshold:-1.0795620037242770e-003,right_val:0.5137907266616821,left_val:0.3904685080051422},{features:[[11,12,1,2,-1.],[11,13,1,1,2.]],threshold:1.5995999274309725e-004,right_val:0.5427504181861877,left_val:0.4895322918891907},{features:[[4,3,8,3,-1.],[8,3,4,3,2.]],threshold:-0.0193592701107264,right_val:0.4773507118225098,left_val:0.6975228786468506},{features:[[0,4,20,6,-1.],[0,4,10,6,2.]],threshold:0.2072550952434540,right_val:0.3034991919994354,left_val:0.5233635902404785},{features:[[9,14,1,3,-1.],[9,15,1,1,3.]],threshold:-4.1953290929086506e-004,right_val:0.4460186064243317,left_val:0.5419396758079529},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:2.2582069505006075e-003,right_val:0.6027408838272095,left_val:0.4815764129161835},{features:[[0,15,14,4,-1.],[0,17,14,2,2.]],threshold:-6.7811207845807076e-003,right_val:0.5183305740356445,left_val:0.3980278968811035},{features:[[1,14,18,6,-1.],[1,17,18,3,2.]],threshold:0.0111543098464608,right_val:0.4188759922981262,left_val:0.5431231856346130},{features:[[0,0,10,6,-1.],[0,0,5,3,2.],[5,3,5,3,2.]],threshold:0.0431624315679073,right_val:0.6522961258888245,left_val:0.4738228023052216}],threshold:105.7611007690429700}],size:[20,20],tilted:false};
})(jsfeat.haar);
// simple wrapper for jsfeat face detector
// requires jsfeat

var jsfeat_face = function(image) {
  
  var img_u8,work_canvas,work_ctx,ii_sum,ii_sqsum,ii_tilted,edg;
  
  var w = image.width;
  var h = image.height;
  
  if (image.tagName == 'VIDEO' || image.tagName == 'IMG') {
    work_canvas = document.createElement('canvas');
    work_canvas.height = h;
    work_canvas.width = w;
    work_ctx = work_canvas.getContext('2d');
  } else if (image.tagName == 'CANVAS') {
    work_ctx = image.getContext('2d');
  }
  
  img_u8 = new jsfeat.matrix_t(w, h, jsfeat.U8_t | jsfeat.C1_t);
  ii_sum = new Int32Array((w+1)*(h+1));
  ii_sqsum = new Int32Array((w+1)*(h+1));
  ii_tilted = new Int32Array((w+1)*(h+1));
  
  var classifier = jsfeat.haar.frontalface;
  
  this.findFace = function () {
    if (image.tagName == 'VIDEO' || image.tagName == 'IMG') {
      work_ctx.drawImage(image, 0, 0);
    } 
    var imageData = work_ctx.getImageData(0, 0, w, h);
                  
    jsfeat.imgproc.grayscale(imageData.data, img_u8.data);
    
    jsfeat.imgproc.equalize_histogram(img_u8, img_u8);
    
    jsfeat.imgproc.compute_integral_image(img_u8, ii_sum, ii_sqsum, null);

    var rects = jsfeat.haar.detect_multi_scale(ii_sum, ii_sqsum, ii_tilted, null, img_u8.cols, img_u8.rows, classifier, 1.15, 2);
    
    rects = jsfeat.haar.group_rectangles(rects, 1);
    
    var rl = rects.length;
    
    if (rl > 0) {
      var best = rects[0];
      for (var i = 1;i < rl;i++) {
          if (rects[i].neighbors > best.neighbors) {
              best = rects[i]
          } else if (rects[i].neighbors == best.neighbors) {
              if (rects[i].confidence > best.confidence) best = rects[i];
          }
      }
      return [best];
    } else {
      return false;
    }
  }
  
}
"use strict";
/*
 * MOSSE correlation filter
 *
 * Optional parameters to constructor:
 *   drawResponse {canvasElement} : draws the correlation filter output on the given canvas element (default is none)
 *   psrThreshold {number} : peak-to-sidelobe-ratio threshold to use when updating filter while tracking (default is 10)
 *   eta {number} : adjusts how much new input affects the mosse filter, when updating filter while tracking
 *     number should be between 0 and 1 (default is 0.1)
 *   convertToGrayscale {boolean} : whether to convert canvas output to grayscale (default is true)
 *     if this is set to false, we assume all channels are equal and only grab values from red channel
 *
 * @author auduno / github.com/auduno
 */ 

function mosseFilter(params) {
    
    var _filter, _top, _bottom;
    var _fft;
    var _w,_h;
    var _im_part;
    var _arrlen;
    var _cc;
    var _image_array;
    
    this.psr_prev = undefined;
    this.peak_prev = undefined;
    var peak = 0.0;
    var updateable = false;
    
    if (!params) params = {};
    // setup of canvas for drawing responses, if given
    if (params.drawResponse === undefined) {
        params.drawResponse = false;
    } else {
        if (params.drawResponse.tagName != 'CANVAS') {
            params.drawResponse = false;
        } else {
            var responseContext = params.drawResponse.getContext('2d');
        }
    }
    if (params.psrThreshold === undefined) params.psrThreshold = 10;
    if (params.eta === undefined) params.eta = 0.10;
    if (params.convertToGrayscale === undefined) params.convertToGrayscale = true;
    
    this.load = function(filter) {
        // initialize filter width and height
        _w = filter.width;
        _h = filter.height;
        _arrlen = _w*_h;
        _filter = [filter.real, filter.imag];
        // handling top and bottom when they're not present
        if (filter.top && filter.bottom) {
          updateable = true;
          _top = [filter.top.real, filter.top.imag];
          _bottom = [filter.bottom.real, filter.bottom.imag];
        }
        
        // initialize fft to given width
        _fft = new FFT();
        _fft.init(filter.width);
        
        // set up temporary variables
        if(typeof Float64Array !== 'undefined') {
            _im_part = new Float64Array(_arrlen);
            _image_array = new Float64Array(_arrlen);
        } else {
            _im_part = new Array(_arrlen);
            _image_array = new Array(_arrlen);
        }
        var canvas = document.createElement("canvas");
        canvas.setAttribute('width', _w);
        canvas.setAttribute('height', _h);
        _cc = canvas.getContext('2d');
    }
    
    this.init = function(w,h) {
        // initialize filter width and height for a blank filter
        _w = w;
        _h = h;
        _arrlen = _w*_h;
        
        _filter = [[],[]];
        _top = [[],[]];
        _bottom = [[],[]];
        for (var i = 0;i < _arrlen;i++) {
            _filter[0][i] = 0;
            _filter[1][i] = 0;
            _top[0][i] = 0;
            _top[1][i] = 0;
            _bottom[0][i] = 0;
            _bottom[1][i] = 0;
        }
        updateable = true;
        
        // initialize fft to given width
        _fft = new FFT();
        _fft.init(w);
        
        // set up temporary variables
        if(typeof Float64Array !== 'undefined') {
            _im_part = new Float64Array(_arrlen);
        } else {
            _im_part = new Array(_arrlen);
        }
        var canvas = document.createElement("canvas");
        canvas.setAttribute('width', _w);
        canvas.setAttribute('height', _h);
        _cc = canvas.getContext('2d');
    }
    
    // fft function
    this.fft = function(array) {
        // not in-place
        
        var cn = new Array(_arrlen);
        for (var i = 0;i < _arrlen;i++) {
          cn[i] = 0.0;
        }
        
        _fft.fft2d(array,cn)
        return [array, cn];
    }
    
    // fft function
    this.fft_inplace = function(array) {
        // in-place
        
        for (var i = 0;i < _arrlen;i++) {
          _im_part[i] = 0.0;
        }
        
        _fft.fft2d(array,_im_part)
        return [array, _im_part];
    }
    
    this.ifft = function(rn, cn) {
        // in-place
        _fft.ifft2d(rn, cn);
        return rn;
    }

    // peak to sidelobe ratio function (optional)
    this.psr = function(array) {
        // proper
        var sum = 0;
        var max = 0;
        var maxpos = [];
        var sdo = 0;
        var val;
        for (var x = 0;x < _w;x++) {
            for (var y = 0;y < _h;y++) {
                val = array[(y*_w)+x];
                sum += val;
                sdo += (val*val);
                if (max < val) {
                    max = val;
                    maxpos = [x,y];
                }
            }
        }
        
        // subtract values around peak
        for (var x = -5;x < 6;x++) {
            for (var y = -5;y < 6;y++) {
                if (Math.sqrt(x*x+y*y) < 5) {
                    val = array[((maxpos[1]+y)*_w)+(maxpos[0]+x)]
                    sdo -= (val*val);
                    sum -= val;
                }
            }
        }
        
        var mean = sum/array.length;
        var sd = Math.sqrt((sdo/array.length)-(mean*mean));
        
        // get mean/variance of output around peak
        var psr = (max-mean)/sd;
        return psr;
    }
    
    this.getResponse = function(imageData) {
        // in-place
        
        // preprocess
        var prepImage = preprocess(imageData);
        prepImage = cosine_window(prepImage);
        
        // filter
        var res = this.fft_inplace(prepImage);
        
        // elementwise multiplication with filter
        complex_mult_inplace(res, _filter);
        
        // do inverse 2d fft
        var filtered = this.ifft(res[0],res[1]);
        return filtered;
    }
    
    this.track = function(input, left, top, width, height, updateFilter, gaussianPrior, calcPSR) {
        // finds position of filter in input image
        
        if (!_filter) {
            console.log("Mosse-filter needs to be initialized or trained before starting tracking.");
            return false;
        }
        
        if (input.tagName == "VIDEO" || input.tagName == "IMG") {
            // scale selection according to original source image
            var videoLeft = Math.round((left/input.width)*input.videoWidth);
            var videoTop = Math.round((top/input.height)*input.videoHeight);
            var videoWidth = Math.round((width/input.width)*input.videoWidth);
            var videoHeight = Math.round((height/input.height)*input.videoHeight);
            _cc.drawImage(input, videoLeft, videoTop, videoWidth, videoHeight, 0, 0, _w, _h);
        } else if (input.tagName == "CANVAS") {
            _cc.drawImage(input, left, top, width, height, 0, 0, _w, _h);
        }
        
        var image = _cc.getImageData(0,0,_w,_h);
        var id = image.data;
        
        if (params.convertToGrayscale) {
            // convert to grayscale
            for (var i = 0;i < _arrlen;i++) {
                _image_array[i] = id[(4*i)]*0.3;
                _image_array[i] += id[(4*i)+1]*0.59;
                _image_array[i] += id[(4*i)+2]*0.11;
            } 
        } else {
            // use only one channel
            for (var i = 0;i < _arrlen;i++) {
                _image_array[i] = id[(4*i)];
            } 
        }
        
        // preprocess
        var prepImage = preprocess(_image_array);
        prepImage = cosine_window(prepImage);
        
        // filter
        var res = this.fft_inplace(prepImage);
        // elementwise multiplication with filter
        var nures = complex_mult(res, _filter);
        // do inverse 2d fft
        var filtered = this.ifft(nures[0],nures[1]);
        
        // find max and min
        var max = 0;
        var min = 0;
        var maxpos = [];
        
        //method using centered gaussian prior
        if (gaussianPrior) {
            var prior, dx, dy;
            var variance = 128;
            for (var x = 0;x < _w;x++) {
                for (var y = 0;y < _h;y++) {
                    dx = x - _w/2;
                    dy = y - _h/2;
                    prior = Math.exp(-0.5*((dx*dx)+(dy*dy))/variance)
                    if ((filtered[(y*_w)+x]*prior) > max) {
                        max = filtered[(y*_w)+x]*prior;
                        maxpos = [x,y];
                    }
                    if (filtered[(y*_w)+x] < min) {
                        min = filtered[(y*_w)+x];
                    }
                }
            }
        } else {
            for (var x = 0;x < _w;x++) {
                for (var y = 0;y < _h;y++) {
                    if (filtered[(y*_w)+x] > max) {
                        max = filtered[(y*_w)+x];
                        maxpos = [x,y];
                    }
                    if (filtered[(y*_w)+x] < min) {
                        min = filtered[(y*_w)+x];
                    }
                }
            }
        }
        this.peak_prev = max;
        
        if (params.drawResponse) {
            // draw response
            var diff = max-min;
            var dc = document.createElement('canvas');
            dc.setAttribute('width', 32);
            dc.setAttribute('height', 32);
            var dcc = dc.getContext('2d');
            var psci = dcc.createImageData(32, 32);
            var pscidata = psci.data;
            for (var j = 0;j < 32*32;j++) {
                //draw with priors
                //var val = filtered[j]*Math.exp(-0.5*(((j%_w - _w/2)*(j%_w -_w/2))+((Math.floor(j/_h)-(_h/2))*(Math.floor(j/_h)-(_h/2))))/128);
                var val = filtered[j];
                val = Math.round((val+Math.abs(min))*(255/diff));
                pscidata[j*4] = val;
                pscidata[(j*4)+1] = val;
                pscidata[(j*4)+2] = val;
                pscidata[(j*4)+3] = 255;
            }
            dcc.putImageData(psci, 0, 0);
            responseContext.drawImage(dc, left, top, width, width);
        }
        
        if (calcPSR) {
          this.psr_prev = this.psr(filtered);
        }
        
        if (updateFilter) {
            if (!updateable) {
                console.log("The loaded filter does not support updating. Ignoring parameter 'updateFilter'.");
            } else {
                if (calcPSR) {
                  var psr = this.psr_prev;
                } else {
                  var psr = this.psr(filtered);
                }
                
                if (psr > params.psrThreshold) {
                    // create target
                    var target = [];
                    var nux = maxpos[0];
                    var nuy = maxpos[1];
                    for (var x = 0;x < _w;x++) {
                        for (var y = 0;y < _h;y++) {
                            target[(y*_w)+x] = Math.exp(-(((x-nux)*(x-nux))+((y-nuy)*(y-nuy)))/(2*2));
                        }
                    }
                    
                    //fft target
                    target = this.fft(target);
                    
                    // create filter
                    var res_conj = complex_conj(res);
                    var fuTop = complex_mult(target,res_conj);
                    var fuBottom = complex_mult(res,res_conj);
                    
                    // add up
                    var eta = params.eta;
                    for (var i = 0;i < _arrlen;i++) {
                        _top[0][i] = eta*fuTop[0][i] + (1-eta)*_top[0][i];
                        _top[1][i] = eta*fuTop[1][i] + (1-eta)*_top[1][i];
                        _bottom[0][i] = eta*fuBottom[0][i] + (1-eta)*_bottom[0][i];
                        _bottom[1][i] = eta*fuBottom[1][i] + (1-eta)*_bottom[1][i];
                    }
                    
                    _filter = complex_div(_top,_bottom);
                }
            }
        }
        
        /*if (psr < 5) {
          maxpos = [_w/2,_h/2]; 
        }*/
        
        maxpos[0] = maxpos[0]*(width/_w);
        maxpos[1] = maxpos[1]*(width/_h);
        
        // check if output is strong enough
        // if not, return false?
        if (max < 0) {
          return false;
        } else {
          return maxpos;
        }
    }
    
    this.train = function(input, left, top, width, height) {
        
        if (!updateable) {
          console.log("The loaded filter does not support updating. Unable to do training.");
          return false;
        }
        
        if (input.tagName == "VIDEO" || input.tagName == "IMG") {
            // scale selection according to original source image
            var videoLeft = Math.round((left/input.width)*input.videoWidth);
            var videoTop = Math.round((top/input.height)*input.videoHeight);
            var videoWidth = Math.round((width/input.width)*input.videoWidth);
            var videoHeight = Math.round((height/input.height)*input.videoHeight);
            _cc.drawImage(input, videoLeft, videoTop, videoWidth, videoHeight, 0, 0, _w, _h);
        } else if (input.tagName == "CANVAS") {
            _cc.drawImage(input, left, top, width, height, 0, 0, _w, _h);
        }
        
        var image = _cc.getImageData(0,0,_w,_h);
        var id = image.data;
         
        // convert to grayscale
        for (var i = 0;i < _arrlen;i++) {
            _image_array[i] = id[(4*i)]*0.3;
            _image_array[i] += id[(4*i)+1]*0.59;
            _image_array[i] += id[(4*i)+2]*0.11;
        }
        
        // preprocess
        var prepImage = preprocess(_image_array);
        prepImage = cosine_window(prepImage);
        
        // create target
        var target = [];
        var nux = _w/2;
        var nuy = _h/2;
        for (var x = 0;x < _w;x++) {
            for (var y = 0;y < _h;y++) {
                target[(y*_w)+x] = Math.exp(-(((x-nux)*(x-nux))+((y-nuy)*(y-nuy)))/(2*2));
            }
        }
        
        //fft target
        target = this.fft(target);
        
        // filter
        var res = this.fft(prepImage);
        // create filter
        var res_conj = complex_conj(res);
        var fuTop = complex_mult(target,res_conj);
        var fuBottom = complex_mult(res,res_conj);
        
        // add up
        var eta = params.eta;
        for (var i = 0;i < _arrlen;i++) {
            _top[0][i] = eta*fuTop[0][i] + (1-eta)*_top[0][i];
            _top[1][i] = eta*fuTop[1][i] + (1-eta)*_top[1][i];
            _bottom[0][i] = eta*fuBottom[0][i] + (1-eta)*_bottom[0][i];
            _bottom[1][i] = eta*fuBottom[1][i] + (1-eta)*_bottom[1][i];
        }
        
        _filter = complex_div(_top,_bottom);
        
        return true;
    }
    
    var preprocess = function(array) {
        // in-place
        
        // log adjusting
        for (var i = 0;i < _arrlen;i++) {
          array[i] = Math.log(array[i]+1);
        }
        
        // normalize to mean 0 and norm 1
        var mean = 0;
        for (var i = 0;i < _arrlen;i++) {
          mean += array[i];
        }
        mean /= _arrlen;
        
        for (var i = 0;i < _arrlen;i++) {
          array[i] -= mean;
        }
        var norm = 0.0;
        for (var i = 0;i < _arrlen;i++) {
          norm += (array[i]*array[i]);
        }
        norm = Math.sqrt(norm);
        for (var i = 0;i < _arrlen;i++) {
          array[i] /= norm;
        }
        
        return array;
    }
    
    var cosine_window = function(array) {
        // calculate rect cosine window (in-place)
        var pos = 0;
        for (var i = 0;i < _w;i++) {
            for (var j = 0;j < _h;j++) {
                //pos = (i%_w)+(j*_w);
                var cww = Math.sin((Math.PI*i)/(_w-1))
                var cwh = Math.sin((Math.PI*j)/(_h-1))
                array[pos] = Math.min(cww,cwh)*array[pos];
                pos++;
            }
        }
        
        return array;
    }
    
    var complex_mult = function(cn1, cn2) {
        // not in-place
        var re_part = new Array(_w);
        var im_part = new Array(_w);
        var nucn = [re_part, im_part];
        for (var r = 0;r < _arrlen;r++) {
            nucn[0][r] = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);
            nucn[1][r] = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);
        }
        return nucn;
    }
    
    var complex_mult_inplace = function(cn1, cn2) {
        // in-place
        var temp1, temp2;
        for (var r = 0;r < _arrlen;r++) {
            temp1 = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);
            temp2 = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);
            cn1[0][r] = temp1;
            cn1[1][r] = temp2;
        }
    }
    
    var complex_conj = function(cn) {
        // not in-place (TODO)
        var nucn = [[],[]];
        for (var i = 0;i < _arrlen;i++) {
            nucn[0][i] = cn[0][i]
            nucn[1][i] = -cn[1][i];
        }
        return nucn;
    }
    
    var complex_div = function(cn1, cn2) {
        // not in-place (TODO)
        var nucn = [[],[]];
        for (var r = 0;r < _arrlen;r++) {
            nucn[0][r] = ((cn1[0][r]*cn2[0][r])+(cn1[1][r]*cn2[1][r])) / ((cn2[0][r]*cn2[0][r]) + (cn2[1][r]*cn2[1][r]));
            nucn[1][r] = ((cn1[1][r]*cn2[0][r])-(cn1[0][r]*cn2[1][r])) / ((cn2[0][r]*cn2[0][r]) + (cn2[1][r]*cn2[1][r]));
        }
        return nucn;
    }
}

/**
 * Fast Fourier Transform
 * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)
 * 
 * @author ryo / github.com/wellflat
 * Based on https://github.com/wellflat/jslib with some tiny optimizations
 */

function FFT() {
  
  var _n = 0,          // order
      _bitrev = null,  // bit reversal table
      _cstb = null;    // sin/cos table
  var _tre, _tim;
  
  this.init = function (n) {
    if(n !== 0 && (n & (n - 1)) === 0) {
      _n = n;
      _setVariables();
      _makeBitReversal();
      _makeCosSinTable();
    } else {
      throw new Error("init: radix-2 required");
    }
  }
    
  // 1D-FFT
  this.fft1d = function (re, im) {
    fft(re, im, 1);
  }
    
  // 1D-IFFT
  this.ifft1d = function (re, im) {
    var n = 1/_n;
    fft(re, im, -1);
    for(var i=0; i<_n; i++) {
      re[i] *= n;
      im[i] *= n;
    }
  }
  
  // 2D-FFT
  this.fft2d = function (re, im) {
    var i = 0;
    // x-axis
    for(var y=0; y<_n; y++) {
      i = y*_n;
      for(var x1=0; x1<_n; x1++) {
        _tre[x1] = re[x1 + i];
        _tim[x1] = im[x1 + i];
      }
      this.fft1d(_tre, _tim);
      for(var x2=0; x2<_n; x2++) {
        re[x2 + i] = _tre[x2];
        im[x2 + i] = _tim[x2];
      }
    }
    // y-axis
    for(var x=0; x<_n; x++) {
      for(var y1=0; y1<_n; y1++) {
        i = x + y1*_n;
        _tre[y1] = re[i];
        _tim[y1] = im[i];
      }
      this.fft1d(_tre, _tim);
      for(var y2=0; y2<_n; y2++) {
        i = x + y2*_n;
        re[i] = _tre[y2];
        im[i] = _tim[y2];
      }
    }
  }
  
  // 2D-IFFT
  this.ifft2d = function (re, im) {
    var i = 0;
    // x-axis
    for(var y=0; y<_n; y++) {
      i = y*_n;
      for(var x1=0; x1<_n; x1++) {
        _tre[x1] = re[x1 + i];
        _tim[x1] = im[x1 + i];
      }
      this.ifft1d(_tre, _tim);
      for(var x2=0; x2<_n; x2++) {
        re[x2 + i] = _tre[x2];
        im[x2 + i] = _tim[x2];
      }
    }
    // y-axis
    for(var x=0; x<_n; x++) {
      for(var y1=0; y1<_n; y1++) {
        i = x + y1*_n;
        _tre[y1] = re[i];
        _tim[y1] = im[i];
      }
      this.ifft1d(_tre, _tim);
      for(var y2=0; y2<_n; y2++) {
        i = x + y2*_n;
        re[i] = _tre[y2];
        im[i] = _tim[y2];
      }
    }
  }
  
  // core operation of FFT
  function fft(re, im, inv) {
    var d, h, ik, m, tmp, wr, wi, xr, xi,
        n4 = _n >> 2;
    // bit reversal
    for(var l=0; l<_n; l++) {
      m = _bitrev[l];
      if(l < m) {
        tmp = re[l];
        re[l] = re[m];
        re[m] = tmp;
        tmp = im[l];
        im[l] = im[m];
        im[m] = tmp;
      }
    }
    // butterfly operation
    for(var k=1; k<_n; k<<=1) {
      h = 0;
      d = _n/(k << 1);
      for(var j=0; j<k; j++) {
        wr = _cstb[h + n4];
        wi = inv*_cstb[h];
        for(var i=j; i<_n; i+=(k<<1)) {
          ik = i + k;
          xr = wr*re[ik] + wi*im[ik];
          xi = wr*im[ik] - wi*re[ik];
          re[ik] = re[i] - xr;
          re[i] += xr;
          im[ik] = im[i] - xi;
          im[i] += xi;
        }
        h += d;
      }
    }
  }
  
  // set variables
  function _setVariables() {
    if(typeof Uint8Array !== 'undefined') {
      _bitrev = new Uint8Array(_n);
    } else {
      _bitrev = new Array(_n);
    }
    if(typeof Float64Array !== 'undefined') {
      _cstb = new Float64Array(_n*1.25);
      _tre = new Float64Array(_n*_n);
      _tim = new Float64Array(_n*_n);
    } else {
      _cstb = new Array(_n*1.25);
      _tre = new Array(_n*_n);
      _tim = new Array(_n*_n);
    }
  }
  
  // make bit reversal table
  function _makeBitReversal() {
    var i = 0,
        j = 0,
        k = 0;
    _bitrev[0] = 0;
    while(++i < _n) {
      k = _n >> 1;
      while(k <= j) {
        j -= k;
        k >>= 1;
      }
      j += k;
      _bitrev[i] = j;
    }
  }
  
  // make trigonometric function table
  function _makeCosSinTable() {
    var n2 = _n >> 1,
        n4 = _n >> 2,
        n8 = _n >> 3,
        n2p4 = n2 + n4,
        t = Math.sin(Math.PI/_n),
        dc = 2*t*t,
        ds = Math.sqrt(dc*(2 - dc)),
        c = _cstb[n4] = 1,
        s = _cstb[0] = 0;
    t = 2*dc;
    for(var i=1; i<n8; i++) {
      c -= dc;
      dc += t*c;
      s += ds;
      ds -= t*s;
      _cstb[i] = s;
      _cstb[n4 - i] = c;
    }
    if(n8 !== 0) {
      _cstb[n8] = Math.sqrt(0.5);
    }
    for(var j=0; j<n4; j++) {
      _cstb[n2 - j]  = _cstb[j];
    }
    for(var k=0; k<n2p4; k++) {
      _cstb[k + n2] = -_cstb[k];
    }
  }
}







// Shimming for noflo build
module.exports = clm;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 118 */
/***/ (function(module, exports) {

var pModel = {
  "scoring": {
    "size": [20, 22], 
    "bias": -1.3970965781063711, 
    "coef": [-0.019443206312618266, -0.0084626551369373984, -0.0056439963412376806, -0.0030632716896851417, 0.0050581938798613096, 0.0038671999692946632, 0.0073781421893252819, 0.008408844556368901, 0.0021079916674897471, 0.0088021517989660455, 0.0084634202851292546, 0.0091341881048755593, 0.0021677708519095705, 0.0057905826022958259, 0.010027042924308791, 0.010018015835686447, 0.011074574130386098, -0.00061695783617744283, -0.0060840083569450205, -0.0094487678808903661, -0.012441209862965338, -0.0038650406223106025, -0.00031049888008515014, 0.003187872856386012, 0.0078183021180926356, 0.010960251877128001, 0.012100913210202307, 0.012289318801648701, 0.012872315936395949, 0.0134197639066574, 0.012863004278393353, 0.012570470005854794, 0.0144288424245574, 0.013339430524005279, 0.013248442014867023, 0.012998181709015256, 0.0080561986303109411, 0.0014670228332206666, -0.011928206846124195, -0.0097909276659884133, -0.019951337591485003, -0.014601516863452837, -0.013174779761633797, -0.0060514903696567476, -0.0010407140556988824, 0.0054650997555345483, 0.010448591237341475, 0.014061216421035866, 0.015918382919452134, 0.016360925963435087, 0.02175676516818845, 0.017301016139781272, 0.014195207612699818, 0.012452400847919372, 0.010454129710215853, 0.0040883019269826832, -0.0014194361456059026, -0.0038498599142176948, -0.010769873280441659, -0.011758097810167857, -0.0046927302624985654, -0.0022134112349382041, -0.0039804434067522172, -0.012186682535867691, -0.011886732829841436, -0.008198434083715244, 0.0028353930104073055, 0.0070820189528775831, 0.012238372017639833, 0.016348014515026394, 0.020980251210150468, 0.01731275318263429, 0.01186526524722499, 0.007237133559106634, 0.0028787582373227981, -0.007467321804467685, -0.012293394385884527, -0.014833951237083715, -0.0083886394867411403, -0.001277206299448029, -0.0043237762267366413, -0.00079995554890789644, -0.0090446939377834615, -0.015715154398522533, -0.016374353020164909, -0.018048467332774626, -0.012034275948581882, -0.0072430439975880896, 0.00051252407841081971, 0.013091943912572559, 0.018570409085074381, 0.013098815816852492, 0.0008591564011330168, -0.0064555113363009954, -0.014574145037132261, -0.018221531408352937, -0.01805986873321162, -0.016665959992610131, -0.016742981997331947, -0.012862200876738698, -0.037408776782215991, -0.026830315322269691, -0.036692867895355551, -0.034788073944897399, -0.021885031967903899, -0.024484660949111742, -0.028068870569776663, -0.018631752402912666, 0.00033862502266578511, 0.01559117928255003, 0.021178968053305464, 0.015184030917486158, 0.002942909802540911, -0.014374637994945122, -0.025568052116952664, -0.025717989966112242, -0.023218559873459776, -0.043064179414035626, -0.042244667490572319, -0.040560989397592062, -0.029282249261991376, -0.037097180414959283, -0.050209371445049687, -0.043175446636272506, -0.038799263945784764, -0.037913350312177137, -0.024596940746816367, -0.013391546719824746, 0.0026176056292311106, 0.0161600431397954, 0.021950494557360537, 0.018824694902420232, 0.006927363884398058, -0.0067099747768306958, -0.018258612142465137, -0.031150030943545643, -0.030987027023796063, -0.033628054995754796, -0.043437053800875543, -0.034534827602693656, -0.0027688241949539527, -0.0045492751804971556, -0.0029637241504820444, -0.0034067004234806259, -0.0058158675916083176, -0.0050003474884839725, -0.0052189027673953392, -0.0035094302696121191, 0.0048075866050476977, 0.015230282965296896, 0.017877023790346995, 0.015060123226282708, 0.0068301148455019063, -0.00074735425779775112, -0.0047129224250249081, -0.0020172475601060438, -0.0028733715759857248, -3.2165259563759688e-05, 0.0052576318460990619, 0.0043528918718454875, 0.016945619656148794, 0.015930900625567117, 0.013751773645422991, 0.010130474427749569, 0.0080480898297084717, 0.0066539674397816983, 0.0068324700348844428, 0.0069577044114707276, 0.0040399129489101342, 0.011715241103133139, 0.017439724961211336, 0.014273924944517397, 0.0061485975492234337, 0.0064501329867605404, 0.0064154824267410098, 0.0087972617488658849, 0.0085371084737999835, 0.0087282112830335563, 0.011782866421798245, 0.016746943082334282, 0.022118218282678175, 0.020835875059091086, 0.018311801034637344, 0.01589801188949137, 0.017833422960512931, 0.01556573659143182, 0.014048773907766661, 0.0092415766206588174, 0.008151842723012729, 0.011230814598071655, 0.01256801671117759, 0.012111623945116202, 0.0098381741274288295, 0.0073611628026903006, 0.0095541157333664112, 0.011727533965135649, 0.018125902932239795, 0.019469248207063541, 0.017398513191690286, 0.021144199041044975, 0.021132145666912093, 0.019499184169656004, 0.019592876054570843, 0.02028149781228069, 0.017450605090846959, 0.01415914728419608, 0.0062290511445100638, 0.0038367364618697264, 0.0070206311493656928, 0.0096561161467108754, 0.011406409148288063, 0.0073273774756050288, 0.0046725824974188255, 0.0052535602992445293, 0.00018758422847375771, 0.0081523629612461953, 0.012760089024104778, 0.021600004613459223, 0.02330330354276354, 0.023745752734397885, 0.018230549428489853, 0.020013388637927079, 0.019842171101705101, 0.018799688221643948, 0.010638029835974899, 0.00047497591850582786, -0.0071779359181283857, -0.0013492660142831474, 0.0015382005340972228, 0.0026091901041104195, 0.00054046824549715592, -0.00049664221846118756, -0.0004620349686195485, -0.0052440228766081143, -0.0052152354482096451, -0.010002649985436339, 0.0014386382744505852, 0.012845063185194877, 0.020827676960957435, 0.02373841052172394, 0.015716685713465389, 0.01638066669873605, 0.014902611437895159, 0.0073730357797861029, 0.0019356373041797752, -0.0061999712321189927, -0.0091165414771389678, -0.008810991502401562, -0.014849548271736901, -0.002088752298238026, 0.0052140970488441726, 0.0010527273675475608, -0.010321625138183299, -0.016207678046552692, -0.012439252596672909, -0.013087206027715756, -0.0027969969285832111, 0.0023632017053047227, 0.011157492323637063, 0.018368837091378775, 0.009522424063657664, 0.010552085697652452, 0.0065611074700353111, -0.0015314856230301123, -0.0032492038209889869, -0.0031329857351426339, -0.0009277374824954263, -0.0020968871213430215, -0.002752601764726735, 0.00094388371290420677, 5.9164336949845309e-05, -0.0017254679888374039, -0.0034420772687673035, -0.0045773609585904318, -0.0025304599008137956, -0.00038215561598060812, 0.00057078584536244593, 0.0031325966195568239, 0.0060237831417333659, 0.01158476991744758, 0.0016262584963572593, 0.0032288122743198387, 0.0012532877511827127, 0.00062747794288786391, 0.0023766730707680218, 0.0028182202873619686, 0.0023771129569157626, -0.0033402786707182365, -0.0048954226369167918, 0.0030746977489523515, 0.0062648590670420657, 0.0050231159304044643, 0.00044657525636142406, -0.0048270904988737106, -0.0040237200076292511, 0.0024988183457590458, 0.0054580394659512529, 0.0072880311920233637, 0.0036009634090189563, 0.010569246292394684, -0.0045836905885612515, 0.00057936439982262571, 0.00102991877614139, 0.0030014799750564766, 0.0036675159287522449, 0.0044718005821969111, 0.0068927421100514214, 0.0039124352937196984, 0.007139428500837236, 0.010304447674314087, 0.012609007891982103, 0.008958913992549505, 0.0086037912511740151, 0.0055408494888294774, 0.0046721790312300258, 0.0047921200350865495, 0.0058818201004558757, 0.0056047225724042979, 0.0054112450019911731, 0.0073264985149536482, -0.0027341865318231302, -0.0027247005346668829, -0.0034900498414649531, -0.0079957154687285564, -0.0040761105067111218, -0.0020778048501128819, -0.0028478822594267903, -0.0039662744056797195, -0.0026161203530461301, 0.00092611267411275692, 0.0017426886986748021, 0.00055187058776232881, -0.0013723391980049371, -0.0045995868862228262, -0.004201475995629732, -0.0054721778518871953, -0.002341678055566526, -0.0025440841811939178, -0.0078777546807155367, 5.340267621167532e-05, 0.0046873465713941241, 0.0021887942815206605, 0.0013036188253628853, -0.001369820467079858, -0.015804998363084376, -0.016267691007421516, -0.018900936626522147, -0.017659450320792951, -0.011812605534381678, -0.0034436129735933847, -0.0023483321715621502, -0.0050111463464252073, -0.0050922386240516513, -0.015030789874247219, -0.020198024497642013, -0.021620507739756673, -0.018586140603325793, -0.018723839025246693, -0.0055722698499209482, 0.0064480458300502788, 0.0026822651632485931, 0.0060010017569890623, 0.0039986244661379938, 0.0050813259426419084, -0.0059114072323689293, -0.027745788024718613, -0.029251292823436387, -0.023066523347947315, -0.017210413752997977, -0.015963112589643183, -0.021075188283476324, -0.023666705491108494, -0.020005598090990763, -0.019062969033403668, -0.017792117192348619, -0.025322677372927888, -0.020971240352056199, -0.003436645553932082, 0.0043350896839554273, 0.0084557183627534376, -0.0063213373221792614, -0.0012841346959162978, -0.0012350140140767124, 0.004020967306281667, 0.0092274867614143326, 0.0045264965008091395, 0.0041315898134410677, 0.00077108445452623935, 0.0017580819918377949, -0.0011577021001876594, -0.0036195352433658614, -0.0037319908665914719, -0.001666179302724247, 0.0031110879435167255, 0.0014906582671670387, 0.0048443015054418677, 0.0059990829294203933, 0.0084750979219295353, 0.0055827168912293912, 0.0025145315352065756, -0.0046319230006191276, -0.0076182514283882324, -0.0046593775053102001, -0.0031253513278243637, 0.0074653367528114828, 0.010125926733440484, 0.0094747053616804754, 0.0035657571954442512, 0.0057833695060832482, 0.003888133034710705, 0.0019960148005530504, 0.0015056031401225207, 0.0011132050024144288, 0.0054876547928768482, 0.0047365733649033419, 0.0072106350627162141, 0.010077746417547511, 0.0038570243972044947, -0.003118757327733293, 8.694979275512165e-05, -0.021441387266543339, -0.0072102976069877674, -0.0078359058223554552, -0.00594066743311885, -0.0016100298225058601, 0.0053450064816458259, 0.0071049496578081076, 0.010196875445129471, 0.0057577873293374569, 0.0074570800047582559, 0.0062731053175082022, 0.0076242083673520502, 0.0068436930933054993, 0.0070021422399430639, 0.0087250840640590785, 0.0089995789681808595, 0.0034314447644411355, -0.001989159567628072, -0.007896602411841893, -0.010924672368545567]
  }, 
  "path": {
    "normal": [
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
      [15, 16, 17, 18], 
      [19, 20, 21, 22], 
      [23, 63, 24, 64, 25, 65, 26, 66, 23], 
      [28, 67, 29, 68, 30, 69, 31, 70, 28],  
      [34, 35, 36, 42, 37, 43, 38, 39, 40],  
      [33, 41, 62],  
      [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 44, 56, 57, 58, 50, 59, 60, 61, 44], 
      27, 32
    ],
    "vertices": [
      // jawline
      [0,1,23,0],
      [1,23,66,1],
      [1,2,66,1],
      [2,66,26,2],
      [2,26,35,2],
      [2,35,36,2],
      [2,36,3,2],
      [36,44,45,36],
      [3,4,44,3],
      [3,44,36,3],
      [4,44,55,4],
      [4,5,55,4],
      [5,55,54,5],
      [5,6,54,5],
      [6,53,54,6],
      [6,7,53,6],
      [7,8,53,7],
      [8,52,53,8],
      [8,9,52,8],
      [9,51,52,9],
      [9,10,51,9],
      [10,50,51,10],
      [10,11,50,10],
      [11,38,50,11],
      [11,12,38,11],
      [12,38,39,12],
      [12,31,39,12],
      [12,31,70,12],
      [12,13,70,12],
      [13,28,70,13],
      [13,14,28,13],
      // right eyebrow
      [14,15,28,14],
      [15,28,67,15],
      [15,16,67,15],
      [16,67,29,16],
      [16,17,29,16],
      [17,68,29,17],
      [17,18,68,17],
      [18,68,30,18],
      [18,30,33,18],
      // below eyes
      [30,40,69,30],
      [39,40,69,39],
      [39,31,69,39],
      [26,65,35,26],
      [34,35,65,34],
      [25,34,65,25],
      // left eyebrow
      [22,25,33,22],
      [22,25,64,22],
      [21,22,64,21],
      [21,24,64,21],
      [20,21,24,20],
      [20,24,63,20],
      [19,20,63,19],
      [19,23,63,19],
      [19,23,0,19],
      // below nose
      [36,45,46,36],
      [36,42,46,36],
      [42,37,46,42],
      [37,46,47,37],
      [46,37,47,46],
      [37,47,48,37],
      [38,48,49,38],
      [37,43,48,37],
      [43,38,48,43],
      [38,49,50,38],
      // nose region
      [22,18,33,22],
      [40,41,30,40],
      [25,33,41,25],
      [33,41,30,33],
      [25,34,41,25],
      [41,40,62,41],
      [34,41,62,34],
      [34,35,62,34],
      [35,36,62,35],
      [36,42,62,36],
      [42,37,62,42],
      [37,43,62,37],
      [43,38,62,43],
      [38,39,62,38],
      [39,40,62,39],
      // mouth
      [44,45,61,44],
      [45,46,61,45],
      [46,47,61,46],
      [47,61,60,47],
      [47,59,60,47],
      [47,48,59,47],
      [48,49,59,48],
      [49,50,59,49],
      [50,51,58,50],
      [51,52,58,51],
      [52,57,58,52],
      [52,53,57,52],
      [53,54,57,53],
      [54,56,57,54],
      [54,55,56,54],
      [44,55,56,44],
      // left eye
      [23,63,27,23],
      [63,24,27,63],
      [24,64,27,24],
      [64,25,27,64],
      [25,65,27,25],
      [65,26,27,65],
      [26,66,27,26],
      [66,23,27,66],
      // right eye
      [28,67,32,28],
      [67,29,32,67],
      [29,68,32,29],
      [68,30,32,68],
      [30,69,32,30],
      [69,31,32,69],
      [31,70,32,31],
      [28,32,70,28]
    ]
  }, 
  "patchModel": {
    "patchType": "SVM", 
    "bias": {
      "raw": [-0.964306520867, -1.03566919244, -0.874989992149, -0.916328634351, -0.84503678968, -0.844297101434, -0.738523173234, -0.808714131663, -0.726541145855, -0.843675312327, -0.869822246614, -0.917260263832, -0.873711733476, -1.02671396751, -0.98146088848, -0.873014174242, -1.02044597636, -1.05803547484, -1.22124828051, -0.881683950651, -1.03317042471, -1.05134750237, -1.24054665894, -1.16383797435, -1.06699587696, -1.23916761432, -1.18767751229, -1.12345203915, -1.13546600331, -1.08024044629, -1.24021266444, -1.16700091429, -1.11195019559, -0.729540672833, -1.12391599663, -1.3005410545, -1.31472443469, -1.08705339489, -1.33623226644, -1.32469845456, -1.11491083141, -0.762875763426, -1.12163285295, -1.09863140074, -1.29945157973, -1.27843894877, -1.00589316549, -0.912330645934, -0.962922353705, -1.25265133142, -1.29458347282, -1.15225762288, -1.00045652806, -0.887710450269, -1.01416634829, -1.19650803217, -1.03872671577, -0.86719070075, -1.008904644, -1.12379151191, -0.950687461141, -1.12241433736, -0.889224862634, -1.11762094609, -1.22489133968, -1.24702333407, -1.24517637612, -1.09819559472, -1.2104134101, -1.2217112657, -1.17731763127], 
      "sobel": [-0.83934766225, -0.62721260575, -0.558840580329, -0.699564404116, -0.711116468654, -0.800405507582, -0.800598028802, -1.11367567263, -0.800716892269, -0.800194374505, -0.719852733547, -0.699662339749, -0.583473094463, -0.656586463686, -0.82585939445, -0.777588904797, -0.772328358153, -0.858083769483, -0.819377339675, -0.764279660704, -0.799960100345, -0.867018791717, -0.823023270097, -0.742640730114, -1.00863469391, -0.717177931342, -0.795282566734, -0.882814402127, -0.781504747967, -0.996713581871, -0.712255820555, -0.811275119279, -0.961002025204, -1.20550193802, -0.862430611162, -0.755762286162, -0.788966054175, -0.962730404866, -0.785589168563, -0.783168017095, -0.891439881469, -1.08053052724, -0.818953010952, -0.823990582718, -0.610975113014, -0.706369334087, -0.83607795072, -0.86536700094, -0.861887789379, -0.706860677903, -0.604669076545, -0.638959509959, -0.600205200156, -0.601208908689, -0.600265306283, -0.666594192176, -0.706937637112, -0.806432197551, -0.701267093778, -0.697408794637, -0.851407473703, -0.696453841977, -1.00957402773, -0.888081735997, -0.883778307995, -0.801014108655, -0.802707601144, -0.902478661063, -0.867497240701, -0.826525935114, -0.828361611411], 
      "lbp": [-1.2775026474, -0.801223028353, -0.800091623644, -0.800009851969, -0.706840077597, -0.771744181593, -0.764756730848, -0.668987349384, -0.722732252285, -0.669412768606, -0.599571546235, -0.799859783453, -0.800085025062, -0.800151690407, -0.800453693963, -0.770896454141, -0.657297455691, -0.599810309052, -0.583090394926, -0.952970571559, -0.7654582373, -0.799938792024, -0.727414989246, -1.31723075305, -1.14076054405, -1.33781061842, -1.40029321489, -1.29006497698, -1.28367040173, -1.15693629435, -1.21680694398, -1.40041878805, -1.29047691479, -0.928378863331, -0.926795080454, -0.921170431637, -0.911039053934, -0.843072087859, -0.863356945439, -0.975893430292, -0.891645275689, -1.19772729821, -0.994481526443, -0.974741126221, -0.796142704788, -0.771301703397, -0.911422811844, -0.920856682866, -0.865902542856, -0.849751055127, -0.806605497263, -1.05057278424, -1.21923288747, -1.3182935345, -1.30915908452, -0.608079191461, -0.939755202343, -1.10582615252, -1.02794612196, -0.913831959238, -0.874524304042, -0.818753505759, -1.06509012802, -1.18557061801, -1.18891869024, -1.3461331468, -1.39693404573, -1.19088607628, -1.13830203374, -1.37361790282, -1.39128680085]
    }, 
    "weights": {
      "raw": [
        [-0.00641929350098569, 0.029808749809618604, -0.026783847528159686, -0.022626445601288438, -0.067696544783929641, -0.33308017010587532, 0.028196651717386736, 0.18244853629138108, 0.015034328565348129, 0.067852736181546511, 0.066707601028042948, 0.043757744772933718, -0.049432046935464227, 0.028764976579739795, -0.023780221712776294, -0.019043996534914023, -0.14597609954565341, 0.076748129651230637, 0.10031267415956342, 0.022404267686006132, 0.039489304810642681, -0.069172555941927991, 0.064453930612007271, -0.03568078024136126, 0.029477578218046946, 0.013670321310075631, -0.040086746434879458, -0.16483725729324836, 0.060739714509717116, 0.1342127393151894, 0.02422269183439342, -0.023179439720271901, -0.023938362360883966, 0.00080564472822024918, -0.020188203981491876, 0.035394353296754666, 0.0205064246422616, 0.028993448164401289, -0.15875938903288647, 0.086380176300005287, 0.069612353949308661, -0.0051496283178931873, -0.086212516632916264, -0.11615256372599751, -0.10171915312404266, 0.05044362294149464, -0.010944856179506302, -0.0019939577905011829, -0.082496323737375032, -0.19805282268418445, 0.14503065839704138, 0.10472965706111854, -0.054504100655757171, 0.058558989674775644, 0.02150968078817124, 0.01730546008925736, 0.05479743583896092, 0.081449861658568032, -0.015926761159011912, -0.026645825852455899, -0.29395789604640399, 0.26045433455042083, -0.014750981039322313, 0.013565969503019568, -0.052043696631421672, -0.068507656016080665, 0.026714598423665525, 0.015030040573038209, -0.0036695544345779346, 0.0038325864743167098, -0.029296334816602605, -0.2168604461047042, 0.23218142341105868, -0.00327038976446066, 0.0010937576464049442, 0.022865074396730092, -0.0024710599676689565, 0.027138580199090406, -0.016798852895205371, 0.052896545591113953, 0.0068773632280050567, -0.11534615443720748, -0.20002833023471947, 0.26776687274414374, -0.012990564848598472, 0.014507044952519324, -0.028376794482919257, 0.0061821648519400502, 0.088921914606219496, -0.029268623822226371, 0.023549402065920405, 0.0050119768662514469, -0.10302390187256479, -0.11265110616376864, 0.2362166399750627, -0.023189771813893006, 0.0035722520614683423, -0.034182137066625137, 0.050630393094575593, 0.010945258403000244, -0.0026518946618147438, -0.025155322122281942, 0.028530077090590744, -0.13115618895267522, -0.093256001395012889, 0.16420560614466395, -0.010547265652414012, 0.035550139332521893, -0.020259214475918323, 0.022466567725035011, 0.034170311222605998, 0.11907609035635143, -0.0015743444390024786, -0.064020366156778002, -0.22057027736788293, -0.072309973907480174, 0.30204671935473221, 0.023274069917025395, 0.063584377222264996, 0.042978528220157006, 0.1184620505912367], 
        [0.16667514507181941, -0.061056496077366282, 0.0069211233964510538, 0.017084537322497012, -0.2260817686595176, -0.3734473319351409, 0.079940868263823905, 0.16478474110226196, 0.022649460741459224, 0.05289358066562716, 0.029321578215087005, -0.065686830769126472, -0.017175099236391184, 0.05342642508666981, 0.13196524692583625, -0.038915970355677662, -0.22142105635118151, 0.17018889180755431, 0.037968714516855254, 0.032433038579621432, 0.013114263754535838, -0.0047139766817905979, 0.01449378481921762, 0.016836144088159047, -0.035382521979389493, 0.06459440929029997, -0.16864194241367311, -0.18183649747692435, 0.22011199704153209, 0.017097680726078424, 0.044439120834852616, -0.065744647597146183, 0.1020917702829201, 0.012977428388828996, 0.019775964936306969, -0.020715077614501087, 0.037536099617302823, 0.073188143789734553, -0.2573933108232303, 0.17910460975300116, -0.012201308491933793, -0.012488637353357972, -0.027937934041822002, 0.090839519859215512, 0.056061692281274847, -0.029592134951326149, 0.083797375549624048, 0.026909019608009989, 0.028447256194293238, -0.26724295246437862, 0.17601512398468455, 0.05747403764496381, -0.021754451570897559, -0.016094120395692652, 0.034960605520111765, -0.066136093799398984, -0.086822275816825112, 0.021267627399376515, 0.024913839061514578, 0.083351248045442958, -0.21233918154488879, 0.14528347788592133, 0.052103220110131521, 0.0060526935312730304, 0.0041057956922075783, 0.073742527231735508, -0.063150982285070517, 0.071706513280739251, 0.050276967845660783, 0.059473860357975208, 0.041092776845037343, -0.23158549693983016, 0.039824353302363641, 0.035168096441852537, -0.03932662577032886, -0.046713411712221917, -0.029438846368243326, 0.03037322262500354, 0.010642421674176408, 0.035443098233173931, -0.064897369310492531, -0.032863903246691833, -0.15394029962311223, 0.011777952930909712, 0.17418487412288675, -0.05475758571404693, 0.047924066013688642, 0.054346490005779069, -0.0033548564463232317, 0.023589666170022047, -0.024599944457705122, 0.06065500572988429, 0.13656620662733865, -0.09366338113990888, -0.047444407722275428, 0.062872719444471176, -0.022728230791896249, -0.027266120729298168, 0.12949378554678781, -0.016064969466370635, -0.029023009596784263, -0.055703343306378029, -0.084010725120186397, 0.067582673095362464, -0.021201313484205356, -0.12021659219227125, 0.094859360168578946, -0.023785622470961085, -0.031181057005649077, -0.0045461011994782641, -0.00096878041950868021, 0.075435938022599638, 0.010017282477206416, 0.06897995798959812, 0.077147960801012536, 0.01605850787004124, -0.19045442262141093, -0.010877182945437318, 0.12221413195895285, -0.035115541235648702, 0.061957485103634649], 
        [0.0011017024675275405, -0.10082831174460544, 8.594795150784762e-05, -0.0044220494782738484, -0.096739526280002486, -0.13240523784777558, 0.13984373949584222, -0.0031378754168676498, 0.068399621371189656, 0.041644858137291046, 0.12466035423467051, 0.057468796042489417, 0.073611208985683574, -0.010863604812754085, 0.0048406348200145249, 0.016396206458863971, -0.021671035744779854, 0.044733205419186794, 0.067921565834977882, -0.01587229208239721, -0.055943430884781355, 0.01970238776563854, 0.01861633041967882, -0.0056589566846889511, 0.034037512362465189, 0.034411475082115867, -0.10871009154186473, -0.08095953984145883, 0.067427623282556901, -0.019879897471494754, -0.01366520816807866, 0.035789793103949114, 0.066231396371961834, -0.045917999777744078, -0.00420191665726459, 0.021126802087625032, 0.040187642280355346, -0.036664394872269489, -0.030092902147062638, 0.0088117404767308755, 0.0024160167750989087, -0.038592533464695079, -0.031144322454676222, 0.03504205275969649, -0.018244427580942767, 0.018916000565823501, 0.00082420366538178691, 0.092474565072900916, 0.073297169128542394, -0.024311595897201867, -0.0027452015976400512, 0.067920732187453939, 0.0011865809331642052, -0.02829414542225548, 0.042812086020618187, -0.022452858987935732, 0.02261009594352785, -0.028250777066103218, 0.043262591064003333, 0.092532390695239303, -0.15324339008135635, 0.050211260469539359, 0.013929622339187875, -0.00089781384686685173, -0.063661201005958332, 0.0048485523557203342, 0.078580094123552602, 0.02575794561866239, -0.032352350433290294, 0.028485056134963452, 0.023621395691399441, -0.2117470445371154, 0.10461485137190293, 0.047597936964786855, -0.013272615927845698, -0.060311993172769994, 0.021931281439721451, -0.05466583518135374, 0.024589654496216209, -0.053142641146117948, 0.04992839103128853, -0.024452908798012384, -0.13669941087219498, 0.013882012829174228, 0.1070905994912941, -0.030277288574973339, 0.045488870557272854, 0.021158864845617006, 0.0045504704709340218, 0.05214959922096879, -0.031124914087522559, -0.025892240716889583, 0.051505846702740755, -0.15850714978032798, -0.077434100579077431, 0.14442197585402719, 0.025520694414871425, -0.013359740227537047, -0.032691479720369884, -0.050760755770619531, 0.0067267124662175881, 0.053582968166709294, -0.066091329071098104, 0.028319458261919814, -0.023395468585636847, -0.12189855936069849, 0.1264108145125255, 0.041070402257636952, -0.038345327797452616, -0.0051037835899539882, 0.01115753611454251, -0.025558001982792473, -0.015803280214702852, -0.014570255682172791, 0.058581784915518444, 0.048613151833675504, -0.29657491636724309, -0.067645659352775264, 0.13108882918808282, 0.054569929796482737, 0.062523971903905642], 
        [-0.025232963701757677, 0.022348786079614824, -0.072258840316720419, -0.18573054835716424, 0.061153715684906157, 0.16052559660045873, 0.035735222876137188, 0.032645819538200907, 0.049972870544935558, -0.017744962590501873, 0.12327939069776968, -0.0020676327098313324, 0.01746290767019347, 0.062789463078491509, -0.11704698186369022, -0.065254587170476969, 0.094525133189958851, 0.044950125896693824, -0.028763679134251888, -0.0075590072060936625, -0.018042703509056443, -0.042766926478698966, 0.0064726653302440013, -0.024498528948216539, 0.015095977860562756, 0.011479770091646538, -0.22511989496614118, 0.13749975960271679, 0.042174383146931602, -0.00097973927564777574, 0.0053458653222245162, 0.0066958708608460676, 0.052938783244498341, 0.028662885704672569, 0.0083788264626524778, 0.00039142479042951484, 0.058935919636454462, -0.20560278009245425, 0.079502781298950373, 0.10223896059315847, -0.041137991907932381, 0.027330073389672568, -0.010752121223537789, -0.0022306851331074934, -0.0079242014779485268, -0.0082794956479350576, -0.032085062337155419, 0.086122599207560518, -0.12113263279497796, -0.12790727680874353, 0.13902963426409898, 0.0088539666043742082, -0.035846424270882665, 0.004579108178465921, -0.043586755702451435, -0.026440306229895939, 0.012179387770686292, 0.074041872436307762, 0.01288390088442623, 0.063137802503704196, -0.30013379565775622, 0.19884603307627666, 0.063815797070558927, 0.049734977180621504, -0.059941845556548135, 0.066082316837520416, 0.018259553212376337, 0.017779633684347013, -0.030632372504305949, -0.05294008910372007, 0.12680914791412304, -0.23860332882902754, -0.072937437856311613, 0.12736775458078498, 0.063565918341235095, -0.051172875061062162, 0.0097790501145352954, -0.0043407042674837651, -0.016155615544080057, -0.0091923923303261629, 0.050665742508667524, 0.0060984721656736629, 0.017307742609543222, -0.20367784360158347, 0.12046177714866035, 0.012913438963355811, -0.0092051845719411662, 0.035362756301432471, 0.030747952698754938, -0.0068483304259888619, 0.060769663776634064, -0.024830671275067155, 0.032204825588141653, 0.088512986534959648, -0.20132344254131007, 0.0025484138158970229, 0.140122587765108, 0.019618593851209051, 0.030770253761956967, -0.044844034190508676, 0.010829012004067717, -0.018604574580413091, 0.0048701187231226031, -0.053835622525193277, 0.065655732448266627, -0.087834494458251325, -0.10019900548070505, 0.019098697970462999, 0.032625675487211764, 0.013786208177970036, 0.01459298085632256, -0.02245319975032244, 0.023627062323695644, 0.044567875847249791, 0.051820387537472895, 0.058960832030794469, 0.011808887606369993, -0.24302913455395336, -0.10331035325930389, 0.043122221975443853, 0.044784114116775492], 
        [-0.11131891807709643, -0.14268474406555598, -0.11319512819486531, 0.16616863430344642, 0.21669051126658584, 0.14580497808064175, 0.015659490036423723, 0.081299765772630261, -0.024809345136602795, 0.040210442226760873, 0.1147788050575636, 0.018929993321792474, -0.080897366155457673, -0.05933670525564233, -0.10482248256522532, 0.10573530196882865, 0.063140871798500697, 0.059506144939088096, -0.10685781396759031, 0.034082096511914323, -0.044928786246672847, -0.023391401657096106, -0.021033602025377948, 0.011729129297605986, -0.12518841502550898, -0.24524516894120252, 0.07503634089773896, 0.16915003534917084, -0.01104335485702547, 0.018698016558333488, 0.0089193810606012641, -0.0095742068835864974, 0.074951376080238705, 0.052515621176523086, 0.00076255674614852942, 0.14447253116659836, -0.16116755572117158, -0.29435350805617738, 0.21097730948472182, 0.15322391116769629, -0.031396770107823796, -0.073199499622068412, -0.00058138919552927493, 0.038373648087908357, 0.071661242983008577, -0.02522805699198942, 0.094355619055900272, -0.0055066260275108136, -0.31676942832713584, -0.17017797276453395, 0.20181171910078166, 0.038951035449355131, 0.020699071667054786, 0.0073524959093896058, 0.01925107008541585, 0.027713365493689732, 0.022207504221021385, 0.017801567429584678, 0.1612676210022263, -0.0097926541627393199, -0.39692367057618455, -0.016344797834207933, 0.084334965049200059, 0.12332269298102864, 0.04685154450642956, 0.0026367553827924689, -0.01561848475266879, -0.0094365420154359086, -0.02615768632490699, 0.093091816231290578, 0.015836673962272785, -0.036104175954425388, -0.25194637763515748, 0.066518889227065711, 0.088768723733041136, -0.054177349140414666, 0.11363104423136496, -0.074336096915664576, 0.026411919672457762, -0.0069934713872144005, -0.011837151565905812, 0.20495766925622727, 0.040652574469842911, -0.1095170141673022, -0.19525613842871348, -0.026690291071139877, 0.025635090198280266, 0.084142487180791703, 0.081560517413446651, 0.033899581274340673, -0.04177793659445489, -0.009501675246059646, 0.014146738677450046, -0.0083456640397739645, 0.066156053917280688, -0.13607639700339172, -0.075200076822236159, -0.099487351506951205, 0.097954762781141, -0.068031338341652869, -0.028816943621433999, 0.062116569439491787, -0.056509543958784436, -0.01645775253059964, 0.078178705767746479, -0.011547980097176877, 0.054587296091729326, -0.017563000385479949, -0.072691438517766077, -0.034856075950508381, 0.058573711770738279, -0.060289020490556899, -0.012302959633281041, 0.052155478089966123, 0.075227692092241769, 0.053726915546722931, 0.0021832390619121317, -0.0023449235386490269, 0.069001946478247533, -0.05514982572329348, -0.18138153837504351], 
        [-0.23224131638764922, 0.079034696624463316, 0.20679180641094769, 0.17116975450055194, 0.060393255799023757, 0.070072109804855828, -0.061904660241219982, 0.10747334033766655, 0.014331963987671489, -0.032561864821210422, 0.096136650220496528, -0.11702112011574746, -0.1864804302468564, -0.072635832330671626, 0.12519462388086205, 0.070887202616322975, -0.032713296482814992, -0.014132673438533166, 0.0038161968326955314, 0.065966068281342619, 0.020457399865123169, 0.05133413578390264, -0.001116824372617925, -0.086503852575327167, -0.17856252353561719, -0.024882107163551152, 0.17291742960211148, 0.076636137948616748, 0.095776267371189924, -0.076644083681563224, -0.054109190285893664, -0.037610346895478264, 0.10646735039870757, 0.0051060331651450463, 0.056304468483811307, -0.028154521230155018, -0.31728669213013388, -0.058091370831929535, 0.11556013989779028, 0.065723490886578348, 0.030550971916660702, 0.041747103093391622, -0.069587858250691484, 0.092461263966589977, 0.052299010395004661, -0.010485795012401211, 0.011062345730906517, -0.04525324732355647, -0.23598087205664336, -0.070892557463706443, 0.10680685304416297, 0.11990972610746585, -0.020183291742381704, 0.00057273018272969989, 0.096563026611294442, 0.084394132743400782, 0.0061097222161349135, 0.052438465571678999, 0.012127916344441741, -0.025706403873987399, -0.37425731880779622, -0.12768740978352261, 0.057044219322174475, 0.11342314858398521, 0.089909015291416469, 0.088758601800430922, -0.017367003795174522, 0.058573936936146223, 0.0024241782448618243, 0.081099658324097532, 0.071614519911280788, -0.015636202687439121, -0.21764039015095288, -0.20280985898846876, -0.10017064401745751, 0.076481246330856831, 0.072072476074846584, 0.074831950513515946, -0.071669127112894582, 0.0033343139896645224, -0.020106231127842517, 0.12484552374687989, 0.088741504624313003, 0.01253935252290507, -0.080371651389196677, -0.20667576524399633, -0.042824689058188217, -0.041960654306219244, -0.011319310972225209, 0.0087351053188495856, -0.0073465804795511402, -0.014035434722362766, 0.060980934347515808, 0.0044957219640220231, 0.060136042340486653, 0.12862638541641686, -0.043407117384264018, -0.17199184431209702, -0.12411968467220214, -0.067878366625261699, -0.01454311580267198, 0.01330421418710441, 0.086616156710090195, -0.050869444187172472, 0.05903651637207552, -0.030082478432639181, -0.039150691833121767, -0.013410175971461852, 0.082024132616958054, -0.18429763963038856, 0.043819988293125167, 0.031005210064727645, 0.010111390046324928, -0.0064173858317888854, 0.024542598321298154, 0.0033265330575526358, 0.040210215896558238, 0.10549988851835322, 0.066466013297427518, 0.049201722388277136, -0.093932153614813801], 
        [-0.12203267064152819, -0.036980237066742305, 0.12682937376396922, 0.10063288694137082, 0.082154198268033315, 0.031376504219097656, 0.0761930646076317, 0.029643540312019309, 0.067195157731181732, 0.014606114158926237, 0.21693479369516466, -0.091990999910650448, -0.11495742760629782, -0.057854374414651549, 0.026983308635638359, 0.053703744190506393, -0.0273941556868533, 0.062050781886751671, -0.014064800119151746, -0.030464390345027792, 0.050223229862306498, 0.069522169458366395, -0.047915080066377513, -0.076312738072256109, -0.10542836060878844, -0.069963062747160215, 0.063887809768190862, 0.047703502973526726, 0.049625632114663767, 7.9371105783654361e-07, 0.066938020168000531, 0.022331267930076198, -0.013204459193458515, -0.051208345754393744, 0.017251686675046174, -0.16855866147278023, -0.081718362687205809, -0.051493312235764005, 0.044258122147233556, 0.079860750571469824, 0.040256904905908247, 0.061167900966640459, -0.04445412975620007, 0.076058551537300789, 0.024484533213087259, 0.0237388901616193, 0.022211385002816955, -0.03909556756500325, -0.26993986747191345, -0.13809797457481326, 0.10638240754104332, 0.074164534665666665, 0.1361114507013107, 0.08862011177027157, 0.023942633928693842, 0.05945503505976131, 0.018810531601996444, 0.13332855116668979, 0.019080517712641562, 0.040953668701707469, -0.19369280785037196, -0.33096708018422843, -0.31537163999459777, -0.051011822183710684, 0.10153083596477822, 0.10646364340542763, 0.014630901225096263, -0.0037911814153038514, -0.031174186442994762, 0.12574438878630761, 0.082746608550893844, 0.13910378358879222, 0.015618015934354273, -0.097010031619152184, -0.25736850771835984, -0.23890047875932624, -0.39201416081419432, 0.014631649728319138, -0.0049576516790900346, 0.03224914217266181, 0.01990648283333149, 0.0090030712698045481, 0.026111426002791746, 0.062897867831994483, 0.14638901620146211, 0.10175160175705127, -0.008366542972654184, -0.22694639696488025, 0.016644643336980125, 0.010640427487024477, -0.033902595425888096, -0.058870306001172809, 0.022391466116807472, 0.010861548153134476, 0.028661031141596176, -0.0089732366008385203, 0.052004121536959068, 0.030892998140363448, -0.066298768516542983, -0.045462972141964375, -0.036534075016049508, 0.058255109985203259, -0.090300770932724164, 0.087529180603695578, -0.048367137056150394, -0.021869920641280391, -0.061934612997809474, 0.02284265461094593, 0.087099015316751405, -0.038225524845750966, 0.042582590594014876, 0.046403954163031218, 0.038044057338396199, 0.013279662526628024, -0.024475870996729501, 0.042648427075458788, 0.021205045270171127, 0.02354074407698388, -0.0073299199474954058, 0.0090776722049553393, 0.072704385543697653], 
        [0.076135322944236056, 0.075928742328769658, 0.10248245044059716, 0.12142390869553117, 0.061858857352832766, 0.025464191080837695, 0.048676474818140573, 0.030285797856824295, 0.11128631305542007, 0.19455327377882989, 0.11002956054185524, 0.074606814265492927, 0.013898060531860643, -0.012868505144617515, 0.038119746657903283, 0.0071484624304063438, -0.037389694906732461, 0.027891841345889026, -0.0040180772778207266, 0.051191664743506379, -0.051415059933379359, -0.065947905104447993, -0.077216280637459084, 0.078792274560627332, -0.014940451970767085, -0.042428171172985307, -0.022773622035877988, 0.0095521053133781186, 0.089224973018742798, 0.0026288446459537393, 0.027795289276907741, -0.011245376233293055, 0.0027789702559120602, -0.084646263411087108, 0.1085122984586782, 0.064787488385146461, 0.071774533015530245, 0.101565447736036, 0.13538683839366522, 0.022702180797543253, 0.081382504391220065, 0.10182220145207069, 0.13414599015766171, -0.067254735812403973, -0.25199554524555356, -0.131377327178401, -0.16365674311148973, -0.018740825554245097, -0.062882807469171645, -0.022204060979254633, -0.072308264704348132, -0.060021508605704321, -0.15902262422755242, -0.23762263561888841, -0.27876101597724223, -0.040263587475045666, -0.08015604055016233, -0.054338910081926026, -0.19775317420562621, -0.28232046584273385, -0.23353688528539848, -0.28871468579830523, -0.14101654202670044, -0.1025403206842016, -0.091079191318669123, -7.6021920519903069e-05, 0.084333775651217177, 0.025776875645890322, 0.027110928294315155, 0.12586947033203832, 0.1709457201826477, 0.12107947589739056, 0.23253719852668123, 0.022508442929942168, 0.10869072456768857, 0.1033561446413986, -0.0044697029388135806, -0.019043623385769329, -0.038539230833867344, 0.059623205301912882, -0.028372504860633661, -0.029359754569747713, 0.00087516511679762042, -0.065918072203459618, -0.069356242665201281, 0.023580387356890727, 0.021727207917053997, 0.039570606452870798, -0.029876932333496215, 0.038706340217221941, 0.054322914583595866, -0.04361035086891106, -0.014678116576553712, -0.039396900573428928, 0.028347288864635375, 0.13841137622066219, -0.090660897476471158, 0.036895873473620874, -0.037229162146948817, -0.009894930351075984, -0.0452390438366378, -0.027744940547884053, 0.041940095444971182, 0.010553985420084559, -0.12123151432640322, -0.0087493439495505976, -0.022343273408815235, -0.036722825249752025, -0.074235049496179872, 0.13502817700337175, 0.046152107059304906, -0.00089713083287275286, 0.055904759652944447, 0.072800550242982834, -0.014134363015890009, 0.047445934632441455, 0.085859047433199678, 0.055070485986852061, 0.022278702781022022, 0.064172293392803822, -0.070765699060726217], 
        [0.11799509004720471, 0.078210409621760235, 0.1281616951498617, -0.020597034003169923, 0.014336534229225872, 0.11621450358247642, 0.089056433936686774, 0.054438463796402992, 0.040501447910613234, 0.077088744908712675, -0.1658906017777812, 0.098327915917565289, -0.028103337633236192, -0.02658838870983915, 0.024054753355259639, 0.072814336465874374, -0.012893740245567331, 0.081294224250996139, -0.019638851124383461, -0.059461355471660093, -0.070719091722531727, -0.12759442479018229, 0.02999311492449748, 0.0019697445298409999, 0.026356695570939392, 0.077456177036917817, -0.0065799057399700267, 0.034984205817837566, -0.011141116727752032, 0.037205943512359313, -0.07804833218835576, -0.042937280919520593, -0.12753528913147499, 0.02845913050306173, -0.02514121956008758, 0.032110847590650193, 0.042951761529577637, 0.11294381552310545, 0.02004775184404517, 0.051515900309122342, -0.235725744910211, -0.072308382261543402, -0.019056219840507427, 0.0030321142503065279, 0.096971125196596036, 0.075809718303164492, 0.1171582304881571, 0.10956914475118423, -0.0024781197540262312, -0.06415838742812259, -0.26848100360863303, -0.059754498941204257, 0.061910526180559394, -0.021664296531182625, 0.086110025927143202, 0.053233513020111881, 0.17175441242058409, 0.028047054519386466, -0.085902980821043862, -0.33611410752827631, -0.28144114222203132, -0.0080330325783590784, 0.10513880861366756, -0.016382627034826625, 0.06894681074416012, 0.032997961272869761, -0.25750942110661729, -0.14536580095096197, -0.35542177348703685, -0.31543540234741724, -0.015389034147835323, 0.25815532917511536, 0.089607429737832672, 0.024873996600298487, 0.068810039618355481, 0.034890175702158258, 0.0094402391459942059, -0.33170429456025141, -0.084021507130023668, 0.050999687890954576, 0.11407450625706317, 0.12380980581221895, 0.061541685739852497, 0.024537508065533231, -0.051412691100538532, -0.037969145008949989, -0.083159219869618037, 0.060974023868713867, -0.069682639993999873, 0.013136896914555662, 0.054335436144424709, 0.086375749604332752, 0.025768018275164228, -0.03028474620608318, 0.0046745647931875633, 0.014048250096520054, 0.0039043180440717223, -0.013243528792716869, -0.010234982174629259, -0.034348718626758923, 0.089306699417503188, 0.023672596441143168, -0.074063880914324018, -0.039416266912232933, -0.051467563793051355, 0.0066514091767777561, -0.0056021073234813201, 0.037530284479276185, 0.022917723699947115, -0.028514057580272867, 0.047001295013920974, 0.011663892903344658, 0.031577429128105267, 0.03674321708145567, 0.00016789538350847621, -0.032412649376776737, 0.061176715259990133, -0.014965782274795558, 0.027963582472569012, 0.049596015432228538, 0.017493695904998829], 
        [0.095111827476955541, -0.061598206035035019, -0.027848508902761582, 0.16285091177508479, 0.011485186070697095, 0.088227631418343583, 0.033476841560767329, 0.21311907036597436, 0.12562992528833603, 0.0056585342726571952, -0.19669291509156339, 0.12201627871631479, 0.065003875747784906, -0.064637578476232027, 0.0076011270434201972, -0.014992832356838792, -0.01371412582796748, 0.065189835192035667, 0.060501772887085942, -0.007320488021864191, -0.15837390579360289, -0.11374672007199678, -0.011219765388015224, -0.037241451866588046, -0.003534620740694161, 0.01418414744662963, -0.018804529282363244, 0.0022002993190636394, 0.086304123895880422, 0.050730302973426275, -0.19347784099407583, -0.024336852899701306, -0.022104084039211852, 0.11856239536141804, -0.0040746848315117296, -0.02163636804096198, 0.032834767679033816, 0.080034473148409696, 0.18177097586869298, 0.04019529190670533, -0.27026796515043489, -0.046764731646186594, 0.008852085437052834, -0.0095398107877663063, 0.073838224250254575, 0.0022341455913789526, 0.080946842014086626, 0.064911153319107226, 0.06885287564917604, 0.052927148605433058, -0.41010712091394702, -0.0033883005740702465, -0.076620464606964478, 0.028026719104762239, 0.076992030561192998, 0.13499559219777985, 0.0010835539682531592, -0.0094521558900973468, 0.1189809113716918, -0.10886395857171732, -0.31839062100092569, -0.079536575816365779, 0.088035400227267108, -0.01994821470243107, 0.055031181510797132, 0.017355891747403651, 0.11548823748390151, 0.047318802613544472, 0.0035588736908875526, -0.19090242902977161, -0.16923224535916537, -0.10343904409632039, 0.11611444215342794, 0.030139907826970232, 0.092037927739449271, -0.00052811116545577533, -0.0198996720404131, 0.11041139740159193, -0.11354626622456132, -0.13266289678027732, -0.16827719486229559, -0.036676195585965438, 0.078177366758504091, 0.065049146958536752, 0.061265895750100163, -0.045421314698528795, 0.038673845042327876, 0.026641279640920345, -0.10482185618696178, -0.10700981328292422, -0.065258746439048387, 0.10279723823243007, 0.025140628570866255, 0.078995252659308457, 0.055586249229617551, -0.028236723374775799, -0.0025877363105662674, 0.033127455377752982, -0.028093023704546808, -0.19114920828266518, -0.084372445040405197, 0.032752181200734989, 0.044573421483901268, 0.078569580177818454, -0.076167973158059274, -0.011917584687660975, 0.03886281331675661, -0.044585012472417355, -0.041774790744191534, 0.06654393572162462, -0.20856381862218065, 0.16839377975033309, 0.028096195344995425, 0.02974664466893967, -0.028107306876337092, 0.040206628818593826, -0.0050223327946646058, 0.061683180967305642, 0.11123093181504413, 0.0025290457228258033, -0.02120297614281566], 
        [0.090435635035851059, -0.042297079072951133, 0.079436400340748309, 0.03842552427230031, 0.018479439174666504, 0.15188772712119619, 0.24325152032590197, 0.11801556793669821, -0.080156795814110504, -0.21178228375212024, -0.13218981199435309, 0.01847519834858842, 0.092018443323332436, -0.050722043815425485, -0.068374560672083723, -0.01537540593449041, 0.031479819423878536, 0.087358407307766756, -0.06835423776229127, -0.14664172724239749, -0.00015826019866193447, 0.015682235993107141, 0.051709128927825823, 0.0087470901747511848, -0.082975597424275058, 0.061059290685490167, 0.055712846563533064, 0.11256404620171304, 0.12009580657518015, -0.2412015915622755, -0.014823455006292133, -0.021320510868446968, -0.0064826789690396042, 0.011517249723710349, -0.0029378978150773061, -0.036511890813033382, 0.040278214553535516, 0.0514440140450457, 0.17560605653482164, -0.16559846575808021, -0.17723807338794942, 0.06664090603454581, 0.025443982377752639, 0.01188465218452904, 0.0289513499031155, -0.062269615752451546, 0.0081510081877681634, 0.074139239966066889, 0.15951734948521942, -0.023426085135995006, -0.39782174976422469, -0.10908536196954385, 0.19810719075019201, -0.03969354994135716, 0.074717236518908187, 0.067657462341092572, 0.0023721387419759488, 0.050106233821570277, 0.11669499140233328, 0.10445484529679147, -0.18066291770941748, -0.13732855962266888, 0.12305831238941373, 0.037248666546407946, 0.04039521027170892, -0.013511371889906032, -0.012463530395042041, -0.011253154667815578, 0.057263714594404463, 0.064123734742731392, -0.18290915356692017, -0.28693729905644189, 0.16662290255364237, 0.052133698720201724, -0.034519972646288311, -0.0020692840094172008, 0.067412513930324325, 0.069378551503912617, 0.017341484161215288, 0.11249597819545545, -0.12114447333731211, -0.16394194327719122, 0.042618534271810712, 0.0082442390404487698, 0.032211543301204119, 0.0013431370481797045, 0.059793575679882971, -0.04185352167064698, 0.16141583247142297, 0.025290287768054538, -0.092771950162634342, -0.22159811768357779, -0.017539993864623925, 0.044684688362074843, 0.076526300295055832, 0.056281907644482626, -0.038322569525682852, -0.024136451744282625, -0.063727184521766261, 0.1019524390722753, -0.11143716683774609, -0.13769182869235727, 0.05085564633400147, 0.0118757042451966, 0.075788152179100177, -0.076290068823641047, -0.081411313673654603, 0.072941798976396161, 0.068768484681585834, -0.033997564379039544, -0.16790192551365551, -0.13094257760158287, 0.030092743795544198, -0.020741964391416696, 0.00030251423268644675, 0.088642737579611705, 0.052492146460725884, 0.087007777517176865, 0.024692689071073824, -0.11263451468661019, 0.075663957633193252], 
        [0.10661930608242243, -0.024041018022432886, 0.023732105856747315, 0.012547179712792927, 0.066200152687718561, 0.072880838736859632, 0.14195980975544101, -0.1884630302757157, -0.10001494467301893, -0.030399364707448071, 0.0065084325390564329, 0.035395980550384912, -0.016756476798346576, 0.039963413543780302, -0.032920761282429711, -0.005227900049309453, 0.1455513515779632, -0.045218123785947764, -0.15712918904629083, 0.019388410485656385, 0.069073426062715243, -0.0298852890481313, -0.013668142441217765, 0.03550729334105425, -0.033905353229976301, -0.066398064416859415, 0.069367258226956524, 0.099068467801844279, -0.16176946602990219, -0.049743685317054989, 0.049417327248947623, 0.11584329961758463, -0.0099765335337247824, -0.0058946153093775433, 0.024852267791530103, -0.022953834411929233, 0.03536477637026525, 0.07091098453159729, 0.16506591436250806, -0.20260600332750361, 0.0040822600350435972, -0.020994635237100143, -0.01738045300747007, -0.068169477874611903, -0.016583306399167802, 0.016335356838440979, 0.017414685172079863, -0.065509544776204645, 0.17533271724699692, -0.077797629050437453, -0.16426179882147435, 0.067990824370129876, 0.015164258343913037, 0.0078509177957392234, 0.023952622885856464, -0.022724061899056167, 0.0064689725623074124, -0.0046862624418039511, 0.023956271557396727, 0.17796984486026562, -0.14583559757339518, -0.064279230905094187, 0.0072858891690116556, 0.10176352460866914, -0.053758388167071028, 0.031829796138471395, -0.0069310877889054157, 0.011744209650540821, -0.022880287482633932, 0.061704359435578809, 0.073774321721628233, -0.20953311948246117, 0.022856913389839799, 0.054729377378656588, -0.019111901041743054, -0.030210238863132122, 0.0030313274697504888, 0.015874354673913807, -0.0064522920827583541, -0.029379891777454897, 0.17844565039391092, -0.071104527084354163, -0.12962834428996683, 0.074504436810004751, 0.028226182768918535, 0.028593401178049288, -0.019591476910773509, 0.026274691487893291, 0.049329376791844029, -0.002525771203732069, 0.015184190784585549, 0.079377622440195347, -0.19505648192438618, -0.03458185384929216, 0.03928442530245542, -0.060961853070715478, 0.032104621984227109, 0.0010087208719327459, -0.0029091919090189974, 0.001344468156507149, 0.0050237130033507146, 0.10378546719878355, 0.022547607122337512, -0.11488746863511244, -0.022120532171003134, 0.043655327718427159, 0.0067756961208252711, 0.025228229845891133, -0.019273769704258592, 0.021906840282590274, 0.076111022214773325, 0.017667767612816868, -0.015508848470761019, -0.23798198014252242, -0.10029292828221784, 0.068962427478186386, -0.00958082155355134, 0.071808069871878891, 0.0096924544958174944, 0.0089571169770431072, -0.0082774624735039715], 
        [0.1471154036752462, 0.048703759783120179, 0.038281571450254931, 0.073332082613442248, 0.092603314662736677, -0.069406279440535595, -0.18039118017356837, 0.030461887926973671, -0.076527801539272758, -0.028459829410684742, 0.0039885048607745666, 0.091531066997998373, -0.097047418603899732, -0.021416261913473872, 0.022880799394652915, 0.11630110494121575, -0.11091349044337311, 0.0052601237488336672, -0.0013446292981080382, 0.019772833215237998, -0.010680526542495961, 0.087901717718307917, -0.0062327763337505782, -0.022953022264458001, -0.011871195380737234, 0.0057627067153195322, 0.090589963902581616, -0.032591156196510603, -0.028720174599054245, 0.018764947431906404, 0.034198398065046542, 0.092483125928658885, -0.039035757837943871, 0.046060971646470147, -0.031919717673297834, 0.035975657614667797, -0.021429646453529204, 0.087312129030033464, -0.10752464144662353, 0.00152080949832821, 0.010463878802001378, 0.017720821018342062, -0.05437049272297912, -0.041948832895335277, 0.025352619756942793, -0.033214062148915535, -0.021243138027047942, -0.00088239905902148807, 0.12798500264531565, -0.14587827997097436, 0.0049154556879893313, 0.1154467113814605, 0.02439416473282259, 0.02683709160566132, -0.0070260419087720058, -0.020081222854955234, 0.023704875110253917, 0.022950424614096271, -0.05338528177481898, 0.083134108349852701, -0.19190518676745988, 0.028255792687062964, 0.051622701485504116, 0.026882922200025916, 0.0083776169731257372, -0.0056709911085335123, -0.015187911842930016, -0.052821700067161415, 0.0039064424714551904, 0.0052811518294068188, 0.10527786608533028, -0.15535307659177727, 0.012627301510895916, 0.033272060865199279, -0.016015509511655836, 0.04732339385165741, 0.029676033680461018, 0.06267237670914183, 0.020359709219910163, -0.056328413014882728, 0.062032262935028198, 0.13944415500977614, -0.1628837619018858, -0.062736195828590677, 0.0089073506518793991, -0.0034474543722587785, -0.016188172373634228, -0.058357780371563008, -0.038566049097796054, -0.0077422478015098661, -0.045254853975222942, 0.13886799518652831, 0.084801544603633774, -0.19493114682149953, 0.067962054023332316, -0.039669253652282341, -0.042999032230963616, 0.056922793567282359, 0.021310369562604587, 0.023652100423593919, 0.0053850398495440266, -0.031872155789865561, 0.12124236413591115, -0.096718330401961303, -0.094640869713099041, 0.050053309978650297, -0.04109568378358891, 0.06766934251303211, -0.013020222193800675, -0.017936312558531065, 0.030884587986413262, 0.017940556925031451, 0.12318151667620229, 0.08261243140085138, -0.19694230673329102, -0.084587141943991251, -0.0036587752660823189, 0.046190769885896037, -0.015214414660308498, -0.037796750375678645, -0.037660099586230414], 
        [0.028789729303638767, 0.024918790237205758, 0.046183744885366841, 0.11406524547975325, 0.12089401164677463, -0.33167640134016596, -0.30199214061986152, 0.075505027729564439, 0.015980848677207844, -0.03024616910429527, 0.070777799814993519, 0.021705154508264698, -0.014784416452853898, -0.092797386946284491, 0.073387121329044847, 0.21513353226194643, -0.13135516496728, -0.041009990688083156, 0.0027232866435380892, 0.10443594986053156, 0.019234702313893629, 0.026668393094573431, 0.077454342178145008, 0.037704653988272871, 0.028345891762078392, -0.0099781631348617068, 0.1639247590037968, -0.12998366709084602, -0.16954434602341487, 0.044201694038575996, 0.022535303634435802, -0.080570085581980172, 0.02832273196113292, 0.030852307058754604, -0.057281262906963837, -0.03064229252466788, 0.027439907981706396, 0.19418932496000404, -0.21394127367168303, -0.10822827097568048, 0.078776286858231487, -0.054726484054016263, -0.0018935512700742757, 0.027554055035958841, 0.12724208320232813, -0.05340181008736572, 0.032579369535054831, -0.0053668763896144028, 0.14925943338428535, -0.15555203727220704, 0.0070014801681935442, 0.047596654249176279, 0.15762506351670039, -0.0017752319114590492, -0.078479537238969374, 0.047380596780860498, -0.054017353379027869, -0.010809602185791731, 0.031689669706736825, 0.23862777088364684, -0.17967729863408127, -0.0025414623844454364, -0.0044922745473988529, -0.033450167802196534, 0.07325147963052886, -0.0025312860424687696, 0.047270334273701482, -0.018763729160332636, -0.085707081658790152, 0.037456334474121222, 0.24243173611028618, -0.25408665358619748, 0.043294141064992922, 0.040148143400007677, 0.013087435326473265, -0.019853324596188479, -0.023225826183980121, 0.030177002977477579, 0.030922203127136713, -0.040952858219118968, -0.0059330615062766906, 0.059823934711038376, -0.22840162828405616, 0.053835864895732992, 0.039215482051845246, -0.019168216146914205, 0.036601452638986925, 0.0071216981552001818, 0.0055194916843240016, 0.017118320543367746, -0.010329430802956993, 0.022891605120926584, 0.10730721508339976, -0.081071689415751644, -0.052731168737865868, 0.020938629685354523, 0.027472939746776587, 0.008732138872189002, -0.0119734318888386, 0.029541130454324258, 0.025437531916789852, -0.0032417425087455515, 0.092169001321697072, -0.063484712261834525, -0.084864201819236137, -0.0055455400012650313, 0.047829727088973206, -0.038728523143896021, 0.02165612388923753, -0.048404026188333428, 0.081106144087281604, -0.050252564268459365, 0.062538501508640792, 0.050008949642628864, -0.066834069762764486, -0.22862797363149073, 0.13880779851328123, 0.081956893470613898, -0.036534284594068323, -0.019723956545588499, 0.074252965588473677], 
        [0.080974544767873219, 0.056529870095499507, 0.032547574600199997, 0.10152684966806072, 0.0464353057497012, -0.21467483931903908, -0.20894615765238955, -0.014892577371206056, 0.020894015871834565, -0.0067217043883879002, 0.035252062080693092, -0.0060354856627079095, -0.027461302429899262, 0.010095861403046108, 0.054592365636949441, 0.16828861382181534, -0.17463234553413226, 0.021867928311703422, -0.041396141212343973, 0.019379712333095322, 0.012675043495296218, -0.02769514972624032, -0.041243567743035461, 0.016051533116298963, -0.0010186840048578699, 0.14437795805818579, 0.078407639716172844, -0.21215391984114734, -0.057680895739320961, 0.12664817413140378, -0.12395328524150205, 0.071773066877171471, 0.0075741150072376473, -0.051866325466372237, 0.038444728263650779, -0.11281826148125848, -0.013662478929553454, 0.21924860974778201, -0.14332413200544142, -0.054997300283757516, 0.0029602719156689994, 0.047502977291317666, -0.028485684862829264, 0.020466736113513295, -0.10612328436560343, 0.011155779036764471, 0.013002308851003064, 0.023295819752587626, 0.26377227907343925, -0.25931147876901078, -0.081091456814604682, -0.00039674384915672212, 0.042663298620291695, -0.0029478976003412261, -0.02670641642999412, -0.089310251851631675, -0.0050439093556460951, -0.0055020483002672232, -0.045366799032015917, 0.23013430030607201, -0.090115553552161928, -0.21358662268181244, 0.06901078184379858, 0.01987760740252234, 0.0044608961159714605, 0.029591032895087147, -0.035016870610203282, -0.016930134483468168, -0.028665218589185693, -0.014126514695311079, 0.23223335474778181, 0.020022276028697689, -0.25100707629932978, 0.089307267281698258, -0.0077044707387584482, 0.033183418337549606, 0.0097764251174143058, 0.034273315295213935, 0.020164835552348936, -0.01004293041366619, 0.0084137731647092734, 0.23502650629556968, -0.024429730500986124, -0.16831605537549821, 0.0005290142948826404, -0.023487633169125, 0.096815945866332007, -0.036177879497560572, 0.002670053453748697, 0.0060485344731694285, -0.03294986612777788, -0.029843164527927693, 0.14655979582549006, 0.0353911847412616, -0.20847127037801366, -0.057891906038571958, -0.01027014008034767, 0.076537736942186227, 0.082781522415119449, 0.11258631635960367, -0.016599499535918771, -0.093947583003786694, -0.02515826814708777, 0.13710963679628882, 0.13285152491933369, -0.22309506076529734, -0.12553570046740603, 0.025110108883222501, -0.03021547801359524, -0.011748686689746581, 0.14400425060338853, 0.043163516328968393, 0.08594108251756169, 0.035184741390128088, 0.17622159819914116, 0.19444104428116626, -0.23633459893577083, -0.077389181598155027, 0.014638957467814989, 0.022800332745270047, 0.083545736652882466], 
        [0.12261253014406985, 0.16705127800103603, 0.19069455483447878, 0.064200785381356679, -0.00016272403782892353, -0.065942849362023062, -0.0079351060474115581, -0.057893265858712836, -0.05400622028081925, -0.10458693453007292, -0.054179967940119297, 0.066989678608242287, -0.099219853272594943, 0.062446370884785274, 0.09094500180354774, 0.028277578410574628, -0.047069391853415257, -0.0071510316033549098, -0.050252538655332246, -0.01470682832330765, 0.095479720545435506, -0.11061849427089886, -0.14255959604920565, 0.026858767731697888, -0.1946544063779132, 0.18484819329409546, 0.17890314023634024, 0.15499366437705026, -0.028241535246141571, 0.04479597904441586, -0.058444080996440717, 0.013625007131520706, -0.079692834360266224, -0.11450496688056046, -0.12377645767247314, -0.065906435468448987, -0.15742481688127266, 0.12985425042057541, 0.20266035853202718, 0.038497383031025165, -0.025653639466894002, 0.075725823765211642, -0.022083431516520723, -0.085486667503959793, 0.032080522906880071, -0.16479464568215729, -0.22037943812265476, -0.2229737334363267, -0.38061125130213119, 0.12775872709984104, 0.31739568607954666, -0.015834239969060679, 0.055459428402900815, 0.011929160033288685, 0.024193127246187052, 0.090970615276012703, 0.16123203632279148, 0.0089117801154802584, -0.017294928512088706, -0.35854082366702061, -0.48144436153782677, 0.033786213483589664, 0.1209940431097762, -0.022527387589338276, 0.049459009623695566, -0.029490765269415273, 0.25612944261482823, 0.11469128278773146, 0.12808084965382249, 0.11403331019353928, 0.30506897046132081, -0.19904848217033866, -0.20053793259626246, 0.039641205203277907, -0.04376670404571352, 0.033609985206833295, 0.0098996640661796406, 0.11272141584817373, 0.18547440193507447, 0.1524434424661974, 0.06114521088463705, 0.11826241926353079, 0.12074606754768391, -0.019667238146597897, -0.00048386258516668057, -0.12175688660479972, 0.036172066069231526, -0.11868521523662726, -0.1250203703417119, 0.035904919227186707, 0.017839906841583555, 0.060859449561677506, 0.09635166317000958, -0.049212492625574339, -0.045372607382002661, -0.055897345716822311, -0.0023764214791030455, -0.038382865278286389, 0.0064116033781553214, -0.17558791205718122, 0.0023250224817987636, -0.051727259802616457, -0.057790529308374375, 0.013791061402471952, 0.13644846669520244, -0.010155313334871414, -0.017625717203356758, 0.073652902143451521, 0.00069328545240087552, -0.050008478647772345, -0.31927888126001952, -0.18353351499079812, -0.085538235823548719, -0.073096290012328813, 0.090190178210760405, 0.10660823241153998, 0.090351417639498541, 0.132917195679079, -0.011857357267916729, 0.052935295307996386, 0.043012618340511746], 
        [0.063687026559832702, -0.027474493344771159, 0.04079252412326359, 0.033944293702633618, 0.067493996598322739, -0.084202990537866812, -0.024906649626728283, 0.0091583686944553405, -0.068820170460425684, 0.0031107283830948407, -0.097108585049124174, 0.11878373624948577, 0.03710017079293685, -0.089402710046412398, 0.021829275829537725, 0.05069263318004659, 0.012340313923680318, -0.023685785769386569, -0.026839662252448132, 0.034846261621930025, -0.016166129228329065, -0.027864958300899939, 0.12115538210609175, 0.0037368644565901332, 0.13531841970369599, 0.021592046315438054, 0.018171005730945711, 0.015072771881264005, 0.070400883694442765, 0.0022893852554199817, -0.038531873505113653, 0.073412597254778611, -0.029637114380846583, 0.14796659731395348, 0.12294211400056784, 0.068355321789079659, 0.16846933987145341, 0.09208858358733514, 0.124710416844108, 0.069410300558010035, 0.0028282096799201462, 0.028941147392732833, -0.082405863861783321, -0.099340106662704333, -0.0023105045076858566, -0.044477583601388274, 0.0008809594027263945, -0.085099107788483452, -0.0064586485698500881, -0.044295114180264411, 0.10095939402980549, 0.14859114322412731, 0.14469873810179945, 0.078675636968335211, 0.04110277787821804, -0.185748731574369, -0.17064830498300138, -0.17155221512879462, -0.25171330168462724, -0.27337273571997955, -0.21265235556569007, -0.17172557194975863, 0.027527124955349591, 0.05618012242699108, 0.12158172746105769, 0.079338486628700106, -0.12195189294100098, -0.13969446903752442, -0.026572222761012301, -0.0741704803065521, -0.145127075010832, -0.11500093509170173, -0.18278877520622416, -0.24714583432028586, -0.13747760229803679, -0.068392610369592363, 0.098671592870279712, -0.16740306756901749, 0.075274076124663886, -0.0044961465547186386, 0.13260037497576577, 0.31234055497812679, 0.15517911386484973, 0.066459928203915386, -0.015467888667656748, -0.030267329366836557, -0.056259518407299938, -0.038215914691253711, 0.067128719543084317, 0.12318688834042112, 0.18468566964642463, 0.086525001219784597, 0.095783539484994351, 0.15930761904527679, 0.07562987308980218, 0.11756704875720572, -0.0760161520649867, -0.011817169363246532, -0.051957377094306409, 0.17488796559917713, 0.14148464642191833, 0.086956838317260601, 0.081058475663970134, 0.046958772348784622, 0.04918174254075236, 0.0034109923824553051, 0.015580943744111141, 0.026515084298382431, -0.062878886731464731, -0.056347428448159036, -0.093781274466081921, -0.23964397537244131, -0.13258713878159228, -0.084365859336627824, -0.12790680365138707, -0.070083706938090157, -0.044961907635326953, 0.049251298465303128, 0.072446618696754353, -0.016196819754861112, 0.10029423625804029], 
        [0.022794829328282723, 0.031855402221378282, 0.024367172994907871, -0.088290566246083876, 0.07232262276136471, -0.06292516861381596, -0.0040861461107614544, -7.972988029088246e-05, 0.01396609724411256, -0.025131035729871201, 0.017075722683559433, 0.043144050114759525, -0.077791172190580238, 0.048533511736318036, 0.007217025612539632, -0.035475136878956898, 0.035691767227550089, -0.0053752350421711753, 0.043053703162239151, 0.036425942921316332, 0.026331797944731436, 0.018922402485978082, 0.034424572379380902, -0.043306530520506897, -0.023769315918517941, 0.080993967723216903, 0.0014022744912380036, 0.06800816187289091, 0.095104587086617953, 0.10798396936955548, 0.024411086728309606, 0.043708025161000461, 0.056510394828046859, 0.038012989404389352, -0.016918964127942582, 0.13076340620049531, 0.11446285199173112, 0.21239109093247169, 0.28795590334995447, 0.092687450807731803, 0.096764008832141674, 0.07011596892193131, 0.046944677248436581, -0.028109521724954359, 0.18643956244021581, 0.077870719895705293, 0.11792219460655051, -0.035608267559333939, -0.036648812158749919, -0.13441333664206742, -0.1209205303400708, -0.15624385122841139, -0.17025727483799705, -0.12517931808717464, -0.14934420137275992, 0.15932332483022202, 0.04839021776339017, -0.10847969953324497, -0.12255999835004713, -0.19725754430522846, -0.15715530383375914, -0.21752678931536223, -0.20062628687872636, -0.092267339908223348, -0.020573472312880911, -0.071636670998092289, 0.063397599343820776, -0.10020592169765151, -0.15580361490286621, -0.14943697528943115, -0.11920849551682298, -0.081202276537251969, -0.11695355604037566, -0.0067283708261298564, -0.046837938954313707, -0.0077863170130979195, 0.019980965641957497, -0.121667094665772, -0.11522589823910821, -0.057471776109635317, -0.052229100647856727, -0.046891079021213228, 0.061574055807871869, 0.11811240080682403, 0.17401725345189034, 0.1337150650275799, 0.19272562298101481, 0.13837697707498475, -0.043682489526108231, -0.035940773077983296, 0.011031099888345858, 0.066035108027198322, 0.16273538350576014, 0.1001587158991207, 0.15018677215060725, 0.051560799730643869, 0.058405889573942382, 0.020232732914280432, 0.080342157059325445, -0.066884304721525012, 0.043091772020143498, 0.061075670741261745, 0.043764943962592874, 0.031379229244833627, -0.0054635333665592478, 0.039411450527978564, -0.017169301013184327, -0.027826140912018828, -0.0047148996567287563, 0.0361035243729722, 0.054667230314029543, 0.046239563591323717, -0.045456067930868489, 0.049402252710789213, -0.04766846057913162, -0.014224514341087915, -0.059509471495879943, -0.13173838602104682, -0.010384251552911242, -0.087812211124107614, -0.077603311445163858], 
        [-0.032355994688810757, 0.018326722847476676, 0.017295570021311088, -0.027670634962396815, -0.0076809391049930537, -0.041376685856530981, -0.015061630610395491, -0.043781136658973818, 0.036477149712398793, 0.044228566218286886, 0.18106239449231315, 0.042891343822209826, -0.020853245724294339, -0.024082163468429868, 0.041552139122004575, -0.014678545508214125, -0.040841976375840028, 0.017432021695089089, 0.0070216535002669556, 0.12929994168147696, 0.15511189221305455, 0.24789881463360725, 0.01524433890020907, -0.016082932861742782, -0.051589389728025764, -0.092487374266571665, 0.045744016738876361, 0.057516818919086221, 0.16869815200400168, 0.26354710842333462, 0.13879401206280972, 0.1425191292736655, -0.078455509137512092, 0.0045617718808213525, -0.04996569794639541, 0.080368671629425376, 0.050146780922382769, 0.06747673498101589, 0.13151901964758053, 0.16708907133321474, 0.014140597465528995, -0.095378223856770333, -0.20288372470514504, -0.39934020254115926, 0.018782728033396659, 0.055848444235998176, -0.0052730281141155078, 0.094883628210799084, 0.092662084190120605, 0.026342391088602909, -0.086838950610960156, -0.21345767462167456, -0.282107822115785, -0.14895903217754436, -0.15887716612865338, 0.014524384805330928, 0.064105061659619905, 0.015209021241474052, 0.094836346474780439, 0.056562751972782294, -0.16636322513631874, -0.24132070876596301, -0.25962368835745592, -0.1398205940714011, -0.15531689505376495, 0.011694908155279474, 0.032010611040571693, -0.037560894238744175, 0.066607787477416219, -0.0076642057689953885, -0.04070977708688811, -0.04226030127644731, -0.090011860309571437, 0.069266838681682319, 0.15114898488461287, 0.15845318802936526, 0.15653535363742821, 0.057963227558536959, -0.031603242011597907, -0.0055733045265627945, -0.063345205711261135, 0.014274572871990451, 0.031680599603069681, 0.039820176716201153, 0.093415859365416617, 0.11919257043750534, 0.03989717150118903, 0.1715005214515096, 0.0032916843093048626, 0.0044846669425230717, -0.021098541490893137, 0.025809720767491551, -0.13673281369087914, -1.2468117886521579e-05, 0.045303630981452153, -0.0526550700395952, 0.020909495487494364, 0.084789679870713369, -0.063339110924672634, 0.091376945056866526, 0.07252165751693404, -0.079209926148198551, -0.067293987453879475, -0.043909917127449488, 0.029396455943145994, 0.023947405883684936, 0.017167025821694201, 0.030553476010320116, -0.058621689983054601, -0.0098426856925661194, 0.20196311694537442, -0.023668678155415387, -0.014001946149787309, -0.03728327654318217, -0.023078128502029227, 0.015589706964187003, -0.013168968136987605, -0.031499036112030365, -0.039786236033770211, 0.054516325604152802, -0.040512968956863807], 
        [-0.11874501434881572, -0.082292851061515113, -0.095608167868605196, -0.020577868342219752, -0.051846289507618271, -0.010859373167837721, -0.022716678939708967, 0.12820642967693277, 0.20208152628630544, 0.10326830535107219, 0.19572108975580454, 0.018529266875907807, -0.062343764039584887, 0.036176725353944533, 0.041069933083660609, 0.0079762012687746575, -0.10314299674810966, 0.0064955171797952682, 0.12398900983956046, 0.024168115641601748, 0.030884610087337075, -0.074999137996260248, -0.040399947069967329, -0.026348341528788261, -0.0040063358136547406, -0.098214201253041297, -0.033435982999113351, 0.11941221649994889, 0.25555588605475288, 0.038960204213761458, -0.072604474132352964, -0.080306295039947226, -0.10380646122757918, -0.057320493242450338, 0.015515746045367804, 0.06255592200477092, -0.07382948751156268, 0.092347107622607685, 0.19891060046749282, 0.16973365981683389, -0.044617838703860296, -0.17458925689074178, -0.16855591416735904, -0.12959176095156721, 0.0028653211948725388, 0.039281815318144675, 0.051811040864348151, 0.054229861553504496, 0.13870864137978747, 0.27288253125832607, -0.31438783480893878, -0.43930197285264261, -0.1406383436455399, -0.11423051269906785, 0.04779660456302437, -0.065061505106159614, -0.0042604236376508481, 0.02946332359287078, 0.025104961380266577, 0.14743399932390186, -0.34597564760602995, -0.42017229785052612, 0.035072831557282497, 0.07959646999214702, 0.13322835735966732, 0.13339746737800906, -0.061957613945008899, 0.068920425307499353, -0.038536206573474313, 0.047215262988980017, -0.14334497896799611, -0.21161459673878405, 0.14176441081563174, 0.17098183292990443, 0.14174756095000518, 0.037859045933541086, 0.31085728227189657, -0.02922935514410599, 0.015150100201128183, 0.034324197511492696, -0.011781519634235918, -0.077397115828606117, 0.00082481393952203719, 0.042534961830221429, 0.04985424198595359, 0.13020790077736055, 0.20732411001715473, 0.070041942881345881, -0.037026860217250213, -0.031791667690004716, -0.064806164590905407, -0.08258662171950007, -0.074375301162423885, 0.01385894189294383, 0.15057409353019663, 0.13055028224014828, 0.023193912685637932, -0.079370911864438495, -0.076747220775197508, -0.056515387156161861, 0.070663010357839617, -0.082980693850575146, 0.03859091949287638, 0.03688503261834894, 0.10304253122200434, 0.02858154892479417, -0.11389454646540841, -0.023276097872029958, -0.02020813146390732, -0.14669512203229218, 0.023730566407701478, -0.018262941034164024, 0.11113049123798203, 0.017809780077411436, 0.20203876814616534, 0.050784801616453046, 0.061469567589563318, -0.0075507512091273071, 0.00039041405665547757, -0.14721537985673849, -0.36919673052117485], 
        [-0.11817248565975272, 0.050807995924907354, 0.027086462019090568, -0.058324085983108412, -0.069751886972065691, -0.021026807770255104, -0.0010775384566174273, 0.074350384938426592, -0.0083996536342961781, 0.024897232303854835, 0.087435612841062521, -0.019098985323464851, -0.046097891900699461, -0.039781451834335679, 0.0088894731980628458, 0.0075569224053487344, -0.019310705820979837, 0.055367812483190761, 0.044255697213517686, 0.003269187287821218, -0.010373408718694646, 0.072601121525306539, -0.0081003549893320786, -0.024375359119167946, -0.0051757404707577122, -0.007608303655937336, -0.038607745687823228, 0.092478375023070991, 0.00029773934680776826, 0.041278394763053186, 0.081715888790276012, 0.024739987393328, 0.18485522219427483, -0.025644712781172099, -0.025676231567332224, -0.069747146376060248, 0.054381153884765894, 0.049824898758326436, 0.13026732540299155, 0.17109724133509682, 0.059607917528576915, 0.0898551064946915, 0.095437277162761069, 0.15876422270859231, -0.059133757610202321, 0.090976556591518709, 0.095108813979450674, 0.11556486887071599, 0.17970536904884052, 0.033055045328156785, -0.035525492509829046, -0.10877929753051407, -0.05079396460228644, -0.076391322443933374, -0.056757989672368857, 0.13477312348229739, 0.12869357538617032, 0.13013531388087007, 0.0063887122121179842, -0.08972948672558663, -0.31295031978607873, -0.28325157301095855, -0.22477218093756324, -0.2145675780259611, -0.13307930518541367, -0.26981212419965894, 0.0050165855664531731, -0.080398088607170237, -0.085216248619270157, -0.18399362322745855, -0.23965470437008415, -0.12035412983362095, -0.076983583068044717, -0.018020432830199287, -0.023775391914850265, -0.10766179954942284, -0.16700211823558328, 0.015040770227884616, 0.042510381440078737, -0.1295843290841098, 0.029351080812140877, -0.019785888214935599, 0.12163685368807528, 0.19449321821046042, 0.18157312421218158, 0.13917958348474402, 0.036259259826054727, -0.059330356189887357, -0.053816217365371406, -0.058012192775396779, -0.024991060464911681, -0.039656092354391499, 0.16051410507047068, 0.14621181331244598, 0.076529241884836105, 0.20617689470457351, 0.086129886089688273, 0.23683312856300526, 0.17799588816524972, -0.031568685911075867, -0.011339033584039513, 0.0075929000196447577, 0.036795050434868116, 0.033074275171315504, 0.02413735006868855, 0.025795926857207403, 0.01249666081014379, -0.019552843326395453, 0.052849908133605947, 0.090518035422685661, -0.012948046871117346, 0.077671915299142413, 0.03560950915943991, 0.077328247554565535, -0.037094066672885492, -0.0047151073853557868, -0.059216558245230588, -0.13706040241569367, -0.084997996513450039, -0.2036404817250472, -0.1023980466551825], 
        [0.0032466543865972697, -0.0050619149620753506, -0.021817810555513489, 0.020873615011084853, -0.023531149044787023, 0.03236851492334604, 0.023279668597308872, -0.069079320177640346, 0.028858662573673435, -0.022912200910692751, 0.03504956758463669, 0.021373318115011183, 0.043177163021661899, 0.031000576507821495, -0.022727992508285319, -0.041130337906935252, -0.011956655086753407, -0.0073657698466143146, 0.019513062456004551, 0.05648936597537918, -0.018006917494647098, 0.023594044549755097, -0.060974710958634132, 0.13275136748820646, -0.02028861314235185, 0.093323469753408897, 0.18375935802888299, 0.093307762526131197, 0.017002171822373846, 0.029001128392942721, -0.032620309649792054, -0.077144466336661721, -0.026312985524931123, -0.03637619977745446, 0.030016539993203389, 0.081068448718876446, 0.17134303640361637, 0.1454521161962567, 0.14411586594973091, 0.25089534021606852, 0.1895315775753576, 0.10961959096303461, 0.11868995411865033, 0.097649074161421504, 0.017539178062786528, -0.16076583519696661, -0.08944189051045412, -0.1662700174191715, -0.19945945515698124, -0.12053950329957802, -0.099974797166572635, -0.0030787654511070864, 0.17592486845741467, 0.0094047611238743667, 0.24137587097504254, -0.10616945372175415, -0.041295263909978092, -0.18662857060598367, -0.10128658810243146, -0.15612237408478322, -0.19263459821003462, -0.26517496264532614, -0.21075478738597611, -0.15240183455933287, -0.016383869315923158, 0.10147080642825733, 0.0087661143103210659, 0.033117317571517424, 0.022841544673590577, -0.12277060576748028, -0.10456605790706747, -0.046810877427083952, -0.051309908127680354, -0.12955150951531408, -0.085883187288628787, -0.21065306139257753, 0.067423551686227948, 0.074090258222003588, 0.082147407869472167, 0.095756878907326509, 0.12800788880163314, 0.19242466407747882, -0.010488011809805561, 0.0024629531735309296, -0.014172878937930886, -0.069938838753530824, -0.071937788454647211, -0.07364200527100781, 0.031404273448011791, 0.1105219490341731, 0.082629216504521888, 0.072224220830742203, 0.081941428822504034, 0.14730626716129064, 0.1368836421937018, 0.093927882429139575, 0.026163487559181867, -0.034217252732886977, -0.096253676626479767, 0.052568923694275654, 0.058021118675766356, -0.069486623440566414, 0.10387349833640262, 0.016885436566802817, 0.005752374710489408, -0.033857627300573193, 0.099199719978274481, 0.0027587586225816252, 0.028883082517926831, 0.0077987727191536071, -0.026129748383045506, -0.10092939633783646, -0.059725181550862289, -0.16032203807483622, -0.026295964226010465, -0.081817026646661545, 0.019856334497422835, 0.011592637104098677, 0.033535731395388457, -0.037190296797926556, 0.039208766263747495], 
        [0.15105659815179459, 0.0077705624895111625, 0.040428021684616372, -0.0017942995443031018, -0.041653694509876826, -0.068590774376822525, 0.0062987842177157083, 0.026863472745659034, -0.032303950577093066, -0.019033355915254568, 0.0079979595266923831, 0.27835546979835657, 0.068631274711118018, 0.1003446445291738, 0.096879765477730584, -0.0033597601637389563, 0.054326134689200528, -0.055941674871638272, -0.0054187285410067509, -0.0077552385763832027, 0.0045759439983336231, -0.00017646288706738011, -0.0094759828186700423, 0.20486066918593301, 0.23125707799370063, 0.16313521549416574, 0.098539105674318173, -0.0099257073687919195, 0.053672343529954342, -0.088888704815857006, 0.023933003966042796, 0.012746466899076839, 0.013847645420023147, -0.39203581787528585, -0.21351183585569017, -0.17917201633539981, 0.010686831818043349, 0.16695352916474759, 0.20160459511575174, 0.16448815854770155, 0.011414537180906403, -0.026561248426133832, 0.0072564580788328503, -0.0063508243919336849, -0.16007115781686321, -0.15188987832197204, -0.22445870647203575, -0.21974868512281032, -0.14907696976575383, -0.011673426129634679, 0.10655889056027106, 0.1667289488285415, 0.027289163008064776, -0.0080445463310044318, 0.075809327117707645, 0.02383788693419224, -0.060318784128438871, -0.15808704038753496, -0.15079581692449417, -0.21784799920378062, -0.18411391886373429, -0.034761650797478574, -0.003078110011040372, 0.1443522382170338, 0.098191594014337011, 0.018899511324318399, 0.14330730009269013, 0.13334147887544215, 0.10003033854405316, -0.011990871182064697, -0.081183725373317125, -0.091853226128579088, -0.059061176343404506, -0.03070241061676092, 0.0091317924222779762, 0.030031451106893217, -0.029165609653882929, 0.11124860010301604, 0.10478624646896353, 0.060405900026046816, 0.13088294144967497, 0.094446823325321699, 0.046888440627548239, -0.099894170503190327, 0.00043866828312585926, -0.079159018990778859, -0.03095799592580474, 0.051180956797886826, 0.036532200341151982, -0.026313715866520357, 0.048771540558330301, -0.019626512408325483, 0.041811742473138486, 0.020274853199404738, -0.035311251861491172, -0.035700435347725573, 0.037776391130845591, -0.015390360725990176, 0.10246466374888295, -0.0044949551663046594, 0.0051588081839975541, 0.03834429330297548, 0.052952011747411765, -0.020141415030883712, 0.038911185997862419, -0.025809969050729711, -0.054106671252965456, -0.059080808671793307, -0.019798138018163675, 0.05184924826995934, -0.073763175158423316, -0.038340916613003422, -0.066879624217449418, -0.018985614490330482, 0.048710428169965542, -0.019808728907500892, 0.010561838400676829, -0.024562749419368719, -0.01514121795616151, -0.047958337256937988, 0.21088916658617063], 
        [-0.12519121067655439, -0.11688358418954034, -0.058961154017472692, 0.042235378754734682, 0.027384636957009777, 0.073378477292935396, 0.19970246516712672, 0.18078323729328397, 0.17754089590649072, -0.12635528181833747, 0.083209749590412954, 0.029824111195079443, -0.0015424767491013895, -0.016459376017527724, 0.077533561237047313, 0.00013267738458831377, 0.093750279161917041, -0.044726997300741589, -0.19635306229962388, -0.22782377363617864, 0.1158824654511761, 0.28944469131076977, -0.068772338411748027, 0.010802089827676834, -0.007867632781378895, 0.079851071307127916, 0.21292640866678078, -0.0089784453788348019, -0.068417876998138935, 0.022956354752557615, -0.026211043907313703, 0.057828305945572214, -0.079483020254072362, -0.016171715594615801, 0.062689315224603068, -0.021796237786981598, 0.12691374422028867, -0.04752547764539633, -0.049301283041039312, 0.048206477749446197, -0.2171608705725426, 0.02813017983255572, 0.12406052692394327, -0.086131120950002402, 0.07689460503666104, 0.03813505264063799, 0.011628762315091006, 0.070698493776356452, 0.0084135336178128677, -0.11267273154459259, -0.39754842405378749, 0.07304069354916054, 0.16994373683501546, -0.11001260539983146, -0.24501206201543754, -0.016540271332897986, 0.037588646441523585, 0.12220568704299391, 0.04683975277378849, -0.19361692505980962, -0.50340607287084882, -0.46224605745397018, 0.30127286167836509, 0.3851257612605975, -0.19298521871344812, -0.50882871676217767, 0.057766291481131202, 0.085915688210784893, 0.0025825469644762365, -0.15401989963515647, -0.081066644575465197, 0.13998594331352224, 0.17360289429870265, -0.0082113317756247854, 0.034164433476710707, 0.033688177254881144, -0.15383945741404872, -0.0035717910256200143, 0.011347483637652627, -0.017873166525061147, 0.039146796587724922, 0.1063684799467139, 0.076247636399764285, 0.13995849083497702, -0.12176042704433512, -0.064375482208107571, 0.022871601462242333, 0.20473954746266876, 0.014948129510764279, -0.039363453803276216, 0.024752228243803808, 0.062530143477564123, 0.0078273499345180124, 0.087539876894555071, -0.034542935964575638, 0.058746443283951399, -0.075126285975756629, 0.076597485120775147, 0.19454209279112086, 0.021682122234847927, -0.073488695501302631, -0.058082679101971291, 0.012328447567534092, 0.076038878132540511, -0.036913472724451113, -0.018862970847490845, -0.079316521304031273, 0.016093982880941032, -0.18419160468838913, 0.049226683231961221, -0.061457314990918277, 0.0282830319555805, 0.10422016934925292, 0.018036735639772688, 0.062905112558747867, 0.07205279732777245, 0.012387870117812391, 0.090730029290315317, 0.11439343988109769, 0.10142758766032614, 0.19506458179923916], 
        [-0.037471547940615017, 0.079003059168883338, -0.118094514839233, -0.011575517807246187, -0.047354837158948428, -0.043819905087823359, -0.02204068674980534, -0.015582330906619458, -0.060450140546324756, 0.0056710709178786414, 0.087342199767917988, -0.047484586855564871, 0.055578468629173532, 0.014640579783893624, 0.10885390788005234, 0.072560750440575611, 0.053636006213721381, -0.017555923047039936, 0.042133507853188069, -0.02906136252712694, -0.12501847301134028, -0.017196570903083498, -0.01339795071661689, 0.011501218082141058, 0.027702359090996088, 0.02741155292168642, 0.029974564956617343, 0.073364263125587581, 0.010914273919724583, 0.075409891966110643, 0.13043893685947877, 0.023410994104295653, -0.0048253685633425289, 0.074978432218179375, 0.054355304633943134, 0.04204747510162269, -0.0154640673353326, 0.022630801443203577, -0.063888237541103121, -0.040446308747273431, -0.11272446316765139, -0.077311881416412265, 0.01898064857748586, 0.079484126473140709, 0.042423015302388865, -0.00069403510352408077, -0.069229088452786164, 0.077430303792640126, 0.20473753110391857, 0.28719237966682659, 0.30503589992248753, 0.32550043922428146, 0.14073163480952872, -0.015200746246803488, -0.041860347134460144, 0.17135640555161447, 0.1527355824602927, 0.15944325028772327, -0.046360679758357518, -0.22276635585078641, -0.34374202605941701, -0.38756252285531489, -0.37352669157727963, -0.17546418763106925, 0.024941844858314459, 0.038533485282303062, 0.12621571033694096, -0.29897191326894157, -0.47416602764115157, -0.40533769987763618, -0.044666674782561915, 0.12588265080168398, 0.1850321413968945, 0.074481724923722986, -0.10021514102767744, -0.34731763668724608, -0.099282213883217618, -0.29837506102690192, -0.18662023586706711, 0.035652126252033491, 0.4013035269477947, 0.06080080045364062, -0.020916204012535085, -0.017432090909172804, 0.0064526884627329265, 0.31447123310066399, 0.27814266592693648, -0.042857339346656316, -0.10711074543649843, 0.12304888506893627, 0.34204207221679617, 0.11781479381803128, -0.098207505292465483, -0.22534157766971744, -0.17336955460421499, 0.025185350745410999, -0.11167805937105306, 0.2142012132418766, -0.043950058435965438, -0.023906769270708315, -0.065584638845817445, 0.092040652752376897, -0.035310034547302485, -0.13396895532331693, -0.03899490443982933, -0.12154265439434478, -0.13006356630340574, -0.17041731619250497, 0.11042010979150567, 0.092651247387164362, 0.13111238457685057, 0.058001891637747924, -0.002652110312396515, 0.15722347821642979, 0.066071308703285564, 0.039488088992435756, 0.039274482749949047, 0.19071883885744992, 0.10773181848300134, -0.02812558988695802, 0.05797883312162265], 
        [0.14781185661120058, -0.039386331432373266, -0.022921264342725164, 0.05388189603876585, 0.12598813182555718, 0.028202774466358597, 0.0346074867144123, -0.042381312562632507, 0.03884963956920999, 0.036410085655850757, 0.16289756506012004, 0.089845238615583675, -0.046052810070111194, -0.082095780414563016, -0.22396972511791116, -0.11679212172424258, 0.10053680749504602, -0.0082322488230325598, -0.010907332253094121, -0.029537833982867273, 0.004945131369650824, 0.10219160122974023, 0.18663745104851179, 0.21337195182960642, 0.096928017302127814, 0.082225401499670267, -0.042534134329079154, -0.052259406449906821, -0.020309120595503272, -0.10672463441898887, -0.088221307987328218, -0.15579389025604545, 0.23092722621811365, -0.079955537176635005, -0.13801119251604682, -0.056966288552968501, -0.28523441407005473, -0.0068234259848855387, 0.2637658797263801, 0.035256610529995847, -0.00096948078976237528, -0.13354739530762744, -0.095292234694563882, 0.10809316225785848, -0.22622473692942502, 0.13750964405633209, 0.30588685236073848, 0.47089738278075627, -0.26225597341681434, -0.24291657949567241, 0.22231836629884105, 0.090543741709712147, 0.043301288770093399, -0.055195333115474088, 0.012450074560341884, -0.48338662295767298, -0.41101568836876001, 0.015182853563479719, 0.26867003611558071, -0.18587591997040018, -0.65746047656761675, -0.37080281699249629, 0.26181673556057816, 0.20685619441423742, -0.062913466536091131, -0.0046315163613586535, -0.3460271088384187, -0.057875831473219591, -0.080073663390408306, -0.060732968283770707, -0.063131722240472088, 0.33222972618047136, 0.16004023907285109, 0.084047102099867474, -0.02976989350386039, 0.045421274875539708, 0.034504304163254118, 0.37536242338238812, 0.088935618162099092, 0.18255926007618903, 0.079936172529676358, 0.2352440711079648, 0.11129319261560268, 0.10974139035902221, -0.04722071086520177, -0.11616310797947724, -0.067309805824712979, 0.034599132623224643, 0.23285705965606096, 0.13190349282962149, -0.041749284399034449, -0.18971912136060662, -0.070314124515462983, -0.044339814683120031, -0.052799114165529494, -0.12425748565008495, 0.045487854774525521, -0.13703396222511421, 0.059172195354677021, -0.056679024139974353, -0.074184736695846645, -0.096952474536131261, -0.021836418526120411, -0.065731207012367593, 0.021349416929545006, -0.083419025939874075, 0.052566367769086797, -0.0026602316535740966, 0.03873498024493624, 0.068175817228078084, 0.22646127086716095, 0.082890232397643551, 0.035399054654756332, 0.067320652970741954, 0.14239677197520148, 0.085138769088166116, 0.050369804354669645, 0.0010887532169456537, -0.018280111009442837, -0.017225924618171629, 0.08422037289529935], 
        [0.11800749409978381, 0.048641544731680905, -0.10678911358350332, 0.0052911179909213013, 0.23136181762806476, 0.17221088012028055, 0.17682279225882522, 0.20044631087373868, 0.052122439652192432, -0.1402595079578749, 0.02243868573975058, -0.019828048061208629, -0.1373081753593374, 0.092577186980583981, 0.20995915555570394, -0.16372378150074623, -0.15700734079198975, -0.1736927596916677, -0.058053772103850598, -0.0157237265316914, 0.019398599613700079, -0.049310374137502805, -0.11375225205060403, -0.014247453019732223, 0.070739494942123643, -0.088327713510229194, -0.13682329114661984, -0.078888479596802466, 0.053144758392313945, -0.19437922851131084, -0.0001706889902193115, 0.13424778030432938, 0.0093320725261308857, -0.18143139441084224, 0.12020647648261903, 0.2963908916390815, -0.0090974650834537152, 0.039855885453729201, -0.08463057056034079, 0.036931552840693979, -0.14788894891447979, 0.19686627422843606, 0.40663533420008574, -0.14336283673708961, -0.18437286091816663, -0.0387524786508332, 0.29570661700880807, 0.053688982795111487, -0.19564754353990196, -0.34486385728508229, -0.50121307000769089, -0.40626297518108834, 0.13382493808540968, -0.00028761919063780006, -0.20091903070867112, 0.11021116432324056, -0.18695906308384752, -0.23952005130108939, -0.18820014759183346, -0.020408212645899093, -0.10626227681963624, 0.10776229335456736, 0.19941878614236833, -0.058276572887897449, 0.027521741134965361, 0.18134851852604528, 0.068694879008434961, 0.014109730230775254, 0.019795706580671063, -0.069519445032426547, 0.085998705252793864, 0.25121683554261642, 0.24991886206451533, 0.20675478705920156, 0.093802467043084675, -0.071505683581074439, 0.083956608622508533, 0.042664222469544988, -0.044897975149803877, 0.075633229451364206, 0.18470969085810693, 0.092312097921409986, 0.16477123155033629, 0.067407467708452601, -0.035391492159634129, -0.10051173548067931, -0.14948457456306743, -0.0859115996358253, 0.11899616835413444, 0.022232039948935078, -0.059604180367185379, -0.083714134795981943, -0.12267228192899818, -0.071817553655208671, -0.061364854031334182, -0.037122355027120003, -0.024043277802218023, -0.0077183350586837451, -0.027902500393156213, -0.070228976844589688, 0.067283048218790914, -0.022096929111434786, 0.030068653546629937, 0.016508794156056245, 0.0079910228125650851, 0.053657963888500304, -0.01697467785547141, 0.037888483605591022, -0.10340431444912367, 0.093947011691645294, 0.17568681512805212, 0.053193274463334841, 0.08332828325168111, -0.012241690018234677, 0.11152581385082602, 8.8777513975901723e-05, -0.005979464667969045, 0.079576229035330182, -0.011219166299368227, 0.13062677267175682, 0.13093666750650848], 
        [0.14423093057173975, -0.01008076678423761, 0.0073771044594135079, 0.06526902731825053, 0.055848605823902463, 0.052363879757229073, -0.022518577948855645, -0.0099854054434987405, 0.0074881193579894086, -0.0076370273996572077, 0.095115364997393592, 0.007486862308122141, 0.015230162163870492, 0.040217891425159108, -0.085367149632064321, -0.17282741030837942, 0.011588285357802999, -0.058982003588632453, -0.091214201593042485, -0.05548553721852835, -0.085056179953925282, -0.012889357099271234, 0.082191503484511957, -0.088215541467796518, -0.17609926241410598, 0.020767875260274078, 0.2973162999706101, 0.3447305749860291, 0.35075038554356563, 0.1675765045908931, -0.084317445336159924, -0.087650324477682576, -0.0293005697765467, 0.0082197597979237341, -0.14178517944724803, 0.20163787497778121, 0.30622658040655926, -0.089834272556955141, -0.32991154377532589, -0.23770186950896088, 0.14059485558234217, 0.22935018848257269, -0.06954897481239436, 0.13056609682447454, -0.031497286218108517, 0.0079273791460638954, 0.084811544151839932, -0.29146270301832411, -0.12913123455806388, 0.070966051055694937, -0.089486674726494908, -0.076857196283176318, -0.031866717999322773, -0.094905571386768056, -0.076821230076016489, -0.28837628451753605, 0.087799542000800465, 0.20019432782413554, -0.17096915847133118, 0.015333878953658897, -0.28908252284426406, -0.029526689505982969, -0.31385369627251253, 0.043040218080409316, 0.45576781944785838, -0.1807055900807637, -0.13846940283256665, 0.042622648402573862, 0.27231737835653241, -0.1914801913205901, -0.11016274974475865, -0.1176991482916686, -0.20542229438804735, -0.34623488704400734, 0.23754568531606332, 0.28599972207005381, -0.077962987774282691, 0.034879273993081605, -0.026162450274433972, 0.12712327036253446, 0.14403182667963604, -0.034148887052881882, -0.088550823688096886, -0.027745606072896507, 0.12772199691917124, 0.10001931959841266, -0.18643104606782843, 0.041460676340255576, 0.057714352211809129, -0.083881954200237321, -0.08331277637087868, 0.026147419256119429, 0.057512048083849625, 0.098776858052545713, 0.20838336844764122, 0.081416267386434524, -0.031359090867443505, 0.010864074615252003, 0.054167724377707081, 0.036335766553862711, -0.037734056827963769, -0.058460234722864275, -0.050705505416570866, 0.072100006992938254, 0.077237371527939302, 0.032034189952567169, 0.083688285950466373, -0.018740931617032101, -0.068236920761726133, -0.067252452363989135, 0.12643108826975322, 0.092411361850814722, -0.032832183242141391, 0.10360749350388331, -0.020641674722677181, 0.050396061289050213, 0.014052376131391174, -0.024231363336231871, -0.050093755663369793, 0.02935370249151292, 0.10979499165058046], 
        [0.06063756206193438, 0.01163357669854459, 0.114137229829593, 0.11754589579378544, 0.020855057347248462, 0.10974930449157309, -0.044990292936782972, -0.011032547892272426, -0.053612766250269506, -0.044758197602911942, -0.10039035625686599, 0.13435448459204191, -0.024159164234305225, -0.084524427779703759, -0.091960375514529014, 0.10788802496504861, 0.045998078232354078, 0.055275005037989197, 0.064358819860857688, 0.015789766512200487, 0.020929919215574633, 0.040826832309231398, 0.13163339908596128, 0.059409419123521795, -0.026657113464773563, -0.14316517070653423, -0.105418542401858, 0.073237495897091331, 0.082433610114087633, 0.062596323749943172, -0.0031044464340264921, -0.085840139114289393, -0.052855154813073679, -0.058037038079642167, 0.029721950798359945, 0.092669209363733129, -0.14987389757269964, -0.13353796595923728, 0.050257684298183003, 0.014996004118443262, 0.11313878950895426, 0.052153057368792013, 0.010577754712894294, 0.013768087181216748, -0.23145094612919812, -0.067586869609837341, 0.14187556860642475, 0.21502139869877795, -0.23699602207891432, -0.28070386994651997, 0.02443305911955751, 0.017265628634335395, 0.017657686358856672, 0.026414327638663804, 0.088077975768645664, -0.19378616438963833, -0.33747330456037095, 0.10010384808690605, 0.36813409114715889, -0.03425924318529136, -0.51529004919317145, -0.21455976987161104, -0.029064252143607, 0.029684271548058694, 0.11428024956830421, 0.035997243237144733, -0.31780545305858621, -0.038939002809603523, 0.17082631104569121, -0.01983209806788927, -0.015434962482212933, 0.2106729777023667, -0.062119854775684574, -0.026936094188691473, -0.055531104083698879, -0.025879857930813016, -0.056537020588972059, 0.082251513253328801, 0.13249378757784364, -0.050895123398873254, -0.023068884844874127, -0.0065804143547715382, -0.029028619952673668, 0.16670678797071425, 0.037287239549273613, 0.032006611053345235, 0.022985541868513731, 0.033097970061269799, 0.25106958648152244, 0.055247679841358477, -0.078427286178819333, -0.065179530102563055, 0.001902992764642758, 0.015118472262848806, 0.031629329933778927, 0.074470568205687399, 0.032407934317240886, 0.033762676771467104, -0.055109213717668359, 0.029518107237236926, -0.0055725182709008697, -0.022571921481206444, 0.0049782603577565171, -0.034892861951486748, 0.030152277838361469, -0.046317536194844577, 0.017217424448456212, -0.090595438047663929, 0.010986708242086585, 0.01475361802999256, 0.11880942290428557, -0.018853830715500133, 0.054570000910600755, 0.052880256948674695, 0.083387882797340704, 0.068291238632331608, 0.06359772129360039, 0.051886923283943703, 0.083087116244159473, 0.021602565983420394, -0.059861424749677705], 
        [0.090807144739521728, 0.044777130492487688, -0.006004236596012319, -0.050363433256047141, -0.038872008341752945, -0.12117244583538275, 0.022973279126560026, -0.031712447829596702, 0.038054148427954987, 0.0045987409431256232, -0.035659664256043694, -0.035674765832077376, -0.092990150201568755, -0.039162611712276169, -0.0069043930890978211, 0.0138362499846926, 0.030660708367506589, 0.070549138758469826, 0.029410046912296789, -0.012521892141359542, 0.051323314480405155, -0.0037634551331882926, -0.070013831056655887, 0.010860732256468469, 0.032726783187564529, 0.13748613225137779, 0.058183973556349577, 0.13750969320900669, 0.078720320702839214, 0.10378646515411444, -0.028949114370941081, 0.062081587953289247, -0.036944529962483555, 0.11289672176654392, 0.034425804553726264, 0.044915048986542611, -0.057007183048689347, -0.15438271229617534, -0.082871023728730175, -0.12982282763653841, -0.043611665688003953, 0.065964351753196288, 0.036324136181226305, 0.063713986037557943, 0.021735179394400311, -0.078258563769408679, -0.036956657136625479, 0.13355366389737111, 0.28201274882919508, 0.32487155668793438, 0.33827072272042519, 0.18538129082837551, 0.073223331977013348, 0.019788327920499546, 0.13765137512483783, 0.078068271126673666, 0.085180243301805444, -0.069125794874328461, -0.090878572811101455, -0.22904348013123638, -0.33513853608255195, -0.34107144821645707, -0.35147873150944769, -0.1429837248305727, 0.07534805803134563, 0.14776217747988318, -0.045855701305787699, -0.24152324430590322, -0.21753420627734718, -0.13093602087760289, 0.020511261336832037, 0.097671657751413093, 0.14601331736207362, -0.12506767652167178, -0.37252357673151071, -0.40823904893654289, -0.045905807544792537, -0.1600759086755924, 0.07937818266133348, 0.3143974221346838, 0.19157945898080572, 0.029030655452761761, -0.114833479865943, 0.076726138229785495, 0.30135114571366528, 0.27545746842581786, -0.0068620750320619456, -0.36522476092942752, -0.06701923494448854, 0.20620489038853418, 0.052499913955829466, -0.13265239911713711, -0.078950246082188896, -0.20641980579765501, -0.24381499902372766, -0.086797680638089778, 0.23653031161361043, 0.22019310254213031, -0.036973082188424586, -0.049162482847655051, 0.14625921591989249, 0.14505339243853665, -0.22743035761938601, -0.082066104556589428, -0.12119372823467633, -0.043181682543043637, -0.098016045425190226, 0.029470016170797184, 0.13747267623604109, 0.0062917025392471571, 0.16322306590540175, -0.091363535583626032, 0.073287696619824344, 0.11422898762272718, 0.085210422866565244, 0.15331572095963925, -0.072660538227662871, 0.20466593159451976, 0.026700931142256593, 0.036011074297831958, 0.078827707903718985], 
        [0.18112261990369827, 0.073305524770505379, 0.040735943579691819, -0.030592173175515824, -0.014723051663569992, -0.009717724172896347, 0.12724950542153152, 0.030397078051933549, -0.058889198178995419, -0.026611166982695778, 0.066681046712227979, 0.066608088167588356, -0.071918745225061601, -0.0083165323796249163, -0.017286314033053696, 0.038602764286622113, 0.067083551068678124, -0.070282103290758444, -0.069690686774509569, -0.025274574618584636, -0.11014662057019094, 0.24938498020809974, 0.13937639935994262, -0.057197841279870723, -0.073330994310649739, -0.14479112276604489, 0.052420027937541525, -0.12934942016932524, 0.030685317385975658, 0.061611117116273553, -0.10213214383142413, 0.2239301020176982, 0.11685706457732412, 0.16687464021324355, -0.11110520756446859, -0.17122260866286426, 0.056581869983290053, -0.048939035687679822, 0.15917940910095132, 0.19178174933281159, -0.34144279330828603, -0.00029346936519335232, -0.046900947355914019, -0.19493783020620092, 0.045412349490724202, -0.0095033676128255251, -0.029117126455099909, 0.041409793887313237, 0.23150478397061292, 0.052448688728174223, -0.56727135983775523, 0.3002926921538524, 0.46090762088909437, 0.068318962350056037, -0.37007579263516616, 0.042656412910046834, -0.13943043649625064, 0.11478477562923234, 0.26740569898461908, -0.10448691247946103, -0.66827654091869537, -0.28237532775707574, 0.17754279911040999, 0.17370357234732237, -0.17216489065584101, -0.47505336754415434, 0.054836276830569283, -0.030162397455766779, 0.068492907597162797, 0.14670950434159008, 0.0071731840592088869, 0.29965767091965445, 0.20250028242592366, -0.17784337927349159, -0.11561865754268655, -0.1332395677790339, -0.097221853473992981, -0.028986446755459486, -0.035807336045180493, -0.10615355684023776, -0.13901885393191493, 0.016240710560221847, 0.17310497729481505, 0.19618607123165227, 0.11531910216918494, 0.085863326480380184, 0.16627387139600339, 0.31073734902957373, 0.046358990626833282, -0.0066805547685416106, -0.11949504899391879, 0.049149985727881776, -0.11684899113755934, -0.077621953166553875, -0.15566484457471233, -0.042823410792438815, -0.075958529389046639, -0.047231781924106236, 0.18266592599709178, 0.10710563631894213, -0.031804445585158589, 0.064099712602439879, -0.083339571598682299, 0.088606450058975411, -0.049001943443667206, -0.060791129502278038, -0.011938566068193671, -0.02896633660169206, -0.020442949029082044, 0.030720122959175578, 0.060613751104797636, -0.039897663267117758, 0.063701418129868514, 0.047368750939173282, 0.029398381107522881, 0.10605597723541271, 0.087012599833984572, 0.067143725554758865, -0.017892266631649029, 0.069807565811236316, 0.20793552791413253], 
        [-0.036185256591647091, -0.068423651398025559, 0.033948269018981292, 0.25798065842164275, 0.055754688409832748, 0.14928617791426527, 0.20629310863112724, 0.22367188663579815, -0.046033543143111158, -0.10954993360673064, 0.12202419922148086, 0.033686025185198282, -0.11811717921720266, 0.12833540839950633, -0.12897362866582851, -0.056304284939988458, -0.29473302723096206, -0.025196026459084302, -0.049804206349577773, 0.052953771957786361, -0.067019497571920966, -0.068226576443395942, -0.047831454949617075, 0.026913257256672624, 0.088734110838903008, -0.19263180519366901, -0.011955075780035074, 0.086306410506485354, -0.16802175795413904, -0.083379279329359596, 0.087895961497153119, 0.12511813454172754, -0.12767661265744493, -0.21930070432606474, 0.40484999864474031, 0.2168179404643775, -0.07267430101361208, -0.087649129132667633, -0.11089339548416925, 0.015296021762153431, -0.11229804131529554, 0.29574346278635255, 0.080991374361556789, -0.1694969856716752, -0.097181118387015888, -0.076489518459058936, 0.24095855252989079, -0.24206344311267508, -0.33278560146628966, -0.40823989525531124, -0.16983118669484359, -0.11497220840475923, 0.28957955830284815, 0.028529279547082176, -0.048023491796640019, 0.06300024473077781, -0.030721874577941871, -0.066963046815232144, -0.01101372815939157, 0.075931514278543541, -0.08086212076080368, -0.16771239481709987, 0.10099670337031591, -0.24229068894050565, -0.31554893398183759, 0.037389060449040057, 0.15550442487747781, -0.021450780534793025, 0.078024125916309389, 0.22670078648533437, 0.30001803369505781, 0.24803967528041221, 0.095538681661574226, -0.038034563476046522, -0.028631619824097732, 0.0083028097894310426, 0.096554125387373055, -0.093655781707343108, -0.17003471525346986, -0.046727860698759775, 0.05438730002622244, -0.011590570354357996, 0.19038974433125128, 0.080097088742329736, 0.18123484236756301, 0.11932337787747498, 0.021024215763941437, 0.0092451671870699692, 0.06740553047068025, 0.017941188287962664, -0.040749800063489494, -0.082440526483723894, -0.11871195451512397, -0.13318249702629348, -0.054036326779098989, -0.081001677321437121, -0.026663685971886258, -0.010406736043617935, 0.076209039356496408, 0.011611786985809086, -0.0056684023812064444, -0.030538187745098727, 0.020575247317142609, 0.053927702112941525, 0.047348833795707576, -0.03821865610616923, 0.034336636225753531, -0.00018565997117961364, -0.026356654841611753, 0.080691162917547063, 0.12906802891828614, 0.05459184679453908, 0.056561011261114173, 0.048193611888173539, -0.032352041989720359, 0.015293367697285426, 0.016804531631558026, 0.13319266151582276, 0.0038584083011071468, 0.11727652977520774, 0.10128996888306026], 
        [0.087039001828216278, -0.086030861922398769, 0.02399938271861143, -0.055000802538298317, -0.045275456153332991, 0.02871882797765658, 0.023278548014906846, 0.0072154124696548489, 0.079226988438582377, -0.032632312594033867, 0.15267091964537238, 0.044269487995447235, 0.10051883763832034, -0.11766420459825427, 0.067446412530414279, -0.016434712072576442, 0.030052598489340509, 0.10105556654675149, -0.10170349865733713, -0.066476723006283572, 0.012013167877748929, 0.0062464935422486007, -0.057659973131322387, -0.11952174430584045, -0.014950531682345641, -0.030954419784185765, 0.18711958320008767, 0.21588294444934941, 0.18760853314788856, 0.095822570293348813, -0.040221853955554603, -0.073249810582964661, 0.0042778218861511397, 0.055781737968025463, 0.082192357333136706, -0.012445928409250004, 0.17705102429087519, 0.1158017657021186, -0.24107364819029131, -0.085836786800409015, 0.1500735566893015, 0.2849842667051099, -0.14535341708480665, 0.010094356111924016, 0.095916706708640942, -0.29873458100190536, 0.17874640390204541, -0.22302317330187477, -0.1748799384747195, -0.043712845610052481, -0.11620374099610192, -0.23806617911756578, 0.0043003795719866941, 0.054212231978947381, -0.11567683342313427, -0.29339006649020949, 0.12100456390445283, 0.44189519506953484, -0.15496760773507526, -0.022722335616015554, -0.21405336749991405, -0.020547287844339426, -0.27084401995117324, -0.095044199035620808, 0.28060020656129225, -0.27074453207286275, -0.1368725199810682, 0.17055001589057026, 0.3385971361439663, -0.27109736561922526, -0.35586064666592582, -0.26534732401781719, 0.082943137915921422, -0.35846678240511359, 0.34730776588311096, 0.15494380599014224, -0.10539865152649901, 0.094828052386711173, -0.10941051423376011, 0.019908568726464734, 0.13261552724999176, -0.049724811043381112, -0.10696620165908551, -0.25438708553660488, 0.17440858544741758, 0.106900230981372, -0.077671145816967782, -0.0093718677367089637, 0.11752430326382256, 0.025752119860827101, 0.068028195805426836, 0.109859958346973, 0.19781198384741466, 0.20369617905172333, 0.17359025162546643, 0.16858127865343278, -0.071588287733521772, -0.02785843176203006, 0.026995181216372979, -0.04796739911574098, -0.17448260318173581, -0.096431568764831985, -0.070820859598049485, 0.12975749185900132, 0.10168587218941928, -0.012905483555157513, -0.0072144888762498138, -0.076308659554720201, -0.07477688141721188, 0.049861846430829346, 0.13897204424792844, -0.016419927285720337, 0.087860802033879568, -0.035559429860732017, -0.03426567268440027, -0.041158346357247827, 0.11153373670141298, 0.021064007443562835, 0.066653748395789317, 0.031122571004505259, 0.21873333106656628], 
        [0.024271907098944792, 0.2115259074770901, 0.10968836638996259, 0.059160601041090916, -0.042249507377398132, -0.087479837752595893, -0.010602704832708497, 0.082454879411166984, 0.12207559803506536, 0.17548011074082592, 0.04848664317003136, -0.10566377044967423, 0.0072712864412497608, 0.0048264824945599694, -0.037108321821793577, 0.036969189242625711, 0.05926595272339992, -0.091124279486143517, 0.016031767906761155, -0.026239172447726146, -0.059021935429157561, -0.088672703904945402, -0.07726406615726103, 0.056275133223160842, -0.051047381915993131, 0.023387814606544439, -0.017324327411277735, 0.012251187743591036, 0.02566561133241816, -0.020852848518282376, 0.0066968345396523909, 0.073686269601061574, -0.099902583451108237, -0.12413190403188956, -0.018048937015446576, -0.018586297307219612, -0.044793005705344127, 0.017307608148219817, 0.10244118561809155, 0.00032799800220171399, 0.0064671351799718869, -0.1022459225049749, -0.025294477732110757, -0.034441569418776949, -0.12789282327046789, -0.022149310544806594, 0.014835263850125215, 0.12138287707221934, 0.031882958581233231, 0.032470116515611644, 0.0090956520749568559, -0.063478661603039985, 0.10606577340598457, -0.099169451323734906, -0.16381989457362639, -0.14343340117378295, -0.032182651726264416, -0.058018044565288848, 0.022916145133555329, 0.040150146384349723, 0.10591359904659681, 0.1170336117688416, 0.051143184046494997, 0.024664034757263892, 0.022331370571566023, -0.14794372876832823, -0.046225532247637063, -0.05297556705197623, 0.017633358715772832, -0.083088039795379154, 0.039154465132006294, 0.083558775558834938, 0.074371516444640615, -0.010152289765342187, 0.0052220614930217485, -0.094777308466158713, -0.071076534981956443, -0.019630080815721984, -0.04040811670233907, -0.046652571732075071, -0.012628590876755261, 0.026326307291913001, 0.057107467446696494, 0.091724178404241782, -0.0027241597818778163, -0.15413869342653225, 0.04417172095985869, -0.037480373466733836, -0.05858180541180702, -0.10281951751655544, -0.030064069517148434, -0.030479321832951416, 0.092607838224174358, 0.044944678809903021, 0.045404097144968888, -0.010356704162888877, 0.0060040972999510778, -0.074053150092477205, -0.041776885656914911, -0.00050145365557355964, -0.034990913951661012, -0.036125660846155677, -0.045100434109200879, 0.025861248849615631, -0.053218496064615241, 0.012117104458325631, 0.12779186353261135, -0.16438404194145712, -0.012740091450395306, 0.01918508147926716, 0.084770906418973543, 0.019614329268121566, -0.034807211174255628, -0.0017216001979017959, 0.15755321182059503, 0.005374991982287608, 0.039443870135585729, 0.14282549594886118, -0.047934404701260411, -0.10055944078648103, 0.083257395587425245], 
        [-0.12767186993116422, -0.06241249849097049, -0.094140716145740932, -0.064796146543488364, -0.017809834236761531, -0.069099772207516424, -0.023074608267024246, -0.017483825565269805, -0.066452845435443095, -0.036871983239677726, 0.24167468985862534, -0.043100584664250055, 0.08879797960904616, 0.074578914712187833, 0.041306113766767155, 0.04109954163943659, 0.054754800348057686, 0.084086640696184295, -0.0097247769253423731, -0.049452947316442196, -0.081132742094774932, 0.064802809772454922, 0.05833403551933676, 0.048858263974498307, 0.0030690275504097336, -0.037721688147944021, 0.054194193438541857, 0.0081353567184947462, 0.012381719155275236, -0.008132915823203319, -0.053456058684966092, -0.091653069394634301, 0.064630353359554749, -0.0018237773961607869, 0.079983168612036179, -0.085168321622783483, 0.078833820035233801, -0.036841407005709259, 0.14405274156018966, 0.015136780025423867, -0.15091802612252794, -0.03598558709040784, 0.070900917613708564, 0.0031644970002940084, 0.012721805049422611, 0.017055461026181423, 0.035740435535686108, 0.020664246268072436, 0.28800157393241543, -0.043946476897746549, -0.069904503860334685, -0.028875975086598206, 0.013241447478979717, -0.093932780131541327, 0.0073548190708109971, 0.021222759365131662, 0.088674320104961624, 0.15572293451123756, 0.18553868377788824, 0.051415801134578276, -0.30813751116397192, -0.15349895484431902, 0.01561395969351688, 0.033258092794341457, 0.0072740466714379393, 0.068545921699466134, 0.15637538018177105, 0.027911256742741787, 0.1847624277661041, 0.017476811293658551, -0.32882514199767582, -0.27338241826081056, -0.08244213190925273, 0.040346052358642762, -0.010354560475994028, 0.048333017143236193, 0.10853011009473441, 0.20222782945874304, 0.060163816193484057, -0.016735356900245406, -0.16834359646244612, -0.29914164075483063, 0.034354440985680856, 0.045517620346114396, 0.020287847648788881, 5.4206367187566162e-05, 0.055521485631890424, 0.078561317020316615, 0.16849991072472859, -0.070184288770934952, -0.079488584515101129, -0.29650023726543373, 0.10263152418119534, 0.11173763966050175, 0.13931259707716614, 0.026570560269986006, 0.081658242149475119, 0.081827919547926536, 0.083098416955329532, 0.11143074354409321, -0.13932942872613946, -0.22917697770142686, -0.064351927083360766, 0.16181167668638935, 0.25167259170475459, 0.042480647223290487, 0.088318184963021157, 0.10703227267716384, 0.097667451839827321, 0.24656917917661206, 0.00077543877160522051, -0.20364545582535332, -0.12891190757060239, 0.074371886138294263, 0.25015791541828036, -0.0027411825679765148, -0.091129709053736851, -0.23136145870314523, -0.30385031086279557, -0.14845722077749013, -0.10313261555912184], 
        [0.0047305556866473752, -0.025050870591785984, -0.005842007282679279, 0.023076556888947108, -0.0021831092635067884, 0.093205071661306538, 0.16891912625347902, 0.13474245274119315, -0.019108929587973292, -0.10105317234996111, 0.062619436337983753, 0.016839567168991848, 0.011719509323776495, -0.0013487517864658599, 0.038407227731668533, 0.054230563051407069, 0.20955349223966924, 0.051310567307636279, -0.17892491374001546, -0.15156726115951782, -0.10802521892872952, 0.021081696304648248, 0.050526595868324198, 0.037028535648191252, 0.084085596639643281, 0.097194453007745693, 0.11629929727819752, 0.10291870790396596, -0.16562571881514881, -0.29210660437891028, -0.054202915411147468, -0.025850956821510424, 0.13697807226452141, -0.071432726430219529, 0.10357501123134705, -0.058266512397853069, 0.041898607209367007, 0.12303154344508641, -0.1285936576462311, -0.32801177977089907, -0.028641152078696178, 0.13915118347077776, 0.070612445915567146, 0.17863196007696969, 0.036740485328499439, 0.082604223960309545, 0.0015218003492134188, 0.093695825356748572, -0.11859178530895662, -0.24264276329284795, -0.17081519888982888, 0.31937266012049381, 0.10806272202525118, -0.025075843766076897, 0.28906166338986189, 0.16912014921604904, -0.005992530361836397, 0.11216887671301161, -0.1176651180296165, -0.05510479012461407, -0.35074938302019909, 0.075521671212450681, 0.29101950812834954, 0.032924045727232419, 0.073924910009075834, 0.13285512889163054, 0.1103248869067967, 0.017465838707485977, -0.0088770703779607191, -0.12337468108094925, -0.026449945142423825, -0.032574433800492478, -0.17411766159108377, 0.27114933838313676, 0.1301898019063164, -0.072333049559248908, -0.22304228227998185, -0.0049242594509487925, 0.062008119511538555, -0.054842880821889942, -0.077836691900670815, 0.062096463032945602, 0.21462918302865225, -0.09288225705487943, -0.28272760465120711, -0.21340003804680172, -0.17286126694845591, -0.23320368259912649, 0.10997606955733633, -0.0075161519634147494, -0.11006988886634309, -0.0034270246972780347, 0.078591067637549195, 0.1034985859689351, 0.25431078837659582, -0.15926510728994611, -0.27033600479296438, -0.10635029202050295, 0.048934737872389451, -0.021263028799828415, -0.12238693572764943, 0.0070054754811662637, -0.04236502584618259, 0.067623405016993571, -0.048466809027905976, 0.15102700530288016, 0.2213293088726995, 0.039738160929680112, -0.084479657158357022, 0.051462208774941877, -7.7551610484782874e-07, -0.0097437119571726627, -0.011728655305820936, 0.091254840741111343, 0.030319653452282984, -0.0098683560365388154, -0.004386704329111514, -0.063744543491559419, 0.18971937116088505, 0.08390672246062883, 0.081622381542222025], 
        [0.35396637364646399, 0.22349346524339189, 0.057983505942766994, -0.17547583945845743, -0.28193274673617186, -0.03504651024167714, -0.061419133419918656, 0.073064245338727629, 0.061645400882380796, 0.077309357575596288, 0.17389344512954749, 0.092584703746148855, -0.19128325987736688, -0.21873404610448355, -0.15487049984698836, 0.14901919885041942, 0.20523341842652873, 0.089397794393503149, 0.029360736601431098, 0.18968274233971363, 0.069481373869200808, 0.22547823381719437, 0.093546279977833852, -0.13281477240705325, -0.17716124650576809, -0.13345922159593621, 0.26005342174676893, 0.18501277795048918, 0.053589401248721524, -0.047950155872760955, -0.068453658862863989, 0.090671100822677791, 0.11835517359698741, 0.067373868734555004, -0.079589464966329709, 0.00040370973759143447, -0.18012258798893063, 0.090180248658778828, 0.17515551139257118, 0.066704136479836085, -0.32348954157841836, -0.43601738248961186, -0.1534376785143956, 0.078031085272144002, 0.0026002087661166073, -0.0068308168925726304, 0.25009089531454276, 0.086593094914715368, -0.29449998435488312, -0.28057849042944571, -0.21672085891086823, 0.0075953856677573595, -0.057357345275004787, 0.050785649925778303, -0.13227728339293254, 0.063816280146555493, -0.024929518821545885, 0.10319690016698474, 0.27361857287431979, 0.10838211070562667, -0.10088643508412568, -0.36636108447635718, -0.09977069874425773, 0.16157118049598923, 0.055579136554848696, -0.12792118168652652, -0.097782153150597462, 0.038950029262396463, -0.011346882847028943, -0.0057840540928373249, 0.16160380601420921, 0.2273189551175043, 0.17202324199924374, 0.11473390762833699, -0.025009740014433152, -0.012532965249099831, -0.1828653485672124, 0.0058619984820548476, 0.087637062619453948, -0.037284740577833916, -0.02890657791152753, -0.012640604713656682, 0.029752428424497962, 0.023715793388017523, 0.018978087051175017, -0.06887159345950368, 0.062344085837286789, -0.029720895993875521, -0.027411765498387287, 0.09285676183975064, -0.017030576469534799, -0.04056883608692545, 0.028206942400903268, -0.066991014330880186, 0.018045780660311594, 0.027421414987953724, 0.026028854880743246, -0.012256884841293818, 0.071946006217973257, 0.13443066125142392, -0.055826414183730286, 0.029494113298897784, 0.067669224917485588, -0.096083771061904272, 0.029156671668710249, -0.0005704450156028551, -0.1012677530478366, -0.024999495171495589, 0.11149857559031927, 0.068080180726917794, -0.0045362338010440234, -0.029235465914513481, -0.10839343595243112, -0.030880965310150249, -0.021535888254581387, 0.03491673509206554, -0.055572778438482448, 0.14692935465907733, 0.057092970001380278, 0.070053770867175985, 0.092829523250909013], 
        [0.090301552796241635, -0.032233505100053642, 0.086011434142149595, 0.057656041238979189, 0.085001738116853548, -0.018556863703405688, 0.10987613215108859, 0.15413524848686627, 0.039385960963009475, 0.047346588747911561, 0.13260893050724268, 0.17209307394684362, 0.087976535623989646, 0.10797764580249691, 0.063004634660501796, -0.025038437509689246, 0.0015666115477200454, 0.04229801081355139, -0.010856979351061558, 0.038565031477648642, 0.091150434541133613, 0.070429356807998139, -0.33965440443849049, -0.2162661542877142, -0.079793049304100055, 0.052481904095551563, 0.1173724758043013, 0.1235642779570921, 0.14985928358577055, 0.15132449797129932, -0.02085384010086927, -0.27884211234458556, -0.36994374970749644, -0.23348038589121675, -0.35031284933769036, -0.21235792854120503, -0.009620330055204282, 0.168787422376413, 0.10884138052914208, 0.19509683780071668, -0.022160352730551752, -0.13795256421389535, -0.38229992177549788, -0.15708260361782242, 0.24650430788233268, 0.21040788017836443, 0.0038881876095126638, -0.15092402578388575, -0.14972725998264072, -0.27657824988539942, -0.13642930996703762, -0.20644056003736766, -0.10322436864055039, 0.20311966005105042, 0.24971877621575894, 0.098784307030971588, 0.050021919690342045, 0.11216084960540927, 0.0082124981118818358, -0.15895814488393667, -0.24966006782360367, -0.22420253854921096, -0.081867096459771707, 0.16097051245293995, 0.13084583517748466, 0.089777023623677607, 0.0095536365062260098, -0.045308319112909445, -0.023384874480698578, 0.057270281510571203, 0.11323262469471058, 0.14403681369736615, 0.076514156970479155, 0.16610902479691686, 0.0012913967538901033, -0.061224715322185846, 0.023338315929245221, 0.046302661766759359, 0.046502337732860347, 0.053080092678231772, -0.022080323199307, -0.016463338605887348, -0.024589895117440461, 0.036155104538384816, 0.016852672260662831, 0.03835086922298872, -0.031623293130520203, -0.015008982063713011, -0.0025600166682885062, -0.044171433583490446, 0.020136310828580251, 0.03892295204420082, 0.023164046669806176, 0.018929516041055958, 0.016294884187040823, -0.026449976012229093, -0.031755575007436365, 0.037952166059081735, 0.047830269361228368, 0.039080927021283712, 0.01265262678231073, 0.019181657421850795, 0.052408264758088366, 0.067771582431651697, 0.071083943252673878, -0.036646443840120682, 0.13604484537303868, 0.010094694913875435, 0.020674151088393357, 0.050958350828004075, -0.017289306861633491, -0.021563726054119672, -0.011484727923504814, -0.076476788674643414, 0.0025912469716748779, -0.035059742648288747, 0.022443138066393878, -0.022650773632337605, -0.01342746115044742, -0.084684063476957949, -0.027860149727744976], 
        [0.22047100243692846, 0.13488498444135597, -0.0045313544299433878, -0.027832268966114612, 0.0031927903565839161, -0.11096409714434197, -0.14950903865889092, -0.26496526299411616, -0.004669726241513586, 0.18622994506205637, 0.43026644909049377, 0.083650446683214003, 0.057112586332003418, 0.14220244940637913, 0.1016853991938502, 0.097731276097744971, 0.2161248251313766, 0.15446657647109191, -0.13859854879935934, -0.29659395784427101, -0.17497364047276279, 0.19817698639992809, 0.16783396706831674, 0.035357281142304853, -0.028902513964357626, -0.021290874734355772, 0.087221013119957516, 0.16958557489322851, 0.29274282835495519, -0.061146597980816189, -0.15119828846582967, -0.14884448122495453, -0.039189658439811349, 0.04540786676769229, -0.078471457860983126, -0.27300141965542785, -0.38645698179771798, -0.059759522056491488, 0.17695994497522133, 0.15889943771092974, -0.090045267182307334, -0.0058036165937682405, -0.029934384123982583, 0.053751431227512886, 0.037133238140849054, 0.040634697159956309, -0.048019970488356739, -0.21069772609168491, -0.14410169096947742, -0.1866709303028477, -0.28265061246537715, -0.00363691950510249, 0.22240739851855151, 0.039353302240806409, -0.0086785807805936782, -0.15037741713755109, -0.012859139058527952, 0.1563515063208134, 0.042299197355116808, -0.29267625263739372, -0.40523406706284226, 0.096518104499962884, 0.2315533468508727, 0.135427422332347, 0.01229163523628965, -0.052368935922538475, -0.13532074699031243, -0.033103483521052836, 0.073327802260493347, 0.044657022603828728, 0.086151403532568324, 0.27385346109454989, 0.16267484580953551, 0.061525738630854601, -0.019745008995468723, 0.10503228658291718, -0.019420795585633283, -0.10476767983876313, -0.0051748307516162606, -0.06961208659767662, 0.013174971860819291, 0.080847233272621694, 0.064601373562742065, -0.021748261542462316, -0.0094288809818305584, -0.016281819632491139, -0.036344465904989187, 0.030459415820729141, 0.056433611785583565, 0.11018103278275186, -0.043666018041548925, -0.0042555610080999562, -0.073124175104948314, 0.029156650518305273, -0.045782313305331397, -0.018177965266959403, -0.026033702937208858, 0.062742395087324265, 0.057057268610088474, 0.11269084904432485, -0.014280509829636322, 0.066092093382691647, -0.026887244247685523, 0.015276292205476869, 0.0076592093566998989, -0.048902893444263441, -0.10791896457597597, 0.093210147136255278, 0.028852996778161395, 0.032763059790276036, -0.01149082145704293, 0.17616247675226981, 0.10570157158224326, 0.021852869595400226, -0.0058603280864050755, 0.0052495755756189894, 0.020608001100407239, 0.026462048552561179, -0.082618285821472695, -0.079352185250698343, -0.012264971540938308], 
        [0.024463212331441789, -0.027351907989107187, -0.0232645712975229, 0.11579335581687163, 0.12541294100753281, 0.071655620396774033, 0.059075996322128593, -0.021125383858022619, -0.052190274486374033, -0.0033401470291263557, -0.0084537171130643907, 0.080912403859005846, -0.057403073303803696, -0.1672123397226157, -0.15800496262021979, 0.063753554033199628, 0.195605998224537, 0.071413940170310636, 0.11891901474904588, 0.037161100558367188, 0.077086909312383337, 0.03586257381477892, 0.13139726047159417, -0.11150130163799671, -0.040614316851042415, -0.26027911447712615, -0.1892555532237831, 0.066082525575113987, 0.13273683807010106, 0.034848598443093043, 0.019787968851060656, 0.014094611768949439, 0.062232334317776306, 0.14344093791872772, 0.042856056841363191, 0.10733309533450026, 0.0098223854071513642, -0.23833993172951007, -0.21248877298655605, 0.084273584887845615, 0.0088423427141846866, 0.032948207740492258, 0.071733972455376521, 0.0063216999920338857, 0.19400277202336147, 0.014862104507331025, 0.10869294352091964, 0.19642768165098223, 0.010298200186124436, -0.29226294005774311, -0.080019152716796188, -0.013688342983296166, 0.11310866378660053, 0.012927749370945735, 0.15630089388412413, 0.25797164469348988, 0.0068688176426959513, 0.15135988266283087, 0.20516522088286016, 0.22377486701123539, -0.37618706807030639, -0.13386204003429708, -0.020440964154418019, -0.013775408344473918, 0.040573335802585292, 0.055189437367301808, -0.12708652754184502, -0.058209551446079658, -0.0084420051400804774, 0.17522715535241881, 0.033370120570514139, -0.18112622842082776, 0.034219233108481489, -0.11090094662237482, -0.14629941730977009, -0.0069698882479145852, 0.094796259830696034, -0.23704721824065272, -0.15881064516551835, -0.22841097862649351, -0.054433255322752165, -0.1747399426720595, 0.067643525175629673, 0.085915102193942036, 0.063463884214538815, -0.020900619067225519, -0.038395072191063258, 0.071985712612591041, -0.052570940540983442, -0.09266739122762524, -0.13826762537196235, -0.2490025436972389, 0.047882934688813134, 0.31223581965614494, 0.088266033197671831, -0.062809904286240392, 0.034915131736476576, -0.069708063347414362, -0.0018865257473194841, 0.098095420033629588, -0.05581304445284347, -0.060679329007625814, 0.056061870616646428, 0.17983405258220592, 0.074313751222269048, -0.027044632224345715, -0.00044358577837397273, -0.067457849836666001, -0.045453145630404389, 0.042968907664273942, 0.079381122903214502, 0.058880837077551956, 0.16904284405336217, 0.010963007005239452, 0.042321454350631033, -0.071452129585915999, 0.043645640277912456, 0.077058380034888352, 0.080223556633121973, -0.017561401109477071, -0.044481960782109489], 
        [0.084549471065337153, 0.014073183835550993, -0.1230740160197884, -0.061069283663190171, 0.030869726497065195, -0.093121154654422861, -0.025168085495502299, 0.015403998680830158, -0.056965654755122053, -0.1083328369385506, -0.16715071572866108, 0.12222148379971674, 0.013801001029832352, -0.10225459810121829, 0.0023687253436320416, 0.087394156533916814, 0.049218002428967747, 0.029333823960360647, -0.00088026105741263738, 0.11339493779706229, 0.079529564235923347, 0.064893491794769623, 0.076669307484134988, -0.063082264841880814, 0.037023338894633273, -0.059661049037454804, 0.016600380137564735, 0.091314257319891151, -0.011485508114042087, -0.099932453619522549, 0.065159532762354602, -0.037572072667034676, 0.014463355503503431, 0.067621978582367848, 0.002545821510838972, 0.015802700036307044, -0.10993602991728399, -0.069419149357140775, 0.021295475983666365, 0.060596105301526815, 0.026423669980028666, 0.0099005578969671576, 0.065389743283916738, 0.043327597311754604, 0.0095510727918731442, -0.076474755187026844, -0.034130568923233656, -0.075098926490430609, -0.049786970498281125, -0.0042179442640507409, 0.20027598699372212, -0.001573509922832908, 0.11546201651339859, -0.0078019181260196996, 0.047540267194441585, 0.0074073899524036285, -0.0035661452397871829, 0.050505679244823312, 0.075847133121496879, -0.14425580282111874, -0.24270846769727125, -0.046072578225007529, 0.24352730974674286, 0.10854500954947886, 0.021318739646681309, 0.18208436906265801, 0.070465106497684504, 0.030956011752212256, 0.021330978755012248, 0.016480979771810872, 0.0086198233570560084, -0.2974229047198671, -0.41813209224239584, -0.16138204950131452, 0.14572029672416026, 0.1694280555459074, 0.15422865108745415, 0.11272693480731671, 0.046495243397517025, -0.023984750652771926, 0.12619529270753593, 0.029740806671949657, -0.012887870344092549, -0.11865448348338473, -0.25933005916694418, -0.10806327708697712, 0.041596362223892985, 0.18022097944719229, 0.10169601556475943, 0.018289098449946008, 0.13183884426091172, -0.0044659810184938323, 0.052209042897218866, 0.17237101496311741, 0.14892400045574139, -0.11529855402495276, -0.29240160552568695, -0.13273718724417694, 0.14348887171904712, 0.12546368827384355, 0.11969887802419291, 0.0966060351971295, 0.083929200710457522, 0.24096145794638008, 0.18159138797074309, 0.21525720611281124, 0.094817137460618234, -0.17303248008130043, -0.16750824599204639, 0.053188636818327979, -0.014842848833645155, -0.13262816340908251, -0.22760143827483528, -0.2847413352046097, -0.26749569041165883, -0.11356293770181579, 0.12871811981161485, 0.20940394327208089, 0.038067867730537372, -0.18388869167744798, -0.098721772725600787], 
        [-0.2933214566389058, -0.076673570165451121, -0.030749933623699748, 0.12027682321697916, 0.12710910454233743, 0.051896661997998111, 0.13913969924673966, 0.11540205050551869, -0.06812516368464866, -0.0090238207290792988, -0.2910170972813963, -0.061268943436541726, -0.054506350086854553, 0.051033716593179984, 0.012541368369093815, -0.0064693249273340206, 0.017938091969742803, -0.054229542502671674, 0.011335519373694994, -0.025653575674649303, 0.048300304626844079, -0.11406149945577017, -0.024236484184631396, 0.097939513655933591, -0.043137424355738627, -0.070786255514511884, -0.068496593636333397, 0.096857543753862019, -0.061432181096106472, -0.038063832392768171, 0.057071174742847973, -0.035894598788348775, 0.015329272078617107, 0.056504250005295659, -0.01033577367928705, 0.027053972547184557, -0.034952760442069394, -0.012868480551019405, 0.076342833435914359, 0.047322298319982879, -0.037462598161052602, -0.0093979451424250349, -0.014027283741116559, 0.064562173772655232, 0.053721717716616442, -0.067590362010537211, 0.013910951636928501, -0.016445194379612716, -0.019461686721338484, 0.010439817092615947, 0.09941813341186459, -0.092003058246228286, -0.018110229860505461, -0.069116492139218416, 0.090085270093186898, 0.054159665897273314, -0.0018642885725487952, 0.0040597588270554694, -0.085946011876088801, 0.1086179140161275, 0.027099949435567414, 0.09914159471687442, 0.00066682087757463648, -0.057660689819417535, 0.024056864968152455, 0.068221400186677966, 0.03672191197686131, -0.0013717096205560289, -0.028205736414335034, -0.045759999314944469, 0.053361593077059094, 0.052631114994282018, 0.0098103929417969124, -0.012203636403062709, -0.16438519522356373, -0.021001549026839584, 0.10556807205560682, 0.13827298919396377, -0.0070213145166122017, -0.16276133871590864, -0.18906392185671284, 0.059904133889352951, 0.10225970117457966, 0.074039764882703321, 0.0042851859251910318, -0.1845936659626026, -0.069683794916369668, 0.14111364483842084, 0.12749376377877644, -0.10699417534257408, -0.058972794911818865, -0.027184342145305414, 0.092294147272745874, 0.042730772598910421, 0.029013756855529385, 0.091552924634042257, -0.075056709683407635, -0.13842728606415003, 0.004980535912558804, 0.0097376951913064926, -0.17762638306662676, -0.053055611222672334, 0.0051212513850458323, -0.031160068246315981, 0.018285642027540898, -0.062989410545790991, 0.0087672622600651062, 0.045406407408064592, -0.15525094289000227, -0.1042418032870643, -0.33859461490814169, 0.00092931377130833423, 0.071523799097884699, 0.24813145448099272, 0.17764819914849853, 0.054741690878753094, 0.12448607192690106, 0.21578173215435317, 0.11743015273985927, 0.11810059765594877, -0.27756282596086734], 
        [0.23860743861101838, 0.037220481391505231, 0.031909831457287416, -0.14966246683358922, -0.098549852233202243, -0.095091345307753761, -0.030802604768789821, -0.04066312098825503, 0.017506583940867015, 0.028513850752452302, 0.083059648764879507, 0.0012190679580447311, -0.033228792087639888, -0.063142105345760022, 0.035544952402444221, -0.02360819898883483, 0.022431271094160515, -0.018827603717675528, 0.052735695833279514, 0.04158050289699862, 0.031033870999142746, -0.020524724375181047, -0.074377554313755104, -0.058851568777864349, -0.018416900291008273, -0.020185360544406894, 0.056555515730563666, -0.0026618188225642214, 0.052187819479918976, 0.12531509017121725, 0.019467695962588835, 0.096993280631948425, 0.052629314471473787, -0.095668337004786982, -0.10779966462682439, 0.047013332046528231, 0.1288079363853076, 0.1184985604004099, 0.046938525319026703, 0.011551507295904942, -0.10251614984375894, 0.034819153945653339, 0.089993485601405826, 0.11883560873126586, -0.026071450999984924, -0.10858930623330341, -0.02899296545303913, 0.12481231448842042, 0.240071552691944, 0.40869246369383216, 0.26105260304455458, 0.050071705679084866, -0.0099467245426242412, -0.032287346107244264, -0.037881104375152352, -0.042540536708484497, 0.18047392726709921, 0.1072902350620442, 0.056244968162698569, -0.45229392780009436, -0.8393105202937271, -0.32646697573387123, 0.14835849608015655, 0.1562873589444303, 0.14740464227965588, 0.048455507232141037, 0.083156966084078382, 0.096330955575823676, -0.042531142223404261, 0.024991947578161741, -0.13244791761311936, -0.16920198721111196, -0.46440542591162931, -0.34744594651326566, -0.047380042881461047, 0.014762318653552681, 0.056736228592421528, 0.03669477148484114, 0.013278997131524375, -0.054247783597366338, -0.01483859686236641, 0.16411279929712191, 0.28499310141872169, 0.33270153991512441, 0.077932645611871798, -0.21057989235427169, -0.1802826760596537, -0.28799247125492472, 0.049020040266471457, -0.037057503544318783, 0.0052054814540925462, -0.01712557992945455, -0.0034699488895449798, 0.11284391028265023, 0.050041748407580855, 0.039230018094625674, 0.083778617870413213, 0.030109655245779202, -0.10733376231898197, 0.052780693840456264, 0.030825522124256793, 0.04821793526249081, -1.217969571825489e-05, 0.037877834340168115, -0.1130077331768389, 0.025972330279050104, -0.040361720693582716, 0.060662551316001928, -0.0029175588675382641, 0.019233415533092907, -0.023247268944077137, -0.024268033659365251, -0.048050957148744342, -0.039100512532260122, 0.055724286161657241, 0.01959390543904424, 0.0019309926921863563, 0.052874955099626461, 0.11053404299243735, 0.059716361896183456, 0.065829387455870025], 
        [0.067033514999894656, 0.026572971026187026, 0.061902556598039754, -0.05061268032779824, -0.071246860564967429, -0.061282119254154305, -0.13243988526229811, -0.07738291307031675, -0.032986299158761272, 0.050994057269436274, 0.23205864835108797, -0.017426477727532821, 0.016764191996464284, -0.0045262873127560194, 0.072679551937369191, 0.072143276669484363, -0.025652321290280722, 0.011718912127102923, 0.015719207964445966, -0.14235466059508073, -0.012765609360204759, -0.055815189675494613, 0.062228430692006592, 0.11098589289358554, 0.1277675820548782, 0.039053987447355679, -0.010542995704417739, 0.052521557010413458, 0.04550010649059387, 0.0047551996119335541, 0.040037242307058615, -0.041869690382639844, -0.077743643710486338, 0.036622756449570762, 0.026947327196116463, 0.00487126551883902, 0.011449791638995233, -0.012157643728774703, 0.024207033059366057, 0.083283458792015805, 0.079838002453690701, 0.073616421497002385, -0.072412475297118195, -0.039880892956012777, 0.090274964350828088, -0.0059397628704566316, -0.079683192948853412, -0.055948766561327426, 0.16964650730513986, 0.46194226585948911, 0.274371381660658, 0.17637187708430974, 0.0055754869681963956, -0.040969322056490821, -0.048391146086037493, 0.025694944612614096, 0.099982967744116455, 0.12605224667151532, 0.27677019407409076, -0.090382459188317776, -0.72366729365820226, -0.66542016392832304, -0.093850604192478121, 0.12499856033014405, 0.090997511837360642, 0.018067463940727141, 0.023895781307986239, 0.11109874613217101, 0.033726182042769393, -0.22604680738211497, -0.55798448073756512, -0.23540780599042138, -0.094804503513252869, -0.091208459114291623, 0.007777282093728341, 0.13248330185889684, 0.039860046929418358, -0.25215810577191916, -0.20250122934799764, -0.17881248119439586, -0.11431317224159114, 0.29676856770910492, 0.227171515318765, 0.27410464679565072, 0.049648773580817623, -0.056866369619851614, -0.064784777105461808, 0.037313367193882563, -0.11706718911764522, -0.052501869400952868, 0.047052857758273475, 0.024035553726984002, 0.13017390712450239, 0.056206121471782292, -0.040237669313721178, 0.048845435975711976, -0.010397341013248448, 0.0059061057848477233, 0.038085874448897966, -0.010126504089425892, -0.011702353668809645, -0.036778984080859556, 0.010230544538505373, 0.010568912857967669, -0.005032312616026352, 0.0022982360713862809, 0.017050551716730533, 0.016180147956727883, 0.046102997696378212, 0.010501996704126618, 0.092567315720886861, 0.079400948339318683, 0.10570431930113847, 0.10682942997287241, 0.057218561045001268, -0.049670976577548959, 0.042693039359605639, -0.038684015991685583, -0.039503682631983172, -0.020740434284436046, 0.014243631289787631], 
        [0.062853191788539597, 0.070714896930592464, 0.0043518201422265285, -0.02666655406813033, 0.044525492329128127, 0.0088609265224199457, -0.059431945920266613, 0.12208756283717534, 0.10823813013338997, -0.025642885151491657, 0.055452978682526785, -0.030909671398170552, 0.0048754534319613851, -0.1108275207792192, -0.028823536945349906, -0.0050464099159451686, -0.0020801916092238332, 0.06515373811494736, 0.0042318087539451182, -0.016502458630955161, 0.039368681711714523, 0.14469597694100828, 0.036147418183642199, -0.025105477318655298, -0.0029752642733928553, -0.027230567529541769, -0.026500280856010971, 0.052083733475320179, 0.15939093133651491, 0.029110857419989741, 0.0058879547498108253, 0.070683657600627628, -0.10501891349904791, -0.012994883599022608, -0.027730543376280184, -0.038084041899524274, -0.028850174915976398, 0.088899107687582232, 0.12716053788475778, 0.09387808681070002, 0.12445983906256813, -0.06046361458863396, -0.12925780819854998, 0.058858708256970163, 0.16394889767626275, 0.066258764981399543, 0.0403244530383884, -0.035531467041199284, 0.074782760422794525, 0.027441833600079138, -0.034548445862494469, -0.15237542888927019, -0.13604857549753155, 0.065146735415548912, -0.0074264748840444511, 0.0046040279752218305, 0.078351950102189191, 0.12973383797047089, 0.095681579137167697, 0.10648034656296729, -0.471163369507132, -0.76254054291835849, -0.3582093555686478, -0.013245699569145133, -0.13302631896461331, -0.10815491503392521, 0.012182904199392754, 0.014156573471716255, -0.026231788982935246, -0.040059881323019783, 0.013820645260828969, 0.24427073416124961, 0.30739954052096252, 0.050527595012709481, -0.02309562329583871, 0.03293769077258174, 0.08587868851219474, 0.041107882586519373, -0.00067550084020043255, 0.038300058206411747, -0.054725024091938995, -0.03259687179316071, 0.078231031652147634, 0.16873039089887609, 0.085156469724609371, -0.075477381020669948, 0.075845844149791966, -0.065615868802515548, 0.026372053076710963, -0.012261443544603602, 0.018816373445303562, -0.046021026430705159, 0.063676911857429019, 0.009164298437269125, 0.021381107032976132, 0.010298974711400581, 0.025836499120846023, -0.0032034037426122638, 0.093859948209638583, -0.044506983815036136, -0.0094275346624950306, 0.014356944789664046, 0.00037736419603631721, -0.047078136939779545, -0.00096697063118341472, -0.010146754282597689, 0.0099516872802271478, -0.00041655889524723488, -0.035460419946042106, 0.013200958086152861, -0.034597677731442178, -0.040735749134576782, 0.051473603477795754, -0.03068228734251964, 0.033804134588586013, 0.04377149062165768, 0.089866716879267672, 0.0076301954407810429, 0.042985878682231804, 0.0073348284023678628, 0.08949838726656334], 
        [0.15588564481934239, 0.015629940083505309, 0.07753118222162185, 0.035198943491464685, 0.098615000408114981, 0.069220367786417589, -0.051015845370300447, 0.013531733492920819, -0.16689427943715818, -0.077939155723077788, 0.021709195750235555, 0.051427622717783311, -0.064348894516704488, -0.015227872851937468, 0.012758529221202047, -0.012491873951225668, -0.052544744154776057, -0.069039899751267175, 0.050431254230985517, 0.036663595165987328, 0.10484513386583763, 0.086415560548891199, 0.050031783118376666, 0.056993606178994877, -0.0025489629815944048, -0.00079079854412655859, 0.001499228924733878, -0.18328932679013349, -0.0010930528968453174, -0.051995220652956559, 0.007617813274078844, 0.050139617755528193, 0.083660718861030547, -0.028368100712067607, -0.057670540943290494, -0.024746519800128597, -0.17552062616716269, -0.053853554159497635, -0.049492415048262267, 0.028095804788870901, 0.16656739764514511, 0.17516444743795742, 0.1107778641386053, 0.23647066109018683, -0.019600601715928354, 0.0020068984825111352, -0.10475575204030461, -0.053073335318213274, 0.078984284067687066, 0.28336794782700825, 0.35165561151087343, 0.20795642216210236, -0.0051422812718408401, -0.066193759629023963, -0.049047262144416459, -0.035658104876826635, -0.053201855164002887, 0.076802578461626705, 0.29382065156517917, 0.27041543845259264, 0.32595175559668715, -0.14797046003969899, -0.18679187035905376, -0.049878575994829755, -0.099670598900649929, -0.040295774069118412, 0.022961845644245041, 0.11787385733947886, -0.072577437649429505, 0.15220959346283963, -0.11057067643262666, -0.27508873178974369, -0.22643642891650884, -0.21711971918615147, -0.065673550190076299, -0.052040181244765185, -0.091959698571150356, 0.052341425230670466, -0.029014278335724536, -0.026486649395131429, -0.099176081239430308, -0.11757437729038858, -0.13254020998829666, -0.07632698439949917, 0.079955224567499511, -0.17744204932338672, 0.080375905404569209, -0.073856215327577773, 0.08773958673979658, -0.13914743753820652, 0.009984405808856886, -0.058680483231997344, -0.057028749498486214, -0.079793724629746182, 0.0015768478264207159, -0.0041526349144124231, 0.03459730460531342, 0.0086645871269026842, 0.057269417282438451, -0.026265220900470704, 0.048093551927189358, 0.021793273125612952, -0.11755126367641769, 0.00049936995779083226, -0.09136988608727073, 0.17327200177522672, 0.031572859497950911, 0.022296920170734737, 0.0028040719529331959, 0.1205545883355781, 0.22973360335482984, 0.053206330310550984, -0.014610065818932663, 0.1166412205908703, 0.082758175315321217, -0.089171794728513082, 0.061309463622492497, -0.041123681778030372, 0.0013240930679478125, -0.022404870056693074, 0.066513648330478348], 
        [0.10641476126921573, 0.094791860020083718, -0.031528574545001298, -0.068662742567365098, -0.045583264706049009, -0.044170709745188025, -0.062373368500344591, -0.040882035203785007, 0.036680666666222828, -0.031890639174042112, -0.088635427534217007, 0.072486055817956696, 0.001791308761835142, 0.071618106508292478, -0.1084084708991033, 0.055537208628036988, 0.02079069078849588, 0.052668231377405089, -0.011257567794659987, -0.084503145472767896, -0.055354602162358317, 0.069470736791248017, -0.028454654127522738, -0.092204125208372456, -0.059138644586120663, -0.0088604191876885396, 0.013755932301681914, 0.013007606849729902, 0.11916500018693715, -0.0054766771048394558, -0.0046385496941247772, 0.10607177324908609, 0.13190402522499708, 0.033044593081882234, -0.0059853447957998185, -0.063203008712939046, 0.042930422332914636, -0.077520137322837177, 0.10193484761260346, -0.12768024901465561, -0.091566872598170757, -0.057976474892979336, -0.13595312824385677, -0.048451573720558666, 0.011191570795142991, -0.0068851380519260597, -0.096621451088916122, 0.081772431435869347, -0.049007285728546249, 0.1976245378232617, 0.18536337530011557, 0.054459053626504439, -0.08541554314837492, -0.1103049477795886, 0.26784310566965119, -0.04245325920849799, 0.07976003455399179, 0.15028246342565876, 0.27326896910753634, 0.2358435331414003, 0.029238235516672061, 0.14907460060498415, 0.31048708671669695, 0.40128067591951677, 0.38540963021580366, 0.27326818523111684, 0.15636736514996508, 0.14854725998180202, 0.13416742860268516, -0.1553995297347727, -0.21625457306714183, -0.28189178550902477, -0.25441318585728456, -0.24392409898023509, -0.045056214003550595, -0.13583884555523959, -0.36046526211729601, 0.054109881966403969, -0.27377967101430223, -0.087568631307608627, -0.027320638024760924, -0.03926220394642365, 0.17562805271419396, 0.0038011471806441294, -0.11815538049076468, -0.14961832586766177, -0.071034737335284814, -0.11256171108967788, -0.067347567015697357, 0.043317495301606501, -0.1030173747997237, -0.1512534418799959, -0.045348211292946861, -0.2275535515430907, 0.050199653444878589, -0.029910369292175915, -0.1088343982348304, -0.0018044946393091232, -0.14575679126759761, 0.009524471365601167, 0.017124703501667587, -0.0035126745298030559, -0.058372842364167565, 0.089840061068809596, -0.043367454110254694, 0.096738746749035681, 0.03700212707151404, 0.086995071846397459, 0.0198918856448589, 0.021144677203969078, -0.093457039994106067, 0.027112758749156501, -0.10194181462653785, 0.083879262506938779, 0.075075983857442727, 0.050127083431861647, 0.088653279727832768, 0.020525237657478601, 0.086115788747519101, -0.0054914080731565951, 0.14180153649129834], 
        [-0.023176335194873693, -0.024544621317998089, -0.032357875793335142, 0.061548317450878437, -0.028031573107483762, -0.11117017121562775, -0.028557173365205218, 0.034625006110213255, -0.076972642567779373, -0.011745965892935112, -0.0099597650513476577, -0.054283551601990401, 0.04796909671149692, -0.058234554069283725, 0.03220334560199091, 0.03182887188613838, -0.0085908775377060292, -0.018539673712725524, 0.059493326671222202, 0.032667167660611757, 0.011822214610879928, 0.011903166151583794, -0.091302949805953146, 0.010420910286473448, 0.047573929466955864, -0.010085595935941855, -0.082131001411481733, -0.035237661500281195, -0.0095365997252577495, -0.002108262261587307, -0.011204831036011803, -0.10622317570891325, 0.0088673069092282952, 0.080682046586781658, -0.09053303518527786, 0.0092003318540036794, 0.047579680643652283, -0.00347364060163316, -0.2609501387739116, -0.1992357096012872, 0.12707903816980357, 0.076817114916749113, 0.0089467730959269243, -0.017430379757375963, 0.27183434461804845, 0.29540869945884163, 0.24001157736704778, 0.32834666729756479, 0.30453119348124091, 0.15738308915167651, 0.27144447211271683, 0.27186726673366013, 0.31737875140339933, 0.17968138137001657, 0.34963615466399944, 0.17947799656684207, -0.19852203981785516, -0.23131890333905614, -0.30348558107287027, -0.018142171891952316, 0.32801789455109143, 0.10087717573413153, -0.27373136424469352, -0.34405448357850948, -0.10799042948918298, -0.028605058848439946, -0.19185111341784114, -0.027745548740637616, -0.010639473223188992, -0.06235838944179839, -0.22873300656916182, -0.17306684979686754, -0.10579424926972862, -0.12594712705414679, 0.0052133744642944568, -0.033020737140507975, -0.071928733715963894, -0.084042374013380106, 0.03728925720093966, -0.14901085254024224, -0.051877974664164613, -0.062449829977762557, -0.14709231061360803, 0.018448830420891835, 0.0039521338112389198, -0.079257066628676154, -0.068341989568304076, -0.12331516121995928, -0.099563492941295281, -0.12282998155312592, -0.0063813760831064326, 0.15237343336881881, 0.056225478570189891, -0.0045106920049706734, -0.057588436403930618, 0.098402612054188085, 0.02709244060964458, -0.0051265278718723162, -0.1788182638868932, 0.012716901548097112, 0.014254282884224326, 0.10921274021001333, 0.12698286341450832, -0.04126909131947766, 0.085520492564099979, 0.04384704473182563, 0.024665056914998047, 0.12247197871922337, 0.13439823365742171, 0.056199865709336619, -0.07048736575183942, 0.050114961739481753, -0.0003055425117918717, -0.0023066782999414809, 0.054045599348802625, -0.058889848964733808, 0.056481833161273906, -0.074701257036599966, 0.054306583047584442, -0.0024484691527146898, -0.12795957386439072], 
        [-0.0087719423838811122, -0.087902685556123586, -0.055052346930590697, -0.053894719312888591, -0.021765025216602493, -0.032496201274909917, -0.053936524545242788, -0.05960180358333237, 0.018682206945497708, -0.024041856926648959, 0.18080120923175, 0.013387152203562694, -0.019460024812665497, 0.08584050842604711, -0.042959888333166781, 0.056139979747190913, -0.0074822617478288514, 0.072637952230176689, -0.0457731161083395, -0.0079074374072526862, -0.039617671594911967, 0.062009468577001868, 0.06967381700346785, -0.0017890764951173505, -0.017922949357011164, -0.017328735082365487, 0.10429286568139526, -0.075336563592980688, -0.019897609787032887, 0.066497132377735496, -0.041929713620319324, -0.017542325191820356, -0.049375050497253652, 0.04705546281032482, -0.11658200494772165, -0.050367703232498756, -0.08774512274558624, 0.10296881777328262, 0.0010435280990956572, -0.11190238889003506, -0.058552489144718556, -0.093601922420016692, -0.058917359043089, 0.124279868888969, 0.20421984908202209, -0.08692730923047455, -0.15846153558915144, -0.044231150294403901, 0.14028149426418587, 0.20301345397769968, 0.20996770156750841, 0.078368373517043163, 0.023616204532563738, 0.046474099815913654, -0.10918733172647779, 0.34227918211166714, 0.40922200549215987, 0.32977893025607696, 0.35276397881502514, 0.17347731354344686, 0.049654055979477453, 0.046852605375659315, 0.18540273672730367, 0.2348705535220503, 0.074066027456603012, 0.090895328013838622, -0.35637081936313159, -0.17890098216840339, 0.067023781694075441, -0.1450909663576207, -0.2414525478367974, -0.31352143109573821, -0.2085394028841733, -0.1694233082437144, -0.05072999227745726, 0.07083911431869358, 0.11262033996513801, -0.05565357077731857, -0.18252807611047162, -0.095111033685357782, -0.20810789102436822, -0.085215792202067098, -0.037808309132582603, 0.20962708773356045, -0.087518828092840728, -0.0083270949222766927, -0.18306482243805655, 0.012319186741073546, -0.16489228124607314, 0.07423361221491917, -0.11013637802070915, 0.00018776862044833642, 0.0033474012470800438, 0.10043781830311685, -0.24009618845722649, -0.055213512452654788, -0.098806399955303242, -0.014981735119631731, -0.1254106702918007, -0.035863038056541618, 0.046213717459946638, -0.11767772671757684, 0.075696958238519407, 0.25102280647850195, -0.1506185088468181, 0.10273881268388778, -0.14457410135153065, -0.0084315930228874431, 0.073821935984905274, 0.034203057734345316, 0.12997695973099549, 0.064946501430307446, 0.1003816513120292, -0.04268279073187238, 0.034385732695719776, 0.1329989256859449, 0.084680513253248088, 0.16750112561515856, -0.14488980909132015, 0.097226090484736558, -0.17221966876845224], 
        [-0.032220950917092345, 0.0081917299168678126, -0.08028184906386833, -0.081381381904831074, -0.06384203481562005, -0.015615271736948433, 0.10708665173062173, 0.080651308228208707, 0.054345297791378977, 0.027073639464279806, 0.16812503709317206, 0.1341526646829076, 0.038631043495105599, -0.0055507367765743609, 0.042334555898426843, -0.028373758652471104, 0.0039598584650343688, -0.06359711746689202, 0.056587509472392425, -0.027554813118545185, -0.0017875113664636427, 0.0041025698499825153, 0.092718998685582421, 0.0086585130443419065, 0.10683629867740597, -0.074195758215517701, -0.06305739990406109, -0.021523442626893499, 0.0092341320266679933, -0.14610356759412479, 0.014750802208444519, -0.0052164932593612573, 0.0032641614965498306, 0.097806834221344979, 0.12926590150531192, 0.06269754981180288, 0.27475421176426429, 0.092446065608718181, -0.12768877877435683, -0.14805761147879182, -0.019825200460864806, -0.0086314590567921345, 0.01448064785908898, -0.0089873586037065994, 0.10470942538393144, -0.11054476667297426, 0.0075035505378642127, 0.060005840448525999, 0.31710299191646102, 0.32324440176708602, 0.10720495398460449, -0.058101525474285445, -0.031760977729127976, -0.1142935909746058, -0.031550903709047007, 0.0017246932881514604, -0.032140984544803027, -0.01313116025549961, -0.14824372987991144, -0.10766487248252816, 0.10593875445284681, 0.40021227496345418, 0.19725349113949914, 0.083747523144874783, -0.030750695721978777, -0.028330043664018603, -0.099873850179229756, -0.2603924703966779, -0.02597866375704655, -0.074313555789072977, -0.14253780748212694, -0.27783688778439536, -0.10552358523835495, -0.011202718784634674, 0.12855854774382316, -0.0003920736373502591, 0.071696717198538498, -0.06071544811269014, 0.079554834222746146, -0.044449538129453167, -0.036239302802330287, -0.054950113420475968, -0.07587822560403587, -0.13219044743679167, -0.11463986228711373, -0.014321816516995132, 0.054633054493314868, -0.0021865578330653515, 0.047599214666799061, 0.071590563880558955, -0.061806931357610687, -0.098703279639705627, -0.17720783806969967, -0.050444583088944242, -0.088158091500455199, 0.17305912499532888, -0.18012041201202472, -0.13789844469843426, 0.069654839313687877, 0.1066025347744837, 0.042994905989906691, 0.1324687310724105, 0.10691785253509371, 0.063925231237494759, 0.084949424182349784, -0.14824978071410777, -0.17981670747688494, 0.079887216519016369, 0.0099878844963017417, 0.091658809499199995, 0.0039475808537077287, -0.022988366514234783, -0.025003961189405333, 0.022312743486262065, 0.032106124489561169, 0.0060978045024435712, -0.0091097809264211807, 0.13841562948388741, 0.05721814889507093, 0.034249424231449693, 0.14165895482659591], 
        [0.077403080391101178, 0.0027902789135363509, 0.085848659908945121, 0.081621580183346434, 0.044686861117663595, -0.010720512150544551, 0.000766928295162006, 0.10466386076912294, -0.015221602350874539, 0.00096214663821529711, 0.10250217221999841, 0.10103126553498611, -0.028640249406738497, -0.050144288137646154, 0.088029509421074015, -0.039184290019048773, 0.027942178534501191, -0.10921729182270348, -0.091551121886366701, 0.038578400934963716, -0.047089437070028148, 0.0082248556916629662, -0.016698052118169729, 0.14190580766416327, 0.023164625852484036, 0.072603303858135557, 0.11866577336553505, 0.014093258001003195, 0.0047638608409522332, -0.012686837885249339, -0.036660213196534036, -0.077416767630940422, 0.049268385768219111, -0.044394153830466104, -0.17871803212100118, 0.028784448095554194, -0.0103622383273788, 0.15180646423700633, 0.21859707883104096, 0.11630023909217539, -0.092580368552828127, -0.019700955892187733, -0.045860659847962018, 0.029996643776362769, 0.022719309002418732, 0.025101662257832447, -0.085650564281123734, -0.12410629154164783, -0.18246293106608358, 0.091966008812621805, 0.087081001569446523, 0.10736116620783882, 0.028110496703318152, 0.11507649255715754, 0.038288111619517784, -0.074857538348946706, 0.0003646230535695183, -0.075728095243027413, -0.25811646164981222, -0.60691515717629596, -0.57736366547659346, -0.1230196932349347, 0.10818482658632861, 0.016912673562240535, 0.13529133328209006, 0.090044145360448649, -0.017373878996459924, 0.016143047062772586, 0.0074705525731126043, 0.038153120918174875, 0.13808042440556922, 0.23128272372791026, 0.062212166782940587, -0.00078105935242136354, -0.0088352484968890338, 0.015948358629724879, -0.0005022452937268676, 0.11232364734385331, 0.010961615375259789, -0.063961968540285671, 0.042697690474159465, 0.075697683234001015, 0.18797108390738509, -0.034270718560830339, -0.076010292391831616, 0.040711497962504541, 0.003927652671956227, -0.008113852698322141, -0.015998115624021494, -0.060356186306471743, 0.025951586831793848, 0.042163344429453686, 0.082425729708358278, 0.14260227985381085, -0.042848628451185186, -0.063341469459500324, 0.0092863458678610518, 0.029863814690498799, 0.0060823890399176739, 0.059612446109644765, 0.030082023913450849, -0.027239380162663276, -0.0073658703526070556, -0.015225093891979673, 0.044419085486733505, -0.0053691160288692197, 0.022425434671702167, -0.0082635729409229006, -0.040836893779866157, -0.015422443671092656, 0.061348129149263644, -0.052846129433506105, 0.094365596248035394, 0.014525718078802685, 0.0037072160051032756, 0.044122648659048434, 0.045794925597176121, -0.030930673355086962, 0.017194230501010505, -0.019462858484744144, 0.001243582445288452], 
        [0.084113665034921459, -0.025621034960445016, -0.023221811619521998, 0.053008052188471377, 0.1722413378552653, 0.012469440442448243, 0.075121540622525046, 0.040763448249123868, 0.098100783614578663, 0.041479003131258046, 0.12635977517681399, 0.070298444019280537, -0.050007246720496723, -0.0054840870702999311, 0.03040544684160737, -0.089754664462184497, -0.21540766402304359, 0.017230102171692269, -0.13556988205821849, 0.095618226286922736, -0.11059773025824354, 0.10124548152459008, -0.076498060646510518, -0.00028541240089785536, -0.026245513796004843, -0.019479552802034616, -0.39778025123942529, -0.062143591902259168, -0.024341092169919532, -0.012826724183031463, -0.014661926972310418, -0.11254901345954736, 0.16096037573300526, -0.11227786126177444, -0.068532532992675615, -0.16356466589407062, -0.19653804062868085, 0.031038393193058594, 0.13193348705643318, -0.083422963041591094, -0.040715685787325567, 0.013809808214387778, 0.039665847545365757, 0.0099887743329398759, -0.047952715523986306, 0.0006100311386056656, 0.10343067208630369, 0.24890751819447962, 0.3578226490040739, -0.20933412648627439, -0.039926382349098469, 0.19419655464006366, 0.032188369668813749, -0.040503633096404479, -0.0032348476784208602, 0.17053386793770461, 0.35047600865548467, 0.24645797779268205, -0.12388716569831495, 0.017230415937178875, -0.20274807116351118, 0.13927324407566935, -0.014868221439288953, -0.11606370921716812, 0.050406898699637798, 0.052284706862743335, 0.2179885999524844, -0.056957003125337274, -0.20647158156376177, -0.045778722576096192, -0.174715212494163, 0.052739805693730518, 0.099133675550291595, 0.094364060620869411, -0.060202372775518737, -0.043715737000694935, 0.056370290784785199, -0.0085890329179779956, -0.096057005222036973, 0.019767425753796281, 0.0089128377885082377, -0.043514983487809494, 0.071434017069269745, 0.03636602312918305, 0.013983885718858599, 0.073847542491404544, 0.064069902818033903, -0.1243079073528052, -0.077473394951124958, -0.0030770402418191234, 0.012411573849515189, -0.077233395464899518, 0.052213298166160438, 0.098480901187919578, -0.044983495910957086, 0.0093175449591838683, -0.014435731895740433, -0.018574666756547009, -0.016642124460499341, -0.20214085319841704, 0.023000105666364901, -0.056257873953405604, -0.01762107897153789, 0.019130131746270068, 0.020007586924534165, 0.03483339161645628, -0.066635058968322142, 0.019122648234895845, 0.10427685298428223, 0.026510785405202311, 0.16286923233388592, 0.02793257220207912, 0.049606524388094764, 0.050049491429857901, 0.1019360210121309, -0.025880325806131227, 0.058534465646414693, -0.061180519358758872, 0.17253450900113493, -0.13459923259367187, -0.090407597313012622], 
        [-0.027550816137581063, 0.20556735223558539, 0.08213180283129054, -0.042570327563692591, 0.01586831912703765, 0.0093698333764795361, -0.11462856052306328, 0.044711856850138204, -0.15995802392503708, 0.11865990971326171, 0.0673921974401607, -0.13862721846117479, -0.24991581191756615, -0.12741658368348494, -0.048942245808076282, -0.10908521327615617, -0.015851721850914276, 0.030010677013469683, -0.15749365231887502, -0.053420943220933284, -0.025662830013189836, -0.011092925627943839, 0.058388641152087056, 0.088244561781003344, -0.053728117004780987, -0.068366341306591, 0.0026508458051404948, 0.097817872697453651, 0.016895869777799971, 0.029099746903975626, 0.15597074244969705, -0.017162667301283602, -0.047857867586063488, -0.066641357291646677, -0.041049665489416423, -0.029341908735795189, 0.18068461986324288, 0.23841021509849827, 0.10720477806483233, 0.0032504209495289177, -0.16875590654789738, -0.055651624441500805, 0.037864293059399243, 0.14496557145479333, 0.30165038928541399, 0.21780633210507225, 0.2478067430020475, 0.20611438223970449, -0.030505045384812982, -0.22354863754123386, -0.22057742020428542, 0.026160777231004489, -0.014489792871384327, -0.0013992789264812011, -0.032142807111526076, 0.069858404495879517, 0.12952310052385177, 0.062134024665833537, -0.095850197369784784, -0.15005742280797291, -0.048690422387721657, 0.027625676945502317, 0.087751539276551271, 0.059382068636311708, -0.15547685553596879, -0.0089930406367377536, -0.2169595372240255, -0.20894528496184284, -0.17492068880682238, -0.10306183600146183, -0.083259534728607171, 0.10865204818788957, 0.060744670090415315, 0.050196375528596446, 0.059347173941546122, 0.080550163011289838, 0.096041183403468094, -0.1792150255632714, -0.086359515761684963, -0.19861633026471431, -0.085305595365594317, 0.073404453468704292, -0.00060915535289933487, 0.017864996966518068, 0.015229839479410548, -0.028738700704038833, -0.030631095956117516, 0.083546542374686478, -0.015199467885082363, 0.0079196568766907727, 0.10542259168905797, 0.045879590738125489, -0.016176817524772791, -0.064404029773047405, 0.056449523541363983, -0.0011675857621973734, 0.0019961877116474042, 0.067416701497825943, -0.0068872964750457538, 0.034855870056329508, 0.017610685547011118, -0.064974529939064218, 0.072135113039659637, -0.038534030205095104, -0.014020364161441437, 0.00029360239040131242, 0.12282296947714948, -0.084526078839246968, 0.072733520082105957, -0.026199337777164058, 0.2622823203473173, 0.056466937642953463, 0.026818371415154252, 0.093991868595920028, 0.035828326553373244, 0.18170527988919383, -0.015152288577127748, -0.017615532167961634, -0.0031861578874696761, -0.021179342150732736, -0.15213715846860609], 
        [-0.13774523436409969, 0.038746368626390894, -0.00070857044653628576, 0.049355010027965204, -0.088279225323666277, 0.3384991916323753, -0.064154782872609478, 0.013423151043787954, -0.019629041697081684, -0.074514483376996052, -0.090355781264570376, 0.096941216713528164, -0.11910664582618065, -0.15100751467224666, -0.013947233410068524, -0.28747834932862831, -0.37903665180179325, -0.2028061966058827, -0.1130350051672437, 0.025054091741846772, -0.081018737004221672, 0.092552127718648639, 0.00082246462611298282, 0.24245844724477272, 0.12843614602564724, 0.13562020313059403, 0.08959454097829489, 0.23076896835282149, 0.17282137454049196, 0.15120139028220045, 0.2108003848913195, 0.13274188314172597, -0.11296580760432726, -0.23425804061193015, -0.15388856567280207, 0.047550247591945885, 0.13675765224748537, 0.14970887500641089, -0.014598687955070258, 0.02452413980077512, 0.15008479234563366, 0.021969575372334967, -0.017209314441183898, -0.12566589356298841, 0.057462149793583807, -0.12422822668708502, 0.027717976800794235, 0.076470028456385508, 0.15084174315157894, 0.16363419431275902, 0.10314072255216514, 0.098604445511354985, -0.077889086218999121, -0.1661031133394909, -0.015523729349795651, 0.033968447572520016, -0.0064287733234517919, -0.077784123694540519, -0.13138597183951684, -0.16492537584704581, -0.13707718063627361, -0.24996598417430377, -0.099387315671480653, -0.041816272470969071, 0.063392795262038587, 0.084656792003326736, 0.073596111775181064, 0.0096742751571591568, -0.056184484902255249, -0.09782611167515598, -0.20167456268371736, -0.035743089697776065, -0.053853754214006649, -0.094088602733082519, -0.11120588730571836, -0.037671666252394119, 0.031541190146133206, 0.092725555798098935, -0.02405726855688603, 0.006010846171522255, 0.026069243416314662, 0.052952378460022542, -0.00074538711425108095, -0.039415421335204141, 0.00012581754959352376, -0.074805820908263931, 0.010523867284072515, 0.062406077528648747, 0.015813904262298846, -0.064838239938092582, 0.031265967377395135, 0.027507834966997668, 0.00012699672107176554, 0.05079690966459828, 0.078969877915991929, 0.098317505905439417, 0.054192666869303546, -0.013030640855035372, 0.049683315230003938, 0.083508971632165918, 0.011784477594072869, 0.091871680671077899, -0.0066226790079174785, -0.047956123703921293, -0.017090317814363196, -0.078740979480628748, -0.046730705240827737, 0.018513947238313962, 0.071499897543357865, 0.064736690247935547, -0.032650670337155206, 0.061363794900654349, -0.039888121585693735, 0.06940981414444819, 0.077977297819488783, 0.066133719833712273, 0.05598211257429133, 0.072595488855594997, -0.053844526913953562, 0.09608563004350644, -0.028805713693717965], 
        [0.044235218750753806, 0.03452490583678916, -0.1304293688025541, -0.03539195098364023, 0.017969397644679183, 0.035178036504637217, -0.010788443554145211, -0.0016502053765038854, 0.039150364258434663, 0.21472717137309544, -0.094799579619150101, -0.028715342944390494, 0.054860337568606081, -0.039323795503948329, -0.071940860906896581, -0.11930894160210025, 0.0078117674331285164, -0.13496527011108017, -0.22468220163734792, -0.041963716626139388, -0.18840317509998969, -0.12848466572254685, 0.032762146633843053, -0.0022056152468009141, 0.10277613826454918, 0.0012177391079194258, 0.077762844802185094, 0.014832783378042141, 0.2549270879104647, -0.14122761490223984, -0.02812892511916594, -0.090593423291392555, 0.078746303030107434, -0.013334851815846885, -0.013098417976838569, -0.085997431567791716, 0.0011500587455686162, -0.096291957570617565, 0.16218222843705965, -0.026280879180661507, 0.4059162672347385, 0.2242570275495756, 0.088914801219090844, 0.087380936685669458, 0.043235742271058968, 0.10434670998406992, -0.02968326553011473, -0.096106796162175004, -0.16572721595924714, -0.17366678905777666, -0.030961339846240048, 0.059505554081166881, 0.049325908092511556, 0.12756582867533076, 0.23979790342729132, 0.12399889130520506, -0.27711805486247987, 0.10320304516755278, 0.071366923473124746, 0.066138985335745387, -0.017570740572059176, -0.21848821035302129, -0.096325738578736123, -0.013236997628355902, 0.14099804783148318, 0.048656476054380837, 0.030847391971354002, 0.12062557790469333, 0.031940378289510442, 0.012663844222798573, 0.053034778014022767, 0.023358934432241123, 0.073600738663428589, -0.10514949440993024, -0.16524216303765682, -0.25669075988459938, -0.26896594887147668, 0.018565946082153541, 0.093589512766167254, 0.028127974684171123, 0.018696901200308494, -0.015875163077901967, -0.0079379097617384188, 0.030609616137362825, -0.015794143119850355, -0.095236312837370815, -0.029087387305527151, -0.13651567962256067, -0.073683058450215624, 0.054901623218963372, -0.060990796740251554, 0.093170395781096649, -0.0023871205690264331, -0.026190765199777231, -0.04798880819540316, 0.019891792536779831, 0.053632284454708232, 0.021996415436857979, -0.058484829619743363, -0.0082971666182568952, 0.085922982573187742, 0.0078349537872220328, 0.0074972747215579123, 0.033528171976771326, 0.034258795986853316, 0.040069268495681584, 0.016642170052174849, 0.033376554888908505, 0.0094589897400608781, 0.052064551717063458, -0.084929444469789464, -0.091861293774294875, -0.072335293109873536, 0.017511044864076567, 0.083822791083669079, 0.029829413251507158, 0.022676448560172629, 0.092823512749215645, 0.027104627928702215, 0.049933127943481807, 0.25204397185842226], 
        [0.045017070595711133, 0.0498642789949671, 0.082320969156012919, 0.11789478363532714, 0.11183772343297438, -0.1253322045343096, 0.073011089356233294, 0.077003721577057399, -0.03717900545496422, 0.11530429785134244, 0.05730001513322304, 0.097848781670201404, -0.03060524384717013, -0.0069899183498422779, -0.043814689161140008, -0.041086107026221175, -0.10156550268991253, -0.030984257446209529, 0.062242270842820177, -0.085659902110209532, -0.031199205006548048, 0.09466362301479106, 0.18696360752101071, -0.1661308799155149, -0.0090085495016999778, -0.12606646172545299, 0.061744312534455212, -0.10058744884305808, -0.32554386979332489, -0.093972833934417715, -0.084099675017452177, -0.19412666055289363, -0.073752883041483294, 0.093206668950364335, 0.053698626158480575, -0.030509976495433661, 0.035499265069312287, -0.088218415409939618, 0.14081935255976538, -0.015418397657317465, -0.14008063599426096, -0.021415771106654449, 0.073017887242636206, -0.17726620239081409, 0.049670987591142773, 0.034513230883957385, 0.10331367544756308, -0.039224198145387315, 0.032001387649784233, -0.31709931967548438, 0.36394741418078808, 0.15239466974253513, 0.12006928728376079, 0.012632970433185474, 0.13528479946899857, -0.043263351294103289, -0.041986389073361857, 0.069839057237599783, 0.0010105840343706679, -0.001177493293526035, -0.011794825581052382, -0.14348506855517926, 0.022137252763930207, -0.039687582510860714, 0.26218159086991571, 0.19436953435957777, 0.11018262120789611, 0.022791444872238911, -0.097374550971521742, -0.016625841483821784, 0.15980938407436601, 0.079561148796989944, -0.075451842770343128, -0.028023527278215769, -0.12778377344107292, -0.070600952976917736, 0.075854745502590859, -0.061104114583229563, -0.034255065348455287, 0.047000517227076224, 0.085956850425998793, 0.04282729750891924, 0.035824417662887978, -0.0061231911453551446, -0.038509250299150546, 0.052491286674368046, -0.012429025518286289, 0.027802410046689319, -0.045633571810510726, 0.057329919165400409, -0.074157742801148993, 0.0012829945233095302, 0.04703190758387131, 0.024833428093670173, 0.037204577451850254, -0.028766340858447596, 0.04836022604994912, -0.053270097737550898, -0.1225368009934108, 0.037120069768975875, -0.089284007907524526, 0.064955297078712851, 0.077539064409025166, -0.027111775203657915, 0.09566272146318118, -0.024483731157729047, -0.036211650145923778, -0.093915798725000027, -0.017320414345298095, -0.10222122825099972, -0.08839882935836986, 0.018021145195601808, 0.014346493014463765, -0.0045931108148111605, -0.041330999096111307, 0.03707125175822254, 0.032109088650756609, 0.1327316051894474, 0.075109541167208693, 0.02562779748474479, 0.14212920960470612], 
        [0.15729146952739428, -0.052978575964526695, -0.0026258454378078749, 0.07899544804862188, 0.082044056126512888, -0.13536453065722548, -0.013649345776134983, -0.013140590068438054, 0.01151285607422449, 0.051596177430297457, 0.025550220473819302, -0.039487220487149505, -0.034658288058216052, 0.072490544458391787, -0.11567294550509376, 0.067863801617483122, 0.068650773394936471, 0.073985890698350126, -0.16153712899081113, 0.040446464260465734, 0.071466438250948588, -0.11469018047321458, 0.054050503923005255, -0.041043012191213868, 0.14996547269454152, -0.25422330965645823, 0.1969719351437533, 0.11290777964377821, -0.020530641521012943, 0.12889998621276044, -0.10368261923120013, 0.096091901965415991, 0.15324884079071813, 0.051489779311227196, 0.033559562206468427, -0.20829917204727766, 0.022893590362530233, -0.26249604314109187, 0.01920855427735553, 0.23588413973673644, 0.012602139087501865, 0.20972078789304485, 0.092568536380977479, 0.10590976891238137, 0.074213758099456212, 0.028278486131047539, -0.034766214821145405, 0.025387015471766056, -0.21114625235885243, -0.18142723897056606, -0.036903154611340375, 0.074542244212791459, -0.073942717333307595, -0.12923367863313379, -0.10286993284460598, -0.0020478562727464372, 0.0070327870476685345, 0.041658770263764591, -0.030913879256598803, 0.20126029986072963, -0.36149406972284098, -0.5918877032494142, -0.34765190314312044, -0.29917756970453346, -0.043195465679216768, -0.30777208287521557, -0.054570873464765829, 0.035677453144259269, 0.033779035010883279, -0.11152465910750621, 0.11790825287438664, 0.50742402779615148, 0.23855694673921737, 0.10488558912344918, 0.074814936164492321, -0.010757602002390856, 0.098422174417897912, 0.068011512986524178, 0.040081067317637512, -0.17815840391411603, 0.015218382958913604, -0.043044787072747059, 0.069478785978807592, 0.26248348656437781, 0.1306172564649099, 0.15898046016824569, 0.098913085077125359, 0.16690881596534685, -0.045455788389378013, -0.051217783957418925, 0.088651764746293119, -0.024238261127295962, -0.12061118524458514, -0.13932561033045077, -0.098447824398158607, 0.084104128443532489, 0.03609504694316075, 0.064677179270859433, 0.019556502245895897, 0.054584837489264737, 0.011804485067672219, 0.04962752013073167, 0.03158019227826489, -0.042127606074900098, -0.037246845366204762, -0.00090228035552694652, 0.05127558828330446, 0.017591411946701482, 0.020608297506701782, 0.12021482673005342, 0.039021952316670633, 0.021711754771879227, 0.047172199479969562, 0.11457521712485876, 0.065529260941908848, 0.057133065165575314, -0.064145843313717532, -0.079153570089738917, -0.084203588908724702, -0.13317811959911652, -0.097193108721414789], 
        [0.016239054180390664, 0.0039662727937494063, -0.0045546608488466339, 0.013554085633964541, 0.04287384927044155, -0.15274614529097097, -0.027274870950224753, 0.009662815968977459, 0.00030503272333276543, 0.032218254842854788, -0.036021236700139334, -0.042600552093793376, -0.041216087356306746, 0.070225279182411185, 0.088251463799817353, -0.11943869442811812, 0.016009417433122689, -0.025892296238322871, 0.043718898111848606, 0.046349743840285895, -0.045519881760365574, 0.057802463286196488, 0.03299849377053235, -0.074789027962275934, 0.085612573613843404, -0.082967036772006134, 0.12226353323600213, 0.056995647983886233, 0.22311371083336579, -0.12892292639894809, 0.028711597590839549, -0.082294811006116686, 0.074670881436146558, 0.024025896326078336, 0.07065603601313146, 0.052863436123422466, 0.13162507032318282, 0.083850012252808775, 0.019373316885252463, 0.068601186045407672, 0.16045426623761011, 0.14512299636928327, 0.090971987176700866, -0.11720878638068641, -0.10960101740165, -0.22989932998426871, -0.040375493650495087, -0.20170065712267327, 0.21032193985451469, 0.028436766808479619, 0.064868788568131358, -0.18348723541305237, -0.17888322479271676, -0.24993108343054868, -0.1218218035048543, -0.032694964791572315, -0.0037869041619365135, -0.24885660964872919, -0.15602019937684342, -0.42475936671170156, -0.42360041816934524, -0.36080165394257169, -0.18904408350207366, -0.056628034016529188, 0.0019947298303030075, 0.0099847288775674753, 0.1075269031323472, 0.21965496214815466, 0.18511412087840118, 0.19939690136264532, 0.23706194766652711, 0.1585535076891107, 0.23755501089495354, 0.24026771887297607, 0.14806350471741694, 0.22743537801775957, 0.12507232761343839, -0.12207706841814078, 0.041225407558751273, 0.12974091028573875, 0.13877343222126551, 0.092819074272623342, 0.041456933016731201, 0.12810971742453969, 0.086282278039654381, 0.046482152214626163, 0.03598526522115604, -0.14999835453581617, -0.061994753063569302, -0.12774624354082473, -0.055468530754657547, -0.072055656326832668, -0.031200201377666728, -0.021697705969703371, -0.020319605794475559, -0.011808386343022212, -0.10716560570031625, -0.082342449185127842, -0.019256109946120217, 0.066678811003636818, -0.041536723571689332, -0.040687519600928507, 0.044724573527092748, -0.068305216896473495, 0.035585363893159354, 0.026945608802347733, -0.011423097664885327, 0.061366414602964534, -0.049741414287749496, 0.054484604133461456, 0.14247436696258881, 0.03770989015507005, 0.014814583813689983, -0.12196638284522934, -0.040852970973417571, -0.0048072698419944909, -0.093844453345438394, -0.11066938503473484, -0.01308544267539942, 0.020003661283812341, 0.11572349318879958], 
        [0.02861973429703818, 0.054226325319119265, 0.017678757532143818, -0.054622115279891297, 0.00068166158543815636, -0.061011028044801754, 0.025449624542795035, 0.039248763551355731, -0.017614050568012716, 0.086689068955178875, 0.12901578182703599, -0.059155840152992877, -0.033658287075804989, -0.11303253492598647, -0.0094407403287756972, 0.038300106001050702, -0.024382057855670103, 0.13094817594507807, -0.17637051833702583, -0.042536434179399618, 0.024839476402364308, 0.025341112503526046, 0.073379240915845495, 0.12490394236296019, 0.052334528402483899, 0.01959442719741869, 0.014409551889643532, 0.06939173936687891, 0.10114636722821412, -0.017834270494535995, -0.0052538748958707721, -0.049449629111543728, -0.018515125726140946, 0.02732694249374093, 0.09763594846358073, 0.13398387575020193, 0.028128579416720284, 0.10345916561982525, 0.14559912798485353, -0.062225750838370064, -0.043205385313047517, -0.13615012492801842, 0.0094595802241661097, 0.077643293280986139, -0.01883839881610818, 0.040124806139584204, 0.046082762604961053, 0.11596384414343883, 0.041671199210061065, -0.035255123832835487, -0.24210069103686924, 0.1341304895480569, -0.12174034267618312, -0.0024940337740440369, 0.019159096554587522, -0.28596248479682318, -0.064486219660767827, -0.3159404613081046, -0.32103692755655011, -0.52703621320348082, -0.523706814301239, -0.2219710388945374, 0.078177953209590229, 0.037152776634131052, 0.079429350175809904, 0.054710873615715222, -0.030973473678087608, -0.17109338841301949, 0.096071725904511768, 0.02326460744017457, 0.18229765892428224, 0.50841537933922254, 0.36327137375759511, -0.17442768533982334, -0.075940774557052448, 0.084582691420455519, -0.08264079354279294, 0.24078778306714929, 0.12327508787645428, 3.0311214018877153e-05, 0.20734217619087927, 0.13348805342234585, 0.14204478537466711, -0.016683009143729791, 0.0026274236589628186, -0.050599783470677923, -0.093501642534019186, 0.049346638059468484, 0.027169521962694204, 0.0088066775641548883, 0.29974077633101837, -0.017370887640425853, 0.060472611475062152, -0.083274580137458892, -0.048734360258655733, -0.12258982430184573, 0.07453840474434334, 0.0016868192049145497, -0.046678375687987328, 0.10225565600123501, 0.096413382614769089, -0.085167675344914512, 0.011074699633376178, -0.058526124313595766, -0.032743113966618241, -0.1722075038150731, 0.10625699459128871, 0.045122620395145224, 0.063156899424295448, -0.023657194122683647, -0.086189421429932939, -0.097155679216888668, -0.11778596011866641, -0.0018160616946504698, -0.01837453110222613, -0.022154736774935388, 0.069072543182675333, 0.061842701091324143, 0.057417191163580447, 0.030372244451354793, 0.089787775464562541], 
        [-0.001637558807711853, -0.01523399155873769, 0.033084196663500154, 0.010429688997138621, 0.026387307256101139, -0.055493049532405039, -0.089867986082774118, 0.031318369429763571, -0.060212072041702008, 0.060345081620277463, 0.033637859079548624, 0.074907674442576552, 0.06734422144223931, 0.045408985332457019, -0.016588163375265065, 0.11808910368697124, 0.10674593565355751, 0.014356560764954368, -0.00029905420194112353, 0.032489925736142289, -0.079691004870107801, 0.0021152438820417965, 0.12842998293419816, 0.027685506112132927, 0.051037174605280025, 0.0095027734141051382, -0.088577143955959933, 0.072415217616874708, 0.18758587336750721, -0.046260082649078216, 0.032834457400313488, 0.00027333660832160045, -0.0056258729733840926, 0.051335227757921958, -0.028997953896369527, 0.010803615722912593, 0.039278862874021811, 0.059934818237191961, -0.036672818526105114, 0.0020455805172246433, 0.08420494892293047, 0.078722497431976415, 0.072927829328334359, 0.0029102454584164217, -0.014711323072181468, 0.061978949521715912, -0.0058613640044295964, -0.0065096004647029956, 0.15462308680710604, 0.10998731441673203, 0.055119939764749493, 0.05724647785751881, 0.08467350723014512, 0.045415614831981893, -0.027011213416260203, -0.41690504010919505, -0.2381619432525145, -0.26802740977048395, -0.42973960239470188, -0.47128936696927559, -0.47538117711853761, -0.23332878411143415, -0.02866052018803172, -0.046785685844234697, -0.013910661881944619, 0.063557340319003772, 0.20816618228755654, 0.1268039069069368, 0.19584967158175218, 0.24120710644978025, 0.34247879950952587, 0.22000223848712153, 0.036993585153171818, -0.24940743884977212, -0.12911855055552002, 0.0067607783858616433, -0.016380373357314598, 0.023975770224144183, 0.17281340795556549, 0.06774703585492528, 0.099348094695161412, 0.035397538040306792, -0.034631661821791018, 0.1100865505604692, 0.005313191434559647, -0.1852260149514699, -0.015871161665418073, 0.0086230437445217883, 0.038923750125692352, -0.014894463369033356, -0.015235500642311592, 0.0015905054090605206, -0.025942083213375461, -0.048032891124765054, 0.056968059211618904, -0.0053550471186975812, 0.070041367697070894, -0.019904063376663322, 0.10013072647581948, -0.030663141377206063, 0.014936482187214051, -0.053377077668385668, -0.046191143798223082, -0.049737104601448617, -0.032034940192103359, -0.026289206287861282, -0.0073802153527658398, -0.0085776521075193179, -0.067451013841572996, 0.036964969790641428, 0.012119189183510626, -0.012732265280952129, -0.014067660545222016, 0.011208506370721377, -0.0034197755020493881, 0.12161984708872418, -0.090967033228651281, 0.062061367658091768, -0.023761385872915743, 0.11195006309284704, 0.10944483983918517], 
        [-0.061429217767686103, -0.024854862147621323, 0.037533900593050687, 0.053055218475401428, -0.029090391144677347, -0.076607532589230393, -0.056250478754706124, 0.03851333502343017, 0.0094111122857806068, 0.027627758598813779, -0.040484333944467571, 0.062572284138447634, 0.018534104488487108, 0.099953923075381451, -0.011584012590548413, -0.027052354458091218, -0.0059961345960441587, -0.021253583302654644, -0.031551826484526257, 0.13841564062729481, 0.0044654988962283121, 0.079158575949980478, 0.09330712693847118, 0.021057360335951708, -0.020072455903489106, 0.0078349261993443525, 0.10646163879333373, 0.11394158834484362, 0.095624007084734647, -0.00037973373006179589, -0.010566642708017659, -0.021229433197596272, 0.11951412079200276, 0.15658745914488753, 0.051156677361355526, -0.06149908185714912, 0.080077841970438823, -0.060312781555823307, 0.10862415451751303, 0.090833457141346358, 0.037749802298128181, 0.12669250756084155, 0.019289318800248804, 0.11166309161116607, -0.1161166273753233, -0.038270596780716613, -0.013961859511050188, 0.057456373007881457, 0.035911303378527666, 0.11685366316626331, 0.020811499706270893, 0.042274819174293238, -0.11786932199756393, -0.20631689099465444, -0.10339540502604118, -0.032371044845522869, -0.14327246772273436, -0.25192334370553027, -0.43351265016373064, -0.32253010533464199, -0.39759972190268117, -0.39288382422516366, -0.39114382180517604, -0.24669511513347489, -0.087920593700299116, -0.088613432773507361, -0.15980594976718124, 0.18785644160235501, 0.19150833663803338, 0.46363761289278804, 0.15919333829593552, 0.19352833505902622, 0.23198389189372812, 0.41944067807959584, 0.29116622643028034, 0.13265224163991357, -0.041280875296069018, 0.024460830389148203, -0.058649245871120803, -0.0484310682254976, 0.074458524703983509, 0.038048304115812073, -0.040110091881074464, 0.059869902924825739, 0.052511568070781466, -0.0090562152269471445, 0.023537459561038466, -0.06819758275382648, -0.058682078489213363, -0.031437612709725359, 0.057289605620930092, 0.09631916110523682, -0.010631903539778567, -0.072422830632186297, 0.026755462358263725, 0.018665513895049689, -0.035082729434644327, 0.0033658937666455023, -0.025999751547288244, 0.051530594005125122, -0.095877639344744012, -0.072903503224737154, -0.067948463067868003, 0.0043261175722517503, -0.0040117811540246531, -0.0054864150036365369, -0.0070406076984890556, -0.023664491880765207, -0.021348914552691282, -0.055764945037704343, 0.076203461056541313, 0.057794773037288215, 0.004991409560975428, -0.014553984524648442, -0.029743957901801635, -0.057165125367652947, -0.0010086458792998715, -0.035361751471046692, -0.0047530832054770919, -0.011301320960084231, 0.11501077964365991], 
        [0.15173553770142628, -0.014179130345110133, 0.016877350096463503, -0.077204656983401884, 0.07810802077917843, -0.13112570903713622, 0.002753461595534773, 0.051910634906651945, 0.028947846824779341, 0.050208812521650187, -0.004579484116651808, -0.10684515347432511, 0.011155331270464766, 0.065186111881263234, -0.13027319256310377, -0.080144308959196983, 0.10735864824242532, 0.048879724645552361, 0.015758793271349616, 0.12191464251681002, 0.096984668731898774, -0.008083344199497508, 0.02070520927773202, -0.081937807089683207, 0.0046465366987262363, 0.05614793344286019, 0.16628267002053893, 0.04618252947477354, 0.077657994922063114, -0.019960907459527263, -0.096538343643650965, 0.079466046122461123, 0.25805196379883999, 0.007762217116777187, 0.069519575178526374, 0.0095238196373019363, 0.26151693837929407, 0.086788350648662874, -0.037402260798162723, 0.069485740614805419, 0.071694722362200328, 0.13258033500501015, -0.02145849038805818, 0.056046350520208621, -0.00039374783734824614, 0.03222219258902316, 0.18458145122623904, -0.042539782956061298, -0.012963640462772971, 0.170102640969749, -0.023561860478587326, 0.051152948285101807, -0.1316626386662188, 0.02066528156095445, -0.24022517587189773, 0.038647270662851535, -0.025858147741203062, -0.08145590938506822, -0.11686693255496608, 0.044401292680239651, -0.35730505607122431, -0.64580488622829257, -0.40587964607656341, -0.30571259666730671, -0.12682355113036897, -0.33497937322424648, 0.015693363372025454, -0.078712326242700498, -0.043104245874849255, -0.15482305108138567, -0.23546372175602243, 0.11116967724198698, 0.45544745949997928, 0.18491255398354933, 0.29246815522355635, 0.19673022854984701, 0.1971071562521477, 0.073292239939430431, 0.0082411542973328047, -0.11506545091726129, -0.0097698594083774834, -0.10085941287032674, 0.068419957471663198, -0.054338184555724992, 0.077438069850143426, 0.17116462221553444, 0.0012880410065990583, 0.13426211870566188, 0.11060346830231947, -0.073247383642716754, 0.037258219358590916, -0.012266626223890298, 0.07365939898386821, 0.043783414774759152, -0.10714901521414893, 0.086654095775271639, -0.068763019687166305, -0.058722296121373203, 0.044547323244407605, -0.055317944470135778, 0.033044549367641826, 0.057546028232389426, 0.0013722198605476341, 0.024825635569633846, -0.12204262640334872, -0.10189632816975304, 0.054772548849134656, -0.079577832810170182, -0.03822925555621319, 0.036494728908033278, 0.13217334923490376, 0.057211373582709266, -0.025832313366592516, -0.054716283139663077, 0.013913569251103083, 0.1233331303710279, 0.0048703487927865205, 0.0051743609192116194, 0.028390246160885126, -0.021507757354650846, -0.034672329558215337], 
        [-0.0056383990198644179, -0.034134669652071015, -0.022985171274173141, -0.060424905116766223, 0.054918574572591805, 0.068880856398085097, -0.0070134853831463756, -0.00648857975984031, -0.074996514150436733, -0.002575895078660656, 0.023015025445107737, 0.0083652936395193778, -0.031176094638168075, 0.04257338372246873, -0.066108851141710501, 0.029356311647627392, -0.013291948615577448, 0.056361974052678648, 0.034219482611279453, -0.012594934239664096, -0.014011911140779154, -0.062380978120753092, -0.071139980976335282, 0.0024195852417379371, -0.035945491331999854, 0.045638008001674502, -0.0047183763310553184, 0.066745235874213119, 0.045300106270492593, -0.044478673970143032, 0.089640508954303269, -0.096496181994925961, -0.027741072518757348, -0.0057167706753694508, 0.015013223612745458, -0.024603266772382323, 0.0013274270991194131, -0.035626865786564946, 0.017128923114182848, -0.045972517229731127, 0.0070036531582612499, -0.043147491260715071, -0.029564377599491043, -0.020695369020395371, -0.079784746542254759, 0.026833980742834287, -0.0019308823001443487, 0.083257616741787083, 0.1073292905313316, 0.074876843281655947, 0.04849810672333138, 0.09169820062468502, 0.04818495710565103, 0.052095948996421212, 0.0076798336966644315, 0.10519490110752421, 0.022530132067634476, 0.12672233854609458, 0.059196502607268456, 0.073165601756717547, 0.11595348012337076, 0.056154381226182701, 0.12932878620836885, 0.088424364447093076, 0.030086554964170939, 0.069155625788998448, 0.12091856805585206, -0.089931598708795482, -0.01901478695671717, -0.044734780540160696, 0.11875971731148252, 0.0019621703161090687, 0.098962626854570676, -0.014935988916705181, -0.058156651049639019, -0.030280527562952381, 0.039004290751598267, -0.084990899063584049, -0.046013083127367377, -0.014913760028022027, 0.021155606661541995, 0.064215604532574938, -0.023980009754675097, 0.028088175416754846, -0.015711319084152214, 0.055354677326641441, -0.10471526203870407, -0.089682724627139304, -0.285340049872218, -0.18318938265740103, -0.080773536226484838, 0.0051664926844681297, 0.057862500220190766, 0.064363929659878055, 0.089305276057643879, 0.033737553106247584, -0.12462760155848271, -0.15876787514393648, -0.3559472010693181, 0.09512910727572213, -0.14724808649647816, -0.20315881235781566, -0.084142690865390807, -0.21320097373742838, -0.18018782707193445, -0.21194408543671259, -0.10022760576175327, -0.021533171965098907, -0.037309088773028909, 0.12624286755807518, 0.22034948666962345, 0.18909901249809574, 0.15892762405783045, 0.012004127757768795, 0.05401853470010004, -0.028528312561415387, 0.0032335748506411056, -0.0066271780398669822, 0.08469326627498211, 0.11628744535951219, 0.19103429211412726], 
        [-0.086320145870854931, -0.042516109128475088, -0.0087762457752190298, 0.021241060023051747, 0.0047851426838899369, -0.035472062577375424, 0.0066937243438659755, -0.00018713747041253226, 0.0082764260933883976, 0.038739768015236681, -0.068077755324487108, -0.050241928574835407, 0.005362760135839445, -0.046723041558019832, 0.094159253636089596, 0.025986870656512701, 0.028402847338834608, 0.12799263106977857, 0.052174185297818504, 0.03174223717567129, 0.043516542799932806, 0.10029999162817296, 0.0098879715083901587, -0.035094445123424634, -0.007013648134597858, 0.06906108560461019, 0.096710723211050592, 0.081381162486572428, 0.057644504950450134, 0.011067196959459139, -0.018381106688349691, -0.082601705729948863, -0.052683720386780014, -0.019959970942575705, 0.019919134901318802, 0.074764134214878319, 0.0037733543810442721, -0.0014401279343240897, -0.10890764410839328, -0.057901568753596977, 0.062402857017999663, 0.10607261825733119, 0.093355866166383666, 0.16321573911501755, -0.044311905242035599, -0.0066519319038783609, 0.024113039196997976, 0.064553442056319327, 0.15171280458638239, 0.30457768060707258, 0.087041706132401087, -0.1300649085600688, -0.11937696051908048, 0.026590394860137298, -0.061874328052457871, 0.099972551939148752, 0.063820348697113671, 0.1176673091939654, 0.1041271101548924, -0.064651383836351634, -0.64838832442120542, -0.57718682640452723, -0.036255792881924792, 0.17483800093943763, -0.082878993225198747, -0.052895537911918783, 0.093450779297526765, 0.13222855504871267, -0.0031158955676405808, -0.20504263887375321, -0.56713098560646558, -0.17042057724882412, 0.5127831574851569, 0.08057209143675742, -0.069034813778198756, -0.076493686008414857, -0.0087908313214440509, 0.063359179277283378, -0.019296007009984323, -0.26310778686915193, -0.2643185488881028, 0.0043899974918117923, 0.41748261831713607, 0.23966204304538938, -0.073562286976180655, -0.095509848197381481, -0.23474683230766644, 0.028298339134101541, 0.061074713423239807, -0.16176706647884559, -0.0028366628109293551, 0.09422220116207343, 0.12827497526492809, 0.14706895212081389, 0.07130221932440324, -0.074737279889640948, -0.23885224275969291, -0.085022204291187037, -0.071470035260692039, 0.0091790645587277592, -0.00092605797513910237, 0.084223960477746732, 0.073149894313199529, -0.027624077571723846, -0.10044220817006712, -0.0028872784191937562, 0.084866079586548959, 0.010310191760266263, -0.00054869280830070755, 0.084217742322492933, 0.0054030147214450402, 0.095305448601468015, 0.021416282988412971, 0.032093023880259933, 0.095157599788670486, -0.064421030882217095, 0.028974651903107149, -0.0069885504710366086, 0.15811077547403324, 0.077388062511628844, 0.22282468960474461], 
        [0.076468088841762316, 0.094525480369675952, 0.013417457238376423, -0.065411302473434824, 0.0022049098738461115, -0.19542909991536384, -0.01036325544715716, 0.00068240056414065053, -0.025036329876752375, 0.10709994456938719, 0.17509342504686981, 0.14614357796041205, 0.053718089360122373, 0.033398784940497278, 0.05851426192031009, 0.10088626385947798, 0.12393259984256801, 0.00030036795350879553, -0.072506053021494155, -0.053549467701917083, -0.068974945061981693, 0.068142910765739376, -0.0032046953892697905, -0.023764344412627286, -0.033057372612734337, -0.046769398096507681, -0.12086069080136047, 0.13198139059769748, 0.010909080970491494, 0.11805853563674065, 0.00055654489186848788, -0.0058049086792519716, 0.035993036729574671, -0.0082657161673258817, 0.06835085226718729, 0.030100108849902718, 0.11300169606234395, 0.049423358201738793, -0.18768681794943032, -0.089816229291464017, 0.12209444756370379, 0.065398341021977502, -0.23087808851819352, 0.013400992883371765, -0.096887032265275258, 0.09659335704424854, 0.089714531995257141, -0.0038843040921827804, 0.12013144346588932, 0.37404235084965881, 0.21211466109416433, -0.011527049200226763, -0.049283581516932851, 0.018754604765659974, -0.082644951395777433, 0.10817924171979713, -0.058116213333392674, -0.049761441433128661, 0.038467810528975951, -0.27345429596810805, -0.84643475711205407, -0.29645101227395931, 0.088275591343327284, 0.11386954716890384, -0.043246196130588041, 0.0080366797469389184, -0.10745428649421408, -0.31046605943055011, -0.044147921462402942, -0.1780528735930817, 0.27176076889250983, 0.52374603988343083, -0.34603331319263742, -0.25552652026400441, 0.041698726893088206, 0.17631040231935152, 0.089000463451089376, -0.034971907472605007, 0.015213546106438838, -0.16155001168047278, -0.0044616122955418308, -0.19608326491524342, 0.52390737300255208, 0.38353319497536614, -0.18308498375136645, -0.36865739333612096, -0.051599769698091352, 0.18507587383644392, -0.03905957968438431, -0.11293732152378697, -0.29448175156766543, -0.24257847708785274, -0.020336287901657812, 0.16460493865286885, 0.042028560709745783, -0.034578770254525062, -0.080621311330306228, 0.0023780590689402997, 0.097090140036115533, 0.25587417177669869, -0.25284237850182822, 0.061610630265467842, 0.096069531106907025, -0.0530490597234618, -0.016158178823568958, -0.051427555078757459, 0.15564444153816212, 0.18885757011599216, 0.008434900332647044, -0.048989097338605264, 0.17712068560704061, 0.19164022835084701, 0.18133053179257821, 0.13611731878917838, 0.16529628517400261, -0.029342409275796733, -0.042788443152580583, -0.05354612070195941, 0.043048475539918307, 0.00043498176350832696, 0.043391550136365135], 
        [-0.067392496195279539, 0.15603790499391812, 0.33005542485267503, 0.17019472884597617, -0.0097698948495494181, -0.11247473585306066, -0.094639604761681095, -0.024494294275221998, -0.0039792348017262669, 0.10994471173246248, 0.034232693599063196, 0.17574157070401114, -0.058307873942274629, -0.086035618850559076, -0.089377803027838487, 0.13060740524380768, 0.083342578777239079, 0.045589343153219719, -0.021500197744655239, -0.0396176985432692, -0.040282895436041813, -0.05490829999440229, -0.029620701005614619, 0.033422070447237745, -0.18107420807866342, 0.062628310049176433, -0.15452481995687467, 0.16302391245774031, -0.19245645289137592, 0.025898631717022558, 0.13801998524859399, 0.04258082061725732, -0.10231719535275768, -0.047878669979998692, -0.084651539536313797, -0.10421201862848327, -0.11475351378970063, -0.077447511407303965, 0.1751315391960965, 0.31630961804401514, -0.21234361067848667, -0.13717780192340084, 0.032256315027359303, 0.16117460365654565, 0.12436610992083444, -0.1960223209372981, -0.10316972333420724, -0.17989050580766375, -0.030776595813913885, 0.36723472811894087, 0.26822822948346281, -0.14255591471090923, -0.34284397107479048, -0.1686302689762979, 0.20717723978005761, -0.043610297940625702, -0.21591071858781744, -0.35645281884894064, -0.35914145172088552, -0.356538210400283, -0.22838433437597963, -0.25414794447519751, -0.027037660554611806, 0.10429938241738665, 0.070313100422815272, 0.19633410406749333, 0.011469003363448749, 0.056100652037588905, 0.20979311430234168, 0.31382740777390794, 0.36266090418492758, 0.15632710796745802, 0.043118215553735822, 0.15941891562233157, 0.13799810456009839, 0.082456547922922868, -0.097362706765706603, 0.017535763817111305, 0.18875412500763653, 0.1322991804906124, 0.093159878677258945, 0.10015739152045183, 0.041771828139582301, -0.16461226846925919, -0.010269758847271757, -0.016121723288740217, -0.10277571356356704, -0.093042910656409489, -0.049186781888682446, 0.011398226094967184, -0.0002700750754074388, 0.0074397035104696863, -0.20028112611108601, -0.11832761511884456, 0.015078283473006854, -0.018452548998716053, -0.036365176981792632, -0.020537843773772754, 0.067467358606416949, 0.098981148732411567, -0.0055674402731293593, -0.092027331571991416, -0.011441078700565044, 0.040493420073942243, 0.072106906433957396, 0.047544507543730935, -0.010627683042822508, 0.010378739620038546, -0.037361124694111458, 0.049440729101802861, 0.23172672133978298, 0.066224037066196395, 0.053604258546808725, 0.070224030431698115, 0.00044743519172646407, -0.024040752967206758, 0.017027400054980629, 0.082502176517533055, 0.04411754553266678, 0.094445759480196179, 0.026070122517550864], 
        [-0.014874410513740596, 0.0064652695167254359, 0.18058268416301498, 0.10639801800645622, 0.1462435538011862, -0.18549085716772629, -0.11946585223026567, 0.13336875353850036, 0.1431606374421438, 0.21268324578348111, 0.074573037321912006, -0.02366332846738356, 0.00030162505180833521, 0.034923909748155624, 0.0004976437330811434, -0.27860795914035602, 0.019649427691563706, 0.22428728221168509, 0.10634587212193486, -0.055747191566415763, -0.1720320898158253, 0.14652429997383487, 0.083678061663021136, 0.080059996853547033, 0.12676990913561681, -0.20960004749175651, -0.11992969772303724, 0.079651052418806614, -7.0500155170752365e-05, -0.13159968070216072, -0.12185636491051369, -0.12212386528350992, -0.063471599790802455, 0.11591606931628659, -0.0003121176220944738, -0.16158531692072389, -0.20509977937167723, -0.015211020089078528, 0.33419363858602386, -0.021197972311742794, 0.051573854058283256, -0.081190824612454526, -0.024248010908752227, 0.031952786144903177, 0.089889994122808292, -0.055347674287966539, -0.19026769408809097, -0.20571271554392964, -0.0034200030533805825, 0.42337060834486751, 0.27260930919391929, -0.084997674317356983, -0.27009030033562559, -0.26984679182059201, -0.17357361480162312, 0.04962098882240612, -0.0035750137874818316, 0.036592663452975821, 0.0086359424090483965, -0.27032750814312834, -0.39994957932057346, -0.17183609797060095, -0.24083907079152436, -0.20001978264666828, -0.25264329034684119, 0.04388992532969703, -0.064259834604107113, 0.074043933060256278, -0.0141401497703907, 0.12916245281008937, 0.13074274654586848, 0.027929401203914232, 0.018943370061503276, 0.12690634935975603, 0.28764725653855128, 0.28887242369486649, 0.29998179562162908, -0.03702797972780987, 0.049533958877091146, -0.018197380038773844, 0.19754195456455448, -0.004838219692821645, -0.067001942206080342, 0.095328743007717764, -0.077328594117775401, 0.097921602001023816, 0.11726746577896972, 0.051206198923195473, 0.014744273305796744, 0.07451554959247797, 0.076594731593470355, -0.10212719204511148, -0.01010359791820685, 0.053405269433162157, 0.025967683489007781, 0.04284255334511395, -0.031649551549700956, -0.10112182853935778, -0.06200392753579289, 0.080996710847300729, -0.096227422002488489, 0.0027222873646967627, 0.0032193461798180056, 0.028018068894715878, -0.08039298406512714, -0.068243680675678459, -0.0065763377264938458, -0.10138976161964301, 0.0057770284685309745, -0.0019333108741061561, -0.028478055121693616, 0.078148481244774387, 0.0046718269408599078, 0.086525505520541446, 0.075149875794137733, 0.080911904001598672, 0.14299067937575605, 0.058254811658775857, 0.060032259045003374, 0.069309198206046474, 0.13733947078713762], 
        [-0.026403086547123783, -0.020917609288306105, -0.035101904048185611, -0.014306912310371803, -0.0042972195364363863, -0.058077881414638405, 0.038178564444327087, -0.0028111815245872307, -0.0038941084518951119, 0.0018813296297546939, -0.10078688565961993, 0.021583238308296865, 0.073511926370810235, 0.054528482565529779, 0.18987936161675673, 0.13986078152038808, 0.072940725148909008, 0.059256836874555796, 0.031090669459266307, -0.015844740201760396, -0.02361837940991314, -0.064937204109534769, 0.075642983811850889, -0.079466195820172975, -0.020769014944646391, -0.1040432783776685, -0.033012967133522031, 0.072788464701810857, 0.10548105228938642, 0.0019405459380496259, -0.0070425924572238563, -0.028398618166747935, 0.04518643635595633, -0.019186199862506761, 0.10714569627787791, 0.11822684975817753, 0.038571217188388802, -0.027458148938472732, -0.098264611636292687, 0.056390894688735219, 0.0401565173462511, 0.12886782282388654, -0.031555895682836455, -0.02313957239134061, 0.069122427442892292, 0.025102249881310351, 0.029789415685897214, -0.070652870595506262, 0.016314783301103308, 0.28688684230956962, 0.1702619783984527, 0.012540634976734383, 0.070850865861622578, 0.0048605100782281585, 0.033197753461072857, -0.091328697630636863, -0.15097408737648729, -0.024120509010246885, -0.024570140846357655, -0.41480944335467018, -0.77687153219324112, -0.27460992951941543, 0.13785951824037135, 0.13544781633672992, 0.13313817386432886, 0.082652802520245455, 0.089237854154998297, -0.044081186993255472, -0.076883101321275515, 0.12600419964023202, 0.40959366052382118, 0.087069283116805757, -0.46621168156582082, -0.43761485411451395, -0.10812067804268631, 0.01768640051563608, 0.12729816882590003, -0.064747448694650156, -0.10763464536172436, -0.08524826938436865, -0.23150319320387719, 0.15315343856469926, 0.55619678100250369, 0.23774692046366147, -0.1666896681928125, -0.17715538120217467, -0.16976838686613122, 0.025008504484853387, 0.060377572120923748, -0.20713294145422401, -0.18646194822017553, -0.08066176191384393, -0.0061085279041063756, 0.13478699831707003, 0.05663233125435585, 0.17462609841438137, 0.017491495363805537, -0.015088475844073315, -0.051792080298022347, 0.086678653491882515, -0.043885434378402269, 0.048343192446375916, -0.11502969777881612, 0.14059893815190727, -0.062258291133083843, -0.1133470132940385, -0.064953910797987582, 0.027741435654062445, 0.11898150752091059, 0.030260843676813906, 0.1715435352553567, 0.057333117013068161, 0.16205339464116109, 0.098608813006722904, 0.073912318801590465, -0.090815553665590618, -0.010370607459546058, 0.092275726044843492, 0.11030039690306363, -0.0058808178655301233, 0.033150477829288559], 
        [0.26549778400602297, -0.0011965636289475029, -0.022916846645374064, 0.042429672318282589, -0.13811673855846254, -0.037430883372056925, -0.040559761655224888, -0.023933501028027243, 0.079258690792885986, -0.034521886198656038, 0.17450462509358011, 0.041790623206738556, -0.022740750277082458, -0.0013539969792274592, -0.10138864950556396, -0.053305913995103191, 0.058908760919113429, 0.093372903179051017, 0.050140067951328054, 0.0084539027069934353, 0.021166550278200705, 0.10388208219238029, 0.0076348046928304547, 0.013138640062169096, -0.075217338734674163, 0.015069141903176639, 0.24056352482102478, 0.064464323761281916, -0.061520565707010158, -0.084694104843374141, -0.06805808373087846, -0.010291588861849124, -0.035798773818091045, -0.047137578793397347, -0.030265001058571481, 0.025114433975426814, 0.16953416528873916, -0.081754314336625597, -0.16483577488792853, -0.090215602604801506, 0.19963523508019926, 0.18826320002737132, 0.045614733683874802, 0.10861139159661171, -0.028328921848054453, -0.10351624721954029, 0.075321623520557809, -0.034012524380715156, -0.05869582193122358, 0.44090992264428214, 0.084019251874953446, -0.012849576849437369, -0.04246094681649424, 0.13375661768225128, -0.12950865617271876, 0.0026410719089161178, 0.044977821596146744, -0.090312411108535592, 0.055733826199718409, 0.060061106002439482, -0.71527711468395772, -0.2823457778181207, 0.031272225391427405, 0.11880824524917351, -0.004276759953008441, -0.011347995604354372, 0.0023675469047975545, 0.00043485509660366739, 0.18958682252204556, -0.085759813410154359, -0.45257574229053438, 0.15961507301364802, 0.31736731659376055, -0.062412313090533911, -0.33746000415329924, -0.24412114938634538, -0.06141338958196621, 0.13078793636510849, 0.20848205264195724, -0.20955124959973886, -0.28812988786360966, 0.14444443144018609, 0.46815272589228218, 0.085138932615497556, -0.22658732896395356, -0.027717075192951288, -0.16856281398342385, -0.13753538355338668, 0.15059745895188464, 0.00078477376683321054, -0.17890918828775537, -0.067288794701022059, 0.11813620983475538, 0.1093966751655376, 0.10647641748777864, -0.077849502674635002, -0.24214140318686445, -0.15597210638677117, 0.018451936251225459, -0.065300427051986951, 0.042693539088593954, 0.11063899895595043, 0.13459602826469319, 0.03073808878575153, -0.014969922588453921, 0.039307213284366038, 0.041004905630175364, -0.028333785559137958, 0.015742037834556716, 0.1142681683436582, 0.021003468182292317, 0.0077221565554255883, -0.00084805796798508026, 0.056396970533902469, -0.11249629487295199, -0.064031279727990664, 0.026888150461400945, 0.12621843363263308, 0.25061555337122832, 0.11067999815380504, 0.26256731149626561], 
        [0.072041366938857376, -0.022942168421451581, 0.20654586373496231, 0.0021517723151043971, -0.14297221024604706, 0.00060653444070969675, -0.058092024602730497, 0.13818306134022745, 0.17791598188652985, 0.1233364171367471, 0.0044528518545720458, -0.046059785461132652, -0.071586300701623362, -0.10073784448195211, -0.073740011819088014, -0.018045859949657725, -0.11863305748309075, 0.17617564045249434, 0.14977841506896911, -0.060747330352864684, -0.0027955678212599061, 0.16785791445724135, -0.1069842654168507, 0.082999543239617682, 0.12903189836552459, 0.047202915960078598, -0.030333770559695314, 0.099121495138076013, -0.051746600816636498, -0.20797950839871948, -0.0060523253550806566, -0.24640179139614737, 0.0025429730685309904, 0.056675953090986081, 0.13754251807005335, -0.079126091054087175, -0.17638998336346334, 0.055182291054404795, 0.29992999912154811, -0.12374985838286831, -0.15473061907953733, -0.015285688493998806, -0.0054135361559385919, -0.085840477677166474, 0.22138328866134657, -0.13129536918746371, -0.33146872033096603, -0.21124338516694569, 0.24711637651267865, 0.46372432064270608, 0.002706170884996334, -0.24160873975021052, -0.10141666077006732, -0.18322786018052334, 0.11158412852904591, 0.16760494025045042, 0.029994319879768874, 0.025682099122424931, -0.11958702177240098, -0.33142254026746104, -0.15444906222705926, -0.16381735574030895, -0.18306921419312999, -0.40205221035750643, -0.26593698021713486, -0.15682020509672343, -0.0002611999532893261, -0.028755553239042705, 0.27424611760615036, 0.21592566014741185, 0.2548708412154177, 0.097667264438525039, 0.20034297265732981, 0.19878852497931995, 0.30685861615553289, 0.17246611044410129, 0.018739306158119473, -0.031064357609991294, 0.02636646794424298, -0.18776759014039729, -0.1548117904943781, -0.037429208180667362, -0.11875155323060346, 0.10726451368176571, 0.17942453854019957, 0.11733499751282206, 0.0052778895571915507, 0.23971575743086301, 0.0079700671972805642, -0.05150273918961891, 0.055320037436683178, -0.040007912106383381, -0.092708107077101642, -0.031471166411299017, -0.098759311933464516, -0.092930223695402298, 0.055517948982359747, -0.037796492017755555, -0.0063425594979251848, 0.024882508886736474, 0.034983156636445717, 0.071931496060268246, -0.031592475014589311, -0.08635043298071296, -0.0090016951668947798, 0.071457472968914776, -0.060721615092941987, -0.14319100457707667, -0.048321071596804911, 0.081485340665029743, -0.028272073748030507, 0.063683871776067519, 0.0055479754033408712, 0.11811279082577647, 0.1406537167258409, 0.0040600159105901035, -0.01371930228275231, 0.12724155992658021, 0.099627352699487401, 0.13231658613798591, 0.13873127011038072], 
        [-0.027795762801489036, 0.19015374353251102, 0.097864499370304614, 0.12602658180552559, -0.033269074628986733, -0.089500715499542943, 0.04755987206442841, 0.073741060179395967, 0.10899124384412755, 0.010865871673477301, -0.057265695902511626, 0.17802866217244057, -0.063866674386830136, 0.018021373487705536, 0.025918690785187992, 0.052575744386986367, -0.021274343355739661, -0.13048583355248472, 0.029635938133951767, 0.021720608681606558, 0.074926473794418733, 0.05982963712461653, -0.076901179289292132, -0.026484578757325183, -0.15053176420715175, -0.13725487193154184, 0.087833236099425338, 0.066023074778773477, -0.09194730471659307, -0.2149017706218482, -0.020022004139598079, 0.061471356479686365, 0.041399022424228001, 0.031512385832822058, -0.015300106252072884, 0.026068470255320511, -0.033971179507359804, -0.056571591160507355, 0.18971099504863476, 0.088995348857820136, -0.15964206297954237, -0.1658659652422706, -0.11188281516561152, 0.12234793752765391, -0.052307886639272771, -0.37845338665931738, -0.096613913262061174, -0.069048222879974586, 0.06616884325249589, 0.45010838044304829, 0.11905472109942555, -0.089092894933614275, -0.12904510069418687, -0.036526361323872623, 0.054821578766419167, 0.024810152389095064, -0.29747232226539949, -0.29999245801199964, -0.30525086777987692, 0.020996924029338435, -0.24088524064845188, -0.24200960208227415, -0.089790636212287028, 0.040398429108714586, 0.02526034075506383, 0.02738946668147809, 0.27071204540517796, 0.36231522138833033, 0.17799155604913797, 0.14461290644587801, 0.039188380670349868, -0.12174172594558236, 0.062379698671313509, 0.053786808004118926, 0.077565363377853025, 0.08914298237579163, -0.082913498201941188, 0.047935941038607571, 0.032227521369624083, 0.1350352800448287, 0.01205967148514378, -0.0045403010495765339, 0.04815794062847277, 0.081651621340802089, 0.042005542551939397, 0.00094719895582431185, 0.013451602816859323, 0.046158292820973189, -0.086770110141339035, -0.019510393108648688, -0.011154645591627543, 0.027566377877780268, 0.061728447633688933, 0.01211458002765884, -0.023208391928071358, -0.031607312720043738, 0.059642540508696808, -0.036765889133114592, -0.015928896212769141, 0.0064080901614296526, -0.081899254344496963, -0.029769584611185507, -0.088820881932459628, -0.028070658348809674, -0.023691860637635141, -0.019599361049671284, 0.057438128582313362, -0.038195671616113237, -0.011284460479520503, 0.039955132103732395, 0.099447536075713397, 0.068549557521697391, 0.073047585512767549, 0.062482862870410376, 0.026345779828657455, 0.051335172427723452, 0.055074573131097329, 0.05467724826002196, 0.024905693805908301, 0.045383956637533654, 0.032908498475190132]
      ], 
      "sobel": [
        [0.021622445358756535, -0.039044416006162902, -0.037053874418492755, -0.070221762884057529, -0.14277178789038111, 0.010719228314107376, 0.23521416713985532, 0.042585931839459745, -0.066838617434589909, -0.035785952249555719, -0.04059161986118337, -0.04764960919347714, 0.015365501205621496, -0.0089412911030321875, -0.018093607051941449, -0.041156433480069976, 0.059193526101543679, 0.034970124073028692, 0.008553519349948524, -0.012132573309561322, 0.037118604219805298, 0.0111042284552757, 0.013666753799685936, 0.057115927906324922, -0.039502379569608656, 0.0017172576948862456, -0.10081077815789569, 0.037477947956047315, 0.16094952648226463, -0.067174391154844304, -0.034197546339512892, 0.043780102673210156, -0.028950198305796655, -0.075338573644424867, -0.037953071524472706, 0.015621349282515417, -0.0062936629565303812, -0.11863605824421611, 0.049183193707198238, 0.17069808619279628, -0.019042518561221543, -0.04243830041050764, -0.017632482496080508, -0.075731520983345624, 0.0095324271735924976, 0.032929665395846554, -0.014258152251170213, -0.0098967025572965356, -0.080727554710942118, 0.076950547720302298, 0.13010453872990779, -0.11441193151685329, 0.020647144228869374, 0.0074901484299721502, 0.029524457284514791, -0.012759212791825812, -0.0093580562023970887, -0.0058362056553335484, 0.064104388310505842, -0.16470494179736736, 0.094417901873677768, 0.13506762949639728, -0.044141557668112785, -0.052786309985618965, -0.010841128696787369, -0.0066630125429543163, -0.023002077304622413, 0.028816328444530765, 0.041660776154130552, -0.032027957181329177, -0.061564972379557034, 0.13252072121529024, 0.13006898279253504, -0.12914934815826734, 0.0036201984235415957, 0.036105422059974968, -0.012106081202489141, 0.0040581921012012682, -0.061907628638589444, 0.0076003677847962282, 0.036719522198239138, -0.14105768367312649, 0.20291678804533386, 0.060388661168118758, -0.096589560951574671, 0.054589139338588007, -0.10018987380801381, 0.041122915048875108, -0.036635205055412415, 0.11599660938438668, -0.072959009619801077, 0.0058380920703229103, -0.080459185128702371, 0.15241049645522284, 0.064258128129055292, -0.099760237579099881, -0.038508522408432909, 0.0044401907717541295, -0.027741747177757195, -0.03436923493861925, -0.015116464251280038, 0.0058884423068488005, 0.046096447137350165, -0.057576787493043513, 0.10122734774744221, 0.074735445752117727, -0.082870214204482526, 0.016464177481322798, -0.035808109707655661, -0.034750714642449623, -0.0037473815699105711, -0.026826464835886445, 0.0056597480426354915, -0.067769751698199487, 0.0568032112071548, 0.22043446790836069, 0.017122291321192216, -0.14459243689689222, -0.079001488823724236, -0.044799531513801144, -0.099981836109005212], 
        [-0.039421733196747563, -0.057937375185619755, 0.074729383153290238, -0.048044786321738378, -0.037187904273169307, 0.052702736653325186, 0.26142655681091542, -0.061948912592336147, -0.10675064435044604, 0.031812102150842861, -0.051384587313130461, -0.0060010201665935334, -0.00075896323127177395, -0.0050347123305201219, -0.041064685490394513, -0.017208529601601026, -0.0095905987638112492, 0.1312641811720012, -0.051457805250329162, -8.2456846587079802e-05, -0.063001416106639091, 0.00662330181235226, 0.0045051030283342064, -0.0083206197174064897, 0.034912618703663689, 0.012366610223709981, -0.059276577400723146, 0.052288462081552911, 0.15469918793188286, -0.051591770863725732, -0.045778765567233509, -0.0078960352945247718, -0.018756915070729453, -0.094971301563454444, 0.065529490603964152, -0.029158529667124129, 0.046869488668256493, -0.070024824171941891, 0.062730640085547337, 0.12065622163679911, -0.068657561209928358, -0.019058676809837402, 0.0074337488818226119, -0.067123189259470334, 0.02052950643564122, 0.013044402474017169, 0.0035087666835479231, -0.012030134512047277, -0.097183241294960532, 0.028501913912727009, 0.15192055414504166, -0.070640175383792636, -0.075748676174115875, 0.031913417912056846, -0.031981916836030161, -0.023049214827213602, -0.030048256280766128, -0.003272100719358767, 0.060009116628550338, -0.10610745181060459, 0.071599910972010128, 0.029747261693937183, -0.05575743675365958, 0.010540784627845606, -0.038579439103590962, -0.013055960468351072, -0.046603955087347805, 0.045824656843064061, -0.011912196563431354, -0.011526854332901983, -0.09532744148529379, 0.051839761132369919, 0.069491936832294085, -0.078788466397808288, -0.022076046119921762, 0.055685206611929355, -0.028690189358575251, -0.010750075363214893, -0.03415858882057192, -0.038029784044701004, 0.057878914546968016, -0.13134480414052568, 0.085607992375635905, 0.12614414610906796, -0.044827306225034641, -0.049757164378562924, -0.024712106659159953, -0.071507148759382411, -0.024192130054643594, 0.01362951330665179, 0.048433953081083739, 0.024359386660730259, -0.0051155106774921633, -0.1051390039795366, 0.14444393915678838, -0.0088548431670526818, -0.068772016948969117, 0.041548890783175252, -0.034167152155519381, -0.021582188034119092, 0.030182799067988354, -0.0040014629061505859, -0.0083662081635181747, 0.026868483822945988, -0.022177672343113145, 0.083313762448314871, 0.010010211142558997, -0.030072184867643174, 0.037843489218722132, -0.070383902910739399, -0.083548620924597278, -0.036391935661160918, -0.016615937603765441, 0.062407519296053184, -0.091602024121955034, -0.0068430434289176237, 0.095085963164938239, 0.048338691169388215, -0.027514079584110885, -0.13108991117518859, -0.096683781412949532], 
        [0.026521552932905021, -0.045757706968443369, -0.0065411884067677981, -0.085061179165153294, 0.14722881834024182, 0.047880871068860825, -0.019733975062189213, -0.051041982772424166, -0.06667461611485706, -0.018868367139866095, -0.041407892531913994, -0.1135165849534281, 0.06494420088328412, 0.02647152281327755, -0.00090233232791716786, 0.012634138439591477, 0.016736706302279282, 0.0066229675581288353, -0.027195497182580936, -0.013683547901060635, -0.053134066940332091, -0.037126651114853963, -0.022632575689387369, -0.0018942229311252846, 0.033462110153666749, -0.1182492365861096, 0.020164248753763356, 0.11022756484626357, -0.034399331322643348, -0.004049118679745123, 0.015540800383945969, -0.018762684144165639, 0.031382890856517, -0.034906110659518569, 0.0084090652945358179, -0.044334707129056128, -0.018500134350316173, -0.03677441221924304, 0.11924665863029466, -0.066556956316230043, -0.0157217782738675, 0.0088049969447932253, -0.073061057426566628, 0.024309817051911063, -0.0022227005091241224, -0.027084812593866206, 0.11300564532044208, -0.089657724195424393, -0.069330694925671552, 0.1522788162456262, -0.11814107191405709, 0.041522705944297272, -0.055858865503919525, 0.03589699264499422, -0.022839973856335079, -0.062359056865698051, 0.017954041686744696, -0.0023516930568763042, 0.024292471256874525, -0.020140941604535046, 0.16616378156217479, -0.060547479040507682, -0.095993631877149627, -0.035171531857736707, 0.00017003372512303105, -0.054486904900661617, 0.0051046874832875108, -0.024970809646617714, -0.026948648737005924, 0.13211777318770576, -0.015912595374394843, 0.14876817147359678, 0.079640820231395598, -0.11230282633524796, -0.0092441791382505342, 0.058819068131640312, -0.077920153621443, -0.090482271757585608, 0.11102826856966876, 0.042626094052885727, -0.002195518726305995, -0.036122267119977257, 0.047146706015838369, 0.18615910807929142, -0.063269368645278462, -0.06350591196288817, -0.029534950411274838, -0.029986821385842868, -0.01600285092423518, -0.030794045583080902, 0.0070419278101264172, -0.030444390319950831, -0.12718798875016957, 0.041134467878119835, 0.20405185525846614, -0.029811157180004131, -0.08705268526814279, -0.016364346582207326, -0.037891810417653854, -0.026401963421238878, -0.013779084822577579, -0.013032137299750876, -0.053538279554311299, -0.056779607970010679, -0.079377223053779367, 0.1823700488331369, 0.04187996112061794, -0.046827200345602865, -0.01941969694818884, -0.032796142514734263, -0.17044345125001231, -0.05402585591400131, -0.012647256817941261, -0.067305588382767928, -0.10224311399966124, -0.34971902980023623, 0.21798581432121136, 0.33121516682963281, -0.020319476107282762, -0.12056665218545416, -0.11656639490906624], 
        [-0.034745756067027414, 0.011922066572062268, -0.098449291804937236, 0.18031082717496805, 0.17476539334005353, -0.046518346780788547, -0.10946016872645539, -0.075727469917264756, -0.004279528158131065, -0.017696596899397482, -0.093983562864041803, -0.010800135732187889, -0.0045569323185074284, -0.031379361612413698, -0.11850675752648224, 0.2367012443070334, -0.014785597277977354, -0.063302331262239414, 0.022536827576278201, -0.025071938686129294, -0.0027915071853978554, -0.020334914936012752, -0.026008027089296101, 0.010703003018176116, -0.043029867343547329, -0.047195519513412248, 0.12321706281055818, 0.071786005282978516, -0.065282274004568347, -0.067638221239958093, -0.030061503019037598, 0.0027284619191995756, -0.030746019874450269, 0.034300317469793756, -0.01548496672283399, 0.00061797218192791159, -0.12212293111148122, 0.050022803331177507, 0.14679567560544277, -0.084454888753618507, -0.010415558440521971, 0.017746373390555303, -0.037888913263606695, -0.0042452861377769227, -0.074445323746479414, -0.011522402982276407, 0.0065317653275813771, -0.093067685671222949, 0.00025768497943800921, 0.23352117567061204, -0.0049839681159744506, -0.070961394834865091, -0.040406385819728594, 0.0038935193964216783, -0.063087695343447811, 0.0028549201129295862, -0.011365105715306072, -0.0051871840857717968, -0.011323145685494362, -0.15258276867230808, 0.10052717621074529, 0.12368458705231265, -0.077847390546605971, -0.059471418250267638, 0.028026328084379253, 0.048885641757861406, -0.019665152356733828, -0.017240548423916428, -0.041027265162514856, 0.0011509894918183342, -0.082241935288892523, 0.078604867885532073, 0.16228781290785055, -0.010523700344121451, -0.030965934865738454, -0.041503959227228673, -0.039718938540816928, -0.038748556042536665, 0.051470420149172191, 0.030039107409380247, -0.051469295929946292, -0.06031302048942426, -0.081417936654068115, 0.17732474397593703, 0.025219765376655087, -0.012727987606368688, -0.064523296079121037, -0.013167312882832634, -0.013895314055951707, -0.049375572219517737, 0.014179550428987366, 0.00062312741669435373, 0.007284514890717856, -0.10894474372759466, 0.027784507036578657, 0.19201834106729118, -0.085036361549911121, 0.023988581116611958, -0.022828104571709931, -0.014372052338263167, -0.026342474575395736, -0.0055467921457708243, -0.019470544310970943, -0.033931503651495665, -0.0091536544294716152, -0.036739492608220362, 0.10446088448224827, 0.020969726335668189, 0.024776193018576149, -0.078829730104535034, -0.053245132855933908, -0.010433310611867591, -0.010210640679316214, -0.051308025398501503, 0.037884008160365974, -0.099324142895464845, -0.12671107025252934, 0.083828567543130963, 0.12485291624334745, -0.019875141138885395, 0.021159178415280137], 
        [-0.073813428578515319, 0.0455540146431333, 0.21317974541835555, 0.054485804091818982, -0.10981511144389543, -0.10268425646919861, -0.046501163519200653, -0.055663971820637946, -0.020862778212020025, -0.0016239951963715644, -0.002629558452717437, 0.0099974094135370853, -0.1034433191717149, -0.0080814385350999121, 0.20536698014540328, 0.06126371127783943, -0.059836319781441494, -0.038790294476037351, -0.053677695944028214, 0.019923647746113771, 0.00067536759966540377, -0.035726207464042412, -0.035441015599980488, -0.024733560212268406, -0.15079839806148979, 0.10615849316820197, 0.18684548267040532, -0.064070280932145493, -0.067087150871195628, -0.0055311193006368775, -0.086092934395195775, 0.061425846472940575, -0.035219155593812501, -0.039575091828705944, 0.049801600957609174, -0.033980895382327146, -0.11533858246663227, 0.18080146842113642, 0.12760232482142872, -0.083273979291499017, 0.0040506256439491184, -0.0099808928737386143, -0.067759137702010225, 0.0026835543791823638, -0.0080343381743012698, 0.023532332559458254, 0.043117469529290763, -0.14058656961156304, -0.0016268330065314137, 0.15585324976494819, 0.069626580205874283, -0.1243686355938375, -0.026479623846533681, 0.020383199203834142, -0.028768935662109356, -0.0062857702132087974, -0.028321313745657696, -0.01168709222463879, -0.029152829240080027, -0.094922161457253018, 0.052872274283144463, 0.11087851911197262, 0.054251608937427767, -0.053296632141531824, -0.027558550405789028, -0.03854510047924891, 0.011349127429016066, -0.026961940685359908, -0.0058849527355114006, 0.00206567265274352, -0.06205567284106403, 0.027107120468617331, 0.076720226540601719, 0.0095546142954107578, 0.062120958180423839, -0.032629976188592258, -0.021507467744680639, -0.052784084736165693, 0.0030423247653671021, -0.0080315707017271191, -0.063924511094123684, -0.00021021475214931008, -0.10024981203982601, 0.1015512962019214, 0.064157555723561771, -0.069916492771215075, 0.082103122053598113, -0.046503334103402447, -0.0048848007312446012, -0.02758565365129036, -0.0140809555182348, 0.019042840231226918, -0.033131129031483485, -0.0089135928143168203, -0.054256262048008735, 0.11973166937117143, -0.018268580157864991, -0.023883645532026994, 0.049231832011293608, -0.014577787660792423, 0.046127787170430763, -0.075110202669192799, 0.046626886126717067, -0.041747134956936049, -0.03251487077000792, -0.054338733400030953, 0.017222361404870275, 0.11676824759018707, -0.026438027156220366, -0.032102992542435496, -0.055241109787953276, 0.056235913315409988, 0.009962320928060292, -0.032473557036913243, -0.019767314495135732, -0.029422259501493818, -0.05097365566473705, -0.086442579719706786, 0.012598629009327726, 0.066122215427308853, 0.01211368001348305], 
        [0.0004667357969735525, 0.00054849626182419664, -0.00013618713228205742, -0.00013253085166550519, -0.00080157461570931794, -2.691133605066146e-05, -0.00065764288432581446, -3.6579683998914057e-05, -5.4660118200278811e-05, 0.00014604635132977641, -0.0001696182636010491, -0.00015906228894248253, 0.00011235296245967744, 0.00050518233975373769, 0.00015356454550761702, -0.00031323963237401761, -0.00044300984864449697, 0.00053200461227834563, 2.3644509619358614e-05, -8.4831714279420429e-05, -0.00027200405736615936, 0.00022416316434788062, -7.1194625315486616e-05, -0.0001921201138109542, 0.00057396177783196486, 0.00035815207686277155, 0.00031159259445471095, -4.6937311155920448e-05, -0.00065506326926790702, -0.00011995580027392686, -4.2348005140095457e-05, 0.00010587326804443578, -7.9322550005703508e-05, -2.3721764802441496e-05, -0.00017040147572136739, -0.00057593165429725875, 0.00065222177121013831, 0.0002665414702900902, 0.00035667127123066925, -7.7691777858289972e-05, -3.8172905741614115e-05, 0.00010049476721076365, -0.00012168481580056376, -4.0491064147097386e-05, -4.8159547975361617e-05, -0.00023287151964227542, -5.0225019821443275e-05, -0.00080182622897892767, 0.0010438945255279268, 6.1969706422453793e-05, 0.00028901935081157955, 0.00010579037778190963, -0.0002724803030345158, -0.00018248333714674828, -9.7893609415735343e-05, 5.6122266787632407e-05, -2.4109435187230215e-05, -8.256402305014017e-05, 1.2275769358770228e-05, -0.0011837300475309662, 0.0010387599962857208, -0.00030106456925788061, -8.2942949550413037e-05, 0.00046305034318953886, -3.4941522492179002e-05, 0.00026047826388847961, 8.0063314441238695e-05, -0.00023204308256855825, 0.00028043251942060473, -0.00017992926522449743, 0.00024111256847714896, -0.00077707368713531705, 0.00087258670230551394, -0.00047310681975866464, -4.8903566618300337e-05, 0.00030165105394839128, 0.0001523693782892032, -0.0003214720006770571, 0.00014500490168671901, -0.00014868675403801115, -8.4069171507120122e-05, -1.1488930694997235e-05, -7.3103538477843621e-05, -0.00027257580575307944, 0.0010045581248467467, -0.0006063389015931106, -0.00030283901680250476, 0.00023946215844236965, 4.0874050688199964e-05, 0.00020668776684328811, 4.6264165950036471e-05, 0.00022120225803604759, -0.00025433190468929917, -6.962082684627835e-05, -0.00011541458342628763, -0.00025522292698570287, 0.00090807721332292896, -0.0001479625967791515, -0.00027356753032273425, -0.00019226090250733943, 0.00015027389750788632, -0.0001041059494256247, -0.00012272487478783012, 0.00033766836773768683, -0.00040885269632123106, 1.4064712871159069e-05, -6.0893502923708986e-05, -1.2270143878473361e-05, 0.00046367307715139069, 0.00018271794499197247, -3.3562064556917105e-05, -0.0001861452801387312, 0.00024747597697189313, -0.0002203964126913302, -0.0002655235806198683, -4.8267361401083814e-05, -0.00013654454453562725, -0.00016522236506379823, -9.985241041834958e-05, -7.3084705394677342e-05, 7.6496751819820884e-05], 
        [0.00014192493009219931, -1.0849997241092063e-05, 0.0001677566369007906, -0.00011605018962013852, 6.6756115456784171e-05, -0.00015562939648154986, 6.4164428186169048e-05, -0.00016144031937152109, -1.1567201873632915e-05, -2.9389666004610293e-05, -0.00018545690110512159, -0.00014192965770924021, 0.00015688900011993565, -0.00022987170475181201, 0.00050601894856794338, 1.147904121199389e-05, -3.5358004185095937e-05, 5.4151378378504422e-05, 0.0001162675133458968, 3.7185858557914342e-05, 5.9553590523481192e-05, 3.1314783550819014e-05, 1.2057174878739307e-05, -9.6695987945233375e-05, 0.0001044847847413502, -0.00015507143992373601, 0.00022022799757739214, 8.3866880430806534e-05, -0.00012962060856349517, -6.7578262074236006e-05, -1.3555990987554334e-05, -3.5737704882077281e-05, -4.5808795552465531e-05, -6.3548782069412779e-06, -0.00015612384897251141, 7.0085223497301508e-05, 0.00029763597940726805, -0.00010577343553129503, 0.00012730480076296458, 1.2399248204064683e-05, 1.8645837807265697e-05, 0.00024212785489370614, -0.00015872860498579444, 8.3707241213322459e-05, -0.00032597535960855739, 0.00041133058083372975, -8.8687656587524422e-05, -0.00049296444707497278, 0.00020605423444788884, 9.3561174143157178e-05, 0.00024762885023246056, 0.00036524470776032325, -0.00023688791970755824, 0.00033172236655580611, 1.2629398500677014e-05, 0.00024080466741264323, -0.0004006372668640644, -5.9563129205519871e-05, 0.00028033907001259045, -0.00028345593539583214, 0.0001339187071822609, 3.0493512604909401e-06, -0.00034838001372515526, 0.00059746238210751923, -9.9846486972976489e-05, 0.00041453928701537524, -0.00023073595005270592, 0.00034208508615191091, -0.00016580817990245744, 3.9765764453518482e-05, -0.00027830373100982964, 0.00012537929853667987, 1.4736238159517717e-05, 0.00027567237234161351, -0.0004888438970630446, 8.7212866113350884e-06, -2.0493341142208132e-05, 0.00020499966401848688, -0.00032257655852790945, 0.00032032979815644486, -0.00024321547888298814, 2.9086686149870644e-05, -0.00028867101368240666, 3.0825398830508499e-05, -3.6797589493049732e-05, 0.00029228356787954629, 0.00052891319033434442, -0.0002405873549854512, -0.00029898967584843228, 0.00023190078400971148, -0.0002429945590425725, 0.00012631644056069861, 6.8365713355195146e-05, 0.00010549540200119334, -7.3225818539288112e-05, -0.0001018216734522126, -7.6341945218480478e-05, -0.00040021222480832175, 0.00051868831128347101, 0.00045282278366730322, -0.00025642054830855854, -5.3312433065010739e-05, -0.00015071920454498566, 0.00026346273973178874, 1.5723135233985941e-05, -0.00010611552565827076, 0.00010030771494402846, -0.00022901452791959653, 0.00029515413913742961, -0.000378103168520591, -0.00048426748955096577, 0.00022179377366644826, -6.5521532191739271e-05, 0.00033674118948758686, -0.00046179298814816305, 0.00010507012245129441, -8.1386075936565327e-05, -8.5409170546155155e-05, -8.8995879690176305e-05, -7.5853311223957054e-05, 2.6564465721370945e-05], 
        [-0.010683117891894434, -0.026203517318029858, -0.035348631234462732, -0.0089039476697588757, -0.078264832133459569, 0.014533495211292522, -0.039735497439144417, 0.0028868136525013826, 0.0082563432282671927, -0.036876327986247723, 0.0019617637025766575, 0.052924193889526149, 0.035478526483873563, 0.021452215773512737, -0.012058498396393419, 0.032415748027272206, 0.0081487313430126454, -0.0082878430591127438, -0.011301795333024143, 0.045191867790093425, 0.044327234784062801, 0.019363765884505585, 0.11356516329476325, -0.032979098377165179, 0.075697516409139673, 0.019096851467574182, 0.0083417566704703065, -0.0060608317184354613, -0.024521250232898754, -0.0062563950604268004, -0.019424549966013421, 0.042617826976536294, 0.11771045618920394, 0.14806853397919761, 0.07242131632098367, 0.05825312332492652, 0.036446775225891515, 0.061850429851318528, 0.049704669459738865, 0.055430561498123407, 0.070266675660789452, 0.10791776313079825, 0.053117037443650719, 0.12942596556811628, -0.037520978380153586, 0.09370958660148157, 0.067576770360366523, 0.068724981441630334, 0.076126783309853729, 0.12311586010135872, 0.083411336336100567, 0.039387077762465639, 0.056425147284172514, 0.014237983090907416, 0.05663383500458416, -0.0075863136735932618, -0.083041404471318359, -0.033129983631350668, -0.027636238642020229, -0.047768510607462976, -0.063296204253032298, -0.062578786189099095, -0.046277350408935075, -0.0014999128228245229, 0.03590831793842944, -0.15153224136771898, -0.067460025003045793, 0.052979163538064387, -0.025619303894120496, 0.037941615130038006, 0.064910895081062597, 0.02230202042681128, 0.055270751907329552, 0.092705497561621455, 0.018963378238524085, -0.053973086464825723, 0.0083301495482443391, -0.021218159929265457, -0.030570605486973344, -0.0021454021899788445, -0.026875831051993617, -0.049042673990263554, 0.0051260754520939906, -0.0069454575735653475, -0.055541305029020473, -0.024578161869174033, 0.015168445899802574, -0.068003320439275344, -0.00048112098031016792, -0.056520449187868235, 0.049669608030607104, 0.016316278463441431, -0.034085744774588048, 0.063066726935569931, -0.0080033228303419916, 0.033385837489126907, -0.044575967029709188, -0.023441355247158995, -0.044509209526914333, -0.037161871027802405, 0.0073190175238074615, -0.073157626655641225, -0.011373417119033976, 0.072030602760077223, -0.018015670069586549, -0.00013858608242610544, 0.028374321207992069, -0.025567271987302419, -0.013903313076025374, 0.052807958873996745, -0.038318416663269968, -0.022987196513577734, 0.0062781886098834845, 0.029733530440722515, -0.090236504820046956, 0.0094683723177513002, -0.067606870737129718, -0.012207168455778569, 0.0039498809113422051, 0.0017680506907682904, -0.13205065018196771], 
        [-0.00048965833343866949, -9.6133835888349839e-05, 9.5024409277118249e-05, -9.4831286650623459e-06, -0.00027318400850575436, -1.2859674043262659e-05, -0.00018753431578469315, 0.00025359827484301711, 0.00013593197045175948, 0.00010671640250792952, 0.0002520834422912871, 0.00030575486026798715, -1.8677323289251202e-05, -0.0001359879426809929, -1.8596724042641011e-07, 0.00018716058456554746, -2.9456499708931105e-05, 1.740372235658344e-05, 0.00029170983943693773, -1.6893395160838542e-05, 0.00029142657372808328, 9.8200013060809055e-06, -0.00012201675367805309, -0.0001821511041478624, 5.8727835859570532e-06, -2.3871151498152526e-05, -0.00016916476120136525, -7.7175542381152651e-05, 0.00053887625860423588, -7.5954327703381397e-05, 0.00047546289643572714, -0.00048532553637742337, 0.00025243488298501968, -5.2889703167802171e-05, 0.00026631391925304587, -5.7069012077345938e-06, 9.4805004026109196e-06, 0.00012583697976619596, 0.00045284900761148605, -3.7921325421477747e-05, 0.00010519128394604477, -0.00021574981428573378, 0.00013058799005061239, -0.00055512020354029647, 0.0001429939062747021, -1.5370391169694519e-06, 8.0653707619851578e-05, 0.0004067755777601087, 0.00038999196381222373, 3.6877374512293837e-05, -2.6107472160714212e-05, -8.5583627116723321e-05, -0.00015583615391241354, -0.00011965945062380329, -3.6535280401381234e-05, 0.00054094084831822487, 0.00037630623255849316, 0.00052269658935158447, 0.0001311189140969643, -0.00040060332113688729, -0.00026993542547641691, -4.3072617173671446e-05, -4.6582954130174048e-05, 0.00011704093153555931, -0.00025561950600206523, -9.7988597560771939e-06, 0.00028045364993524793, -0.00016083954183774771, -0.00025723583975659214, -0.00046505036856739346, 0.0004039314021320739, 0.00034091132239879793, -0.00019370884391506013, -0.00012426188246242656, 0.00014610355538470163, 4.8874632263766482e-05, -0.00016902502798560315, -0.00037191521627369384, -0.00021579609440836728, 0.00039961530180981919, 0.00079812645123661374, 6.5350682398865323e-05, -0.0006637329476850487, 1.4201540184693995e-05, -3.0668778868838537e-05, -0.00013015400162084967, 1.1834065800214733e-06, -6.0452686671833011e-05, 0.00046003104033802422, 0.00029649152999927653, -9.7422158500198863e-05, -0.00054615394798594036, -0.00054555045433753169, 0.00030505150102402845, -0.00012282307114507701, 3.1042354130282612e-05, 0.0001268834643597741, -1.1535964674028176e-05, -0.000176869063298763, 0.00011095223633189599, -0.00059224455990757041, 0.00021684456404430508, -0.00045799378668898855, 0.00057995315228567129, -0.00013936531291453697, -0.00021220643616092633, -5.4136569800536383e-05, 3.6608907478852953e-05, 4.5939329531563544e-05, 0.00021478664432446337, -0.00032699755621773408, 0.00012689634262805921, -0.00034230468492685989, 0.00034767742030643312, -0.00067549072348433575, -4.1513304792857586e-05, 0.00018063222856385536, -0.0001881377600047654, 2.8973339703669554e-06, 1.3507237580291653e-05, -0.00041261401631562805], 
        [-0.00013436781157403349, 0.00012210804930180494, -8.2414422599333403e-05, -5.7301863805120368e-05, -0.00030739486254432319, -2.2492441595647894e-05, -0.00017176271831247786, -7.7101711693922104e-05, 4.7107570331945958e-05, 0.00017636492999561354, 0.00032836342762108256, 4.1087699566198788e-05, 4.9949350228714606e-05, -0.00011875800957268645, -0.00023943950047199125, 6.1005765033241011e-05, -5.478607070270522e-05, -0.00036631651977345886, 0.00016730329224556167, 0.00025493108839291095, 2.2226604097883018e-05, -4.460834588607826e-05, 4.8917262263498129e-05, 4.1964097110273185e-05, -6.1314318202332352e-05, 0.00022686166653692816, -8.9247938207914768e-05, -0.00019302109650852495, 0.00023804561802531765, 5.5691335582086499e-05, 0.00016699837552209412, 0.00017965604481385428, -0.00038349627139956134, 3.1918639160310319e-05, -0.00021914285377726619, 0.00033657077159139626, -0.00015380926340578804, -0.00012640377325787849, 7.8443598190786057e-05, -2.5921418374194594e-05, 0.00038527701539335657, -1.4538798784193008e-05, -0.0004928838914605993, 0.0001028736165327223, -6.4383123833527955e-05, 0.00023810111270487072, -0.0003138610278263735, 0.00014008262478101469, -5.8913029426684027e-05, 0.00032747301458163625, 0.00039023015135071504, -7.447541605180158e-05, -0.00041729123414768754, -5.2260202109827292e-06, 0.00012735624759406539, 3.6629059847052489e-05, 6.5628761203077868e-05, 0.00021839305017589544, -0.00011813071478151277, 0.00021698143307999351, 9.6287514756765447e-05, -0.00026080214823867576, -0.00039654273422187053, 0.0001167125140248762, -4.0162626760084641e-05, -9.6609081976166411e-05, 0.00019201207703931078, 3.5894679076095559e-05, -0.00013215815809999171, -2.2031139214596929e-05, -9.3108375419856393e-05, 0.00025391719334226688, -4.0757163905339486e-06, -0.00012808461454903692, -0.00015139230658256335, 0.00022616830885492656, -0.00010182951161811366, -2.148301565258609e-05, 0.00028356599204855393, -0.00028490640829138825, -4.2891750138746021e-05, 0.00041455916689240452, -0.00012603793107361649, -0.00039707365188554333, 7.6033479427833894e-05, 0.00029653613924018885, -0.00021374066277618509, 2.327117911399279e-06, 9.5164172314900208e-05, -0.00068014772917070199, 0.00037026320560729076, 0.00019251368934372626, 0.00013551091552941458, -0.00031120640022949675, 9.6849928779750571e-05, -0.00011268464289018038, -0.00023013062013480662, 0.00015401847444745237, 6.4205342809563193e-05, -0.00034974297656181069, 0.00064853396513063488, -4.4729954720712506e-05, 0.00021224544758897262, -0.00034308486716421273, -3.7733988311935626e-05, -3.8868349370377309e-05, 8.6498659390518706e-05, 0.00014456882901125664, -0.00014732698311536454, -2.7613250230533459e-05, 0.00026354361705206719, -9.6315009198065515e-05, -8.0323755983983947e-05, -0.00018998607556105357, -5.9127250430376921e-05, 0.00014091011956727205, -0.00012996537552621701, -5.035229587568163e-06, -0.00015231914400671252, 0.00023099545000895144, -0.00021587551857769893], 
        [-0.011113779995796793, -0.03264498365428932, 0.032393323977037813, -0.053019160588067986, -0.052289631646412357, -0.14090905182270536, -0.10662971417607917, 0.076743291125837804, 0.19183514586283293, 0.090512780806032617, -0.098345016495789458, -0.011356541223655056, 0.036592642227365337, -0.05386114520342726, 0.021336401858911159, -0.047044247520027484, -0.079543004866070119, 0.069134815260962129, 0.16070569312483246, 0.0038456939033156331, -0.086695570600295979, -0.030081196583984296, 0.022665182076173018, -0.023072771394334196, -0.018331023996742943, 0.0011057635434971857, -0.10917005303651976, -0.046906120609124184, 0.10879721410619564, 0.17214824601663198, -0.16345419009446593, 0.047387129776087451, -0.050130663511261289, -0.029615346796994284, -0.03838162551818361, 0.0016626820450895159, -0.034779798819093558, -0.070943150474272645, 0.077909629347024584, 0.23019976126978281, -0.14284459018595042, -0.033305599050588101, -0.012579026667957113, 0.008416322955214002, -0.032993580574607821, -0.048339483281004764, -0.019525308661791051, -0.06984453532422541, 0.014727444216795713, 0.14996686179447366, 0.078031653033860421, -0.15724129008645732, -0.0040330836908469385, 0.020646425620089916, -0.010654017089976087, -0.068656231122255579, 0.024297601174406921, -0.0024877247232191202, -0.030227587432549025, 0.090227014733457928, 0.080842697753928994, -0.086654876220284532, 0.012959715152821044, 0.018917133744079905, -0.045623035776481892, -0.032739391111555147, -0.036378708143565655, -0.052934938098819245, 0.0072628401319736191, 0.025315816651209383, 0.065354988831480165, 0.050830135881118316, -0.051373434850408066, 0.012062843823364068, -0.053921495179175792, 0.0041695268579246721, -0.0082264831168346701, -0.011220404620470506, -0.0075848833821621966, 0.059000048222753509, -0.039920656848886502, 0.11125743952652592, -0.021519034940123919, -0.057332486848285534, 0.0055259953878360642, -0.004210488740013946, 0.0091543763669089812, -0.029533996573194402, -0.0046618916800951343, 0.086826792205214331, -0.087905681977735253, 0.060049094735024719, 0.082239574433654317, -0.067950997259202672, -0.052836508855635379, -0.08178791847111451, 0.043805514127629036, -0.035918644150708633, 0.030943034122503259, 0.048873707654045383, -0.078419292949069422, 0.036039114074194384, 0.15301950458013516, -0.0020635318713273093, -0.062144295014710749, -0.0042182974120457458, 0.018342722938454691, -0.006300758423097505, -0.011523161046205615, -0.047258227242310442, -0.028717665984571757, 0.078801626072277128, 0.069201975729093201, -0.080059626916277549, -0.14106514638245227, -0.025481816722181624, -0.020508997543042289, -0.01550940323134436, -0.0094705410641920743, 0.014878235172793254, -0.0034914923955158606], 
        [-0.049718431000340013, -0.035758892423982919, -0.022242832727659471, -0.035623182950114192, -0.068946269831888563, -0.14441155948249546, 0.23465172605260556, 0.15846679355786267, -0.065971982658149603, -0.018535961144545934, -0.024797174426993557, -0.0076368074855745118, 0.0066227612551196706, -0.017526536442783753, -0.010789194077319021, -0.040286032320290231, -0.0056961640316873343, 0.13973218361056991, -0.042841041755946108, -0.030912602586234482, -0.050612857016701492, -0.014451167351557435, -0.033321133339262024, -0.05328285157863482, 0.0084956582707995769, -0.033398618106686311, -0.10205034437720886, 0.030196139746642148, 0.2111090058125159, -0.085711586785949756, -0.030766677319517009, 0.0065005921075326949, -0.032107623303140612, 0.010380556950672306, 0.037670595949217942, -0.056206087740664497, -0.03260370052730352, -0.1561008405998785, 0.15115473184883424, 0.087468002407858153, -0.079714267429888366, 0.018202271840872142, -0.0045105431343512043, 0.026832614720378654, -0.043425866989209555, -0.026066523869096081, -0.02528972705916014, -0.042096869598745652, -0.070925721200100544, 0.23530476499553221, 0.011520678728863858, -0.095816584560911452, -0.018725466710660395, -0.037048558120658111, -0.026821912497833961, -0.01958185753544785, 0.044676748759910678, 0.028809635953963519, -0.05826188687569988, 0.024776575417213054, 0.12549740842491305, -0.035929129393416859, -0.087118885673774085, -0.0026901477265302994, 0.0046237475146514552, -0.018050296026597318, 0.016779033899148251, -0.012651134169698123, -0.089944685004007208, -0.061952592133401846, 0.10990524701743055, 0.15037999590612067, -0.090163580684813671, -0.035133862878716476, 0.019258114736171422, -0.023010078969621379, -0.026283022557721171, -0.066214843146827421, 0.0036081782275008047, -0.019205792810695364, -0.020171831093293915, 0.1989806157237472, -0.024158681457602471, -0.048082389466265169, -0.027408223538038137, -0.075525139612688572, 0.064454122161252458, -0.058575382013248689, -0.0086368186115048165, -0.0086035574489204472, -0.06007705027057858, 0.045971736951263456, 0.1261833313396889, 0.022410860296875529, -0.11049746928652586, 0.0069619169388782584, -0.0094112963401279358, 0.015502770454642434, -0.048438381054499359, -0.04682917755552031, -0.00022238890926721058, 0.0014117579120073859, 0.089525343812046881, 0.079141464963506603, -0.092462497930681176, -0.018048972610507721, 0.0014867057354299527, 0.0047595475949270549, -0.0017287964469103294, -0.027304885422683407, -0.032110966856619273, -0.017611444082195685, 0.073415867740449725, 0.11601887154016219, -0.044348274914784672, -0.098407184448392707, -0.0088182813632140204, -0.042990020804917144, -0.039402653777542929, 0.014836527788627827, -0.050635006343958483], 
        [-0.068700619776660254, -0.032923512495656206, -0.028684838657940429, -0.027346807901848392, -0.012437513369475654, 0.04530776482700738, 0.14146963669196641, -0.024737285685323483, 0.021872256378449306, -0.029614351891534337, 0.0014704403181207623, 0.00061449227400070527, -0.065002449904543999, 0.036643808233299588, -0.032209783114478335, -0.013719980201209792, 0.00426188928669817, 0.043978918430192894, -0.046107785040272825, -0.020623098141049494, 0.092668229881848918, -0.085226509118630056, -0.047326937943777285, 0.056895689933855451, -0.038867744245311142, -0.0917328495389379, -0.0024675929250557657, 0.054788109957318712, 0.092324754023680886, -0.083976508299966168, -0.022272456922531034, -0.015278750110002501, -0.037660821714487036, 0.0079480050392521789, 0.035560068131964134, -0.051925142923762622, 0.0048634554998182172, -0.05161245009194064, 0.069926770229373256, 0.019603910194766427, -0.058129948226766356, 0.034120468186704639, -0.02278922943675725, 0.0056803547423852491, -0.011190673015587217, -0.045209539216465838, 0.042701687889130674, -0.027745655178843524, -0.083075835673998288, 0.15661348719695239, -0.028533516906845684, -0.064018904490445727, 0.0071637332946361681, 0.010946513456513277, -0.026171760394870333, -0.039176510971348735, -0.052625382319528485, -0.032610615849156512, -0.024151118786911202, -0.029592259235384895, 0.14367118076515981, -0.017566095578734467, -0.054659523961357363, 0.057155438782691928, 0.029811006572219523, -0.061339856579619337, 0.040778203393560836, 0.011699351049567291, -0.0088243741839378435, -0.13867569479385672, 0.0070547616779323835, 0.13839794109305759, 0.034595641270555019, 0.011188421962504996, 0.048423842059529723, 0.010037686002641197, -0.0018497520280923579, -0.03785572945780738, -0.043325856166240725, 0.0080411887462800754, -0.13690073357640112, 0.15427462008814505, 0.053185882421555128, -0.062848800580544401, 0.098908008073918904, 0.024336051774163703, 0.0012517787347508663, -0.02085091104539423, -0.010458871685104971, -0.013997622908016392, -0.062995080399173814, -0.12717711870320439, 0.18117010896522742, 0.12557740084057686, -0.13691773676225652, -0.022943723539645338, -0.023607554390057763, -0.0059308586972001906, -0.029008536818149494, -0.11052936897449649, 0.01676636486201016, -0.0299062367975718, -0.010995032071071418, 0.17825885072525774, 0.052695253789213546, -0.15856871540171691, 0.018373413764860413, -0.062619297278227404, 0.02519282178146548, -0.0018928521098937135, -0.067840528056599431, -0.050794234172886574, -0.10116936098857549, 0.13362153032125096, 0.3407549635188265, -0.12171874249866213, -0.21070461874955115, -0.083359485995745247, -0.078475687667453164, -0.029251874573081954, -0.22249275032005275], 
        [-0.06557132981627023, 0.057387702833085238, -0.13424650578557906, -0.095896584636417009, 0.24651372455616202, 0.14475023251856034, -0.10963067096889349, 0.025484984396096345, -0.0066750222960001646, 0.018031088995289345, -0.072827217628290308, 0.03072620730408979, -0.044556908489582235, -0.015540996433387919, -0.05684501901116374, 0.085633232484377222, 0.10033013618746886, -0.03742948303225134, -0.062461794161772756, -0.033926854157860981, 0.014833446973797017, -0.031363558199583357, -0.023246290106997476, -0.032758472101354803, 0.02961216484574446, -0.098209283771892336, 0.077943952125225799, 0.095671313752652476, -0.083245612577197897, 0.020905717661596379, 0.050810743632591124, -0.039132208011026501, 0.038703668840843024, -0.040633395391036504, 0.00067527853135830943, 0.013989351386346478, -0.13054119279823606, 0.045163670832086458, 0.11112335558160061, -0.063735525164717574, 0.037782451346632551, 0.017424010888546733, 0.061583223515939242, -0.063673752054099628, -0.085357765364971541, 0.034715298877846669, -0.0030215396455599607, -0.074514610988951263, 0.12038888042278573, 0.11914516519976012, -0.066498159580288485, -0.05748981868984826, 0.021247874106887919, -0.043395801614457857, 0.056092405859263811, -0.05090562582130901, 0.030755476067636615, -0.01704186923067369, -0.086372670819938935, 0.043707175171625617, 0.071729094880973843, -0.046172009255220331, -0.12569107869407672, 0.062777551061848486, -0.054877769372877368, 0.0098492983016237878, 0.042534935799133616, -0.025427465203307967, 0.0048504140831612669, -0.034534331263074952, 0.057141387115833393, 0.071824130085929444, -0.078856689082400497, 0.046186589384248661, 0.014021943501927311, -0.0059724118990401249, -0.059074101001239145, -0.052311447457610932, -0.018659392189258467, 0.016795417135235888, -0.048576100654742473, 0.005696565881307656, 0.17000984187958204, -0.14025171691578273, -0.014920288189935977, -0.02450105995756531, 0.067679703872773542, -0.052641577006571058, -0.077081344604230786, 0.042504990176632659, -0.035988224869212784, -0.048450595717557901, 0.047674683252699607, 0.055032983271467065, -0.064761096554407135, 0.020292721123239928, 0.0052680731730131965, -0.008724092125284879, -0.060606693409500888, -0.069110808496291656, 0.024795838594949066, -0.027097938518918639, -0.0012386914962327609, 0.015076588937461598, 0.055874096614049337, -0.027944142757713664, 0.0052288086550267444, -0.048321181890514542, 0.085961844501422302, -0.0020462600675238323, -0.11993808096408821, -0.049600877387059851, -0.092973801829541652, -0.031980349139618128, 0.15102131486065962, 0.082755130102661653, -0.05812569461482564, 0.041661463970234, -0.037047057993232331, 0.00087626833626111805, -0.080283390973512447], 
        [-0.034048621962106597, -0.013918394846682072, -0.06548772211399817, -0.047310073653148807, 0.23782208982702535, 0.10576669895809315, -0.16563976884791567, -0.0108553004703765, -0.078836410655958505, -0.050020076625922213, -0.082311636984324865, 0.0046221592868833806, 0.027970146226042773, 0.0058953162542283617, -0.040403941884181518, 0.085253805301136465, 0.028249211911977573, -0.056799025228174559, -0.038359856825438986, 0.064561651783710705, -0.004954534081803498, -0.0026872237095931402, 0.015597774984475364, -0.018251513667145277, -0.059710086387074215, -0.057150732848946277, 0.13137766031471873, 0.056842489251044542, -0.023477089345610051, -0.04715337162739789, 0.00085770297510117874, 0.011008761901938887, 0.0056123703931996918, -0.055914997492275034, -0.028097049059282828, 0.048624529525826458, -0.09611678916961594, 0.13044452791174554, 0.1272054903208456, -0.12259017298086688, -0.022445774624546361, 0.0076033086689639515, -0.007813929706646499, -0.040902985091359895, -0.00098022228977209802, 0.010151778602803127, -0.055308792888781488, -0.09226196374306854, 0.078710234946180416, 0.14963503373654086, -0.059601167114054721, -0.075910372743932211, 0.069756019388331106, -0.012391419754460144, 0.016171610667790957, -0.01017022339581132, -0.0099408597626345213, 0.057862818914423922, -0.053500193833918241, 0.0023150521701103197, 0.24267633702175795, -0.1627124626737711, 0.0030389904814953246, -0.0019134583602005394, -0.031934733720563539, 0.031240729347724282, -0.013447900401826515, 0.018762854504427245, -0.027194103497078681, -0.063834611729319063, -0.019315034866382974, 0.17296296924653209, 0.0047779566564492282, -0.046724087968013847, 0.00063750179780768315, 0.012018498525607005, -0.049906231428034672, 0.0631023423942359, -0.059113148710084523, -0.0019439172858828069, -0.014409167351918703, -0.015148208183996925, 0.15802729853460101, -0.009547054530539667, -0.14207668185762945, 0.10783009215784571, -0.029316341593904699, 0.0049958861272639266, -0.027229716588043594, -0.027547849025221866, 0.011938104583316997, -0.054219992876510435, -0.092135020260128445, 0.23665714027812351, 0.043819126959151938, -0.041978283190380716, -0.0056029326770753868, -0.027255334727821774, 0.0096145043238918745, -0.041549931903191728, -0.034068436330191069, -0.012401382536206651, -0.041537969321840174, -0.049314333651992288, 0.16482326808377185, 0.042083362292458376, -0.1097240094748354, 0.066033601812019324, -0.0077249598120593538, 0.0029248566859087777, -0.080850631612695664, -0.057690051594666086, -0.037836445771667115, -0.093750009831868486, -0.14353454214499062, 0.17090805592445343, 0.14406736607449203, -0.019806817871862357, -0.037179860963505104, -0.013199402310805103, -0.047378006725271239], 
        [-0.089355795589857873, -0.043598613334664152, -0.040685490869347668, -0.056314801498742351, -0.064317257271733375, -0.036305703402461552, 0.087124549743226198, -0.025232182382037796, 0.060762583071081767, -0.016932442688114099, -0.040974561824924392, 0.0011692733530746166, -0.023469947694595206, 0.039360151665226911, -0.004433224342906196, -0.014202479654525112, -0.070463664877363302, 0.013142057597150633, 0.0033619826211813905, -0.010205721175565105, 0.039510232304449916, 0.020167450302709292, 0.056938011555847157, 0.034174491642619889, -0.062666774603916287, 0.083900397057253467, -0.0039050936206950077, -0.12023709783757955, -0.019127477277872861, 0.068195203204562405, 0.004239692936547787, -0.024727068518684399, 0.013195391150686318, 0.10092335285374379, 0.083732978098471689, 0.093601488222699147, -0.028064279101364227, 0.1530929534721796, 0.01908068436728888, -0.13458558446941826, -0.041819118595992209, 0.023907908538223728, -0.0036807630455928317, 0.007893862945026961, 0.064006968331711225, -0.027474745577589776, -0.014962346779522961, 0.019431039040092461, -0.10421624372835411, 0.18788293784249166, 0.0038646939965042704, -0.021850967831761797, -0.071620009503902279, -0.0073304196952225197, 0.023479102591966762, -0.032992466061732159, 0.074771930860797808, 0.11997396053811867, 0.16652757445893027, -0.043450925728879812, -0.19633494915962973, -0.015120380697294114, 0.015595534851796003, -0.041435710686911043, 0.075826650575169657, -0.0062698135667015216, -0.13523262558321089, -0.13542793759250013, -0.079399992955661691, 0.013399321738180064, 0.29846443483321561, 0.12612688550553225, -0.082084690167688573, 0.034499018867023584, -0.060887460666349029, 0.028443725041023785, -0.036122039638383077, 0.0051284231998723478, -0.04605609290697394, -0.18431251645987262, -0.209810670926456, -0.12018234374910172, 0.095623809719311254, 0.012101575052632325, -0.022524769880679987, -0.045282477028056718, -0.012822428753938651, 0.043771209187441484, 0.080442241536594447, 0.053685027638862681, 0.040661690320921172, -0.010274132182098798, -0.10557211882546326, -0.073595782434368109, 0.038444068551446525, -0.01907471602474492, 0.012245888918847134, -0.0015393549215302338, -0.021036517265939442, 0.05518243063690028, 0.044093645228280701, 0.028389644682731155, 0.0097436040384290198, -0.041472720807566095, -0.055377684790392047, -0.016991109046279269, -0.0081617619250853313, 0.0076016249396629494, -0.0066456574053765025, 0.040565096868620157, 0.081751315687418724, 0.050780047897429154, 0.1155676026022933, 0.055483067679641382, -0.057897491813207046, -0.1105898575072263, -0.071828681966453228, 0.061970511290256887, -0.030281369882132307, 0.019304831483575841, 0.054296933756856992], 
        [-0.2437388912119279, -0.072313525080502913, -0.041971984175469032, -0.14300397257914568, 0.061522596957557102, -0.030205439566140864, -0.020864680638780005, -0.047647886319076141, -0.004129658790494567, 0.04027736046562435, 0.0059092092920419587, -0.061426215758847547, -0.049227621653249579, -0.070004334019369369, -0.064272761487378705, -0.026633980149117817, -0.065741384613963089, -0.051050316403064497, 0.0043410772798304284, -0.016116178354041721, -0.031515372710218439, 0.037031195841364675, -0.1228147574490851, -0.030325889054245894, -0.047121946899635309, 0.006945477959475678, -0.12020262635091686, 0.033919560718345204, -0.036501468385288172, -0.023249455180030049, -0.11560461380300818, 0.038387197660639291, -0.0026532986572997824, 0.061601452701894321, 0.10391565419224812, 0.10819008673388165, 0.068685203069905748, 0.11775867403705874, 0.017679110509122742, -0.058901821293154327, -0.020290611595912264, 0.0001469059966410502, -0.12261361036045612, -0.010208071253787782, 0.25551979619962417, 0.13824223662087887, 0.14467947383464419, 0.13522961725652033, 0.19144244169061975, 0.3152710823580756, 0.11571778386301039, 0.11681561560364913, 0.032566473003269106, -0.050278128345735251, -0.13473831638652176, 0.00889663273590241, -0.06668638820919999, -0.10871364490994836, -0.18658986296561081, -0.34157171141342124, -0.34638493808149179, -0.011264008251140406, 0.029142444614928986, 0.12461122431395127, 0.10800578593966685, -0.022809897357387282, -0.047431594853249527, -0.016065811361968149, -0.012088172884114928, 0.13024386066616567, 0.16585917678227963, 0.08223171490137017, -0.18073427281823529, -0.23905771961269479, -0.0034760942387594002, -0.0025528511815767485, -0.0080703270400058758, 0.035854903717420804, 0.060889803984584323, 0.05280523963556441, -0.0033159964189498209, 0.12385169566242266, 0.18824042049023279, 0.29210060042127328, 0.11943421064782488, -0.07449416534755314, -0.037461734684461859, -0.023737648801047031, 0.072598572988186116, -0.00045486095293109652, 0.00074298234712233402, -0.0015928557141097338, -0.17246645124725063, -0.15444027225745488, -0.13465384352760257, 0.032776686516006764, 0.070859809216384226, -0.0004770524214243281, -0.032343629149890175, -0.039986157743816128, -0.074752388387847202, -0.069851711472991157, -0.082819246951454234, 0.032778177162039637, -0.0042937782327582136, -0.015012757926196954, 0.01819273756147026, -5.6098151787711825e-05, 0.019859569434228445, 0.033074166094270323, 0.016572156520835511, 0.091964106413136654, 0.073376911105508508, 0.098478285913656774, 0.036105178755291706, 0.050869520986871988, 0.010385433683375911, 0.040242105632122271, -0.070134750890519848, 0.0028041075844665309, -0.10929235377523264], 
        [-0.076118949202517425, -0.019269106767557935, -0.031754535045991392, -0.046455653491455862, -0.040704384737309626, -0.050843290857606804, -0.021973706618717698, -0.025543401663111642, -0.07416056040918946, -0.013170588459795768, -0.11347265323402626, -0.057227893055629329, -0.029590820633760687, -0.034243625770240413, 0.0061905334896895231, -0.0094644557199642584, -0.044625667555150392, -0.10436846800575, -0.028686249322612808, -0.041090017647881019, -0.046151869816618452, 0.0098325948939372923, -0.067695778385091526, -0.028012701414139411, -0.071396857165263158, -0.075353072177860636, -0.10565554313610695, -0.075522794580878821, -0.026283961786762969, -0.031035439373623519, 0.045981881415172052, -0.029752407317735798, 0.011392587697051898, -0.1039429255200454, -0.034764441427698627, -0.037846056000007268, 0.00012123885743986484, 0.091278706547537475, 0.14577205157542866, 0.1104215855219802, 0.18869952301023718, 0.10738370259626208, 0.13268927139759373, 0.010378228400827957, -0.052734405426765968, 0.07627991587110855, 0.13003488750036463, 0.24685954687761555, 0.21183725748584104, 0.24704340387352622, 0.22867523573571288, 0.036921057188982587, -0.028737222239043028, -0.070384615788671751, 0.0055155357845693004, 0.11568430941686651, 0.10660133014829948, 0.19511953592195094, 0.045422489839321928, -0.075768281672479496, -0.18361820859428674, -0.31804072962510349, -0.19549450758187809, -0.077995164144666299, -0.031296132745874644, -0.077327917406273622, 0.12870564027407561, 0.041486516535153339, -0.13922180905243858, -0.20395686432544152, -0.1572834919140717, -0.072166722893366869, 0.086563963129244234, 0.10757801321268952, 0.081809003061111898, 0.066724060401920929, 0.047445258557963374, 0.017639198538912979, -0.1058218276867447, -0.056754378546732487, 0.048224352355707559, 0.14306872525152498, 0.12358807932424302, 0.071726754535007084, -0.018593224747300865, 0.069247194070239257, 0.0029737893381716479, -0.0012683824671753524, 0.0058616562424005786, -0.039955178776990612, 0.069868180941963884, 0.014017003861568525, -0.046600910938925849, -0.047068333385668161, -0.046681863281231521, -0.024440679090069646, -0.037553368502167325, -0.059138302137312151, 0.039269526323743462, -0.033803159785026828, -0.016677251343357832, -0.036287370622927695, -0.033653158506393541, -0.081054618119207861, 0.022448731777965539, -0.051864605704516141, -0.0022564588924538012, 0.0065500568568099202, 0.019613695988714784, 0.035674619157173841, -0.088137935604942944, -0.049861006869088897, -0.046523335250325093, 0.015602894296518968, 0.070302678780579275, 0.025611762172576102, 0.06845737037990568, 0.035739036571478075, 0.014800222944481767, 0.028993857532204525, 0.026773523645769501], 
        [-0.058789866419249687, -0.03992289616881476, -0.010605417103711993, -0.018499457729712329, -0.004865080190320413, -0.060301330529616955, 0.00031834469339242499, -0.12557104846760686, -0.080004274046988455, -0.13698273850528309, -0.22799077610365462, -0.025563254532452423, 0.031596931721125744, 0.034180802606017344, -0.050379683190577049, -0.036900574597293838, -0.020122798822353932, -0.11425996362570746, -0.082449949096166764, -0.12939384502163268, -0.015453432533256775, 0.16525998969962169, 0.0054733899561779098, -0.021933035683807854, -0.058344539474112764, 0.022961713249665269, -0.037437068374264519, -0.1277856597415159, -0.028890639336882469, -0.0028919209327963741, 0.26948646721448222, 0.1755823507659644, 0.34733594380543498, -0.099005604765418503, -0.03282593950620348, -0.065174445338135711, -0.02845735040351216, -0.062602372298509845, 0.032022397582957891, 0.15695159271707296, 0.34154299673599708, 0.20280139720653914, 0.12458150522764966, -0.093375723727740126, -0.072239020683553506, 0.0090947163917505652, -0.044389015283926039, -0.052574599103869434, 0.029479831254029615, 0.26924859691625802, 0.22826750438753873, -0.0022877017320989818, -0.1114646531276304, -0.13529114203352183, -0.15036111092012305, -0.085842755314764929, -0.024536907507225265, 0.0086890807497300507, 0.021944209642358908, 0.16653403493301283, 0.08152009064661242, -0.14404674546435942, -0.14990102541427039, -0.11121323411132536, 0.0010729953777799395, 0.098095234511134735, -0.034221197248638688, 0.0040175961684953184, -0.018012784825030465, 0.073210106805800909, -0.0072272106254334667, -0.015972640001127802, -0.061003687664664949, 0.054833426188111108, 0.067576339145725264, 0.074127017865976058, -0.042423930579678311, -0.037337363882495159, 0.022891392960963857, -0.0034269311956898834, 0.04377607969407446, -0.0055550198865683478, -0.060684852096268893, -0.045928233440519814, -0.0088830951753407356, -0.077574617772135271, -0.073068573889404992, -0.0075845224916686986, -0.05870405744262968, 0.032429727788504017, 0.11139987187807623, -0.061069384823273565, -0.022957481391546936, -0.081456668310723568, 0.013486103859614872, -0.10699268871745335, 0.026815142447461103, -0.046958076560392775, -0.0095643677181986124, -0.0078126265354927348, 0.021325652288010453, 0.027800587316513206, 0.056728645862545959, -0.07588999178312969, 0.001849623431887229, 0.022933740393987989, 0.013435613550251885, -0.030879626804123601, -0.0049468588623556402, 0.0040992199004741686, -0.0091408161111731587, 0.10871928144408688, 0.020712482757044768, -0.030869482809578623, -0.0019257988508574048, -0.011927083397448635, -0.081405740634482276, 0.063922112367951894, -0.010456133387573327, 0.03707660212821462, 0.088835355921773829], 
        [-0.036641259174083958, -0.022318782338815249, 0.024522274312524583, 0.033440491760940591, 0.088325318805097308, -0.078447223191200052, -0.047208492835296774, -0.047259416670676881, -0.025215781435357056, -0.015414996185524978, -0.092115101238035485, 0.044024131261608312, -0.0091153987713104428, 0.0048974270909144524, 0.030833576332085333, -0.020765236921067881, -0.020723615749795563, -0.012243854655765614, -0.046289817377706238, 0.018593204344671412, 0.0051453347328788007, 0.034378456965152134, -0.060076223671287794, 0.057462262515044049, -0.029604759889713811, -0.032984761062248569, 0.019793815460092429, -0.091801878345608684, -0.03956459119173994, 0.14253192152349636, -0.01806439485632861, 0.012289491688936907, 0.04911968723662781, 0.057131455553269941, -0.0053968509987426319, -0.027773037404305069, -0.0045553437237598471, -0.016293864219002016, -0.1018126126459068, 0.21507853086133841, -0.039233573544075251, -0.01388758790666203, 0.045506921385831317, 0.12176852006259906, -0.0049585365213533662, 0.012483286148479648, 0.00022150651974826852, -0.0047489494995995168, -0.056359601414396263, 0.17519663761795012, -0.055694439201051764, -0.082196839716537948, 0.064537741077840327, 0.04748422973872729, -0.0028928449210207825, -0.015338697146168576, 0.002703261150090952, 0.0067497963183427712, -0.040248133668722312, 0.078968141080816637, -0.10963403655958821, -0.17062543905350416, 0.22859560603386642, 0.07851962872419016, 0.0080330152274108758, -0.01142427708908322, -0.015145649505435649, -0.023532868284188511, 0.0099659612341810866, -0.026743099199774509, -0.042414654589513018, -0.049675570929287774, 0.29646343280477494, 0.025690805425905093, -0.048511227932622428, -0.10023827450589579, -0.16647012418573801, 0.026747181544677607, 0.034918992877789233, -0.012381071612453791, 0.031328960840184238, -0.03808798675298581, 0.13554403224476577, -0.038600519161136035, -0.15955152669761682, -0.18650119722295797, -0.057062155489439867, -0.012769517962987352, 0.014753730819575053, -0.034539139458789864, 0.006058740052616929, -0.0098108713410034829, 0.069117277622840978, -0.071244146237570763, -0.13192760007023469, -0.031815896848603233, 0.027197733872446832, 0.044915537687674, 0.13641539907523023, 0.051541344109272018, -0.023022917497770818, -0.0075024647062180427, 0.0075301826652961409, -0.059347528011641199, -0.044234947284663123, -0.011581128699856197, 0.0014665467844986665, 0.047135698296650763, 0.015656423092764042, 0.066012956376650042, 0.058200473354046559, -0.015586985696736753, 0.0052092264230974294, 0.014817241711833552, 0.018388023474896837, -0.086675877098822782, -0.067044063522772729, -0.0035215449899233878, 0.064161373931149845, 0.065318498548821255, 0.067259148989151349], 
        [0.0045060454140400386, 0.045655120374964497, -0.0064830700717017822, -0.0032628436084326529, -0.010410124902832244, -0.03702402040624643, -0.036963266474149589, -0.091093906028424584, -0.11864573227941409, -0.064289797687791306, -0.19247581164633484, -0.001736762598627155, -0.0097469459578441008, 0.0016447907097145286, -0.040872882087491146, -0.014221224057596007, -0.035842689053500638, 0.016146856355897986, -0.039843139194713842, -0.093130420560655763, -0.0023746538984200771, -0.13830477342208627, 0.028428452224738408, -0.013697468079493669, -0.11156935100514298, -0.0089864206453983495, -0.080752864691162371, 0.012804209858369449, -0.062406450316134982, -0.010725880834214149, -0.033419853775967602, -0.013381072105187686, -0.12601376127960781, -0.0011651414984304651, -0.096302794160834315, -0.033960833636545611, -0.07271627207480294, 0.035903231272948394, -0.050366776129811802, 0.039465836216112535, 0.089595240957993455, 0.080323722760925531, 0.15694230593686581, 0.13046741922551686, -0.10541702655016309, -0.055080126117310738, -0.0081043441898794311, 0.049795401559017696, 0.085050117897638097, 0.33220650657354384, 0.25591351064686196, 0.17170416430885482, 0.11686339946258112, 0.11405546450621301, 0.22946835883838218, -0.012135608835537007, 0.083665324516254844, 0.13743718640771305, 0.20760286167445086, 0.024810385626267768, -0.25485287037990362, -0.37635120927444349, -0.27148633180868637, -0.10307518032579147, -0.073758021077069053, 0.006322005152026515, -0.0071614241191596956, 0.024394639535414139, -0.030595356710155303, -0.22377146981167628, -0.21688041618965234, -0.060604397244649409, 0.18640642704652977, 0.1411775414679666, 0.071715708604953896, 0.013663567087826838, -0.059637629532230764, -0.079133304381083139, 0.051501100412118382, -0.10958403078776109, 0.040357653528253698, 0.24551987265937023, 0.19850031772812765, 0.13276295660894386, -0.0033277520526472926, 0.095717281270899235, 0.0060754811619981117, 0.070214032074900512, -0.060295737352707629, 0.023305858534584164, 0.036241683301989451, 0.094785196684708778, -0.051030541969498217, -0.048582060783967027, -0.13620414142167206, -0.042785196097045466, -0.055491249841953014, 0.0010026144494500872, 0.011273492179008152, -0.0070417417384625314, -0.02690303608673969, 0.012495419954788797, -0.0049652674891686524, 0.014207910106334196, -0.058316356599182127, 0.020100992201083454, -0.055565658068763756, -0.058257850577289112, -0.12154724005307756, 0.036276619232864585, -0.11927424459722163, 0.1109090327897103, -0.087204589244144426, -0.0029129212052817939, -0.025028390260139831, 0.012106502056846706, 0.068613886378663252, 0.071374295120005704, 0.098125263845276922, 0.14037322438964439, -0.0029560423417013919], 
        [-0.086666708451327651, -0.065564519145399541, -0.023817463535297907, -0.020440748189549322, -0.071969614065115983, 0.00028668951002261411, -0.048727572694679672, -0.025160320872547617, -0.071502198767284489, 0.0094940082400308788, -0.072386589094650886, -0.025153788858944419, 0.023459850224754719, -0.05950332009913685, -0.045615311205432989, -0.083519770284241707, -0.085543219025638439, 0.013730208280768347, -0.021148981295175229, -0.0073162588177247967, -0.037712812535064255, -0.074773800976601495, 0.03462239265337725, -0.02547365067836567, 0.030186212545732116, -0.019963247487852623, -0.04969209404043104, -0.11327298065324004, -0.074519227217117595, -0.12603792583344542, -0.037063997844313232, -0.024954205133118107, -0.083735964905377686, 0.024750173546374571, 0.059330282701814688, 0.062204749968921932, 0.17133136972067453, 0.16121648224746851, 0.16387294452638612, 0.058308117323603761, 0.025830807003138445, -0.043479982176188162, -0.041636429687936197, -0.12914102690849677, -0.040109360336824149, 0.020146168363946934, -0.0014664956647692795, 0.091342016467911402, 0.11971706786628006, 0.23880056181382195, 0.30997519288915309, 0.24621925944009149, 0.18586785581035009, 0.12052801882874073, -0.0034211287368824117, -0.030529992172357766, -0.032290577650566622, -0.07619354278341188, -0.1960657681886227, -0.20015100244650072, -0.19677279724795954, -0.18308786989283266, -0.00055713480106216878, 0.13743504158235739, 0.12949126333024466, 0.20559599476304927, 0.02351134428016869, 0.016946777735827437, 0.073623968286197633, 0.065649323472256313, 0.062699413579597518, -0.05017906172626907, -0.092252062144122904, -0.22544582106641978, -0.14498855282877299, 0.019198250206979468, 0.08296161046033787, -0.019486237898005958, 0.011992512029289193, 0.041329981058323459, 0.07636271244077264, 0.031761554053674354, 0.15907477211435514, 0.10336465086935449, 0.039866126496747839, 0.021911878458555786, -0.15923424669690406, -0.013828911493878555, 0.076214097730179772, -0.018094163035829308, -0.022784108454190939, -0.07576679032280903, -0.00479472472165271, -0.12287034163039613, 0.031158696953220461, -0.051655022084203854, 0.096187316481263704, 0.0095670984140750134, -0.031623662424778903, -0.052567997778793368, -0.0031420233178607662, 0.023308733927797941, -0.0023387082999069553, -0.0094487986093912645, -0.04582399432870362, -0.0054810246023805631, -0.081257910575128434, -0.053087043188049285, -0.0010084105650565306, -0.10300285383556548, 0.05010294929397674, 0.039084033656922076, 0.00078260416687278567, 0.06658472055870629, 0.019512702741612473, 0.078540493706748191, 0.012933307469298647, 0.061861312662757253, -0.037748621235955342, -0.044013957061032435, -0.058653414400645094], 
        [-0.23765593793991233, -0.10644252010202958, -0.14205331737791968, -0.033409658821102896, -0.051746525740039011, -0.04902914905506061, -0.010142689387288009, -0.045800121111205794, 0.034452092003027894, -0.037462523290761315, -0.052617568352887403, 0.10954838938856398, -0.13610118046500422, -0.0095471511929971949, -0.12706132231951731, -0.092228798361772418, 0.021263651882758011, -0.080027642431201571, -0.0100550311904971, -0.021203318677089002, 0.016576191285134906, -0.028370386427869553, 0.33291003086902288, 0.28090106038207852, 0.12847553299199477, 0.033792763942573037, -0.023904470117744384, -0.16851016358623308, -0.0060729181420751625, -0.023245122034615213, -0.056640550891660243, -0.012010707479483837, -0.098774094475144666, -0.064504327550212237, 0.10265691959773923, 0.25554233719714792, 0.24276990386303868, 0.21966976582871933, 0.11091090952626349, -0.10183584175603527, -0.087459644795301786, -0.0029720828981545685, -0.00012924753214214532, -0.025079977013448711, -0.086435061104407823, -0.18087547713194091, -0.11352267862578171, 0.032889611202360142, 0.15787019926944854, 0.23051337575410985, 0.14879854133516468, 0.032437611765298205, -0.057059196511395328, -0.069308077657970535, -0.082356064599434647, 0.04228548674166778, 0.043412923933183953, -0.072264826939583221, -0.16689179449726901, -0.16026349114722624, 0.028474874784694099, 0.18131198489108219, 0.041852912264988044, 0.0049306527163999643, -0.00083249749637829239, -0.047831996372009418, 0.0010252465231246899, 0.017497628114831826, 0.074031972038296395, 0.054062759312123537, -0.0048788678858039461, -0.1017614042122941, 0.018693005132704797, 0.0076210492973557671, 0.0085934586035815354, 0.029130058487575196, -0.076722340878408429, -0.04443504101988021, -0.041904181084809797, -0.042181657033595429, -0.027448364698935662, 0.043452694941417874, -0.014281471541844684, -0.11364364120314924, 0.021624342767224931, 0.059887867734099376, 0.048249692701759446, -0.025917915651940925, 0.02805763343822287, -0.035965266748084215, 0.010590677166796214, -0.061232693431225199, -0.057899063583557495, -0.08844340564057801, 0.0012600977398065059, 0.015191608284153623, 0.014315608183696132, 0.039038170262391945, -0.011070372964504849, 0.0044675582793348174, 0.0051525001918035183, -0.076856408464383241, 0.024632015663543207, -0.046933647548906957, -0.0043118009452010539, -0.041968903018102854, -0.01569526374931584, 0.013525540172630385, 0.048796773614702041, 0.00035467155966114033, 0.071901198369965086, 0.016274926781300325, 0.070923477382927924, -0.00882484521729196, 0.043457848227967125, -0.01463905425635062, -0.013191689698509215, -0.037524320749473053, 0.024708931479837257, 0.057086614057279259, 0.0058576139736190606], 
        [-0.024541961538258487, 0.03267163162338621, 0.11772757167816214, -0.034174233168758797, -0.0717426324714492, -0.16174536289395333, 0.014164562611569745, 0.019531072825155295, -0.054978468415161165, -0.0038956868428951796, -0.090196113790009247, 0.064812251885165414, -0.0472339389168712, -0.019133679594543138, -0.080948115948705671, -0.1101849445159255, 0.10726549986933923, 0.11986161329611322, -0.13898042378726411, 0.029469805860096759, -0.069941197461236101, 0.10165481762063706, 0.0042591037232074525, -0.049347547297978321, -0.083661416571785413, -0.087655843717195536, 0.020522117345934385, 0.080191817405819127, -0.15728279592142505, -0.028885847231444647, 0.073544321095523182, 0.20706344381077879, 0.066144278705455667, -0.069631881661333023, -0.055387270887946399, -0.0099158960524032974, -0.039717793915661548, 0.14583324737347106, -0.022727060768185453, 0.017713374718806421, 0.28062075184074708, 0.07576339464353285, -0.15759577923577814, 0.12669291481079187, -0.0065957965533044935, -0.023038500644189407, -0.016203548822575214, 0.011443563605701524, 0.031044733818071997, 0.099390009396605278, -0.05047331939795989, -0.030750723936850188, -0.15956288120485115, 0.01286776308068685, -0.1670547469453125, -0.047963831961764791, -0.077402955827408276, 0.025311426471354537, 0.040894848866229114, 0.090108524928684319, -0.3117498185712026, 0.059978928418208476, 0.17392049002395632, 0.068215126727969963, 0.22655017146929168, -0.11277740982522262, 0.015117918949874534, -0.062899724806877555, -0.069945490124479578, -0.044909742287021881, 0.14433444462851913, 0.29232937226395989, 0.1955873798585851, -0.057850714258981209, -0.014726496195370711, 0.088840761160314488, 0.26941150721674784, -0.054033771011003262, 0.0111591965306495, 0.024544359195103477, -0.0050102759877621028, 0.12289773365466525, -0.042268194241055185, -0.045072456104567213, -0.023985660885704002, -0.018776641626454649, -0.064872108441076909, 0.17923288498496057, 0.017718431179447353, 0.012676757235305675, -0.084141918563022666, 0.0927046391653705, -0.14741704405082073, -0.077405293524682478, -0.041954355353188345, -0.018944672617029513, 0.060652295217796734, -0.044563097079480543, -0.046248836126650289, 0.033353665903115184, -0.0018617038323594237, -0.067677746878476538, -0.023333614214616976, 0.0136221936446786, -0.012602435194539463, 0.056141915908750409, -0.019617155818133693, -0.093416021391092674, 0.025935720217831887, -0.2107611868683418, 0.040245343412419005, -0.077188871326229633, 0.01421259796769439, -0.11506917731449372, -0.080209944956327744, -0.12403747829586499, -0.034792135391462455, -0.051307124154093234, -0.044478904070419822, -0.042402134083612701, -0.074816944103372168], 
        [0.011580340758841009, 0.076463412301783149, 0.00079803404858471978, 0.048838428314634974, 0.12248324878819095, 0.013743650358534375, 0.018861138121382369, 0.011586008838870166, 0.045389746032794658, 0.031693376594253822, 0.074989649112201823, -0.009866261755352353, -0.10340488386695112, -0.071572160434485707, 0.0043787474738315128, -0.07778860136521136, -0.019559075604586286, 0.012039914910358105, 0.0018614793888236656, 0.017976562122428465, -0.04708343149187328, -0.0071367900965603071, -0.17555550753460089, -0.080029090945432202, -0.031800223769076583, -0.057597347069660187, -0.022591430940203699, -0.024015557136778228, 0.020306356095828103, 0.0070646865909845908, -0.049745509295279933, 0.010918207861832434, -0.0079759574056427959, -0.057844329934535914, 0.040415092756685103, 0.05051297898637875, -0.028679830302952441, -0.088878085058129219, -0.11596341833461316, -0.14726999841028157, -0.12186458373388864, -0.013719238451893214, 0.0032337827790390591, -0.10004453617576921, -0.017783520567117159, -0.043426790290178846, 0.002516237987708639, 0.031180239925685315, 0.092564938676877706, 0.021358915086836516, 0.17681853360539368, 0.06626948027510339, -0.056798463424251405, 0.020214558939605977, -0.088730140207167144, -0.019043455841855041, 0.12149386494436711, 0.039670736228732052, 0.12658659654781676, 0.25102106759056364, 0.313616299442317, 0.22183627286461596, 0.1359746158531317, 0.10115711474812561, -0.24302403404704537, 0.0097296125255306402, 0.18356713494692423, -0.026126940847291485, 0.034416695001123848, -0.0047517120355681092, -0.19721799705664833, -0.3026191738381685, -0.31481960231473161, -0.1434027289225949, 0.093247316689862428, 0.26017905533217356, -0.15231835953736883, -0.11886377910271781, -7.950240878037973e-05, 0.14995167348160249, -0.07737337854954085, -0.01599863660324637, 0.2521561754016366, 0.22726143797909176, 0.051761936974425632, -0.070375767384878163, 0.039304142728632772, 0.046344087243253736, -0.018432448385731964, 0.22509099226938978, 0.059917659545538168, 0.046242964966830113, 0.11839665900852914, -0.19506738398455795, -0.14025844275720523, 0.057466302603268626, 0.11019012358572904, -0.013541932475265537, 0.047028476991846445, 0.024667584373991497, -0.0058190883316349695, -0.087336525273645438, 0.089096154875776434, 0.06500967167977309, -0.043338205557104159, -0.019092524599200814, 0.14832868404659605, 0.078021069640875934, 0.070724212934028391, -0.031358410965025847, -0.072958714026414753, -0.13112668083166459, -0.086263740082819146, -0.072841242282538562, 0.077042927232936959, 0.077562899744286179, 0.10315256178304716, -0.053457712000654738, -0.045827447338993611, -0.02900391837847402, -0.22848349838247778], 
        [-0.069051215490355838, -0.13695919912679141, -0.0056563275282749768, 0.017174473739632906, 0.054750990465431963, -0.059932166353439724, -0.015330830129175563, -0.0068192284467516124, 0.0012622017178931346, -0.019229773264106312, -0.059761024322663912, 0.078692856969722169, 0.1089393724650921, -0.075681394444025663, -0.20952756667787314, -0.005312913294763244, 0.10044708684084892, -0.11640309355112993, 0.024356159573992391, -0.0012586164900474876, 0.05069107388375764, 6.7084393214669399e-05, 0.20191076124513427, -0.045181133059133377, 0.10144127341109486, 0.11705452040763065, -0.22632970742930147, 0.0184688808155756, -0.0013541832015389887, -0.12017877991510166, 0.016842236983854095, 0.052652180804933044, 0.083145511130703426, 0.057329748095278965, -0.040374712776183777, -0.11575057028044615, 0.11707621621679364, 0.069672785018686567, -0.13863634203166464, -0.079607983082249159, -0.022216919274236187, 0.033593966744265236, -0.11362588566413499, 0.10269722191626784, -0.24155215048670942, 0.018756954826990843, 0.27956157401899873, 0.039218371860729156, 0.073588480345744861, -0.044888999157036903, 0.13769429349072093, 0.0032477373467352548, 0.022428521170885826, -0.038465640538281942, 0.031154883554520594, -0.16441653723937766, 0.23625286909405968, -0.081428432405938125, -0.011107263657897232, -0.062666400207005535, -0.17075494746168615, 0.27269490990139, 0.031157268147637196, -0.055470185891144386, -0.006952885879328791, -0.053436281993972892, 0.42537068414459028, 0.018283114946247542, 0.13283560236845615, -0.015069149158958085, 0.10328347994406929, 0.44999154699931465, -0.0011928954570129824, -0.16086510891352077, -0.12774404557332408, -0.042099179368697587, -0.0018649195557395998, 0.24605932528385696, 0.074298264981605869, 6.9784477611684395e-05, -0.052135626941050443, -0.086745017818760359, -0.22499073514863255, -0.045344789395678611, 0.033108065913800402, 0.032025942933416617, -0.053699697308726382, 0.033624356023422591, -0.12434062876294572, -0.13435098170091592, -0.10102320426887956, -0.10333974326967209, -0.072744104098523374, 0.030026079255193142, -0.027686487813203597, 0.0035344601119742178, -0.059592180823454702, 0.031353387154932702, -0.031956460680317295, -0.18985564540590008, -0.066673937571019595, -0.030281628842088536, 0.015287505098408646, 0.010680344185151468, 0.044316674060265779, -0.0092002144294807825, 0.044711089149172344, 0.032936423173475296, -0.028902000094102702, -0.019831895072516134, -0.1083289835481895, 0.017001459487365853, -0.016581037303639058, -0.047452480796807951, 0.01964408724082841, -0.043525154566764424, 0.022793656727439479, -0.031968227415916144, -0.1191326261973889, -0.012951530456903462, -0.077945906276183335], 
        [-0.0042180435203333227, -0.177849827056837, 0.10345176940428125, 0.14691821176034053, 0.032856437685713946, 0.069906188728512633, -0.0063945110693917079, 0.012858674522952751, -0.031362305638645026, 0.048788464134757729, -0.21008276813725216, -0.14262226241092743, 0.27350682670700188, 0.13675983935772454, -0.29666625074261765, 0.13073198270538819, 0.052879354221863011, 0.20819060117120861, 0.054692335523337222, -0.070712189277451695, -0.0072302981622757783, -0.037876207980575435, 0.016205298964287681, 0.032611323558465855, -0.21236590603680106, 0.19488138090854343, -0.050183688887998762, -0.10106171926311576, -0.19451804410928483, -0.097570273334807611, 0.14803373393480754, -0.11936458691698297, 0.090357091614167315, 0.0059923455004580184, 0.025455653887793486, -0.019228242751246096, 0.084191785333891184, -0.1088352303605908, -0.19709666326225239, -0.084653777829652263, -0.086888144789493554, 0.36808967859442904, 0.10964208390108912, -0.06453781682173701, 0.015795651214486534, 0.0372255583573948, 0.043017883593270814, 0.11952788902899536, 0.10395017914010175, 0.04553068266111155, 0.05441345422005224, 0.24912633653507255, 0.002223137297252974, -0.10580881478072197, 0.090087613906571426, 0.16662136065460986, -0.15730886509144254, -0.091248525393662711, -0.053757621594197856, 0.022178794252692133, 0.27116243919778504, 0.33866879890439228, 0.14040194814605061, -0.051936697245067276, 0.013903415563632955, -0.065676039555647242, -0.12825582201243901, 0.19222801891437483, 0.066176686136318968, 0.073803898255870817, 0.14569502232430348, 0.071160030480564657, -0.0095456596009633743, -0.10489910337220464, -0.081457920709183701, -0.078985379590762378, -0.11641729288088618, 0.02271274135586502, -0.040783573204296208, -0.0056622589430029863, 0.0036835932550680038, -0.066780309193843077, -0.12713315993774849, -0.1586600519695244, -0.063328586222237665, -0.055759758783947483, -0.037458086574487418, -0.022460685295330809, -0.022028900024817097, -0.011882201801517509, -0.046972799168275001, -0.14701204551638941, -0.037217728702544514, -0.082831218869885689, -0.0016295615745458014, -0.021758715372862947, 0.059906725662667415, -0.013176728966978149, 0.064518845785987863, -0.040907493521731432, -0.02724481426696284, -0.014614954526350594, 0.11052684024818323, 0.027444907166189095, 0.022162414399074806, 0.0024547001841418916, -0.01609068146442251, -0.058966580405083346, 0.021584412865348603, 0.032765251105065299, -0.1716263843502637, 0.038525696603424579, -0.10090104298395008, -0.082755480397067163, -0.12651405684060268, -0.031346851498544215, -0.051126139081003386, -0.088046305344413461, -0.003187155224522592, -0.027110133357033151, -0.11431300136421083], 
        [-0.066924227135342934, 0.041699164002372696, -0.10385522794561593, 0.055675362062145774, -0.074260470462326228, -0.091189960480717175, -0.045789683018577006, -0.053408546616140973, 0.0016410632283570901, -0.010001962022561817, 0.021791861105379333, -0.051951291323868297, -0.070200622462203655, 0.097279876582038807, -0.15048632688284508, 0.12149505097298019, 0.015842805768137305, 0.01783019614395083, 0.028679225099310354, -0.13093015859478119, -0.0032724249962371582, -0.076392560780105201, 0.023827921599709007, -0.10048639075186741, 0.057647734800977908, 0.14769797654526404, -0.058573134153914214, 0.036566470887259887, -0.038113001252617282, -0.035949645768287825, 0.13214950219821359, -0.11750728810678948, -0.027309528175229383, -0.15554238984918572, 0.18384157344434507, 0.10897982741577553, -0.055054919090396615, 0.23295461106984391, 0.16692460259498326, 0.34350821795606212, -0.061818935287900251, -0.024811829586858465, 0.079963429313170714, -0.18727278866453625, 0.077134089493061789, 0.20554995099374251, -0.025108602454572731, -0.016911421678591866, 0.027522221377421628, -0.18467242934043285, -0.12870450689623072, 0.2705100330044119, -0.23570033354568337, 0.1600690210988466, 0.060772731257298589, -0.040057046042739526, 0.0061976917126070254, -0.21240599027215282, 0.22776373257918395, -0.24459850621169732, -0.11110091474536704, -0.32900610024199545, -0.065957274593286902, 0.38918437667082284, -0.037061988998483932, -0.013214304459370309, 0.11361559841851943, -0.13116091416864151, 0.26148934106645616, 0.13109860511874102, -0.02559270333763761, -0.10769559173489475, -0.029541835495651814, 0.21030527945911404, 0.20083517469185433, -0.15455102744651888, 0.098485941721442954, 0.053759144210784301, 0.082713231452363006, -0.24255028029402606, 0.025733657047261198, 0.17680889892790308, 0.23330773415315006, 0.27752776373592319, 0.17725610536084593, -0.16258826629493126, -0.17144766528315306, 0.083644424511134546, 0.016994501600820736, -0.071477397540526386, 0.074912024363340463, -0.07565486524045649, 0.021346987911851578, 0.12285156854226099, 0.031741176745010577, -0.079711919211636756, -0.010975662352579296, 0.020719019955012588, -0.14947464235426425, -0.05912634010598853, 0.025068359943792605, -0.076954325737705429, 0.01069978220983156, -0.035726380166860028, 0.010452571251196202, -0.020801433687767192, -0.10029057450694524, -0.05347120776294563, -0.048791402971955875, -0.043406971496632182, -0.10411181696202407, -0.0096115795367616441, -0.040122338177384982, -0.046812122680620266, -0.064058112417089225, -0.14541168506254615, -0.075679730264006442, -0.032466738656732913, 0.0079790695503431444, -0.07581427323024105, 0.020303485166861458], 
        [-7.0956605279434704e-06, -0.095051438182964521, -0.087881575580860127, 0.0047062408698162472, -0.098027263270710638, -0.0027616522983207395, -0.097227127279984199, -0.063000737106212207, 0.1183446266588927, 0.054456621706851616, -0.0099413502699212952, -0.070139195335673504, 0.058249435624697594, 0.03289065810180454, -0.077908796650873274, 0.12060553802938856, 0.041916937919234294, -0.12018601094319402, 0.024991064566815515, -0.15610551053004948, 0.027447361841557171, 0.0061691806469063477, 0.22277923739993141, 0.07777153698627623, 0.15813994477460777, -0.017009298898611493, -0.14311974342433334, 0.17959497330783272, 0.051525754847030057, -0.11409305598330613, 0.0087348047214590788, -0.11631550153784051, 0.014926258001363192, 0.035969081785568666, -0.053625843536913562, -0.023997302411323432, 0.19964826933410396, 0.036096776017663271, -0.049210808628064102, 0.12245938533273446, 0.060611269299314152, -0.095796932751361336, -0.069519386575027736, -0.050249772835886296, -0.0058375428161391262, -0.012563499903927425, -0.14780320613165895, 0.031772227910289275, 0.1340288392048273, -0.15156587379880926, 0.12631446141014752, -0.0052889953007679499, -0.0019668259446668848, 0.054030336420065141, -0.063631403170866352, -0.34919842820174568, 0.086316002230514569, 0.1498086851219177, -0.01958777908962751, 0.12206293626181336, -0.19933801771288356, -0.048029128706853393, 0.052601068176454692, 0.038693350122585096, -0.093007050474004316, -0.025563344264592822, 0.177347641964092, 0.22163601611492076, 0.094680687451677889, 0.037985353513600273, 0.0088876390621224696, 0.33248829688044318, 0.16504809583361016, -0.0078675683065857933, -0.004089442342142393, -0.073882292576678388, -0.023509082885282934, 0.38130178103352774, -0.019291678040942513, -0.086843448560368325, -0.040173020823503824, -0.04644318688990192, -0.10185859440346755, 0.16438891805551265, 0.0026682289367386675, 0.076749174458747987, -0.067947692216907357, -0.0010386668473387935, -0.1071413883705663, -0.030576591810295518, 0.032786203858462565, -0.0055510882120406793, 0.020069023492512786, -0.017109613552384946, -0.1436550284492504, -0.016711779362517481, -0.069886123624812627, 0.011359667056578288, 0.0048980919655428265, -0.071130858325672064, -0.065545434771973304, -0.079794688129113223, -0.069727649875106712, 0.057019363580092276, -0.021992787171872023, 0.015178002477788638, -0.00020471363886212166, -0.025514430736042228, -0.026882894230500245, -0.045297853805246369, -0.15832593006621121, -0.031428749312098873, -0.0062888408902217752, -0.0057807583295211989, -0.087719175812133982, -0.014850613830471766, -0.098570157493344357, -0.1178588681684648, -0.058161768326308934, 0.025496330937214109, -0.027500922923648384], 
        [0.033385872123633739, 0.029449410773330013, 0.050373165760226532, 0.033759553320561811, 0.043978212175572511, 0.083180076982955681, 0.071686676768404664, 0.026805901274190462, -0.040212948527338761, 0.074455765899692133, -0.015556797943286706, -0.0052349749182220018, -0.019241697521412499, 0.055811600772115361, -0.061555692140009097, 0.022157119108767706, -0.037499771041887051, -0.091842013395178321, 0.0021346112094529357, -0.077528445870580553, -0.070339569427925713, -0.021843780086959141, -0.028323350880137224, 0.00011164923792164605, -0.063043678969301159, 0.0312281473289511, -0.027814517961888829, -0.023586402460836806, 0.014274870264679794, -0.0099112948624283936, -0.039421607735394437, -0.036124694755188508, -0.14334911700158648, -0.030906231546069748, 0.026456805364020539, -0.055731905472351545, -0.099791023065150669, -0.11300163966955051, -0.096702307648394478, -0.14134937562707614, -0.095762099342366805, 0.012996731697811542, 0.061452509807262426, -0.10845706522050219, -0.095954535650827094, -0.026481658468726504, -0.09342212328404359, 0.025974710463679895, 0.048411867352889076, 0.13854747029920722, 0.0089877939638353527, 0.1412865429641629, 0.018873766998065353, 0.0068619328268330129, 0.066028998755879767, -0.069576990925801802, -0.13630992697783664, 0.053261035495914627, 0.17932579331025728, 0.20451416645740492, 0.25417885834428638, 0.42794011719114639, 0.08044763293045501, 0.060807812906450633, 0.050979231912287287, 0.068724551062169986, -0.079585125467176915, 0.16947242780377064, 0.071750399564743134, -0.17602834598556363, -0.20609506703378996, -0.27585183265236618, -0.45996207117951626, 0.041977085392240453, 0.14013188266658397, -0.10129069427591146, 0.042032097653530609, 0.0010700558006018247, 0.033269813089743, 0.045261284159797271, 0.18492968093047082, 0.11250515788380208, 0.079146011997887886, 0.27604374526273284, -0.29337379824901733, -0.032404962081403643, 0.24482947691686244, -0.11730122219590641, -0.00039308173073460823, -0.082855210467204926, 0.14722185737303153, -0.050887412106644436, -0.11313790447392723, -0.045971837803545731, -0.12976452682175901, 0.36520902694991747, -0.091821999799496623, 0.085864390337494809, 0.076512715542274651, 0.1029210140799042, 0.0027325839402362467, 0.070586710333678859, 0.10533730048009346, 0.11195874976952475, -0.072147843907271553, 0.04958613688607464, -0.031050732598035459, 0.14407295372271284, -0.085587606300639052, 0.087228804147073041, -0.17190628673080169, -0.11561123789185015, -0.092875168889563639, 0.029308812125760478, 0.03997500953017151, 0.12185883649720056, 0.10737184929932188, -0.039136971459624983, -0.08075374206140308, -0.053377354274828807, -0.19749855557352708], 
        [-0.078856631490001827, 0.028609754041207199, 0.028065667582647003, -0.021834041252276289, -0.071731644229173191, 0.041943503021699281, 0.0034420782526643334, 0.099852416772104879, -0.07205432251463359, -0.14404103188347261, -0.099453272442615065, 0.030831458745725907, 0.029895496253457346, 0.0015406398850859385, 0.05063743421782619, -0.061536371482124472, 0.02259540959954133, 0.058299280629769371, -0.21504560821843677, -0.10742200693101064, 0.13531193618860787, 0.1292569094640518, -0.023228953646059501, 0.081512184345085004, 0.00055798660700738349, -0.098023802602571472, -0.066933869931841583, 0.030281268644703027, -0.19700701283846223, -0.07452246871817525, 0.29428494587030196, -0.019357176004156089, 0.097885648631463901, 0.086819751550199789, -0.043231492206504837, -0.018463852192367017, 0.062745383271060842, 0.0092971348018957081, -0.24863827359607188, 0.010777357730302948, 0.2316312466976955, -0.085329575508557826, -0.1144533554642945, 0.083801285402681849, 0.075830927030971565, -0.014032603342417981, 0.049484524164173316, -0.021590806395398253, 0.01544196314913996, 0.086162432936096586, -0.044102733314784051, 0.12334022048862069, 0.0731644245704271, 0.1088690387955715, -0.15316811061648344, -0.078737489667754818, -0.017284888207398728, -0.039703575150386236, -0.056905519161583623, 0.18660214037769024, -0.023526673216460528, 0.0097119105430037156, -0.11068696302980902, -0.0033322120127640339, 0.22171201468168639, -0.14381135593764638, -0.044159431475442788, 0.056899281315330237, -0.062535558479373796, -0.096715665724386363, -0.042463185527764596, 0.33605398681131693, 0.12771999969210951, 0.029306037892139189, 0.05296083974268942, 0.018388136003953504, 0.5836401595356645, 0.078369782006029357, -0.14774018856780891, 0.079310575246893361, -0.13568107571099638, 0.033726128645812273, -0.19371960002191677, -0.048923336377734009, -0.079048275095496057, -0.09345765767848567, 0.0084687991049249428, 0.02446655940112101, 0.024072807776000009, 0.045654023909503204, -0.049520678628329894, 0.11131277121530644, -0.082671959669512629, -0.01281734719311349, -0.058436346732921529, -0.090027065890889588, -0.061291547168362749, -0.12266871096386792, -0.10084079570396901, -0.038685969609545547, -0.034857542952191456, -0.00069531684714200376, -0.05711976301891046, 0.065894606637351888, 0.076843927132624321, -0.0099221911757089998, 0.038382533425733813, -0.0018487126462470374, -0.03501906580527725, -0.16441171510027652, -0.08279114832431804, -0.066047134941834895, -0.081932618886619485, -0.010547381209761031, -0.051038369726976479, -0.025578508207813648, 0.00959733436024926, 0.0049533230583025667, -0.061062803017560258, 0.033453744496612564, -0.12571424039710155], 
        [-0.079439136902308832, -0.09707485383450068, 0.069013639062420487, -0.074505761065334339, 0.075011587478881175, 0.15666344682780237, -0.081193505392068127, 0.092118683011617047, 0.16894882838291519, -0.064300711893237078, -0.10649892578590311, -0.20661689203008798, 0.1403179918871823, -0.13859623598009607, 0.15068161397003726, 0.0818655854637374, -0.014124777365337841, 0.15933582287539705, -0.056122956200266111, -0.14961952361740766, 0.26418260048580505, 0.00014354663354841646, -0.0073547177374536712, 0.079306683498707897, 0.020928941460220271, -0.10994253368145199, -0.1737068099917021, -0.023790675949004782, -0.086918445142954964, -0.0043349673789482186, -0.085954954881572246, -0.029420848660444726, -0.0090500058502500022, 0.041530999507431957, -0.069423567534389233, 0.24688351427911395, 0.20546023916088876, -0.17598878843872648, -0.24389316703559294, -0.19015439770039061, 0.22071277516100238, 0.077210599045731132, 0.014424585107587845, 0.0067033339564058075, 0.14557756666221139, -0.10028307012545846, -0.046263766310684282, 0.17807074556144536, 0.23207365188169671, 0.068919009550189744, 0.13997442592318893, 0.08843295944139111, -0.06619014796452205, 0.039954930324093148, 0.044429111474699981, -0.081010967478443885, 0.068410955264807463, -0.048059234788064731, -0.0052523124756469336, 0.19319439038918368, 0.22920446006103862, 0.086101063476146392, 0.031256459311461635, -0.017769668585097209, -0.081514861804228012, 0.05257244191659842, 0.0065146809658001778, -0.17665071040880326, -0.019856913059721516, 0.081102049633683185, 0.043277973324065216, 0.1177242078686942, 0.11137298745761917, -0.00073261542200567242, 0.091978290618997344, 0.082389423312920304, 0.034022525912699247, -0.053097609779258953, 0.099288071298097996, -0.10854924126379789, -0.17742490622599222, -0.1788673671646884, -0.14114600439166541, -0.064004772896817302, -0.0530848482065642, -0.001659672063313692, -0.070676871764606644, -0.098803538640278576, -0.055944765770140174, -0.0052751644189938454, 0.032007780955169478, 0.057629819382953605, -0.019709560268588652, -0.057823914219534894, -0.068256964756672839, 0.027890820691469885, -0.076656239311701027, -0.023631977229926458, 0.019705542780305209, 0.062780023228323073, 0.0043080812012436104, -0.0068539298994425221, -0.06958545243479107, 0.056698946025054167, 0.04217344775125749, -0.02598409561655364, -0.033097604108995968, 0.0095921823100812154, 0.041800833565904215, -0.050819206523713883, -0.10689758970874308, -0.015847929055034071, -0.060764599912676534, -0.0062175219913371549, -0.085347310202452731, -0.097474869441167511, -0.059282139115269104, -0.035577269192877056, -0.075014161045616631, -0.060536079286523312, -0.11817678424233188], 
        [-0.024906089757269871, -0.0020839929168818827, 0.03600621465641745, 0.040388199406629903, 0.0046367828095772237, -0.050097408580542964, -0.019438803749024975, -0.099398454194897373, -0.039682250621000295, -0.0028157838678664303, 0.003598249335640377, -0.054099425886740632, 0.098751567366142629, -0.13208302404353375, -0.18035374659388975, -0.0043732111233372346, 0.052329318134350926, -0.04335824692063206, 0.17086900465322874, -0.087788905809879941, -0.044980405576590651, -0.03163490494923718, 0.070376930420080558, -0.22835180537374491, -0.053228685368124661, 0.20061806426747758, -0.010253623864425198, 0.015916215379575709, 0.11152189577260957, -0.12242970393701272, 0.20444421875737073, -0.11370776685859571, -0.079913946642613046, -0.15288251066153316, 0.013009551196509275, 0.24933943719410992, -0.15783799994383102, 0.14723844916068518, 0.12653772742745573, 0.087844531937603762, 0.15842166298167773, 0.048090301745894584, 0.30801127557408381, -0.11761230465763839, -0.09838866239110361, 0.21453595775800124, -0.1423387911053251, -0.0057875034434971828, 0.14715035050010203, 0.037047259467474523, -0.050841281845606351, 0.14408577985508386, -0.2038513895714491, 0.12419113537768206, 0.16468328842666694, 0.012860540177512661, -0.060259991855088471, 0.075149602462860884, 0.32707138878173159, -0.40030305735760485, -0.26935994114991207, -0.27607955331013073, -0.11367870913437449, 0.18759384386653338, -0.1163031684096954, 0.011359887068835964, 0.09104201353611753, -0.023930250513817877, 0.027145616702753089, 0.26867810752766969, -0.040944043069847058, -0.051185346442636469, -0.062555156572748197, 0.1472213528555063, 0.17279204270125498, -0.045587324746883026, 0.040778081769105995, 0.077307454201848841, -0.045917861885393978, -0.14679289792741518, 0.058857192810905033, 0.30472542738820174, 0.2683300390974695, 0.20924065894919816, 0.21225020570051081, -0.22492319213360987, -0.1053571313533698, 0.10129898309130989, -0.058699658556484721, -0.056962291919962646, -0.053784567323456531, -0.064199356290904355, -0.023276261041638765, 0.1463492641852929, 0.17298005397684749, -0.17279567370535234, -0.028270599211786665, 0.054369003114690263, -0.10106883014481371, -0.14024347735480464, 0.018313526646667293, -0.037983673629831183, -0.065301664052257818, -0.012949891765581065, -0.094604107423927594, -0.11534207274853202, 0.0076674644006928493, 0.066321539829234916, -0.050400969350873806, 0.0074219548220236372, 0.028869570811624359, -0.015979869180987795, 0.0047547098123721819, -0.023242027383037541, -0.10363187962188126, -0.08083238636814595, -0.038313754638492299, -0.086839600348980459, -0.019540426477005362, 0.031333439883288614, -0.15193982135608425], 
        [0.26630462964519636, 0.030128294989303788, -0.11791438037260804, -0.11737308015815517, -0.062861100017125554, -0.096766046107599188, -0.082199316172390957, -0.08602044544779823, -0.075246502052840794, -0.029806813487391677, 0.24281116497344327, 0.067042165401364526, -0.0073445552680056064, 0.019073705951446834, 0.02402774328620054, -0.022036865798413671, -0.041360734184431945, -0.021551677954214206, -0.020934734000922058, 0.0016783573161842508, 0.044653551257398255, 0.047330499149608574, 0.070320918539436658, 0.0049339384317501345, 0.068284358255943409, 0.0027795836778768818, -0.0466896472535712, -0.055777797336017988, -0.053408170439317705, -0.00010746082973150939, 0.053647124251753928, 0.014169718568750114, 0.02905438269701309, 0.023031619273586216, 0.00066727081308550005, -0.00051462984272446916, 0.0056491204378612469, -0.0020259322895197036, -0.016498390040156383, -0.022442940786663319, -0.035029164960025241, 0.063846154826204329, 0.044687185096032603, 0.058668246749611672, -0.045157147571444921, 0.06041887311954984, 0.040368811541336383, 0.099232499506447247, 0.048066185349036866, -0.046324953034900501, -0.00080887873698461902, 0.11409453701686445, -0.00033137478785196135, 0.03735595742910118, -0.0079674076739742593, -0.049741034524289095, 0.13611114777264577, 0.023766455706096472, 0.053497687988346081, 0.015733350480013578, -0.063824933259796907, 0.033330568088863713, 0.027844489959796326, 0.081691899842932555, 0.09714592419415595, -0.064828174985232315, 0.01437395739678209, -0.047331107121522768, 0.044196999907911393, 0.10629752929835162, 0.073542689176749262, -0.04442637013096748, 0.049683512301096674, 0.068365456286007917, 0.081523009768297947, -0.015087145755708103, -0.0019638115525515282, 0.039051783324939186, -0.017850512607641256, 0.02370779603383788, 0.06201068601506067, 0.073783766823374425, -0.091844803840924111, 0.010696782251581938, 0.086036514718463936, 0.094596207999147933, -0.074054927866882767, 0.027915857377493219, -0.037642014739791167, -0.040193374604089255, 0.0024468858328299675, 0.1274974581652491, 0.0093404351484588644, -0.040375276072868213, -0.090114609127803932, 0.10326418667261725, 0.02917729347842522, -0.0077046231605733149, -0.030226724173417804, -0.02693842944612336, 0.03299558344045618, 0.037655280816208281, 0.060384055506334661, -0.011607343174437262, -0.088458663756049549, -0.0089621130215228745, 0.041335212079519151, 0.025264577237378585, 0.032067053817915525, 0.023830466137715112, -0.079345931632774758, -0.11617934147005861, 0.035620949281212844, 0.10013927849222683, -0.048809475943344949, -0.11446551821055255, -0.095813017973671741, 0.016305663265873432, 0.11707531676597775, -0.06319976004011861, -0.16222515899222084], 
        [0.056794304038679966, 0.10167830608861393, -0.016503737435740885, 0.0046764347911659732, -0.015979430307930184, -0.047920295093506274, -0.055022283646318906, -0.10379295727074533, -0.049717862262312687, 0.10568238875466442, -0.031174132439086774, 0.083704603950004272, -0.091368133200752627, 0.057269302584031172, 0.018684874349729957, -0.032113253507965796, -0.001736967749467095, -0.072079756116517402, -0.09935581393877263, -0.024667483850197125, 0.08617572294614978, 0.040040155644135919, -0.15099062261616583, -0.00067872303189795563, -0.015247157304283773, -0.052523565344750653, 0.042551307369904048, -0.14444354746621113, -0.0065487046921334988, -0.071842610189861628, -0.012850025711011279, 0.014122793694046731, -0.0033943022739370415, -0.039640354001140646, -0.0031247601407242975, -0.04585791859357094, 0.0019020572673282693, -0.12415842588927675, 0.073896324144092557, -0.045015519750068421, -0.042377317003355355, -0.018876095794982992, 0.066199553272244749, -0.038229410201656738, -0.081067787682230996, -0.03945825059342991, -0.021573688648487861, -0.08753783022136527, 0.033366036076064857, 0.13641185499907951, -0.063205201260604499, -0.0012659096018193816, 0.0057982623571657815, -0.01152673538233475, -0.0079257311321652285, -0.14126097140944649, -0.034964896400424342, -0.05417735615198177, 0.098662735854543188, 0.31744333379137851, 0.039452304758183607, -0.12302035212752997, 0.090307702196104955, -0.018426534125878427, 0.0076069917669535497, -0.063786017925961197, -0.13634861844502966, 0.021706398551087892, 0.088489197364119254, 0.24006998601480642, -0.038574376291261439, -0.20903973825035016, -0.028547940107015453, 0.088542726499488494, -0.021390725008154893, 0.044285016775694894, -0.026993312698921287, -0.064465983803312712, 0.12944644855572515, 0.19089244056580751, -0.030480082660302492, -0.11056842407420524, -0.030936086975706011, 0.11334521747158818, -0.035129148248064457, -0.086017765013793296, -0.0072168706451755035, -0.10752750376129108, 0.04312283194476934, 0.16933458944871088, 0.04045539432256913, -0.23664539634671644, 0.11812030967359738, 0.075939969650854852, -0.10351739032237361, -0.030300589898196291, 0.086878456898969891, 0.020132080229428105, -0.023337176463668542, 0.1929319867081439, 0.022201478223351577, -0.099101135273428051, 0.15510108808703874, 0.063727924452699231, -0.2536830626984794, -0.11398510745687342, -0.060714100288377329, 0.014445183346757966, -0.078060776119834835, 0.019868445241697584, 0.0081798453460741917, -0.058441780232701836, -0.12524948970895577, -0.042729684478892374, -0.10578506496128201, 0.082761699659597399, 0.22610842991965319, 0.19472107409175121, 0.13770970450022119, 0.25212791464266937, 0.073498142085367354], 
        [-0.091381241401881697, -0.058079620328844089, -0.076530504628475743, -0.0199353534219689, -0.11698549667840648, -0.049621401738281688, -0.077132621657016204, 0.15067146207913978, -0.050781047593468576, -0.02068608682311579, -0.07749948573069973, -0.096758567391562439, 0.0077571560895567868, -0.0095979406212449749, -0.099565859084337058, 0.0051600482008870227, -0.052061725176615475, 0.21007930845912845, 0.065151157684292277, -0.07131801809693715, 0.018812215208894742, -0.00086442135402349518, -0.046564358647237104, 0.013463679946637018, -0.049760289181046941, -0.075120052315886143, -0.016205730606521709, 0.20370769256587995, 0.21631569735613507, -0.21639898101726901, -0.010174498767059056, -0.080744395481969419, 0.00065762540281793375, -0.10941455592056311, 0.0051919514244158776, -0.061527253139188519, -0.01884736889232981, 0.21787195260154674, 0.22243219444192475, -0.15575200547256071, -0.10816017929215728, 0.0051881907601944027, 0.031785513639906941, -0.11820319244612582, -0.091955481834663816, -0.065886002565202856, 0.045741458364707437, 0.16229065484815031, 0.18370330017469805, -0.081324008115822286, -0.096899444925845776, 0.11220947396556524, -0.12652409273694068, -0.056954083685135951, 0.0037198361414339312, -0.040598532368215791, 0.039300218532823339, 0.11791439151540004, 0.0326000042015889, -0.021776978247445074, -0.040529054786980857, 0.01854198366161787, -0.085732791470378808, -0.004251519029603433, 0.031088165635845141, 0.10946916476597079, -0.030520300750865037, 0.024588867262970132, 0.031028281179074996, -0.026058776582265818, -0.034739864282203929, 0.042015930066768251, -0.15813943081690485, 0.098811275146536204, 0.17664760200291613, 0.12060292796297431, 0.28365889513274267, -0.0098819391479129104, 0.020720424432064774, 0.041373041991295892, -0.021038365304358167, -0.095202664058810157, 0.14910980302517288, -0.025721833368892062, -0.12819902853565343, -0.023631492175036073, -0.031597247870627954, 0.10824280634239519, -0.091173425222870613, 0.063567445633335107, 0.021728192985388861, -0.10568636568278675, -0.03165356681046462, -0.0087472418572157873, 0.14635866247530055, 0.137170585551738, 0.040902403217571118, -0.017771123105949502, 0.038560203534045476, 0.039245273632345951, 0.056815291462562527, -0.11183679663036641, 0.064817659114458095, -0.0814319418691829, -0.03407437639196588, -0.11203464618304287, 0.15240885057308393, 0.13533724849720771, 0.068633687203628974, -0.036633006460861393, -0.046692920364638499, -0.033281368663026875, 0.0071094850495891995, -0.024376962431089298, -0.086464142800486851, -0.048461882500802841, -0.085872378316760006, -0.17119204490022732, -0.12548065175775711, -0.10025652608610795, -0.067724150717968543], 
        [-0.11048795383128253, 0.17729666058333263, 0.16552135430896192, 0.034404289623548884, -0.089588724846092802, -0.0098956908398675769, -0.092669573892880996, -0.06203414994882403, -0.13027990600802769, -0.02774126581005951, -0.033782876400120204, 0.068485642196071284, 0.075989574144754934, -0.036571377943051521, -0.027073113771866435, 0.051358605941092213, -0.12486678803139802, -0.11937553330158295, 0.00027670008133570678, 0.039242940114803171, -0.065341658588557533, -0.032591209892933931, 0.0094873995209515255, 0.077228802276500336, -0.11978965646742909, 0.065175622098800165, -0.0045330682114145572, -0.093210957468272904, 0.20829565218067517, 0.034407695510313439, 0.20900868773517667, 0.18059530210220634, 0.080546449898943231, 0.011691715187434483, -0.1036261996342592, 0.089440339361349333, -0.18290277626865079, -0.17449211585023297, 0.20463646978781697, 0.16205227161355945, 0.1248389858520476, -0.033920943885589638, 0.0050538696227267789, 0.011335298516995454, -0.001853830495579134, -0.13334091118720467, 0.13244272444684829, 0.131632260424145, -0.095949574197512086, -0.14905751361173961, -0.1371680896219323, 0.078006860735210071, 0.22398467991789892, 0.060077091359143922, 0.080459089156971392, -0.044226547302833194, -0.02641690246856537, -0.021047236515817119, -0.022107985555041423, 0.27081392806687543, 0.20243579723370436, 0.052508427611470655, -0.081686945424025187, -0.028000437521812652, -0.069004413488459787, -0.019947203774680143, -0.065108523571595467, 0.087304868895712956, -0.077077120690107775, -0.18137313212262005, -0.11403701580048946, 0.1344871234635103, 0.23244603542157677, 0.055124623486195068, -0.066463747876115559, -0.091451832072540304, 0.018849225191806832, -0.024654340248073531, -0.024966200161235935, -0.091424575201207697, 0.072527831499301726, -0.065216059830789028, -0.11921754880632893, -0.17337893909947941, -0.057219238952144341, 0.0067422534626652882, 0.011248995976294755, 0.068047811183628626, 0.049614879488339002, -0.097275846898811927, 0.0082358567684881357, -0.015023386519351074, -0.053933000536622519, 0.022181719818654445, -0.078603056286837239, -0.096990160520272428, 0.053341686179560657, 0.038592658381352868, 0.073273892990471573, -0.0027339150021431086, 0.0087236349272764163, -0.056654841529851035, 0.0089929406550926932, -0.047992111069460372, -0.072470382965599156, 0.013556901031652455, -0.0027078537211853854, -0.020808961745466689, -0.023685877670394262, -0.082885320875324089, -0.024581734079028472, 0.011675698399989887, 0.010268763903630733, 0.00027727025909281972, -0.10403456880151318, -0.031328630320557459, -0.048762641369514532, 0.013870483338988132, 0.009776937951070902, -0.0016096606912818917, -0.11084797308275902], 
        [-0.30333471569576326, -0.098154450360570744, 0.0015410657868983949, 0.045929458780550832, -0.065355998121677139, -0.13987052383343457, -0.083088561382526641, 0.082669066314702278, 0.061904779698073738, -0.11069374343220081, -0.28290200253357906, 0.22673155788863875, 0.18594415935524841, 0.071854402503120182, -0.030528580748157334, 0.028577245402910886, 0.031060985030853229, -0.043861615284254557, -0.044105176677454817, 0.022159810237959286, 0.21654680444315066, 0.30278316304132502, 0.012213805294510331, 0.086126585521097476, 0.18984475627300115, 0.17496536348485808, -0.084862281907876494, -0.081456542808588703, 0.01832638457011089, 0.13673417025774948, 0.27284413141414504, 0.094612335659298857, -0.07613963041950092, 0.062933406187327873, -0.097443958251205609, -0.068403980749692395, 0.0096655524754083975, 0.095040552086250632, 0.15936905785590366, 0.072995084064054722, 0.031252763725467911, -0.16546942109824656, -0.16677751455927864, 0.12669754079805604, 0.22204531073147377, 0.1873578562466022, -0.037621658900903542, -0.15711170707975403, -0.17298791364700297, -0.082555273200012824, -0.14455053081729527, -0.22415305552359763, 0.042542402815446807, 0.1038139770409886, 0.20625177708368309, -0.15880889026588421, -0.075658865558639876, -0.021485883747037457, 0.10891607713839715, 0.091092897473454199, -0.010416568160451598, 0.069543852325783792, 0.16542830711077747, 0.065217336152304003, -0.0148176716125085, -0.20521529011852879, -0.14264824540169307, 0.019756071252460615, 0.0058040644663103075, 0.039643334769194863, 0.15659048313489107, 0.22864706757459258, 0.14254650813759029, 0.057073186388449368, -0.053152191307381427, -0.034477291485900341, -0.077598395442579862, -0.066725783977938199, -0.064230325525589035, -0.089991097501851386, 0.028289830388051281, -0.066129155191647263, -0.11896201994465391, -0.082558170326111818, 0.012810697942117068, -0.024384133696020396, 0.015087500169279289, -0.13601461458960581, -0.075236980328811445, 0.039014121011195529, 0.02815424125400038, -0.055013916259284479, -0.008254101582952672, 0.002655866524947384, -0.021125020025650129, -0.023746573840204926, -0.042683164777021068, -0.059495722156300584, -0.019042694817947538, -0.12936213546879713, -0.026222299825073875, -0.025812691605142032, -0.041703863747776904, -0.0661914684158392, -0.097506063642520957, -0.058396072583561887, -0.089961267739098516, -0.0037007256822108175, 0.0011179813727885506, -0.10090477889016067, 0.064140298767104573, 0.010238148607735212, 0.06440364812729471, 0.076684547115576734, 0.039151433631154905, -0.025802896171529727, -0.00019835521728821248, 0.071841486242385455, 0.13125162014433939, 0.046056658246170903, 0.053499157763845701], 
        [-0.12965724207701509, -0.037580246387615174, -0.067610081744866102, -0.10396968869944452, -0.050146681143041577, -0.11661839201437256, -0.0134094248817632, -0.003812121401652345, 0.14551889487217159, 0.20960814138138711, -0.11572556521584892, 0.038199771776252472, 0.053736720825050086, -0.033780376813536642, -0.013778088995604357, -0.12296410846003263, -0.190779199296427, 0.063623184193675034, 0.072719948625815545, -0.18712323706253348, 0.13564826018751774, 0.10041735856871029, 0.0663871462462544, 0.075875100621604977, 0.10518317164208223, 0.14542272105614312, 0.12359189084318592, -0.033750642430414049, -0.1168093845370131, 0.047363177697914378, -0.078115158492371495, -0.0068072546065389011, 0.022330740883073977, 0.043345000603673689, 0.0061772562098951697, 0.10018581879835563, 0.12543189326433035, 0.29106180455164443, 0.15950577579932912, -0.041016614728731443, -0.24664638490921542, 0.10243965713284461, -0.022249340976419691, -0.03998099582023288, -0.054513454865913025, 0.10149283919617619, 0.12490712516373728, 0.024443018843315022, -0.1715648928173428, 0.0098209256442637616, -0.099464482677069699, 0.10892786493077161, 0.10795471728528551, -0.03038255212780229, -0.052093742890319261, 0.081082286817464475, -0.096274050930638774, -0.036267436417549877, 0.075185345713630086, 0.096808220000748818, 0.02028571579311067, 0.33290510761917347, 0.01733913364880374, -0.16522028580434994, -0.0040897062381491101, -0.051775053344798386, 0.065670470719540894, -0.032772885393817147, -0.085058808488073845, -0.11929889732683205, 0.092455936215032175, 0.25655461456536199, -0.13119179078724852, -0.099868329749784879, -0.033238669040386949, -0.014474294906370588, 0.022015269325752353, -0.0068706343634212103, 0.030438728104146773, 0.038215294505712517, -9.8671203312486466e-06, -0.13106943853344732, -0.11029667516487467, -0.05651270541297225, -0.035091478549347271, -0.021024591609859103, -0.037796865064866875, 0.0024114282376300894, 0.066872760480572752, 0.06279809114300125, 0.015860273651693568, -0.066417984558896942, -0.044395452917303999, -0.056739278057440889, -0.074490614504174629, -0.0017445397987308903, -0.001856208967092543, -0.031296834327762674, -0.080379010855047062, -0.032932702209649889, -0.039466027214634262, 0.026868758362947193, 0.052720469111467889, 0.017821499479210093, -0.0812792524309323, -0.0098243462809757751, -0.035827346651628185, -0.018665339965729243, -0.030414846245718247, -0.025397750118409348, -0.12699585584653394, -0.051270046062598378, -0.059492797705412472, -0.012977814302096748, -0.040201161068129737, -0.0063003255036662778, -0.059572314072736721, -0.060873397857079979, 0.025500546592364254, 0.056765099592826794, 0.012716285965905683], 
        [-0.053342785646891183, 0.00524567552363564, -0.047374753370638178, 0.094781074251503727, -0.040976740413566221, -0.096552554457401962, -0.074881802597734803, -0.046657906236577507, -0.091330632489740368, -0.040717971184299956, -0.093076755058470406, 0.0037318258071586674, 0.0012979923922400161, -0.072971306435051883, 0.057699016112258382, 0.21677924213445596, 0.062692077375228986, -0.044090195812729369, -0.023130229334030562, -0.021606172607987695, -0.016753725645425696, -0.089114918695803486, -0.018011910259290234, -0.048665499037987205, -0.038883468315214373, -0.1600836076867248, 0.12324454290748962, 0.16213596071632191, 0.081890999010858709, -0.026691379256621572, -0.078939099722900294, -0.035177884757280425, -0.070559193083664304, -0.081449629456742917, 0.041254495310394122, -0.0082409283980089815, -0.06410405058088145, -0.19223363085057119, 0.19698561203334053, 0.075457705890398047, 0.10168065244977331, -0.011407968361767371, -0.027454319260572038, -0.096909253770893336, -0.027762551704027569, -0.099431835349921047, -0.065804778038646372, 0.0079576419011488393, -0.031079452139909713, -0.025254998311881022, 0.13286239727231575, 0.10025133561412032, 0.065637269228549927, -0.003144015511429633, -0.044383514517180048, 0.055436478646850723, 0.059891048250770511, -0.0098526217416507553, -0.15354872527543872, 0.1700617723129286, -0.1844295002128809, 0.068014427221688975, 0.029876275367864972, 0.10799501360998554, 0.085618199850133345, -0.10413623068849565, 0.24464749614213879, 0.10562029167251738, 0.15464122158870292, 0.11486770498168064, -0.16275359615761803, -0.10100376605498677, 0.095138924293591193, -0.10761116645534677, 0.017873153892635395, 0.11423888867213229, -0.0018411500448220972, 0.086874147832482249, 0.16367347677496105, 0.044733386292518801, -0.094761623273037748, -0.14397973597021768, 0.21757349732675985, -0.034529293295072087, -0.12834039570251105, 0.039442131452955824, 0.052146536402598725, -0.0027754429203348772, 0.092486771466581935, -0.10000875137392633, 0.0219682748340118, 0.076096240514652802, 0.26484488873456774, -0.068778998021732471, -0.13150962876054156, 0.0011599240934269256, -0.068092913704283053, -0.027604333874574859, 0.0055121360660488131, -0.074848915014377543, 0.031133754790612762, 0.10057960203336513, 0.16473981410325628, -0.021659253601673652, -0.084824882710566013, -0.016801310205887945, 0.022993395502963216, 0.017167179382408942, -0.056374112089754111, -0.032324211286495264, -0.018053909855479569, -0.050023765149209809, -0.14089885860421936, -0.13965160319931622, -0.11870197019087025, -0.062036231181908014, -0.04101797266105614, -0.050867286670802161, -0.058573069820662169, 0.021580959803428883, -0.042699365835973099], 
        [0.019902842485734224, 0.15561506976085307, -0.028017485754111875, -0.17651276038235375, -0.039197701387862535, -0.060229014076549556, 0.040413897080862501, 0.0039324663973003132, 0.035474887918963999, 0.086187127716139331, 0.066211423470236119, -0.011482759449640119, 0.021711326088798229, 0.011537755053333605, -0.031843183714078183, -0.08491361323535157, -0.023265192234759174, -0.11448125258912051, 0.039181067323331403, -0.056998902182359298, -0.064776818516311493, 0.063733692782339729, -0.043075172605832698, 0.05638433416632907, 0.025730822225084077, -0.10729102468091503, -0.043117991855032033, -0.053657854256318194, 0.01584487603201426, 0.013290760860429117, 0.010200015604431685, -0.0031793878712187678, -0.11412253559205487, 0.030883839158126154, 0.021462269136898211, 0.034969864237521547, -0.079456104230846078, -0.085031737678128175, 0.11503343538242178, -0.10993782268920241, -0.089572802157924417, -0.0039431094236408934, -0.04578774281544791, -0.029069481413135097, -0.029312843103912124, -0.0022281839533548724, -0.015461174173461611, 0.08016859253876335, -0.096417465851594955, 0.068169543109748931, 0.14488842713652675, -0.020620161448456426, -0.12127975627620319, 0.0035402670006761464, -0.10860121905429683, -0.025759025070910151, -0.015907799649678353, -0.019318209958923922, 0.027711942877274104, -0.010691765460204925, -0.11261913121914686, 0.22919127543697509, 0.19547240621082879, 0.062576613714025703, -0.032437508756967479, -0.17049052524689434, -0.054887759421750289, -0.0086606964527578961, -0.032470312195105946, 0.050117935111423713, 0.038409765488664892, -0.15181868441017379, -0.17238837635837911, 0.17800490245662465, 0.15774737196971728, 0.11238684789419333, -0.11549538053161687, -0.1051441923254989, 0.029627428418807066, 0.010047460882148362, -0.03595190922317814, 0.015687349765215325, 0.10710721567720438, -0.041276051064384339, -0.23137836087848457, 0.10813840323639234, 0.20398998249936215, -0.014741356900987223, -0.062683408610174352, -0.049411487995288605, -0.035967710177904844, 0.041871499068939354, -0.072184903859897467, -0.083863872617445712, 0.098734320072343104, 0.11031868253657633, -0.22002867944446203, 0.12779602690138148, 0.14218707015954651, -0.0011896001696623804, 0.079366530371097477, 0.043588532242198656, -0.035424574718560489, -0.054609455641465063, -0.16492582250638183, -0.17557350746334122, 0.15889132124334202, 0.0041503307895962432, -0.10134763057667201, 0.19023517186356353, 0.084659592208096879, 0.11510279765301401, 0.16224249442600286, 0.17763576210351251, 0.22133908024822241, 0.14596218529396179, 0.02887144459288063, -0.10378678936442846, -0.067205691571172455, -0.088716399430536996, -0.041101641158728192], 
        [0.15920136420084935, 0.060406604769127695, 0.058122346605073032, 0.00477008922714715, 0.019787104327780913, 0.087203596056315003, 0.030264199678037729, 0.017304599070370644, 0.085575429473619624, 0.023958591314004331, 0.12884963809652478, 0.068599905466411953, -0.045567154593245292, 0.064960440039459111, -0.057217993135935161, -0.025447705395343731, 0.0909487087326179, -0.079769498949750814, 0.036730991722000075, -0.038480072535680726, 0.006076468777062756, 0.062315581478503454, 0.002067988991471037, 0.0065579719955623714, -0.0043517925373637197, 0.0096289999341297033, 0.029116266207693448, 0.01426370898438685, 0.029690457152439259, -0.081627383427878258, 0.046850542350542257, 0.006214888501193401, 0.018397271891386333, -0.012561848571951174, -0.040551619526904017, 0.028504081990583418, -0.011486869296661643, -0.059191179697348155, 0.022429209245582032, 0.078039055277124986, -0.015415531651337386, 0.019964992266425875, -0.066503829548354446, -0.0013193086595682316, -0.10842019255646421, -0.03697337790527494, -0.020534261687351601, 0.040747539700920002, 0.053337194618316, -0.00116709964776604, -0.0095601528497191515, 0.016298910205605192, 0.0077277626889895347, 0.00037443623014628974, -0.19227631613374657, -0.13238394826418348, -0.030124775371821032, -0.015887858135493947, 0.025013961658704745, 0.027518775349448854, 0.024198826147774258, -0.047760885812468984, 0.12256242261650652, -0.055852213081364149, 0.065026093917872521, -0.1285269471537781, -0.059058110817278908, -0.032314037012273589, -0.050141311125915716, 0.08014056175866828, 0.035775922639718939, -0.052897492514335016, 0.0028741733491999197, 0.082628087231978217, -0.021869185345972597, -0.069854074675508887, -0.068575988216225736, -0.064584701819010937, -0.00693137015502477, -0.063835739267782257, 0.065183894970587242, 0.085579887773321761, -0.089783371778548476, 0.02413243559151125, 0.12236645633019359, -0.0081031241390048803, -0.10893007981107913, -0.041047520032544138, -0.040485575357566729, -0.018772198351639475, 0.024153345138070187, 0.10036333221955367, 0.068740306407003446, -0.10245398888523655, -0.016349166098083526, 0.0070380009438652663, 0.12265704999147381, -0.043113460086378494, 0.013370230023298443, 0.016729136801514881, -0.039288684774408056, 0.057728476425995087, 0.041012638786676131, -0.049978733723102124, -0.032347506063964117, -0.08817543486159464, 0.099869944360031201, 0.065600331696059444, -0.015359581783002035, -0.028528989655607573, -0.037199051460136613, 0.15244521122136684, 0.18336254107941996, 0.054287847035064243, -0.046369032846879508, -0.1119122723959507, -0.11519151048090097, -0.022731910011617007, 0.11225252067886338, 0.28560328365377685, -0.067985252020442657], 
        [0.058958788260075945, -0.021876278629613638, 0.037612479257211687, -0.099005159575964105, -0.1165516680699821, 0.021078862330256215, 0.015957444616884531, 0.059647685916549217, -0.065505591575810915, -0.083395277179433458, -0.18213933265545079, 0.084305230751524365, -0.025710617818550302, -0.0014530727721881326, 0.062922294533444001, 0.010828617512124508, 0.077505124497846897, -0.066208360763709506, -0.055002695608746162, -0.061510630819380879, 0.068900345436844659, -0.055539144857880557, -0.020784660567228427, 0.089398233599742291, 0.1288331620004711, -0.12816590368747446, -0.0096792212613234004, -0.11505461495101575, 0.073195596999562046, 0.013390797267512064, 0.063157106796453089, -0.11664356591893797, -0.087677499975957904, 0.064068527412859982, 0.089552329159210686, -0.012366311546488887, -0.084841814209484792, -0.30992838085367469, -0.31591124672801529, -0.19715224674545362, 0.020969019898039606, 0.14193745471028157, 0.061843173279961985, 0.073936168201219551, -0.01304258854189852, -0.07497702247252562, -0.20603881883896738, -0.070945540809535773, 0.28309265451797216, 0.57742199459415977, 0.31262023603175498, -0.083661619056098951, -0.0039166593479060124, -0.007008189710296639, 0.040088156481113336, -0.049394984833606687, -0.029191264319536905, -0.081163508484737398, 0.19268793954258898, 0.21144872967342784, -0.29773471400507556, 0.12406492440813296, 0.3660537274903351, 0.093082413567314573, -0.024580539876515733, 0.10110689340406492, -0.062910539274161195, -0.0034612665515367895, 0.029116324782821203, 0.0020626436307547343, 0.10964075240294091, 0.064158923379264071, -0.21854402897708003, -0.12925232991277491, -0.079675200291648277, -0.01811196962139593, 0.035957827281212953, -0.046726417696597952, -0.060929938641963624, 0.01119071426640683, 0.02353396464233623, 0.072568418302712129, 0.23270637226267299, 0.33170083850101384, -0.057955687348093615, -0.12545830581187295, -0.039267158405268378, -0.056155244480238127, -0.046609200143938004, 0.060498849366474053, -0.043016662084753868, 0.024841779701571622, -0.099367884763605085, -0.16431861879138088, -0.15146165000437428, -0.0017544026515488691, 0.17032294123573102, 0.064867648206299922, 0.15233819334655943, -0.032910847411962485, -0.0071731964963948833, -0.0081380849704634252, -0.050724307248593621, 0.011173233429224511, -0.062101699142451269, -0.052308817017819691, 0.00051654855856720847, -0.0075192043437920311, 0.039091511248705406, 0.071465889129755322, 0.0063359942967715424, -0.095630124560084281, -0.025392132057811982, -0.10041647140235001, -0.097928005682022187, -0.027282327996318675, -0.038112131251473808, 0.012061424608286169, -0.035596588506541682, -0.052821862323290544, -0.11313037428451306], 
        [-0.15324006372195415, -0.061965612404142049, -0.020864586176693893, -0.0004281080429524662, 0.0730549833543368, -0.061347651024975337, -0.031466364007885647, -0.10327863822100901, 0.057558435766753083, 0.011198077448874383, 0.045234383554630685, -0.064711224992117677, -0.067011155811770431, -0.0057205043684774096, -0.028643015431602602, -0.037131071599513364, 0.053748889551759958, -0.054199304651787503, 0.021887370672747687, 0.016189862073254922, -0.019016514253116644, 0.11379602147808761, -0.11165312886440776, -0.0087496200052688267, -0.014474316621162608, -0.026251634435374149, -0.002710236678190989, -0.030990248737400521, -0.04127464832894278, -0.11453289829380965, 0.047907282053055035, 0.038421978515818717, 0.015082505447196207, 0.028769815253706164, 0.01684473164289961, 0.094727188915121593, 0.20593647137919804, -0.15159924031985617, -0.24555118979497925, -0.27707522357288905, -0.18048921280574989, -0.011307677999135979, 0.11441322835116891, -0.014636046617138777, 0.079198125709557601, 0.012007403858779957, 0.0072428501587866109, -0.18640141319376874, 0.16780516380957566, 0.56826306685500816, 0.34085510546495534, 0.15391020895285537, -0.22202084848747994, -0.093193681017569682, -0.005005130632420085, 0.080166786371967738, -0.0010856269574332431, 0.033973275724025434, 0.29561270160331643, 0.36482758672358029, -0.31466398989768735, 0.062497098572653162, 0.21968853798387469, -0.026684311034055108, -0.054686227873073694, -0.15194326555534887, 0.054278240860889532, 0.07409840320590326, 0.0050038364543304997, -0.11139002424195973, -0.29694277435857414, -0.0028083524198520352, 0.085921492659009169, 0.054283294807933521, 0.041159753010144698, -0.040069399672292144, 0.020583515255041856, -0.032968306498467749, -0.12400399212637832, -0.12690204319933657, -0.087864335801985299, 0.25943260806255236, 0.25468901684408091, 0.11148837097156279, 0.016197234685087623, -0.035512335618043525, 0.062529085678797003, -0.061876366590392667, 0.042653661514922003, 0.1456886858554321, 0.100266511239698, 0.049106374130385599, -0.1692085663504731, -0.15021472143352776, -0.036437790125085939, -0.094174544970770241, 0.052142701469356942, -0.02443775761673006, -0.043904470755572772, 0.097322253365795447, 0.025963340060584358, 0.04495779540761817, 0.015315696105485712, 0.028566823650113198, -0.099804513025419234, -0.056574603633366818, -0.0025488357793481964, -0.066924339863506169, 0.010193965172470135, -0.0061765952954370151, -0.10526334482403006, -0.064591418118637667, -0.0082273846843367929, -0.028937589097058611, -0.0021874049091571094, 0.0064020706434689961, -0.082473697153836373, -0.10584367018509927, -0.016046741087392458, -0.065096168336001459, -0.076610989193125839], 
        [-0.039511428419417599, -0.0080173333971271382, -0.016551615434322393, 0.0756169606326558, -0.029722132603671139, -0.025034558630525398, -0.072171220087672988, -0.092474182124173826, -0.075211870880661391, -0.044360430478935647, -0.069348984382251233, -0.022490503780794903, -0.0057147316926908116, 0.052051258112528066, -0.054607716916367378, -0.058372621238702842, -0.060777353546059718, -0.077336809794399691, -0.045476724941883415, 0.030772582414215349, -0.11620967239502454, 0.10797792795409909, -0.027779187806584747, 0.042775504075928825, -0.029085091874604285, 0.070665070823427989, -0.10670180015368308, -0.12972554862345784, -0.061184746782739483, 0.022941312169178836, -0.01197768577248755, 0.16487084184278611, -0.048341409303366112, -0.026936350074678175, -0.048056362033197193, 0.032473762460042528, -0.13513407425749813, -0.11294851883996024, 0.028315126778450446, 0.10779312846779725, 0.13718980587277638, 0.094828465533259992, -0.029662193522414011, 0.1321112375584729, -0.11093428808802747, 0.029166874149281159, -0.065792824284420015, -0.082565002818216271, 0.024708088751542928, 0.22293675583854181, 0.23881873192468081, 0.084903111184386287, 0.040208497032350327, 0.076545573835757594, -0.06123753763864033, 0.0063284441525853219, -0.051374467063856455, 0.062827084295813851, -0.036988261540257486, 0.22358537142740625, 0.048437402611115017, -0.25353214195075419, -0.19261045779830849, -0.019422340552033769, -0.062847643771965708, -0.036853496173419903, -0.12964946819383125, 0.044458755188555237, -0.12226738775925999, -0.075998647776664346, -0.066285036198489203, 0.2852615582722664, 0.39166626094060492, 0.21583615293103556, -0.00059671763801670552, 0.028281927318908495, 0.14150420560575661, 0.029357515776456754, -0.0073652568066015778, -0.018181855688694376, 0.0045056549707617743, -0.11281100988725729, -0.12216102487292639, -0.045821897312377555, 0.027683086807535735, 0.044114075431245875, 0.012960273742704111, -0.01033045914794202, 0.017525421607595383, -0.026815178240449843, -0.038433562205767026, -0.023176466057391931, 0.018238150229464657, -0.10609098396328405, -0.0078365274088666032, -0.1692715238790774, 0.055230115768598605, -0.038599121201013137, -0.030083122414206388, 0.033498786150872692, 0.064549273785100114, -0.054456334956194834, -0.00056162434047704601, -0.12305574145274481, -0.052312038879843335, -0.0062559873241414682, 0.066658808641008482, -0.083661410065433844, -0.0050756577353415835, -0.053945762783515969, -0.00027041140698932931, -0.029193425089981271, 0.060243323194549399, -0.018406883366667015, -0.031509946993241944, -0.02305392310291406, -0.14523023321109388, -0.083398220870461837, 0.0083801401834026554, -0.054527177498857458, 0.0051808659359899312], 
        [-0.065848619594800789, -0.053261079120780402, 0.035473933387924081, -0.043773076764098175, -0.042948902519114054, -0.035839763275580229, -0.03670964756282482, -0.035889928945933514, 0.0084303424035014791, 0.070959935481377259, -0.039990937836020757, 0.00062919576125276822, 0.02301560832911255, -0.01209375762579383, 0.023507991177519026, -0.0043852583759025239, -0.017754505089411822, -0.098393451339086613, -0.025598526153569709, -0.093253517869822292, -0.060084598840034829, -0.0067732954612012303, 0.0047322343217982392, 0.0098854552921198643, -0.0079343145894890839, -0.048435067329455274, -0.011810163769240992, -0.044468277499084281, 0.029161537175831059, -0.052373485912767012, -0.012794443685316442, -0.073999770655031175, -0.11228628800766731, 0.00053718856153291486, 0.054814439087026594, -0.058611861795578993, 0.031704764448120752, -0.0076501524160651341, -0.10568592093548473, -0.19589466237166098, -0.12315650606608049, -0.011442858954517257, 0.11925985331634427, 0.0010363876176450598, -0.099823252161576004, -0.010168708525203837, -0.077187879437463067, -0.066004695514408407, -0.28363396719594336, -0.093300462947429247, 0.03526227396896657, 0.1315555866231668, 0.091980662692318527, -0.0081160541251212113, 0.12425322308370529, -0.043160319385198737, -0.010050897456012592, -0.025512330079287684, -0.054800141064251164, 0.020003986809914401, 0.31672436340823878, 0.27826309013079648, 0.13789936294639166, 0.048833669604749802, -0.033553110848946716, -0.043105117290175021, -0.046986705987033792, -0.0079365698973256626, 0.048609259060924025, 0.091879922847580314, 0.23510886392711264, 0.016599220831810764, -0.12371629321306805, -0.063234562962815682, -0.089970415822645783, 0.010187402027455342, 0.072231276389250101, 0.013954273076743703, 0.061917245142637543, -0.043802817323688611, 0.043710574812090564, 0.034237891220848124, -0.14964785672058278, -0.021062558513936316, -0.0065214932642196285, 0.10036739854860938, 0.025703084368196946, -0.023339141967235796, 0.039960562146232739, -0.062023256504603302, 0.019839319918413791, 0.12567284760581157, -0.12435675118258002, 0.051042313590592921, 0.05395714565825474, -0.016946352293375488, 0.04332098462941552, 0.03818482834599253, 0.067064810396032543, -0.092507745085479834, 0.13190717572685476, 0.078818792684562711, -0.087287307293906408, 0.13682219566390141, 0.022366303998031124, -0.0032543902188911095, 0.11492942524291971, -0.070293221413877185, -0.0097661701896662682, 0.079120220441492722, -0.13762756714606011, -0.026907508147589007, -0.12733408978979363, 0.086009164316699582, 0.011950067353004187, -0.0089315833809120327, -0.049144400030709225, -0.044693326486270502, 0.01772819118739517, 0.012376530468464944, -0.085355211057613248], 
        [-0.15926058536081383, 0.084896584812555423, 0.010352869323630227, 0.024130584286049001, -0.009902524763821266, 0.016912897049950096, 0.073092475986395414, 0.082369501233162098, 0.0043022384356816712, 0.083855432144435457, 0.032979428566029964, -0.034178053263341474, -0.029838590632024091, -0.10512208483111922, -0.008974556089922564, 0.036813559154062092, -0.020708179559887629, -0.010090767452007834, -0.072879198018760527, -0.0016777678298555698, -0.076743314512725452, 0.036399119709258167, -0.022292045391296408, -0.079820967715901137, -0.031169859791016094, -0.023949824087409338, -0.09000717940002298, 0.049463895166498989, -0.011624433079905679, -0.012190094457130381, -0.038313237174491976, -0.013830623631471112, -0.049168224717006298, -0.087380247558461244, 0.036253216857834919, -0.13554744530431564, 0.023838368099940645, 0.050095096402370184, -0.053271595872730261, -0.085011920306738001, 0.0061676064127104344, 0.0016709301712408975, -0.013992899617507056, -0.062742876584451587, -0.056305160151194564, -0.080727059672253937, -0.042390280602992117, -0.14776692164523289, -0.097021309585960669, -0.070734044703521598, -0.015526870018377249, -0.2258827744334686, -0.12300661118492401, -0.11675473231723006, -0.16926423521447898, -0.11923817183461347, -0.012360787613125972, -0.053242566102073702, 0.030546117724330767, 0.11823686169287259, 0.1835792066113906, 0.16422671841790268, 0.13230129923057396, -0.066626949058822132, 0.034498938620505855, 0.23002917423607563, -0.10642345721363024, 0.095720714414564798, 0.18783595134907466, 0.1135920030571944, 0.025587855512019128, -0.067439730759943028, -0.04765764814588825, 0.10204615431399511, 0.30589644738015032, 0.1207425327574773, -0.019907430927027056, 0.079052792051151108, 0.091497228092328589, 0.053534935883382609, -0.0018597176390167877, -0.036332301992695111, -0.067753380558353393, -0.038232412213873655, 0.0085333812446309193, -0.16436890766057954, -0.041481437968170019, -0.024498004464789828, 0.10683536971967762, 0.011812992251597404, -0.1175917440126058, -0.012836857177767773, 0.0010457282789089889, 0.072147347565764422, 0.12614593084743808, -0.055281692968689629, -0.0069995168866165275, 0.060200941049300377, 0.019190774932036525, -0.00068959398576445841, -0.015094903464007381, 0.082564956168390671, 0.029352696699322452, 0.02052763134499494, -0.031246302084582171, -0.059332749185159739, 0.096753036088350022, 0.037229564658005795, 0.02552939083091145, 0.056861247331111683, -0.023450845541740421, -0.023607393595097947, 0.01954177012013153, 0.019437963266884198, 0.044548459713283819, 0.038280883907943236, 0.061662221134642245, -0.088155201525030202, 0.079304082788044877, -0.051664305162406034, 0.077757861731466968], 
        [-0.061708370720548342, 0.047170428243489285, 0.012296886297672109, 0.0048086430115889811, 0.089273037261738325, 0.03230033333916793, 0.0099210922415796515, 0.077314960663833185, 0.0072189861909926004, -0.0057895901610497437, -0.027110780745009062, -0.13988755144130377, -0.056492694825430186, 0.043740683484729231, -0.001146343682998166, -0.087113548760168219, -0.049878803860526635, -0.044601413295294053, 0.037026759136881797, -0.019657603932586268, 0.0018226974562157855, -0.13718210083603291, -0.023654469782779481, 0.023928892232900345, -0.06122045854429186, -0.029673384135270382, 0.020848245415982687, 0.078336447612606816, -0.040875528946684489, -0.039873516281161016, -0.055583967404462552, 0.080912317767847408, -0.15785957027200945, -0.10648703433887595, -0.13229515155412883, -0.043310171649513257, -0.10793874347611057, -0.087527306016331546, -0.10889258052047679, -0.094200174396959033, -0.068306135251702482, -0.04422556269513133, -0.13934687419321917, -0.1704639053008461, -0.21416865484332515, 0.055183328393643288, 0.11437493872756643, 0.20663278657310677, -0.10572022382588278, -0.17195276126460635, -0.070753945164719556, 0.056465453539173864, 0.14099415930836151, 0.1946078610379961, -0.082660101380364309, 0.18247573517682947, 0.11507042684035029, -0.012083622193608423, 0.071742093963169731, 0.19214713056103003, 0.19212718354463745, 0.17144674880884414, 0.15448386542420869, -0.010181744325890758, -0.075106220762733905, 0.17626659048346999, 0.072929611062275981, -0.085362521503941843, -0.101891980495703, -0.093910933641212807, 0.0033217473718428897, -0.0056858529460113855, 0.010932950962091154, -0.1295062582171746, -0.046960749909438458, 0.0032455130187898154, -0.0090717781099731581, 0.0068370840428534224, 0.052015337511096507, 0.01835745774621482, 0.012669751254791792, -0.074411187515711824, -0.063973999886746402, -0.029665290241513848, 0.058058821799073575, -0.018533488843353246, 0.010601655483648394, 0.081067124952225955, 0.020392890895924158, -0.022919324383815623, 0.12127224411021978, 0.0071001462180422178, 0.12312966006288995, 0.13042358466157222, 0.046876831123739637, 0.042704169294137791, 0.068078423886842515, 0.046053854796515033, -0.0067836016920987396, 0.045065140276322649, 0.032495429886824072, -0.043798472997901496, 0.039504422768531992, -0.050502036141981343, -0.02941424277017704, -0.072356052312286992, 0.010414642546130649, -0.037595357550694798, -0.024335687688017353, 0.025902421447803838, -0.0063118171276183854, 0.028123124281161538, 0.02743154969855563, 0.0088219909651752332, 0.010829518047857936, 0.021827682953003358, 0.043520974366854995, 0.0035936083619636447, 0.056883805856356655, 0.040877092282017878, 0.015956636369652812], 
        [-0.0083507468620479183, 0.061639371991654111, 0.063042641119523318, -0.015296208138174606, 0.10245170405475104, 0.0039985678533539099, 0.077652024216616294, 0.030021244554642851, -0.021835994938437471, 0.056396603655322688, -0.15006956293703871, 0.010032941582169524, 0.0050163763218688817, -0.018546011439547875, 0.015951124664690213, -0.0011364559207565524, 0.011706775239053238, -0.058604015442668633, 0.0015384317043948658, -0.092476074016002344, -0.061290397480221234, -0.064372135135045749, -0.036227342676995969, -0.027815877384510204, -0.024540854835821482, -0.03665117868630987, 0.017808195417626349, -0.13330602418496687, 0.093825439776295122, -0.063647339534804878, -0.050293417559033632, 0.040497807859436338, -0.093307118406317613, -0.051282463447807104, -0.013632758698631245, 0.0051772510548923657, 0.028088081363910312, -0.069493637727032959, 0.029169511310514418, -0.065714751210128819, -0.0095799664282084675, -0.0075631952942880921, -0.046689398469438127, -0.036037308824896461, -0.16326411718263986, -0.068090435834012641, -0.090402159417016945, -0.189584820342072, -0.10038557840858034, -0.081409742082743278, -0.053687695693256356, -0.16229791121556614, -0.053231203082402576, -0.075002109435830411, -0.12647068989268548, 0.18340634478038664, 0.016324182102231133, -0.095198942566774997, 0.046462085929464936, 0.13804558707599751, 0.26953073102703096, 0.10023542270642752, 0.053013201346585902, 0.043485094470545015, -0.012145589101238131, -0.056648567004507461, 0.022122779976736926, 0.14925047779460079, 0.20113371911375733, 0.15087642306265311, 0.081589939721924146, -0.094399747262114364, -0.0019980179561955858, 0.10064758348146532, 0.14323151379670465, 0.13388503720638026, -0.013345742399046789, -0.027656328955928452, -0.098837422849065534, -0.015845908439641777, -0.029293403577799304, -0.12585250537276885, -0.076534053854507705, -0.025133636251120382, -0.078349075129356405, -0.02574433170418873, 0.038564326983106453, 0.084352144623457942, 0.034971800593565937, 0.021597995522587295, -0.0096451137676172999, -0.024148476054881025, 0.035439018890817242, 0.094838888204336252, 0.013834291541066517, 0.047416120389632277, -0.052763377378187162, 0.099286557947731571, -0.042715908236761815, 0.065423720561164633, 0.012164923448017582, 0.048080933808946395, 0.046868409986020515, 0.043736365228833965, 0.033547437900394127, -0.046381661633450463, 0.062765142428707038, 0.024133154758299614, -0.097568717053638926, 0.13228826368262767, 0.043959645127688234, 0.0069923806816005706, 0.029834519712280835, -0.02842119488910682, -0.042758777280284009, 0.050490465625002964, 0.050638143272702621, 0.044201806819941999, 0.015928366919704041, 0.050283819730028469, -0.094578811274961511], 
        [-0.0093002340146824125, 0.066420687864649622, -0.057988261829786683, 0.030467914093403506, -0.088942632863114157, -0.014873330866996408, -0.06903000288081293, -0.05977259337654181, -0.024750165724362155, 0.076980585184517628, -0.11219177639078851, -0.00026098838462658425, -0.10643324365636619, 0.046966125920151987, -0.10536876322983255, -0.073429349480272951, -0.017258600082246129, -0.0097549083090397049, 0.028937359707606723, 0.058320145229388498, -0.10852363274246603, 0.0093034019216029201, 0.0032394886759010109, -0.11758435763177846, -0.030716524173680759, -0.012968473875358794, -0.072432676585988245, -0.02951516712700545, -0.030306917069408162, -0.010562351852173165, 0.00059347532650239152, 0.045901836344348218, 0.009959243815588284, -0.14726958069576429, 0.10665865350902941, -0.058288735861848573, -0.081332140906973854, -0.10522554630509694, -0.092706118193706472, -0.080448776925478707, -0.054722262004125631, 0.035003945293075787, 0.018233850654384959, -0.064682184713342458, 0.082552298558358356, 0.043969243290146544, 0.10735340934065053, 0.17551198745608881, 0.028146227406542355, -0.093032253049539659, -0.080991883086283231, -0.17304587761466295, -0.08397564913817572, -0.082186994451058898, 0.026086345132597978, -0.024523009144156466, 0.061837165471639872, -0.0031532579414115108, 0.0138867394019625, 0.22791162384791516, 0.17839063189638452, 0.16802924166508618, -0.02242358838747683, -0.070478648225526089, 0.075631000143473515, -0.13496798278125824, 0.061914443579036908, -0.013965499326545715, -0.040287173996164619, 0.0049442314234498172, -0.14234850191040116, 0.13422797072590037, 0.0044641492895416265, 0.17884346888192523, 0.033152160970333064, -0.084186014593884625, 0.022681908276631663, 0.069503167546493966, -0.10838151310589246, 0.025867188572352328, 0.062726350687918833, 0.051958392475047875, -0.15684747676320326, 0.13621424644871002, -0.077635757069622086, 0.027664309706770987, 0.099426252087916597, -0.024066482717244451, 0.018369096774303477, 0.11490785777152708, 0.017998296859149974, -0.024584275074312559, -0.072970928250824352, 0.070923228278133063, -0.084294490518602633, 0.14548924260173943, -0.081488578294887343, -0.046883067570820579, 0.065571023838321571, 0.082578114864735361, -0.036743335018587939, 0.054909713394909312, -0.024501097951853828, 0.19599838240616638, -0.047414397145733048, 0.0027762441038286303, 0.030268059356193769, 0.14718296789670926, 0.043111866833212033, -0.045242662159025837, -0.056666701926203059, 0.011024035468495882, -0.037469678178404013, 0.034539200168746578, -0.093469946147855573, -0.030232213433933387, 0.092526075272763977, 0.0033730560801506935, -0.074954887684573437, -0.056309553485681563, -0.12734695058277604], 
        [-0.074008406292552564, 0.059418218830081374, -0.16185533770248933, -0.095113775751815649, -0.054156530748324355, -0.09524659355343601, -0.027700374104369613, 0.13095967694644639, -0.082898147730574467, 0.043236330248349053, -0.073265765844677394, -0.010406688952704322, -0.17908099782642803, 0.11214349559047893, 0.011254398841125272, -0.07213174644946746, 0.011242646811143842, -0.12960939072644068, 0.01738837182774236, 0.052081850613964469, -0.016141307058450453, -0.0031876314325390964, 0.0604762980771201, 0.12062873361043944, -0.11552428611131449, 0.053112984787895695, -0.11175835774514202, -0.085344942760827144, -0.10341778301339327, -0.077512128518261517, 0.022696330581442322, -0.061166227958907707, -0.02680129950339076, -0.013512513628398493, 0.072871648911960699, 0.21355653955799342, -0.06105176975794184, 0.23221322645596984, -0.006049593164551087, -0.11934471718699403, -0.048734896641230797, -0.0037696701788163915, 0.0015806523808981135, -0.059016242821538792, 0.1691633875802479, -0.10636213299345615, 0.013867670987275399, 0.13029048317364064, 0.17375284613983333, 0.36096974973474127, 0.072557346833875574, -0.050622427061095779, -0.061396795580056514, 0.012028170399798491, -0.059738878843501417, -0.15920195495822725, 0.073525564169076851, 0.01066435580390359, -0.12349031715778719, -0.20862800209268534, -0.24386438086421988, 0.22269546157582101, 0.046982082135201012, -0.10969479870317536, 0.046793880429372367, -0.067828443916568087, 0.15296218972876791, -0.074195141988218055, 0.042910924531490646, -0.0147654055974203, 0.37959648332332935, 0.41757874715387594, 0.021898097003166472, -0.11237855306165129, -0.043153207830735951, -0.0018388342246165729, -0.065448802775457518, -0.010369032880327395, 0.043814853347705546, -0.0090643466570875519, 0.10571938625442225, -0.044969836340908724, -0.060017098930422549, -0.12351913057017941, 0.072888367558094025, -0.073015583002772777, 0.024488919824195432, -0.046994862580658568, 0.0061025804809166778, 0.032988941004012923, -0.05586087652942285, 0.033548851659122456, -0.10250477896692914, -0.085369660888008486, -0.091447097764426569, -0.071752973305231893, 0.0060015981451380443, 0.0048780288701872482, 0.091777742044399785, -0.063911243276619789, -0.10839434894029129, 0.14049866674905956, -0.16291269836434877, 0.049227460809667313, -0.053956655700712897, -0.025757221007218452, -0.059498509327258808, 0.029021784211283319, 0.037106210375188055, -0.043182242815119842, 0.0044685625872698392, 0.037890914860866522, -0.12462488658167202, -0.015315868709315207, -0.099421564094155007, -0.057912073130086672, -0.070463075067971545, -0.069349456777686752, 0.036224904169083069, -0.0096669174590530253, 0.0072113489889556875], 
        [0.00054000377819494582, 0.019228224673755647, -0.0041211476935454003, 0.010351942594428495, 0.0060644135516636222, 0.030583158266134808, 0.018242859270646162, -0.011484714916580121, -0.012453527735116602, -0.013982904116162584, -0.073494945256138519, 0.00061003908987491105, -0.035456925731861377, 0.0091981481987587037, -0.0079306422406691113, -0.031346516850493486, 0.056360544230430694, 0.022269255182565641, 0.02097553828852184, 0.021592667245958069, 0.022292447571617122, -0.036376354666677192, -0.004893428694286564, 0.018803611912471426, 0.021642092128736024, 0.022979352605310751, 0.057278991872406218, -0.062846882957114797, 0.0080146423492344007, 0.001741066749290629, 0.023316260549374829, -0.0019692454830054218, -0.0097663509133344983, 0.026552602939686681, 0.019311702846604575, -0.040478949128969023, 0.042963456569752451, -0.0055572047143666106, 0.040028541338850074, 0.039092247288585756, -0.014760769957556222, 0.039287083950504967, -0.028685719461485404, -0.013542811096967075, 0.042796941924027478, 0.0093264852956811625, 0.071104573120828796, -0.012855025544723991, 0.0048120974901788259, -0.019345118328359015, -0.0068647366946253605, 0.060026504369553271, -0.051710217047649373, -0.0088037835413147456, 0.0085936562322940259, 0.011216837793947578, 0.0043659955128466099, -0.052365485216350149, 0.018585701567693985, -0.043301048775860274, 0.017257179405366647, 0.033163069502218985, -0.063371870872828223, 0.022236310454164437, -0.010282665078434856, -0.029097248102949336, -0.072928557864272242, -0.0065263865825004024, 0.021707948805501379, -0.012869723919694227, -0.036092446130363755, 0.049588404031142494, 0.0037685978390409776, -0.0354492999119638, -0.0174997172625617, 0.0017064827547835885, 0.027702634451048022, 0.010552265815024279, -0.015110098334354602, 0.010755306598934415, -0.042384518316625354, 0.055155751834777625, -0.046341678141637581, -0.025334054233096058, -0.031804391467191218, 0.0074468314164195526, 0.014822972242049056, -0.04150177712089112, 0.055659760596936877, -0.015163449841913621, -0.033479207943135934, -0.038074300748303883, 0.018025384518394062, -0.042187806169951603, -0.068458630665157463, 0.03254289254551393, -0.043000247054897869, -0.017041867015704329, 0.031343919493743794, -0.079988199511458247, 0.016715851151657413, 0.032905055715790735, 0.070750458478696737, -0.02652191057953172, 0.0097948892817532884, -0.008359095601141911, -0.022132176548511583, -0.010266695795141155, 0.027387007127093858, -0.019456613274216179, 0.047471229897352391, 0.0064639452494934177, -0.036820611388149953, -0.014924071652059345, -0.048381451190304049, -0.035401457202280787, -0.0011683979389548946, -0.054012963892719104, 0.079190962502102447, -0.046040607646046963, 0.010260604991224952], 
        [-0.0001569077120156144, -0.00010972965005487043, 8.6821335664521299e-05, 0.00028959182937081038, 0.00013336820101180619, -0.00020448462499146614, 0.0004636545850201651, -0.0001952429751545387, 0.00033248408073506541, 0.00026250426925845949, -9.9022792602876386e-05, 0.00023043331960011237, 0.00033250215597799282, 0.00015431271343276792, -0.00017517735947227692, 0.00017580915476165387, -2.7857926473168204e-05, 0.00010573427076637082, -0.00016548039725969299, -0.00010017127208199195, -9.3138582793007851e-05, 7.6297189543994559e-05, 8.4224838605342217e-05, -9.3286798510637536e-05, -0.00028719968349017605, 0.00021350040915488894, -0.0003150556862943979, 0.00045188552513562852, -0.0005495709535034074, 0.00054579146755674018, 4.2926655116619361e-05, 0.00052308254239302049, -0.00068598038313558152, 0.00018154537313607583, -0.00019968317282380993, 0.00023651893221749917, 8.5020480110765267e-06, 0.0004909646746514007, -0.00041196038371525689, 0.00037236304958472577, -0.00014792807116663712, -0.00020787769585125376, -0.00031631921796769491, 0.0003509716053853168, -0.00053024827751745746, 0.00019205484079722751, -0.00035924357541414903, -0.00014479534658806692, -8.220562624946387e-05, -0.00026762194550129792, -0.00032865721811569347, -0.00013872646247882828, 0.00019337977765215147, -2.8930782715007319e-05, -0.00021530682683792296, 0.00050075583422803938, 1.2869664429884797e-05, 0.0002877888733890388, 2.1516688855943711e-05, -0.0003850355075187134, 0.00026923989061119341, 0.00020120455885001831, 7.1269908071457111e-05, 0.00025510516920475984, -0.0005497530710414731, 7.0801300207756768e-05, -0.00031443494990798099, 7.2727814539388924e-05, -6.7647317771771243e-05, -0.000105969532620806, 0.0002042525509826365, -2.2660407178250186e-05, -0.00046405924788414654, 0.00029312274831753277, -0.00057910649202903841, 0.00046348258977586126, -0.00018921419605052309, -6.8310692835912151e-05, -0.00011583420771371644, 0.00024261083736967087, -0.00013788873457702688, 0.0004658190984066779, -0.00037781566966009483, 0.00087162452307387728, -0.0006364250227483409, 0.00019146350082690361, -0.00030213932128696913, 0.0001548061422106152, 0.000359478662719067, 0.00034064528670862265, -0.00013396590679365383, 0.0006282001548930799, -0.00026281686425658202, 0.00062900456753615941, -0.00083565053741081752, 0.00055501251620770908, -0.00039221531463511788, 3.0416452512397468e-05, -0.00021895611944867249, -0.00025050813688963502, 7.579225944163992e-05, 0.00032480822488636235, -0.00028410221135238486, 5.0197060845594277e-05, -7.6049710996853315e-05, 0.00029722546826794691, -0.00059771003008261131, 4.8137549730292717e-05, -0.0001438309620388073, 0.00046738458634185825, -0.00043149354775268156, -2.2304724232195816e-05, -0.00053506357248750067, -0.00011828488032837592, -0.00021777877913900512, -0.00010840223620667971, -0.0008066009231476462, 0.00028972319720168074, -0.00013991311235211912, 0.00043597630491348099, -0.00043607463640516625], 
        [0.00079929115048048283, -3.0120444183670547e-05, -9.6683286293641757e-07, 0.00086494515998912502, 0.00050305294849800619, -3.4861905346544875e-05, 0.00042196435679157235, 0.00065681743351262561, 0.00012927605196788594, -0.00026826496297133184, 0.00070485728728817559, -0.00045054232451688381, 0.00062841852757652972, 0.00021810609410295723, -0.00022766549944826936, -0.00057437187197429546, 0.00016670399815210679, -0.00045504871054576762, -0.00051896406488366464, 0.00016278501839328552, 0.00078467988668153021, -0.00020117424541528373, 0.0008133233405210466, -0.00054661334706784803, -4.6455199192108054e-05, 0.00039251101344009443, 0.00089045431724624202, 0.00044803263329346033, 0.00067252439816681275, 0.00034323953360750059, 2.970582797436061e-05, -0.00033407540980814887, 0.00020838216438882895, -0.0014686441499898312, 0.0013210643314603837, 0.00036229797084270932, -0.00042100922626168297, -0.0010662328062863852, -0.00047868856534150767, -0.0011025209542825376, -0.00011142308623937613, 0.0003605454081693979, 0.00080536848328376098, -0.0010504288820343197, 0.0012459778440163868, -0.0012889417769073701, -0.00010349556762601422, -0.00032598744524173912, 0.0008195978542099927, -0.00032869537508760371, 0.00078427904311249158, -0.00031027891242364769, -0.00013199686164484803, -0.0012037863711194877, 0.00056966626743207988, -0.0015831212285748082, 0.0012383789939280389, -0.00020329286471698974, 0.00054441517775214582, -0.00047971421799346964, 0.00036398024475242652, 3.0135996240618357e-06, 0.00034630267917200308, -0.00016208082819759925, 0.00076531009349528958, -0.0004374341893310929, 0.00035576070800035636, -0.00024010306236346007, 0.00021524875497277648, -0.00065504769214781017, 0.00036034608435831644, -0.00028137429763217675, -0.00014369965739139887, -0.00019791219870676433, -0.00050361569379568649, 0.00056144872177278649, -0.00023162087151370331, -0.0004190557849820635, -4.5824271728219651e-05, -7.5822332618488003e-05, 0.00080031407570023763, 0.00055839973489382397, 2.2265876928228429e-05, 0.00089772546330477848, -9.8580631232442206e-05, 0.0011729728289751398, -0.00052769578439227499, -0.00056096133489415972, 0.00010460229482414998, 0.00047497799203599991, 0.00073708806200396479, -5.6914197126341215e-05, -0.00031024215768372942, 0.00087524112410012483, -0.00044804418685771147, 0.00049555628484605416, -0.00070264579048571682, 0.00085455641871353544, 0.00012341905578699096, -0.00093546710283165697, 0.00037822251053991601, -0.00032902309441029502, 0.00056646914676724593, 0.00025216417640113158, -0.00037243077631573997, 0.00061576720559803309, -0.00048527538553305369, 0.00051397678370687996, -0.00076368821209107408, -0.0002717643717346516, -0.00036517822732572668, -0.0012782404754204373, -0.00037035199188238405, -0.0012045089669873877, -0.00051115856617512181, -0.00047596944593941704, -0.00072161260682115057, -0.00037669329780016733, -0.00075398515762274687, 0.00013432829456021169, -0.00059059014732752192], 
        [-0.00025150140763611817, 0.00020005435484797551, 0.00019417083739569404, -5.7923010958152443e-05, 0.00055863820768581925, -0.00029404960975239897, 0.00046418988043501249, 0.00016919725054860514, -0.0001365681365060609, 0.00014340737825123363, -2.7245579659461233e-05, -0.00017462744794458128, 0.0004320870347869557, -0.00024872373436234194, 0.00033850066080495095, -0.00042824500087672388, 0.00045274589383560021, -0.00033817558566411835, -0.00015836618254124374, 0.00037188063032157683, 4.0013223047928148e-05, 0.00029638131479669633, -1.1757971572848584e-06, -0.0001744667552400006, 0.0001268511029074151, -0.00025760998701211679, 0.00047735971540077606, -0.00015834145077744249, 0.00011916420387451162, 0.00015943376359087678, 9.3650022541307172e-05, 0.00013240084078796482, 2.5813088587590515e-05, 7.7538776799327379e-06, -0.00041105076291241384, 0.00045452204783612738, -4.040458358791927e-05, -0.00042518565093397536, 2.9496406138524887e-05, 0.00022369184176485946, -0.00022326384816004656, -5.9696847652630737e-05, 9.5900199581322714e-05, -0.00021800428194160856, -6.6285576454976763e-05, 0.0006383470103711519, -0.00035775911240443345, -0.00043585234193858034, 0.00055520311419225742, -0.00046867848529014242, -0.00036668240995048861, 0.00044104545236546815, -0.00016743491057120887, -0.00015286382598361098, -0.00042267651180960325, 0.00017696200882469978, -0.00087954556419632575, 0.00041465822593126441, 0.00030450324586917162, 6.846537634285204e-06, 0.00021324027853833406, 5.5444233738137332e-05, -0.00045538727717156589, 0.00036257374232944806, 5.8126129137410108e-05, 0.00048701098444248843, -0.0010394561974651842, 0.0011088516063339896, -0.00047446710387000549, -0.00021639705414199396, -0.00030264565453152321, -0.00031876669624713905, 0.00018256793655110101, 0.00022085306808071166, -0.00045708478654703222, -0.00016764562120866666, -0.00038680711837089563, 0.00023465496957380009, -0.00089058592344853351, 2.7029323083889965e-05, -0.00019392260432311614, 0.00043159570786490569, 0.0001466476034520035, 0.00020276998330380014, -0.00016623775962797588, 3.3772960168344411e-05, -6.9000858996467757e-06, 0.0003173325151770612, 0.00013183707157224346, -0.00026275451596236401, 0.00030496779772497273, -0.00022988038412455076, -0.00034410662962488809, 0.00033974096399670022, -9.4370346309838749e-05, 0.00015929656150039573, 0.0002208318439938517, 0.00023298688340578377, 0.00026684718412763758, -0.00042236166617067028, 0.0010171866741304654, -0.00066560749024659172, 0.00023102910516509278, -5.1105334736391728e-05, -0.00025247439169374941, 0.00027604436336503557, -0.00017760551435710054, -0.00010325189793795159, 8.8214957933602754e-05, -0.00022473324648105992, -9.1082737484730111e-05, -0.00032298641944957397, 0.00049768435071036133, 8.618913329085944e-05, -0.00027278781263277881, -0.00012650947795273654, -0.00052227277756379986, -5.2140779588955022e-05, -0.00031611240635322224, 0.00017884485805307976, -0.00037941318770559661], 
        [-0.17866885726802303, -0.01004627890548361, -0.042589675487805567, -0.065934664074428745, 0.052273011858990394, 0.03312160535571991, 0.027950496866449639, 0.034597017771390251, 0.040653401856438627, -0.006028884452193628, 0.012100171644170557, -0.005823115292745859, -0.07582851399159081, 0.11466944513385099, 0.020113986866166972, 0.068302399730251775, 0.053667514905722302, -0.0019151045898751218, 0.0032161515425703988, -0.02286773204984241, -0.036064260364357094, 0.0030444356366628143, 0.0050268251131806128, -0.016159035960289652, 0.01343428575788129, 0.046278393980945166, -0.019863576518606291, 0.033081554152618362, -0.011511204742527398, -0.02336066267834247, 0.048030531271691712, 0.072162863127648066, -0.034706965262833941, 0.015742792044845896, -0.04365784041015932, 0.052989886160218033, -0.00057782844346462858, 0.053685241409785159, 0.056409616043422858, 0.031927074543435394, 0.076208252276906155, 0.035084748498761961, 0.016016932367084777, 0.097829252626441224, -0.010932961737962918, -0.057604724295680525, -0.046117493596561435, 0.11586835368372229, 0.016630360691506946, -0.072380612241233516, -0.02721078987250658, 0.10400189079503686, -0.049863708111842611, 0.013157090965211962, 0.068758075593380402, -0.086093382914331593, 0.10550940203644331, -0.051925636293921058, -0.08457695827736228, -0.023868518013074047, 0.11534819907311766, -0.029927793894114596, -0.098805321065736557, 0.08174885118680475, -0.1060908740185344, 0.031317095721549532, -0.028082259348080146, 0.079441855776121006, -0.093214174572659181, -0.069858116578834631, 0.1070256004886421, -0.071547923438654293, 0.064465129204212171, -0.099164651058250175, -0.013469569177392421, 0.034352271480565931, -0.10594412155782011, -0.03578650235512626, -0.011063899652176858, 0.01837774789897521, -0.039253607512632752, -0.14016878911229191, -0.03721312667737868, 0.011543278654149135, 0.0046564754198335154, -0.076081218695912403, 0.021616522856597421, 0.0056963747245355328, -0.054225456412860529, 0.039976482103285263, -0.014191880258275905, -0.056038754162233653, -0.085955467898357049, 0.022657092076657198, -0.0022047701913627767, 0.0023519724649996229, -0.0086408360440515565, -0.064880638505246765, -0.0055523419967167011, 0.079595981567899043, -0.011189689119441921, 0.019694004932030575, -0.0090801628377648672, 0.0030332790803103706, -0.11172688994501827, -0.037768645256787345, 0.14407928948205997, 0.0085417960067592294, 0.051063118511239784, -0.013809133479955219, -0.018804152269311619, -0.07472568370647939, 0.06221295634359636, -0.031173033698703514, 0.023265775517157146, -0.013229707925293089, -0.088087391935272305, -0.16850726894231444, 0.014989271963221966, -0.045790255154309852, 0.038301569939229688], 
        [-0.12471960559298051, 0.016331688001818473, 0.010132274081235342, 0.0072416673905218165, -0.059929049564220245, 0.014888737012368864, -0.052418796845186043, 0.022430681494682764, -0.043701832681609432, 0.021372011063678874, -0.066551867105933471, -0.076751551449093222, 0.031454085069049939, 0.00050698620363882289, 0.048208537020902352, -0.043606360639726817, -0.026401547797884867, 0.11494953428588206, -0.00084487993298972171, 0.041763229275026299, 0.01662088156180045, 0.095743595922567412, 0.016932325856871336, -0.031217493839729042, 0.021554336392332216, -0.061228351827234268, 0.081696206527506948, -0.055099500179900118, -0.095301583024627504, -0.031351972335037837, -0.035124606327755464, -0.028837124821496515, -0.047884715408835349, 0.060702425126256093, 0.080684564761646177, -0.039627899139767567, 0.064709803419545964, 0.013113165039676609, 0.16301141390375001, 0.12824898952567468, 0.074636476814154057, -0.016897285990514471, 0.010567173254586882, 0.0033568218888065868, -0.041216089414404501, 0.083780621282672774, 0.10218950832276399, -0.048555074093876056, 0.095493142695549343, -0.12104629625143107, -0.1493368753465891, -0.038946784830535597, 0.053670879181312289, 0.10886118501283593, 0.0623983957252945, -0.064004861565808618, -0.0011642109155079912, -0.017989480311898197, 0.10376420696530403, -0.021666202371688252, 0.20636172793169102, 0.067515676746473546, 0.022594628822994373, -0.10875049523175929, -0.15367838830228961, -0.10156435275826153, -0.056219286606131964, 0.0048935577385261636, 0.080508839991384598, -0.048986994532721484, -0.054673573535446829, 0.034417241571081683, 0.13788724353627765, 0.17933790589816131, 0.22694206874489239, 0.16714737286853379, 0.28887901477932182, -0.0045505039085086373, 0.12853746432697205, -0.14688209250590184, 0.039803550389166095, 0.001161697593967297, -0.19133864743440931, -0.11485627148408395, -0.040556116529253762, -0.07701433461570141, -0.064919136067342759, -0.17402303487112258, -0.069451907977663707, -0.17069839255636562, 0.097553381246305429, -0.012417013824468703, 0.008779997988951951, 0.033808465522018064, -0.040323952860908119, -0.12350740477425591, -0.071103775036993527, -0.032842030960087386, -0.025256511130247631, -0.13557637802150552, 0.13026525943758985, -0.098978661007624966, 0.016539720299720638, -0.055393829003122938, -0.017477845213565581, 0.082533142084316155, -0.0052692792534465727, 0.023714959705274333, -0.025127637792893034, -0.054493603758074591, -0.0065251479532096798, -0.19551796620580655, 0.00051533084431857473, -0.12469764291808262, -0.010402114917957516, -0.040854371970225421, -0.050091277739518963, 0.0061714297831496267, -0.022234206683905616, 0.02500462259196987, 0.053771861975124485], 
        [-0.06953146063004409, -0.027855167396772469, 0.018198128969876097, 0.015264256008671422, -0.021354522403683483, -0.060614589679217915, 0.0074260205660308318, 0.044909342578395892, -0.022290100457800159, -0.045038114215761482, -0.055530719421861996, 0.0902442269939355, -0.0038080752412905372, 0.0018190374684997207, -0.023994658931284905, 0.022637227704013697, 0.034385575661622605, -0.0041323426627789817, -0.015239537988315635, 0.059722981968446186, 0.0035446565552159082, 0.10857055311904133, 0.015827587897896331, 0.0089878658118320159, 0.021416627127059842, -0.026000364715464741, -0.072053616087858346, 0.0067502383554667415, -0.043797404208141606, -0.086222116691012249, 0.0012469216786467549, 0.0139677771449414, -0.018800069260904509, 0.091106469337856627, 0.071482857933576227, 0.053141334521401601, 0.0091480821350588895, 0.0032188812978254239, 0.10531967232382244, 0.013069231097604272, 0.11321624512420622, 0.024085428042357526, 0.10571237447906545, 0.097249430799325298, -0.040356773391022248, -0.052072201970584105, 0.0094838487447085687, 0.023224654347251975, 0.048982273381055874, -0.077047377168934061, -0.016369059725570845, -0.0483990050185562, -0.017518918630372055, -0.048725264078332518, -0.090695565054201857, 0.14584898982636468, 0.020202497107516055, 0.052473273376908665, -0.0059210182550390594, 0.0022813027410172881, 0.011431314884242511, 0.098601714425802095, 0.035390606662766999, 0.11802445684529828, 0.014488333933066366, 0.14985625484032264, -0.083365081182869311, 0.02604166398390495, 0.057536223475310372, 0.10289686959448127, 0.13376253308792016, 0.098599279015396224, 0.11296262694625853, 0.066811519947584497, -0.030392332219791651, 0.037677148170599001, -0.080465409013379868, -0.013433044614551137, -0.079050272382343106, -0.086927785491348469, -0.13723308506024745, -0.16180861780403702, -0.1559436708245299, -0.15633705073107523, -0.15765816424278123, -0.019054153693685204, -0.066428041346772757, -0.040315394300378581, -0.15529720969926392, 0.12101901933989367, 0.0073739433496777876, -0.039042313006326899, 0.044864452505471414, -0.031074257750175131, -0.037869139729967256, 0.02693566917864209, -0.025703296599595565, 0.030655452436583908, -0.0083294916392306975, 0.030463719734315588, -0.016822379770469454, 0.010025642600714306, 0.023941947007600384, 0.0037369192163097253, -0.0062061382772640519, 0.040478298614511805, 0.015199733590990229, 0.035362093609806654, 0.035113913555059863, -0.10029441782907185, -0.10610472749034416, -0.052099942445672578, -0.0037985170316418085, 0.029290155294759784, 0.020763196785263893, 0.037574297260543371, 0.050568193891647441, 0.0025948365095440178, -0.034033364904604929, -0.031897318483976964, -0.072552877764797324], 
        [-0.074150761326980147, -0.00066986401946685092, -0.038515158134214342, -0.023181050413543618, -0.032101285996002565, -0.016813865511960804, -0.043281469336209986, -0.034096544273423686, 0.01015713603552236, 0.030027201044358451, -0.13569617378270427, 0.05532035184255174, 0.041422683304832522, 0.054237693471711729, 0.075158352517811028, -0.0045611635231176673, 0.0049336835448356223, -0.027804205731258878, 0.037859313146976444, -0.010636484133250523, 0.043039074634147079, -0.031109281470661186, -0.026842848775607248, -0.03367029747858763, 0.0053081926498119852, -0.039719826466191911, -0.011433401479806288, 0.0018726799542050226, -0.030624975101159628, -0.0029380651582422979, -0.0095989319691330288, -0.013587888941593039, -0.0090228406954841085, 0.013981082758308103, -0.027132225331696645, -0.066722260341411405, 0.029996307562002861, 0.10810874336228038, 0.073932536945285954, 0.094596891288321466, 0.021326989785555719, 0.0051895327288904308, 0.090625514956272496, -0.0014967572066416635, 0.095691596028677217, 0.071032806785292307, 0.093121494030091692, 0.086410233422467064, -0.082911827913294739, -0.063317188738201691, 0.058040828225321459, 0.094123280130627499, 0.048289462433899338, 0.0065600637976757845, -0.017978915242308827, -0.10529465762835961, -0.099505376903884918, -0.11641428549809074, -0.16336914552196619, -0.03066309873006054, 0.037327302518737379, 0.021715752289796372, -0.036984427993582598, 0.10584212495392706, -0.038900837284283257, 0.042388662040559938, 0.15761090374525039, 0.14948261048000774, 0.15123269083375968, 0.26082790242726567, 0.24549601207125132, 0.20845042919094864, 0.014092314529055919, -0.081544305437015088, -0.12046457900197742, 0.19946559288633667, -0.12279301434870472, 0.043147465336577269, -0.0039359433149267903, 0.041944507737883142, -0.14662824409559153, -0.16841554816441323, -0.21746364722425923, -0.14593598626028459, 0.12453643290997443, -0.018239200160202453, -0.09647557951641697, 0.096744958348161519, -0.16116049604787364, -0.10959035389321688, -0.18407080190584757, 0.028717350720618054, 0.017940145844063823, 0.067712609426401407, 0.070426899449170036, -0.11002871292121127, 0.093083619307167409, 0.015479935983498054, -0.15557089262678336, -0.014144367587187956, 0.032512137754861198, 0.05556774883075101, -0.017472918751953406, -0.029533628631708192, -0.038827731306693092, -0.03021232345401817, 0.045497082764698535, -0.15437986410128418, 0.13419753386333874, -0.20134066892161695, 0.062249155617802823, 0.024284286780838271, -0.036965190357203068, 0.004665449800701868, 0.019888261193014966, -0.083467980409420606, -0.016566558945081397, -0.083160175930132627, 0.0045192184141086209, -0.15565975294086548, -0.091842377438527273], 
        [-0.066489372545755529, -0.047718799252733826, -0.09410351655788475, -0.013599740258147358, -0.045530705171441511, -0.085061538345857085, -0.063093532506485611, -0.053820778098933868, -0.1222176787662156, 0.047517892917907548, -0.10543817119017407, -0.12135417994296471, 0.020628638474339593, 0.038231355833956926, -0.043392365131814319, 0.0044224749450447378, -0.038085077795412883, -0.079830174085868372, -0.028985978187303432, -0.065505748977689585, -0.088402519021417422, 0.0075685626418508772, 0.014599611957773671, -0.0022052017437265842, 0.018238800652908803, 0.066199495089427851, 0.014132567520511584, -0.018584781288268692, 0.0097275167736109152, -0.013372741092406291, -0.13951730470879722, -0.099454439128528874, 0.0024536802212185172, 0.023325717552923071, 0.052273179874949491, -0.0078433789568586876, -0.019449100540297075, -0.03793640930232544, 0.006026659571149097, 0.040309888608414196, 0.06132376182771021, 0.12961234902069763, -0.05246356331115444, -0.092316625226469162, 0.12501372859645493, -0.023511024540922139, 0.068699855508214253, 0.081178430452994624, 0.081636331620792119, 0.13284552600960509, 0.11443480169918706, 0.031137356793659591, 0.03957361525706285, 0.064206693867907672, -0.026585623441445331, -0.069602244432452998, -0.006882701260322803, -0.086642203201899415, -0.12201442995127351, -0.087602601453127441, -0.097081289635905094, -0.14353417247406297, -0.032404092368745641, 0.016664803245589305, -0.028877650787150662, 0.046660756524674038, 0.1676934927534405, 0.081856698021962743, 0.1329811871153378, 0.15796978913910928, 0.15420647629486711, 0.23507941566445101, 0.10845077567152385, -0.02663613626038222, 0.10225924257045012, 0.074815640105395723, -0.067484345697152587, 0.014558971240431304, -0.031796943969915691, -0.060628238131727054, -0.091575240277000952, -0.021836966217199869, -0.1828633961798013, 0.094501673222211161, 0.013464938214634688, 0.017062888577847678, 0.047282001792194439, 0.10222149429615252, 0.0032626808542848551, 0.014576952315965966, 0.053700266574035892, 0.04846835624654347, 0.0033060862248684986, 0.10214575008785104, -0.077242394031282607, 0.018934507344396237, 0.00098413451682097947, 0.047211817912021947, -0.042523626918625143, -0.059478892430034694, -0.043645446723720886, 0.0072259828467460575, -0.045364397904695007, 0.0015257865026378006, 0.033942020440189763, -0.062868543989156617, -0.011162136740504053, -0.026181503928468051, 0.11832542908426394, -0.11894486304453102, 0.0030266795551997794, -0.019806603799353117, -0.020184767444436195, -0.0019914632003974475, -0.028348567852824622, -0.051936208080729802, -0.114547660653914, 0.016934758716036884, -0.037824591697152236, -0.01375883701059563, -0.14176618903476443], 
        [-0.12379363868138007, -0.022793163596252192, -0.056572016200135848, -0.039201119991114218, -0.014505658462787643, -0.14164430469555672, -0.066772525835277804, -0.01689199875955201, 0.018395341706225341, -0.060257373814153137, -0.11708273412158036, -0.16991897990888952, 0.02268184312792898, -0.037431787558444535, 0.0278362850257034, -0.10391555593395135, -0.024895792104006661, -0.10240649559419762, 0.027892065133358145, 0.037030240290622553, 0.025269076865704919, -0.18054736103209962, -0.13783839666730963, 0.03215416365047865, 0.10446321758795965, 0.042116319344015371, 0.0035951247503783063, 0.065346577329699312, 0.022452948281901614, -0.0013754778263451381, -0.030524202281055096, 0.030663561315706717, -0.09877455975225044, 0.21124607085784919, 0.031922562444243588, -0.034705389173491433, 0.036621988513888717, -0.010853119077650658, -0.0073890345339706932, 0.0056782910255717134, 0.029566782664102689, 0.096433520675437784, 0.029157767155665329, 0.29856892064118878, -0.07919582633844692, 0.00025703866042990631, 0.030975751575185936, -0.077561027711158165, 0.10470636569751657, 0.1428460407644222, 0.099401781103168885, -0.040836585779750967, -0.11174053722087644, -0.067308311411080401, -0.18341503352838884, 0.13979526699252226, -0.041934973700445265, -0.092866471596007444, 0.019653227675469925, -0.090390148741556695, -0.20734375167567454, -0.072877904472334984, 0.0027432574380281405, 0.0061245885209975925, 0.094598126228364096, 0.15505695773274958, 0.041295097014746554, 0.006098921880011085, 0.20246902024512597, 0.18772782665817625, 0.14967157503073222, 0.29059802382753935, 0.18823387968962019, 0.15999395370095998, 0.11915607104783087, 0.056017723784593507, -0.02792887117414139, 0.056676427194019247, 0.014381577347003349, -0.043592335358605627, -0.10690022762213068, -0.06224823853094813, -0.17877352623373868, -0.092288169841172746, -0.18022508861455536, -0.061398773420600558, 0.0666828177706692, 0.095796826575196115, -0.075610336916687143, 0.033484310787615143, 0.0090710017296596057, 0.0023841350072704715, 0.012849690649430291, 0.0037371676082230965, 0.056507739912754651, 0.071820826637994356, 0.074186721529350602, -0.027905258130710861, -0.084135488182671275, 0.10542017164154836, 0.028027285290237042, 0.065445007475626482, 0.064161641086581678, 0.03294077475246366, 0.0054020657546699907, 0.035715241209970591, 0.0077120039679083111, -0.035145762312081205, 0.095730503021840191, 0.068293341444558953, -0.1743073123711078, -0.053416372888697425, -0.043073098090359502, -0.075042084240128315, -0.0026001415644313353, -0.026744723242628617, -0.014014546902059697, -0.037147009442388884, -0.029554069220702237, -0.052552735398048014, -0.20455065610576798], 
        [-0.080336718914324784, 0.031542907328002801, -0.080333284552386419, -0.16579677604599055, -0.012897402202476056, -0.10178589629685617, -0.017890795871391321, -0.047932174101883621, -0.069572714289158219, -0.013085371055274415, -0.06403048933442046, -0.04738918650528029, -0.048253300258942214, 0.010624097533814846, -0.088303853599706453, -0.024800418220789627, -0.017016233501825004, -0.0731122923145789, 0.01795798282892851, 0.020031779934763197, 0.026270539591568495, -0.10026542176987073, -0.055354197675606544, -0.019202819676109054, -0.17886561336922624, -0.047929449603121586, -0.015476611158838961, -0.036580931341111331, -0.0013977731542055873, -0.024379638918464477, -0.013239317850851168, -0.016219240360668748, 0.033455910961528168, 0.031281534097803848, -0.11781030984741167, 0.08675961993407609, 0.096838260201831047, 0.0075779597881384594, 0.04020793008597133, 0.039796641743254979, -0.007964327106749873, 0.057675226481024938, 0.065973169052705491, 0.076368677904105231, -0.094338220047695015, 0.027581810662796059, 0.17673036090517169, 0.0080281795881781692, 0.079733536301333036, 0.14711146045229179, 0.066918272520925415, 0.050334009299972608, 0.001155762195899003, 0.013615235385982936, 0.0030149122423125882, -0.0015609840824338042, 0.13349258506848927, -0.080526523771321704, 0.050306757732385049, -0.13744070442042641, -0.073796305193363679, -0.031880400975331472, -0.057867003215660712, -0.065217491770658081, -0.066794148181761118, -0.088250637948153923, 0.0096844572434620149, -0.042763801342421685, 0.094637934686230163, -0.066201626509630768, 0.13555077154373779, 0.15162691406173393, 0.11508260905995207, 0.091265965106029301, 0.14083962832741773, 0.12798665154188912, 0.2063621060271425, 0.028581014482874013, 0.14481738942061018, -0.064493408628708213, 0.14635053020889283, -0.03932501773954096, -0.049277809721883913, -0.080228288656955471, 0.016307833788669575, -0.064651428896592297, -0.0779270812226531, -0.029574158180475041, -0.024416232437453507, -0.13305347995208761, 0.13699379135763934, -0.022414216362762814, -0.005868709852490793, 0.0049991943700797639, 0.070540277709872645, -0.0003799065544888118, -0.011858514238347152, 0.094750691888543861, 0.032188664060007421, -0.084874702797453586, 0.14236331721498632, -0.035524545957734237, -0.025841070343849228, -0.0789528097144718, 0.048317846092030999, -0.082026719163858675, 0.043364294508417431, 0.0027045844775661172, -0.027920654078814632, -0.071950926204345095, -0.099679715705843941, -0.1207171044051677, 0.027685856470463906, -0.065396577120716684, 0.041932056613189474, -0.063470441933357852, 0.015317705347783588, -0.088954618003619201, -0.0024258796088682186, -0.055981681173908476, 0.02502279163090345], 
        [-0.16063469325056712, -0.05067950894114695, -0.017602698377438247, -0.0024719881205989246, 0.025626936786392211, 0.0064474558094759424, 0.040905232267662323, -0.019412107970519368, 0.010907705003810574, -0.05700007695501437, -0.16989061568410888, -0.047847975558597475, 0.045770960450897138, 0.036605131005038968, -0.034700480386556126, -0.038814165043767439, 0.059925472084798384, -0.045041592097425781, 0.0044791344272125319, 0.010085652451881422, 0.017232862062283152, -0.014699311623237801, -0.031158529886819011, 0.054785786247363535, -0.045018671355357719, 0.027938316028020466, -0.050947638456247675, -0.058027574321254612, -0.018142649252876362, -0.073467281992698821, 0.029761358083885719, 0.020105401337809463, -0.03083009871677686, 0.0089384529359374659, 0.0094917883425194721, 0.031257493638173192, -0.074324621899297436, 0.047502293228496903, -0.087202881668554666, 0.019497480457585127, 0.018801723895544558, -0.020783146883739074, 0.037407226253197187, 0.01202907895240941, -0.085640174497543325, -0.01250123023712826, -0.027083881602897025, 0.012926155302517221, -0.020812027426987748, -0.14055809283539628, -0.11374506591076419, 0.017924843458942127, -0.028516516145943489, 0.04585868851160263, -0.13117828388950331, -0.17389092870879497, 0.053714156567446165, 0.032300075701893374, 0.057520195145752226, 0.05904654140586256, -0.11508635724303731, 0.043565776393052071, 0.059536594262724729, 0.076599133764207433, 0.014207229570090983, -0.1199427514262921, 0.0034830414572159379, 0.08308252095344841, 0.068672949782330364, 0.06634459181806078, 0.084012567514670983, 0.10863093494536288, 0.036021688136296692, 0.12380137951173706, 0.043236576328048351, 0.059399643665654131, 0.042445309474632237, 0.12789338744678247, 0.014244324437140979, 0.067136246650945752, 0.086699105492600792, 0.059557262090246026, 0.01809855186232609, 0.010713420148594992, -0.00059579884010052542, 0.061343460083962291, -0.0001398559588360257, 0.22412677713663717, 0.088013675847793266, -0.058215067302030736, -0.0012260538656294895, 0.042305970671931085, 0.052067344797856172, 0.075414674705730864, 0.077471176915617654, 0.045711382613932913, 0.017695427073964477, -0.0030658636257887804, -0.02962365327526081, 0.12896765936351437, 0.042183866960819091, -0.039394998979108344, -0.041007428922027155, -0.13390483965174424, -0.042499818684505593, -0.05819462525466032, -0.09519971864692886, -0.049990903182070265, -0.035359428820787173, 0.15859976300873996, -0.11702120905543276, 0.022050407195940078, 0.048192823572219948, -0.0056565047319631634, 0.055321599542422356, 0.0039771126512435362, 0.0088791472452440304, 0.03097294566737252, 0.036136614851221327, 0.077636657455759733, -0.11747304066916951], 
        [0.0032106468813388467, 0.088885172720810104, 0.10096080668798724, 0.022292605842750123, -0.071525453247951051, 0.00574314306889687, 0.065381001294423258, 0.008264090951624635, -0.052297923633555253, 0.055063249156703478, 0.042135956165554989, -0.0027337283351114711, 0.061070962060578285, -0.10701158010008113, -0.055827956173158652, -0.065032694832464877, -0.011795338702579206, -0.16486859585693212, 0.021281059707202635, 0.011339055054131499, 0.015607579889776426, -0.085750449282884861, 0.0043087122389073168, -0.0028333671241141632, -0.075704651954975333, -0.095023634532319393, -0.024443325177031752, -0.0048742931725701613, 0.05373563149718516, -0.046164464204305776, -0.0933941298749114, -0.089491902135308304, -0.070094066124814669, -0.034764911995005567, -0.11036613659441624, -0.041699289757935284, 0.048555414105324039, 0.037316594330165868, -0.0091258495682343954, -0.02483773607684505, -0.10811625353969287, -0.011196019395676729, 0.062000571065406324, -0.030908870870323263, -0.20817374216641296, 0.02840804114908593, -0.03422871356001763, 0.015547093956459614, 0.042037769469384534, 0.14900049504903043, -0.077828081337516036, 0.33343667124234072, 0.36268347456674099, 0.18381088902743745, 0.18801989730141397, -0.026760107917241149, 0.0010510016353630809, 0.04098821271669377, 0.14354810186479433, 0.14720129753717756, -0.22198578529791352, 0.31511902115816237, -0.097933631284173289, -0.34108764393991897, -0.17922303207403625, -0.075037516162488077, -0.060600402883750376, -0.019190950400804669, 0.16686302854511445, -0.012989494224628011, -0.34656568745617206, 0.14668241885677219, -0.053557529052454082, -0.24973215975275748, 0.24117194525976043, 0.06744086845556567, 0.11113519003246129, -0.17424338350633975, 0.12201079994643065, -0.092746950927085375, -0.065790817932440571, 0.35855596322291078, 0.22608246117392661, -0.11160227633029404, 0.3057247528769656, -0.10906402198659501, -0.15714103185870401, 0.068395565832379809, -0.040921771078119888, 0.0013632455963754134, 0.10794141319894564, 0.11370966065944016, 0.05701046666820303, -0.082634473203882411, 0.046327777049956803, 0.056396935402095699, 0.020212301071998881, -0.029754364902733033, 0.054466892130944161, -0.014207485080892181, 0.09398894647188305, 0.044572073845120443, -0.073566232664765058, -0.15318361570533576, -0.061212185339614172, 0.026710531000834609, 0.036455363958898757, 0.13879792308934241, 0.23979908542525458, 0.11099690466514582, -0.12734356041026987, -0.070921107619058815, -0.084031488042458663, -0.052911204994505273, 0.0080270279483869375, -0.048337382618909748, -0.040315087393064393, -0.089109265448894498, -0.10259547678103018, -0.091800365225332997, -0.21140522933050648], 
        [-0.070541898294382954, 0.055085384725324385, 0.10152834971804957, 0.023622039667971106, 0.029955712367899665, -0.026059948581330213, 0.11064289610687274, 0.024489022629065639, 0.021970470387027496, 0.020456590772125735, -0.041116693610535521, -0.024812216615053395, 0.0095703813283907063, -0.048146399939075685, -0.0415428906870009, -0.0045487046086217439, -0.022900698211748033, -0.10095741160721779, -0.032652208533819588, 0.037091125467489772, 0.014636490326762966, -0.010920356400900416, -0.02620802388201364, -0.14214922225914331, -0.1328932262467217, -0.033250828448682102, 0.0054751584145303622, 0.091854391607495395, 0.036012195904709637, -0.080267047096344496, -0.02961991599551142, 0.026872737466068011, 0.024976155299922739, -0.10102174245681092, 0.10923707161980402, 0.070655061966962251, -0.10935696983924399, -0.32088041870161305, -0.20436936980030787, 0.050938666453356984, 0.046305961616782271, -0.052624691159288021, -0.10829047665507778, 0.090882846941261863, 0.19174066515666341, 0.12934192659574403, 0.11859841393368513, 0.26210791199518413, 0.43760372512053292, -0.073859947159134118, -0.076583679569516755, 0.10680813952910222, -0.089974391000751788, -0.061555396291372189, -0.092350841658524696, 0.024140264345503374, 0.029438378546550566, -0.01563817377224519, -0.149531624982499, -0.10876112523177132, 0.19097881484789375, -0.049896292556932682, -0.16239346086432074, 0.046709908191980121, -0.033452494674046207, 0.0046310617213296502, 0.0064216883730265698, -0.12476862042997607, -0.031313709978211708, 0.0042103020860465371, -0.025365848313462613, 0.063684281624447031, 0.13395358129694848, -0.065578135598012649, 0.057463929084066473, 0.17256882128548656, -0.11823900246670159, 0.060333559941145434, 0.0037599080210207157, -0.038200462163356909, 0.066276004488180856, 0.25634069005457549, -0.093935031031732064, 0.13649945906964844, 0.0034794918389711334, -0.072761719812314288, 0.029458016256965223, -0.015677874033259744, 0.19131561225163415, -0.12071257308516789, -0.049397234429007029, 0.077175842050914406, -0.030486255311673066, 0.049783169498945609, -0.057532752863027073, 0.14083206176111882, 0.17408755180270033, 0.009344634962950172, -0.12819205088510488, 0.097921797602201988, 0.1484657616745283, 0.21719783447349841, 0.044315601741240343, 0.11561949899769568, 0.079276552023405805, -0.12048788468641375, -0.04967266400627008, -0.032827416046744835, 0.0090015538375795498, -0.13278686515158378, -0.20143225012684127, -0.012865208501911994, -0.05226303626701382, -0.05920262987618654, -0.11792756657567573, -0.18198524247067943, -0.00074838377765898412, -0.13713941392620788, -0.061325425375407194, 0.019950339910709103, -0.062147365713498569], 
        [0.051024887449384534, -0.019223957182048931, -0.0091744618546339037, -0.022468174999506808, 0.021117503507854546, -0.017503811543560385, -0.22284744975320528, 0.022524903374325514, -0.0024244960757924712, -0.09669110978372604, -0.025360870037480849, 0.073434608083223593, 0.15108583605808631, 0.11522226443939282, 0.12970385672228196, -0.078929081412293864, 0.097198425724444398, 0.21130504158510516, -0.24960514180766633, -0.011817596006589312, 0.064527752619131462, -0.085347869009334901, 0.049274344563864814, -0.061577460717206725, 0.063000636986332417, -0.043023349305368858, 0.069051463619963616, -0.09609209741271528, -0.061694173137081795, 0.18034406030249844, -0.16664450863414379, -0.051093562238691319, 0.06917571184956009, -0.11903894138190432, -0.085789849163004972, -0.20469477506639042, -0.037005982899997764, 0.034798731541538161, 0.063283307686923376, 0.14789727159527061, -0.066932830661805331, 0.1370086179892735, 0.0071805490139787067, -0.062055289428567216, 0.22475761134030817, -0.07322221407641237, -0.080357922936194939, -0.11455643304613655, 0.20483233186130478, 0.10475578834704286, 0.10684387147188838, -0.10691746278338331, 0.018058380084354078, 0.12868991682224998, -0.071026767781369002, 0.044129913597283861, 0.12003274537827949, 0.14236952685647059, 0.2190537724998522, 0.069722814432948976, -0.08245383109483935, -0.10618366730381419, 0.079817401692356071, 0.17121755891446927, 0.11078325008253855, -0.15750058347569248, -0.026069272820390225, 0.17501467279210839, 0.19358075940702646, 0.15583357970340797, 0.1314463732378697, 0.10802544440564531, -0.015809166657440241, -0.066108299277505417, -0.14852678093276445, -0.054744536677585956, -0.065217128725905391, -0.026931855854101287, 0.017929035819714334, -0.025775341056924528, -0.12464418113700747, -0.13001928465651194, -0.23174171618582257, -0.066900407583412314, -0.03709918303218513, -0.030813190076789343, 0.11264856069224632, -0.035279582432038409, -0.06628848394994874, -0.094885511316959062, -0.13366242376792553, -0.077209892711532127, -0.094368973509414381, 0.053335878160273763, 0.041074067958430979, -0.044715009215503601, 0.14382963030480442, -0.054988125961259349, -0.0022013354694158885, 0.021968655062323525, 0.032943999375576301, -0.0067769203537865596, 0.055702627244551682, 0.051114355169129717, -0.0071487492413514087, -0.050493456857222105, 0.11605609625221396, -0.10773904713211513, -0.017706549245958297, -0.029669410521942108, -0.16640935186157127, -0.048751600204259019, -0.074769821455474811, -0.066227226009553525, -0.10651310165824517, -0.00092592029991533063, -0.0045899177380518182, -0.041812504602206868, -0.029841850511205213, 0.040029808070416978, -0.11834854906365051], 
        [-0.14161129968710029, -0.061296967431052014, 0.0081528021970500054, 0.095805261150028409, -0.1214127956380826, -0.15258322744582525, 0.14459270305794539, 0.10275339944853681, -0.076911198841414979, 0.010478075151826548, -0.064039029125021005, -0.084813043528063153, 0.025051235358785943, 0.087180794533482028, -0.20873218012341008, 0.0040298784271375204, 0.39082631888817743, -0.018288190749202606, -0.19371161443949322, 0.21355438299293414, 0.19218769418470427, 0.051337448826137444, -0.099999229754227564, 0.065604462250388712, -0.033196627957087541, 0.077857375844632745, 0.22272869520521954, -0.096601683736006277, -0.13244590058883512, 0.22634536048380136, -0.023759721621360811, -0.16636289752872985, 0.024375919555805453, 0.01118486694572602, 0.0090202885193231622, 0.01738778004965464, -0.043080447051755857, -0.064752417676871371, -0.15373325493809581, 0.1030300818297557, -0.086295964021762886, -0.18748306121414288, -0.083187547465909659, -0.03706603563440538, -0.091363337934458527, 0.043056498585826733, -0.0076223164368175653, -0.072300257528729178, 0.18949250084010411, 0.091582898551156061, 0.093209834464958313, 0.078433318552627251, -0.086071434197630858, -0.16935758248124871, 0.21392186250732342, -0.076880494683872147, 0.1402483451766991, 0.18838915415855717, 0.1152888395062736, -0.16631002548138826, -0.13317013948622, -0.019452425619901188, 0.013015089132922257, 0.28543941281728724, 0.23881984846112189, 0.23929137572253439, -0.02547786873886692, 0.0117330467833913, -0.031329573296911523, 0.026405820579143084, 0.17735025822121503, 0.15386780686160581, 0.02287846002087459, 0.15423023351465021, 0.10953014299545374, 0.19864560710489487, -0.10957662520495322, 0.004096363221989148, -0.0032426759955409418, -0.064959771096032265, 0.0023590326963191174, -0.082443728464586391, -0.087192941443454491, 0.0056234248083327464, -0.024093687385405751, -0.12474400395578267, -0.14738765659502367, -0.13843396166689709, -0.094736599019599688, 0.043475674535487348, -0.022122242308695854, -0.05800862114062226, 0.074104094697999404, 0.02746811155866092, -0.068145973484399658, -0.086381198469412904, -0.072754777541353594, 0.01615999106259601, -0.095064179193335305, -0.055944272676650919, 0.024970060878891819, -0.092155618763515842, 0.020485700004193069, -0.0495383796436729, 0.062127427369453307, 0.010981352953109556, 0.0281069884335561, -0.023412794627361646, -0.011846497332482567, -0.041460283596954112, -0.12375563021141642, -0.007547760161504144, -0.035060694212351605, -0.054382050709510382, -0.1278750006993222, -0.06311331594403119, -0.0786704970157521, -0.0052472339656002079, -0.027462118424014734, -0.04814512084639927, -0.097095104463997481], 
        [0.035455977436737243, 0.012809942897525101, 0.018180045357868893, -0.0038058205145671403, -0.047339142890578501, 0.008615195889998109, -0.046294359253758216, 0.016896391023979114, 0.073402760628239458, 0.057853718952836961, 0.046801239911643658, 0.017572755691014366, -0.023834114056900314, -0.028005108801406949, -0.06170353602256768, 0.0041492518341007534, -0.099934491404056913, -0.074151439249343809, -0.097134157834440793, -0.050639923311780105, -0.051915740613493869, 0.046339971767650957, -0.10129345971353371, -0.010697452082017556, -0.13071299055096386, 0.065224314051882337, 0.035157185372583166, 0.078444236629937963, 0.020870147580858485, -0.0830089239809709, -0.041877105840284014, -0.032513609221769081, -0.065938639791909268, -0.081371766652620733, -0.042073049920613614, 0.11944084377042556, -0.19373361811893469, -0.14790789457158546, -0.091870520419793419, -0.021840321854902631, 0.047335657392996534, 0.060396938302831077, -0.07953507862322387, -0.04669220242777411, 0.19614607438362058, 0.15002481494362754, 0.22469015540171652, 0.4336980233057709, 0.17626836068479479, 0.085002991074548617, 0.17628001447054742, -0.089798104842342991, -0.10576233006915464, -0.00490481488295888, -0.064591709504694866, -0.076503661467680131, -0.048692615426703015, -0.19597570662883559, -0.27569298690784427, 0.26254751209472921, -0.056874362198840442, -0.10875561753818253, 0.27052154823814067, 0.2063604487272373, -0.0015736429213762324, -0.17758806144586672, -0.0015425548641356899, 0.050842447030100948, 0.092668112807239883, 0.030409316616439044, -0.43178847946646337, 0.36701605407304039, -0.059155527136146031, -0.34464726238122173, 0.10848868139611262, 0.10612621366138617, -0.049251160488806033, 0.16014445150386469, -0.12372249481679706, -0.15509121511818685, 0.10449868648330295, 0.1609037713099512, -0.14487084764912184, 0.43188545598260436, 0.11981190997739517, -0.13832753618194632, 0.011269255569863787, -0.081012227269308429, 0.17513077192869736, -0.046057084014966006, 0.033710883104789563, -0.01526891657845986, 0.18262045149400891, -0.10024918536752747, -0.097021078480102316, 0.066110972626649445, 0.15775023905966529, 0.10256401881259318, -0.065278008956546119, 0.019464702453137826, 0.18820857985638101, 0.076080517225552272, 0.20711454885952529, -0.009713325447248497, -0.067601022770299377, -0.045103764368489015, -0.047137892479800776, -0.043049664063698055, 0.029932336717446141, 0.0056790774310926523, -0.17630517422062925, -0.030884369614532808, -0.020628025119333808, -0.10197146214534561, -0.11425424743932233, -0.020673918969270674, -0.024767884264564922, -0.074424950506940507, -0.055048990658499254, -0.037227045102696574, -0.16215779511908984], 
        [-0.07004854198277595, 0.085300667599954416, 0.0028140785761861914, 0.010033301281905325, 0.089867623592597673, 0.052912807279738502, -0.050135511453302736, -0.022285839005171091, 0.045302414609929523, -0.030119412353457265, 0.021823370321703377, -0.0060856428833483836, 0.023125728063449959, 0.014528954043079753, -0.0015683794659443039, -0.027995624014821439, -0.16607590496950553, 0.078730103754242331, 0.036994242953970073, -0.016141830613884009, 0.06880105102941908, -0.043417173628397525, 0.038981169845932473, -0.066540457403796618, 0.0031039127673838261, -0.013008774392859419, -0.092595121588066404, 0.12644069271642389, 0.040772818622368645, -0.085448406785026368, -0.13739227291848727, -0.13311138084893973, -0.11021206177568971, 0.070762580804387104, 0.08026074315831877, -0.16877857679840644, -0.05206002447695942, 0.13425360508864773, -0.10535134533195308, -0.33737573498423878, -0.070808291113453367, 0.057003657841298426, 0.092279918372553824, -0.011615223103444766, -0.05091285023944582, -0.16069489160844241, -0.048847803217798323, 0.071389129185656347, -0.043639202430883289, -0.13394293080575723, 0.30515544278533629, 0.23788255098353511, 0.20977385697294298, 0.12056019868772624, 0.252825166497261, -0.0023561720800214826, -0.035137059913897026, 0.049604725798679972, -0.10416358483192441, -0.14206356834350237, 0.25291808177088004, -0.038235474676427975, -0.053226677896758709, -0.16540845786613148, -0.014617042590940904, 0.02880120515663584, -0.10096787597225529, 0.10737683950894401, 0.12267043383933657, -0.058069637469088484, 0.07352676227256455, 0.010539954637614604, -0.051688256904700788, -0.072824552067626475, 0.11389405098260616, -0.099763013941535167, -0.099681076524513995, -0.0083154924851436066, 0.02878172341423068, -0.016643684462931133, -0.10306462657645374, 0.17421739601581576, -0.012649043926851018, 0.26025794182930068, 0.13061127474097123, -0.13680683615114592, -0.055878226752606029, 0.098670144436524707, -0.13970261425268571, 0.029744590816758114, 0.073907056540957833, 0.1684324925668621, 0.08906251617397061, -0.081254083870154856, 0.0080562412391433046, 0.15433309501581671, 0.061774969198347712, -0.05038568057644794, 0.19950920633649696, -0.095579333074787581, -0.078848113914305407, 0.066656901533640664, -0.07772986657418926, -0.059687592569233103, -0.0023500722459320737, -0.0046282038086771929, 0.075460714684052924, 0.11777073451853808, 0.24712980105754503, -0.021968024854625706, -0.093773910434377064, -0.011643488223564324, -0.055253337050732328, -0.067446244455495186, -0.097859711494188872, -0.067747061381834131, -0.11419175135531312, -0.15447612433882574, -0.053913847600707908, -0.072082530188140578, -0.10185711157346036], 
        [-0.014135164933848525, -0.083516200530839357, 0.025061773696956152, 0.075977313837335109, -0.15437088222766421, -0.04240467277326615, -0.034524278854966582, 0.1318746103998901, -0.018956619417625505, -0.0026675236384224726, 0.10305833569336915, 0.040329893324884791, -0.10561491356176617, 0.017365472828129225, -0.1593697493161278, 0.032279086189098444, 0.10529509601866645, 0.075027736842911114, -0.11928350111773782, 0.10401492407708587, 0.14421269322823677, 0.0071286351316720287, -0.079992301428582629, 0.014274946401273955, -0.038729777215095025, -0.13694960123251429, 0.186445386861957, -0.065110687724615285, -0.14101483402071849, 0.22619054701312596, -0.0019016328709244301, -0.049331211684928558, 0.014047517480666363, -0.033852195689686469, -0.028526407496796823, 0.086229830449351855, 0.10755614463917934, -0.040378243554949227, 0.040168336461144302, 0.25442368338483701, -0.3499242547867164, -0.11829463044440175, -0.11321507805468442, -0.036040402153841591, 0.0091418924051510815, 0.015127629290737882, 0.048542079162587376, -0.11506255204173602, 0.081696307746731978, 0.17250695232340318, 0.15415826584650585, 0.10510570127990954, -0.21704507894326638, -0.14596864247047642, 0.1970892398119917, -0.12398828975192644, 0.10066494813730779, 0.12172147584675422, 0.12480836369060534, -0.055987894617694878, -0.21828759073305709, 0.080538081042609941, 0.23046289660391583, 0.31883071306960742, 0.20521924642268785, 0.0081842939400904868, -0.054334680492246989, -0.11191127753279448, -0.0056946625135289586, -0.04305552710584918, -0.040460404096243685, 0.10030692443116394, -0.060036553045197671, 0.14527330616853071, 0.25790754371580937, 0.16199120552860652, 0.049309451989560361, 0.0040739095783849238, 0.11099001371044198, -0.020691143951251361, -0.11143944147535105, -0.081094875651466974, -0.11638633381884322, -0.038956249190972861, -0.1298485818109307, -0.22365399252260121, -0.0058588467993392259, -0.03608666892894484, -0.077144042211452088, -0.047407377167887781, 0.027428548856661739, 0.099597053423751136, 0.040004259955310414, -0.073006673209536049, -0.017635812509909359, -0.07207223200520288, -0.0031645685054547332, -0.065567214011750335, -0.10478061295325353, 0.009440525764280297, 0.025831878010087357, -0.038820039872570433, 0.027511569211728273, 0.036751337723812103, 0.040562322742325699, -0.0038665480911575581, 0.012355677864371528, -0.053858176855473526, -0.00065956354595068066, -0.0026597994151184197, -0.11895782317212758, 0.022143400716859319, -0.046808396987253115, -0.074910221874449304, 0.018173403762517575, -0.066412768816517184, -0.03312873600388673, -0.12808543381027454, 0.0050880558741760937, -0.088215241900397035, -0.11219840847108876], 
        [-0.036364274597361676, 0.056083891847620769, -0.054614528430129372, 0.12841266882397054, 0.034694915130257929, -0.099268838937359272, 0.035218360577730458, 0.0017050223771709963, -0.053720515111571325, -0.10469756632201047, -0.057793517872112406, -0.0079504586166561902, 0.079079001374876626, 0.17475876751746433, -0.073745536055607713, 0.14078752799492825, 0.17945289782476989, -0.028798495109090064, -0.053413953610016891, 0.088642497593947489, 0.0067588194601195459, -0.13125029810181102, 0.03217045565830174, -0.07593804991299713, -0.045683415387781846, 0.098321469102132006, -0.11054865427299748, -0.085251684099912406, 0.19879712870261834, 0.020722064313346493, 0.022471477480525272, 0.082375788173085274, -0.11575790465692171, 0.032842645738555103, -0.083484194971592596, -0.077331550720375883, -0.11177282516936979, 0.024984273273181961, -0.030403360600728728, -0.029024515371594548, -0.10371511880806172, 0.011701378243922171, 0.0093277747988130214, 0.002431192271711265, 0.15006757232014231, -0.21394797471762256, -0.11853920458017891, -0.0019533526563885917, 0.18177937076706377, 0.054954598440171316, 0.1551092512502385, 0.030060622456317722, -0.019865094069587117, 0.070850991969667099, -0.00048596237286066242, 0.17946399285467196, 0.30638569966633139, 0.14694241644943901, 0.10067729378037348, -0.073081243699588155, -0.083394453453312839, -0.13131133309870838, 0.02608780563916567, 0.15390102230569283, 0.14965704056352619, -0.12432072266765236, -0.055197512874001355, 0.23539003120249477, 0.23071437717412627, 0.17815006433908051, 0.032433010859872255, 0.085250215236998952, 0.10099385760580901, 0.076038809649047315, -0.013731917856005003, 0.0186901648513353, -0.032924756112736785, -0.22858777194216445, -0.12675914211780165, -0.11187142301820072, -0.12231050055181397, -0.022442794199238097, 0.014664186213991334, -0.049708524052554312, -0.031971360150189108, -0.03211971771044804, 0.044761469162405726, -0.048496783217227474, -0.035899743760748851, -0.059853454803789952, -0.046858773572646534, -0.054268508959597561, -0.025596949047592216, -0.059820464842134907, -0.029518961263161905, 0.0036297431646178518, -0.020509064754665129, -0.0015230193399059302, -0.090002680596330681, -0.026575598812970537, -0.010828662191731439, -0.0095882629855936694, -0.0089047256965019833, 0.0029521526762387035, 0.003804200299764901, 0.061865649665059336, 0.033689817096841081, -0.066066128467731536, -0.02437191906735954, -0.034185476570230244, -0.10893624295233989, 0.0071168280186506665, -0.09401277488927702, -0.018408076739696223, -0.057181782869844225, -0.026056248846387006, -0.088889605365135904, -0.10212222492182724, -0.043049828055051656, -0.085050747749882583, -0.026051110695555976]
      ], "lbp": [
        [-0.027900321369488244, -0.0060441994553984916, -0.029117905545804415, -0.012327610537342652, 0.061854476662081867, 0.095671317895324293, 0.045971729446465374, 0.01553067346468753, -0.012023121825700329, -0.040293165022942272, -0.033221733066527162, -0.0035958268721606613, -0.013857406372198591, -0.034503775174297223, 0.017543175352255434, 0.036807902994090223, 0.084770163856199093, 0.060825220456424196, -0.0093584374782611293, -0.048192584791248279, -0.0065946784148823052, -0.030168034388727068, -0.007336172112964571, -0.049812230351494888, -0.028525647622325873, -0.0089851436778563571, 0.037542932347811336, 0.07584997109273485, 0.040463627176522118, -0.0202219777393636, -0.010643448968773972, -0.025973324357000831, -0.029295410910686326, -0.049585573800075042, -0.016454172237658507, -0.013482276454755721, -0.034207328190167335, 0.069169117093015112, 0.043414738683023937, 0.066514631750824477, -0.028013646641570675, -0.0028085168494333609, 0.012846026283526629, -0.020229423320994658, 0.026363734996447397, -0.02400313852588018, -0.071418628861473987, 0.019799399074940063, 0.047961802211596821, 0.090395789173746133, 0.054870436486652595, -0.015562181031975555, -0.0052396854064607895, -0.01338270347368932, -0.0017450580356042078, 0.00097397016632680411, -0.034245488638524155, -0.029304216678874513, -0.015762970169531754, 0.01232351078031502, 0.11024357683264789, 0.0052690576096130134, -0.0082710664495191447, 0.029191444997078354, 0.010481969078390848, 0.0048675356582309672, -0.0043579148871963208, -0.025720306996157922, -0.06530772196855876, 0.016283145128269706, 0.042681321861108915, 0.074985247321301865, 0.016473247914334525, 0.013771073119619424, 0.0024092712098635191, 0.02402373658667337, 0.033110911546988531, -0.056874923774983661, -0.027797079980336641, -0.033810769624174404, 0.015078596551516596, 0.048209545205572732, 0.11415003087810688, -0.0050453148806184067, -0.02453712965304819, -0.0046878076136616098, 0.030698630375551105, 0.036164393720748929, -0.017659727315601441, -0.02758989133869354, -0.023775739038709096, -0.0031653848755319783, 0.043853892725709331, 0.093522192523850758, -0.0015598570273860773, -0.019099238204545323, 0.041500642827912271, -0.0029952551344066894, 0.02004832980498979, -0.025805960318499716, -0.014023218349180466, -0.052045089337890343, -0.0089676761596982277, 0.059688184012493893, 0.082792114958395474, 0.021692573098100312, -0.012200151839688603, -0.0040158722713318634, 0.048254090507913572, 0.0050565259058356522, -0.029779592751576791, -0.045801516188543855, -0.02221712686320438, -0.026806365466397059, 0.08055750324533141, 0.11124706386872835, 0.024835176089393517, 0.013030726244874311, 0.026214268291071548, 0.0092541421104222928, 0.054743249486413466], 
        [-8.7334058636959547e-05, 3.7445117935188191e-05, -1.6718852112379556e-05, 2.6449717430186009e-05, 0.00026446237412404601, 0.00018012006397465953, 0.0001307947973358814, -8.9233727162704377e-05, 8.7778261435746477e-05, -2.8629705583770731e-05, 0.00019466262098214414, 4.0175132952787601e-05, -2.4470034822768327e-05, -5.5302995306328803e-05, -9.4642365284064098e-05, 0.00013992126181657828, 0.00025974343567526995, 0.00010836805931595294, -2.8508338861643612e-05, 2.061224391589761e-06, -5.4546501619936929e-05, 0.00011548126318818193, -0.0001788968780262537, 1.0106236414454163e-06, -1.6477072134012073e-05, -5.4462479167990247e-05, 4.6056613212522041e-05, 0.00020886964911843303, -5.9860313621762362e-06, 3.9146617021777741e-05, -0.00015653886989401913, -5.0893371838153789e-05, 8.3828512715357351e-05, -3.9259965209559669e-05, 2.9022913523094052e-06, -5.5656299347785557e-05, -3.9745247630351005e-05, 8.2727825803138866e-05, 0.00021615221821938771, 0.00016964902161820464, -0.00015046509771197286, -3.9211986704516637e-05, -4.1804257750674423e-05, 9.8942673641209088e-05, -3.7700357389545795e-05, -2.1777257226037079e-05, -0.00010841746095995551, -0.00011250296826445516, -2.8088672225879026e-05, 0.00024500271057997097, 0.00011698005994424145, 0.00013699860971772872, -0.00011632402760545536, 3.8758627518911681e-05, -5.0383597695171332e-05, -5.6491249769561463e-05, 4.1858840099188652e-05, 0.00010510216324040138, -9.5908590272430344e-05, -8.2666457891138537e-05, 0.00014673240802820162, 0.00017376564896403636, -6.6785749466828637e-05, 7.6117972374779332e-05, -0.00016836279120163201, 0.00012436785920524364, 2.572483873684861e-05, -6.2337391140390188e-05, -0.00015376902099116518, -2.748263618047534e-05, -2.8455141653132252e-05, 0.0001245843209365903, 0.00015628289279003135, -2.4736989716003788e-05, -2.091205958625747e-05, 4.3221191511700133e-05, -1.0154715937089193e-05, -9.9849401355839133e-05, 0.00014166961818393338, -9.9758503461578121e-05, -5.3681414486151866e-05, 2.4697228767074902e-05, 1.8249672491638027e-05, 0.00019364243897489978, -7.2708659052964433e-05, 3.8335032297432542e-05, -1.941096106845841e-05, -3.2115893129546109e-05, 5.1948009027611569e-05, -3.8286652867905793e-05, 9.7189147669228537e-05, -0.00011816184055358711, -0.00016089510526324721, 0.00011623698043458554, 4.9146090188779967e-05, 0.00010181714739832155, -1.4287799392848771e-05, 4.3291869782970463e-05, -1.9967142031866378e-05, -1.7367657007066883e-05, -1.9582956908605959e-05, -3.2832817909847489e-05, -5.3813630280598324e-05, -5.6207569526993666e-05, -5.3241932910777154e-05, 0.00024615067562027901, 9.7553256739707516e-05, 2.184380833295408e-05, 3.0258380552987147e-05, -5.3699454869285401e-05, -2.5230762735903084e-05, -5.8324496095124025e-05, -4.7049519791985783e-05, 3.6195180921022346e-05, -2.9440640435682286e-05, -6.9516912145691108e-05, 0.00012456823815416661, -3.5053968305372846e-05, 2.1986527300186251e-05, -1.5332062580714734e-05, -2.3047309958091743e-05], 
        [-3.6084043411983239e-05, -1.9306572941766697e-05, 6.6469627400028188e-05, -6.9626706859858556e-05, 5.3717685606707692e-05, 8.63369060391736e-05, 8.2142164694962855e-05, -8.1711140914987948e-05, 4.0205836428920672e-05, 7.8479400685671497e-05, -4.9039572793939737e-05, 5.7453551592964724e-05, -0.00010018086975340998, -2.6147792389851886e-05, 7.1198224997405762e-05, 2.5682689442775401e-05, 0.00011929111371736115, 2.7860714214499385e-05, 3.2654486739197575e-06, -5.5573777784770351e-05, -2.4040836230674462e-05, -3.7015814775545261e-05, -0.00013308586174926723, 1.923769352976841e-05, -2.7445843212351578e-05, -1.199439585908063e-05, 3.5032215132376919e-05, 9.4889623314988944e-05, 4.1828095702725956e-05, -3.4147434353455977e-05, 3.1692057309944382e-05, -0.00012748342849396022, -1.5840876485394284e-05, 4.7073815318422058e-05, -5.4219379703623893e-05, -2.7057823555193261e-05, 1.957250209402156e-06, -4.2885362544764494e-06, 5.1784247492511759e-05, 9.7614017595303026e-05, 2.6206437789333403e-05, -3.840723379957417e-05, -4.3620727456269992e-05, 6.1282931602328416e-05, -4.1484546914841158e-05, -1.8991776069687133e-05, -3.8766273328664363e-05, 2.4842026175204979e-05, 1.943116733871264e-05, 5.7022083599506113e-05, 3.6943371778189182e-05, -2.2802079412020948e-05, 5.8533333908400431e-05, -3.8134075295223613e-05, -0.00010733273350739298, -2.1349054282106955e-05, 2.0212901591327992e-05, -1.0308234675579855e-05, -0.00013178259714422685, 9.2792721038507942e-06, -6.406096160121999e-06, 0.00010489353656312206, -3.6972486442386071e-05, 1.9205959162101743e-05, -2.5119901163566229e-05, 6.6677926942838254e-06, -5.3173101432296699e-05, 1.5595662104549764e-05, 4.2063861440242226e-05, -0.00011208840161249227, -8.0476085046677498e-05, 8.680420622040122e-05, 8.6344181199115091e-05, 2.8719099287293631e-05, -5.3155476409198592e-05, -5.4570646040804499e-05, 2.7740013315707968e-05, 3.1290284801600062e-06, 1.8897139614309187e-06, -0.00012179101932861119, 6.6840019799997014e-05, -0.00010633851278423791, 3.5859740502247259e-05, 0.00015372154099424235, 9.3482108860959943e-05, -5.1252862294083688e-05, -1.1146007599487084e-05, -1.9744343489652011e-05, -7.8768975259988112e-05, -7.5893435004921461e-05, 1.324648660373383e-07, -0.00019713417520837023, -1.337483475241652e-05, -3.2243587432437271e-05, 4.5963036203394009e-05, 1.3630966931021948e-06, 6.1090824316110785e-05, -3.7063944354813472e-05, 5.3774349412737815e-05, 2.8714809252497475e-05, 4.3068787919792184e-06, -5.9398600734514111e-05, 9.4064471326807484e-05, -0.00012585758504905786, 5.0460919318804677e-05, 0.00013218227218045244, 9.0391008869705747e-05, -6.4299214936155979e-05, 6.1428536959399344e-05, 7.239739626676775e-07, -6.366839054444684e-05, 4.8758759963537721e-05, 1.370601692269463e-06, -9.7972856753872155e-05, 2.9714662401220159e-05, -0.00017065450862235659, 5.6129420667599961e-07, 0.00013050423194534838, 3.9512648229014097e-05, -3.0858474698957153e-05, -8.077273509681307e-05], 
        [-0.00010041713705304361, -7.5004427981998842e-05, 7.7578836709558431e-05, 0.00015060096637672937, 0.00010272729354795368, -1.3455811985058075e-06, -8.513816673568278e-05, 9.5277958304541138e-06, -5.125057113741175e-05, 2.1937041723950335e-06, -2.9906736665197275e-05, -1.7822507535654366e-05, 1.5920560761634173e-05, -4.2619825694686919e-07, 7.5621519507984916e-05, 0.00012391090326623749, -3.7227119771730648e-05, -5.1851912943837175e-05, -8.0359665516151202e-05, 7.6556506706648296e-06, -2.9340700929650354e-05, 8.21553152150125e-05, -6.0163498557478517e-07, -9.0231354808785729e-05, -0.00014677611474230284, 5.8459186367564031e-05, 0.00012920305793076987, 6.872786215014054e-05, -5.083503031854536e-05, -4.9057975777679064e-05, 1.4667265166828924e-05, 2.286695792285548e-06, -4.0793147414804661e-05, 3.1833081357390651e-05, -4.6139907270008307e-05, -0.00013108954174256143, -4.5014849167218651e-06, 0.00013512478717948309, 8.2693053849276603e-05, 3.7212849225235281e-05, -0.00021401767748336522, 1.2160803497153136e-05, 9.9526098024278753e-07, -4.0751249249773927e-05, -5.3363285595225268e-05, 1.3589464997432535e-05, -3.4575952982748501e-05, -8.6226276956346756e-05, 0.00012833142734719472, 0.00017949919377930994, -7.6588263679235394e-05, -5.9446820945188023e-06, -3.3933589792761384e-05, 5.9031307218506898e-05, -2.015941600058864e-05, 6.8480128461272105e-06, -3.5080450032940217e-05, -0.00010776252403311049, -6.0092138186616101e-05, -2.1591874499028371e-05, 0.0002085712636860533, 0.00013308075647107918, -0.00019038894948568419, -4.8311736467392813e-05, -4.4977282909152566e-05, 9.0492245632955992e-06, -5.3993236004005844e-05, 3.1275503979513383e-05, -3.2914668064622926e-06, -0.00013006251102497951, -6.2666458502351387e-05, 5.4666608924943544e-05, 0.00011702845908493319, 1.0892085020900236e-05, -0.00019162055407114659, 1.7055725050175042e-05, 2.974210675293909e-05, 1.5551139561116503e-05, -4.5023716002432629e-05, -6.5835168557154544e-06, -0.00012255723604855578, -3.9207372768674739e-05, 5.7719587707099479e-05, 0.00026173109381898325, 0.00011301129674169685, -5.0802156995757072e-05, -0.00012438693915498879, -0.00011512378434027151, -3.3743545817560561e-05, -3.5132235241363229e-05, -4.6345900066929873e-05, 1.5030465562238389e-05, -7.9108333110193552e-05, -0.00013976057205664083, 0.00019173792465106837, 0.0002331493622096184, -3.2682257327322451e-05, -2.227669270683898e-05, -0.00013159576482307811, -5.3703861605495715e-05, 4.6651971536551334e-06, -2.9729790998640759e-06, -7.4266730748546658e-05, -5.389279737498141e-05, -1.316760153250926e-05, -7.3089820491645252e-05, 0.00020790545462955686, 0.00015786906649726715, -6.9607449746187828e-05, -7.3261780378834282e-05, -1.4507107393861574e-05, 1.3219651490949808e-05, -6.5930835653411554e-05, 8.7110618181049371e-05, -6.5267580373248521e-05, -9.1012781288057377e-05, -5.19613620658093e-05, 0.0001223100464897317, 0.00015993077204011844, 5.6612364799854542e-07, -6.6482888690664547e-05], 
        [-0.018520133751243464, 0.033336491324542555, 0.060819720527029927, 0.040323418834132499, -0.049047834696932316, -0.063470960442844934, -0.041691385681480758, -0.044039608866153525, 0.011258972442574882, -0.025539787514069722, 0.043103535419798611, -0.028504032717188526, 0.021790396749209295, 0.044813183605805482, 0.072342677373923595, -0.0054580991763535022, -0.068820734524706939, -0.027963615041034923, -0.043243973359288305, -0.0078418754694789261, 0.024040296276847006, -0.035356451324435254, -0.00086042742890664065, 0.0096467844413907385, 0.029019444355814925, 0.067022867313017098, 0.057029519949577098, -0.043873902116144253, -0.075663372407398011, -0.046868046699417951, -0.018264867445612423, -0.0074626900784457925, -0.021262044142767906, -0.0082441046273046235, 0.0029955900266555547, -0.0089729220855647492, 0.061100791900219963, 0.099636125742843085, 0.01246798784414134, -0.10296028529728725, -0.052371289202456622, -0.027534950783727603, -0.029445539405478512, -0.014438110426238521, -0.020597801030636742, -0.0069192729388266542, -0.0068353911578240287, 0.046888843535454167, 0.095419422615776378, 0.11952740651114951, -0.071759879152842584, -0.097543349347774588, -0.038581839090091406, -0.011359375549234043, 0.0096414218165537698, -0.019377865703622918, -0.027301905307660128, -0.018976931848243853, -0.0097874220322787808, 0.052494465523833397, 0.13673694152340612, 0.079522839381611823, -0.12204275357398138, -0.086659087964125608, -0.050788452961220157, -0.0095706052201628006, -0.031867426563525113, 0.0065403023175219614, -0.013821229136400558, -0.025841844477207752, 0.039927962074705635, 0.078783857519568928, 0.14509479705134329, 0.015223051588865631, -0.15795321280384766, -0.07811502424267372, -0.035586118805957023, -0.0074434198140412022, -0.003139865749646073, -0.0037907036206188023, -0.017030151899642937, -0.028687071734543906, 0.033231292617662847, 0.078112982645069926, 0.14321815919795058, -0.019232041974005604, -0.14758943164396549, -0.079879348969855837, -0.0083758813479438005, -0.0013328452184675349, -0.0069555223602641852, -0.013965719003215596, -0.0084517142743534557, -0.030635979725422979, 0.062564657139202229, 0.097483933781118526, 0.098393109491561992, -0.075765704484413554, -0.13450497059632649, 0.014088590669959079, -0.011155752837349455, -0.013224455473029723, 0.016020761294862018, -0.0092009384061512017, -0.026044280280468072, -0.0089942622699424254, 0.040511999855926281, 0.13765939646555747, 0.019532039084030235, -0.113685740386246, -0.014674643494660689, 0.010068963393355071, -0.0027238337107524657, -0.029503771627642287, 0.023985321668865342, -0.030691543491141608, 0.00075273240464540647, 0.016509439032383569, 0.052598123173995245, 0.093807407073263682, -0.010161298965641691], 
        [0.022420101691410947, -0.012639778282766856, -0.054967524914303248, -0.096783598284995914, -0.029278797210954027, -0.027140150032464422, -0.0090862764272963831, -0.01436525543604809, -0.0036874965912717952, 0.046401379667166204, 0.06944892468679216, 0.046437605749818221, 0.054029149328551414, -0.014720520773996864, -0.062916130856065233, -0.098775700155922658, -0.045678178604865977, -0.010326416710093567, 0.0033233465331775174, -0.0034083775958032849, 0.018489145293850089, 0.061679618222812545, 0.030027128801833766, 0.056347586928367471, 0.025440360022667211, -0.0079353236613027636, -0.090410021555884179, -0.12919633261589189, -0.034536772506999741, -0.018948700084980397, -0.0010618822071395313, 0.013098312160546995, 0.032363848313171489, 0.050549191984487554, 0.031990411924285006, 0.050348641795340286, 0.055949633963116994, -0.021494030157359074, -0.10945006672723176, -0.09734195910364446, -0.069733612116043384, 0.00046788820631171735, 0.0088096432516313414, 0.021994342501025908, 0.0027410119068893707, 0.039372454591750629, 0.046870579313232824, 0.065600872379856318, 0.050120908492025634, -0.016483195978918071, -0.12612174723616837, -0.11190212135650279, -0.047331697359264666, -0.01726103679627998, 0.012596718517964785, -0.0075349876913478053, 0.0038005877790431991, 0.051789101650355995, 0.056092751053536116, 0.084082295492619821, 0.077148767905369536, 0.011050271359062259, -0.12128857542605344, -0.12084191927896829, -0.053176729528096434, -0.02708040311428029, -0.0075678521991022762, -0.01607121542877013, -0.019007628063393803, 0.030912220436668407, 0.061182793511099738, 0.067857694007842001, 0.11648893540497803, 0.051234448548712098, -0.062047768790331637, -0.12295702506362237, -0.11728242791483995, -0.00044317389712395395, -0.0022492229405423753, -0.027298027461083098, -0.0037412679982248703, 0.018339305301497556, 0.014062213845781296, 0.042776761103683739, 0.12121831309988876, 0.043922241629075237, -0.060790512107661343, -0.14710686167847625, 0.016829211914154221, 0.0097743210845070427, -0.02655745267922931, 0.01411019215769007, 0.0015911500130474376, 0.0048095535457472055, 0.029093722335047395, 0.02204063036696597, 0.11057315594923375, 0.028480643798939262, -0.10628170570505348, -0.035908284128103249, 0.0133539331015953, -0.0026337425678592541, 0.0037217642215676694, 0.01211758091302224, -0.017185123404806685, 0.037539560931704963, 0.021332506924666678, 0.037076669230181408, 0.034944297335335751, 0.0038125076728691906, -0.011494533354137266, -0.0025310349463153192, 0.017794319144349827, -0.0060675629645619775, 0.0061802385692899253, 0.023087539721666911, -0.0090737645476416107, 0.039516536947320213, 0.034463079883642105, 0.032448600915701092, 0.034402984786170009], 
        [0.0068336647996234817, -0.018868811143753335, -0.059136035832249842, -0.028733110863327534, -0.04829617939991479, -0.013674449873764477, 0.021589567751534984, -0.011045509577009407, -9.2586309830101649e-05, -0.019604821913896741, -0.043554281780948161, -0.0067654209020675676, -0.02068305720368354, -0.030701868023452029, -0.028849057542991427, -0.017812677518967715, -0.045031832483275663, -0.060820037371985124, -0.010178321392366178, 0.015937284977666402, -0.016985093495210109, -0.040648498140976104, 0.062808978784564026, 0.033289631093537754, 0.0086340994321458635, -0.010322738843516595, -0.059032523363236167, -0.063911207518901086, -0.04096234057148166, -0.027001415147463827, -0.034989832948803361, -0.028182307754725123, -0.042998203295550722, 0.069170072619876719, 0.043703797355855584, 0.052829105392347621, 0.047980736517133415, -0.062746508827205477, -0.07875819635466827, -0.075127670879345507, -0.067143876925195398, -0.066726399172545248, -0.041696339372405265, -0.060750152079557279, 0.024187583912489444, 0.068640938449234204, 0.041598533606845969, 0.078906569214333658, 0.083979421652039477, -0.0038263845041486728, -0.12006341244852366, -0.11316397468328382, -0.13578926241060613, -0.093037742063093384, -0.094331325266374944, 0.039374839837024993, 0.0018502894554712629, 0.00098403884557300703, 0.043251075195119761, 0.10289600250798445, 0.10139457516638843, 0.098296318213992984, 0.0015172138792846615, -0.091353309472808869, -0.14408600311908051, -0.17601217218477397, 0.0027216978532337011, 0.0050459512202331094, 0.013052368344425278, -0.02268381542321192, 0.0018963147223881672, 0.058561197832169565, 0.10081746684744355, 0.1284091469146558, 0.081889066464071528, 0.020432446864236044, -0.041167990010434322, -0.0055028747128956224, -0.0065942601568496836, 0.014863290940840906, 0.0037309761431811826, -0.0055733957673353585, -0.0095154141766328471, -0.0085635423630069374, 0.013253049308240551, 0.048732591229276791, 0.06968257130273349, 0.046720703389001979, 0.017479981197113373, 0.013140374943216824, 0.0057338967701967298, -0.012003741816435577, 0.023955505761992523, -0.030000657870097674, 0.047563304649765062, 0.0077259610173529046, 0.033237902464347463, 0.017011399778159172, 0.061533921370621733, 0.020212718731567866, 0.017305311353954009, 0.0022897792857957105, 0.0016835294612028012, 0.0010206390840901067, 0.017475023171824131, -0.017949934386931946, 0.016500074421584708, -0.011803197631711164, 0.0071375865755149634, 0.020110991820133289, 0.0066510650617606984, -0.035354962478288801, 0.027934388454869896, 0.0035907122794057167, -0.011547179475815586, 0.022730843153114938, 0.0063450556387456142, 0.063988285390432748, 0.033769980297886006, 0.019839431713957675, 0.040068406254536615], 
        [-0.091835947946248234, -0.046604387675826101, -0.041676874531984251, -0.033930262028828845, -0.035175875655805863, -0.0080453626545488738, -0.0090216589851604481, -0.02121447197147619, -0.062925485862957847, -0.05369020745787989, -0.061858807625239501, -0.06937986410985425, -0.020603691282656961, -0.034830971939882417, -0.019889322846467439, -0.011468099868646962, -0.0094847742535054055, -0.025059650809968075, -0.013132163916809988, -0.034373831808455289, -0.029388799791445819, -0.054678738402223398, -0.040920673499650034, -0.079026490477792366, -0.031301237226933717, -0.0071872341290014803, 0.0034458433272600772, -0.042065809644383292, -0.021031719352458608, -0.001277101170823379, -0.005576040960812231, -0.04990522219778968, -0.067835745978871653, -0.025379854810453996, -0.06049669189310318, -0.095683850344630256, -0.066897542916176167, -0.065214493641294946, -0.042633834046964025, -0.077401334220438017, -0.069225159677055934, -0.046596567405820979, -0.048532202776120179, -0.039853128982711955, 0.058791987986470867, 0.019029808637362255, -0.024286125044301457, -0.032536348362445913, -0.054850631234694594, -0.029159852423518498, -0.017140255241788596, -0.025126219632764957, -0.021866221424523921, 0.028552819914696353, 0.039991900782009912, 0.097745845928933414, 0.075003405416456781, 0.07430547425958485, 0.046933143764967475, 0.098596680830569355, 0.069830184507780863, 0.076647971552195535, 0.055005419110830067, 0.032350115276010255, 0.096665962740361017, 0.010918853676894331, 0.022113519271821657, 0.052322536591560803, -0.012178262012994243, -0.010455542631323735, -0.018880441466414811, 0.0047199732120972978, 0.0026889619208184806, 0.018985019723820939, -0.0023284725516955788, 0.0062286539593777134, 0.029915434795143629, 0.035545042009691323, 0.031166989162956585, 0.023817329421070923, -0.027070265784234368, 0.012571032012612495, -0.010191882170487051, 0.038027976545602443, 0.021583936786457751, 0.0041709730151021779, 0.0055753825352771154, 0.017282900358889321, 0.012313387276719573, 0.014888890182775907, 0.0026555936507575845, 0.0041491311841516786, 0.0089247523949147946, -0.035192223449134509, 0.014939222809458778, 0.014096628107623346, 0.0038994744074676031, 0.0038988514456372763, 0.017266521138772535, 0.034244356006098528, 0.049763931691756066, -0.005218910309326261, 0.026330780935207528, 0.0018007141228710017, 0.040201841967386298, 0.008387995416966193, 0.0089671250498080113, 0.021011865402405266, 0.0053809467478302536, 0.011462851184232362, -0.0066133988743292821, 0.045841349785302882, 0.047592090089117703, -0.01138244385540027, -0.00070927480002307142, 0.0074075056026355335, 0.0019847009079824521, -0.030303270976541313, 0.018517753986476031, 0.026216734168329519, 0.034368064491053237], 
        [-0.027531037432672691, -0.04099006670908386, -0.026965623295530559, -0.012312380363310317, -0.039447686525463981, -0.03666523046247578, -0.037447390315664068, -0.022587619011761463, -0.062582100174721697, -0.033423508713191781, -0.0076373179884149161, -0.033315735899947165, -0.0039483412696357774, -0.016273510510130911, -0.012992687546803472, -0.034372636966254512, -0.03435111582313348, -0.051089306183329297, -0.046268014832446261, 0.033800057143038305, -0.0073586595715814766, 0.019133386626946858, -0.058297854363401749, -0.031082988073954963, 0.0083772509744956935, -0.037071324198600958, -0.023704461959529924, -0.039291684655309064, -0.048263910448506031, -0.012347480993205387, 0.035773003788554164, 0.037156659417232431, 0.026570153340676375, -0.037942266517026105, -0.024176653665932857, -0.031307061474069642, -0.054205313513014206, -0.06768275375230659, -0.053316198087527286, -0.010338522140239293, 0.029942502875344803, 0.014711352823963025, 0.049805637603742653, 0.052371502049621543, -0.10703071666798925, -0.045011199304251487, -0.092731348345214376, -0.085093349694216031, -0.063610110950440779, -0.0095235206492992573, 0.042742365251146427, 0.043444162762555597, 0.046036485816212142, 0.028778886437521231, 0.047907150554463943, -0.12009138239136509, -0.11012922541438776, -0.078798363732678192, -0.018737247881031881, 0.031173984486382707, 0.095074649576190343, 0.060365097674145295, 0.019220554797620699, 0.01388973862340221, -0.0076666833910165461, 0.016336606646977139, -0.0089402055834871645, -0.009503128569333559, 0.069645335781562456, 0.10401039886252086, 0.052459790243731555, -0.026938277073398003, 0.004284176371855913, -0.010856375573225323, 0.01605273011301905, -0.02894886868907141, 0.00023294115249347658, 0.10367861418152627, 0.050069068200320935, 0.03685333261379678, 0.0065038291189368977, 0.0055476321647372102, -0.001084420000763836, -0.0013256537401329926, -0.0055543179731149875, 0.04532956341916991, 0.0065356074227495148, 0.00060778524209767829, 0.072038703955503394, 0.028968613954759095, 0.01396712994861575, -0.0072270944036459395, 0.0072231709415025436, 0.0088564229032674913, -0.012818406202984009, 0.0018158551557052593, -0.011048631845851281, 0.0081952063010873877, 0.012550415026440526, 0.030696565794881558, 0.067975847115216093, -0.022209795527931789, 0.017373946107885192, -0.0058381708959014574, -0.016933088119923018, -0.020606794484921063, -0.0037043871743785168, 0.0029398368329221804, 0.0096078974834835768, 0.0041619321053977393, 0.051668501796067898, 0.0039989461136227533, 0.031118179883235883, 0.026294533996712728, 0.01753286865508474, 0.025533735463243126, 0.015158623449280213, -0.0079480930999361321, 0.0038964542185176585, -0.0053933087386399264, 0.021361178289641174], 
        [0.012975868416211518, 0.019239320212785932, 0.015861069262982933, -0.050083983501051685, -0.014830404072943748, -0.042428924530810298, -0.0546374523172155, -0.087876214943823805, -0.026658677207938124, -0.015590232984336386, 0.036899434494932132, 0.024659476737796934, 0.0020171111101438682, 0.017921834795381661, -0.027324028879693207, -0.013180029299528148, -0.055753129702174518, -0.049084869856142327, -0.022370349979819272, -0.004286198645007025, 0.041588558750575308, 0.026714819884015438, 0.033049974332900536, 0.0089521448811692717, -0.017401493840176877, 0.0075428243019341618, -0.059296477399313652, -0.055868974136098246, -0.057660433887213092, -0.042846351191628017, 0.014163595597386905, 0.016126409391757648, 0.045832162409125146, -0.03439907801328182, 0.024141395323280069, -0.034808445161098753, -0.040342652019852668, -0.071211354083205405, -0.066220814617881887, -0.021197302763752403, 0.040154246023236077, 0.026897565966803642, 0.041075505774253465, 0.013102896697572107, -0.054802347574740791, -0.036158434286273147, -0.0256495795872312, -0.031709300211612938, -0.07192249463955766, 0.0018536114632540868, 0.06135675209286226, -0.0047182623867055755, 0.040748587019009241, 0.013385521369616127, 0.022021140563933967, -0.071345017456805687, -0.032751414465768555, -0.061368302060063384, -0.077484017233162547, 0.040235459113155417, 0.068103358625634269, 0.052652304806050272, 0.037109981850323923, -0.0069502207163615664, 0.0099627248261238005, -0.013836396194806236, -0.1076545781769893, -0.055495023231610416, -0.03496995103010396, 0.011211930076389209, 0.071812499425325693, 0.073452579592106007, 0.011482805374590529, 0.0046876216072186004, -0.018292746840584097, 0.034170522532356445, -0.010280828511826764, -0.11953193347980212, -0.027928919333068614, 0.039183167556650897, 0.054784445312102498, 0.058364392086528799, 0.010347645401137313, 0.024383436691158888, -0.037224914576266671, 0.018329010676908897, -0.021362338634851388, 0.016317900816211706, -0.036988609665871267, 0.02534543374576112, 0.049929079774209781, 0.046243114162446489, -0.0049605182450543489, 0.0034919992815497097, -0.044846569032337441, 0.0083151693429875384, -0.0013347971554703852, -0.03179501043076588, 0.008411224541488016, 0.04299524896058729, 0.010370090496971934, 0.032726802355203644, 0.017613621443155619, -0.017879863195363097, 0.01304441155731989, 0.0031245950737431721, 0.017805613201477818, -0.0083911278501079337, 0.006798248666313525, -0.013767337935693395, 0.056008431245866491, 0.046170998183484704, -0.0067630944098937273, -0.011002116865157521, 0.021424043858876557, 0.024102164398572545, 0.034701661533462574, 0.021782351862351945, -0.020308680817982358, -0.016830911622128797, -0.0089977505477456202], 
        [-0.00053288722928734877, 0.01181232486259727, -0.0097595448326459004, -0.032900195859997115, -0.040055309118167202, -0.087664118249866321, -0.054682271367624567, -0.012138385460291765, 0.0081352895357042071, 0.058249646659419167, 0.030708308006623514, -0.015344928171805335, -0.017993990035881716, 0.0049203910914597283, -0.013878741210342176, -0.030835237792518008, -0.057101218092033765, -0.032671359607370866, -0.0037749689752403365, 0.046975259888485603, 0.027796476796038583, 0.0092523091282655789, -0.018920714229260328, -0.017057777895009705, -0.0026666003038471045, -0.032119731896417023, -0.044973722999436631, -0.055383689969028219, -0.009123266518274652, 0.042052749594025995, 0.0059455404022271778, 0.052199892821319531, 0.013921729795046189, -0.019417768980458633, -0.0042120805724511906, -0.016059476497225951, -0.019873270609575895, -0.0632108563907854, -0.06190209155478818, 0.010727975525090354, 0.048801088568173723, 0.037392797038495587, 0.0072673632685977124, 0.012809806033498544, -0.0034510716108627883, 0.016898125070602375, -0.022589640104992519, -0.062363076360741024, -0.060954585959324542, 0.018029070106769074, 0.071600992694912186, 0.039034855273469921, 0.020918995904994631, 0.016561765175755305, -0.023866961496342709, -0.027629495788895585, -0.029461697539283106, -0.055111224665105978, -0.068953324385477396, -0.031776432477510531, 0.038108515593093778, 0.032616236844622878, -0.0056891246860652223, 0.0095690633852811985, -0.019286757729714242, 0.0062446121687075654, -0.028641062503210957, -0.044571632732540445, -0.056247188104149033, -0.035749753102891232, 0.073365539091992032, 0.067655332791377198, 0.026480919164869672, -0.022367434017255376, -0.0069125347125725614, 0.0098899156936733956, -0.013395387566733363, -0.059837543834672623, -0.055071395971080822, -0.057234682668758363, 0.026937252303024146, 0.056778003501821217, 0.045512331377432672, 0.010489795280571829, -0.021873444057054492, 0.00025673627436038904, -0.0091984359947323291, -0.0032360325511277127, -0.098453946376152596, -0.056634390573377422, 0.040879143636173176, 0.053707788468343107, 0.021417408905106447, 0.03366002971067647, -0.024266957419143365, -0.039720531313110208, 0.025845458247811957, -0.0036737275747508319, -0.0019562811556378054, -0.092075643980856242, 0.0071537732617090663, 0.048235488203754229, 0.031953649727852425, 0.003989147112834171, 0.013123842004803394, 0.011507174787329752, 0.0048599025473536617, -0.028069938515581847, -0.01371471244881068, 0.0044504142002205899, 0.011633142638130397, 0.016824865792836985, 0.044010419049233987, 0.043598608889422096, 0.010461702283433252, -0.011713831073031492, 0.023350032280673588, 0.025824508444130562, -0.040208662190134595, 0.022221624473925089, -0.018983577713146488], 
        [-0.00012902298195700823, -6.2039143102904371e-06, 3.2701886255415841e-05, -3.1071238546384605e-05, -7.8012389908108104e-05, -1.2260737746391803e-06, -9.3428634947009467e-06, 7.5833942839328289e-05, 1.8838025439401641e-05, 3.8241995713984844e-05, -5.8626520388890824e-05, 1.2707156678677667e-05, -2.0943050504294153e-05, 7.2618095238986824e-05, -0.00010859928908422273, -2.8985456628716211e-05, -0.00016736251968167692, 5.8133891860739917e-05, 0.00011171839620466306, 1.7754895131873172e-05, -9.451887160561584e-05, 2.1444236751338823e-05, 4.6865300624759562e-05, -4.638768128616827e-05, -8.9560896987736505e-06, 2.9042840169843376e-05, -8.1942849377705101e-05, -6.1236466778755941e-05, -1.1152819677964776e-05, 0.00010188996994199562, -2.219289260330104e-05, -2.2868962134298121e-05, -0.00011509542457514149, -4.9758057323850968e-05, -1.9393139160640838e-05, -9.4734362441235842e-05, -3.0802279410412688e-05, -1.1207452486435205e-05, -8.8749274811722153e-05, 0.00013300646840005981, -3.5925271800810177e-05, 0.00013742103255615784, -0.00011808493242440599, 2.241467472778591e-05, 2.3854116688329374e-05, -4.5322376845374768e-05, 3.4573180042879459e-05, -4.6142794075512694e-05, -7.5348994747592712e-05, 8.1387747235452806e-05, 3.3796552020320947e-05, 8.4447120378403073e-05, -9.0274895458430926e-06, 7.0080857293354504e-05, -6.1460029718581055e-05, -5.3967745923230769e-05, 2.2718206186092202e-05, -0.00015616234415340852, -5.6948505482531941e-05, -7.4115836868962615e-05, -6.348787135312256e-05, 7.5446184729599519e-05, 4.4606522477112776e-05, -0.00010450123996736185, 9.5752201968071771e-05, -4.4579197955377237e-05, 9.0414806759177291e-05, 7.3014201662432998e-06, -6.6094432640280421e-05, -0.00017393323793045423, 0.00014375964009427644, 0.00014113080383144211, -1.4170194328547159e-06, 9.805969688744115e-06, 6.5253060614042357e-05, -0.00013047653881412095, 3.4993317070665386e-05, -0.00010216225080474789, -8.4219700147578113e-05, -9.7025062000797874e-06, -8.5183069646590538e-05, -1.8574643331822427e-05, 3.8637504285300153e-05, 7.924976063334796e-05, -9.6774013405367953e-05, -6.2754497545105745e-05, 0.00014663167384857193, 1.7006970539279118e-05, 5.5150673017173579e-06, -5.1711502024315639e-05, -0.00014948514404445907, 4.8590777832147047e-05, 3.8820345659114353e-05, 4.3569583440402574e-05, 1.1474225398808158e-05, 7.3156504448345511e-05, -3.8172280966974892e-06, -6.3707580509990425e-05, 7.2659510936171068e-05, -0.00010594170361082414, -6.3344621752967588e-05, -5.4025363748051725e-05, 8.3061403910164588e-05, 0.00010798285789356821, -1.8400164812460568e-05, -4.9804496028007378e-05, 3.6572621350011714e-05, -4.7481622172728527e-05, 1.7943415993419156e-05, 4.7690435629216266e-05, -1.2465656421243882e-05, -0.00019635305944052869, 2.48024743702141e-06, 0.00015032297597119496, 9.5319611595749698e-05, 2.4341784711353828e-05, 8.4135307912430735e-06, -1.0237800380508144e-05, 1.7639768025006289e-05, -4.9211961308678887e-05, -6.4779795722127997e-06], 
        [-2.1081829939189364e-05, -8.3620881162482352e-05, -7.9323901484131551e-05, -5.6369563666456841e-05, -2.5225019111016402e-05, 6.7038340261255428e-05, 1.8979428320805604e-05, -3.6383667643090627e-05, 6.3535381529804258e-05, 5.820117801163101e-05, 4.1579935042042955e-05, -8.0246257085953183e-05, -7.7024543088595118e-05, 8.015274585669932e-05, -0.00014513612413195485, -2.5225497027576353e-05, 0.00016501583478403825, 2.6271142708690046e-05, 2.5316005334570513e-05, -6.7103148717620464e-05, -1.1803827654757997e-05, -3.7280704814898497e-05, 5.2411115100495795e-06, 1.9188281117332165e-06, -4.1461064150758939e-05, 2.4848310095391263e-05, -0.00010693164000688581, 2.6294649429827789e-05, 0.00024742918857803727, -1.3795393578770743e-05, 5.7821874727727318e-05, -6.3546201653433363e-05, 7.9184859554841738e-06, -2.9438053918515172e-05, -5.1191789614749364e-05, -5.229702720297184e-05, -0.00015826280154122114, 4.4709933911597777e-05, 0.00010006580584785707, -1.5725171825552758e-05, 0.00011394254284542574, -1.2176783409917694e-05, -6.2006183805807247e-06, 1.6735056790493242e-05, -3.2321218056508699e-05, 7.0455310764595564e-05, -1.1204046406237695e-05, -3.7759252495142039e-05, -9.6707313847678444e-05, 8.5280328383621697e-05, 0.00010626012688529703, -7.9059523137930466e-05, 8.7526351723081312e-05, -6.0072534243107534e-05, 2.90057435677212e-06, -2.231589629678437e-05, -6.2577199005761815e-05, 5.1834601699592012e-05, -7.8178877034198557e-05, 2.8746546782532946e-05, 9.1197009731421724e-05, -8.5285435194773496e-05, 1.5505315731474678e-05, -4.3117674284669292e-05, 5.1101985086758703e-05, -2.5995519087103932e-05, 9.5403159591622017e-06, 5.4456486999133005e-05, -0.00012492021323487425, -8.4468616262168552e-05, -9.000869760849206e-05, 4.617292956130177e-05, 7.131283142743387e-05, -0.00011470771088624421, -1.4346991649049484e-05, 9.7453713062413318e-05, -4.1037923649930581e-05, 4.6700567506506845e-05, -3.9864452388190625e-05, 2.8496279151997124e-05, -9.066823994197191e-05, -4.4743333617536891e-05, 2.8884441623257457e-05, 0.00010540785842768621, 3.850540540015733e-05, -0.00015698623100240949, 7.3335058638763877e-06, 4.9803028096866153e-05, 4.7614922439986993e-05, 2.1925161837212364e-05, -6.8629674967009865e-05, -0.00015530778840890948, -3.100212558819124e-05, 6.3968237768941005e-05, -3.1106521259080533e-05, 9.1934837059831501e-05, 2.6946272223389578e-05, -5.4282762803284628e-05, 4.019534042066982e-05, -2.9248092071432023e-05, 2.7237642583656692e-05, 9.8185766607061667e-05, -4.2389429439307238e-05, 4.37933802041688e-05, 1.6481438603041521e-05, 9.6248410750655877e-05, -3.3118875722210842e-05, 6.7699125022684103e-06, 1.8952909147867698e-05, 2.9371419846995129e-05, 1.8803983863591715e-05, -0.00019186119469311551, -5.361492348410202e-05, -6.4625196625645032e-05, 6.2101642194700582e-05, 0.00011142710960054477, 2.7597534422937219e-05, -2.5794525775165963e-05, 6.4102040847752173e-06, 4.3683270110482682e-06, -6.8056030788576048e-06], 
        [8.7288421870321264e-05, -0.00016058377648589737, 4.2400373088111865e-05, -5.4107084248774395e-05, 3.0344295765780732e-05, 8.8236089089935299e-05, 0.00018665417186519012, -1.0617952797905769e-05, 4.8858460377767388e-05, 2.5608835436190377e-05, -0.00010410765791478177, 7.9333875062426173e-05, 0.00011912193130779857, -0.00017617567516805917, -0.00011561862531249794, -0.00015414695744926516, 0.00014088130997128717, 0.00016468128155683326, 0.00011507720929629026, -0.00015709778676884618, 0.00010763417094498772, -9.118060462058597e-05, -5.5086539995887829e-05, 5.9474220836819866e-06, -8.6291073686201622e-05, -0.00012420251221447246, -0.00010346788082849325, 9.3599593697178099e-05, 0.00026254729278605779, 6.4222765577659057e-06, 7.2572661937003226e-05, -4.033497396762134e-05, 6.7905724745284668e-05, -2.93776948290119e-05, -2.3486357610992304e-05, -8.3910324209424228e-05, -0.00020864486749087939, -6.7755590215695969e-05, 0.0001515708034109664, 0.00017533733335889368, 9.5332896045297044e-05, -7.861973811299286e-05, -1.9995583621156693e-05, -3.9618775529985661e-05, -0.00010062395102337484, -4.9007295684973088e-05, -3.3360058372429793e-05, -6.022956312257328e-05, -0.00015274074428942797, 5.8063262650909908e-05, 0.00017946285495735103, -1.3678668845418327e-05, -7.8757246044701288e-05, 2.392826356772957e-06, -2.3839343828305911e-05, -9.248265240540364e-05, 2.9770206634176059e-05, -0.00014104067824765015, -4.8579147311816374e-05, -0.00017751495448386015, 0.00018735013824282797, 0.00010606389466041302, 0.00010933903734035946, 4.3269015151447881e-06, -7.1743566359979186e-05, 7.0321014536656851e-05, -8.93257874152939e-05, -3.4592052390203243e-05, -0.00011018808045150374, -0.00019880825872508473, 5.2018749766881422e-07, 8.5410387895845825e-05, 0.00020004668933091391, -2.2823030905125513e-05, -6.622604266612233e-05, -1.4683429230855091e-05, -9.0830073547348844e-05, -7.0533087103265366e-05, -4.3155104080978553e-06, -6.6612089885383471e-05, -0.00012962736237221795, -8.4205562721053305e-05, 0.00019015519131662401, 4.6517997794389906e-05, 6.5029919190847871e-05, 2.5248133705620211e-05, 4.9506668943670649e-05, 5.4034388762582352e-05, -8.5820743604511545e-05, -9.1440849227466376e-05, -0.00013511882193446021, -6.0564085048693712e-05, 2.1193874455255248e-05, 0.00015210079798582028, 0.00017075069883851484, -9.0844790719107459e-05, 5.4302802042653642e-05, 0.00010180348435486356, -6.0323087261991346e-05, -9.446302123957586e-05, -3.2240495441221377e-05, -0.00012010188056445995, -0.00012404303956506726, 4.4630583568044946e-05, 5.2507061058221227e-05, 0.00017356731784019808, -7.6959696971629126e-06, -2.8710064423776577e-06, -3.4925643861908121e-05, 6.2447442756253732e-05, -0.00017903527875390193, -2.0437146053053435e-05, -0.00018575226473759824, -0.00012521765442334218, -2.4217309442219341e-05, 0.00014051754345432033, -8.2035171331245466e-07, 8.7475802753541048e-05, 2.4934621660151039e-05, 6.4845825162306749e-05, -6.3934442578149898e-05], 
        [3.539459461619765e-05, -6.807572297566275e-05, -6.0927166479846084e-05, -0.00015316315161422248, 7.3480222355239155e-05, 9.7563808442280298e-05, -1.2450172577060936e-05, -1.4500568661798829e-05, -7.3970664566741506e-05, -4.0340386747484986e-06, -3.8654627032383426e-05, 1.4379221778954175e-05, 3.4687131743454946e-06, -0.0001584469264043209, -7.2931081155691132e-05, -0.00011775139382447231, 7.4047592217506633e-05, 0.00013239001684919123, 4.7081715214836173e-06, 8.9098227572539934e-05, -3.4630714238897964e-06, 5.0421055899113609e-05, 2.6442780926408394e-05, 8.6582559483544541e-06, -3.7941259438345476e-05, -0.0001398658685568422, 4.0145443855138518e-05, -5.4757761041059061e-05, 2.303092327018974e-05, 1.535566924483478e-05, -7.6915169280877826e-07, 2.6449624305313613e-05, 3.4036177513768751e-06, 3.916281041301678e-05, 0.00015363454768414775, 3.3088056267130406e-05, -0.00016826406184210219, -0.00014952301925194589, 3.5498105323300555e-05, 4.88793394428505e-06, 4.9269962297551761e-05, 3.206760857812907e-06, 6.9986096689830801e-07, -5.7017488941165685e-05, 0.00012398343835970382, 2.8576108184866222e-05, 4.4996957731510689e-05, -7.6581956260302758e-05, -0.00017982376102392873, 7.7913987986955036e-05, 9.182050843792311e-05, 2.0136049025466763e-05, 5.9720574201015814e-05, -9.1171378305762718e-06, 2.2421059441793401e-05, 9.2991945137864407e-05, 1.5504680551996219e-05, 7.2486851610271963e-05, -8.9180203210073236e-05, -0.00025973470234600185, 3.0931649627910485e-05, 9.1341641323305949e-05, 2.3131495582390249e-05, 1.2246773344729012e-05, 4.2369277568246599e-05, 5.3252080969970472e-05, 0.00012342596764605002, 8.7665076725869373e-05, 1.2940257800994875e-05, -8.4930704521106549e-05, -0.00012907568039395578, -1.2681617590354355e-06, 0.0001043685768841035, 0.00013644771823127788, 1.6057523568244192e-05, -4.4318088826156288e-05, -7.4065080743923595e-05, 8.9411278556494889e-05, 4.0459656558203272e-05, 4.7207547890018575e-06, -1.2596513258189557e-05, -0.00010567536025424262, -9.4991903417787626e-05, 2.7651247338847385e-05, 7.609666823792105e-05, -1.9995057402716343e-06, 6.7764367183351104e-05, 3.5254672333742687e-05, 3.2643123012973674e-05, 2.1440245180040507e-05, 3.8887571817136646e-05, -0.00012810855432182633, -0.00019782945249277595, -7.7662951400422897e-05, 0.00014426765708057399, -2.1274432415119282e-05, 0.00012320100907245446, 1.0102538176598452e-05, -1.605497818817081e-05, 5.7714933317881689e-05, -5.6046568401510455e-05, -1.7521004885695524e-05, 2.7609299548841948e-05, -0.00021782421795693563, -0.00010669318029415953, 0.00020791845527659558, 0.00011483573627234234, 1.3285234615884045e-06, 3.8059477856533053e-05, -1.2194043980374991e-05, 3.8422458442419205e-05, 0.00012682223060628273, -4.4551723471827898e-05, -3.6962727574252341e-05, -0.00019867893992770206, -7.9969698622255254e-05, 3.4788527334016846e-05, 0.00019429872846807102, -9.2258251254903612e-06, -2.1814133753517151e-07, 7.6668947854130476e-05], 
        [-0.040989361407028427, -0.072592926530304011, -0.020477833122960813, -0.025777644705128749, 0.022397648046425161, 0.0030979965185144592, -0.025475041444791693, 0.0014983432415610135, 0.013473198352794237, 0.015343737042018784, 0.013699123091301883, -0.042585561573300484, -0.04138694292044983, -0.088632835869019461, -0.058018494615619191, 0.015073506060712692, 0.0039591744812569069, -0.0024599044551481515, 0.018532342878064281, -0.0072520896771801763, 0.039351067096824496, -0.010583759958094123, 0.031659008994451787, 0.0049459978895588508, -0.023228219899002735, -0.098922351529419611, -0.083752279838564703, -0.038392682480552429, -0.0084343370007130825, 0.0076728523005259591, 0.048785186591904672, 0.017104325073902631, 0.020754499614758781, 0.049112315782768368, 0.05763971849416781, 0.019838597096741267, -0.002711097174265778, -0.10015290955737972, -0.1320216915887979, -0.062977989737248996, 0.025823602205800371, 0.015879808082835109, 0.023625409629796024, -0.0046384308741842795, 0.026114060550781391, 0.091319153616595122, 0.15889496663514957, 0.077891023551431793, 0.095775074298850682, -0.12439872197360356, -0.14160536960462869, -0.075509861563522143, -0.02844030015622347, 0.021985439206375433, 0.015548610852228811, -0.0023889058702177349, 0.034888033953786937, 0.071073458263117534, 0.14647023139119036, 0.20034906031914418, 0.16005422621447674, -0.086760118043380546, -0.13617760143493793, -0.015931290696152286, 0.005887974985659461, 0.0084439895294871475, -0.095816033487544763, -0.06971296020482845, -0.017803306714053436, 0.027850106601549955, 0.099568377990365997, 0.18576028306369899, 0.10917191640951349, -0.064365376981623867, -0.053216331409250542, -0.029502881465266584, -0.0098622631787540771, -0.10680613413351928, -0.14825732796410135, -0.11347081176660601, -0.064061353902307328, 0.0027156666630031856, 0.091809632965261706, 0.11261031536840553, 0.043783501816099038, -0.0270698877015552, -0.022521165339643115, -0.010411461095651862, -0.062429490602539911, -0.078462922695807291, -0.099126684507961943, -0.097931900585343207, -0.053658802519860244, 0.020026860523391449, 0.097467511896917089, 0.045269155637793823, 3.4982892145374311e-05, 0.00096205693095272049, -0.0042046666568070074, 0.012970749419225602, -0.018376496479439189, -0.044256889054004316, -0.076150433998355901, -0.039790311947249343, -0.03211080346166089, 0.060508684856887124, 0.066025243127584496, 0.043696389663569632, -0.0062411434380450354, 0.0065600929269337555, 0.070876692004307851, 0.055992154723297945, 0.017986548813861334, -0.0038241581051177281, 0.011310267599780391, -0.010487970918616498, 0.020902380949651758, -0.0025446887362083059, 0.059004430404734909, -0.013398145289176891, 0.0035443428720070419], 
        [0.030346036175779943, 0.0060729291720623552, -0.039343234393949156, 0.015518327303993051, 0.026091031799842485, 0.05707488929867742, -0.0076810101047968676, -0.0080709248858639449, 0.016419173022353517, 0.0028420019312691766, -0.013730810525757281, -0.01952233856199849, -0.016220877105556714, 0.014953867372257727, -0.034021908696086872, -0.013762279640316323, 0.024752967636295586, 0.039530055629976274, 0.0045832864073847429, 0.0083765062096497409, 0.036851407285838494, 0.055084117544986336, -0.056975578544102429, -0.029317707997872627, -0.025594697243718541, -0.0209462093989107, -0.058040406822408838, -0.013577428197324267, -0.010020990828990349, -0.0018451035217218088, 0.020025419779784451, -0.0075917489409040063, 0.015631011927141059, -0.082665619369575963, -0.080551448664543737, -0.050440509420469251, -0.072777006043539996, -0.062636415930186193, -0.071288814601525669, -0.044269272303937818, -0.019290397771040843, -0.00063643565990734174, 0.035648090161244705, 0.0080665566901492874, -0.069973032306163641, -0.072405787021877846, -0.062813161592231409, -0.060859099341869331, -0.10296927011026999, -0.074726837298926568, -0.077151004103565929, -0.089632117423250057, -0.060207561869611841, -0.036005373570064905, 0.030580152351007542, 0.018237066287994937, 0.02174043579052555, 0.026790712318865414, 0.078394679005428389, 0.079774453891859387, 0.048844596953047867, -0.011284404445060854, -0.042892655919123217, -0.060469291421125677, -0.07771702221123683, -0.041768476829136147, 0.11044800435479082, 0.084453033189816312, 0.058716658475689382, 0.11796990936830279, 0.15001483899962584, 0.14682265151923721, 0.13948544434843163, 0.071900535535049409, 0.022951582623399639, -0.037573009410766148, -0.064497267516120824, 0.10514145685057832, 0.014295615161356343, 0.047946276454789161, -0.018432919080500723, -0.0048603160651503538, 0.039432239140443998, 0.090925443024842678, 0.075278132366418865, 0.081170655224668736, 0.0073833672168802864, 0.00032987076164094076, 0.022814449998299069, -0.0086827680648501639, -0.048521183046406041, -0.019108747944309772, -0.065560745830540057, -0.080182991518368607, 0.0032263375068990836, -0.00099658547565971249, 0.052424135738000213, 0.022385739723059378, 0.039120492922030209, -0.031163626046383244, -0.063939589567716518, -0.07911716509669843, -0.078917040495979945, -0.058880520828822197, -0.10110781394222774, -0.05114064572351204, 0.014884135572375071, -0.014461306825219532, 0.036091619454282908, 0.039865935139445363, -0.028625117209377549, 0.02387850967371026, -0.02520581913037356, -0.023467115929623323, -0.076187598481757157, -0.040233406732182481, -0.051995660903622447, -0.040468336476741307, -0.026854374302776318, 0.026999904989888759, 0.070255583454977802], 
        [-0.0028030032154688772, 0.040758904890067268, 4.1767863328545651e-06, 0.020260138546443159, -0.0059647140070275915, 0.05181012213641132, 0.02634646200863381, 0.012264698464511966, -0.010147315743495306, -0.03354793984589477, -0.019732136738390867, -0.0022577603782329772, -0.016261980311150601, -0.017314099330176039, 0.014344127941805743, 0.037970408394952859, -0.01383697548566333, 0.016742082124341348, -0.030123200807178369, -0.027735921784170836, -0.002268324918850477, -0.01917565837724932, -0.015693411602399308, 0.013113857326043843, -0.036320774018331614, -0.063043192413591909, 0.0049614486973488248, -0.036804629569037517, -0.037438386219278155, -0.023603350699011483, -0.0072298451341650145, -0.059868515686104032, -0.041755559167967415, -0.034103966764113251, -0.037695383284049352, -0.019865628782664548, -0.037320716015948836, -0.02961465787379973, -0.062378820692505714, -0.077726227410309545, -0.064330260920173826, -0.067627424844985615, -0.066911336391702644, -0.051813667955715265, -0.064044427932397077, -0.040497690544443715, -0.068570648963837993, -0.064781691548234432, -0.077465204305072172, -0.059300747266943024, -0.045729121636768441, -0.033973317009316689, -0.014236662779295712, -0.0051403679981302051, -0.015748032805591644, -0.12090686617751288, -0.11592358261333773, -0.04603582196444924, -0.026967258372596087, -0.0013908674792289851, 0.070814456498094619, 0.069291900499805825, 0.071816590137885883, 0.074605172083137966, 0.095414524189679439, 0.10748657093841106, -0.095995837009767118, -0.0040975794639001714, 0.045306386276777189, 0.075554395869981195, 0.11845891486270177, 0.084776040800571786, 0.084263987235035837, 0.10125452225992537, 0.073977388593481214, 0.080838313693573999, 0.054211476638108123, 0.020058468071589643, 0.071877396983204195, 0.073614039598840109, 0.090269964916123019, 0.047955914710934591, 0.043147097517420303, -0.0011985739101095343, -0.013094268546257911, -0.030256147604258272, -0.0095366918389557919, 0.016708576234233975, 0.061142458735716491, 0.081217451112605782, 0.010385841248297306, 0.037777595415280037, -0.018148165795748364, -0.025190339821193043, -0.047771796894360688, -0.061855276889718092, -0.053652712540413733, -0.051551732136435637, -0.034374232230165572, 0.019703032705119687, 0.040214664876207923, 0.0094462636189203749, -0.022748100395121915, 0.0069180366776436381, -0.015913447714255638, -0.02702812779628725, -0.014329312669455431, -0.027715089020423824, -0.062068298599209024, -0.062014863808505023, -0.021183572775251798, -0.039143122374945834, 0.022829943433131737, 0.0032038909949711619, 0.00034299573515796187, -0.012230615709466378, -0.00321123286886877, -0.025262706824797615, -0.0022994727249915775, -0.027050395247399217, -0.039549420763164561], 
        [0.065220937475473084, 0.025071384298351367, 0.019912107113077518, 0.019312893018644271, 0.022456599328416219, 0.038123430189094545, 0.0055996572848110715, -0.012446229774174283, -0.020127115717722095, -0.019608397123268811, -0.051920391537350181, -0.003802076622644604, 0.02754021132514629, -0.031394259292046901, -0.018499328737516675, -0.028503473075545686, 0.010984204362234747, -0.0021914954953508982, -0.019643099824274573, -0.042421207289507476, -0.08150780546124696, -0.072243889331467748, -0.0017841827891482871, -0.010892973047937691, -0.0094800158033443715, -0.0041070641350081693, -0.031710787864217896, -0.025316943368023079, -0.048904598523338408, -0.039097937616454012, -0.066266518850005215, -0.057170442088922122, -0.12354156377380103, 0.0019260014740339094, 0.010454913576309843, -0.047326416677592284, -0.01495404872484582, -0.014952122468299345, -0.060398890698931722, -0.051481889909297689, -0.056998707528354522, -0.05627894012903209, -0.0082531761509003106, -0.0047280014663064196, -0.024889267516539609, -0.046324614411320443, -0.027070396350913073, -0.03551136665508927, -0.041562027780064917, -0.042411071747144299, -0.058674084084012826, 0.022288023763534795, 0.042564482569643847, 0.091510651781399763, 0.10752994926292046, -0.023190276830083741, -0.016616935256775666, -0.083807089690502004, -0.058259488808172902, -0.07074223249458611, 0.025573920295602542, 0.11913595016311473, 0.12549016018794748, 0.12135882291557651, 0.11708353956070845, 0.086422717935291424, -0.00030667403806635199, -0.03844014599380597, -0.049405321408958772, -0.092975443881900155, -0.03284956400921088, 0.10352519252428011, 0.1495830558840523, 0.086083576215801955, 0.035830958340715563, 0.024742932326467473, 0.036726117488561486, -0.0024422161164114609, 0.00040112728912663695, -0.052518659689077332, -0.044570270280448174, -0.034618820381680696, 0.049818549902821328, 0.0024548081543993572, 0.026915963481285166, 0.00043142435222983527, 0.012653778112578708, -0.051855646667650884, 0.030046740129158762, 0.00061640821688112302, -0.031155023683595174, -0.044323068746703012, 0.0045373176149612893, -0.0071958412445839864, 0.0063657993250404304, 0.018539257939901993, -0.030330920312567851, -0.031773666542542808, -0.0088228132461829062, -0.015163459489751625, -0.058175569457230444, -0.0040183309769827903, 0.018491731360507427, 0.0022898116286867859, -0.025630328318981953, -0.031896766124389749, 0.020493167081276655, -0.0060866772039110534, 0.0079194766798410254, -0.020676688933417536, -0.031624660983727432, -0.028353726901198459, -0.05878024973072718, 0.016740816129427953, 0.026376082128799203, 0.015891236744592419, 0.048440426175221846, -0.0032500905630761939, 0.0044459428797915534, -0.016655671281387799, 0.0096495524818720826], 
        [0.038712194178439893, 0.012490504356042306, 0.025251907017849726, -0.00063429003793935568, 0.03592838646617745, 0.023762703799074122, 0.040774989926937774, -0.023414811564391472, -0.048639833740482294, -0.050012993742178324, -0.064429231547649846, 0.021779562035487404, 0.049861519461227979, -0.018288852383901953, 0.035889988699122341, 0.020066404067603016, 0.049563142262502483, 0.0077522337501277072, -0.055571126615815716, -0.068510835596184025, -0.057716925501775554, -0.034900580413033497, 0.021956366706459132, 0.035414544709005326, 0.026124404566658876, 0.0017094541674472288, 0.034316099935257596, -0.027522376974677576, -0.099289021369931285, -0.072699424099411505, -0.040033682201417037, -0.0025525135698269523, -0.002910098811699801, 0.021515199868527068, 0.040227070486607036, 0.036476407601091332, 0.031515192940717834, -0.0086615704493458838, -0.13841198674869082, -0.11458519361763039, 0.010450235100959555, -0.0035535572148689162, 0.071253276886399569, 0.042723571343138186, 0.0093416587003654419, -0.012870114338850977, 0.032545576670786378, -0.015625402120347201, -0.1166589992557556, -0.14109288836317121, 0.067348402717295516, 0.076093181341659599, 0.11561514970947856, 0.050225495205762929, 0.042124269950079882, 0.02144480828358869, -0.0084782658103722819, -0.012099681800612577, -0.03095626225613321, -0.11121071517451651, 0.08286092692880892, 0.14790102050186232, 0.10500772996280258, 0.046748436389971462, 0.019903102032436296, 0.030520336087391395, 0.018229439697434548, -0.010089005330986278, 0.001308077365090185, -0.046366176234370893, 0.044459976275507344, 0.10593917475179987, 0.079518755787114162, 0.019359952078597017, -0.005288773156741304, -0.072262116264494303, -0.063106627791123013, -0.0032666604463477689, 0.031860165644442898, 0.01864598039125592, -0.012064807733087081, 0.084958238907565181, 0.04802342664859964, 0.005601477454409115, -0.071195354950384843, -0.070333235397725374, -0.10990854275232402, -0.1177120894307484, 0.019377435122344126, 0.026706728888751419, 0.073583862415767962, 0.054153278022732301, 0.025448394821031554, 0.0040382013610863465, -0.054678863283269957, -0.089932995823321094, -0.071996417021936918, -0.062770298499433386, -0.065225875464714131, 0.038396171047075017, 0.016151719170832315, 0.027022919493260036, 0.082904215002364987, 0.047186912351547414, -0.0007951610725080438, -0.095891032022590528, -0.049461949437344832, -0.072304694379190848, -0.011679870201172761, -0.03019370550552411, 0.014156325508013962, 0.050859597296224669, 0.039189955160956538, 0.061498796624547394, 0.022736333947648714, 0.015951433136659473, 0.015999485485705945, -0.043222982001008485, -0.024248450132379966, 0.040111753431796314, 0.060524773249175837], 
        [0.0024768759755275302, 0.023654123616632314, 0.0065904790765780874, 0.029715029129248505, 0.016981592598277626, 0.035002323306005056, 0.015060065696298572, 0.0023775406467376609, 0.015462766613147202, 0.0082508228535331379, 0.045204211891526569, 0.029099062971049541, 0.037371073946768252, 0.048546717205389139, 0.039674546516756559, 0.025867829117725033, 0.014831551938788254, -0.0075820940876098059, -0.020930287111501134, -0.032499439495609725, -0.0018020463301167342, 0.043937967078790628, 0.028725701880571525, 0.0010439011442610552, 0.042588108222669757, 0.017847587041736074, 0.0022798348220216258, -0.004587349161816804, -0.0088422374374940368, -0.040477333059008636, -0.084833179199067868, -0.075253592768237038, -0.043639965989430526, 0.048831110435565261, 0.031624229858512876, 0.012489522167499711, -0.044447404162642853, -0.023793861367563091, -0.09439256686884244, -0.072032359608776186, -0.0647083446116518, -0.064216711834332502, -0.11171103897265756, -0.098730030535537361, 0.034790924045997138, -0.0062696265352133948, -0.037764001610176845, -0.066031600218691366, -0.085654849487946563, -0.056461446300125208, -0.067826191654306867, -0.060587570752587347, -0.060359414639319361, -0.0751011736397387, -0.11166068555690369, -0.049682643011916917, -0.032238361809498267, -0.086484331579425255, -0.054274490762439093, 0.010712582267959646, 0.05148433045951871, 0.072737308199540607, 0.066174010870382105, 0.047052504278498768, 0.01457256785498192, -0.037236312562938446, -0.038926353894852897, -0.045892840879106347, 0.010370006985215077, 0.11284308997633244, 0.12481359471847972, 0.11597764568809359, 0.11519355137781671, 0.11439984797014933, 0.11282552440063413, 0.072652367921491337, 0.069633041676226207, 0.01208106094914059, -0.012907318992784259, 0.078196952096765804, 0.084842433468674594, 0.025448732267674412, 0.03331830161640717, -0.0032466624596392407, -0.00077916004722033971, 0.019237134849348372, 0.040467729220002191, 0.081825040597662269, 0.032173008592532942, 0.0072246459578335781, 0.035145895408776745, 0.032218364331414756, -0.004156953045711051, -0.032283733334807226, -0.048063813532225441, -0.036307980564993167, -0.0088796328542093544, -0.05064778668384444, -0.00020999998824228205, 0.029706187708307435, 0.032099114896280957, 0.0077899941541672846, -0.0059912168184391018, -0.037977889970615276, -0.032942632694837909, -0.074827929106081326, -0.08659379822525845, -0.070294616151199862, -0.021597866813346515, -0.034674752012622045, 0.039149518450188769, 0.016074895570088787, 0.0072486058613543264, -0.021666046904459044, -0.015742207167039945, -0.05712862549021637, -0.069825857774372807, -0.04304681823818908, -0.00021744057288860825, 0.0031613995838588056, -0.005483972769325985], 
        [0.0078584091809587239, 0.010417579110589992, 0.015826355571398901, 0.027799757333554075, 0.037504301634208481, 0.021889790101079235, 0.038404904299075615, 0.033823662292883222, -0.015110545900434889, 0.020273256963547384, 0.032943002507679647, -0.0012523671626505639, -0.020725236647321815, -0.012427007685905524, 0.015267851215295052, 0.015474020823992577, 0.021471502743067288, 0.031768288951377815, 0.012185070684608057, 0.0036406626398330366, -0.0025327193617110944, 0.0078853574405562885, -0.042335704666714866, -0.056683453836849029, -0.026575160075451746, -0.028598384095741225, -0.042657752775160783, -0.041423915179024752, -0.036798184223634865, -0.038262807915101713, 0.0019026661303272879, 0.0093814405628215997, 0.0084715945489586136, -0.045038182654970449, -0.075791753641229712, -0.059375219468428109, -0.061831665311961263, -0.043298853126234195, -0.043800781365845892, -0.051617842166787962, -0.06561103766772261, -0.047247281088380666, -0.057968313986108362, -0.0096926997405703125, -0.0009781358811463553, -0.0011437786713959204, -0.03286534603195844, -0.03543397020422262, -0.072328933800212672, -0.040236082624187208, -0.06694954641402831, -0.082126388033458689, -0.062803853478933039, -0.081491583056840441, -0.067532179029439018, 0.09455840560652598, 0.050160391480084388, 0.085678836867230254, 0.046323368625148131, 0.055992607831429286, 0.048911953221190102, 0.031194793059301035, -0.0026453507092326911, -0.040343576884242428, -0.097032593515522902, -0.10038707585163729, 0.0739805809466271, 0.044680789118382247, 0.049529551721828768, 0.11289040045432666, 0.077052640980907514, 0.08763910565106886, 0.090660770031109728, 0.083977779480882225, 0.064049007217798604, 0.02432712562725322, -0.042320375772835706, -0.0021388818804320281, 0.0059538906304443806, 0.0021758658789993446, -0.0093587766742978112, 0.02428998075376837, 0.02607694341280449, 0.078772783324117121, 0.091982202732447615, 0.064361385528919693, 0.081984130680270037, 0.028646331657783269, -0.042604626187250638, -0.039659301448687317, -0.023542389520778348, -0.044811266972915445, -0.037047417039871328, -0.027700762351676803, 0.0033550142769088881, -0.013100169049559234, 0.05927068198924744, 0.0462821833376071, 0.087354800090269857, -0.053790152494941693, -0.052155542043995237, -0.05679486910467426, -0.021944281329168733, -0.031143592336575283, -0.032408839769337699, -0.013571281557370071, -0.031193974331133204, -0.024377807778057786, 0.029148757012459989, 0.030672698641111273, -0.022977914200020516, -0.011077006000089942, -0.005511238658071696, -0.016195245042137235, -0.010223061193558224, -0.0017693869577628148, -0.016982213231712635, 0.023120107237225143, -0.0046448944161024547, -0.0051816660513786528, -0.022733320422779334], 
        [-0.0090421114800203067, 0.017452648291795582, -0.017831824210342989, -0.0037291040947286724, 0.039064969998310481, 0.02317336140566292, 0.017934159994940135, 0.013098455548679191, 0.045167700869445056, 0.042194405025245518, 0.040022284994525766, -0.12964953846391289, -0.098695979295591207, -0.057791701915265933, -0.036039163287215216, -0.028193969502811, -0.0054251636725232699, -0.0069512490121659137, 0.020700356583589666, -0.027658839175524981, 0.015383455695099066, 0.029921130490476885, -0.10604073203109947, -0.13745243530604678, -0.10216024104657673, -0.082044560977983155, -0.062542359265559622, -0.0060266314348334099, -0.034856310541847978, -0.019904486880246444, 0.00031967817856416725, -0.032389674206707089, 0.02439765120257871, 0.10508921937209786, -0.013046874416846273, -0.077743955313128527, -0.12222903080184096, -0.11250348266352571, -0.074496424196395211, -0.056697350656609337, -0.041103845003295766, -0.036650131470619435, -0.010932005853568957, -0.016449841939567944, 0.15622348456563409, 0.096726642307413055, 0.054041690574303913, -0.0030989655565997892, -0.046208134463465035, -0.065923493353222368, -0.065578917403099152, -0.059507067127686442, 0.0088062798799869793, -0.037442732388913005, -0.017902872235218317, 0.092956218539764199, 0.14428628109803446, 0.15460969896616991, 0.1048812845736138, 0.074650094161246447, 0.031358758882895854, -0.04452428857515188, -0.028002592637281058, -0.074285506534393586, -0.017952472566438823, -0.023442772221301825, 0.00067036565834080464, 0.048256451782623298, 0.064112377935327092, 0.12605612565913182, 0.11963258828536688, 0.10488112893887513, 0.033679327685633892, -0.060980339086270673, -0.043663902054247729, -0.023617241119377099, 0.010588509810459399, -0.042280794649115334, -0.020903906039379281, 0.0042454596033642683, -0.00023866951219775334, 0.036855270749386923, 0.064226116507300965, 0.058946958099653515, -0.0015713950413312611, -0.0095707447875607171, -0.013147541392034126, 0.01220983149141934, -0.05139007557791643, -0.055205672622494331, -0.033651076834393279, -0.030728487231012208, -0.0069395759324256887, -0.011575545867157727, 0.0073685965063561426, 0.069747145603705707, -0.01352110025060841, 0.0065960127234735433, -0.019525371968609762, -0.017643912421121496, -0.036983208587429477, -0.032526065041563926, -0.059542328663049392, -0.021432558932001102, -0.036208028263420761, 0.00082772178238150421, 0.048327127751533125, 0.057950807377417229, 0.00157328627865716, 0.0068908384829364025, 0.04482168429267052, -0.0029221677687706754, 0.001555929650738838, 0.015954469458610742, -0.025599595653019336, 0.047827295986180768, 0.0062288949733256688, 0.021267131642709981, 0.057035735175472703, 0.018964085848628326, -0.042249457791622765], 
        [0.082567408275720941, 0.055832613072691675, 0.037656390091085033, -0.025000895212346053, -0.028412812812500174, -0.050161619093851889, -0.064108798123226451, -0.085322773771942473, -0.01353721252260974, 0.013708942774828675, 0.018599027844067556, 0.075347485030620276, 0.062559343055246922, -0.03128511392926582, -0.042802981085729774, -0.031429420711545787, -0.073826763416081242, -0.024221657973838032, 0.0076412601149810772, 0.024211901395114054, -0.059471082878315346, -0.030880411920166984, 0.067967009546189686, 0.04082287464016688, 0.010013710465744799, -0.076238220410531951, -0.068200014146132609, -0.03367028790032036, 0.0026545839293711116, -0.046483364330604897, -0.013765405332683583, -0.027634708597073385, -0.061826223020465573, 0.031594341220290985, 0.021366233937152687, -0.013394045470305607, -0.094757756449669439, -0.049118966746885373, -0.045552478080449647, -9.1106347612770686e-05, 0.0079383464198565928, 0.011254760704320157, -0.006576707889103077, -0.047661893009333725, 0.044446166087195968, -0.00093206421252194083, -0.0095390604213271557, -0.050732858964937649, -0.086831280616566725, 0.032526279694198093, 0.092701707289924745, 0.0094083798882231232, -0.023484064976748834, 0.0092934449765007306, 0.02279135558872019, 0.039002806478279112, -0.008609839726177404, -0.034767835308972636, -0.031883916942249346, 0.066428675225469649, 0.15091207989976943, 0.13215693372891743, -0.059200843092382029, -0.13695949641012162, 0.048045367981310844, 0.098721373524397166, 0.012407354261466811, 0.015256770812382667, 0.052010168560839946, 0.10320819909661162, 0.04245915005083583, 0.088724399991559885, 0.068938951136573001, 0.01700823743506874, -0.085317525028892435, -0.018126337068159522, 0.1151877033509508, -0.02501683859550265, 0.019451431676204792, 0.022494547242750674, 0.052600283738925238, 0.03386730293679828, 0.032216970357249304, 0.059359611168712786, 0.014140731647494846, -0.025091371779791677, -0.026683396681205493, 0.040958328581346411, -0.050855525747530585, 0.0049323754481217317, -0.00049816712567916054, 0.0165528823762962, -0.0059580238260248993, 0.045306611135122, 0.057897639956120503, 0.042726052702478742, -0.0017969310686201884, -0.014382085486339657, -0.037002141588783934, 0.025110698146086761, -0.00016281815464665172, 0.024515446575861129, 0.021258758684308279, 0.02440056095349824, 0.036876396850616146, 0.039422926098447282, 0.040371042135130944, -0.00092562301771988154, -0.0052628779193808206, 0.0093270497285016501, -0.011241199658509435, 0.0019912846764176652, -0.025004542955752537, -0.0056085835864598393, 0.014352464943112106, 0.050873140541023154, 0.10004246984101947, 0.064681249139415239, 0.046195695636661947, 0.069300630286532647, 0.029510327635330871], 
        [0.031888415387708945, 0.017285328668591005, 0.042744527705477556, 0.03122774045587115, 0.025513813891834124, 0.023253690464280233, 0.017244825416223117, 0.0091143993389209352, 0.061254787835178667, 0.028607811797974354, -0.017058017936675305, 0.031260250011373267, -0.02279872758399017, -0.027837704295921042, -0.031937522919072092, -0.0079426595101877613, 0.0022781874855602822, -0.0029790518398695341, 0.014262174386869931, -0.011888449098713878, 0.10179674598415357, 0.017490236098508173, -0.02165996876082555, -0.029500462768637277, -0.017844168428477268, -0.0065925436789264179, -0.055317992740958985, -0.009073270159867055, 0.00041946738785142434, -0.056492643690931717, -0.073201827719489312, -0.04664521751707891, 0.062081869164307177, -0.03133901253116169, -0.065409572850245706, -0.026259743760947321, -0.028514182658014458, 0.010511476228221489, 0.02613935213955948, 0.033080893278420273, 0.010410015030915412, 0.0083593994733951738, -0.066648409600459646, -0.061126901668253825, -0.060660381708882702, -0.029413222816308055, -0.014383044755888905, -0.061112839649371503, -0.086766346192871005, -0.11103482776376336, -0.09555898737155176, -0.06964802327565453, -0.044427747427205108, 0.025755829147256798, 0.0069560148421303133, -0.081587604416162807, -0.10519239832835522, -0.071335786418767255, 0.00057041734117410647, 0.01381305071587418, 0.02671011460828427, 0.049812200550972158, 0.093581918010311488, -0.021925041934278508, -0.055497660342767811, 0.0065150133739862448, -0.054554119234424388, 0.00830487062795153, 0.13185407364756932, 0.1221341345788353, 0.011707416843401106, -0.025907153899071139, -0.024819747703220919, 0.054010873733490401, 0.13634127194350476, 0.1239665593358083, -0.0094684152953362077, 0.082360263679196688, 0.12981624266421773, 0.03824468200113923, -0.028862798409555725, -0.012401760304334902, -0.029028735431258695, 0.0060991842887090728, -0.0040297230866682713, -0.04688451714216009, -0.0033330755921011992, 0.055326238808625749, 0.1303088292739335, 0.014467140584733071, -0.059526756731551528, -0.024457345180703714, -0.0011606998001983324, 0.049886658808720834, -0.021188637788723458, 0.0053422931322432837, 0.019766544177656983, -0.075051486751190319, 0.0555814059557561, 0.11043646644803568, 0.071964938687580013, -0.090663298598382638, -0.035117192369403236, 0.048069490373574331, 0.041133552052815187, 0.083493841136462049, 0.029110800123453531, 0.031266615170663099, -0.039507972523892779, 0.027490662445642008, 0.092284055227579875, 0.066698389632811675, 0.0046770738712216178, -0.057627559498254564, 0.035842091912123522, 0.082677685179469218, 0.097331854898258463, 0.050682016519834582, -0.010180548751966102, -0.033100630833083927, 0.0060053227921194573], 
        [-0.017680769530502086, 0.0050575359825280469, 0.025215835784359819, -0.0050258332473204909, -0.05703325304593862, -0.052107314429079093, -0.045596915669796345, -0.0066502467091907602, -0.0040890258536624702, -0.003602657066238215, 0.054264533749242831, -0.041054754537631868, -0.0014472636395811613, 0.034596974606557113, 0.060835620970621208, 0.029247288961593898, -0.072140352884815212, -0.079672750193131428, 0.0063943947450929156, -0.00075078758391063094, -0.0024171227661776481, 0.00014142207761613443, -0.071900657382605787, -0.071309977692602319, -0.070946767853089718, -0.033682470049253795, 0.059045673260628345, 0.098589338565389609, -0.0012453848467233811, -0.01886197406327271, 0.070384962538390106, -0.0038593266123758303, -0.035716458393740325, -0.028903911986307623, 0.022169135417800519, -0.0056379833253350636, 0.015211997809574936, -0.077801426518747177, -0.029803914664715693, 0.019461806372238301, 0.066876022242886704, 0.074347040390291497, 0.075531131612437005, -0.047354917440969799, 0.038231304234948887, -0.014507685304722101, -0.088435278499214176, -0.10062367804515003, 0.067343499222200565, 0.024924241317476573, -0.092546195735034087, -0.014997924286342293, 0.027950457247449642, 0.066063768451511823, 0.021890400355813813, 0.13086032772885903, 0.090325158487119389, -0.051343743059489008, -0.10634460607642149, 0.041577154860304527, 0.18956400875634438, 0.15361519295302384, -0.11769518397502723, -0.063931131406821079, 0.053765417183016397, 0.012820707173704704, 0.167023415641573, 0.091883459451496383, 0.046064066872463991, 0.025159894360370735, 0.071125103615519797, 0.035423035999105047, -0.002838856695844709, -0.062881344605136932, -0.078523790463108811, 0.0060488942027592946, 0.03132431227969934, 0.057799944092782066, 0.035258713861660206, -0.015525519214079311, -0.051490678426958481, -0.070998438684272358, -0.088339548926410272, -0.063258396382083443, 0.00058157944958722729, -0.016398858534322075, 0.063472042872487172, 0.059448129985677542, -0.07202298014311552, -0.020115104672309998, 0.019270115460302426, 0.043044608199681589, 0.00016106438180805288, 0.009691999561702698, 0.0068556383978288504, 0.049380946460201247, -0.0045235379987111357, 0.032977942564106202, 0.0312528099407361, 0.056899719241569002, 0.028262649207511509, 0.035152375519136879, 0.035461884262258922, 0.039852047474645012, 0.019659199103084442, 0.033958299060307638, -0.019839700512063366, 0.059036824142858109, 0.0097260124868806426, -0.014938126441501644, 0.019066829899126298, 0.070681909220785974, 0.067102293590922832, 0.069012992594614686, 0.010044929257701042, -0.0063893114284036059, 0.0050956154428648042, -0.045817829646248108, 0.058780525393498484, 0.015058802906741012, 0.0093868702997460529], 
        [-0.059247418607529398, 0.0021432691584650498, 0.003053764423463598, 0.00585551031972327, -0.085630217055580576, -0.071756493495543111, -0.042450305971163171, -0.042689147138431187, -0.011110262401512888, -0.0079405339217739623, 0.027079022725668131, -0.027546655085047056, 0.039877525719018654, -0.032474059766464794, -0.046922091139332156, 0.033617721815522757, -0.034287802568748103, -0.043372117290399935, 0.041613978045622203, -0.043095118331613398, -0.010110834614272646, 0.022894839712910425, 0.075386609934159521, 0.009212959623099537, -0.08827817592255309, 0.037397659635345859, -0.0022263066749607652, 0.0099245075234207572, -0.020030347390232447, 0.056811150198365509, 0.0073928398206897228, -0.0781863011094375, -0.0081464259829627586, 0.079203527612630331, -0.049193984035058869, -0.10782004673639323, -0.041093953548195783, 0.036883013437131441, 0.037669473568050518, 0.013220385631969353, 0.053407888162839971, -0.026733606753513141, -0.12858397516523337, 0.021075355334599859, 0.12903555239275516, 0.017326720125844478, -0.14567221562979574, -0.082472121566578308, 0.058956938749701163, 0.11485586936136895, 0.1285955897812025, 0.095518552742746426, -0.061066124259299644, -0.0067976743155836045, 0.11055046294774236, 0.11155870568673898, 0.11891259668944891, 0.017851730403568578, 0.00062816999621169434, -0.005602233426512779, 0.077624806223943812, 0.060406967434973535, 0.059516586297504614, 0.027001848941292254, -0.044412198771888872, -0.02565017828887654, 0.068363333459277184, 0.063020564366818924, 0.059444497458773948, 0.010334144455870962, 0.042110605756137134, 0.0154145426818727, 0.0023343740302978946, -0.027062765771009509, -0.053547005048963876, 0.024499224751391858, -0.05226763051205905, 0.088856993121431069, 0.023557929383932572, -0.013779427079024981, -0.023579161648517932, -0.062755190864561161, -0.078234101715106377, -0.04428664124215103, -0.05597874471510085, 0.032155339112342099, 0.054400692992883637, 0.048229610031197051, 0.045141190902855795, 0.038704798976786192, 0.085911390919109945, 0.004357866690440651, 0.012844338732011615, 0.010882943225392516, 0.028932161983739102, 0.064841494314718556, 0.0083150497181525597, 0.028736590709835023, 0.052023311678142746, 0.033414052448422112, -0.0015520060820524428, 0.042606687446733821, 0.022301779226108837, 0.022174303630313905, -0.019435737837121839, -0.00050395773291792012, -0.0052139822121909096, 0.03017407278550048, -0.0046409824519108023, 0.049755854435395347, 0.0048321724860692639, 0.052625745447092698, -0.0043469856762714323, 0.024475775577038505, -0.0014550689238583339, 0.0025587670842842497, 0.02335062238389126, 0.00075945420194640373, 0.067061312439412685, 0.066720064906692217, -0.036179831263457696], 
        [-0.057111668714524069, -0.031888560395926815, -0.020364646131771198, 0.0031373605136144483, 0.013436737732060224, 0.0059512553325854946, 0.0080221362250533727, -0.0033221874193103476, -0.004827846253580151, -0.026659247927967398, -0.062783175554247617, -0.076967276770677301, -0.033637293299445814, 0.026369958665574775, 0.013899807316877229, 0.041920953666546329, 0.050480088450960914, 0.040061952380199911, 0.044564528130835168, 0.0069941117747924636, 0.03093737186111541, -0.0062436290541180578, -0.046320908761036353, 0.011237053256609078, 0.03625881873734127, 0.008296320294636228, -0.10315152186935141, -0.12978400882646329, -0.10762360396379125, -0.028238442365860296, 0.077774908415915764, 0.057645200841886443, 0.020682314424331508, 0.015698799166135785, 0.023614524698368555, -0.041771874129604925, -0.12746951561572256, -0.031282550658931839, -0.012702497649368927, -0.031002821266721811, -0.053233125623346492, -0.11694882872058675, 0.019915333787276241, 0.030434079899803762, 0.034286620375398126, -0.042572007349056584, -0.084215624143568424, 0.069861287834688535, -0.012204622606775559, -0.018891406834175561, 0.019639551076716097, 0.077724504862555804, -0.080366494513686909, -0.015106150328832637, 0.034588469301179037, 0.11597907830248098, -0.022649572331124024, -0.10542134577114659, 0.064909164241530898, -0.0032238315195849358, 0.10106249830020778, 0.028244619862228884, 0.13831334399041184, -0.029406130060508649, -0.1747975534137946, 0.10110596129570967, 0.10656117039170004, 0.0077235863703064567, -0.14344418956701926, 0.050109495007546564, 0.086715745692903579, 0.093089685501030639, 0.12450293694496621, 0.12884230003597821, -0.070419779564091803, -0.12323154963040814, 0.070753486613016892, 0.12050632408764064, 0.010233622798694719, -0.097733233903663133, -0.059331174485382117, 0.058782895880653968, 0.085326083200578981, 0.076775855235002285, 0.029787153121228482, -0.018648323277872803, -0.021041250623019279, -0.00034304860813555438, 0.084298241516976985, 0.056835020648177442, 0.053326494938013475, -0.039638663459144921, -0.0050145752734991195, 0.013779029282405111, -0.010485661499173113, -0.007234560404816931, -0.011950044363487594, -0.002596863452470205, -0.039481955312791167, 0.092829813875564882, 0.04294346095881349, -0.0075415218000726147, 0.01831664591755916, -0.039130110094255752, -0.041539280566723305, -0.027051679902780887, -0.042059150111380464, 0.051858253540492213, -0.038626104291501345, 0.089621659475075818, 0.071389073995249491, 0.086449311698936798, 0.055650817209077025, 0.013638815876452798, 0.017995842737628248, -0.01801617871484959, 0.063458705330672521, 0.053363636563368205, 0.074742248974209113, 0.070779246477809463, 0.038021312100079668], 
        [0.016782329804763754, 0.022184009254756339, -0.017610151854017764, -0.083789286898927368, -0.061012255632239214, -0.049436805730274716, -0.016010628978889538, -0.0012930764671227057, 0.018100227337522104, 0.042203188910774361, 0.091115107725438613, -0.030973163753086161, -0.0032195286052498912, 0.0016759860931787329, -0.014121001324428797, -0.048981904044656924, -0.010745318377515141, -0.097652326517780441, -0.082418824248892006, -0.0086675634058914763, 0.038492534598761105, 0.038421970823334595, -0.023684080137090627, -0.042571211439382639, 0.02767445118866517, -0.0045846119818084147, -0.029036296488781282, -0.014288492306115716, -0.036492483953748919, -0.073188419406786581, -0.058473938306242701, 0.061157356628457379, 0.037513132599877139, -0.044262690874014056, 0.037080163847070004, 0.0088659608282077099, 0.00080272687834155587, -0.029635044582425114, -0.061890394619628558, 0.0038985935655814069, -0.055588932181221483, -0.064825910358400518, -0.040454364747733541, 0.071936402641623182, 0.051467957240617299, 0.016629850744416953, -0.040009434139141736, -0.019115829817856561, 0.091904921049085792, 0.06837146364091487, -0.035381668896085239, -0.031695935446360804, -0.023950933267367816, -0.0394003966580148, 0.03763781004513285, 0.1197050728253103, 0.089542091951175892, -0.048321863792027797, -0.10361580068468161, 0.03196026187380821, 0.22708318047185561, 0.096992802612123799, 0.026709846902001309, -0.043788789977080037, -0.030431230119196698, -0.036199091708226813, 0.11281418451835055, 0.058353797638634589, -0.064975276585847841, -0.065781446400588514, -0.0084482038519338096, 0.091241523771951369, 0.12717594497795892, 0.076435365308040473, 0.05263655140428726, -0.011143586147963506, -0.036137839085706183, 0.069124578846449444, 0.013398711580413412, 0.029824240574494128, -0.003761299877294923, 0.0021895992476564027, 0.063411958556754897, 0.05214012614545932, 0.05038609451252047, 0.035324986438009076, -0.021229516140167864, -0.041481082779968939, -0.02340383743107953, 0.025148825203493166, -0.0071054288136557786, 0.029757691086840125, 0.0085264919185421041, 0.049978808930559324, 0.047608485947021148, 0.007387529728713386, 0.023177640471752005, -0.034372485157573206, -0.02211841910582997, -0.03255077177054265, -0.0095360632808114149, 0.02395181727198023, 0.0097167002818091229, 0.033561780635984223, 0.044589517984731777, 0.040595502460242246, 0.032653779800933931, 0.0057648668309821221, -0.015195338017169461, -0.04482684339688519, 0.07120843129770589, 0.041893263952033938, 0.048927297048636464, 0.073827844317264732, 0.065244542220815133, -0.0017292511368722507, 0.058389555203693405, 0.046492272714646857, -0.044448592181834709, 0.0032057986445928333, -0.083491824073505749], 
        [-0.021979451476262124, 0.041749536510466173, 0.036317482818499322, 0.019303759385788856, 0.043331105658738031, 0.039532451044482823, -0.03647609905532502, 0.012807077503951922, 0.022713576127722859, 0.026792414564902785, 0.017780821834078364, 0.021847416207194322, 0.035542788551473518, 0.022495282054875682, -0.019211730168732774, 0.046687383535703716, 0.032073200197188671, -0.028686832095504631, -0.06812268823509858, 0.001294075100742806, -0.034564145835298599, 0.050972273139714794, 0.017344511387778011, 0.035613261169431379, -0.047698589768029459, -0.033623331365756862, -0.032521260678616007, -0.0013900797467142137, -0.038202063259482284, -0.031763114785060997, -0.046960749111957488, -0.049070236071480984, 0.017434726053958804, -0.030703215315142654, -0.057162301791745529, -0.0037112416196131703, 0.0060696367369069372, 0.038135057103153125, 0.011368938851434945, 0.043811886314067822, -0.034217588390491993, -0.05354120670482268, -0.039937408320660416, -0.061769626775271688, -0.035240350915125673, 0.0016450283116066916, -0.019800744266528034, -0.07722000486464739, -0.075502378494275851, -0.087592049096889849, -0.11012945508577086, -0.061232503015605372, -0.038229892765514702, -0.064265277827533399, -0.052614544822152443, -0.023205841324039467, 0.011034902978061789, -0.00097880135493109283, 0.015271729427483255, 0.010026868737236877, 0.057985348035531209, 0.070840729971491434, 0.019039403044224391, -0.041761958313936615, -0.15551177552373613, -0.07628198734805558, 0.017047176529394591, 0.093014754421786722, 0.093581458110479965, 0.043402580662633972, 0.0066461038347559332, -0.028933285567003395, 0.071468870303731766, 0.099203191964259974, 0.16737897607114252, 0.069043657929340946, -0.07749686881409408, 0.099573378334475354, 0.048571278979090152, -0.0641451014524268, -0.017708931611072284, -0.033773357420827717, -0.036770341744953708, 0.021125297287466011, -0.03253144131642647, 0.016179841472347585, 0.090577750229154597, 0.10585324720051341, 0.10393909903192404, -0.039146928692158481, -0.030447885188444671, -0.0058756393399591045, 0.0049200955007691616, 0.065014535940290191, 0.02355974270510458, 0.0086861952813323678, -0.066304296641173113, -0.0023589044880598853, 0.10485324285454203, 0.041243799776074036, -0.0046939490366109116, -0.050265505473230082, 0.079897314990575993, 0.051811860629177822, 0.05936381965465605, 0.063038602309119562, -0.0096553750564754778, -0.069242556576336475, -0.047051759275558228, 0.071057903450201951, -0.034427035272532699, 0.033352431404995275, -0.038713428810432646, 0.040541117523422751, 0.067513694210917949, 0.082805954892964315, 0.10708141658638523, 0.017928056812146861, 0.0011601162267517867, -0.043673577511548753, 0.12867110066084922], 
        [-0.051871694661995885, -0.019280829936621956, -0.054682607758164609, 0.0009447920461082629, -0.013017072859738549, -0.012890228722627788, -0.035616894294724373, 0.0014514513795995301, 0.042883217734102162, -0.010520379849197729, 0.007557764016209687, -0.022057597937526343, -0.029115164929706994, 0.0012528790852251032, 0.023269338421732191, -0.067474514241851885, -0.039425127112679564, 0.047182643334052331, 0.018571000663569977, -0.031453248579785112, -0.0042627544710682353, -0.065390808213087154, -0.062309588573350783, -0.00018350956129405474, 0.03407593431333647, 0.020712134681679213, -0.015816412935546649, 0.036106476966187746, -0.0057176038296621896, -0.0078034581275657263, 0.022001767580951286, -0.075063089515289755, -0.056833269479676471, -0.078487811169271574, 0.053314994300153781, 0.08979192045945919, 0.065579735163271619, -0.02013808088107881, -0.069354719259617226, -0.012900359094848712, 0.06749429214896617, 0.0052091689986741314, -0.0050445817378490798, -0.034013340544313847, -0.049220624377965441, 0.036992846717020605, 0.073527164422162408, 0.023626785644426024, -0.12668833039918156, -0.049929820048297914, 0.13709290290146586, -0.043083359856046347, -0.11283440510072536, -0.022957546531399264, -0.016380363567833241, -0.061480443278703056, 0.083722789203042061, 0.026145798642064663, -0.10930012120125338, 0.093485417462155301, 0.21229414611822872, 0.12152486504801896, -0.0085143078714366941, -0.11195109821400444, 0.0087569591283611289, 0.11393373946480671, -0.058279470412456076, -0.0080421662325995125, -0.0037127964633908161, -0.090611461392314269, -0.023750445832424479, -0.0033262359419465592, 0.051599394503568374, 0.11794682063279016, 0.05218760955456582, 0.051040480785423475, 0.13055799836266763, -0.01221412005055704, 0.036431789368042852, 0.036670703720440317, -0.0078012137698507981, -0.080637182319625592, -0.098441747577097227, -0.03508837974768049, -0.032648567450681995, -0.016984796908047974, -0.027536458166992319, 0.06115870091554932, -0.0051669231621845379, 0.054346612146431938, 0.045746752439773088, 0.064739446750120125, 0.049552711275373883, 0.018862295590649777, 0.048983187153556228, 0.062541985576739914, 0.0072514834621828835, -0.023346720324739785, -0.075601926169402353, -0.057354038392425574, -0.017630696493874162, 0.02294588190926191, 0.090873111715422297, 0.0042984842735071613, 0.028246302042173196, 0.0087607006248174284, 0.07435181540431253, 0.035004927442402321, 0.031603063242742584, 0.034524004650933401, -0.076590160387399964, -0.017921124400819347, 0.0062988574109997869, -0.013815145103657209, 0.080616454932859072, 0.019781761084500894, 0.075647735229095237, 0.043189525185656379, 0.074149096904190248, 0.04770033275626058, 0.080840156186910761], 
        [0.026722003554860107, 0.011659299846958612, -0.030401027328402285, -0.078933516409380317, -0.025083013651028968, -0.051258138411005405, -0.063738133597399105, -0.045360978905662902, -0.0072454540129453099, -0.0016165196721033143, -0.089855064600654358, 0.0097207854833627934, 0.032566632530092121, -0.063546487797010456, 0.0040586505412308974, -0.011780242044409216, 0.046622082528177268, -0.0061913239369574095, -0.00040805875755831446, -0.038285077303976116, -0.045803388237714085, 0.00013567048096911616, 0.071841011636230273, -0.0035184890415564662, -0.054904449860221666, 0.02924191756204008, -0.01689557308935365, -0.018744528704994677, 0.075716926828176739, 0.019648278025953467, -0.043885654656954369, -0.018293295448074808, 0.029236899127084933, 0.079480753652723696, -0.10678554242785285, -0.13518893526708742, -0.0021617736445511959, 0.057839422567807532, 0.046852963852851211, 0.010613998677874176, 0.039439684131787889, -0.09285753056846846, -0.05413777579109947, 0.041015207873276241, 0.06345089058106948, 0.047469937132271711, -0.11150623495169829, 0.024332828493630963, 0.10456565053537453, 0.11492526729638461, 0.064349122666039232, 0.024960207207532441, -0.12312652337245503, -0.0357276852240003, 0.056357845948048858, 0.035122396434681416, 0.040853396388258245, 0.0048171237774400641, -0.018877573782764997, 0.063834223394559408, 0.099594433304481159, 0.10457424633849259, -0.0059323860818025122, 0.051540993351738555, 0.043792467918237224, 0.06682182319421423, -0.022981366626334779, 0.012623816899516915, -0.027434183623551101, -0.037320166273082822, -0.040760599767723449, 0.0054311112775042138, 0.077856612886341992, 0.061025832668360973, 0.06291439314075388, 0.039278945628749652, 0.051551436211894681, 0.068228206982137857, 0.053793243256798989, 0.033116294799969533, -0.087230566689965136, -0.062413283562578893, -0.082179387336970056, -0.049408458616677628, -0.051359759856891118, 0.01704176534606279, 0.0083052629894674324, 0.057973181889856361, 0.049273067989623984, 0.050549115680086437, 0.054189519887507934, 0.076357459282641149, -0.020159764614916531, -0.01496772437088123, -0.008318755358141354, 0.032399494222174856, 0.029724547489281376, 0.081167503706311317, 0.0010766805091777659, 0.003132081148303891, 0.039599122177480288, 0.032665101862452292, -0.0076123889523127567, 0.01439000505445691, -0.024144476806805197, 0.015900895762450868, 0.036463449654478043, 0.0059983182179931529, 0.0073771085938482096, 0.068757588979111023, 0.0018450028156024381, 0.058983317021274982, 0.061022660493410763, 0.019189271609420328, 0.052228673471552065, 0.022903569800211365, 0.0093545739337794684, -0.022264194312743783, 0.028742917273488648, 0.031821039680558945, 0.031024768487282525], 
        [-0.024931914403123902, 0.0067371102591031948, -0.007391490442242972, 0.017496948430487498, 0.023422622609065046, -0.0094928852122032684, -0.021940305477306223, 0.00025349416488679166, -0.041633427271842161, -0.046280330971315689, -0.06778901544234435, -0.024673968258041953, -0.029907852335896074, -0.0063449215025076638, 0.038828302806607679, 0.06846252343470445, 0.027205296230138769, 0.034295058790694666, 0.020017420759176036, -0.044147644646415102, -0.059872005422267019, -0.051482095492071264, 0.011124069340270715, 0.016763058258717323, 0.050886840442624481, 0.02549815480352427, -0.0939546655207978, -0.092391189277661337, -0.032479032153627907, 0.034462594953754824, 0.059969474942545953, 0.025584824798319902, -0.054353591667338476, -0.021502238752819661, 0.051546501452992721, -0.034007866675401628, -0.10294183533637649, -0.068214384945964324, -0.036091128635311429, -0.035862209668492087, -0.066950369902671863, -0.0788669358196743, 0.01348990123782938, -0.0092991627936537726, 0.051242254594595721, 0.063155120324530495, -0.057574046015223528, 0.018890388699001628, -0.042698436177047515, 0.0063897190194895787, 0.035993788676757676, 0.10789490348622735, -0.068180236257618904, -0.075881929824815911, -0.019747504672663209, 0.10735747383087241, -0.03869822606166641, -0.15857079396383206, 0.077711698878954072, 0.0027821735741544867, 0.033503358473603001, 0.044529328438383697, 0.11469939192954226, 0.03762916616171235, -0.11802211992760672, 0.089816131200894628, 0.14094896752231051, -0.021944857285476876, -0.18628488220757861, 0.05722715554404334, 0.17885030648332761, 0.12350597080986565, 0.03287297640709165, 0.13094265605576585, -0.079054276690131695, -0.098874284973658105, 0.07103695210415123, 0.024172138802402793, 0.044359819339575904, -0.051012505698565642, -0.039065923553229673, 0.10490932756038186, 0.12042204998724948, 0.16359720010359963, -0.0083141685472531146, -0.029805224335517175, -0.023079186944148275, 0.059849592266809526, -0.035424217542300893, -0.025330293256378603, -0.034242830366423213, -0.063441839555084145, -0.046964192520516257, 0.00071815932595863455, 0.022784193984670673, 0.0091085690333239377, 0.017544256490621302, 0.028537852311277645, 0.080903467002397131, 0.062288009683574119, 0.048189715163459962, 0.021557195959710354, -0.022313472699576162, -0.091203959029137333, -0.048678117782736216, -0.018880976433473903, 0.02319770864597645, 0.011883122070171566, 0.040745024174235034, 0.055217772192963144, 0.0752915524448943, 0.12950685960404881, 0.034066733228072771, 0.055263332392194921, 0.00092956340022609663, 0.0025829434849187483, -0.012623470754591415, 0.045045466234092293, 0.035721398778730123, 0.073251215610966064, 0.094939799788321122], 
        [-0.054693996761883468, -0.036142257709420977, 0.012139987915473143, -0.015154402745934992, 0.0068463302216838166, -0.0093136851521987245, -0.048684400948289616, -0.049430372046362539, -0.041064971222999513, -0.077253849675155653, -0.052659701580420708, 0.02644006417674272, -0.035825803881623458, 0.00018949187702807166, 0.020886062450068934, -0.00065949460591928355, 0.022071058438621102, 0.0040313708607001772, -0.035333022236136671, -0.028226767346863704, -0.01809822098267436, -0.020234382561405761, 0.015320984616764413, -0.0014404272920333708, 0.011179661842263149, 0.011479905349418697, 0.050415046288148357, 0.011825597601556187, -0.0058861573381156773, -0.010693467291456787, -0.052711803776757507, -0.039587295536248207, -0.015153382931397254, 0.021776177677289621, 0.018485275683894062, 0.017270703576438604, 0.025545107202705496, 0.003552691996951074, -0.0072077192628247633, -0.016927777585758572, 0.01010327735896166, -0.011396759513419105, -0.054135995207295812, -0.008775918099563268, 0.045428799230222999, 0.026078742599032825, 0.018401462157094414, -0.010304766106153093, 0.031175273783970961, -0.022964877769659248, 0.0073488459201091344, -0.033664533213207795, 0.0040173488287653797, 0.00073105699963767201, 0.00092920767763406131, 0.038455564657623509, 0.051027184464204699, 0.032163653730152494, 0.003091909476963195, -0.01805086224294028, -0.037580600034212458, -0.042983404923079879, -0.032973836490514191, 0.0034357039654534238, -0.0029191330430502482, 0.049102114568624511, 0.045968351963145374, 0.037533034565610877, 0.053551748804077495, 0.0025191362420830836, -0.04750855266321341, -0.072788896259128044, -0.064427335224849849, -0.041220523667029399, -0.026780660598796205, 0.045893029004908492, 0.043426979158010505, 0.063353229422186602, 0.057675805158847071, 0.04031026644948954, 0.041067495849464855, -0.051029374332638877, -0.081222848002171583, -0.10623271352478328, -0.040384319505111455, 0.012698889514418027, 0.027850330309453372, 0.073422603729637589, 0.013872383376783981, 0.086837219868510659, 0.078231498196284319, 0.025402065662503196, -0.0085959304722693069, -0.1009426660553958, -0.079770896634910687, -0.089307575006007389, 0.015197805521062258, 0.061289339594082198, 0.065948610641877861, 0.041035546434975201, 0.059557826909646928, 0.080006232863982965, 0.074882607029051015, -0.014113346378857847, -0.032420747653342651, -0.11384852443855065, -0.10291516846863054, -0.012980508793377513, 0.052220406103339362, 0.12082717968395887, 0.10605397357987933, 0.086255183281375047, 0.08321354397182873, 0.048514817007833, 0.044243911058542376, -0.042578630343806573, -0.10029735035508303, -0.10409726347948557, -0.086307810468093438, 0.033369049739091161, 0.16060915775050888], 
        [0.12273861405978125, 0.042814508752045621, 0.018061966478661248, 0.0053062383942378208, 0.035823523447581954, 0.010649293754868217, 0.016551078536122706, 0.01489993969426269, 0.067444152505856128, 0.0014205983259976962, 0.017061484842956845, 0.10625529836546962, 0.035660360418095283, 0.002751078412191129, -0.012307530679996168, -0.013785633291103078, -0.05132782373436337, -0.086000385495835899, 0.051802568141879196, 0.03904805873472704, 0.047853825999159286, -0.026265747542033639, 0.030741255453331229, 0.039406757558914624, -0.0082191970520293089, 0.0099449690730434304, -0.011588775094071746, -0.069863331862633757, -0.071219401021746773, 0.026730481405145667, 0.064361266677040244, 0.049962478130168061, -0.024025875808116548, 0.063809323364770701, -0.014373658398046024, 0.023604867877091828, -0.042856616912313392, -0.030014181333617398, -0.098897121704490082, -0.04373899159435149, 0.034309424166718241, 0.071347736418952548, 0.03761434445919945, -0.00082170423945062548, 0.020111151000193242, -0.0023310749229815061, -0.015928238873940369, -0.024231713696889132, -0.1221269192682253, -0.077411569100787531, 0.0032849717401806887, -0.010022001408555678, 0.084366733947847855, 0.068284080213949994, 0.027109602968543318, -0.034520822432145569, 0.0059705622321129803, -0.054405452170679082, -0.058782564084633948, -0.10071244219183988, 0.0067297619046283036, 0.052325883194804468, 0.021602083823943383, 0.033365772587175026, 0.060449981481694115, 0.028671597117484994, -0.069275563884935831, -0.046529106869698536, -0.071031022601829363, -0.068871541073595624, 0.046653811370795717, 0.13893639005159752, 0.088206715220373294, 0.0091340091832131931, 0.033848018094446569, 0.047381238825923169, 0.043417512003515984, -0.099682793139969056, -0.072929356853561139, -0.076420909130552717, 0.030782008777859689, 0.14194448580394009, 0.1054078132040758, 0.050343613237156831, 0.042627816282501868, 0.0019869408179327142, 0.002912892694045377, 0.033417927689340168, -0.10626474257229218, -0.089797364954523645, -0.012630641916284824, 0.10656465605540676, 0.081787444241139498, 0.015706150749096585, -0.0081474894960576333, 0.017962048380179174, -0.0076820753247799078, -0.018533162764163613, -0.025747232327919242, -0.06863640651652167, -0.016416507375672674, 0.05202743487028412, 0.08441518809008719, -0.031665719212890506, -0.081384934590939706, -0.042068123788522205, 0.00053001779352805818, -0.034027551289153801, -0.036058497578668941, -0.094126599607925632, -0.028723845930421731, 0.036956160575588454, 0.11399236758087031, 0.047784293848876058, -0.084617974292537104, -0.1041988894674926, -0.096930663266632036, -0.038842231479212945, -0.019078175570027882, -0.045970102698338858, -0.1043619020843051], 
        [0.065757941109192197, 0.074777897508991442, 0.018292785286432484, 0.028173020338814948, -0.0089483449436603552, -0.052545580386797019, -0.1087949901255694, -0.039787230769942346, 0.0030209786294805308, 0.043861504558306494, 0.020559045374589795, 0.04470571436425777, 0.012784570202518724, 0.016258299543353186, -0.038126906658306502, -0.037497943202709987, -0.1176914965804748, -0.048822632662462465, 0.039098390799118754, 0.067055649329849032, 0.075500071483937753, 0.076145526827718329, -0.04103203468659232, 0.015971731655258753, -0.037660696603424096, -0.03882889344260633, -0.10585017234815822, -0.049772329981684821, 0.0044956232113971175, 0.11402219053620558, 0.090970410758093978, 0.082806478184774074, 0.059837386632622405, -0.013124940068416517, -0.029059840714413719, -0.0085931859468618976, -0.055642225665546378, -0.08586524174843943, -0.010731942001337424, 0.12910594217065441, 0.033630584320905196, 0.034969345305899749, 0.022613172456202865, 0.023083805067396955, -0.026126622747118175, -0.036555728898516215, -0.03454946027988387, -0.009697212267244612, -0.039485260868956623, 0.044563725924654886, 0.10334272388553382, -0.022990981360463417, -0.068461711924414873, -0.026650640178318748, -0.04235340979767379, -0.063143412724810472, -0.038670479860085677, -0.032190500890796184, 0.0024621208503444285, 0.033854260568938976, 0.10018347106209433, 0.039049779541599661, -0.14322204153577417, -0.06792156608979899, -0.083174058543035695, -0.086985543398739873, -0.049996676858093628, -0.069642162140837696, -0.017580665091978198, 0.045666600981940773, 0.064474542322985828, 0.066381323532462677, 0.049759120323402989, -0.16687707277418293, -0.10148113813854155, -0.045651850601446282, -0.025088926732828348, -0.046920284310850276, -0.063091363282112678, 0.0092456865886239858, 0.038333207077261205, 0.061578125540969059, 0.056229950013552389, 0.077372534333749188, 0.043186131128634953, -0.038313312025859518, 0.011391766806405483, 0.029085717674323781, -0.087357953773625374, -0.045745395595645708, 0.035034140501439034, 0.038753107277930694, 0.01028453604755696, -0.017745509526202401, 0.011578683352821917, 0.10678493475168932, 0.12920759729821871, 0.062105404373375861, 0.031614742242985883, -0.03599156339869132, -0.03580586208307926, 0.032429174955818194, 0.013349521240161158, -0.00025561537496165965, -0.0075836537904609078, -0.057809872184653305, -0.02737962405414552, 0.077504449878040088, 0.13303768141468877, 0.070151605162437541, -0.018705354807535012, -0.015887137408581595, -0.012405772738829302, -0.036314766817913874, -0.057460340751641914, -0.034056167300506576, -0.07157545200554731, -0.068299510308264991, 0.0017292217190058162, 0.06083852156997098, 0.15051364383348281], 
        [-0.120254202400746, -0.096169017184156325, -0.017372420837296856, 0.11248443570944938, 0.14311280665471804, 0.082528015127987145, 0.040999748265665256, -0.0022276752168216667, 0.010467790781802488, 0.023760234093264703, -0.028258264318314828, -0.084469173229205441, -0.06310610366941509, 0.034557979503718569, 0.080540040228858856, 0.030927414852254288, -0.055931722549191307, -0.02359479370263956, -0.021307923642893911, -0.06310798271161458, -0.073253467634114292, -0.058338840997439398, -0.045165611251598459, 0.026985236670137049, 0.084702435833259607, 0.041280837981018503, -0.12024366873436408, -0.10042897365913865, -0.049765123602586149, -0.027095288662972609, -0.010458303155168436, -0.089462141062869843, -0.1289437118045591, -0.010213525065954888, 0.053979540894161043, 0.069468772869540479, 0.12952759376479325, -0.14182340494484172, -0.14285062277610125, -0.0528606979553762, 0.063969476799177832, 0.053939270199952309, -0.022029152784641744, -0.10818698528187731, 0.016491832436736686, 0.038639318505357401, 0.024020989335001519, 0.065592897425442109, 0.16112502640598336, 0.023615052509284043, 0.043352450132583868, 0.0076979018918599679, 0.043112121029937528, 0.00071987756274229098, -0.045960857982681895, -0.0069127442592640644, -0.0077204882201102748, -0.031891871843114539, -0.017036960892809219, 0.035037325548395559, 0.16303059281511678, 0.17418427554606328, 0.057001247041575748, 0.022916289242805976, -0.010513114683071652, -0.052886209418476507, -0.0043129908452952349, -0.0018884698638378054, -0.044790060375371074, -0.032320374513797531, -0.048960971185410075, -0.0094052564622430085, 0.052253286388732362, 0.14016474879016858, 0.04065676611467136, 0.024408426423858556, 0.029985555367538438, -0.033973239042800897, -0.017546572766816648, -0.037345271053038906, -0.061375928930807219, -0.03937344145819692, -0.054467136784434225, 0.037876693223627467, 0.09858135152652249, 0.08915095169603543, 0.012958414651170758, 0.027624783264719604, -0.0058828017121677761, -0.057086791129319164, 0.00032844804874246347, -0.037840469280978235, -0.033695751439804925, 0.025912743632823754, -0.017024947537232993, 0.06774754790560647, 0.064529829344964221, 0.059856281606444586, -0.0040794712071662576, -0.064492010817941703, -0.022926783895192725, -0.068256941312238154, -0.038787091103630163, 0.015688747762662825, 5.5171662105987784e-05, 0.032388446527829046, 0.053502152462023958, 0.062621310565998928, 0.011267099083652837, -0.039490456581147762, -0.094319475634422542, -0.047548409339035126, -0.0091541278282420042, -0.048201431835308582, -0.012240843418624294, 0.0012540759296775089, 0.016595878790118618, 0.020434407588746067, 0.036700109021096272, -0.0026055496863919281, -0.039180334358498638], 
        [-0.039044382493438445, -0.014031835439091891, -0.01717497943397446, -0.041781540002782738, -0.059373536092440463, -0.0085344327706754902, -0.016300069172747539, -0.037294900567202499, -0.017549755907846534, -0.078447962882527866, -0.02004008529828297, -0.056768697829428338, -0.059967040212345959, -0.049253129103857415, -0.069471541008027285, -0.071902666850531496, -0.044718491551717546, -0.03636510105928939, -0.0034411563298461321, -0.046411031373760819, -0.028589990691112652, -0.083768492808513548, 0.095116180742419232, 0.062452246419035309, -0.024833981241255007, -0.097858575559795102, -0.1127986872143521, -0.088067854572432464, -0.08883593725007502, -0.068545154777893094, 0.0011510544062942052, 0.068272249927958051, 0.080893673619898535, 0.1353343839303309, 0.18057622473716234, 0.089392921016127391, -0.03771266910646548, -0.18004516845335108, -0.16759680953524253, -0.11135480418062912, -0.046002363039963315, 0.067488034958263582, 0.16040808091097752, 0.16020908007929302, 0.032242746883539272, 0.072926540225657518, 0.1267341164708839, 0.076774965852314164, -0.027586193949245066, -0.060585053483984741, -0.065958103899050796, 0.04618881719914493, 0.06405321366734254, 0.066545184375501457, 0.04695382149034999, 0.0044609113824994155, 0.0091618342219318277, 0.041960317974973543, 0.090848513403254741, 0.099018853508946403, 0.090333756224992956, 0.067825639738709226, 0.012714203390510964, -0.0052083322470473023, 0.011531736842481339, 0.046913351524415829, -0.0026789314124194552, 0.028085116456833342, 0.027040588615283353, 0.015104267552866583, 0.059852806875527353, 0.032101419463347713, 0.025279126213945874, -0.045499782999878127, -0.0092654514634481905, 0.032695973667332234, 0.0058023061141843219, -0.0018139112732011575, -0.0029108731958343292, 0.010427305260203787, -9.6032476966920188e-05, 0.021288607450265881, 0.041079801640464084, 0.016357363013747531, -0.032396279409626833, -0.0096468473033134161, -0.015146538620363123, 0.013412806275636471, -0.0013427741295518741, 0.038224090646334606, -0.01337749153937268, 0.026455615442210673, 0.022399735833748824, 0.0083203718092760871, 0.0021986789243084309, -0.014293946476503921, -0.011197610424383816, -0.025764602165002509, -0.0044402614564183623, 0.026453211631295465, -0.016392272773541029, -0.011847008501585585, -0.030834902384847707, 0.0092711300250400749, 0.0079231656727102029, 0.015033519474474451, -0.027785535484879158, -0.03370942439196669, -0.015542452577597912, 0.00048635059573182279, -0.026694531555004813, -0.012724799179976064, -0.013286763364002738, -0.042306321931516747, -0.033424166864698804, 0.0087293255484813519, -0.030242759324034616, -0.013050994461220922, -0.037603985335936958, -0.048537758115318075, -0.061784216202301949], 
        [-0.064895613231398419, -0.020224286971327814, 0.015905264409012548, 0.013551842188797097, 0.082225664059696169, 0.052591399404863487, 0.042257887471961172, 0.07064771573560033, -0.0011991945255137408, -0.034366640312061339, -0.072360555553281497, -0.056223603404509992, -0.046254629023798989, -0.030584855242000546, -0.034996133864494572, -0.043017778242875414, -0.074116618465999901, -0.058193036991492836, 0.099174902047441449, 0.085979159623767315, 0.0260790473140005, -0.090335795957093609, -0.10362582311773169, -0.05683029227387211, -0.032955228570346592, -0.035953196903694445, -0.083669598501602105, -0.14307384019801234, -0.17021343406030898, 0.056559505125885055, 0.1353903981543188, 0.11264594916548558, 0.011673755450064008, -0.065805649175016551, -0.015916968368203999, 0.049371535828759125, 0.032602131500708426, -0.023482372439204213, -0.14884937691675146, -0.14122378994790352, 0.038947574553526224, 0.090754777377725832, 0.11462434476555877, 0.049232968649695563, -0.020681162710889808, 0.0059189166530157098, 0.048035670932309434, 0.048756668898357711, 0.015029939401784822, -0.0045822873172906703, 0.044145082900123096, 0.050071852397185944, 0.0094509750493274383, 0.024378668316836539, 0.052749214069398115, 0.0064390139543627628, -0.0002811989012708239, -0.0064546940403005376, 0.067241804853012926, 0.14641906683964209, 0.12089002549596747, 0.045524123195999813, -0.027903819777222599, -0.020728023595215268, 0.011972589684504081, 0.023139835261794185, 0.062288213971794335, 0.0030852567167743063, -0.010563156113489056, 0.054746231145096608, 0.10798773024900726, 0.014816168604569607, -0.067729122880713061, -0.069428819952578644, -0.039672679449664974, 0.0072944844869031189, 0.031665801169246242, 0.077903468071470375, 0.03314357843621181, -0.011090195620338333, 0.025953154918250638, 0.040728866157606014, 0.015524058836610692, -0.021280018049330086, -0.074601124345350517, -0.032634705813619005, -0.040767214304249212, 0.029068927489674708, 0.050403637093174664, 0.016601304925128416, 0.0082563132518792444, 0.040076199043347638, 0.031009017378264954, 0.02125830223035903, -0.0026364504616102971, -0.025393115408776517, -0.040100437968749382, -0.05110548671081025, -0.067993377103616609, -0.00046432557130123052, -0.0039876483166379033, 0.022729109377199703, 0.039555964359429222, 0.053830169668727355, -0.0014414045704570968, 0.037267802189446919, -0.022231980521954575, -0.034050491080049324, -0.073951655494023091, -0.043557983601915228, 0.0063278734791331892, -0.079884297677682306, -0.05179614099105008, -0.012967977410458104, 0.016769677941412969, 0.03933948218335899, -0.014906721458355397, -0.021082645685981671, 0.00037445636334414081, -0.082723281977227794, -0.1030737258893234], 
        [-0.037002829518880356, -0.051800501938286336, -0.060853004537176597, -0.0094150409945243096, -0.034328030870577425, 0.0033825861478738173, 0.012446709688320332, 0.028263939384084974, 0.051241250294029178, 0.029467212390683409, 0.094296073781751158, 0.017996331462246259, 0.074494909584215466, 0.018562434067668762, 0.0011775208660011255, -0.03343642198912352, -0.035845758685869263, -0.02469974718432548, -0.024948855129499292, -0.024856433920733188, 0.022654621557346655, 0.013969959583284512, -0.015621110631660393, 0.08434398198734791, 0.12526052771855398, 0.058408231821464381, 0.045127451768280695, -0.043164240869397401, -0.1023993834271598, -0.096781070009609851, 0.0053916393051223234, -0.033844402314595262, -0.012657848528438927, 0.0013785476814248063, 0.011572904307556139, 0.068403154355265131, 0.052980959912984543, 0.1266701829984114, 0.035045725726125722, -0.068960202229844197, -0.060072231451733973, -0.062720555693278807, -0.030009692601680373, -0.0092089352686221815, -0.053346169244103861, -0.051521839481652648, -0.019671024276837101, -0.055873607630573113, 0.041978873563040947, 0.1638861354064878, 0.00106361294464159, -0.053910040513112212, -0.068153591022086388, -0.055292950731728449, -0.039462171388406658, -0.095725937501121905, -0.092290911359049418, -0.11338803995859958, -0.13838339127374222, -0.0357462740536892, 0.22606772554633187, 0.12813795776647591, -0.0024481614307838503, -0.033611168519571522, -0.051839059280132632, -0.084236132619828999, -0.029032249699063171, -0.058898794655031249, -0.11075161830580202, -0.15312117095255712, -0.020724783620647211, 0.16842588938808492, 0.12743855198340154, 0.080331925597410064, 0.021566448195444857, -0.082352620029737575, -0.069017983250065099, 0.049857379267076132, 0.040106054682231364, -0.055333820775483558, -0.042096211664252689, 0.066708704425261028, 0.042419812012600137, 0.069011669576221873, 0.079983677018715033, 0.034371804092794715, -0.017332099818488572, -0.083009418854646341, 0.042453939466233076, 0.051060642403565164, 0.07316878819733981, 0.10110928490296386, 0.015416346633545026, -0.074121651760900326, 0.037506205371324909, 0.056372316384434969, 0.069802712453019444, 0.022830083664882234, -0.088476191224756862, 0.056380990619929745, 0.11796759975891001, 0.085159502068178794, 0.0057506785680517813, -0.052150252418282778, 0.00071341189171907071, -0.033052078906102914, 0.042466154564593551, 0.066152570678099751, 0.041058972780051016, -0.07491213514221709, 0.059832650863602857, 0.050036282518436601, 0.073439101106600166, -0.035055451687694333, -0.043213965757215783, -0.028433835254721582, -0.049722879871748019, -0.042468775260800257, 0.0058211813366477044, 0.0033813738235871967, -0.064579878516043021], 
        [-0.05204926560099437, -0.057237880289236279, -0.0083905804002989276, 0.0062458102695772955, 0.035746619926900439, 0.078399463599589062, 0.078852151476007562, 0.065079376584073825, 0.051674438501644049, 0.056599491625845932, 0.1112401778738227, -0.049451770190799972, -0.03311327028822704, -0.04470398589450323, -0.0069392182793978074, -0.023794576977256759, 0.010055161607694707, 0.051861925861248687, 0.032051221900923126, 0.0034551032431236958, 0.060342507325651218, 0.071820561865178004, -0.011974167972497493, -0.026068365839870898, -0.020182681121343846, -0.013949638537375686, -0.050699316492772886, -0.020355931447011116, 0.029014508674471667, 0.044992661189607805, 0.04170522023063189, 0.033987569666887124, 0.042094071544786019, -0.031292621485756067, 0.022301326642790088, -0.01743554965010255, 0.0086405189226159418, -0.033429116543261993, -0.059143520853118206, 0.0055852565804648813, 0.0041508387138344781, 0.049460528858195588, 0.050859527708305804, 0.079934023736357787, 0.0095959128701056558, 0.025688470585585318, 0.0055600019316925584, 0.013382028934657897, -0.058013808148885737, -0.089499818472389137, -0.071592085149893764, -0.019107360505553072, -0.0082744851179119318, 0.032585012634967978, 0.046701290308840598, -0.0096067810012472332, -0.020512636464317932, -0.0038438246468142923, 0.014613700602723453, 0.068186284724516349, -0.01830963397214188, -0.11322752216975147, -0.09640633091246717, -0.052403236939622524, 0.027222341781097337, 0.030317752268627929, 0.019657001659076179, -0.0096600042345343605, -0.018626726339795667, 0.0081908090585838672, 0.12179883942046363, 0.1508103124239786, 0.075806639792132646, -0.062761170942153277, -0.10013344453499878, -0.068245483773719195, -0.022265844067301123, 0.00065583914591630342, -0.015208724489903314, 0.018866572887032564, 0.0052684885324918579, 0.065684028931326841, 0.10986728461260108, 0.14928723727825088, 0.059434744289182703, -0.060185571636217253, -0.089354598820007264, -0.066216926969791326, -0.023535680546190665, -0.054962379947465514, -0.059013306627190822, 0.019989607048620271, 0.0054003206627150548, 0.032462771758462849, 0.045866640394699523, 0.10505871662329165, 0.055755510306947052, -0.059889616340963951, -0.092315810433916068, -0.071619045947736437, -0.075031199722232336, -0.062253911446631852, -0.04694709230045966, -0.048116321043479529, -0.036582441951753884, -0.061107036339067312, 0.036504990974571036, 0.10110597080448579, 0.051177845114249831, -0.044432074886152584, -0.10159227266715132, -0.077158568747903805, -0.030393198761254205, -0.050071313080747346, -0.074595676179791612, -0.073458542100526297, -0.078358062777158496, -0.030278657221277715, 0.084453877904946462, 0.12337283504154144, 0.062469168412561921], 
        [0.11115260218147537, 0.051560842999883991, -0.019027323692840041, -0.053735438913629183, -0.0071101075931705657, -0.060331674975749636, -0.01273389146899935, -0.083913899585844304, -0.0068742819184818144, 0.036449537875718169, 0.057484281155208095, 0.1019949723289555, 0.082976543297385519, 0.018623799266703829, -0.020037210469670844, -0.058991687133825438, -0.0043094092108171798, -0.061801131907737672, -0.032137171525331368, -0.019997943427430342, 0.029477714358382982, 0.09332163289552993, 0.070136049723979091, 0.057019933758274077, 0.053899973004219538, -0.0026387634530392612, -0.0087944700091126295, -0.044886516736232299, -0.03176715948743207, -0.042173672069529447, -0.032508457873831956, 0.034115235511423689, 0.093105995907237046, 0.018636796052156644, 0.046735806088687395, 0.021858174501294951, 0.027569212512874617, -0.0019748228182896871, -0.020011467438642447, -0.038263327232506431, -0.041760709971461987, -0.030814576931739321, 0.028817248098680567, 0.07178725501146116, -0.009708063399979483, 0.040408045290464156, 0.047902942272710962, 0.049152309684650786, 0.016182293978584075, -0.017238522908897977, -0.040468598163172567, -0.045702820531370383, -0.016281604371356659, 0.0034546404119755736, 0.034807390777535141, -0.018385622040759317, 0.01969433114929478, 0.067998668027008519, 0.064831298138631047, -0.014464528171849848, 0.011124972290677312, -0.0612303154617381, -0.076620988117942754, -0.023624167810504887, -0.0028778143977437054, 0.037589255674998712, -0.069263304031074682, 0.0031359656960172622, 0.057377595091023581, 0.052691820606641286, 0.017399699182203937, -0.018570302353960122, -0.046213889206180463, -0.066632711107939349, 0.004937253121457652, -0.0038828611488524456, 0.025713646541403734, -0.083379308461335996, 0.0056691392712922076, 0.11608252277008832, 0.073533161219590859, 0.03822657644961075, -0.077118650194350102, -0.055463194241750072, -0.04304259780973764, -0.019189005860534236, 0.017297615166657204, -0.023170677964515524, -0.097271316382778222, 0.026385141514079502, 0.084668815279573317, 0.092504840629287294, 0.016711157910872847, -0.044362782624102759, -0.0454511239473053, -0.049550862988714514, 0.013625451869519002, 0.020561667154105095, -0.030006622146731568, -0.063980647406975705, 0.075872467722288658, 0.053120016709717416, 0.065923774906762364, 0.031465876517252786, -0.012255926181853973, -0.031398789946512198, -0.01876926970569838, -0.040221379151225214, -0.0015619003771453512, -0.0069604389489614123, 0.060783419102048972, 0.075568709103222456, 0.05225568745879651, 0.078139550494287488, 0.038095011814273147, 0.052434561149658568, 0.048883832083824116, -0.055025867820072974, -0.045282107044195954, -0.041013497771644633, 0.099043866859741717], 
        [-0.11203549175295996, -0.039741638112244869, 0.011060178958798239, 0.068771522760862389, 0.091947029926868651, 0.063013461864849213, 0.053208457143949908, 0.020539339513306422, 0.038057193997243076, 0.038787465988623426, 0.028121764350374646, -0.044919650035753551, -0.028946060113256775, 0.038249964049902802, 0.064448692316739498, 0.074566886448479031, 0.056117982339109772, 0.057712083798571012, -0.019732262989866904, 0.012262999619765316, 0.0040347651881646211, 0.043113689501805767, 0.0036261933857882275, 0.040928710043322158, 0.053219648605966417, 0.046769367826384994, -0.017166264963499114, 0.0054891268723304132, -0.020480699308758406, -0.022929172836275616, -0.019377222102737297, -0.050393274670934379, -0.028341154356359134, 0.044368745080340603, 0.034906291107670129, -0.011071953214126184, -0.065544146068916828, -0.057326320735171105, -0.098654044879250974, -0.021150583208668992, -0.038971057948257913, -0.051954652796451138, -0.065697052369735887, -0.076668618468381175, 0.057536826222298318, 0.0059026131536024304, -0.046203872539273341, -0.082611420120622253, -0.084852191816498154, -0.079141430325910062, -0.097004168435828902, -0.076062125522098539, -0.06316389153647553, -0.083320929461625837, -0.057460537409920194, 0.02780118613240987, -0.018767946276596975, -0.029691882937965902, -0.014540521259465585, 0.08390634737694766, 0.20739444418621977, 0.046700493845665721, -0.060571735762272969, -0.1303813417107452, -0.13805261674986721, -0.12358535758970328, 0.0074710539580880447, -0.022238309187360118, -0.0067832182121356881, 0.00050856838356390724, 0.12335224504872636, 0.15023440850791586, 0.24255876784390559, 0.13265122710423893, -0.036349215955504527, -0.096342261434848489, -0.12379973942082877, -0.005922294079732774, 0.0092528719228638871, -0.0086414366404968038, 0.014911679170252864, -0.0069709626853085849, 0.062192115575895698, 0.048857235728622855, 0.099736221902574501, 0.10382748525934579, -0.0017267232813016238, -0.03337998864511238, -0.041015759215952706, 0.028074948889879575, -0.024175373112944334, 0.00037851506203986224, 0.028290086601225291, -0.017177690879414606, 0.012211197073898714, 0.021090624041023867, 0.04880110436342628, 0.058893006766919061, 0.041186307677804096, -0.050228037757938743, -0.06358869101157405, -0.01627885622405395, -0.0047556909859505087, 0.019166267525767756, -0.0042859855426942489, 0.072221293664227526, 0.027667668809319687, 0.0076072348731966626, 0.046251642681222054, 0.045327516936598013, -0.058087271467788915, -0.052568654253287897, -0.044762413503640928, -0.023155518065321151, -0.00017763235014638958, 0.052359997711985393, 0.017613369441475152, 0.026754240173532909, -0.0071592410268532612, 0.021450091526662492, 0.026061341438602878], 
        [0.074443033622211968, 0.025009703449449541, -0.0072387396885091188, -0.034581203239581096, 0.0075069226962646007, 0.05053220778206742, 0.097728950382035856, 0.10515405254550375, -0.0020885631160830892, -0.06460650708474773, -0.071900877008339387, 0.062709555161575961, 0.04810964818959447, -0.0061288197958455914, -0.048707571007934714, -0.028878035144916103, 0.049283029611296138, 0.10301464073332151, 0.091885368660922062, 0.1083066909121139, -0.0069201860463068421, -0.0710800467482154, -0.032385403501740219, -0.041456597157549895, -0.037318284584525352, -0.037271263481650524, -0.04033581670492567, -0.030542208455988901, 0.027846343886639854, 0.051125764403077464, 0.039457863125580993, 0.061533816212355034, -0.0088597136956959643, -0.058002594376894451, -0.036151038770433672, -0.039853560057399352, -0.048559742972093256, -0.05876298366017621, -0.083101870117629206, -0.091875530060523458, -0.077266837651363607, 0.00086206636286371985, 0.064567560492729381, 0.05176416503907634, -0.08735727608117326, -0.053385067235642, -0.019429217609104946, -0.023415415744384521, -0.085630336992695857, -0.12611138326972099, -0.086691614144378967, -0.12449403321207964, -0.05512595439100107, 0.030267444104458113, 0.083602405077763398, -0.12583781900425739, -0.091278147423601561, -0.073530346048646777, -0.085045520153049808, 0.011889706660064834, 0.13738456218349074, 0.12691757918372121, -0.020511658061573332, -0.083331527006269501, -0.045688290860109199, 0.094721631783419011, -0.1176819000585845, -0.11560656474484407, -0.060549525031994025, 0.081984888033411141, 0.1704420734813879, 0.11965727243025565, 0.11254484229099559, 0.074741052413934445, -0.025737622919062741, -0.033587219072488843, 0.03411352154081515, 0.051552692766032665, -0.020222946025836006, 0.045690451059582811, 0.056071133353337008, 0.020997592772981258, 0.044561510792265002, 0.02939148849213119, 0.026725272806523891, 0.013325176508616088, -0.019772518292927338, 0.0027475572519997937, 0.12423204721233166, 0.045549710745386038, 0.018947387510806379, 0.0057239875049261008, -0.0058699208305394712, 0.0050369550657840267, 0.043724054901299908, 0.019509400602205587, -0.0018887858002489578, -0.0096177381092612257, -0.013199600334816992, 0.10143636127977371, 0.08518214265041664, -0.013319980029247946, 0.0029189074659387582, 0.010087593201327683, 0.009493285904375974, 0.017930356539244602, 0.031406637685000433, 0.011733720402003947, -0.050901070261947852, -0.015735781911257421, 0.029231279797781562, 0.048511610011102664, 0.013899380735429394, -0.031157761675669398, -0.040662087603105253, -0.0083011423756094577, 0.043045372058056516, -0.01096803936953996, -0.0012438578375955772, -0.022626520337825511, -0.11765611182461798], 
        [-0.039873480685186327, 0.00012184835774546317, 0.018432499523696314, -0.06030489971984803, 0.014643208225874137, 0.012981315846513394, -0.0070294048340999865, -0.055624566982403527, -0.011913096749220649, 0.0084124976996370008, 0.010420634562858239, 0.014232327032235419, 0.0046832226936113219, 0.032819982634319213, 0.01320726418626594, -0.023533808891275709, -0.011404581263416494, -0.042582175203416311, -0.018915023456131434, -0.049511208703627144, -0.01836613958153846, -0.0058433446262533108, 0.02231630230741475, 0.021334764569425978, 0.034666291388462299, 0.060010301185060864, -0.034246065227552185, -0.047005499650124551, -0.047921871802546437, -0.041048831403235529, -0.026713641204057077, -0.038789996127014961, -0.018331240491325174, 0.037976867862023977, 0.028813877664190697, 0.019770359402909235, 0.03728944535318747, -0.066962988411517793, -0.10295356437958489, -0.090035338267466014, -0.060415802785235138, -0.030821512733484054, 0.02401335406847712, -0.023615740770755671, 0.014617912689912915, 0.0051973456583133126, -0.0053408769578060511, 0.019716826597634293, -0.078766904193264292, -0.029296548169388054, -0.023280430828030781, -0.014403388911157673, -0.0092263628747704454, -0.033409036299127719, -0.020726200729135634, -0.035931925994181074, -0.023010380673947554, -0.039252395604041306, -0.016760733401697973, 0.053608280303007586, 0.13329950551225564, 0.16489717632675976, 0.090281268337484705, 0.045229665505339148, 0.017404381514372763, 0.013597897839994186, -0.047297713743641646, -0.067622094327431645, -0.027195636559411811, 0.065506393613748479, 0.02232560477300298, 0.046885888199241804, 0.043068894433184998, 0.12018260070272857, 0.084302508484961486, 0.02067188016168707, 0.020184511766629731, -0.071050894359262914, -0.079541739094958583, -0.016269072364149793, 0.033354715485268173, 0.028706024706301091, -0.012011749840849373, -0.015402866346903674, 0.031358471867631604, 0.10476667408686299, 0.0025587486589462027, 0.02110857377048439, -0.039307670372500075, -0.093767551228405063, -0.022120949123226506, 0.023658016755843218, 0.001624116197708074, 0.011496266326477288, -0.039666836714535372, 0.010910001919740123, 0.063815810827050498, 0.062964749256176525, 0.011666021976556945, -0.024049027553408542, -0.0027908618863511994, -0.053241603898009714, -0.014763231808325047, -0.0095880408564158331, -0.031086972870322235, -0.030644620324520727, 0.010272461123314607, 0.03748199758443737, 0.060317495169656093, 0.024907320438576977, -0.045599623540660161, -0.020357685838190937, -0.062106166980994727, 0.036986556057447252, -0.038453069856899391, -0.044856589426634154, -0.034310651524162267, -0.011783723308224799, 0.018762824804810944, 0.061657489154879043, 0.040804009950206069], 
        [-0.030967376640442579, -0.034704706474157576, -0.030029036584246833, -0.073209132466448931, -0.048949076143639865, -0.038640662410442561, 0.051474764052445811, 0.074236855663231974, 0.11134675135754504, 0.076704056724054892, 0.047486303599635876, -0.068455613733398521, -0.035128511996496081, -0.0025321681540545343, -0.057133697514561765, -0.053440600419679241, 0.017148650385363479, 0.052110170662047414, 0.058782183168318736, 0.047056961446036369, 0.040322325256064898, 0.0078030024380692647, -0.05608339456723066, -0.04684682593449583, -0.0065577385795995147, 0.015471094977111979, 0.0066614780906229729, 0.052620395249402485, 0.00019300929351519225, 0.077547069508788119, 0.050313782394810311, -0.024569188095571692, 0.034662886943856788, -0.0044029950458541103, -0.038893398080935566, 0.018694283839760885, 0.035428018363409447, 0.060685907655044814, 0.0587413540716437, 0.0014872430743369924, -0.045756325846127051, -0.047944642008308877, -0.09281792081715598, -0.021043716683786656, 0.007562208390103603, 0.0087802886352499401, 0.024402794551533658, -0.01824493391613341, 0.0056819486787151258, -0.122005902409504, -0.11277710237979818, -0.054719494073167244, -0.090166889383778037, -0.032774893151098286, -0.079640484686983273, -0.0081433425803733028, 0.036415554732213973, -0.029719246379058512, -0.08343173036099473, -0.097009718713933338, -0.078382336396330896, -0.061852431233739499, -0.023645551992256014, -0.040447890302015635, -0.078556226205249061, -0.035218950640358182, -0.027448566314184852, -0.0024221651587159679, -0.0086513582329476105, -0.069055941187435799, -0.046263515682347614, -0.026683587106414781, 0.0085151284734774242, 0.01510527176030271, 0.031314100341752416, 0.036056075842148129, 0.025591220637012156, 0.0051353834527485057, -0.023005349498057173, 0.02104724020668694, -0.014202301085685001, -0.043601992702429357, 0.014083946209181006, 0.047988366041463205, 0.0040768949537646898, 0.040069615686237701, 0.031368092441017473, 0.041401907932681482, 0.0083542366285301942, 0.053523984896854969, 0.038346576189893421, -0.0075354880301602006, 0.03383654934661684, 0.037701959013775557, 0.023170719193185016, 0.00063874518894980505, 0.022456779814042073, 0.058804006814905982, 0.033465949399417834, 0.011933873490689997, -0.0031202988762389951, 0.016068746672777481, 0.037621893043980711, -0.010942651485316122, 0.046299383766535571, -0.0027637682590763851, 4.2316925059140975e-06, -0.0038944346280027366, 0.0096576323773187346, -0.01850966706940272, -0.054006078059137416, 0.017238219091326883, 0.0091596910151990184, 0.028996863874777658, 0.033952601882988653, 0.070753339834244089, 0.0037809506474898429, 0.027199587204016329, 0.0091419719045753873, 0.027115188408680799, 0.012709694003767591], 
        [-0.059221606655608681, -0.0013807397121916331, 0.027612645957779638, 0.10526838045136652, 0.056162190642178922, 0.063381996846630956, 0.0052813907213748162, 0.022701227707487698, 0.023071399548784132, 0.011640586008089752, 0.037100581562280036, -0.096537301671241846, -0.037974704225794617, 0.00038732579738916815, 0.050625050016267568, 0.065086729085677475, 0.0010273202640978113, 0.01030282761678826, 0.0050327500226482608, 0.050959342703142202, 0.053161832471559013, 0.03088817116176755, -0.021359024956780739, -0.030126662636484423, 0.014336380788901357, 0.044081582390044685, 0.045143284913980009, 0.01394262266053127, -0.074479563024112405, -0.021194650491958511, 0.010166296540795764, 0.028011887127611046, -0.022728767470732637, -0.033769750654749603, 0.0042313533530659725, 0.022686514054856353, 0.046542045913330762, 0.11310013896650321, -0.0045051511040681974, 0.072383588936866153, 0.037891919978813249, 0.044639985453488233, 0.053304796345090825, 0.055297501218708925, -0.025259737537897203, 0.023523250437604698, 0.029550788938781603, -0.057103923688581644, -0.037228050464029057, -0.040334547113759743, -0.066002394454861085, 0.051805877339979295, 0.09092132214492693, 0.015823331139374411, -0.038665412143877739, 0.0092906515574926254, -0.028826426019922906, -0.074980989084462088, -0.05787442193814954, -0.10795622255952429, -0.046546338514420166, -0.11181899441749669, -0.10192418752175381, -0.085702414165345311, -0.093905868491930569, -0.14398389568329137, -0.056828585605448137, -0.06626357512710776, -0.071883231030884079, -0.05541027253169447, -0.0092822545503814802, 0.0018363519548447033, -0.0066183382174312272, -0.011825162483750359, -0.092520252931136554, -0.088262059348965707, 0.0069521222062057519, -0.025393087237703255, -0.0063946991298149333, -0.043361744350810506, -0.02217358952694239, 0.0077218815463931945, -0.025334117749954241, -0.0083152640572634468, 0.037370584638286568, 0.012798906233440717, 0.015685495564438989, -0.0096592020340569573, -0.0057848888032873691, -0.010756955350811635, 0.017757324648215944, 0.044529547669743041, 0.0041941047626251615, 0.054645185961794018, 0.039709597938149141, 0.033910773481424995, 0.065271769100368901, 0.034889848272914054, 0.095387104413498985, 0.012473593139358034, -0.0089935075779601324, 0.044380357060880754, 0.030765480187302234, 0.018886724239982972, 0.031787912403243176, 0.031673790743440955, 0.020196643029900062, -0.0012983094411241694, 0.046204156701180166, 0.043616528938776683, 0.052279675166504697, 0.035528670172807794, 0.048752827422166391, -0.010956478364744832, -0.010948307255129602, 0.0023335073954288315, 0.00082619959707538188, -0.028699221681917506, 0.014221929018802294, -0.0098068806836790964, -0.035272762342824268], 
        [0.062946872449031063, 0.064519394879077666, 0.032897359514565301, -0.045711891879663097, 0.020599391374711062, 0.063655199236485299, 0.014615769796257505, -0.027440870743054617, 0.035616222562863675, 0.0094036093827168515, 0.056507446197265193, 0.031272529009901337, -0.011034554575282393, 0.038887056697409605, -0.021343232536083438, -0.016082974355130925, 0.03398009131937528, 0.052626400504158947, -0.02529516749703499, -0.026548720706405481, 0.030680991925506617, 0.027583071986928488, 0.080966719325337916, 0.035373199613146035, 0.034900256392934439, -0.012798813313152833, 0.04319156099995615, 0.022703220357838422, 0.050265373853632632, 0.0003437400231437425, -0.012567197236507482, 0.073429633782059245, 0.0065301063919971924, 0.017281768786973933, 0.049276004779088722, -0.02725340162513791, -0.0086520578662400288, 0.047527074820523915, 0.17861942818684309, 0.086809068021657401, -0.019355178240588661, -0.041870304853726628, -0.055304753608100707, 0.078290837231694221, -0.12690621836570407, -0.096279890589654596, -0.092541121932859904, -0.10216764911335079, -0.041913347291723559, -0.0061568695399335446, -0.02394181893475637, -0.05181154571828913, -0.12530688042526772, -0.097862179590048642, -0.10634083467860724, -0.088741745636640959, -0.060958836535120312, -0.031993056376924268, -0.036846220231738974, -0.092274010347915825, -0.11353320653734295, -0.036146695566072848, 0.011596830638808633, -0.013143670931630894, -0.063917360565445863, -0.11042459480083613, -0.012415575911984202, -0.061286683792012901, -0.019683898333121175, -0.02351836883559362, -0.0066523400160384549, -0.014484754457127935, 0.018028020927321566, 0.008084275012827935, 0.036972370716564971, -0.018618144071885362, -0.10924354613828609, 0.030523206341700047, 0.01298880090453846, 0.040120142620378607, 0.061496119916373056, 0.048449961530989391, 0.01921366891131086, 0.021510068544701624, 0.07209312331150311, 0.037410161917291698, 0.049160122975013168, -0.013141343062868835, 0.060642537004008013, 0.022194682981879085, 0.05129865380619493, 0.013217705879822975, 0.041765969490498975, 0.010615751276552232, -0.010207688567782834, -0.00057559828671693847, 0.076314244622539648, 0.017510356925100834, 0.060847396478783206, 0.03300347337813607, 0.048984734512022551, -0.0064822252096019221, -0.0021063249759751858, 0.010622816122664164, 0.028538830399705187, 0.028618408701009158, -0.023485260352655107, -0.0028276174189336839, 0.044105954184393642, 0.022574759621766721, -0.025473428596684167, 0.026401062552437127, -0.029859950686759645, -0.035148145207273412, -0.028004242193563095, -0.010874515898578971, -0.02520644976850539, -0.031472616887933583, -0.013822064554071298, -0.01097289405425797, 0.076092357186882495], 
        [0.03690386612248002, 0.056002218089369685, -0.010951719270400923, 0.040331097511643155, -0.0037441455323561496, 0.049112125114183058, 0.0079169665374183087, 0.11344386642727713, 0.0007563312264983052, -0.037482571931358309, -0.018735772189985789, 0.011744945269622539, 0.036505508708255696, 0.053399713960056966, 0.023086150106013142, 0.0044152509684453195, -0.0036748654077677217, 0.049656981135381167, 0.0045969535450092955, 0.040392794162983123, -0.029097892231179194, -0.074893865276321803, 0.0016705057712694963, -0.032135738557994634, 0.036750173986759005, 0.032029774955991561, -0.025110352420147287, 0.022110635776293401, -0.011118779729623884, 0.027123502587836187, 0.061095462079700222, -0.024783808630182078, -0.059955925032526225, 0.013711673076898898, 0.036557533368247498, 0.084110261886928162, 0.055950231294746772, -0.020007452447925414, 0.020788588159875922, 0.049865734304206946, 0.039021923151225379, 0.088845664746401071, 0.012344115511745107, -0.05538843672808838, -0.0283890960033647, 0.025833332510384673, 0.10641983969927944, 0.052722918301459212, -0.05478356057464559, -0.10190284716601143, -0.049794325260415453, -0.0069085612468734042, 0.018752575433158634, 0.0082097852631209702, 0.013268033828822395, -0.18180783799950825, -0.12595865108667029, -0.094587062767344646, -0.027564647202767342, -0.064339970972324884, -0.091630782859498369, -0.092278488340619053, -0.075570027119632732, -0.11647913534085745, 0.0033701825247711877, 0.029872248721253027, -0.049119870012074435, -0.10950490287540141, -0.082985533821943222, -0.020757266879069626, 0.032839871737627147, 0.027498688090949394, -0.051265177840992882, -0.028726904129193459, -0.074362520404752469, -0.078828379945006022, -0.048211245977380933, 0.024174951415566678, 0.0074472807679010818, -0.0074232491688529523, -0.00077866185976915858, 0.056674802683761974, 0.022479560933966962, -0.022053321065962445, -0.025989291569709812, 0.0064102606195954315, -0.020235352690214578, -0.064838171573315492, 0.081539627065815912, 0.050559787196516853, 0.027640931483737141, 0.056668491330416827, 0.031151110583386293, 0.039877476311591838, 0.032443819125262119, 0.042982667461244774, -0.0018215713348507297, 0.0070637700109989279, -0.0058429795351756103, 0.067603762059298383, 0.03091253675538988, 0.028071888777783896, -0.0010850231199715735, 0.015534670537972986, 0.043687190194000733, 0.01938400318015672, 0.032939688927880212, 0.057370488644266582, 0.0076083295877509421, 0.0044986928101548411, -0.011421955766557471, -0.029081272069140879, -0.0036106413708782165, -0.0032691409082095807, -0.063551586196383944, -0.022937264529547606, 0.0091467010626821721, -0.011390797309113472, 0.068187506046327936, 0.003884385505889279, 0.071448625051746401], 
        [0.093670053378816731, -0.0060185803724412124, 0.064975253447979997, 0.057204813928574239, 0.032039357303312588, 0.017360690928795997, -0.054310388367495258, -0.074304010831156467, -0.022133608826072002, -0.03441434222392329, 0.0044162963247191128, 0.028938348016603214, 0.01658488166499885, 0.025525405954675534, 0.035893961967071938, 0.0076746895655852576, -0.0019368459518004297, 0.0066707535959328046, -0.1042360605814506, -0.00055454840969697966, 0.0022380826663202374, -0.02840948162941799, -0.004017714090244609, -0.013989051801159828, 0.02542809328073873, 0.064148365472184235, 0.077485765766674375, 0.034007352893400962, 0.046771269374739369, 0.054056001025575479, -0.068291615724358462, -0.01191564128605152, -0.08236908091325304, -0.034026953075964254, -0.093926696408503804, -0.028299026068272781, -0.083187856060272347, 0.0068670213408899561, 0.07996019523365458, 0.063771902655339469, 0.00087634234802598868, 0.020691801513151017, -0.012739227946535911, -0.018539467931270818, -0.082159033883173249, -0.035509269486481018, -0.0903794995968909, -0.072582351048290333, -0.10221116757608581, -0.10665056526245895, 0.00090250733424238061, 0.015334595491633053, 0.046227730069698332, 0.038103240152997334, -0.0062461221580594889, -0.06724561414366495, -0.053325522122090241, -0.0029145163841420574, -0.055345741892996264, -0.055246137408700977, -0.11556942735569369, -0.12678748176917243, -0.018650402834112373, 0.0201115675159311, 0.0072374544322631939, 0.013539302016072579, 0.039109407585483882, 0.051641698907963052, 0.0078965365952058768, 0.023870730531144614, -0.017458058805458504, 0.018892420656760625, -0.10504680212429973, -0.089680004128360968, -0.04272524613046922, 0.026724916448450958, 0.011635965581891422, 0.084889133812557832, 0.034194689506569786, 0.065857255458405553, 0.0042427078937929356, -0.012401464228490738, 0.042722865239520375, 0.033509236615387683, -0.0086452874579218859, -0.091769778804805302, 0.020750157767451382, 0.01987667311893981, 0.010694698759597054, 0.047156458758485842, 0.044111484618501104, -0.014434725200227233, 0.071373855704184225, 0.03475623227161978, 0.040578493255194692, -0.0071662870654205096, 0.025407664409730447, 0.043339417631733802, 0.010480242779609582, -0.0087307063681051136, -0.013411411822995711, -0.020394509035250141, 0.0060121542292144725, 0.024188238197290803, 0.041668193822485079, 0.041183226601004416, 0.10243115564821167, -0.02940584456446451, 0.0031099245285817669, 0.0030508999908164854, -0.017382195539308282, 0.0048263750639246927, -0.026781565476663695, 0.011942148044968376, 0.0024678281518802359, 0.040929003265524629, 0.080622599957161575, 0.029178579118654943, 0.043038714976740611, 0.0055501733506574946, 0.00027909537625575576], 
        [-0.033397311394149677, 0.0096415007713644973, -0.018236744035314625, -0.034138584815056695, -0.0024438916753326198, 0.0055087071850375355, -0.0026268037119103198, -0.028241098838151658, 0.0052159942036530127, -0.021235364030436632, -0.047073948370721506, -0.026121704506604584, -0.027138348751118566, -0.048107435408362653, -0.040211279822578397, -0.030102378969085283, -0.0032792712208641666, 0.059678613392050002, 0.006758383300518157, 0.030667242997798105, 0.0095436115343644611, -0.016919082533258429, 0.0038233095813847151, -0.058995625065273824, -0.030890606711754587, -0.058149589871913064, -0.0815351815818076, -0.0063579538770199284, -0.017080813200946385, 0.043337478406891949, 0.062983597436613734, 0.040401309594868401, 0.0072034023998875183, 0.011592685433827972, -0.0033021456500918062, -0.057816788607124699, -0.037812512707325552, -0.12425681152290456, -0.10985738895947982, -0.093812839880628898, 0.065001290338761564, 0.034843561028987141, 0.056616004034855671, -0.014925007654415651, -0.021164736244188381, -0.0032162052770800531, -0.012309755363306994, -0.017827196918306518, 0.035551161867388673, -0.07046756271563373, -0.034864456303405046, -0.017196442705869938, 0.02847927116818913, -0.022806581184283581, 0.03213417823424855, 0.026469237488508546, 0.009589558238125101, 0.035119287178089001, 0.13550727924378436, 0.13688661973317756, 0.16247997796144609, 0.015875158167285394, -0.020831151874117201, -0.0011812318416458828, -0.019841048216886314, -0.088082464896673471, 0.030457768879803171, 0.026063097480707995, 0.047026463061375465, 0.070569136656278841, 0.062916792803278332, 0.049798812429405107, 0.085485860229359792, 0.035141696932625741, -0.020167444245680122, -0.061685159646736681, -0.092847554814415742, -0.0015896852645350262, 0.016608882932934957, 0.055001587269276467, 0.070867931570141707, 0.013234850523530295, -0.00082083705696721354, 0.038004857877911483, 0.07357330886595341, -0.035371927316790286, -0.031697507137062611, -0.086248516693940486, 0.010390223430695129, 0.020133865530716527, 0.013595826448211168, 0.055294702876020299, 0.0095627226336793825, -0.021797178139167303, -0.0091913269986637625, 0.042724178575335753, 0.02896574564861093, -0.04832930579382462, -0.097000076388255058, -0.035392090036565821, -0.0091230528722667514, 0.047734194414938147, 0.024899519254075436, 0.040201783336123773, -0.042437436186437194, -0.0088865115923605353, 0.0034760730494084874, -0.012834489181082792, -0.011082107946660119, -0.086373612626070725, 0.010906720579881624, 0.001585372406144106, 0.059934049355052657, 0.039390631946712135, 0.025936130645470831, 0.018352465543086088, -0.066654985053579988, -0.036968952314477735, 3.6890828317398539e-05, -0.037622268779505898, -0.087738993271721605], 
        [-0.0096923145306643255, -0.014831123980443256, -0.020109046114375438, -0.041529783531830268, -0.079112823290570247, -0.028439541923334352, -0.047215277761511222, 0.017919873457542868, -0.043730620825476289, -0.0083077673092849316, 0.0080637615090816683, -0.042847844269627344, 0.015732582480551337, -0.035877042331939335, -0.020274620631426151, 0.0060017334212957209, -0.011038427925582694, -0.0079321859154538772, 0.0024669467939925456, -0.047174751648789807, 0.019484888947581012, 0.038912158226446558, 0.039176172588516966, 0.0053797578511889238, 0.01139452493864973, 0.022134514065384248, 0.10262246569682075, 0.060645448427255277, -0.0049047335544548376, -0.026337548147820675, -0.00031049715236153297, 0.021471089177500111, -0.02913111856188328, 0.049020954146217169, 0.04824653180085528, 0.087540872822502711, 0.07299558540439087, 0.019711133472069112, 0.053346275999322679, 0.068713013463729239, 0.0089235415332704765, -0.0091036040048159544, 0.0059129844090943101, -0.012742345396119917, 0.056214606413909123, 0.063790565651105968, -0.020641135671904988, -0.030946926450396303, -0.016711976557631042, 0.1127244564225961, 0.02689697887910851, -0.013567479905524482, -0.017090058647780196, 0.01477668396540264, -0.010781920436714542, -0.006922091337546267, -0.089428459457285198, -0.067232570801827068, -0.026910735478631764, 0.035336793970009189, 0.16956999523533778, -0.0065457838988597361, -0.024077365950438537, 0.032166605250999306, -0.017459200412506121, -0.040088844438940743, -0.099301197361124693, -0.011984969849644441, -0.027641332988394961, 0.012259320892963398, 0.099469618921912001, 0.030178783959567166, 0.017806737961083313, -0.031243892294941327, 0.036952968809518559, -0.062248228689263954, -0.018966613344436702, -0.066056215647809571, -0.02680077856103967, -0.012533495449249166, 0.024584778032468828, 0.056249746142491924, 0.041206463201368705, -0.010337287195679248, -0.044756156557245824, -0.072391192005918537, -0.0056600512539719122, -0.022191532906063322, -0.02597985228049178, -0.0048569317681961439, 0.0022456495424232501, 0.048041845230600719, 0.021878224718166694, -0.031093682711296713, 0.03107864582201561, 0.028619968620320131, -0.059947445075684995, 0.016801646203229784, -0.0025822067852190656, 0.084438821665531974, -0.003253904863717641, 0.02175579697998456, 0.044396143599607973, -0.0081787327528522191, 0.04342802310153146, -0.012815929012254187, 0.014790808529243901, -0.028622217225797268, -0.048854772240751264, -0.035404776408354405, 0.070880645278505183, 0.054724662067758528, 0.086068694846379121, 0.049869516112302004, 0.024134618019859611, 0.016045127809092008, 0.021408152684806558, -0.0019594348922353459, -0.052756609552716119, -0.046484303325115398, -0.068062813120118207], 
        [-0.044331925230770723, -0.054329522119882984, -0.051769461081186574, -0.01525353279808098, -0.01070122111548966, 0.0092804570085843405, -0.0062410209171876582, 0.020071586960402881, 0.063349260545734795, -0.04992151146932073, -0.024847935737445589, 0.061077328397192293, 0.073126703765815121, 0.034270104298964765, 0.035888286964653064, 0.065558812412295553, 0.0050893801576369253, -0.01742526677567887, 0.06410303374113939, 0.063690998960531819, 0.011936936642071773, 0.0065558893104545879, 0.059351618349500423, 0.036170614252957374, 0.073144876020142385, 0.043276296735218094, -0.0077362104397021465, -0.022748848048502378, 0.004668960540261835, -0.00069002660498715396, 0.063939712901835977, -0.014966710082811807, 0.0030727592791528514, 0.026662644906728487, 0.052820346942979893, 0.017109036507216773, -0.022408542987520336, -0.087084724994147211, -0.097569765420874172, 0.021721228084129754, 0.051712419939002871, 0.032756768677244273, 0.017819938585971133, -0.037825552779906096, -0.099906582374084577, -0.11007916981172988, -0.063039969832338297, -0.11065720406183299, -0.056463971331915969, 0.026810997895988217, 0.075619829451265996, 0.073184027699837118, 0.035501377120659039, -0.023904618994720753, -0.017844665146339908, -0.11756514198915489, -0.12168288991626966, -0.083114279850997466, -0.034920888410994, 0.046766450072332821, 0.058773833741353781, 0.010496365445282875, -0.0022130497808088385, 0.051099528389418059, 0.024774714859440425, 0.023471290407304626, 0.015631876716462951, 0.017970346390513474, 0.0019335540535132985, 0.03051462142073259, -0.031110061550176205, 0.03360548749067617, 0.036258212592403839, -0.022201080422089837, -0.023002827294496608, 0.014758321300040728, -0.0070368058672472117, 0.11790263516593479, 0.049474341493852388, 0.062413173309873948, 0.052777269288969954, 0.0094326378468209612, 0.032163792810796982, -0.0071375680551991191, 0.0032748797229581496, 0.0067896199680393572, 0.022973239078915367, -0.030044038850916659, 0.095054792203179583, 0.077918278809296693, 0.025170796867169457, 0.03248633395739102, 0.00548093487382893, 0.046288431253225307, -0.0048346651023808999, 0.010140951369667767, 0.0064050414683687936, -0.016192674375299247, -0.020769896639595678, 0.071543155267954142, 0.041811635752456604, -0.0011513813928812448, -0.0069609227018348346, 0.016359548418687996, 0.025002761420305327, 0.02055238314967053, -0.0015891153508810953, 0.036688265432544012, -0.059254810876512506, -0.004524146766604867, -0.022764896844005511, 0.055697322831434269, 0.058835090349322952, -0.017695954014236001, 0.01434475115987981, -0.020605598415603534, 0.021010015372295208, -0.022474770741166539, -0.040296790452836906, -0.040551682538183538, -0.036579658592001969], 
        [0.048679672604873575, -0.0052210780917486968, 0.011189809961728723, -0.014770773614183955, -0.034142207536203256, -0.028004372616342227, 0.0059493580101942483, 0.015102059175930433, 0.019900835917708519, 0.039960819331958518, 0.0038194214559740605, 0.01388991934048571, 0.075502995650847393, 0.05989103883686564, 0.075512404372436573, 0.073756282062729772, 0.10697289779941345, 0.068740762469562872, 0.048031325115771309, 0.042366249770111879, -4.2026778606093357e-05, -0.012109444919293957, -0.011318629446975792, -0.037381626729477938, -0.021548420500173249, 0.018481632817077147, -0.0052013341004672684, 0.027476505756756441, -0.013858276037494007, 0.043728377691453817, -0.02503235093554558, -0.029686717094650691, -0.019073492339460648, 0.033491515961355481, -0.065963899461171427, -0.062341635557177519, -0.075624328092431956, -0.053585585183758444, -0.02877361255805902, 0.0066218070173488103, -0.10035769919352369, -0.089046460941984568, -0.046139804006717938, 0.07297541439744247, 0.08725084363158328, 0.045168092371441648, -0.05333664579595656, -0.082409439250664893, -0.091444433373020814, -0.074425623111224221, -0.092126329411898994, -0.037674636051740117, -0.0056525304036601151, 0.067513154505640993, 0.093934210469869675, 0.0092896691237717884, 0.018516434326696123, 0.037297581799338571, -0.021567249747191534, -0.034818877231227827, -0.02178280374647603, -0.02580882232156104, -0.036853163117586477, 0.005007242741758529, -0.0054865350633394733, 0.03688895314986719, 0.02030363893313307, 0.062349708701591948, 0.038517231153257302, 0.067307645991564954, 0.058616348298225311, -0.0042177704428246199, 0.054673040661478024, 0.039230731169713394, 0.031392491178710777, 0.043919434454236447, 0.043292679240196676, 0.01880512733348403, 0.017382645623532596, 0.059661624010023243, 0.033698675096640159, 0.013341888531181467, 0.08421015245705174, 0.025430986838139963, 0.012904413846026745, 0.065431122065089942, 0.011197289986359183, 0.029135622794168346, 0.062540987885654917, 0.045382776129875506, -0.0053462603961966226, -0.017266787058448405, 0.020420174075574692, 0.013123043389498143, 0.01525904905961481, -0.018730258477720974, 0.023824284687915143, 0.052818399981128895, 0.015447226033022343, -0.012489602024893638, 0.014683734340722451, -0.02685260219002731, 0.028989118420292514, -0.0048952379910385084, 0.024941536558213226, 0.080074825915833162, 0.013282727442137699, -0.030419960916935621, -0.0077058669293919302, 0.0057615039328642731, -0.022997491985162988, -0.031813252703541905, -0.0074071331247387365, 0.0074685762164737393, 0.066651669608706721, -0.043189594128709249, 0.0087486094318929737, 0.035607481241798619, 0.0093449129697469185, -0.060325944063403136, -0.02989706486831599], 
        [-0.021246880546086595, -0.022203836487912819, 0.086827201278774843, -0.025228269953020035, 0.046971762650786793, -0.032032705567453051, -0.018784965671998312, -0.004315941436901353, -0.0418268952943677, -0.06928924256853522, -0.0081666516254654542, -0.017438229004257164, -0.024335471310471764, 0.028654380266214648, 0.072066491882920122, 0.016590540091147674, 0.024633229035089028, 0.078139556365993512, 0.056622200409004196, 0.037502807115330446, 0.037840229470096992, 0.032000001430608604, 0.013106472326739116, 0.012369223564270927, -0.028705902974894969, 0.0050659301606566509, 0.013853418541047425, 0.00055953040940459609, 0.020322571781100932, 0.07527603584001831, 0.091912646107956533, 0.11098583412431406, 0.078216838723305357, 0.015546123816145365, -0.01174475399733392, 0.051737996061461511, -0.012734123174444889, 0.016768985632801714, -0.044365898602312492, -0.099553508533813909, -0.050100281868429075, -0.0572477447691047, 0.016222179759918118, 0.067599657169812671, -0.008648050879736989, -0.0032868833097521172, 0.0085922588825274523, 0.046767940575399347, 0.072793826165235873, 0.045294967050798711, -0.084825295102879616, -0.14860512013508548, -0.051316060883006345, -0.12479434422523886, -0.085078856704692979, -0.0057128248462955805, 0.044162552063783153, -0.001048023139082116, 0.030855043319812047, 0.035139310135952784, 0.072277327757524351, 0.053917648452753389, -0.044671527799533012, -0.082684884460253502, -0.10599899450799834, -0.15447137644238773, -0.011133194850090913, 0.028927718717327938, 0.0038563782177809536, 0.016247602026169011, 0.017415917794260313, -0.021407239152637751, 0.026964006691972034, 0.028130757592115849, 0.025157803866096017, 0.037924085124599397, -0.0046849643873905084, -0.027697413203631536, -0.041378992383391267, 0.0087612328882413319, 0.0052052300046328374, 0.043900410523183886, 0.077610211778951319, 0.023415755123284865, 0.060860467661889836, 0.035574343781129072, 0.071927577630225378, 0.064070926820927313, 0.013357966646117945, -0.048365636178152809, 0.029793021490433041, 0.005225453074711478, 0.001772380719733067, 0.043271021300702546, 0.061871883282456325, 0.060250041239335972, 0.0059220775592172988, 0.067275053929414422, 0.10149603554983715, -0.030661903793952457, 0.00089428604746767844, -0.057645311311752261, 0.033294846298777651, 0.024005678533927544, 0.0049160862915328327, -0.018549226060485483, 0.028088385775127147, 0.023382362593578041, 0.034065125172518744, 0.07678838837073973, -0.057670084152690565, -0.034527649268692978, 0.021760161147630741, -0.072333662591223591, -0.00053618118175239454, 0.029546492159811099, 0.0043528145210185842, 0.0050096626752825398, 0.045672332663587202, 0.027025414018034634, 0.047574909566606413], 
        [8.4608016445507188e-05, -0.00051458603662822393, -0.00065583344160838331, 0.00020678855120534164, -0.0011087422000772406, 1.7282608213937956e-05, -0.00069139299457388927, -0.00067753460732458931, 7.4613346472338082e-06, -0.00070526584292512906, 0.00036510757807054156, -0.00022612583636142519, 0.00083733124736023318, -0.00038556424752306945, -0.00020677490024442052, 0.00010703864033769633, 0.00015849441156012833, -0.00023178848590595102, -0.00023816000343533997, -0.000420628080187814, -0.00035892451039670759, -0.0010410723256383952, -0.00070994799374692746, 0.0007230031202940905, -0.00024735560793927303, 0.0004891872672126707, 0.00024923784651577352, 0.00060668980402729254, 0.0014982106812944096, 0.00053619751642124819, 0.00050086941012989633, 0.00089806877848291194, 0.00023875283911756195, 0.0001569025840717983, -5.4315342210856099e-05, 0.00056173407996628483, -0.00015464198944174475, 0.0003080961595964592, 0.0010477498266872332, 0.0005403071450221222, 0.0020027631503172446, 0.00073696212701762631, 0.00041837758978503781, 0.0011534221243659493, -0.0014158435817800425, -1.73851858713929e-05, -0.00033269545836868853, 0.00025908994851942674, -6.7895175314192091e-05, 0.0020025402967875014, -0.00060120961823892718, -0.00063728772747552453, 0.00088528834369269727, 0.00051385231712379464, 0.00080076929798790497, -0.00021374130033396943, -0.00012763782981460581, -0.00032299201148121293, -5.5463761258908728e-05, -0.00038413195736432953, 0.00098095746371240633, 0.0016769261261450272, -0.0002368271084003809, -0.00047131327166750892, -0.0011833841321572391, 0.00011652969229286516, -0.00069780759172321442, -0.00081516216404033115, 0.00031471538464767062, 3.2977760094066362e-05, -0.00074268117841487513, 9.2834374935888298e-05, 0.0016276084011049713, 0.00052039347413883026, 0.0003285769128429112, -0.00090914431575088526, -0.00066273949795000141, -0.00049429425680350917, 0.00081787103240475723, -0.00028646816494606181, -0.00047774822091328339, -0.0011287002050334449, -0.00014958608778612575, 0.00067727909838368253, 0.0018426861751217457, 0.00042127435964937898, -0.0011897602501548844, -0.0021020944752171283, 0.00025862501872599489, -0.00028164777099942001, -6.7871288290041742e-06, 0.00010673321891338397, -0.00081946733629025144, -0.00050655780311133561, -0.00045739009384393806, 0.0012233134687435353, 0.0012483089084911257, 0.00023366693745787998, -0.00049653822033247572, -0.00060431039974054301, 0.00048856312080340636, -0.00039402287572039285, -0.00030282982425909599, -0.00048297968441542161, -0.00045029888856688155, 6.8065154860727506e-05, 0.00029380813408220671, 0.00080750067552030902, 0.0010027117298195727, 0.0012117980796380462, -0.00031499882641429153, -0.00096615449547508142, -0.00016520767145138809, -0.00025930083458174102, 0.00070444567594835084, -0.00051524971604912512, -4.9950991088697216e-05, 0.00023269835482522989, 0.00098128070058338401, 0.0017427389161336626, 0.0012748954300746823], 
        [-0.09216726473640563, 0.0056728742547598144, -0.0093745125247278963, -0.013062003758843106, 0.026810754174940429, 0.049001345358430204, -0.021651121797821183, 0.037001156569604607, 0.0042183127400313627, 0.0018620748056430826, -0.00028650345860718393, 0.0053573451925248185, -0.024952282021024397, -0.053963168016106317, 0.02220135440090492, -0.013351422685652972, 0.012385499720994092, -0.018031103648731638, 0.025521909572096997, 0.01253732595969557, -0.011991546378321899, 0.045186572016900094, -0.0094335083884424294, -0.0044184293091944493, -0.013784342121793192, 0.025926061962200528, -0.04105356169652366, -0.03889277471178329, -0.039895674599080957, 0.035441461163177923, 0.023677237357549445, -0.041021777310156667, -0.057695608854404799, -0.01762676919993638, -0.020216604797755007, 0.027628137586160582, -0.018841264850454086, -0.015264367494595166, -0.042662519918908834, -0.076631880879329428, -0.057528782374830695, -0.014904729302692682, -0.066897780001713703, -0.06532989573225445, -0.0076505652205603458, -0.048586565493310384, 0.085981797610375443, 0.023144594932235765, 0.069502587525011622, 0.023606740362224744, -0.03701131089094889, -0.086463629853619134, 0.0048593320315824251, -0.047933152033371423, -0.065202394397951363, -0.0083087466099175528, 0.0036048909369455263, -0.014176009427905843, 0.086524500164412141, 0.025019184064985066, 0.18351010232889509, 0.1773063621666941, 0.05264594509899273, 0.046296374049865419, 0.017268040614808002, 0.091744326777185067, -0.011476730811934746, -0.0031098305214721789, -0.044720850821788796, 0.035194984568811871, 0.035161502690833665, -0.085225661297846492, 0.059125980810968093, 0.14804082639627478, 0.094893897974964725, 0.10021021442994898, 0.09479988677758025, 0.016819487190214488, -0.001620802251457232, 0.0056983698526431037, 0.024660235147196684, -0.001744068586085468, -0.031929007957278016, -0.08234588274111157, -0.036631877507097843, -0.00060561413909040454, -0.0084923776484023029, 0.029092555992398725, 0.021733620396429669, -0.019868686758322113, 0.0049377342712525838, 0.0354455889830066, 0.035659507135636787, 0.057301879108241027, -0.038291855034349676, -0.061603790001514017, -0.062081937237464455, -0.043689034974759226, -0.019286854706340784, -0.015927077135257463, 0.020688030294743746, 0.0061874980221431662, 0.0079544756336816427, 0.038210084103014429, 0.017747129076694818, 0.018299098668275414, -0.071993890721030018, -0.04880614394384078, -0.041477514541540167, -0.074196014839536834, -0.043570050319461741, -0.024269573468651304, 0.048012036866646256, -0.0022007186161765308, -0.012800711217039476, 0.05287613915145286, 0.06224964320115732, 0.025342119373221679, 0.0028708573689360251, -0.041475224097980136, -0.016770635320925542], 
        [0.020791522234705886, -0.026685059276677248, 0.0052683881367612678, -0.034938985350819116, 0.021609135295030821, 0.072759833840912294, 0.041388662663081791, -0.022050570784842675, -0.03766921280042098, -0.038135589145765356, 0.056138069483269673, 0.01870086519715047, 0.024053272871131241, -0.044521548367207869, -0.0072802659094019905, 0.025521806490733729, 0.055898032390660567, 0.020086252624459025, 0.022257708387705265, -0.043113185738142573, 0.025460765149070363, -0.041999586106773602, -0.022103861342994947, 0.020436961749637446, -0.0089104142150475685, -0.040754212701411704, -0.044989111609801367, 0.014513662447400134, -0.024972880286720952, 0.041775700269714146, -0.020617899446434662, -0.027451770104515237, -0.0581210200819193, -0.01972807133154101, -0.064863569531781962, -0.065429246017521078, -0.034021394098613274, -0.070154069814679601, -0.047185801462871463, -0.066864913651470764, -0.066928175305740994, -0.045242116038150926, -0.041527188035858031, 0.0090971915515874469, 0.066566987623413135, 0.09217912843511486, 0.035601037862094155, -0.031646183711611257, -0.084854398526009359, -0.078071918455593067, -0.058063889054538138, 0.027433416517916739, 0.038430683267361994, 0.093545180120055263, 0.020820155765660042, 0.053867582404908895, 0.080126804974505278, 0.12823246066629901, 0.10909482374666421, 0.12328440515687174, 0.10908470088869585, 0.12750021442141796, 0.089820420443205415, 0.13206669887005298, 0.040999003255566858, 0.058589622623364139, -0.028140612810618193, 0.011014387203399659, 0.010818445027512502, 0.057563125740994966, 0.043454150260847313, 0.0638052153810197, 0.039304942349605, 0.014669342715182604, 0.031072595757211559, -0.064253742074883269, -0.058945218947391416, 0.01193269465678194, -0.088116225981897403, -0.13130241652649149, -0.083772332396980051, -0.057941723086485299, -0.054054451777421325, -0.052884392643230117, -0.09093972499912327, -0.054181261740231752, -0.048566262449049533, 0.041761684409925268, 0.052504158945313288, 0.04064045371279662, -0.017347415771619662, -0.076719756803110536, -0.061854859388876034, -0.020823169528688797, -0.062266455107789991, -0.047703214610949791, -0.040227307948697298, 0.046901220891254883, 0.057527412627830121, 0.02543790657840345, 0.069956528520047301, -0.0081337298400100972, -0.020791993788821496, -0.040001890418240753, -0.05758450686937977, -0.023269358988961084, -0.04372684111076177, -0.025274229592385768, 0.047881871341667451, 0.055113090538271091, 0.041259701309823663, 0.030577926161307056, 0.04016185297326795, 0.077325910227506373, 0.049074284090185986, 0.020718323049837589, 0.05262692548423558, 0.057604266834923888, 0.051058314474601463, 0.023973320452055122, 0.10154029156391102], 
        [0.038641739990258633, -0.0050244591541973721, 0.0046136555572029725, -0.0067584458968164562, 0.03142115173410135, 0.043863820713166662, -0.0015664513032071729, -0.080587538587864549, 0.023010888007158094, -0.031974497946145916, -0.045852604775241584, 0.0073321619577446512, 0.024538236370796981, 0.026493986359803483, 0.012817297004288597, 0.015872668762235975, 0.010885319603060616, -0.025021809184165841, 0.03751411496590415, -0.046294554576462262, 0.011215007929641349, -0.02865689693597509, -0.015741373908333564, 0.010582364969449747, -0.0060245340950563914, -0.0021638463212280828, -0.012232405683626778, -0.038573436738902116, -0.034196779922251591, 0.021758828506470554, 0.0040701402954654298, 0.033018994443948589, -0.051703841216797261, -0.053297422863193972, -0.087986965234679054, -0.036088517832627981, -0.024713800986492014, -0.045558468938308061, -0.06323440947763162, -0.0079875844696831663, -0.0012689882118882348, 0.047524990788468238, 0.014455312192059422, -0.018256989781913674, -0.027677988718192631, -0.073305419918544265, -0.062178446834711937, -0.056046138548416793, -0.061582574394783318, -0.013981639384921803, 0.036486130784949389, -0.018426595901044535, 0.072796751112711278, -0.0075590705083293415, -0.024644110824231222, 0.06168186724387318, 0.060668636974430631, 0.037713982535211056, 0.078054934945803039, 0.14418916995002865, 0.15559892027908628, 0.067521632288650851, 0.019945580585251987, 0.026658612914922927, -0.012069655500885873, 0.0057425840485807404, 0.083144548120109421, 0.11628270848199979, 0.053997152612150712, 0.074409611827373545, 0.067028727192838367, -0.054231046134796825, 0.0039030350681543971, 0.062433312935196959, 0.025820518574058156, -0.026726551682383845, -0.010193345611774624, 0.020415993983784991, 0.060395051991757931, 0.011092152032282707, -0.04696569874087772, -0.07052421722415371, -0.072561804228264887, -0.027650589315538845, 0.068449933489119735, 0.03300031824163617, 0.041736298644040548, 0.011928446975795447, -0.054917381191681824, -0.051653802268125909, -0.028773541890526888, -0.037452616870395278, -0.082340063854409298, 0.012374637017067137, -0.0058925331814810994, 0.11104715646061467, 0.016941481040333578, 0.03319422535043131, -0.00183737049680259, -0.095054133079783387, -0.05896573649709879, -0.040233306687047658, -0.046408592586160452, 0.0083076855640988323, 0.044775412494742942, 0.063589932355388373, -0.010508998580612362, 0.066094053744825035, -0.0027753074050847724, -0.010075721966416776, -0.050323575669113996, -0.0068444216705598714, -0.0041475728122527351, -0.0038945396282382776, 0.028366828254517029, 0.032085016082864043, 0.029300197945124618, 0.0032286359611920848, 0.071385590020760878, 0.023726429769362518, -0.071250665399322441], 
        [0.10872537789851011, 0.014278189525074661, 0.012273877115053775, -0.0081392543273338877, 0.057053104705377521, 0.042321601806311455, 0.03332397665498274, -0.0094696243183966938, 0.022832248497195895, -0.060308217357328699, -0.029388353818991391, 0.047862958793470828, -0.010046448412779706, -0.018988029533582834, -0.039885552090269713, -0.040504055383590309, -0.014328694386006549, 0.066888009783769464, 0.054680567071356045, 0.036468027087737401, 0.027426069930502159, -0.041156646091381657, -0.071083792516037081, -0.038858148067829321, -0.052404651812680655, -0.037439793873889099, -0.072141553723678531, -0.064831984361939266, -0.093370898670026015, 0.012492784149001596, -0.012992603451236887, 0.012827984972397261, 0.028495833153019318, -0.088967419902127892, -0.059144923132213638, -0.073603628874425425, 0.0014228258212915287, -0.061365580816495208, -0.054662891582800743, -0.10167804607960763, -0.086349086183820561, -0.013058338568626704, -0.020967276930948797, -0.02496861635421278, -0.00867806660644585, -0.05092789276026935, -0.012321465172884127, -0.00979595224133116, -0.06038602061828513, -0.073566019699290497, -0.098900952710465395, -0.095044913253043817, -0.050810313973777735, -0.020639393298860699, 0.0068008806732431596, 0.15285717060929618, 0.097545372872726313, 0.11067705492765795, 0.11229427860410809, 0.18427633371321137, 0.11307184167377732, -0.0045716220662144038, 0.0064434015987714695, -0.052854132609023295, -0.020146160375414821, 0.0036234729462064491, 0.055736679511239132, 0.046045942922945615, 0.022877085053644025, 0.019701551970110434, -0.044509960624947387, 0.026260060577445368, 0.0012791409413432393, 0.11282744913606092, 0.045955737539801839, -0.036756266818064348, 0.013792875001360963, -0.00031411118081339784, -0.024157026907081533, -0.0076891189431453205, -0.018310688556061716, -0.036924502766096871, 0.01587681789027176, -0.00074296065299485348, 0.04435085579041969, 0.093549734756817104, 0.034106620050054992, 0.0074666958029946731, -0.055729238389459056, -0.024914950480349144, -0.040394064221819001, -0.014479423659402343, -0.021786228199499567, 0.034462836766090535, 0.019018078277086774, 0.019995937468091644, 0.057264247676035301, 0.04080735202882977, -0.028382616191986051, 0.012260696627029324, 0.036426534866617746, -0.022902539374817468, 0.0068340274728649064, -0.0095408080735063794, 0.021714345796159974, -0.002425244709437491, 0.026186714013621812, 0.06273849289505809, 0.013100065944167471, 0.02184527152625354, -0.0064556273106626955, -0.018059624197655194, -0.011501119699467793, 0.011069356592404581, -0.0076555726632192645, -0.060373289292683437, 0.018730638535199164, 0.010878747575572504, 0.039313330705399122, 0.050533322267807532, 0.030800301775522385], 
        [0.040802901586182709, 0.065103705890545233, 0.01571760146393637, -0.042967026067333894, 0.053812288839959845, 0.074783021511556802, 0.057112073514354537, -0.0020897181911366594, -0.031444155008721532, 0.03665938914354934, 0.079577902386804983, -0.014494517062943354, 0.023853876703959682, -0.085960234475358457, 0.016421056516635474, 0.053098980528390891, 0.044587319319406481, 0.075787383037682066, -0.020575193628669223, -0.052303363133645836, -0.0027125538469783411, -0.025364536060143633, -0.075564109154979769, -0.039844635860099079, -0.035503765834440412, -0.031982916804728603, 0.016275057515532626, -0.014982688136025823, 0.0085162879583037827, -0.010415191123769537, -0.080245107677651376, -0.068933869414995408, -0.082117266151384732, -0.10868042731437648, -0.11517402154338535, -0.052169980652789334, -0.078002618803070467, -0.084743043622459768, -0.090079412279082061, -0.045560705318270327, -0.099137819733507423, -0.089931119548774821, -0.071756723384732823, -0.1011983905001102, -0.026108924802754015, -0.02895558848827974, -0.052952747867330424, -0.040651011278506941, -0.062403675645972413, -0.062530867826569025, -0.047639683852648468, 0.021549892035432196, 0.042011742541525871, -0.0014168202056091244, -0.060017710153938739, 0.050238665733522286, 0.094413292104875743, 0.14252847594850043, 0.12070740630935128, 0.11697697498229397, 0.098975653037204459, 0.12840555821628419, 0.1092645611216749, 0.10934335033079282, 0.037269298258601313, 0.022780470067651784, 0.044473900840241241, -0.0060598467528648128, 0.0061609144853983725, -0.0064768658816174163, 0.034870432574956867, 0.039379809714831654, -0.0013957543834296031, -0.028962960938971525, 0.0046569189597002736, 0.043727516840792277, -0.006941018795027367, 0.018088182930952126, 0.0082023947523770183, -0.009919468949588936, -0.060300576196604963, -0.04961731590236345, 0.032033275510473247, -0.01701144350548291, -0.040658744671612526, -0.017714249349095157, -0.017210598588884591, 0.055569751424096779, 0.064732172425609261, 0.0142514421392548, -0.026792644729731044, -0.037619803421594447, -0.035454019366795209, -0.0033597142606219474, -0.0018841722971697202, -0.03513935986915321, 0.001299552487248638, -0.020445085521288382, 0.037428045865738391, 0.021313292534809361, 0.054608035940519203, 0.044538080793511958, -0.025502640115099909, -0.045072000923970221, 0.014585725040689751, -0.031780543877902773, 0.0068856119179188241, 0.0054808839404315718, 0.010447966359669152, 0.036007093277555829, 0.072977664284250968, 0.0081451532648436076, 0.018677942155355585, 0.0022220414820895706, 0.038133960894140659, -0.022256466219839181, 0.018473324676275091, -0.019158933928994693, 0.053864036371846072, 0.0041178771402385003, 0.042051744426760795], 
        [-0.11959471143292481, 0.00046908871164344848, -0.017806537583872739, 0.060028987830965261, 0.010482881406572234, 0.1134097871181696, 0.060972001775857071, 0.0095573140622628831, 0.024171870288714075, 0.011559219957486627, 0.074094322684175498, -0.0015330263524836879, -0.042433991686828154, 0.0093887703280045344, 0.054396766959822755, 0.0498214705214945, 0.0059163111595279677, 0.023110497561564927, -0.025327700927906302, -0.071391862957095473, 0.0028116491031619471, 0.040639736088270678, 0.023985187089475772, 0.00080593035361482476, -0.017294104303814381, 0.019318061091531672, -0.051785631407524797, -0.06040231096160379, -0.051630865282623027, -0.026410009167490766, -0.025387094238179267, -0.086705148484331765, -0.031667117402875984, -0.03259729996049833, 0.0060777751022725451, -0.030850143895008959, -0.10889563458102586, -0.059264340142843021, -0.058026751391014861, -0.065550940259139531, -0.076388204506250154, -0.014694324172739949, -0.1161029182457609, -0.13336448135124818, -0.013871869353886061, -0.071354914609700726, -0.046295795137470362, -0.046341257133683728, -0.059803897951158161, -0.0556899798471754, -0.088752078300497958, -0.0092766852217181367, -0.010765871754746199, -0.013689713283032208, -0.058953596738130137, 0.018926773961227689, -0.027282178971395361, -0.039857478520104385, 0.012549232916158878, 0.010688241731306974, 0.080319165930301445, 0.15262100299518466, 0.086960661319310489, 0.15252525992290902, 0.069463873136678234, 0.11198174180776471, 0.01737147006474421, 0.015812778630970917, 0.032806003786103988, 0.017746821396218554, 0.073544673139239528, -0.032110260377912717, 0.019566763627964195, 0.029618292548164962, 0.038786297055650301, 0.032627871772587649, 0.069816775578256801, -0.0062508202311634649, 0.051458415560465681, 0.030408800781210513, 0.046777479573010872, 0.040002134296522718, -0.02008807639444515, -0.01263470418907111, -0.045249735132798174, -0.034253925513510058, -0.021875531092695553, -0.045998549423427841, -0.024164107680801648, 0.0075636530397308332, -0.00091421816686280792, 0.035702717797856873, 0.088574974690186048, -0.013734861595105412, -0.0098033211306002566, -0.04282565326207903, -0.0012702256209832369, 0.012700494745847814, -0.043166253351587705, -0.032268233451616377, -0.0035432592129699403, 0.0067580471025863592, -0.0053453862422648962, 0.023287783646401855, 0.074292726072946569, 0.019466527108545371, -0.017987962764354493, -0.0012524056877380139, 0.022263654018090235, 0.0012391427069160937, 0.0013565429618937579, -0.0046713438401512937, 0.016578328153419922, 0.036584208476039909, 0.001097170617763564, 0.011356767972489225, 0.053430214295184963, -0.00068444374047767209, -0.0384483419844764, -0.00058389549992762108, 0.0032910175381761254], 
        [0.0087136750269642335, 0.021184676494079766, 0.044118373966988256, 0.040648025991879715, 0.032447241186740375, -0.013324459836625741, -0.020142424050336942, -0.025882484787532859, -0.0024840579433286908, -0.019010478599687353, -0.002112799546736252, 0.009101832461506542, 0.039625693797873313, 0.017970409804111777, 0.037360151074966881, 0.019343344984558475, 0.014756799698268486, -0.0010528464090698991, -0.025961909366916235, -0.010285595270832736, -0.011165374267784578, -0.0019598758278640237, 0.0087081620119244998, 0.034494100706365091, 0.028652254710913989, 0.040299978182407034, 0.033374343071050708, 0.050349542304153089, 0.0063625956689595461, -0.024011839291926199, -0.042233372866263372, 0.022057516258499003, 0.053376443527016197, 0.020620147730700943, 0.029540439011999847, 0.057651788173259826, 0.067979091933384042, 0.062646746017868765, 0.049240173935889892, 0.021169919247216541, 0.011453866008363397, 0.010299220942533334, -0.0018357416874219962, 0.055929573434282689, -0.011231564367321699, 0.032042065774273598, 0.01571280002325131, -0.0070039251490842721, -0.009101648993736014, 0.016511365940874906, -0.019704911391892579, -0.039092331240561939, -0.045771081107692201, -0.0077691616125735372, 0.049862458553556741, -0.06736549253306108, -0.076963070633090172, -0.040595361000206484, -0.030389356872258563, -0.092514337569437666, -0.057211588696462493, -0.00095436298004251963, -0.045682047502914935, -0.036818864364637389, -0.068243509434178257, -0.027587536268803375, -0.041645167478661045, -0.04303078919819505, -0.054497722201413787, -0.068638447295754565, -0.09778610861618825, -0.065713312081331784, -0.052881969043814835, -0.01339699229959858, -0.019033794283482786, -0.023493218289815446, -0.036063450059278426, 0.027782266928957237, 0.012906654330914466, -0.017337278434917267, -0.064487941544117314, -0.099835383781717732, -0.10289791170276469, -0.064663551431551017, -0.0641236728999387, 0.010795364389364459, 0.024949528393138493, 0.018119888699965225, 0.10433442726226234, 0.10219165136667126, 0.013336681266255849, -0.023600080179398731, -0.089887755873483743, -0.10446013110840585, -0.11164381762372182, -0.051551762026531431, 0.045266919305088242, 0.069677166083149861, 0.13697123941472913, 0.064482888607458697, 0.098551199117389618, 0.09360636141971522, 0.037819160682802944, -0.0035166197905182836, -0.0028484068050251173, -0.031608943165469139, 0.0046811946910951807, 0.017171967845917853, 0.10536533016879272, 0.082514398940340364, 0.010270426109688261, 0.04723579496187133, 0.079022702429357855, 0.073711303154692515, 0.040152485755633946, 0.077664793581362607, 0.044442834049414938, 0.014455191975205124, 0.022399756108926826, 0.017224699650463141, 0.064738964118889505], 
        [0.086171813825423521, 0.043276344722271272, 0.030057182293563189, -0.012272805932473568, -0.0084497919375918426, 0.033191584991409173, -0.034725622268988551, 0.018176702115917775, -0.0097127781766898486, 0.0085166182323308352, 0.030226931221559766, 0.052416098527926294, 0.051668837837120909, -0.013910386317496911, -0.014892754899464261, -0.030204392408315697, -0.023348595772105338, -0.039154056656942125, -0.020299148174262385, -0.026870214226325, -0.021026881302678255, -0.048342252841896659, 0.050216024122317592, 0.0017508003206529706, 0.01784781112040023, -0.035663337208851044, -0.055701361822959372, -0.034565501095180508, -0.0001449409970588969, -0.011843034224678937, -0.030725274086672746, 0.037181115372523707, -0.014334667924480585, 0.026402505410657532, -0.02157219826244711, -0.050784579030140373, -0.0067591136459494716, -0.057082366222224006, 0.0016645285356211514, -0.0041546960728905628, -0.028755773827423173, -0.03714082137578157, -0.058966690069682928, -0.016029429438384403, -0.0031721930051920033, 0.0023077585454026051, -0.048021525210782345, -0.093376311841670362, -0.055542556473841764, -0.11398186442053326, -0.027456752012806465, 0.016614108182758672, 0.0027741155498583747, -0.016348951668857664, -0.072146978965869676, 0.0015395126311125717, -0.052682834934778711, -0.060378727516170197, -0.068266862134838471, -0.036771885672760463, 0.11935191252954988, 0.10244934755298962, 0.027542982076475292, -0.032070419062542696, -0.022385148133489435, 0.056289823602901912, -0.034119337486394785, -0.069686895736583362, -0.049955802720861683, 0.029733455414129237, 0.20068856127367213, 0.1162085020692212, -0.043410251863060023, -0.0030593783022195981, 0.00063195918916066768, -0.0015553440469552871, 0.065277285494402815, 0.010466423234828076, -0.020040852081297265, 0.061755629831554908, 0.12136556526370923, 0.078247187170092367, -0.08072517073390352, -0.075077412337979363, 0.012154159684612222, 0.036821934539862315, 0.02472102052087196, 0.040715988579243925, 0.021622540244536845, 0.038658271107198355, 0.052578818327128657, 0.083631018106240448, 0.04788200302645329, -0.075156815694368884, -0.050687783633637906, -0.0088389729616671769, 0.091034820744931355, 0.078447244012908812, 0.06227592062517176, 0.060594909680654375, 0.01693797817353428, 0.06408103556895299, -0.014547815241575009, 0.065658196419567896, 0.018129490859442446, -0.08798530089434585, -0.026622130825924434, 0.060886174973499241, 0.077750707436133701, 0.066437874598894484, 0.019421765119352175, 0.048504723287502369, 0.07041372195878251, 0.035827424258234999, 0.083548417322279078, 0.060027813387995552, -0.005432499769252413, -0.0020892485624801555, -0.030512250542840812, -0.00047303040700700464, -0.023511765584947494], 
        [-0.019836270599180916, -0.0017613217539587485, 0.020980704061465912, 0.032444977290163338, 0.035482360716385192, 0.051463914122762917, 0.01387059443680283, 0.012773320795543788, -0.0056081410148611094, -0.011615184428147185, -0.044318141985502046, -0.060123468169623585, -0.014777416807908089, -0.0053582542779810755, -0.054379500064678565, -0.04137798510918636, -0.048976925694358256, 0.076953418090969714, 0.026914330698442304, -0.0014016954910277407, 0.0097461019716972574, 0.0046963778137781992, -0.0069130491706136665, -0.040628477563491361, 0.034128908242092887, 0.011113734772594072, 0.026923522254639856, -0.034901970199125179, -0.083572453474777542, -0.017956322789516803, -0.013806163282359438, -0.06239361835505905, -0.0041426826588957799, -0.037637167036336384, -0.037724529658588551, -0.013774694560670805, -0.057704817420390679, 0.0048236498871859993, 0.07228227823302627, 0.032161882846836277, -0.065744929925494702, -0.043635280281107837, 0.00026056292826356561, -0.019142520605292868, -0.028407833505873292, -0.057929038649120537, -0.05076593603511028, 0.034535717074437706, -0.092192499765500688, -0.10532839199459904, -0.012076014852148213, 0.047512930831949463, 0.0020511676860901244, -0.026304839763800526, 0.059014485786431731, -0.04121884738294615, -0.037908511573603157, -0.035253683963737445, -0.003764225518756617, 0.1058253214787373, 0.15061197856457278, -0.044965430671133816, -0.038672944035853724, 0.032859085087083864, 0.036836423091902562, 0.091521334284663594, 0.067930349704352549, 0.001657465766571567, 0.011255029837672278, 0.019714575278699853, -0.046029623685046345, -0.0051819605809679953, 0.13027259585766382, 0.076244041762153464, -0.062532299911886025, -0.073583991135358184, 0.077174533475065421, 0.049432650608868409, 0.035864444263751481, 0.035719679749892569, 0.020318474287435453, 0.02861748003954917, -0.18444657518134203, -0.027969189014098672, 0.14692467780203242, 0.14809587852238354, -0.03290596643929547, -0.022816759205720398, 0.081642802242600315, 0.073319424746687803, 0.096551558434272475, 0.057497490294592224, 0.019593324904571427, -0.060101281088941985, -0.055289785260653201, 0.077752523928707032, 0.082231188321325199, 0.043012682164453975, -0.084998541929117044, 0.047226746411041548, 0.11708089871954172, 0.073957832946588489, 0.068481921009760804, -0.025787797068816443, -0.042547833499527232, -0.028797349310348233, -0.028665140255539324, -0.050465025239779027, 0.0099282727284533898, 0.0074795255927929058, 0.035767022417524885, 0.013422682869269679, 0.059916646550554516, -0.017252353019081054, 0.00014025453940576249, -0.028232578424891228, -0.037232130930961754, 0.03807283410302556, 0.017200727451423696, 0.048123699773181455, 0.082874942910174415], 
        [0.0081889230474460895, -0.058861620555009528, -0.043961481598665794, -0.063177035412865831, -0.018314195969373462, 0.034878450378990955, 0.035304175797457732, 0.014293668892683664, -0.027456916509392928, -0.068367628925221052, 0.001669119251847942, -0.040967945915871377, -0.03943941310209053, -0.021637978943057967, -0.037684292945808551, -0.017747783335439818, -0.042288824584737462, -0.0018176642328489589, 0.030934243801926706, 0.011733255516551085, 0.02708984163398926, 0.0017191072696037882, 0.043276004610731736, -0.072532619647830976, -0.030223836313618479, 0.021071961346727626, -0.0074147497494400638, -0.043925229543362393, 0.020288776715248001, -0.034527237586023503, 3.0471360021155913e-05, 0.026067397032741996, 0.088540464798406104, 0.01413941347644106, 0.022766394260563719, -0.0018480555055750275, 0.042675799328757251, 0.017054471283286493, -0.096746137235194679, -0.10757348404679792, 0.070754873906539423, 0.01575558139579953, 0.0096692478638847699, -0.0032289840854645077, -0.015101060431773538, 0.057926005617948362, 0.05010944609735675, 0.03438493002343132, 0.05420170443576617, -0.15712629885767235, -0.10755100231803701, 0.054215855416940288, 0.15265730024840482, 0.055888119645312602, -0.095941401277040039, 0.03328672046334586, 0.09353086897835676, 0.14384249052592857, 0.12025171427727349, 0.055496873043967186, 0.036285296296363331, 0.066833079592868674, 0.042161382611612397, 0.047587995565539137, 0.021867654432298031, -0.0564119641379216, 0.067603194336726846, 0.031338290457222959, 0.050713005156545185, 0.052148045957678787, 0.018648322758803917, -0.050759157693301679, -0.044588001217457346, -0.039312995512573896, -0.059936417610193665, -0.055184693439938245, -0.019957035127630418, 0.050192754841022036, -7.1757395827626302e-05, -0.033091702048858869, -0.034428104974273177, -0.034413465790208278, -0.023267082967762434, 0.031901848606379901, 0.020238538810505934, 0.0042221466771613057, 0.015602237108089854, 0.060847091700473442, 0.041401859346669609, -0.0034146015221089565, -0.0074559961064889491, -0.015893641385376203, 0.056392351962400708, 0.063354540983474289, 0.0087304477448395465, 0.013014118991186936, -0.0020131002441534374, 0.045231849909967176, 0.035378207480516677, 0.082600299684899986, 0.033715599170522123, 0.016512586361955336, 0.015814071825167364, -0.016536993108816449, 0.022388288048192512, -0.012153283754204335, 0.024539743316687932, 0.023108504039178981, 0.0067064141727297411, 0.01196006995554437, 0.01808564781799793, 0.022564539714186704, 0.029240080645026825, 0.0070031422851894731, 0.042819312072206572, 0.063646286047359391, 0.071444911692377322, 0.025002430371161628, -0.02988386458099207, -0.044839473616139255, 0.0048106139958749294], 
        [0.00760442586653437, -0.031647161439197435, -0.063172441009770042, -0.074495313815639272, -0.018994314341887673, 0.052826629441971945, 0.032890225420068343, -0.013629701917450165, -0.064807806031904142, -0.029393773930843553, -0.036471213615816359, -0.0098221768646617295, -0.03512116201717283, -0.03943473473657854, -0.028818473185370876, 0.03850092276204857, -0.0049328775196173652, -0.027624833158639117, -0.067846866445995579, -0.0011073069182334881, -0.05184142360008933, -0.055930573972024514, -0.01741185166520046, -0.057527466793733051, -0.055499304805210641, 0.028375118140619545, 0.035910848122856304, -0.01496101773521763, 0.011606597964401194, -0.0075876694292307534, -0.0045075356731610269, -0.0082002978749069391, 0.013779697793775076, -0.050073087994743797, -0.04908451276428849, 0.070063159827065333, 0.041211290659651782, 0.044221912404898908, -0.092510156542300173, -0.017245900432612329, 0.0054614497516805513, 0.0057317904111747475, 0.033492765079685211, 0.0086141350275894379, 0.019265007144101023, 0.0091441578432992152, 0.05844498925238964, 0.11212586773198896, 0.0075004000045361648, -0.14040933702091665, -0.13224491934624966, 0.046900879586457916, 0.043118887082018047, 0.082579685212893703, 0.068683773505795701, 0.041317670630771582, 0.085514694418916445, 0.023787162317564083, 0.088925450535202996, 0.13628690428327328, 0.0054697771027137181, -0.086543108426525212, 0.025964600319029363, 0.10587654052203503, 0.094459611375660418, 0.081346300231989077, 0.041592204326461928, 0.0066817887839110994, 0.077674394412019773, 0.0056683876342300127, 0.042096017073306194, 0.032191303817394351, 0.030452658585607126, -0.025984256753419858, 0.025271063575447547, 0.034211665699899252, -0.011964155896605516, 0.037076527694802561, 0.04508649436861286, 0.0051587756376244853, 0.02880706384910163, 0.038599720493081482, 0.024875515796822671, -0.013891640751740861, 0.021755723908671087, -0.065358451817548596, -0.061057887606313227, -0.024592482102494873, -0.0075328437080993543, 0.019986689878947826, 0.040909136201569898, 0.040437015091600761, 0.040034799263731949, 0.018812605341074366, -0.030276192569776476, -0.030270565458533134, -0.016190643318727164, 0.006809905422805987, 0.037916482000601909, -0.038319315218418547, 0.010306777237133882, 0.015829001844016963, 0.040800282130470392, 0.05615449330992818, 0.04786297945430712, 0.034288336490960442, 0.060681491982977377, 0.0032702943730984618, 0.0013152591778692133, 0.060954595988390148, -0.040791733055038019, 0.016183415755703048, 0.019528209635753736, 0.028893550793992792, -0.0012918699135948258, 0.034618023394595597, 0.043405940357484581, 0.029089370346889853, 0.0088268285651632861, 0.018259597579594153, 0.075373115466755555], 
        [0.027450771793035074, 0.041262824664966939, -0.013144559153806662, 0.012207909150661903, 0.0092477333330207509, -0.012848538408191307, 0.0045635591482721073, 0.010876267701812489, 0.02890459475433247, 0.026391802511985279, 0.010732731929258464, 0.015032366451770748, -0.029908421422182082, 0.021411606012816192, -0.057536773751919248, -0.053416159980357834, -0.048865576382574959, -0.035570469790391759, -0.018461415692559838, -0.0029790588112649907, 0.032112270223907544, 0.051477612075197313, -0.0057662482825229858, -0.017766588527875229, -0.028238377182112806, 0.023528561546172357, -0.04216007246124067, -0.041032389593882487, -0.06680999261373205, -0.039632149520821544, -0.022226688774540718, -0.0041149160188688749, 0.032302323242771602, -0.013890604091560638, -0.034276275118401742, -0.0051502741378656337, -0.021066308656931813, 0.022151630661472133, -0.0022992341581987014, -0.062769638896883875, -0.019723620835675727, -0.057691275310445302, -0.042378894883198112, 0.028983236593136813, -0.019395597488888486, -0.029331542199886471, -0.010745732705029043, -0.013921448513401852, -0.029609437928951193, -0.12537702206143342, -0.095617188384870627, -0.035129241573632897, -0.039982481822552207, 0.0090952641871177801, -0.022086955744048412, 0.029136077983963546, -0.032593887678401656, -0.020183882523267208, 0.061602041888744921, 0.15458403910635235, 0.16957224934392182, -0.040427938845436127, -0.14425377583803428, -0.071643094865452436, -0.042253187333205683, -0.027875249558229672, 0.058879183410993005, -0.00047065192114704134, -0.043920137358857254, 0.05496654067473021, -0.069296625387029825, 0.11118740085537496, 0.2366565621922726, 0.12148462555955851, -0.011433917074149466, -0.048194932808641386, -0.079327638115028978, 0.0017254253058667443, 0.037708824963847712, 0.042182164843196458, 0.035829815786488792, -0.073357898816589731, -0.14576211923026078, 0.048290332077963939, 0.14879922368454307, 0.10064792412919202, 0.063705043016025004, -0.030692614056442261, 0.056255605990735619, 0.10255361685355899, 0.078604273448134934, 0.0164658420906807, -0.0056463798547232141, -0.13298053803801668, -0.028765330682998365, 0.05939355800317566, 0.1402292273171811, 0.011410410356375363, 0.016039694083752262, 0.032382125330787596, 0.10195998512893362, 0.061382477156473686, 0.082411738292981068, -0.063666416770640277, -0.018779258750025916, -0.038365933733688989, 0.077993417865157774, 0.037853307835213006, 0.040996995997873285, 0.011082725441736859, -0.0056644922101654026, -0.014754708114634627, 0.018864758145484002, 0.0075267868116950659, 0.014018215345551104, -0.010120746615713067, 0.019767300172685923, 0.0399406347657522, 0.099260521955006772, 0.052915278088062984, 0.022179211937403773], 
        [-0.09716085296718216, 0.021642032331918873, 0.029135209902749426, 0.013999315045878299, 0.059316507135864754, 0.033067474971013311, 0.0085646291438248312, 0.010286012651575784, -0.0083817553445004675, 0.018753974201751927, -0.030375458058801961, -0.041904429008824615, -0.055862255737819402, -0.010903003336047129, 0.068264567248243077, 0.026035515966818988, -0.0012923504068929892, -0.0017623356640995083, 0.005468527639103056, -0.021755603593697069, -0.049505653044107159, -0.066112447625837761, -0.022252491484929221, -0.0081982834517316944, -0.037367281479721751, 0.012774986112044792, -0.062950628458933039, -0.045045256304144507, 0.048001463004758223, 0.030007357346820335, -0.0018969086500039145, -0.015723154153853357, -0.055120061189717733, -0.012097061948313372, 0.0026362460701923537, -0.072632828079189402, -0.068872601631521924, 0.017772853215430318, 0.072338704068217213, 0.018535361160719493, -0.045281275098323914, -0.011332122576621917, -0.027280199109967439, -0.058723208914210012, 0.026327853635139689, -0.010818050423826983, -0.030610533234455353, -0.028512931740957648, 0.0012488868339177971, -0.11197453226805695, -0.055269858760533572, 0.01115586891047237, 0.0082228892980596331, -0.032306255269305653, -0.01502375948544021, 0.049382773019192819, 0.015328141296235664, 0.037662383891850018, -0.035013020016662372, -0.029449621040367344, 0.12073107144262626, 0.022860361772779912, -0.023256473556698243, -0.083648467631806001, 0.0074002327452034888, 0.010004461021878228, 0.099371522997238476, -0.025221784791065922, -0.096640580498928999, 0.053094250603911208, 0.15893756445998802, 0.033387109550868377, -0.04808482373966641, -0.010053840415886486, 0.037823846526014906, 0.039700388908815387, 0.054256090345082275, -0.02401468040990247, -0.02904286935058728, 0.046138517230890852, 0.16216994825276426, 0.016089864404032872, -0.091198675686446171, -0.076360513817770065, 0.031988084842499293, 0.036454996777462445, 0.025464944340111234, 0.074147409146892329, -0.046979415183956125, -0.049629380484653082, 0.079771651767589866, 0.087758100333019146, 0.049828916696142006, -0.03045459513307306, -0.024452096514010858, 0.0670092926908578, 0.1175218881400763, 0.11426518181326391, 0.074066541158350152, 0.0062338373377257422, -0.043366039912113838, -0.039950077856114423, -0.035409502206233817, -0.035863781498548762, 0.01781322399419219, -0.024727256297427454, -0.022275869771454817, 0.076761480744383326, 0.062045464769250311, 0.069837551721133845, 0.073012923366347696, 0.060190713224507614, -0.025405925372675192, 0.023372682335303596, 0.030477986314785502, -0.0002301213960560905, -0.026087148164954402, -0.019019953457663552, -0.036714807308876246, 0.058817728969904087, 0.068381158254896449], 
        [-0.011512245145694655, -0.033323501539032144, -0.077599795617108003, 0.030092014051291281, 0.036890045147122533, 0.015052871160868519, 0.028016899365407681, -0.01018960630350095, -0.078317704208198474, -0.059233122702466653, -0.01852728410941332, 0.053961496737718939, -0.026974467838019357, -0.01804059271627316, 0.044307115164341854, 0.015818943834284213, -0.031953640726807273, -0.02740130304193715, -0.046790507127582773, -0.020608188350333664, -0.026272324411271628, -0.080186654850075562, 0.083845698779704644, 0.001406750687297384, -0.04985438587843697, -0.021416757758446515, 0.066537065419636068, -0.0073244717556784477, -0.018144551509999312, -0.015182424540353442, -0.045130661218423247, 0.029947581486485145, 0.0064481392557531048, 0.042274921462388107, -0.074358994945938048, -0.014176533090006271, 0.077655160397082798, -0.010551243188291676, -0.12637948483078057, -0.033586964208765883, 0.062817071093444254, 0.0053909310356757764, 0.025794636422243125, 0.059721803691538844, -0.082995318825107134, 0.0042617087053962791, 0.10584522112949336, 0.071364312990742557, -0.026422021145727979, -0.16100970751240665, -0.054720311746107982, 0.048999446881141787, 0.075434840832607986, 0.010535530941215229, -0.048016579048604152, -0.080339712203917474, 0.039576695247329777, 0.036637245201813592, 0.12098760898076155, 0.1354854848272127, 0.051194513568370764, 0.018225873276029245, 0.085661323891760843, 0.18621829874239049, 0.10338152957413216, 0.023906079145933318, -0.0041822936350238149, -0.10643206407862182, -0.078124959614174122, -0.073468903649519218, -0.048419863477576881, 0.015108685112589434, -0.03264596890745973, 0.036235615700722507, 0.0080904621985001118, 0.11267954130800725, 0.10278655485723889, 0.04428157837866404, 0.010681413475295332, 0.048922714210986845, 0.05487352908643979, -0.018064605730554309, -0.018189270455657311, -0.071125211325311799, -0.10260837121452346, -0.052490034378075492, 0.024031776304340315, 0.019694437269126286, 0.049636749977074832, 0.032195647589762615, 0.0083280385163384298, 0.070138954785336591, 0.067549912235517831, 0.057433630830398048, 0.020438461876702188, 0.0032421342973983297, -0.050695230761191784, -0.015383897879732399, 0.020203015057404895, -0.015662916885770546, 0.031709069862233888, 0.012505528157918055, 0.02862303507568463, 0.05946324529661641, 0.011987063839091858, 0.029655839160397587, -0.0016058379565756595, 0.032924927535037493, 0.031881210667308521, 0.050423216186573444, 0.015557492045852508, 0.021385779192598299, 0.0099932753661932591, 0.01435070815322266, 0.039479442983270135, 0.066851597833738896, 0.040296519398888356, 0.0099526419122588083, -0.0023557651823443021, 0.01814873401521766, 0.059119163848392789], 
        [-0.015757148978644712, -0.049129440678390021, -0.023997668342014205, -0.0210026283214945, -0.0015357942036982875, 0.0021065236794876874, -0.037107041689779741, -0.042351598868691012, -0.061162744591386403, -0.034051484714528485, -0.022720119467757083, -0.060739564477761535, -0.026757001184959561, 0.00055934070843080205, -0.022616038258239973, 0.0070861976821720955, 0.013566118550461286, -0.002811474898052356, -0.038580343099048009, -0.014823359019323232, -0.034835879559876048, -0.026656015152450085, -0.019477669860262788, -0.012106727392046226, 0.0042483765645461719, 0.016084907645647312, 0.00066552379900409325, 0.0016008277659419479, 0.020524088921093323, 0.061832709878829155, 0.0036079221207767423, -0.069861609806567429, -0.027833309957886129, -0.032568850186226357, 0.045124349364128763, -0.020541851129595723, 0.0062259884473188087, -0.01720385416905687, -0.06713753737721917, -0.021510388883911769, 0.10815002779082451, 0.037209771283314999, -0.006027660384665387, -0.016395255789040913, 0.027666465419402944, 0.073069001175329412, 0.050575531097015479, 0.042567636344617243, -0.040728282661866906, -0.1802492901591394, -0.05180382591629118, 0.068698953085444853, 0.10468627376672648, 0.046930524622527739, -0.024345410159748448, 0.081518930532773398, 0.13437717506819735, 0.12767282811582661, 0.058828417946620012, -0.065397413329707027, -0.010971808997436964, 0.015964690557018213, 0.064316346804789856, 0.092047644756938635, 0.079924220572783422, 0.0045625327525128379, -0.018286902500448191, 0.017429694084018413, 0.076145282866436848, 0.042835485463588514, 0.080206981146474676, 0.03611723597888207, 0.047379298714446218, -0.019874915866582681, 0.037657544445781559, 0.026115602677467167, 0.07158768649462971, -0.057638081455141071, -0.08380678196623717, -0.020457096575091122, -0.0066815930156417236, -0.010481709236786138, 0.0098188814326595486, -0.018910890692478463, 0.027174343530639883, 0.0048186838638660939, 0.0084831162501448551, 0.046647277306884644, 0.074896293430210287, -0.0027052061320910203, -0.052390985898152595, -0.035810710910889471, -0.010963380484187036, 0.036472476309506702, 0.015668137547351885, 0.031880374182724422, 0.028320973681942418, 0.029976561112701736, -0.0029437318832178684, 0.034619959909237122, 0.085724767242456062, 0.014661848811874373, 0.057456266218902825, -0.0077949735252234144, 0.056966918817289783, 0.039173853530589081, -4.3950988622729753e-05, 0.039524712301200832, 0.033815106883289522, -0.053148463650792468, 0.046135279317716708, 0.034368318225618644, 0.025850606000479254, 0.04364205260106227, 0.028915316089906759, -0.0046553412351980628, 0.04069494423398308, 0.050441914764901605, 0.023379190793916069, -0.0043673996422118923, -0.067829031610357429]
      ]
    }, 
    "numPatches": 71, 
    "patchSize": [11, 11], 
    "canvasSize": [114, 102]
  }, 
  "shapeModel": {
    "eigenVectors": [
      [ -0.25918455544134111, 0.049312213852896816, -0.13803814349503329, 0.050835603939836334, -0.00068526965694544549, 0.019143738616150843, -0.023318915050125934, 0.016196086952924963, 0.0036093752391785842, -0.23833211080603292, 0.020657546002335929, -0.015932434823103976, 0.064261608443704807, -0.090634823520772387, 0.022055884293868452, -0.093725674338304948, 0.055117695896949336, -0.053233288056152898, 0.0062574485928111176, -0.094495464626664985], 
      [ -0.015370973540248745, 0.27558869894124727, 0.043057403787850584, 0.01759173852583432, 0.095866808468541148, -0.037458824213247942, -0.028917777439805503, -0.1301742315782318, 0.06386866526612256, 0.093354241092818896, 0.031861264081330061, 0.020242117972800993, 0.2729400100293749, -0.13041313331165144, -0.003144428538369143, 0.065211427933205751, 0.23796562485879558, -0.14726562188674774, 0.036056872536145632, -0.12952002576446747], 
      [ -0.27438982091500386, 0.03985289630911687, -0.13450394922360431, 0.029787453137347236, 0.079525846479578499, 0.1166451560574001, -0.035665518184535575, -0.0024171773341205138, 0.071000059730337739, -0.19400193419982181, 0.047707150663056051, -0.060782105477894637, 0.075256164849824628, -0.08653693334002896, -0.010494049605053951, 0.0038623295139426361, 0.019088595829792714, -0.010833090632415426, 0.017289975723166304, -0.048709062934321957], 
      [ -6.0611116520893973e-05, 0.2907441742190161, 0.061164679549491452, 0.040564059065553715, 0.096173988191783952, 0.0062410078701856178, -0.098421939897006178, -0.12644765063670182, 0.052339831131799096, 0.14548890663706882, 0.019044522282416165, 0.11593290854472814, 0.11303783009344959, -0.22653789366303903, -0.026028516734774989, 0.14284328457404633, 0.10352737588140595, -0.031495507236199947, -0.047636212684012275, -0.03140572862553874], 
      [ -0.28061079598099281, 0.028500046273409352, -0.13348176497662428, 0.048224158070504508, 0.11475625312727089, 0.1635783651687025, -0.048639735952709567, -0.01032325713887703, 0.044309390236214455, -0.11229584269820136, 0.056896751191640858, -0.046270327611954834, -0.037397127347547118, -0.13317587328341224, -0.010863704903627459, 0.039312364878040615, -0.010946095593356263, -0.012651374705748869, 0.011105713279978752, 0.030546324103711175], 
      [ 0.014069445433529176, 0.25865071929613015, 0.065608406647573517, 0.045936250949625612, 0.077032475339967169, 0.012716551912464673, -0.12470762874060115, -0.11891551534656636, -0.013669877748084366, 0.12043230602261967, 0.011009487547690655, 0.19012847506135658, -0.032169415274754781, -0.17265241492952871, -0.03662652696603412, 0.118289070378352, -0.077253487513161051, 0.049107942445861481, -0.088365360868488355, 0.03469223204236508], 
      [ -0.26489741712968851, 0.016037983258916477, -0.15478385413970339, 0.054519082640759275, 0.11072137606892116, 0.13806773721053445, -0.083151184293707048, 0.0008468885185207442, -0.066659068943074329, -0.014543116847374027, 0.052713555008319479, 0.027388442494223043, -0.14573813333209579, -0.069109651372654984, 0.005871228217576737, 0.038653027715923813, 0.035448688300325056, -0.027970894206668644, -0.0058316372883612678, -0.012350421356815827], 
      [ 0.046354114624841534, 0.20340754175093087, 0.067448564665621949, 0.041981284856941269, 0.013920156097499622, 0.049310247697231468, -0.10476409205774084, -0.1614855579210141, -0.057377287008890027, 0.068718208751115673, -0.05587479923890136, 0.29988249724968485, -0.16587089947669525, -0.01890180931989649, -0.021824056547298801, 0.010150208790268851, -0.15609860291657204, 0.1312205105925747, -0.13142200190156078, 0.13137089271366431], 
      [ -0.20187217065452481, -0.003452715117513167, -0.14526611889720323, 0.05454907575651019, 0.077670454771007258, 0.099693213880673592, -0.11162648299874728, 0.027564325319195671, -0.17000009910036665, 0.052817365052531207, 0.0046486044929281642, 0.13801187294048864, -0.2266237146523632, 0.025099449481841285, 0.057390225910465997, -0.010585092198184431, 0.062813389289856691, -0.066384169837743839, 0.029034161785278373, -0.11014692197967367], 
      [ 0.05991940055025699, 0.17456494999571184, 0.045546642557409402, 0.021382186705339836, -0.056054364424077963, 0.055753394121748442, -0.050949925906492943, -0.14366157895544512, -0.05830434414633863, -0.039881695287267038, -0.029733515204825374, 0.24120260128368676, -0.1538961465172124, 0.099337119716716715, -0.0079105830001869742, -0.091413272768396156, -0.17108589062548879, 0.079535911804179765, -0.070080057453946992, 0.10304814751540183], 
      [ -0.11406660762823516, -0.0077005020180582872, -0.097128049401724342, 0.048797807796913707, 0.034682059363515927, 0.034999010561767185, -0.086920613440328531, 0.095835584563062792, -0.20896282413005124, 0.082039982644742562, -0.038156988159574405, 0.17097326940727753, -0.22949142171270803, 0.12076557157673402, 0.083445432006382478, -0.068849538566076313, 0.10657376324661845, -0.11111649307286314, 0.14356689523278601, -0.14730065680491033], 
      [ 0.050548778821860645, 0.13771378257629771, -0.0080120262544439661, 0.0015714671798822764, -0.11898190894868095, 0.070033187766031735, -0.016790814058872006, -0.11155749843931904, -0.082310332466198954, -0.17681195482737469, 0.031785253577691179, 0.13574659239584744, -0.030874986613359912, 0.1405687146519477, 0.011927426509590985, -0.1227614705931421, -0.089723294438480719, 0.026135494001854082, -0.012284577171365347, 0.045455675500381237], 
      [ -0.010279976005766552, 0.0013953711369666829, -0.042500498536138069, 0.040683978397024631, 3.7807469383829492e-05, -0.035049138884785613, -0.013909369315673659, 0.16422475055913677, -0.15344312139650018, 0.063720470459391651, -0.032068761930210264, 0.093030342984284309, -0.10431016285986311, 0.21547866370530241, 0.062045477425420305, -0.097500495716328767, 0.082375488307342939, -0.15217807555911966, 0.21187698224877943, -0.078833239119552825], 
      [ 0.020506937371916192, 0.080791931896572633, -0.076177957918269756, -0.048751387201977602, -0.16094247296613101, 0.084899633131099758, -0.019595650306680201, -0.042553966112102715, -0.092199349298924149, -0.29635110512711466, 0.068276859562880418, 0.016316501361074986, 0.0977532232933912, 0.078153996089609157, 0.043342705639799792, -0.075376215034119079, 0.033022672135110356, 0.059877672085515643, 0.024112321053861727, -0.088305909642850289], 
      [ 0.040972435984073616, 0.0012967065227411402, -0.002000207225983406, -0.0014908104373190269, -0.003000288186105616, 0.0021443336138592022, -0.00056119264463012734, 0.19612476201187889, -0.0017679409974512422, -0.0059158575708700006, 0.001246332868643063, 0.024610291061966771, 0.0022006976231375153, 0.22487906560306556, -0.00058423344006912348, -0.082013296389981893, 0.00042633285032589452, 0.0033161283064082614, 0.27617149440602101, -0.0016608591645301402], 
      [ -0.00080695403900046543, 0.065839220606613527, -0.10155889748442845, -0.075694689232978049, -0.15233719604557774, 0.10887679778045861, -0.028494100773441909, -0.0038626863414961618, -0.089765768359496456, -0.30037286375515754, 0.063281539229366579, -0.00048470083109702911, 0.11173863457663408, -0.0044290036927684961, -0.029663978449883416, 0.0016152557001812284, 0.021646704240415274, 0.16837372165287265, -0.0054392104719952414, -0.084328775256601624], 
      [ -0.011079460967186745, 0.0017868787382064075, 0.039468046485298607, -0.042572005521116098, -0.0063748590623500549, 0.038364866443237312, 0.013127007549216608, 0.16577295084318888, 0.14969379516837616, -0.075339827378120242, 0.034732282019908356, 0.092315739679176084, 0.10807828706143774, 0.21223426285676811, -0.060290750609961828, -0.094456960258941292, -0.081011345255933787, 0.15441773571152892, 0.21076325569431362, 0.075295075514214327], 
      [ -0.020086262263831433, 0.080784221136093501, -0.077792332238160136, -0.047111656712928544, -0.16081617519949215, 0.08345374086973463, -0.020128133010895059, 0.03605464598109967, -0.098169645018887586, -0.29361230607088518, 0.066961209884496387, -0.019966901109740753, 0.093570222859444496, -0.086577822140770616, 0.045752123360719515, 0.079156826088724458, 0.036240583447842867, 0.053839253272886564, -0.032436240265910007, -0.091341473993148486], 
      [ -0.11596849930813261, 0.013116985772102279, 0.09673725558367309, -0.048698089400280024, -0.039340055065449978, -0.032214325050749448, 0.086192072185653293, 0.10015382155604435, 0.20555982124599481, -0.08893830045220219, 0.039378936478120186, 0.16549568388279476, 0.2280977566161379, 0.11513705136942343, -0.082911080726012304, -0.063962435697575537, -0.11002395504744661, 0.11205940383716784, 0.14393926371201282, 0.14897623582114389], 
      [ -0.046018226654389947, 0.13730378118266226, -0.011830212484348238, 0.0034916534255774985, -0.11752403995019083, 0.071356957547947825, -0.020200276481912433, 0.10769747793844867, -0.090474375313770117, -0.17344452956176182, 0.030258179923130624, -0.14237336413481319, -0.039887226837477197, -0.14521482782108094, 0.015203825792165448, 0.1253772086249566, -0.085457392267479518, 0.021740034295991806, 0.0066221299522606844, 0.039620488272067877], 
      [ -0.20407493663765272, 0.010323501069181677, 0.14694685748653921, -0.053664853798831569, -0.079817352706514327, -0.097420623037042367, 0.10953377373376612, 0.033199598310539771, 0.16757254284815049, -0.054346740346640721, -0.0058157513624373935, 0.128407537240043, 0.22038833739666908, 0.021168603923265028, -0.057657198208392824, -0.0069775024105930283, -0.069501154359835005, 0.06946440186485206, 0.031771035766238805, 0.11411900652766307], 
      [ -0.051924253325491061, 0.17429362677494192, 0.039791494349163584, 0.02351346509856846, -0.052952634705427631, 0.059635560339677332, -0.05530568748498594, 0.14246483064354179, -0.064952853084939866, -0.037771093229790963, -0.029527419227873608, -0.24644974400170183, -0.16270006974558388, -0.10024837118797744, -0.0056447186125911791, 0.091759168888908504, -0.16847994951283224, 0.076860367844077793, 0.068882496250227424, 0.098631219586352598], 
      [ -0.26651717704026862, -0.0080164106263589923, 0.15731959607269572, -0.052823798159396022, -0.11008740922724003, -0.13601908508035354, 0.078961634198716116, 0.0072046965504718235, 0.06434815522256071, 0.017237605925488533, -0.054872736396181288, 0.01555938369373866, 0.13909397820541136, -0.068311802263165369, -0.0067259934445725866, 0.038223390076618916, -0.041567552636033261, 0.033115987080266168, -0.00065239724213115614, 0.017513549002971779], 
      [ -0.035887879390111725, 0.20388129416118472, 0.061301672646978604, 0.044095407904282111, 0.018268995429649083, 0.054708400454622629, -0.10795691158419232, 0.1613269815772915, -0.059957480403291658, 0.06809228593281387, -0.053755882208370853, -0.30072835669094283, -0.17148068120730858, 0.021608331263092584, -0.021575953678716689, -0.01166429342672437, -0.15458176445677432, 0.13001740161453895, 0.13154970526426593, 0.13078272042359626], 
      [ -0.28094716730045705, -0.018293619273973952, 0.13596157055287469, -0.046378029155166117, -0.11163412106971979, -0.16295080001590082, 0.04369167593532855, -0.0056329745488482401, -0.044813277771595147, 0.11695075889501486, -0.056419131800497152, -0.053720719978482184, 0.03610146135197298, -0.12627443909954211, 0.009413117312335656, 0.034624267714095491, 0.0078957648480735831, 0.01457518010193265, 0.01457647110568485, -0.029156635373888184], 
      [ -0.0030095351372760536, 0.25957232272307268, 0.060301707578672446, 0.04779944544237448, 0.081491244326026363, 0.019147559060772333, -0.12652610020709312, 0.11922977407437645, -0.011914602642074751, 0.11591728350468562, 0.013241249151963251, -0.18815914671221162, -0.033616973409557299, 0.17776230094115775, -0.037025879925952632, -0.11974525580807727, -0.077624578833956015, 0.048571714178187536, 0.087859549048355357, 0.035868084615775842], 
      [ -0.27417464809767067, -0.028373991287752278, 0.13680799115243833, -0.028167150771118237, -0.075677341587864266, -0.11630896046960598, 0.031762513797500155, 0.0025635506503083479, -0.068884128538267586, 0.19958008736846725, -0.046920279658476421, -0.065299807041029514, -0.070746960308592566, -0.0775499361085525, 0.0094610434231444662, -0.0017650943059576707, -0.014997421039160977, 0.0095845597607117083, 0.019152234841120198, 0.047434694682454648], 
      [ 0.01086461393670894, 0.29208790595457051, 0.0558211782209257, 0.041705477694428672, 0.099230722224523782, 0.010829050067781088, -0.099749938133940966, 0.1264447678074071, 0.055094856748521721, 0.13773729035274807, 0.020908213939106027, -0.1134497193930856, 0.11591336845781973, 0.22976959221519996, -0.026421533223325799, -0.14288458971935103, 0.1041987015745261, -0.031897633813640039, 0.046918481646092192, -0.033299284419087971], 
      [ -0.25837833137347882, -0.038422717347508406, 0.13962647397057326, -0.05010350995339688, 0.0044594765706108905, -0.020603827321858052, 0.022162199206826893, 0.021309114011150883, -0.0010917590066741203, 0.24182309333952515, -0.019386994764398407, -0.016717109149155369, -0.053464810497762846, -0.085429543562532614, -0.022162591507878082, -0.096220679356854744, -0.045705099076477573, 0.047393448869088917, 0.0048328631429115157, 0.089322356732993768], 
      [ 0.025564398752122953, 0.27731664250606547, 0.037588786187509202, 0.019579739085062099, 0.09576548245146986, -0.036675994046972818, -0.029813530107823279, 0.12943556489477467, 0.063961254324508471, 0.083897561937033918, 0.032649943180715131, -0.019599083680428387, 0.27525863734504724, 0.13388072923873884, -0.0022735435936592774, -0.061470425631868553, 0.23995133451146855, -0.14924747016700915, -0.036275296743394733, -0.13314032633541789], 
      [ -0.041103875384795478, -0.038239853031118237, 0.08930834019775255, -0.10751656645645798, 0.15823655809172607, 0.20815985286534655, 0.056779787102027378, -0.031965366692216279, -0.036292401444057418, -0.010283920456477778, -0.22616361790176906, 0.0035659176428188698, 0.061194979549604331, -0.077356786233733821, 0.10905509076128381, -0.32122938814240787, -0.062436557004039939, 0.045060861466937649, -0.13893160149555681, -0.075946865540705621], 
      [ -0.00058625790621224323, 0.028013371862265601, 0.033925327852879002, -0.096975699528198983, -0.12885275561493409, 0.13432677012128716, 0.054634853688639136, 0.1867067138700646, 0.12024253293549887, -0.016775889537030329, -0.37344128248102015, 0.16617216199662074, -0.043638146038945086, -0.021518964566529249, 0.088330233282570794, -0.09997530579514903, 0.11085010836922368, -0.01770838623224031, -0.082914213924980468, -0.0077088662798200785], 
      [ 0.027140406330796455, -0.023191258515235326, 0.068434406926245972, -0.071893202281616442, 0.14539857122015903, 0.16792155660430971, 0.070781226760149168, -0.066657108411771443, -0.076044747467265722, -0.03487985529879168, -0.2780038319445266, 0.061320468907901257, 0.072299824382141512, -0.023704580444343409, -0.044018515168893275, -0.27110695514654432, -0.046476184600681279, 0.00043869932085892696, -0.12313065014641822, -0.15560608030108519], 
      [ 0.0076812184072904723, -0.027031165111407914, 0.051859835503389934, -0.093607017053066996, -0.23700136702110858, 0.11818205744677798, -0.01289944697631098, 0.13978186955176936, 0.10628086971480243, 0.053511612608857194, -0.10840632593425696, 0.14453111355415263, -0.04694817077103533, -0.028787155822265875, -0.027495091326601873, 0.054014240557879893, 0.0703132234635645, -0.078649587711270758, -0.033769719376427046, 0.11645995186870835], 
      [ 0.059718922428571727, -0.019365231759092095, 0.039768313524315951, -0.029429966402313525, 0.099502797903459464, 0.095192410148050174, 0.03738531844838363, -0.087589530307537813, -0.063223996440049682, -0.023055656510996437, -0.11333588796545234, 0.070632460945446049, 0.040519800690016324, -0.01614026997873488, -0.20118930063482943, -0.13465123232579251, -0.11306409222256511, -0.21054801092291062, -0.043694131861398755, -0.053042450099374402], 
      [ 0.0041644730679859451, -0.070451588741912305, 0.057002625903046895, -0.12331122141071379, -0.23820814567299148, 0.13581472991575952, -0.032580608751462854, 0.092174145754420608, 0.027563573177978019, 0.12746487446937432, 0.1237897143138345, 0.10985577224508092, -0.021825682517284846, -0.040456493338142635, -0.0041164909929075309, 0.063284870734335044, -0.004700400768997845, -0.052424157462174367, -0.018129540228518211, -0.030724004702528607], 
      [ 0.07266891410782407, -0.016043138606478186, 0.026273691374946131, -0.0035342106566366082, 0.059452568136465787, 0.0498347703598968, 0.023930069153883064, -0.10364100685763084, -0.062651308587342941, -0.0089580363305430365, 0.013307479894258971, 0.068490119380549094, 0.042476545594050646, -0.012886684482589124, -0.32344815313001352, -0.10205399447154732, -0.17376613813502351, -0.23316498095342394, -0.011128358009024286, 0.0081901718752380604], 
      [ 0.00094691433464799712, -0.086262349909223685, 0.056561901106857035, -0.14777082451223753, -0.20316466873179542, 0.15155458483522277, -0.024606362028327146, 0.059727599838802263, -0.081607162628285171, 0.20453126101362462, 0.20790338659205221, 0.061225806497160688, 0.028168686557436425, -0.036131205813277993, 0.026537321190343487, 0.039990646455644124, -0.049028578602568124, -0.014036011010792616, -0.0096336013044989281, -0.23758677297853417], 
      [ -0.04104891598535558, 0.039313219925048638, -0.08790327889006877, 0.10361478783196758, -0.16318740146031324, -0.20270933480404055, -0.05458451747360385, -0.03929212116624857, 0.040998785186190115, 0.0096153977583400153, 0.2112840472234912, -0.0029798466635747047, -0.062865767668903602, -0.076449491545644302, -0.10549253270595368, -0.31704376863591721, 0.06675284121607318, -0.045723181789561682, -0.13555912932484482, 0.075584434365470965], 
      [ 0.0022042609665398095, 0.026485960470782614, 0.037415518961758071, -0.10113394140497949, -0.12252229572983343, 0.14241885794880921, 0.056828178864929316, -0.18530329432091186, 0.11872027940742812, -0.017167807538023709, -0.3820568346625392, -0.16618370469188057, -0.041194763832226325, 0.02454818638595151, 0.092555758740272068, 0.11254612540783006, 0.10830571714165835, -0.015920390263164701, 0.08832032167971221, -0.010693282303844876], 
      [ 0.026816912653847808, 0.022108926689108761, -0.066339365110991019, 0.068151690447571661, -0.15461770241861422, -0.1631379380522599, -0.071234250106643762, -0.072109302523390706, 0.08017056572858168, 0.036959816474844261, 0.27351976347701951, 0.055582028975215539, -0.074092332445528528, -0.022552708724484234, 0.042901765024783857, -0.27302351570941408, 0.049208713355902593, -0.0035351724779249518, -0.12170548706792338, 0.16007099915856451], 
      [ -0.008743910323026665, -0.027923354373289539, 0.054514211233918704, -0.096365207751641452, -0.2310925325092239, 0.12470228964547857, -0.010102445531173577, -0.13704885861179802, 0.10320420183042014, 0.052096726920325652, -0.11926860888719121, -0.14683351370610692, -0.044064970409796081, 0.029698195291401389, -0.029206990301820522, -0.043297565538334595, 0.068428704932436454, -0.07857132212072139, 0.0385917785260248, 0.1102426770552493], 
      [ 0.059508635688315319, 0.016576195607157063, -0.03749300550027012, 0.024551786635688105, -0.10880503745780135, -0.089770908937590613, -0.038639182155073032, -0.091150946000188984, 0.06426027766536814, 0.028056683600416122, 0.11812219496600887, 0.066252134990526609, -0.041347760355288345, -0.014534786232971919, 0.20087119446952054, -0.13703864218459735, 0.11279133483747861, 0.2083205415069774, -0.042946400162149574, 0.051791564110572258], 
      [ -0.0065126653897697685, -0.071159456831374021, 0.058524291187230272, -0.12437439455627133, -0.23410551313326269, 0.13945759111788839, -0.031083302663808762, -0.08865384373123969, 0.025052764449437367, 0.12645821454533052, 0.11923113656771624, -0.11255172075082241, -0.02021329708151522, 0.041060640001920883, -0.012035091209235963, -0.057933925975353399, -0.009148633946227747, -0.060673793152006064, 0.019835929550468742, -0.032788715505280758], 
      [ 0.072575275588664445, 0.012634132825075264, -0.024026201740383172, -0.0022869797091045053, -0.067406035601524514, -0.043828689541326564, -0.024880382727501829, -0.10591239790125617, 0.059389455848107432, 0.017004471070657366, -0.0051110016551837905, 0.066026250938385669, -0.041334468539254966, -0.011454031274300084, 0.32424222491809335, -0.10354947723779562, 0.1717008929604272, 0.23243149868662358, -0.010740406772857966, -0.017538756921170025], 
      [ -0.0038075054296583988, -0.086827150108513843, 0.057552559849395057, -0.14779538878396092, -0.20066618261034272, 0.15339929104950367, -0.023645037900407128, -0.055600435751653444, -0.084010761179813251, 0.20401992821861858, 0.20826613944580305, -0.063875112688850669, 0.02981934839248011, 0.036610597346155099, 0.013781028965228453, -0.035941276484260022, -0.055832567903872019, -0.023205955407946944, 0.010064307647553217, -0.23708004052505163], 
      [ -0.023504007886404565, 0.039047800473709704, -0.08556729731711149, 0.079150315989127973, -0.12465270020306114, -0.13891518919190571, -0.024300699494946516, -0.066995320302391276, -0.036811078599646559, -0.0058878608825938617, -0.090782550970527814, -0.0042989063216245984, 0.043496107700884662, 0.062508429522196374, -0.07822608214587827, 0.043008728528105084, -0.0069160402174301711, -0.042679506006784641, -0.019028718701817639, -0.015975265866074461], 
      [ -0.0073612866881341546, 0.021107032591126621, 0.039763310309730765, -0.055625685982699707, 0.049656312820927979, -0.084810395310920314, 0.1123167000123128, -0.12600108757905654, -0.023631913679965026, -0.057175431216096251, -0.0059588667870996703, -0.12646241348822843, -0.034426527323403552, 0.01345313854285689, 0.017896987050537858, -0.076871198151649292, 0.010909247964376714, -0.022517785800986824, 0.0081302635992543757, -0.034045787038877257], 
      [ 0.016948514923620442, 0.021935136437694343, -0.063152363053562616, 0.052799796401161489, -0.10435342424836219, -0.1082485313071252, -0.033041462823043079, -0.086335031647670493, -0.015563261507495117, 0.0087724257539358898, -0.091029953142718237, 0.0052610844581058459, 0.0074128482411641786, 0.12677166922406929, -0.010973650363562628, 0.12218436711438165, -0.032292648360241261, -0.041307828155396631, 0.0097001513532331829, -0.046119921825401033], 
      [ -0.0066832172944956275, -0.0080822202324519112, 0.046932304539841693, -0.080999330413291576, 0.021246022388930506, -0.077223007894172968, 0.12080245539572101, -0.097572471349082979, -0.098662078545974599, -0.081071918722385838, -0.00075065076725979666, -0.10367608652818733, -0.10332194965606988, 0.018813730318269009, -0.010497200676673469, -0.061595641076940801, 0.18741244184973033, -0.10373942661668036, 0.0019642020598187176, 0.19296689375226381], 
      [ 0.0011332836074733994, 0.011108535310006265, -0.04417704056170655, 0.026937857839190494, -0.058202747644603293, -0.067660378971863833, -0.012523327218299423, -0.086955312557543518, 0.014537206052818313, -0.0024289122507331639, -0.067246547639804657, 0.010135633490720202, -0.021703799990267496, 0.059668358321338273, 0.090059081877064448, 0.058504432644669993, -0.095514911708738867, -0.060412988824549617, -0.0172286278141911, -0.065438091003327925], 
      [ 0.0015010210285302538, -0.012001351176920536, 0.026456098121273849, -0.050506276299144282, 0.059043613350488161, -0.092763446808496325, 0.059215687883914347, -0.051446206696285107, -0.033728170881741182, -0.013303363349763783, 0.052355162524899544, -0.072966497652211429, -0.013674015384355585, 0.030572995901166015, -0.0001269454190740495, -0.036559417235038701, -0.077238971908164894, 0.00060168847264563115, 0.0056980306445743797, -0.095808032622795261], 
      [ 0.0045410658335984268, 0.029739632923257289, -0.061285405847324441, 0.051928527681961913, -0.095878693787256511, -0.10776669151268693, -0.018083231455708851, -0.11656925567843948, -0.018095403188716108, 0.002861865287773459, -0.11164037294028488, -0.001614526611698973, 0.01850727180389266, 0.085962991157206986, -0.0049371044283935839, 0.10296554953916567, -0.034908946306265183, -0.032021722740051189, 0.026463113300103775, -0.05860910110803276], 
      [ -0.0038940101674299825, -0.01249229063887494, 0.035153288200359234, -0.021732063618845353, 0.075236503021886808, -0.11222268661870895, 0.12233273651719181, -0.089597851601173367, -0.025863497436002778, -0.0013532772920338122, 0.037452430817597984, -0.095172396847614055, -0.025294237043152302, 0.0092336770328446133, 0.04519783139010683, -0.060782377972327988, -0.10825269327067781, 0.10079245210813498, -0.015704918925442776, -0.15393418284118904], 
      [ -0.0022816888324771046, 0.024060777904828315, -0.064375093915972487, 0.051683675703232131, -0.08258676188205745, -0.10799981168598935, -0.011766005324577833, -0.13475702007336837, -0.022040198973616986, 0.0027265637526194208, -0.078307843630374283, -0.0085373189718372048, 0.018274693017329823, 0.14968884350468151, 0.011604584974514212, 0.20993316574217608, -0.039923368624746068, -0.056634414817972462, 0.061774450547348869, -0.10280319608126551], 
      [ -0.0045581789111749874, 0.00066198929864758136, 0.030116361303995302, -0.052015237018933569, 0.057149166326883077, -0.10832378488024437, 0.12176894478021999, -0.094733181412691672, -0.053777107185287984, -0.066173515321594184, 0.026677718163727458, -0.096802491865775012, -0.073708163708605154, 0.014542543817592096, 0.0079362155357384327, -0.062350724930572518, 0.011445746451840468, -0.022933871968984575, -0.0045563429569468114, -0.01434575696371238], 
      [ -0.023195931450025249, -0.038186433726972668, 0.087066614014472535, -0.081279187172167783, 0.12651124179728243, 0.13546806794789037, 0.028704304423922203, -0.061982096023738213, 0.035852029667404049, 0.0036320225960271586, 0.090477520800764669, 0.00068386220739674879, -0.044817915269828167, 0.061930240018480687, 0.078870109330659618, 0.046002165330353145, 0.0073402265804119659, 0.041759774758871396, -0.019334089807546112, 0.014622330486137676], 
      [ 0.0082810441729772883, 0.022628164438439305, 0.036363277368764844, -0.052466019430260247, 0.044709627260732757, -0.090214386366495675, 0.11127276398624336, 0.12854130381332388, -0.025063016988668828, -0.057362925765527671, -0.0095287923605199588, 0.12653361195078147, -0.032687178519142587, -0.015903963947347121, 0.014802970227303884, 0.075118124442728515, 0.01062847012441487, -0.02418082137667495, -0.007374706295166969, -0.034648408127107198], 
      [ 0.017198522016467429, -0.022236361949753581, 0.064951340141844296, -0.055948184803736825, 0.10510905763267535, 0.10512394373069495, 0.037772414478168884, -0.082426181285644551, 0.011666390781662213, -0.011957815046176183, 0.090929803683901064, 0.0093392317964494462, -0.011475382834923829, 0.12593257195353735, 0.010551815031581053, 0.12451493177521925, 0.039646936943172353, 0.037191073136772765, 0.0096152888906918844, 0.053682193055150609], 
      [ 0.0060106898082263206, -0.007212260510108026, 0.044409296126462931, -0.078857533847899328, 0.017120649032104626, -0.081425388748712066, 0.1194077727771983, 0.10089623131434625, -0.099198367818690764, -0.080663635662292954, -0.0043343566705038071, 0.10338853261811595, -0.10294994506346208, -0.023790752142641616, -0.01092114572228225, 0.056736886871190204, 0.18599558835956506, -0.10528546614138498, -0.0023446205569288697, 0.19100128644165734], 
      [ 0.0010733023256969602, -0.011572471806977585, 0.045184485859170717, -0.028905643369866743, 0.060482443709835333, 0.063955365071974385, 0.014845222571675733, -0.084862194545056654, -0.015853973269866685, 0.0019032111181756528, 0.069255873790655134, 0.01300081613435409, 0.021148557038696662, 0.0584182799585111, -0.089994240510072918, 0.059898583580401302, 0.092399570333024025, 0.060389830596510485, -0.01743962613553323, 0.061614920444553682], 
      [ -0.0015444798414713803, -0.011554647683167756, 0.024696118687671069, -0.049406435936464876, 0.056706102967404602, -0.095355625030301788, 0.05867666301843686, 0.054830160517857822, -0.033129615186542907, -0.01338868472170722, 0.049666740963896568, 0.072510824197000265, -0.014517994556078169, -0.032898717753508389, 0.0034192131689151717, 0.034227464304297392, -0.080939956402453037, -0.0017775286940450647, -0.0050152377649734861, -0.09831034761316837], 
      [ 0.004690870236999981, -0.03020845186345834, 0.062622034091439668, -0.0527439537785944, 0.098766764690733991, 0.1032643715459184, 0.022886037597295072, -0.11295095822829264, 0.017062999846528776, -0.0029129309928136861, 0.11302847979225228, 0.0021341214358610982, -0.019488875651689986, 0.085532753438532783, 0.0067129322364766217, 0.10527899609166104, 0.030619444487243401, 0.035965574913563933, 0.027060969805652521, 0.052502519649912108], 
      [ 0.0037121867556401604, -0.011311610311061641, 0.032712925387670636, -0.019670534211132382, 0.071402951632534115, -0.11637895325503743, 0.12152584485104651, 0.09411826292639433, -0.026555943824719819, -0.001239542409763111, 0.033027567277137682, 0.095162163403297945, -0.0245459011456323, -0.012611293726825415, 0.044968383374253365, 0.056680991926792997, -0.10954327798574305, 0.099453439107696315, 0.014650759610563356, -0.15612253139789622], 
      [ -0.0021004419336657569, -0.024016053328674767, 0.065510998051054051, -0.053691686183182055, 0.084772954903796535, 0.10365082949147361, 0.016551511206833912, -0.13092241552622572, 0.019905643125049735, -0.0053300195908333589, 0.079297547117563622, -0.0047191176774999139, -0.021162766877999242, 0.14900015141933212, -0.01128309868882678, 0.21222541347290927, 0.040343082701714952, 0.05568747837492255, 0.061905950329527761, 0.10215861174289849], 
      [ 0.0046444851811399766, 0.001608864733666848, 0.027558248660570151, -0.049939864348428335, 0.053853008893656205, -0.11249225413654086, 0.12121122997047809, 0.099965750296801728, -0.054603232503147463, -0.066014840536623542, 0.023573672637087161, 0.097063578004294493, -0.072931441095314756, -0.020425237513236032, 0.0083869895337171391, 0.054036292009652258, 0.0098648949467139545, -0.025146056897784073, 0.0021204516891783765, -0.018382489334929718], 
      [ 0.081810771753296541, -0.0013428505322772605, 0.00052034004062910424, -0.0014149728204025428, 5.5785446345142841e-05, -0.0005043685757843521, -0.00014499662069067683, -0.053461428336135361, -0.0023340734387916192, -0.00054673940084741469, 0.0024140020816938172, 0.050804016409159963, 0.0020717140421115982, -0.043036085806402495, -0.0041824626647223558, -0.048410973331845825, -0.0026616866809265963, -0.0028679704469056653, 0.023711183240833406, -0.0007790068244097996], 
      [ -0.0016112669680105544, -0.06818214521618822, 0.026419842982679964, -0.071844095823552084, 0.0028324607335237987, -0.02560890482597699, -0.0073620856604533769, 0.0010529253262691722, -0.11851068329922475, -0.027760249058210736, 0.12256899523055227, -0.0010005874743450364, 0.1051895980010414, 0.00084759771856266581, -0.21236114512593493, 0.00095345637924054249, -0.13514497960633715, -0.14561887029600337, -0.00046699286059403988, -0.039553438859890391], 
      [ 0.09316674009473834, 0.014400575595609578, -0.024258690378879774, 0.036742157033356863, -0.00078129167135464845, -0.019454205498741321, 0.0039861327960366557, 0.020993170381415471, -0.038746820011047595, 0.022798678000079221, -0.026621044116277158, 0.0015937490043975381, 0.056984551915886278, -0.12002685484945841, -0.024167878123721589, -0.0052871980258857639, -0.066417612155883085, 0.13427170902105856, 0.12116397276410598, 0.017717186022319031], 
      [ -0.0043276594230666618, -0.10938077275025072, 0.025032360614155758, 0.053334284454519931, 0.076358196693512792, -0.041667043720492479, -0.12200349265013913, -0.019618940666932299, -0.0087274878540611698, -0.027905694195759025, -0.0020209270918834072, -0.037179968015268322, 0.0857566735914842, -0.0043895452957770321, 0.18879471579957499, -0.013536420311014661, -0.080458557180324991, -0.096480592550877015, 0.0087287715663246328, 0.10538650345322198], 
      [ 0.068925789004882776, 0.0038994871276476126, -0.038483088818842014, 0.0534216401132072, -0.020614388358821348, 0.024275081867393428, 0.03383464511033616, 0.0013678098316815396, -0.040894256133445384, -0.0036977002778184418, -0.022243390064701135, -0.0092915975150362276, 0.047028873154850125, -0.1350926070022187, 0.039418674703283925, -0.023948367571514632, -0.17001516730115498, -0.072578057599640491, 0.12021155396372023, 0.1008844700435037], 
      [ -0.0035850918142771525, -0.098584534210232388, 0.036484755081029552, 0.078370073077591224, 0.060738169839910532, -0.024631053138221483, -0.11530991223411237, -0.025280805195852941, 0.020332049748692183, -0.017891370222691539, -0.012565485446069752, -0.029378799703956453, 0.056812766852859596, 0.016354624703900585, 0.17160493997741863, -0.027596329561657272, -0.057952679396500853, -0.014688921034534844, 0.0048945221808579902, 0.096282275263388978], 
      [ 0.082029257315952384, 0.0074757163649968855, -0.024317219559781403, 0.059450697624626681, -0.015388354923859109, 0.017755496878605559, 0.031009613692150953, -0.014232679001682378, -0.045997650792277835, 0.014613540618649661, -0.029813283030588365, -0.02534129625607465, 0.057084476163640027, -0.13353605511897215, 0.028972212579385589, -0.022874981819275674, -0.15035368981841174, -0.014709236489241649, 0.11573380339300297, 0.087448158866062511], 
      [ 0.0031065122369682411, -0.09735470815430354, 0.048803407878371556, 0.089656786129113902, 0.053981454541723449, -0.016188763284935497, -0.10550879640444591, -0.028379974224971974, 0.022378952453626737, -0.012573185226640559, -0.023347021041790504, -0.037642437913027085, 0.067803785546887652, 0.010191767475728072, 0.14003184385552048, -0.021789923937984297, -0.031733332445823333, 0.0074465847536982922, 0.0062392987933812261, 0.027541365826683165], 
      [ 0.1387392468659556, -0.0029894476997010875, 0.00093655830249410224, 0.0007195652972101401, 0.00088727300670934125, -0.0003708364998388135, -0.0039663222876061242, -0.011515406413235181, -0.0016057914844486271, -0.00059454204947583791, -0.00015462731808319564, -0.021428183483374975, 0.001794169128817196, -0.18742897143429366, 0.00028052668699144856, -0.061963185529604094, 0.0010059641470244779, -0.00058911793994765108, 0.18354627085177005, 0.00110448968069762], 
      [ -0.0027324759423598831, -0.15178677915220828, 0.047552987208318499, 0.036535343590110243, 0.045050566340589591, -0.018828922114365799, -0.20138679301047291, 0.00022679646676306188, -0.081532758522211451, -0.03018738972066367, -0.0078510764992026881, 0.00042202907381593165, 0.091097480429496586, 0.0036914223402113029, 0.014243514709651251, 0.0012203678309948844, 0.05107701259822197, -0.029911984964391694, -0.0036149523710255344, 0.056079566555545815], 
      [ 0.081843326175564626, -0.011303243144873883, 0.026219987228758103, -0.05587437444687076, 0.017501931484022831, -0.018379157328786689, -0.035139955952998098, -0.013104185338561385, 0.046843147349681431, -0.015097274885653112, 0.028870878407626512, -0.023839480142389503, -0.054370445930001204, -0.13383379839837503, -0.023436016295804399, -0.021999268190290303, 0.14898759794327313, 0.014991037574042854, 0.11539838184369412, -0.086295907464405019], 
      [ -0.0063339904172092128, -0.0969848556702919, 0.047808075231963461, 0.091928118806094236, 0.05333367881584198, -0.015477089583819399, -0.10420597754290631, 0.028918375044037707, 0.020550448601090333, -0.011988029328599567, -0.024502808340260984, 0.038611055599596357, 0.069998895439423628, -0.0049259057318337017, 0.141064026369251, 0.022673724386325558, -0.037628873079354301, 0.0068616364698299388, -0.010791457969180546, 0.030963263322166132], 
      [ 0.069013500164363722, -0.0077782114133199218, 0.039889826275969542, -0.050294404698156964, 0.022989956636996291, -0.025226100095485701, -0.038348713762754449, 0.0023621762657443594, 0.041663113891177883, 0.0029903632691730001, 0.021731376833849143, -0.0081276070323538178, -0.044755410313213791, -0.13563180458726881, -0.032631192325707985, -0.022843195367173271, 0.16760144609996189, 0.071943400497693683, 0.11992561030559576, -0.097015137991935521], 
      [ 0.0008683710760901028, -0.098354541392438238, 0.034941196860361776, 0.080412765420858678, 0.059879380230085752, -0.0236561250491088, -0.11388825761211453, 0.025207342945574689, 0.018706078492882017, -0.018023091946399897, -0.013431570532554657, 0.029721871750519276, 0.058620462599581931, -0.011022694782208325, 0.17302396547131663, 0.028517891577624171, -0.064602054354913965, -0.017535277896968397, -0.0096240348389921883, 0.10017991728015564], 
      [ 0.093264891131244879, -0.01869625635332418, 0.025225522728041436, -0.034613636044571884, 0.0037872760428480532, 0.017798486629238393, -0.00878690716339906, 0.021749382668845095, 0.038373129017707723, -0.02387977956539563, 0.026520826150973752, 0.0030564676199524498, -0.053563707436170428, -0.11976093779742561, 0.031582894163982682, -0.0047501037484704196, 0.063198064822794095, -0.1379664887691025, 0.12072631763615552, -0.013553871931194481], 
      [ 0.00065587974480378207, -0.10872892910029817, 0.024057766727453182, 0.054739640129556955, 0.076268218539154081, -0.042400737230636823, -0.1217519270319862, 0.018777124089696229, -0.010246368849578925, -0.026986359795397818, -0.0030675587070679833, 0.037088381781813479, 0.087933926719009028, 0.0091121770634981121, 0.18769670173732889, 0.013734105437929836, -0.083011343987932723, -0.091118848539308989, -0.013492812125430992, 0.10600238839912131], 
      [ 0.15198329888645531, -0.0028006329231055789, 0.00074600501456860457, -0.00047877576221697142, 0.00028276186426707736, -0.00046544182592494712, -0.0027810265190758928, -0.014577335068213577, -0.0023713561635064929, -7.4399427398504829e-05, 0.00042809416640002897, 0.032335351595210775, 0.0025660999077690037, -0.11258044828872558, -0.0019629261392466574, -0.068299111724211978, -0.00085203598771712078, -0.0010859137054767311, 0.1351966947174692, 0.00036773380243969273], 
      [ -0.0029933181650393112, -0.14219986221144598, 0.037877798766670419, -0.024309450501608272, 0.014357004020670602, -0.023632430715189685, -0.14120436296966282, 0.00028710129453164511, -0.12040368336844554, -0.0037775705046384535, 0.021736133633636263, -0.00063684625884757981, 0.13029163882764697, 0.0022172771834743873, -0.099665980582217858, 0.0013451541931117697, -0.043261435318081756, -0.055136386499757814, -0.0026627052124551412, 0.018671385173615006], 
      [ 0.13163779849298077, 0.023622420796737043, -0.010985661443978103, 0.039968343205424306, -0.011570505836073337, -0.033205834150692913, 0.051170416514177641, 0.01414235746954366, -0.040076184864964205, 0.01404752993995133, -0.038612435433180527, -0.0061341283358574026, 0.019089531531498876, -0.16518066221941613, 0.030388662930598432, -0.0032824916332457638, -0.11074112146459136, -0.013923765545993713, 0.17523174961640878, 0.020527889008503997], 
      [ -0.013330778995618896, -0.15174038102342469, 0.050439117821200925, 0.032633802973101658, 0.024681537713083537, -0.047849917736861522, -0.19726449414187805, -0.024421895341757063, -0.12826274594269282, -0.0096122374810210017, -0.051464351914932802, -0.034670744528944336, 0.12764585703241649, 0.0036731932047602183, 0.043964175659770961, -0.02446006443748544, 0.038083140431675766, 0.0069072900028630197, -0.0048465499204572854, 0.03826469474709903], 
      [ 0.13206061186311066, -0.029578852069042365, 0.012963173373203699, -0.038652398078394802, 0.012533364143145671, 0.031296001493739539, -0.058897988383271586, 0.015092997962523566, 0.034994783686450787, -0.014415116357288678, 0.036556092321482832, -0.0047642170603121635, -0.014048695159933513, -0.16519719776774358, -0.028634015353771036, -0.0023168354616006706, 0.11215475975367546, 0.014184941121035225, 0.17528669136738079, -0.019005304387925956], 
      [ 0.0081372264961395765, -0.1506925794712862, 0.049967444401719831, 0.034182242142128491, 0.024206810868850206, -0.049120284400353334, -0.19509669177023323, 0.023846103652028459, -0.12974127217207779, -0.0090516643337690324, -0.052944799577375516, 0.034885387950180376, 0.12829851595375488, 0.0028336141673054767, 0.04512663006332953, 0.024570343445953258, 0.033693195647929455, 0.0063536877131468196, -0.0020569271343587707, 0.039043302836162704], 
      [ -0.0038309214028131558, 0.006327609729933464, -0.052088333861298942, 0.18060229644188941, -0.066849870072777928, 0.12575488626154133, 0.21250606488531315, 0.073443087091756593, -0.16677568935528342, 0.074329338740258891, 0.013077140393708211, -0.062464753970647977, 0.12874919357305462, 0.012954480511228487, 0.029466872112778295, 0.0018815134527224446, 0.016685525149634551, -0.033447189900895832, -0.18253121075591539, 0.065848575934593687], 
      [ 0.0040363724128006685, -0.005428503148933954, -0.044557203531833865, 0.17695699954660279, -0.0049670275463194061, 0.10595366487499498, 0.15416871677359834, -0.058039359533206616, 0.23028436557624615, -0.0065144055070890583, 0.086590768314136216, -0.058097017518509167, -0.016970687725788709, 0.018175711463984123, 0.14783066559284891, -0.078001208441343159, -0.097636412590759517, -0.23238594617718691, 0.021669545651174148, 0.025890710930359166], 
      [ 0.066274862156580475, -0.010935323985695466, 0.014806079420386914, 0.12123528814039788, -0.028555893789257433, 0.036047598017287671, 0.10364050007965231, 0.075579190193593493, -0.14632862610243602, 0.046399842482651797, -0.037991214935094803, -0.052856986097914532, 0.077592314922658001, -0.036722314655056779, -0.060381333737323073, 0.045720314892436706, 0.04059334751477113, 0.17850961871979334, -0.11243932211560029, 0.010951767221506759], 
      [ 0.00064917569290234042, -0.075925963194159285, 0.017475169600548825, 0.19376068891082909, -0.0040828318816699578, 0.031841460036281605, 0.044576969573996775, -0.030139223137968452, 0.14151154571182559, -0.021340478372072518, 0.010565323177546944, -0.049083297160211217, -0.090521299110573578, 0.019607952775615563, -0.10735829803366952, -0.035450005106403941, 0.0033882421104399459, -0.0017408685781098022, 0.013726786778435317, -0.052913524981135322], 
      [ 0.10398820287198421, -0.0025553046625032519, 0.0092925475363548702, 0.039068549667282869, -0.0011161779327457429, 0.003591278586532228, 0.041179596831508986, 0.062868314541723549, -0.065948016538531662, 0.030964888548816797, -0.014728513450262101, -0.042241476052874635, 0.064679635499551011, -0.073966411482396202, -0.027365421654482948, 0.052599561053487204, 0.011955557066133717, 0.1200506292277735, -0.032600518828598178, -0.0051691674320616943], 
      [ -0.0023092618200367988, -0.11194848050269827, 0.046231968719573815, 0.16547162937327956, -0.0046113699175225273, 0.010780969312844261, -0.051679447504111783, -0.011460267729800216, 0.08980407463741838, -0.034390966251272574, -0.051200507366371682, -0.020256685820207093, -0.083425438152334233, 0.0026742274714942034, -0.23595294011547646, -0.023520579545328213, 0.056009972045852327, 0.075816529529921475, 0.0087273605289668044, -0.033058495383148138], 
      [ 0.11206451515643179, -0.002207972950058514, 0.00098928742937472104, 0.0033010140928012664, -0.00025018449162589497, 0.00015106332155448676, -0.00091684303783115062, 0.0632797686712923, 0.0017042671887139524, -0.00032171922161879855, -0.001378520956262191, -0.052334921761097157, -0.001544884038217892, -0.053191625186315344, -0.0044536651788214827, 0.059985955751635775, 0.0014679630382106682, 0.0015595511447702337, -0.019700230648099861, -0.00085419779416741727], 
      [ -0.0022071158563591671, -0.11210803339295448, 0.050230265803129871, 0.16760630973155008, -0.012702914381645055, 0.0076701174698926722, -0.046551960656267294, -0.0012462979974182913, 0.086532782431857358, -0.016335032202010012, -0.069993282025136813, 0.0010307387266994153, -0.078440232404100807, 0.001047611540642676, -0.22613123252942086, -0.0011814261982348827, 0.074534631098162218, 0.079184942827845842, 0.00038799696207735684, -0.043371199284965231], 
      [ 0.10399848794160398, -0.0018546282231649306, -0.0074649658195946262, -0.032522836809174505, 0.00093374048841786026, -0.0031639948630731731, -0.043182531456503012, 0.063270806840100849, 0.06943289386154429, -0.032295013728537859, 0.012701080887017095, -0.041411114897206627, -0.067914338774212588, -0.074014348575405856, 0.018053595514752854, 0.053484889263947719, -0.0097409030935227837, -0.11697226908769021, -0.032918875737885475, 0.0038634864930025166], 
      [ -0.0017870457628367509, -0.11196228035787356, 0.046562008727237605, 0.16688162507129639, -0.0046517431565027585, 0.010914014738721138, -0.050017931450071614, 0.0089759518469326761, 0.087137741288496162, -0.033145059523410299, -0.051740734507055658, 0.021904227503264682, -0.080813993640494866, 0.00024026050450840056, -0.2368474697784532, 0.021431241345077668, 0.056437284841328879, 0.080484706574742798, -0.0074369529950135127, -0.033236393923781658], 
      [ 0.066197905559296846, 0.0079372726248534489, -0.014106515811415553, -0.11351197925830193, 0.028372988239404286, -0.034765891745263865, -0.10180491786474012, 0.076707305856765967, 0.15178714152250367, -0.047204137414763245, 0.03837776086783861, -0.050883350097536362, -0.08109640280588061, -0.037465896519151637, 0.056107295015632941, 0.047080696866890967, -0.040428456400199361, -0.17843973287559256, -0.11289261642660686, -0.013026734771989441], 
      [ -0.003258233035928038, -0.07629765986523894, 0.018044604513067858, 0.19838404729853457, -0.0052040488702488515, 0.033236135022211524, 0.048623226669103063, 0.027139933490635801, 0.13564014175458494, -0.019496943619243583, 0.0090612326347669532, 0.051126467923420967, -0.087395917408481349, -0.018146812493971404, -0.10965254701379797, 0.033622284848529985, 0.0049839703200507115, 0.0052892655613500129, -0.0092888637319967562, -0.052441267265232502], 
      [ -0.003986882003145645, -0.0065364490733629717, 0.050293508064377844, -0.17349459134769418, 0.066602452923474761, -0.12148545825215697, -0.20627090330577366, 0.075671422129283947, 0.17571376211230985, -0.074528200706336228, -0.0096575032954608533, -0.060128753635612285, -0.12931756777555667, 0.012228769086887423, -0.023623215023664098, 0.0049513379063357123, -0.020517001886349615, 0.024271097161742899, -0.18324289428534279, -0.064778069009666595], 
      [ -0.0038824004098424341, -0.0051751449104026435, -0.046573618686996859, 0.1839309542782756, -0.0075953772763106215, 0.11082307499956584, 0.16241654870757211, 0.05510254231452287, 0.22353901984468461, -0.0035826493201062464, 0.087038528182687688, 0.06051150237257711, -0.011888050816357376, -0.01867169674018597, 0.14887627733685821, 0.077866635114920271, -0.096903707084444998, -0.23352271053475315, -0.014465607580723346, 0.028463408799232578], 
      [ 0.030970322681001354, -0.0047092200014083761, -0.0075287381199665169, -0.16357528456660891, 0.052689892202482318, -0.089603666894719519, -0.14218940432389854, 0.10513747604797466, 0.14519927390557388, -0.054724870498712448, -0.029363608692248241, -0.050838750489416461, -0.061890285829240166, 0.044141490765737861, -0.050417517293536905, 0.025015137007617129, -0.0164241782172064, 0.044950698551189425, -0.20677993024909797, -0.068404093672556787], 
      [ -0.0061910554636544395, -0.025490142152652339, -0.17773317220354778, 0.011649348642623056, 0.033779282406239494, 0.037805216091529037, 0.10672838541759483, 0.042820997106558761, 0.11269092441672947, 0.087330253747772216, 0.0073968040077105213, 0.043681348504218426, 0.017817631930504448, -0.025762018942079811, 0.05361678397374782, 0.053929146044518032, -0.045882436605483537, -0.054493601747829093, -0.018289999358620294, 0.050792370931913446], 
      [ 0.072541861006159392, -0.006476680970671095, -0.026270676170072206, -0.11039354583740979, 0.034051788978890732, -0.04818526069419498, -0.068956955964512553, 0.08882207098078751, 0.083965194657350153, -0.032425744904939553, -0.026027916755625876, -0.062975614492549542, -0.033734092336044644, 0.050170467939578807, -0.0071563112069313222, 0.036377300918929704, -0.027785475091141137, 0.045788377840654405, -0.16056788078199133, -0.044453878673681245], 
      [ -0.0046479508538619626, -0.046087217023970797, -0.27900795030851638, -0.098063569589822736, 0.061903898032388702, -0.015660875349017705, 0.064717698941130219, 0.035866374649349782, 0.014465297947944152, 0.15613902852083866, -0.056401659837761492, 0.029190158094929104, 0.064898920324502299, -0.012065605931257545, 0.01802489645401896, 0.032618292440983403, 0.022591293266889509, 0.098126523224480108, -0.011371173195258669, 0.053107627097234371], 
      [ 0.092348192058670953, -0.0010952096884212115, -0.0059954126082537905, -0.002549018553761728, 0.0015525730855717817, -0.0006001014754087856, 0.00090016832239121498, 0.096893901856154152, -0.0004321201508902927, 0.0031097718839086862, -0.0013362209789646005, -0.068512309872291607, 0.0017057933812733076, 0.027410918821543884, -0.00020315778991815845, 0.051832972363327109, 0.00062915076693582342, 0.00300239475701723, -0.12667198858307488, 0.0010261238764940721], 
      [ -0.0018188019527348273, -0.0556083824842835, -0.30441220616984327, -0.12942434694989621, 0.078830637539145959, -0.030469665057486366, 0.045705315521775508, -0.0019083299193563227, -0.021940549726592755, 0.15789614188725415, -0.06784553503059533, 0.0013493531405930359, 0.086610273619572894, -0.00053985932553511434, -0.010315171793918594, -0.0010208528098805032, 0.03194461924314819, 0.15244415547277718, 0.00249481072726708, 0.052100606489871547], 
      [ 0.072668617825301499, 0.0046569824991961571, 0.015264415714518064, 0.10644670145937021, -0.031587927348150482, 0.047531249409710381, 0.071451728359471084, 0.087340958401164057, -0.083330512075594609, 0.038548545250647888, 0.023786927187687146, -0.064076134823726608, 0.036263315230795894, 0.050606642360040088, 0.007860488621277726, 0.035064751329811496, 0.028653455870298793, -0.041889155266449415, -0.15999562427136771, 0.046510508443875456], 
      [ 0.0017880236959114894, -0.046306495045648065, -0.27982598588173835, -0.10233424838085226, 0.063196675309032335, -0.017546016482861786, 0.061952343350117248, -0.039335913735030134, 0.017760194700190701, 0.15474118656366265, -0.057382765514220668, -0.026687867962290574, 0.063520318115506749, 0.010080796040362454, 0.017729139880527874, -0.034025346994415763, 0.021479725887447502, 0.099853336331171633, 0.017684686388847931, 0.051316079247401808], 
      [ 0.031190077233784842, 0.0037018982930456588, 0.00052468799367318846, 0.16390712475261288, -0.05131897860862001, 0.09102275382470873, 0.14628154898705953, 0.10336987404471454, -0.14064948860692114, 0.058121044994734174, 0.029632085365875752, -0.052519270838884344, 0.062543856649475288, 0.045121634388887638, 0.052489570288457466, 0.022872287624847949, 0.014604828763975959, -0.047061515545539091, -0.20589940927102743, 0.070350987521527644], 
      [ 0.0049668034861391373, -0.025655799520031213, -0.17789178480673101, 0.0051995673065932824, 0.035827741971238621, 0.034247770305137863, 0.10104693652841829, -0.046927559098234067, 0.11832072913574627, 0.085107748175305906, 0.0062348810597433772, -0.041645707450159469, 0.015366895686711833, 0.024003977526007841, 0.051590024080870059, -0.054872291107689618, -0.046493554346184546, -0.052681416896736229, 0.02641773821132605, 0.048059583131721914], 
      [ 0.057822167916677943, -0.0015818691524279048, -0.0086989311774793281, 0.1025356427806277, -0.025956947528960744, 0.056268310823976597, 0.10131954273559651, 0.10023331381082455, -0.11388888765265551, 0.058429281323544441, 0.015546668169133925, -0.071095203622812173, 0.06231399292864493, 0.036858492295634183, -0.0010999714881735037, 0.026105216445067907, 0.061097310720832139, 0.077303858214288382, -0.18755963663306197, 0.047389410510086577], 
      [ 0.0013806130436272088, -0.028279785525396707, -0.24779758418898018, -0.09294707841916848, 0.038757957330367951, -0.0028008391133761711, -0.012529210606239446, -0.044696812467934409, 0.077376575265403508, 0.071988012448028091, 0.010778528628599817, -0.031045644082364942, 0.001004354860152813, 0.0066662232244776359, -0.12622795800741779, -0.045083852480253171, -0.04480798046001943, 0.01777639002060321, 0.016228237723703728, 0.056646065257650806], 
      [ 0.08743934914534314, -0.00080254649884023671, -0.0057786355332733871, -0.0027136736414979826, 0.00091802840943306036, -0.00011137735951013713, -0.00064188936915977651, 0.10811931560815052, 0.00033513970260675579, 0.0014622751318323151, -0.00028756414198434342, -0.059023549879327529, 0.00068450082974151432, 0.025379280968380231, -0.0033295795726401086, 0.027241769541909315, 2.5402298057011755e-05, 0.0016213486083211867, -0.13466444154822205, 0.0019403531333081919], 
      [ -0.0017221220624478938, -0.040748646711902821, -0.29340552623742627, -0.13778457530947327, 0.04661214693672093, -0.0056550949769636014, -0.032591411425749568, -0.0021294149671224269, 0.017016446225115021, 0.074245832271085888, -0.014600835771580131, 0.0011624715696626146, 0.034754973731010053, -0.0004998461231940759, -0.16905669877169857, -0.00053652792257550207, 0.0012897810540690047, 0.082322658852477859, 0.0026522224614454466, 0.098519854537741147], 
      [ 0.057722966076044352, 0.00046713096417428285, -0.0010648000347449648, -0.10611590201326658, 0.02746290579936855, -0.056334957908550427, -0.10173430596600805, 0.10191551293463291, 0.11684725680985994, -0.055549455027094803, -0.015110209275043338, -0.069817653430995427, -0.062226122825755459, 0.036567427603391899, -0.0038710846599725661, 0.027860140717789035, -0.062814236601043419, -0.076543967770579702, -0.18805317015343528, -0.045122231921031437], 
      [ -0.0036562798504169909, -0.028320140678325573, -0.24794793875814194, -0.088837676506122412, 0.037705850825817851, -0.00058311248019062175, -0.0085300555789908569, 0.040715481890352248, 0.07283221613113551, 0.074232828980148463, 0.011382317260705307, 0.033820929378822522, 0.0034571782525582824, -0.0081123501438760855, -0.12617338080416468, 0.044021002252220255, -0.04236753675222879, 0.020806430133869208, -0.0088305259631800692, 0.058468086373098867], 
      [ 0.06632787150069476, -0.00050249459744188343, 0.00068789731494344202, -0.099052827103458543, 0.02708119721279293, -0.04396334728031652, -0.085985928084049187, 0.064402105970983434, 0.11344648894176527, -0.045255083619287026, -0.0033627481062762764, -0.065526585575091709, -0.065674092536073536, -0.020837968861428972, 0.02440299925302835, 0.015466292580588247, -0.049326952278706593, -0.099548532965596348, -0.11056103199623077, -0.052035175908552264], 
      [ -0.0034584653198352347, -0.081730476144182468, 0.042050903254929349, 0.20673617233092076, 0.019186781291530883, 0.017709312635985582, 0.062968880438414074, 0.020672760790206482, 0.10430012736186432, 0.0046453384558401267, 0.0023476603249216609, 0.040009590990009121, -0.060975072974956641, 0.0036578431925649081, -0.017462918205026191, 0.022780444868396997, 0.07817790357546428, 0.099431926790961314, -0.0024518885244078498, -0.12599928693973764], 
      [ 0.09712861511917821, -0.002109191062430208, 0.0011487974317804382, 0.0036646797964441842, 0.00020402199216730635, 0.00029506307900802596, -0.00015780066191922547, 0.082650389488317363, 0.0016065974001585322, -0.00015594162162732475, -5.4727904831556509e-05, -0.048473628411413776, -0.0013575663381860815, -0.037546402774222061, -0.0016561616161500105, 0.026718742004923517, 0.002634292853564168, 0.0026626671036047642, -0.042087730824441061, -0.0029947917415794668], 
      [ -0.0019129526080266916, -0.10709246327169397, 0.058329256633492227, 0.18607114049263695, 0.010359050961291777, 0.014981588209040693, -0.008012200455334427, -0.0016278032784890722, 0.081573678237876021, -0.0079178091943084301, -0.0027787649219278856, 0.00095469037395818268, -0.068929328310090562, 0.00073947815503178234, -0.084090261052632634, -0.00052622687082261039, 0.13375408026912372, 0.13519475977152992, 0.0008289198229354186, -0.15205811853861703], 
      [ 0.066412611420979109, -0.0027160178727324881, 0.00096838289061259078, 0.10711621231805082, -0.026304719983661507, 0.044626555190009652, 0.08839863528597891, 0.063538176615308362, -0.10925171370014193, 0.045402898169218005, 0.0034525790352213613, -0.067051140879800977, 0.063222280478838225, -0.020965836164989555, -0.025071674259480613, 0.014557322724613622, 0.052366940659378414, 0.10338644840652032, -0.11037875047163188, 0.047033623955949379], 
      [ 0.00084413531333648066, -0.08168688069996452, 0.042045379078425656, 0.20267566347704913, 0.020238219422379803, 0.015964530372102635, 0.059534368323843533, -0.023192550627061513, 0.1086861788568224, 0.0028598252732636499, 0.002213432138776979, -0.037398466479719145, -0.06351369305742692, -0.0028345153014701367, -0.016488512201080378, -0.023371761373116254, 0.076175037607722013, 0.095435112861313898, 0.0068033078519694479, -0.12795045157687621], 
      [ 0.20703888776046817, -0.0040955306438840702, 0.00091829030602580311, 0.00029318224193782439, 0.00055127789316490887, 0.00022805224437948043, -0.0051995057930183993, 0.0070650309926388573, -0.0025937632986590747, -0.00022702125921565661, -0.00086173305987534909, 0.0039240564283778614, 0.0027605436927578154, -0.18348670413797608, -0.00045015275908269107, -0.021588694232823852, 0.00096281376926184094, -0.00018547586883984907, 0.23464452882669651, 0.0015329766435917217], 
      [ -0.0040776405575057868, -0.20794724236737291, 0.046625444523509189, 0.014886090234270592, 0.02799068731984157, 0.011579167501817209, -0.26400068400072535, -0.00013914611514467259, -0.13169622503382425, -0.011526820067412923, -0.043753796281685853, -7.7284474501972911e-05, 0.14016436409825131, 0.0036137792018121856, -0.022856140762929661, 0.00042519034051823122, 0.048886087210756497, -0.0094173866110188898, -0.0046213349467345288, 0.077835644112283761], 
      [ 0.001600149798509039, 0.029891049610734324, -0.073100016972691237, 0.058468287694032339, -0.11859715192490825, -0.12934983734389502, -0.03215753387849471, -0.082573315128634597, -0.041100473797450285, -0.0057089075464732911, -0.11638049064707212, -0.005360018645738371, 0.0098026006087715764, 0.099418622679410831, -0.049008089369328607, 0.096626712331893336, 0.019636547733371652, -0.04365158147420805, 0.0051686639646909838, 0.0072428841031748018], 
      [ -0.0084655797579516363, 0.0046796039747889328, 0.045349170381251552, -0.075740338407896596, 0.034637874980380366, -0.082185012813799238, 0.12096517723818799, -0.11907027593886922, -0.077532966005268281, -0.078919225618250474, -0.012653839329842924, -0.11579889444409787, -0.086081021299874549, 0.014700684484062943, -0.0022790983807369066, -0.072634107643923182, 0.13958423960769856, -0.080189569403228772, 0.002018906461944938, 0.12988268130836478], 
      [ 0.014243806625978583, 0.014200096866361147, -0.056192009903351083, 0.043173116638536076, -0.080962018527770102, -0.084430862834772094, -0.022292726265858917, -0.081954003192333327, 0.02152003624899609, 0.023644742127953262, -0.069978359098797183, 0.010578253533974151, 0.0055637826130319002, 0.10753640013705452, 0.047816913101399738, 0.10988794493865496, -0.10152366815496468, -0.038775585391086789, 0.009852910151645293, -0.10479520228312775], 
      [ -0.0019267548176591929, -0.008925388714249952, 0.038395556537413965, -0.072665186105416446, 0.035316486177484008, -0.085965924697292265, 0.09582763458529317, -0.067000919870279008, -0.079359015546978953, -0.060241496386490595, 0.022959701461264762, -0.082723836506042342, -0.073346522132294284, 0.034408742374917548, -0.038907662769629009, -0.046992930274583435, 0.098012549165147247, -0.061028767847838943, 0.00076321736854643302, 0.1075684463291605], 
      [ 0.0059814141378770648, 0.019986810144644703, -0.052159516892456737, 0.044470068674562213, -0.076646118870655283, -0.092443985277206861, -0.0046780283694754631, -0.10415240351429289, 0.0046581309098171339, 0.0051387821644300309, -0.096441880503777319, 0.0059706943668328058, -0.0081662190478806584, 0.083068312844982325, 0.047686224996272647, 0.097270615186997741, -0.082539469495457249, -0.026822366473814651, 0.0086196546781407424, -0.097324503721316499], 
      [ -0.0021942894961033224, -0.014672723795261092, 0.029772004832198062, -0.032614772081342794, 0.070295075024643092, -0.11259463615333884, 0.099268692243531145, -0.067976663605742088, -0.03044186202548875, -0.0078860174588312563, 0.043349675685023834, -0.085122999155765988, -0.024236146150270921, 0.010447936760907087, 0.034457826074821639, -0.043728626489174367, -0.1042036745513725, 0.051653432878080288, -0.0020921056059823064, -0.13233775532920919], 
      [ -0.0042059935392670398, 0.036744548164445841, -0.071150072959197702, 0.055275730345418807, -0.11733258745742518, -0.12551113047364817, -0.026702116872438602, -0.098002215324570832, -0.032058017685709581, -0.0047389532692271915, -0.10681090062656821, 0.0020600345006134566, 0.030173430742515703, 0.081617365370314221, -0.060517548931822374, 0.076498984061509762, 0.010560607875077349, -0.048467808387472576, 0.0058354971872776329, -0.010407245460861088], 
      [ -0.0044631564451177224, 0.00045295155675292799, 0.035712505776059111, -0.033807803564813055, 0.072124316297525498, -0.10250509947932039, 0.12264947244553856, -0.11180724612070768, -0.025713763387405476, -0.018860328071287728, 0.019240580467793849, -0.1128498000096371, -0.030120981721105073, 0.016747429515335501, 0.051983556502342647, -0.066147016249777119, -0.080512483822065731, 0.055429747589263438, -0.0091079370182415159, -0.11890323290806659], 
      [ 0.0019322395797021221, -0.029683610868556604, 0.074828944142974071, -0.061405208380541372, 0.11986904124223774, 0.12601350788764093, 0.036895578153987751, -0.077820909748784972, 0.038015754250683036, 0.0025970500443396882, 0.11579199621960423, -0.00079630137938487228, -0.013184423524447514, 0.098762687832966156, 0.048880345050464104, 0.099411734305559191, -0.01412521549114323, 0.040460280290956586, 0.005085161644416053, -0.0021231601220417814], 
      [ 0.0083960091842815998, 0.0058529296934387706, 0.042435702587834967, -0.073379424307888283, 0.02994127217609311, -0.087214405816630466, 0.1196051729738129, 0.1222292476838613, -0.079091163809245094, -0.079082811840664208, -0.017226487294787776, 0.11592014345432422, -0.085628290786705752, -0.018603874644253018, -0.0042070156653525028, 0.068773121287756922, 0.14024917911015802, -0.081846156446421583, -0.0022208560358915122, 0.13006714598651922], 
      [ 0.014308626336015257, -0.01454052042314059, 0.057660251751921007, -0.046000814992156983, 0.082289813667776407, 0.080980494820433568, 0.026048634371759163, -0.079252299607605534, -0.024628094656255151, -0.025998403972505513, 0.070828125770320563, 0.013827286392253153, -0.0084474740718772732, 0.10609816881106214, -0.049311813835477322, 0.11165306622847145, 0.10530416416182639, 0.036342518602117145, 0.0098152177824562814, 0.10894942298282548], 
      [ 0.0013644133178536335, -0.0083593409153309428, 0.036153230930321086, -0.070908901359961876, 0.032101233722989439, -0.089223709106505511, 0.094875549231313222, 0.070175885527856877, -0.078450125954942551, -0.059263772307063922, 0.020186511169956772, 0.082243168258119378, -0.073070569777944086, -0.038616285181246927, -0.036994707959347325, 0.042629669719730666, 0.093939065354455994, -0.062508222411950309, -0.0011505820661753263, 0.10335873595850935], 
      [ 0.0060631753715524222, -0.020549046454011378, 0.053291335098044186, -0.045719783410926793, 0.07935453658465319, 0.087938902453332926, 0.0085830875044933426, -0.1013950655820991, -0.0058531614203060313, -0.0054453076141975356, 0.098073976573685842, 0.0093177669338020807, 0.0072055923420137787, 0.082592508658968, -0.046292474156034144, 0.098916989702065097, 0.078372460116980833, 0.028835410650637348, 0.008695346513226461, 0.092038254344598905], 
      [ 0.0019570707435616493, -0.013874368207632787, 0.027695145380569539, -0.030838478735115402, 0.067222634834479336, -0.11614728554614778, 0.099007513947460893, 0.07202493060305093, -0.03023484163245627, -0.007677563316653516, 0.039518676801310847, 0.084821892196892762, -0.024538894693039305, -0.013710634372263894, 0.036308740940864892, 0.039864702454278714, -0.10737284251528388, 0.05055725035991547, 0.00175108584938249, -0.13606726368738836], 
      [ -0.0040269958559816469, -0.036698218288480425, 0.072501070354695704, -0.056564040810879894, 0.12008147931184941, 0.12137767813607817, 0.031510710584075646, -0.093523825495735333, 0.03102068224192369, 0.0039926562394974018, 0.1074856643504072, 0.0065018775352941637, -0.031336039816477361, 0.08089464498434866, 0.062517461426333021, 0.079044186809083081, -0.013722582803366993, 0.050612758476172762, 0.00618959520503954, 0.0057173813576260179], 
      [ 0.0046253055555129981, 0.0018994102698154242, 0.032883289803905598, -0.031605114052025693, 0.067448435171749629, -0.10736758608785574, 0.12150296809183192, 0.11557936043370105, -0.026956101326533272, -0.019032297528091408, 0.015019999618783478, 0.11268117275247995, -0.028909549827634096, -0.019948111144142407, 0.04956037623096237, 0.063083586239860781, -0.080034225248292012, 0.053478351200526623, 0.0088711022623332511, -0.11922080818583669]
    ], 
    "numEvalues": 20, 
    "eigenValues": [
      448.2615028731629, 
      152.88433766749935, 
      77.079422234111703, 
      38.340488190771154, 
      27.754350120854401, 
      15.293153116152746, 
      13.085890189100295, 
      10.196616391772121, 
      7.2364679411701438, 
      6.5964537073839553, 
      5.7388999381293884, 
      5.6223215910853748, 
      4.6227291984146053, 
      4.393149515511058, 
      3.9714381417641094, 
      3.5791364382171165, 
      3.4263759023353697, 
      3.078849017302407, 
      2.6395798573836098, 
      2.4414195196560233
    ], 
    "numPtsPerSample": 71, 
    "nonRegularizedVectors": [0], 
    "meanShape": [
      [25.011254225136952, 34.815173567571549], 
      [24.381567267455893, 45.626763203908808], 
      [25.830707280728745, 56.164927637057076], 
      [28.675368741312013, 66.695735954974964], 
      [33.59842962462659, 75.549155778418879], 
      [40.332640541597783, 82.561857303541444], 
      [48.359309091167063, 87.999836114954576], 
      [57.763839129670998, 89.783311477497705], 
      [67.090852037871969, 87.63091750236714], 
      [74.897176557764965, 81.881107153483129], 
      [81.35004130814275, 74.608685557615786], 
      [85.920682599877409, 65.568286826736994], 
      [88.348489374468954, 54.933637000847114], 
      [89.381567267455921, 44.346585170183118], 
      [88.326664228593643, 33.56817361245254], 
      [81.566856326247773, 27.444862527091914], 
      [76.619772918209833, 25.17298033285374], 
      [69.153548565650397, 25.746811251285578], 
      [63.337202235413088, 27.340674714612589], 
      [31.524715699235657, 28.430444822342793], 
      [36.378507746326761, 25.965533928582431], 
      [43.861536613791145, 26.244938607124027], 
      [49.736130518962113, 27.608548456866743], 
      [35.982434927065498, 35.443406084328842], 
      [41.74296700227427, 32.491136119230305], 
      [48.056933854020826, 35.383200094731308], 
      [41.827893337283342, 37.01094114500529], 
      [41.960848751111143, 34.61071899652552], 
      [77.388728098024785, 34.627907207783039], 
      [71.516418152976826, 31.904746609209838], 
      [65.321222211179702, 35.043179129766543], 
      [71.609524186972465, 36.424390535431939], 
      [71.382163563407005, 34.031264828125074], 
      [56.645668790714296, 33.009120609139984], 
      [50.194189402484938, 46.941098052316647], 
      [47.456988308925929, 51.770997981023982], 
      [50.07251572822895, 55.035267306968535], 
      [57.101339593814998, 56.145435575714828], 
      [64.081000008569561, 54.759369555253215], 
      [66.565969098022094, 51.394645712515057], 
      [63.640714233003223, 46.676268118194287], 
      [56.826129496946521, 42.171866411747999], 
      [52.142251303692888, 53.25579760946124], 
      [61.942803190976235, 53.062775282622852], 
      [45.090870407180603, 66.45744111296608], 
      [49.30691311256561, 63.535961653371373], 
      [54.022310354591866, 62.360055474188812], 
      [57.235786373192525, 62.971861611246879], 
      [60.422680620195308, 62.233999883085119], 
      [65.180722218119797, 63.223326242164035], 
      [69.508528157121361, 65.976534203943174], 
      [66.692952911540658, 69.861040892668086], 
      [62.796902525468738, 72.430437387210816], 
      [57.438793685614598, 73.279393032509802], 
      [52.051412524023078, 72.642070314310331], 
      [48.057213957229465, 70.228072641153915], 
      [51.312826281003822, 68.334857344858165], 
      [57.355342381712035, 69.042220849614353], 
      [63.365320267430491, 68.097482913273097], 
      [63.302666508653772, 65.1057867536814], 
      [57.283082963456252, 65.373307571221233], 
      [51.257633954541575, 65.343014232008443], 
      [56.997384601005933, 50.86720524009678], 
      [38.345016967805378, 33.379866011204456], 
      [45.43217757469057, 33.213084051757619], 
      [45.102977179460538, 36.387811845290685], 
      [38.616928471611573, 36.562115185290565], 
      [74.946726694421386, 32.658993629837994], 
      [67.858495092410578, 32.771396681549788], 
      [68.312444531975871, 35.930700302534717], 
      [74.800326543573135, 35.849481471486683]
    ]
  }, 
  "hints": {
    "rightEye": [71.382163563407005, 34.031264828125074], 
    "leftEye": [41.960848751111143, 34.61071899652552], 
    "nose": [56.997384601005933, 50.86720524009678]
  }
};





// Shimming for noflo build
module.exports = pModel;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, wireframe;

noflo = __webpack_require__(0);

wireframe = [[28, 70, 13], [39, 12, 13], [70, 39, 13], [14, 28, 13], [50, 11, 12], [39, 50, 12], [15, 28, 14], [50, 10, 11], [31, 39, 70], [67, 28, 15], [16, 67, 15], [51, 9, 10], [50, 51, 10], [39, 38, 50], [38, 49, 50], [40, 39, 31], [29, 67, 16], [67, 70, 28], [51, 52, 9], [17, 29, 16], [69, 40, 31], [32, 70, 67], [52, 8, 9], [32, 31, 70], [29, 32, 67], [68, 32, 29], [17, 68, 29], [32, 69, 31], [68, 69, 32], [52, 53, 8], [53, 7, 8], [30, 40, 69], [18, 68, 17], [49, 59, 50], [58, 51, 50], [59, 58, 50], [41, 40, 30], [68, 30, 69], [38, 48, 49], [18, 30, 68], [58, 52, 51], [43, 38, 39], [40, 43, 39], [37, 48, 38], [18, 33, 30], [33, 41, 30], [48, 59, 49], [57, 52, 58], [62, 43, 40], [43, 37, 38], [53, 6, 7], [59, 60, 58], [60, 57, 58], [41, 62, 40], [48, 60, 59], [22, 33, 18], [57, 53, 52], [54, 6, 53], [62, 37, 43], [37, 47, 48], [47, 60, 48], [33, 25, 41], [41, 34, 62], [62, 42, 37], [37, 46, 47], [57, 54, 53], [47, 46, 60], [61, 56, 60], [60, 56, 57], [56, 54, 57], [36, 46, 37], [46, 61, 60], [34, 42, 62], [42, 36, 37], [25, 34, 41], [5, 6, 54], [22, 25, 33], [25, 65, 34], [55, 5, 54], [45, 61, 46], [36, 45, 46], [64, 25, 22], [34, 35, 42], [56, 55, 54], [35, 36, 42], [45, 44, 61], [61, 44, 56], [44, 55, 56], [44, 45, 36], [35, 44, 36], [26, 35, 34], [65, 26, 34], [4, 5, 55], [21, 64, 22], [26, 66, 35], [2, 44, 35], [44, 4, 55], [2, 3, 44], [66, 1, 35], [64, 65, 25], [21, 24, 64], [1, 2, 35], [27, 65, 64], [3, 4, 44], [24, 27, 64], [27, 26, 65], [20, 24, 21], [23, 1, 66], [20, 63, 24], [24, 63, 27], [66, 26, 27], [63, 66, 27], [20, 19, 63], [19, 23, 63], [63, 23, 66], [0, 1, 23], [19, 0, 23]];

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'meh-o';
  c.description = 'Points from TrackFace to wireframe (array of triangle paths)';
  c.inPorts.add('points', {
    datatype: 'array',
    description: 'points from TrackFace'
  });
  c.outPorts.add('paths', {
    datatype: 'array'
  });
  return c.process(function(input, output) {
    var i, len, path, paths, payload, tri;
    if (!input.hasData('points')) {
      return;
    }
    payload = input.getData('points');
    paths = [];
    for (i = 0, len = wireframe.length; i < len; i++) {
      tri = wireframe[i];
      path = {
        type: 'path',
        items: [payload[tri[0]], payload[tri[1]], payload[tri[2]]]
      };
      paths.push(path);
    }
    return output.sendDone({
      paths: paths
    });
  });
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'This component calls a given callback function for each IP it receives.  The Callback component is typically used to connect NoFlo with external Node.js code.';
  c.icon = 'sign-out';
  c.inPorts.add('in', {
    description: 'Object passed as argument of the callback',
    datatype: 'all'
  });
  c.inPorts.add('callback', {
    description: 'Callback to invoke',
    datatype: 'function',
    control: true,
    required: true
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var callback, data, e, ref;
    if (!input.hasData('callback', 'in')) {
      return;
    }
    ref = input.getData('callback', 'in'), callback = ref[0], data = ref[1];
    if (typeof callback !== 'function') {
      output.done(new Error('The provided callback must be a function'));
      return;
    }
    try {
      callback(data);
    } catch (error) {
      e = error;
      return output.done(e);
    }
    return output.done();
  });
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, owl;

noflo = __webpack_require__(0);

owl = __webpack_require__(19);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'deep (i.e. recursively) copy an object';
  c.icon = 'copy';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be copied'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    description: 'Copy of the original packet'
  });
  return c.process(function(input, output) {
    var copy, data;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    copy = owl.deepCopy(data);
    output.sendDone({
      out: copy
    });
  });
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var brackets, c;
  c = new noflo.Component;
  c.description = 'Makes each data packet a stream of its own';
  c.icon = 'pause';
  c.forwardBrackets = {};
  c.autoOrdering = false;
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be forward with disconnection'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  brackets = {};
  c.tearDown = function(callback) {
    return brackets = {};
  };
  return c.process(function(input, output) {
    var bracket, closes, data, i, j, len, len1, ref;
    c.autoOrdering = false;
    data = input.get('in');
    if (!brackets[input.scope]) {
      brackets[input.scope] = [];
    }
    if (data.type === 'openBracket') {
      brackets[input.scope].push(data.data);
      output.done();
      return;
    }
    if (data.type === 'closeBracket') {
      brackets[input.scope].pop();
      output.done();
      return;
    }
    if (data.type !== 'data') {
      return;
    }
    ref = brackets[input.scope];
    for (i = 0, len = ref.length; i < len; i++) {
      bracket = ref[i];
      output.sendIP('out', new noflo.IP('openBracket', bracket));
    }
    output.sendIP('out', data);
    closes = brackets[input.scope].slice(0);
    closes.reverse();
    for (j = 0, len1 = closes.length; j < len1; j++) {
      bracket = closes[j];
      output.sendIP('out', new noflo.IP('closeBracket', bracket));
    }
    return output.done();
  });
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'This component drops every packet it receives with no action';
  c.icon = 'trash-o';
  c.inPorts.add('in', {
    datatypes: 'all',
    description: 'Packet to be dropped'
  });
  return c.process(function(input, output) {
    var data;
    data = input.get('in');
    data.drop();
    output.done();
  });
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'This component generates a single packet and sends it to the output port. Mostly usable for debugging, but can also be useful for starting up networks.';
  c.icon = 'share';
  c.inPorts.add('in', {
    datatype: 'bang',
    description: 'Signal to send the data packet'
  });
  c.inPorts.add('data', {
    datatype: 'all',
    description: 'Packet to be sent',
    control: true,
    "default": null
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var bang, data;
    if (!input.hasStream('in')) {
      return;
    }
    if (input.attached('data').length && !input.hasData('data')) {
      return;
    }
    bang = input.getData('in');
    data = input.getData('data');
    output.send({
      out: data
    });
    return output.done();
  });
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, prepareFunction;
  c = new noflo.Component;
  c.description = 'Evaluates a function each time data hits the "in" port and sends the return value to "out". Within the function "x" will be the variable from the in port. For example, to make a ^2 function input "return x*x;" to the function port.';
  c.icon = 'code';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be processed'
  });
  c.inPorts.add('function', {
    datatype: 'string',
    description: 'Function to evaluate',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('function', {
    datatype: 'function'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  prepareFunction = function(func, callback) {
    var e, newFunc;
    if (typeof func === 'function') {
      callback(null, func);
      return;
    }
    try {
      newFunc = Function('x', func);
    } catch (error) {
      e = error;
      callback(e);
      return;
    }
    return callback(null, newFunc);
  };
  return c.process(function(input, output) {
    if (input.attached('in').length && !input.hasData('in')) {
      return;
    }
    if (input.hasData('function', 'in')) {
      prepareFunction(input.getData('function'), function(err, func) {
        var data, e, result;
        if (err) {
          output.done(e);
          return;
        }
        data = input.getData('in');
        try {
          result = func(data);
        } catch (error) {
          e = error;
          output.done(e);
          return;
        }
        output.sendDone({
          "function": func,
          out: result
        });
      });
      return;
    }
    if (!input.hasData('function')) {
      return;
    }
    prepareFunction(input.getData('function'), function(err, func) {
      if (err) {
        output.done(e);
        return;
      }
      output.sendDone({
        "function": func
      });
    });
  });
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'This component receives data on multiple input ports and sends the same data out to the connected output port';
  c.icon = 'compress';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be forwarded'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data;
    data = input.get('in');
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var log, noflo, util;

noflo = __webpack_require__(0);

if (!noflo.isBrowser()) {
  util = __webpack_require__(27);
} else {
  util = {
    inspect: function(data) {
      return data;
    }
  };
}

log = function(options, data) {
  if (options != null) {
    return console.log(util.inspect(data, options.showHidden, options.depth, options.colors));
  } else {
    return console.log(data);
  }
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Sends the data items to console.log';
  c.icon = 'bug';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be printed through console.log'
  });
  c.inPorts.add('options', {
    datatype: 'object',
    description: 'Options to be passed to console.log',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data, options;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('options').length && !input.hasData('options')) {
      return;
    }
    options = null;
    if (input.has('options')) {
      options = input.getData('options');
    }
    data = input.getData('in');
    log(options, data);
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 129 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Returns the value of a global variable.';
  c.icon = 'usd';
  c.inPorts.add('name', {
    description: 'The name of the global variable.'
  });
  c.outPorts.add('value', {
    description: 'The value of the variable.'
  });
  c.outPorts.add('error', {
    description: 'Any errors that occured reading the variables value.'
  });
  c.forwardBrackets = {
    name: ['value', 'error']
  };
  return c.process(function(input, output) {
    var data, err, value;
    if (!input.hasData('name')) {
      return;
    }
    data = input.getData('name');
    value = !noflo.isBrowser() ? global[data] : window[data];
    if (typeof value === 'undefined') {
      err = new Error("\"" + data + "\" is undefined on the global object.");
      output.sendDone(err);
      return;
    }
    return output.sendDone({
      value: value
    });
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Forwards packets and metadata in the same way it receives them';
  c.icon = 'forward';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to forward'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data;
    data = input.get('in');
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Like 'Repeat', except repeat on next tick";
  c.icon = 'step-forward';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to forward'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data;
    data = input.get('in');
    return setTimeout(function() {
      return output.sendDone({
        out: data
      });
    }, 0);
  });
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Forward packet after a set delay';
  c.icon = 'clock-o';
  c.timers = [];
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be forwarded with a delay'
  });
  c.inPorts.add('delay', {
    datatype: 'number',
    description: 'How much to delay',
    "default": 500,
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.tearDown = function(callback) {
    var i, len, ref, timer;
    ref = c.timers;
    for (i = 0, len = ref.length; i < len; i++) {
      timer = ref[i];
      clearTimeout(timer);
    }
    c.timers = [];
    return callback();
  };
  return c.process(function(input, output) {
    var delay, payload, timer;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('delay').length && !input.hasData('delay')) {
      return;
    }
    delay = 500;
    if (input.hasData('delay')) {
      delay = input.getData('delay');
    }
    payload = input.get('in');
    timer = setTimeout(function() {
      c.timers.splice(c.timers.indexOf(timer), 1);
      return output.sendDone({
        out: payload
      });
    }, delay);
    return c.timers.push(timer);
  });
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, cleanUp;
  c = new noflo.Component;
  c.description = 'Send a packet at the given interval';
  c.icon = 'clock-o';
  c.inPorts.add('interval', {
    datatype: 'number',
    description: 'Interval at which output packets are emitted (ms)',
    required: true,
    control: true
  });
  c.inPorts.add('start', {
    datatype: 'bang',
    description: 'Start the emission'
  });
  c.inPorts.add('stop', {
    datatype: 'bang',
    description: 'Stop the emission'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  c.timers = {};
  cleanUp = function(scope) {
    if (!c.timers[scope]) {
      return;
    }
    clearInterval(c.timers[scope].interval);
    c.timers[scope].deactivate();
    return c.timers[scope] = null;
  };
  c.tearDown = function(callback) {
    var context, ref, scope;
    ref = c.timers;
    for (scope in ref) {
      context = ref[scope];
      cleanUp(scope);
    }
    c.timers = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var interval, start, stop;
    if (input.hasData('start')) {
      if (!input.hasData('interval')) {
        return;
      }
      start = input.get('start');
      if (start.type !== 'data') {
        return;
      }
      interval = parseInt(input.getData('interval'));
      cleanUp(start.scope);
      context.interval = setInterval(function() {
        var bang;
        bang = new noflo.IP('data', true);
        bang.scope = start.scope;
        return c.outPorts.out.sendIP(bang);
      }, interval);
      c.timers[start.scope] = context;
      return;
    }
    if (input.hasData('stop')) {
      stop = input.get('stop');
      if (stop.type !== 'data') {
        return;
      }
      cleanUp(stop.scope);
    }
  });
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Send a packet after the given time in ms';
  c.icon = 'clock-o';
  c.timer = {};
  c.inPorts.add('time', {
    datatype: 'number',
    description: 'Time after which a packet will be sent',
    required: true,
    control: true
  });
  c.inPorts.add('start', {
    datatype: 'bang',
    description: 'Start the timeout before sending a packet'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  c.forwardBrackets = {
    start: ['out']
  };
  c.stopTimer = function(scope) {
    if (!c.timer[scope]) {
      return;
    }
    clearTimeout(c.timer[scope].timeout);
    c.timer[scope].deactivate();
    return delete c.timer[scope];
  };
  c.tearDown = function(callback) {
    var ref, scope, timer;
    ref = c.timer;
    for (scope in ref) {
      timer = ref[scope];
      c.stopTimer(scope);
    }
    return callback();
  };
  return c.process(function(input, output, context) {
    var bang, time;
    if (!input.hasData('time', 'start')) {
      return;
    }
    time = input.getData('time');
    bang = input.getData('start');
    c.stopTimer(input.scope);
    context.timeout = setTimeout(function() {
      c.timer = null;
      return output.sendDone({
        out: true
      });
    }, time);
    c.timer[input.scope] = context;
  });
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Sends next packet in buffer when receiving a bang';
  c.icon = 'forward';
  c.inPorts.add('data', {
    datatype: 'all'
  });
  c.inPorts.add('in', {
    datatype: 'bang'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('empty', {
    datatype: 'bang',
    required: false
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var bang, buf, packet, sent;
    if (!input.hasData('in')) {
      return;
    }
    bang = input.getData('in');
    if (!input.hasData('data')) {
      output.sendDone({
        empty: true
      });
      return;
    }
    sent = false;
    while (input.has('data')) {
      if (sent) {
        buf = c.inPorts.data.getBuffer(bang.scope);
        if (buf[0].type === 'data') {
          break;
        }
      }
      packet = input.get('data');
      output.send({
        out: packet
      });
      if (packet.type === 'data') {
        sent = true;
      }
    }
    return output.done();
  });
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'expand';
  c.description = 'This component receives data on a single input port and sends the same data out to all connected output ports';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Packet to be forwarded'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data;
    data = input.get('in');
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, setPosition;

noflo = __webpack_require__(0);

setPosition = function(element, attr, value) {
  if (attr === 'top' || attr === 'left') {
    value = value + "px";
  }
  element.style.position = 'absolute';
  return element.style[attr] = value;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Change the coordinates of a DOM element';
  c.icon = 'arrows';
  c.inPorts.add('element', {
    datatype: 'object',
    control: true
  });
  c.inPorts.add('point', {
    datatype: 'object'
  });
  c.inPorts.add('x', {
    datatype: 'number'
  });
  c.inPorts.add('y', {
    datatype: 'number'
  });
  c.inPorts.add('z', {
    datatype: 'number'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var element, point, ref, ref1, ref2, ref3, x, y, z;
    if (!input.hasData('element')) {
      return;
    }
    if (input.hasData('point')) {
      ref = input.getData('element', 'point'), element = ref[0], point = ref[1];
      setPosition(element, 'left', point.x);
      setPosition(element, 'top', point.y);
      output.sendDone({
        out: true
      });
      return;
    }
    if (input.hasData('x')) {
      ref1 = input.getData('element', 'x'), element = ref1[0], x = ref1[1];
      setPosition(element, 'left', x);
      output.sendDone({
        out: true
      });
      return;
    }
    if (input.hasData('y')) {
      ref2 = input.getData('element', 'y'), element = ref2[0], y = ref2[1];
      setPosition(element, 'top', y);
      output.sendDone({
        out: true
      });
      return;
    }
    if (input.hasData('z')) {
      ref3 = input.getData('element', 'z'), element = ref3[0], z = ref3[1];
      setPosition(element, 'zIndex', z);
      output.sendDone({
        out: true
      });
    }
  });
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, setSize;

noflo = __webpack_require__(0);

setSize = function(element, attr, value) {
  element.style.position = 'absolute';
  return element.style[attr] = value + "px";
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Change the size of a DOM element';
  c.icon = 'arrows';
  c.inPorts.add('element', {
    datatype: 'object',
    control: true
  });
  c.inPorts.add('size', {
    datatype: 'object'
  });
  c.inPorts.add('width', {
    datatype: 'number'
  });
  c.inPorts.add('height', {
    datatype: 'number'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var element, height, ref, ref1, ref2, size, width;
    if (!input.hasData('element')) {
      return;
    }
    if (input.hasData('size')) {
      ref = input.getData('element', 'size'), element = ref[0], size = ref[1];
      setSize(element, 'width', size.width);
      setSize(element, 'height', size.height);
      output.sendDone({
        out: true
      });
      return;
    }
    if (input.hasData('width')) {
      ref1 = input.getData('element', 'width'), element = ref1[0], width = ref1[1];
      setSize(element, 'width', width);
      output.sendDone({
        out: true
      });
      return;
    }
    if (input.hasData('height')) {
      ref2 = input.getData('element', 'height'), element = ref2[0], height = ref2[1];
      setSize(element, 'height', height);
      output.sendDone({
        out: true
      });
    }
  });
};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, setRotation;

noflo = __webpack_require__(0);

setRotation = function(element, degrees, gpu) {
  var transform;
  transform = "rotate(" + degrees + "deg)";
  if (gpu) {
    transform = transform + " translateZ(0px) translate3d(0px, 0px, 0px)";
  }
  return element.style.transform = transform;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Change the coordinates of a DOM element';
  c.icon = 'rotate-right';
  c.inPorts.add('element', {
    datatype: 'object',
    control: true
  });
  c.inPorts.add('percent', {
    datatype: 'number'
  });
  c.inPorts.add('degrees', {
    datatype: 'number'
  });
  c.inPorts.add('gpu', {
    datatype: 'boolean',
    control: true,
    "default": true,
    description: 'Whether to GPU-accelerate the rotation'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var degrees, element, gpu, percent, ref, ref1;
    if (!input.hasData('element')) {
      return;
    }
    if (input.hasData('percent')) {
      ref = input.getData('element', 'percent'), element = ref[0], percent = ref[1];
      gpu = input.hasData('gpu') ? input.getData('gpu') : true;
      degrees = 360 * percent % 360;
      setRotation(element, degrees, gpu);
      output.sendDone({
        out: true
      });
      return;
    }
    if (input.hasData('degrees')) {
      ref1 = input.getData('element', 'degrees'), element = ref1[0], degrees = ref1[1];
      gpu = input.hasData('gpu') ? input.getData('gpu') : true;
      setRotation(element, degrees, gpu);
      output.sendDone({
        out: true
      });
    }
  });
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Set element\'s CSS background image';
  c.icon = 'picture';
  c.inPorts.add('element', {
    datatype: 'object',
    control: true
  });
  c.inPorts.add('imagedata', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var element, imagedata, ref;
    if (!input.hasData('element', 'imagedata')) {
      return;
    }
    ref = input.getData('element', 'imagedata'), element = ref[0], imagedata = ref[1];
    element.style.background = 'url(' + imagedata + ') no-repeat center';
    return output.sendDone({
      out: true
    });
  });
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Set element\'s CSS top';
  c.icon = 'arrows-v';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('top', {
    datatype: 'number'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var element, ref, top;
    if (!input.hasData('element', 'top')) {
      return;
    }
    ref = input.getData('element', 'top'), element = ref[0], top = ref[1];
    element.style.position = 'absolute';
    element.style.top = top + "px";
    return output.sendDone({
      out: true
    });
  });
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Add a class to an element';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('class', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var className, element, ref;
    if (!input.has('element', 'class')) {
      return;
    }
    ref = input.getData('element', 'class'), element = ref[0], className = ref[1];
    element.classList.add(className);
    return output.done();
  });
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Append elements as children of a parent element';
  c.inPorts.add('parent', {
    datatype: 'object'
  });
  c.inPorts.add('child', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var child, parent, ref;
    if (!input.hasData('parent', 'child')) {
      return;
    }
    ref = input.getData('parent', 'child'), parent = ref[0], child = ref[1];
    parent.appendChild(child);
    return output.done();
  });
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Create a new DOM Element';
  c.inPorts.add('tagname', {
    datatype: 'string'
  });
  c.inPorts.add('container', {
    datatype: 'object'
  });
  c.outPorts.add('element', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    tagname: ['element']
  };
  return c.process(function(input, output) {
    var container, element, tagname;
    if (!input.hasData('tagname')) {
      return;
    }
    if (c.inPorts.container.isAttached()) {
      if (!input.hasData('container')) {
        return;
      }
    }
    tagname = input.getData('tagname');
    element = document.createElement(tagname);
    if (input.hasData('container')) {
      container = input.getData('container');
      container.appendChild(element);
    }
    return output.sendDone({
      element: element
    });
  });
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Create a new DOM DocumentFragment';
  c.inPorts.add('in', {
    datatype: 'bang'
  });
  c.outPorts.add('fragment', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    "in": ['fragment']
  };
  return c.process(function(input, output) {
    var fragment;
    if (!input.hasData('in')) {
      return;
    }
    input.getData('in');
    fragment = document.createDocumentFragment();
    return output.sendDone({
      fragment: fragment
    });
  });
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Reads the given attribute from the DOM element on the in port.";
  c.inPorts.add('element', {
    datatype: 'object',
    description: 'The element from which to read the attribute from.',
    required: true
  });
  c.inPorts.add('attribute', {
    datatype: 'string',
    description: 'The attribute which is read from the DOM element.',
    required: true,
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Value of the attribute being read.'
  });
  c.forwardBrackets = {
    element: ['out']
  };
  return c.process(function(input, output) {
    var attribute, element, ref, value;
    if (!input.hasData('element', 'attribute')) {
      return;
    }
    ref = input.getData('element', 'attribute'), element = ref[0], attribute = ref[1];
    value = element.getAttribute(attribute);
    return output.sendDone({
      out: value
    });
  });
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get a DOM element matching a query';
  c.inPorts.add('in', {
    datatype: 'object',
    description: 'DOM element to constrain the query to'
  });
  c.inPorts.add('selector', {
    datatype: 'string',
    description: 'CSS selector'
  });
  c.outPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    selector: ['element', 'error']
  };
  return c.process(function(input, output) {
    var container, el, element, i, j, len, len1, ref, selector;
    if (!input.hasData('selector')) {
      return;
    }
    if (input.attached('in').length > 0) {
      if (!input.hasData('in')) {
        return;
      }
    }
    if (input.hasData('in')) {
      ref = input.getData('in', 'selector'), container = ref[0], selector = ref[1];
      if (typeof container.querySelector !== 'function') {
        output.done(new Error('Given container doesn\'t support querySelectors'));
        return;
      }
      el = container.querySelectorAll(selector);
      if (!el.length) {
        output.done(new Error("No element matching '" + selector + "' found under container"));
        return;
      }
      for (i = 0, len = el.length; i < len; i++) {
        element = el[i];
        output.send({
          element: element
        });
      }
      output.done();
      return;
    }
    selector = input.getData('selector');
    el = document.querySelectorAll(selector);
    if (!el.length) {
      output.done(new Error("No element matching '" + selector + "' found under document"));
      return;
    }
    for (j = 0, len1 = el.length; j < len1; j++) {
      element = el[j];
      output.send({
        element: element
      });
    }
    return output.done();
  });
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Check if an element has a given class';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('class', {
    datatype: 'string'
  });
  c.outPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('missed', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var element, klass, ref;
    if (!input.hasData('element', 'class')) {
      return;
    }
    ref = input.getData('element', 'class'), element = ref[0], klass = ref[1];
    if (element.classList.contains(klass)) {
      output.sendDone({
        element: element
      });
      return;
    }
    return output.sendDone({
      missed: element
    });
  });
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, cleanUp;
  c = new noflo.Component;
  c.description = 'addEventListener for specified event type';
  c.icon = 'stethoscope';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('type', {
    datatype: 'string'
  });
  c.inPorts.add('preventdefault', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.outPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('event', {
    datatype: 'object'
  });
  c.elements = {};
  cleanUp = function(scope) {
    var element, event, listener, ref;
    if (!c.elements[scope]) {
      return;
    }
    ref = c.elements[scope], element = ref.element, event = ref.event, listener = ref.listener;
    element.removeEventListener(event, listener);
    c.elements[scope].deactivate();
    return delete c.elements[scope];
  };
  c.tearDown = function(callback) {
    var element, ref, scope;
    ref = c.elements;
    for (scope in ref) {
      element = ref[scope];
      cleanUp(scope);
    }
    c.elements = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var element, preventDefault, ref, scope, type;
    if (!input.hasData('element', 'type')) {
      return;
    }
    ref = input.getData('element', 'type'), element = ref[0], type = ref[1];
    preventDefault = false;
    if (input.hasData('preventdefault')) {
      preventDefault = input.getData('preventdefault');
    }
    scope = null;
    cleanUp(scope);
    context.element = element;
    context.event = type;
    context.listener = function(event) {
      if (preventDefault) {
        event.preventDefault();
      }
      return output.send({
        element: context.element,
        event: event
      });
    };
    c.elements[context] = context;
    return element.addEventListener(type, context.listener);
  });
};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Read HTML from an existing element';
  c.inPorts.add('container', {
    datatype: 'object'
  });
  c.outPorts.add('html', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    container: ['html']
  };
  return c.process(function(input, output) {
    var container;
    if (!input.hasData('container')) {
      return;
    }
    container = input.getData('container');
    return output.sendDone({
      html: container.innerHTML
    });
  });
};


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Remove a class from an element';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('class', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var className, element, ref;
    if (!input.has('element', 'class')) {
      return;
    }
    ref = input.getData('element', 'class'), element = ref[0], className = ref[1];
    element.classList.remove(className);
    return output.done();
  });
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Remove an element from DOM';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var element;
    if (!input.hasData('element')) {
      return;
    }
    element = input.getData('element');
    if (!element.parentNode) {
      return;
    }
    element.parentNode.removeChild(element);
    return output.done();
  });
};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, requestAnimationFrame;

noflo = __webpack_require__(0);

requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
  return window.setTimeout(function() {
    return callback(+new Date());
  }, 1000 / 60);
};

exports.getComponent = function() {
  var c, cleanUp;
  c = new noflo.Component;
  c.description = 'Sends bangs that correspond with screen refresh rate.';
  c.icon = 'film';
  c.inPorts.add('start', {
    datatype: 'bang'
  });
  c.inPorts.add('stop', {
    datatype: 'bang'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  c.running = {};
  cleanUp = function(scope) {
    if (!c.running[scope]) {
      return;
    }
    c.running[scope].deactivate();
    return delete c.running[scope];
  };
  c.tearDown = function(callback) {
    var ref, running, scope;
    ref = c.running;
    for (scope in ref) {
      running = ref[scope];
      cleanUp(scope);
    }
    c.running = {};
    return callback();
  };
  c.animate = function(scope, output) {
    if (!c.running[scope]) {
      return;
    }
    output.send(true);
    return requestAnimationFrame(c.animate.bind(c, scope, output));
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var start, stop;
    if (input.hasData('start')) {
      start = input.get('start');
      if (start.type !== 'data') {
        return;
      }
      cleanUp(start.scope);
      c.running[start.scope] = context;
      requestAnimationFrame(c.animate.bind(c, start.scope, output));
      return;
    }
    if (input.hasData('stop')) {
      stop = input.get('stop');
      if (stop.type !== 'data') {
        return;
      }
      cleanUp(stop.scope);
    }
  });
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Set the given attribute on the DOM element to the received value.";
  c.inPorts.add('element', {
    datatype: 'object',
    description: 'The element on which to set the attribute.'
  });
  c.inPorts.add('attribute', {
    datatype: 'string',
    description: 'The attribute which is set on the DOM element.'
  });
  c.inPorts.add('value', {
    datatype: 'string',
    description: 'Value of the attribute being set.'
  });
  c.outPorts.add('element', {
    datatype: 'object',
    description: 'The element that was updated.'
  });
  c.forwardBrackets = {
    element: ['element'],
    value: ['element']
  };
  return c.process(function(input, output) {
    var attribute, element, key, newVal, ref, val, value;
    if (!input.hasData('element', 'attribute', 'value')) {
      return;
    }
    ref = input.getData('element', 'attribute', 'value'), element = ref[0], attribute = ref[1], value = ref[2];
    if (typeof value === 'object') {
      if (toString.call(value) === '[object Array]') {
        value = value.join(' ');
      } else {
        newVal = [];
        for (key in value) {
          val = value[key];
          newVal.push(val);
        }
        value = newVal.join(' ');
      }
    }
    if (attribute === "value") {
      element.value = value;
    } else {
      element.setAttribute(attribute, value);
    }
    return output.sendDone({
      element: element
    });
  });
};


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Write HTML inside an existing element';
  c.inPorts.add('container', {
    datatype: 'object'
  });
  c.inPorts.add('html', {
    datatype: 'string'
  });
  c.outPorts.add('container', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var container, html, ref;
    if (!input.hasData('container', 'html')) {
      return;
    }
    ref = input.getData('container', 'html'), container = ref[0], html = ref[1];
    container.innerHTML = html;
    return output.sendDone({
      container: container
    });
  });
};


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'accept and forward certain incoming packets';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'An IP to be forwarded if accepted'
  });
  c.inPorts.add('accept', {
    datatype: 'all',
    description: 'IP to be accepted'
  });
  c.inPorts.add('reset', {
    datatype: 'bang',
    description: 'Reset the list accepted IPs'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.accepts = {};
  c.tearDown = function(callback) {
    c.accepts = {};
    return callback();
  };
  return c.process(function(input, output) {
    var accept, data;
    if (input.hasData('accept')) {
      accept = input.getData('accept');
      if (!c.accepts[input.scope]) {
        c.accepts[input.scope] = [];
      }
      c.accepts[input.scope].push(accept);
      output.done();
      return;
    }
    if (input.hasData('reset')) {
      input.getData('reset');
      c.accepts = {};
      output.done();
      return;
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (c.accepts[input.scope].indexOf(data) === -1) {
      output.done();
      return;
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, prepareScope;

noflo = __webpack_require__(0);

prepareScope = function() {
  var data;
  data = {
    results: {},
    resolved: false,
    rejected: false
  };
  return data;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Like Promise.all, wait for result from all connected inputs and send them or an error out';
  c.icon = 'compress';
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.inPorts.add('error', {
    datatype: 'object'
  });
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.pending = {};
  c.tearDown = function(callback) {
    c.pending = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var err, i, idx, indexesWithStreams, len, ref, ref1, resultData, results;
    if (input.hasData('error')) {
      err = input.getData('error');
      if (!c.pending[input.scope]) {
        c.pending[input.scope] = prepareScope();
      }
      if (c.pending[input.scope].rejected || c.pending[input.scope].resolved) {
        output.done();
        return;
      }
      c.pending[input.scope].rejected = true;
      delete c.pending[input.scope].results;
      output.sendDone({
        error: err
      });
      return;
    }
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (!indexesWithStreams.length) {
      return;
    }
    if (!c.pending[input.scope]) {
      c.pending[input.scope] = prepareScope();
    }
    if (c.pending[input.scope].rejected || c.pending[input.scope].resolved) {
      indexesWithStreams.forEach(function(idx) {
        var i, ip, len, results1, stream;
        stream = input.getStream(['in', idx]);
        results1 = [];
        for (i = 0, len = stream.length; i < len; i++) {
          ip = stream[i];
          results1.push(ip.drop());
        }
        return results1;
      });
      output.done();
      return;
    }
    results = c.pending[input.scope].results;
    indexesWithStreams.forEach(function(idx) {
      var stream;
      stream = input.getStream(['in', idx]).filter(function(ip) {
        return ip.type === 'data';
      });
      if (results[idx]) {
        return;
      }
      if (!results[idx]) {
        results[idx] = [];
      }
      return results[idx] = results[idx].concat(stream);
    });
    ref = input.attached('in');
    for (i = 0, len = ref.length; i < len; i++) {
      idx = ref[i];
      if ((ref1 = results[idx]) != null ? ref1.length : void 0) {
        continue;
      }
      output.done();
      return;
    }
    c.pending[input.scope].resolved = true;
    resultData = input.attached('in').map(function(idx) {
      var data;
      data = results[idx].map(function(ip) {
        return ip.data;
      });
      if (data.length === 1) {
        return data[0];
      }
      return data;
    });
    output.sendDone({
      out: resultData
    });
    return delete c.pending[input.scope].results;
  });
};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "when several streams are nested through the array in-port (i.e. a connect through one of the ports before there is a disconnect), separate the streams into distinct streams with no overlapping";
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithStreams;
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (!indexesWithStreams.length) {
      return;
    }
    indexesWithStreams.forEach(function(idx) {
      var i, len, packet, results, stream;
      stream = input.getStream(['in', idx]);
      results = [];
      for (i = 0, len = stream.length; i < len; i++) {
        packet = stream[i];
        packet.index = idx;
        results.push(output.send({
          out: packet
        }));
      }
      return results;
    });
    return output.done();
  });
};


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'expand';
  c.description = 'Like core/Split, but only begins sending at end of a stream';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var i, len, packet, stream;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in');
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      output.send({
        out: packet
      });
    }
    return output.done();
  });
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, sendWithGroups, sortByControlFields;

noflo = __webpack_require__(0);

sortByControlFields = function(fields, a, b) {
  var field, i, len, order, sort;
  if (!fields.length) {
    return 0;
  }
  sort = function(left, right) {
    if (typeof left === 'string') {
      left = left.toLowerCase();
    }
    if (typeof right === 'string') {
      right = right.toLowerCase();
    }
    if (left === right) {
      return 0;
    }
    if (left > right) {
      return 1;
    }
    return -1;
  };
  for (i = 0, len = fields.length; i < len; i++) {
    field = fields[i];
    order = sort(a.data[field], b.data[field]);
    if (order !== 0) {
      return order;
    }
  }
  if (this.indexOf(a) < this.indexOf(b)) {
    return -1;
  }
  return 1;
};

sendWithGroups = function(packets, fields, output) {
  var closes, differing, f, field, i, idx, j, k, l, len, len1, len2, len3, len4, len5, m, n, packet, previous, results;
  previous = null;
  for (i = 0, len = packets.length; i < len; i++) {
    packet = packets[i];
    for (j = 0, len1 = fields.length; j < len1; j++) {
      field = fields[j];
      if (previous) {
        break;
      }
      output.send({
        out: new noflo.IP('openBracket', field)
      });
    }
    if (previous) {
      for (idx = k = 0, len2 = fields.length; k < len2; idx = ++k) {
        field = fields[idx];
        if (packet.data[field] === previous.data[field]) {
          continue;
        }
        differing = fields.slice(idx);
        closes = differing.slice(0);
        closes.reverse();
        for (l = 0, len3 = closes.length; l < len3; l++) {
          f = closes[l];
          output.send({
            out: new noflo.IP('closeBracket', f)
          });
        }
        for (m = 0, len4 = differing.length; m < len4; m++) {
          f = differing[m];
          output.send({
            out: new noflo.IP('openBracket', f)
          });
        }
        break;
      }
    }
    output.send({
      out: packet
    });
    previous = packet;
  }
  closes = fields.slice(0);
  closes.reverse();
  results = [];
  for (n = 0, len5 = closes.length; n < len5; n++) {
    field = closes[n];
    results.push(output.send({
      out: new noflo.IP('closeBracket', field)
    }));
  }
  return results;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Collate two or more streams, based on a list of control field lengths';
  c.icon = 'sort-amount-asc';
  c.inPorts.add('ctlfields', {
    datatype: 'string',
    description: 'Comma-separated list of object keys to collate by',
    control: true
  });
  c.inPorts.add('in', {
    description: 'Objects to collate',
    datatype: 'object',
    addressable: true
  });
  c.outPorts.add('out', {
    description: 'Objects in collated order',
    datatype: 'object'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var fields, i, idx, indexesWithStreams, len, original, packets, stream;
    if (!input.hasData('ctlfields')) {
      return;
    }
    if (!input.attached('in').length) {
      return;
    }
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (indexesWithStreams.length !== input.attached('in').length) {
      return;
    }
    fields = input.getData('ctlfields');
    if (typeof fields === 'string') {
      fields = fields.split(',');
    }
    packets = [];
    for (i = 0, len = indexesWithStreams.length; i < len; i++) {
      idx = indexesWithStreams[i];
      stream = input.getStream(['in', idx]).filter(function(ip) {
        return ip.type === 'data';
      });
      packets = packets.concat(stream);
    }
    original = packets.slice(0);
    packets.sort(sortByControlFields.bind(original, fields));
    output.send({
      out: new noflo.IP('openBracket', null)
    });
    sendWithGroups(packets, fields, output);
    output.send({
      out: new noflo.IP('closeBracket', null)
    });
    return output.done();
  });
};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, clear;
  c = new noflo.Component;
  c.description = 'Collect packets and send them when input stops after a given timeout';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to collect until a timeout'
  });
  c.inPorts.add('timeout', {
    datatype: 'number',
    description: 'Amount of time to hold IPs for in milliseconds',
    "default": 300,
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    description: 'IPs collected until the timeout'
  });
  c.timeout = null;
  clear = function() {
    if (!c.timeout) {
      return;
    }
    clearTimeout(c.timeout.timeout);
    return c.timeout.ctx.deactivate();
  };
  c.tearDown = function(callback) {
    clear();
    return callback();
  };
  return c.process(function(input, output, context) {
    var timeout;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('timeout') && !input.hasData('timeout')) {
      return;
    }
    if (input.hasData('timeout')) {
      timeout = parseInt(input.getData('timeout'));
    } else {
      timeout = 300;
    }
    clear();
    return c.timeout = {
      ctx: context,
      timeout: setTimeout(function() {
        var packet;
        while (input.hasData('in')) {
          packet = input.getData('in');
          output.send({
            out: packet
          });
        }
        return output.done();
      }, timeout)
    };
  });
};


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Gathers data from all incoming connections and sends them together in order of connection';
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var i, idx, indexesWithStreams, j, len, len1, packet, stream;
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (indexesWithStreams.length !== input.attached('in').length) {
      return;
    }
    for (i = 0, len = indexesWithStreams.length; i < len; i++) {
      idx = indexesWithStreams[i];
      stream = input.getStream(['in', idx]);
      for (j = 0, len1 = stream.length; j < len1; j++) {
        packet = stream[j];
        packet.index = idx;
        output.send({
          out: packet
        });
      }
    }
    return output.done();
  });
};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "count down from particular number, by default 1, and send an empty IP when it hits 0";
  c.inPorts.add('in', {
    datatype: 'bang',
    description: 'IPs to decrease the count down'
  });
  c.inPorts.add('count', {
    datatype: 'int',
    description: 'Count down starting number',
    "default": 1,
    control: true
  });
  c.inPorts.add('repeat', {
    datatype: 'boolean',
    description: 'Repeat the count down mechanism if true',
    "default": true,
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'bang',
    description: 'IP emitted when the count reach 0'
  });
  c.outPorts.add('count', {
    datatype: 'int',
    description: 'Number of packets received in this cycle'
  });
  c.received = 0;
  c.tearDown = function(callback) {
    c.received = 0;
    return callback();
  };
  return c.process(function(input, output) {
    var count, repeat;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('count') && !input.hasData('count')) {
      return;
    }
    if (input.attached('repeat') && !input.hasData('repeat')) {
      return;
    }
    if (input.hasData('count')) {
      count = input.getData('count');
    } else {
      count = 1;
    }
    if (input.hasData('repeat')) {
      repeat = input.getData('repeat');
    } else {
      repeat = true;
    }
    input.getData('in');
    c.received++;
    output.send({
      count: c.received
    });
    if (c.received === count) {
      output.send({
        out: new noflo.IP('data', null)
      });
      if (repeat) {
        c.received = 0;
      }
    }
    return output.done();
  });
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Like 'core/Merge', but merge up to a specified number of streams.";
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IP to merge'
  });
  c.inPorts.add('threshold', {
    datatype: 'int',
    control: true,
    "default": 1
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.received = 0;
  c.tearDown = function(callback) {
    c.received = 0;
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var i, j, len, len1, packet, packets, threshold;
    if (!input.hasStream('in')) {
      return;
    }
    if (input.attached('threshold') && !input.hasData('threshold')) {
      return;
    }
    if (input.hasData('threshold')) {
      threshold = input.getData('threshold');
    } else {
      threshold = 1;
    }
    packets = input.getStream('in');
    if (c.received < threshold) {
      for (i = 0, len = packets.length; i < len; i++) {
        packet = packets[i];
        output.send({
          out: packet
        });
      }
    } else {
      for (j = 0, len1 = packets.length; j < len1; j++) {
        packet = packets[j];
        packet.drop();
      }
    }
    c.received++;
    return output.done();
  });
};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'deny certain incoming packets';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'An IP to be forwarded if accepted'
  });
  c.inPorts.add('deny', {
    datatype: 'all',
    description: 'IP to be denied'
  });
  c.inPorts.add('reset', {
    datatype: 'bang',
    description: 'Reset the list denied IPs'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.denied = {};
  c.tearDown = function(callback) {
    c.denied = {};
    return callback();
  };
  return c.process(function(input, output) {
    var data, deny;
    if (input.hasData('deny')) {
      deny = input.getData('deny');
      if (!c.denied[input.scope]) {
        c.denied[input.scope] = [];
      }
      c.denied[input.scope].push(deny);
      output.done();
      return;
    }
    if (input.hasData('reset')) {
      input.getData('reset');
      c.denied = {};
      output.done();
      return;
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (c.denied[input.scope].indexOf(data) !== -1) {
      output.done();
      return;
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Send the port number to 'PORT' to set where to direct IPs. It acts as a 'Split' by default, sending IPs to every out-port.";
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward'
  });
  c.inPorts.add('port', {
    datatype: 'number',
    description: 'Number of ports to forward IPs to'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.indexes = [];
  c.tearDown = function(callback) {
    c.indexes = [];
    return callback();
  };
  return c.process(function(input, output) {
    var data, i, idx, index, indexes, j, len, len1, port, ports;
    if (input.hasStream('port')) {
      ports = input.getStream('port').filter(function(ip) {
        return ip.type === 'data';
      });
      c.indexes = [];
      for (i = 0, len = ports.length; i < len; i++) {
        port = ports[i];
        index = parseInt(port.data);
        if (c.indexes.indexOf(index) !== -1) {
          continue;
        }
        c.indexes.push(index);
      }
      output.done();
      return;
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (c.indexes.length === 0) {
      indexes = c.outPorts.out.listAttached();
    } else {
      indexes = c.indexes.slice(0);
    }
    for (j = 0, len1 = indexes.length; j < len1; j++) {
      idx = indexes[j];
      output.send({
        out: new noflo.IP('data', data, {
          index: idx
        })
      });
    }
    return output.done();
  });
};


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Forward packets only when the gate is open';
  c.icon = 'pause';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('open', {
    datatype: 'bang',
    description: 'Send one IP to open the gate'
  });
  c.inPorts.add('close', {
    datatype: 'bang',
    description: 'Send one IP to close the gate'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.isOpen = false;
  c.tearDown = function(callback) {
    c.isOpen = false;
    c.icon = 'pause';
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var packet;
    if (input.hasData('open')) {
      input.getData('open');
      c.isOpen = true;
      c.setIcon('play');
      output.done();
      return;
    }
    if (input.hasData('close')) {
      input.getData('close');
      c.isOpen = false;
      c.setIcon('pause');
      output.done();
      return;
    }
    if (!input.has('in')) {
      return;
    }
    packet = input.get('in');
    if (!c.isOpen) {
      packet.drop();
      output.done();
      return;
    }
    return output.sendDone({
      out: packet
    });
  });
};


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, reset;
  c = new noflo.Component;
  c.description = "send connection to 'yes' if its top-level group is one of the provided groups, otherwise 'no'";
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to route use their groups'
  });
  c.inPorts.add('regexp', {
    datatype: 'string',
    description: 'Regexps to match groups'
  });
  c.inPorts.add('group', {
    datatype: 'string',
    description: 'List of groups (one group per IP)'
  });
  c.inPorts.add('reset', {
    datatype: 'bang',
    description: 'Reset the list of groups and regexps'
  });
  c.outPorts.add('yes', {
    datatype: 'all',
    description: 'IPs with group that match the groups or regexps provided'
  });
  c.outPorts.add('no', {
    datatype: 'all',
    description: 'IPs with group that don\'t match the groups or regexps provided'
  });
  c.forwardBrackets = {};
  c.matchGroups = [];
  c.regexps = [];
  reset = function() {
    c.matchGroups = [];
    return c.regexps = [];
  };
  c.tearDown = function(callback) {
    reset();
    return callback();
  };
  return c.process(function(input, output) {
    var group, i, j, k, l, len, len1, len2, len3, len4, m, matchGroup, matched, packet, packets, ref, ref1, regexp;
    if (input.hasData('group')) {
      c.matchGroups.push(input.getData('group'));
      output.done();
      return;
    }
    if (input.hasData('regexp')) {
      c.regexps.push(new RegExp(input.getData('regexp')));
      output.done();
      return;
    }
    if (input.hasData('reset')) {
      input.getData('reset');
      reset();
      output.done();
      return;
    }
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in');
    if (packets[0].type !== 'openBracket') {
      for (i = 0, len = packets.length; i < len; i++) {
        packet = packets[i];
        output.send({
          no: packet
        });
      }
      output.done();
      return;
    }
    matched = false;
    group = packets[0].data;
    ref = c.matchGroups;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      matchGroup = ref[j];
      if (group !== matchGroup) {
        continue;
      }
      matched = true;
    }
    ref1 = c.regexps;
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      regexp = ref1[k];
      if (group.match(regexp) == null) {
        continue;
      }
      matched = true;
    }
    if (!matched) {
      for (l = 0, len3 = packets.length; l < len3; l++) {
        packet = packets[l];
        output.send({
          no: packet
        });
      }
      output.done();
      return;
    }
    for (m = 0, len4 = packets.length; m < len4; m++) {
      packet = packets[m];
      output.send({
        yes: packet
      });
    }
    output.done();
  });
};


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, prepareScope;

noflo = __webpack_require__(0);

prepareScope = function() {
  var data;
  data = {
    resolved: false,
    rejected: false
  };
  return data;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Like Promise.all, wait for result from all connected inputs and send them or an error out';
  c.icon = 'compress';
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.inPorts.add('error', {
    datatype: 'object'
  });
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.pending = {};
  c.tearDown = function(callback) {
    c.pending = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var data, err, indexesWithStreams, results;
    if (input.hasData('error')) {
      err = input.getData('error');
      if (!c.pending[input.scope]) {
        c.pending[input.scope] = prepareScope();
      }
      if (c.pending[input.scope].rejected || c.pending[input.scope].resolved) {
        output.done();
        return;
      }
      c.pending[input.scope].rejected = true;
      output.sendDone({
        error: err
      });
      return;
    }
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (!indexesWithStreams.length) {
      return;
    }
    if (!c.pending[input.scope]) {
      c.pending[input.scope] = prepareScope();
    }
    if (c.pending[input.scope].rejected || c.pending[input.scope].resolved) {
      indexesWithStreams.forEach(function(idx) {
        var i, ip, len, results1, stream;
        stream = input.getStream(['in', idx]);
        results1 = [];
        for (i = 0, len = stream.length; i < len; i++) {
          ip = stream[i];
          results1.push(ip.drop());
        }
        return results1;
      });
      output.done();
      return;
    }
    results = input.getStream(['in', indexesWithStreams[0]]).filter(function(ip) {
      return ip.type === 'data';
    });
    c.pending[input.scope].resolved = true;
    data = results.map(function(ip) {
      return ip.data;
    });
    if (data.length === 1) {
      data = data[0];
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Send packets in to outport indexes in reverse order when matching number of inport indexes have received data to attached outports";
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var attached, expectedStreams, i, idx, indexesWithStreams, j, k, len, len1, len2, outIdx, packet, stream, streams;
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    attached = c.outPorts.out.listAttached().slice(0);
    expectedStreams = attached.length;
    if (input.attached('in').length < attached.length) {
      expectedStreams = input.attached('in').length;
      attached = attached.slice(0, expectedStreams);
    }
    if (indexesWithStreams.length < expectedStreams) {
      return;
    }
    streams = [];
    for (i = 0, len = indexesWithStreams.length; i < len; i++) {
      idx = indexesWithStreams[i];
      streams.push(input.getStream(['in', idx]));
    }
    streams.reverse();
    attached.reverse();
    for (j = 0, len1 = attached.length; j < len1; j++) {
      outIdx = attached[j];
      if (!streams.length) {
        continue;
      }
      stream = streams.shift();
      for (k = 0, len2 = stream.length; k < len2; k++) {
        packet = stream[k];
        output.send(new noflo.IP(packet.type, packet.data, {
          index: outIdx,
          datatype: packet.datatype,
          schema: packet.schema,
          clonable: packet.clonable
        }));
      }
    }
    return output.done();
  });
};


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'expand';
  c.description = "Like core/Split, expect the last port gets forwarded packets first";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var attached, i, idx, len, packet;
    if (!input.has('in')) {
      return;
    }
    packet = input.get('in');
    attached = c.outPorts.out.listAttached();
    attached.reverse();
    for (i = 0, len = attached.length; i < len; i++) {
      idx = attached[i];
      output.send({
        out: new noflo.IP(packet.type, packet.data, {
          index: idx,
          datatype: packet.datatype,
          schema: packet.schema,
          clonable: packet.clonable
        })
      });
    }
    return output.done();
  });
};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Stop everything that's received and send out once we're told that we're ready to send.";
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to buffer until an IP arrives on the ready port'
  });
  c.inPorts.add('ready', {
    datatype: 'bang',
    description: 'Trigger the emission of all the stored IPs'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    description: 'IPs forwarded from the in port'
  });
  c.forwardBracets = {};
  return c.process(function(input, output) {
    var i, len, packet, packets;
    if (!input.hasData('ready', 'in')) {
      return;
    }
    input.getData('ready');
    packets = [];
    while (input.has('in')) {
      packets.push(input.get('in'));
    }
    for (i = 0, len = packets.length; i < len; i++) {
      packet = packets[i];
      output.send({
        out: packet
      });
    }
    return output.done();
  });
};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Throttle packets based on load and maximum accepted load';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward'
  });
  c.inPorts.add('load', {
    datatype: 'int',
    description: 'Current load'
  });
  c.inPorts.add('max', {
    datatype: 'int',
    control: true,
    description: 'Maximum number to allow for load'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data, load, max, ref;
    if (!input.hasData('in', 'load', 'max')) {
      return;
    }
    ref = input.getData('load', 'max'), load = ref[0], max = ref[1];
    if (!(load < max)) {
      setTimeout(function() {
        return output.done();
      }, 1);
      return;
    }
    data = input.getData('in');
    return setTimeout(function() {
      return output.sendDone({
        out: data
      });
    }, 1);
  });
};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, poly2tri;

noflo = __webpack_require__(0);

poly2tri = __webpack_require__(176);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'toggle-up';
  c.description = 'Calculates de constrained Delaunay triangulation of given points';
  c.inPorts.add('x', {
    datatype: 'array'
  });
  c.inPorts.add('y', {
    datatype: 'array'
  });
  c.outPorts.add('paths', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var contour, error, i, j, len, p, path, paths, points, ref, swctx, t, triangles, x, y;
    if (!input.hasData('x', 'y')) {
      return;
    }
    ref = input.getData('x', 'y'), x = ref[0], y = ref[1];
    if (!(x.length > 2)) {
      output.done(new Error('x must contain more than 2 elements'));
      return;
    }
    try {
      contour = (function() {
        var j, ref1, results;
        results = [];
        for (i = j = 0, ref1 = x.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
          results.push(new poly2tri.Point(x[i], y[i]));
        }
        return results;
      })();
      swctx = new poly2tri.SweepContext(contour);
      swctx.triangulate();
    } catch (error1) {
      error = error1;
      output.done(error);
      return;
    }
    triangles = swctx.getTriangles();
    paths = [];
    for (j = 0, len = triangles.length; j < len; j++) {
      t = triangles[j];
      points = t.getPoints();
      path = {
        type: 'path',
        items: (function() {
          var k, len1, results;
          results = [];
          for (k = 0, len1 = points.length; k < len1; k++) {
            p = points[k];
            results.push({
              'type': 'point',
              'x': p.x,
              'y': p.y
            });
          }
          return results;
        })()
      };
      paths.push(path);
    }
    return output.sendDone({
      paths: paths
    });
  });
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;/*! poly2tri v1.3.5 | (c) 2009-2014 Poly2Tri Contributors */
!function(t){if(true)module.exports=t();else if("function"==typeof define&&define.amd)define(t);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self),n.poly2tri=t()}}(function(){return function t(n,e,i){function o(s,p){if(!e[s]){if(!n[s]){var a="function"==typeof require&&require;if(!p&&a)return require(s,!0);if(r)return r(s,!0);throw new Error("Cannot find module '"+s+"'")}var h=e[s]={exports:{}};n[s][0].call(h.exports,function(t){var e=n[s][1][t];return o(e?e:t)},h,h.exports,t,n,e,i)}return e[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,n){n.exports={version:"1.3.5"}},{}],2:[function(t,n){"use strict";var e=function(t,n){this.point=t,this.triangle=n||null,this.next=null,this.prev=null,this.value=t.x},i=function(t,n){this.head_=t,this.tail_=n,this.search_node_=t};i.prototype.head=function(){return this.head_},i.prototype.setHead=function(t){this.head_=t},i.prototype.tail=function(){return this.tail_},i.prototype.setTail=function(t){this.tail_=t},i.prototype.search=function(){return this.search_node_},i.prototype.setSearch=function(t){this.search_node_=t},i.prototype.findSearchNode=function(){return this.search_node_},i.prototype.locateNode=function(t){var n=this.search_node_;if(t<n.value){for(;n=n.prev;)if(t>=n.value)return this.search_node_=n,n}else for(;n=n.next;)if(t<n.value)return this.search_node_=n.prev,n.prev;return null},i.prototype.locatePoint=function(t){var n=t.x,e=this.findSearchNode(n),i=e.point.x;if(n===i){if(t!==e.point)if(t===e.prev.point)e=e.prev;else{if(t!==e.next.point)throw new Error("poly2tri Invalid AdvancingFront.locatePoint() call");e=e.next}}else if(i>n)for(;(e=e.prev)&&t!==e.point;);else for(;(e=e.next)&&t!==e.point;);return e&&(this.search_node_=e),e},n.exports=i,n.exports.Node=e},{}],3:[function(t,n){"use strict";function e(t,n){if(!t)throw new Error(n||"Assert Failed")}n.exports=e},{}],4:[function(t,n){"use strict";var e=t("./xy"),i=function(t,n){this.x=+t||0,this.y=+n||0,this._p2t_edge_list=null};i.prototype.toString=function(){return e.toStringBase(this)},i.prototype.toJSON=function(){return{x:this.x,y:this.y}},i.prototype.clone=function(){return new i(this.x,this.y)},i.prototype.set_zero=function(){return this.x=0,this.y=0,this},i.prototype.set=function(t,n){return this.x=+t||0,this.y=+n||0,this},i.prototype.negate=function(){return this.x=-this.x,this.y=-this.y,this},i.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},i.prototype.sub=function(t){return this.x-=t.x,this.y-=t.y,this},i.prototype.mul=function(t){return this.x*=t,this.y*=t,this},i.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},i.prototype.normalize=function(){var t=this.length();return this.x/=t,this.y/=t,t},i.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},i.negate=function(t){return new i(-t.x,-t.y)},i.add=function(t,n){return new i(t.x+n.x,t.y+n.y)},i.sub=function(t,n){return new i(t.x-n.x,t.y-n.y)},i.mul=function(t,n){return new i(t*n.x,t*n.y)},i.cross=function(t,n){return"number"==typeof t?"number"==typeof n?t*n:new i(-t*n.y,t*n.x):"number"==typeof n?new i(n*t.y,-n*t.x):t.x*n.y-t.y*n.x},i.toString=e.toString,i.compare=e.compare,i.cmp=e.compare,i.equals=e.equals,i.dot=function(t,n){return t.x*n.x+t.y*n.y},n.exports=i},{"./xy":11}],5:[function(t,n){"use strict";var e=t("./xy"),i=function(t,n){this.name="PointError",this.points=n=n||[],this.message=t||"Invalid Points!";for(var i=0;i<n.length;i++)this.message+=" "+e.toString(n[i])};i.prototype=new Error,i.prototype.constructor=i,n.exports=i},{"./xy":11}],6:[function(t,n,e){(function(n){"use strict";var i=n.poly2tri;e.noConflict=function(){return n.poly2tri=i,e},e.VERSION=t("../dist/version.json").version,e.PointError=t("./pointerror"),e.Point=t("./point"),e.Triangle=t("./triangle"),e.SweepContext=t("./sweepcontext");var o=t("./sweep");e.triangulate=o.triangulate,e.sweep={Triangulate:o.triangulate}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../dist/version.json":1,"./point":4,"./pointerror":5,"./sweep":7,"./sweepcontext":8,"./triangle":9}],7:[function(t,n,e){"use strict";function i(t){t.initTriangulation(),t.createAdvancingFront(),o(t),r(t)}function o(t){var n,e=t.pointCount();for(n=1;e>n;++n)for(var i=t.getPoint(n),o=s(t,i),r=i._p2t_edge_list,a=0;r&&a<r.length;++a)p(t,r[a],o)}function r(t){for(var n=t.front().head().next.triangle,e=t.front().head().next.point;!n.getConstrainedEdgeCW(e);)n=n.neighborCCW(e);t.meshClean(n)}function s(t,n){var e=t.locateNode(n),i=u(t,n,e);return n.x<=e.point.x+F&&d(t,e),g(t,i),i}function p(t,n,e){t.edge_event.constrained_edge=n,t.edge_event.right=n.p.x>n.q.x,h(e.triangle,n.p,n.q)||(C(t,n,e),a(t,n.p,n.q,e.triangle,n.q))}function a(t,n,e,i,o){if(!h(i,n,e)){var r=i.pointCCW(o),s=z(e,r,n);if(s===M.COLLINEAR)throw new D("poly2tri EdgeEvent: Collinear not supported!",[e,r,n]);var p=i.pointCW(o),u=z(e,p,n);if(u===M.COLLINEAR)throw new D("poly2tri EdgeEvent: Collinear not supported!",[e,p,n]);s===u?(i=s===M.CW?i.neighborCCW(o):i.neighborCW(o),a(t,n,e,i,o)):q(t,n,e,i,o)}}function h(t,n,e){var i=t.edgeIndex(n,e);if(-1!==i){t.markConstrainedEdgeByIndex(i);var o=t.getNeighbor(i);return o&&o.markConstrainedEdgeByPoints(n,e),!0}return!1}function u(t,n,e){var i=new O(n,e.point,e.next.point);i.markNeighbor(e.triangle),t.addToMap(i);var o=new B(n);return o.next=e.next,o.prev=e,e.next.prev=o,e.next=o,l(t,i)||t.mapTriangleToNodes(i),o}function d(t,n){var e=new O(n.prev.point,n.point,n.next.point);e.markNeighbor(n.prev.triangle),e.markNeighbor(n.triangle),t.addToMap(e),n.prev.next=n.next,n.next.prev=n.prev,l(t,e)||t.mapTriangleToNodes(e)}function g(t,n){for(var e=n.next;e.next&&!j(e.point,e.next.point,e.prev.point);)d(t,e),e=e.next;for(e=n.prev;e.prev&&!j(e.point,e.next.point,e.prev.point);)d(t,e),e=e.prev;n.next&&n.next.next&&f(n)&&y(t,n)}function f(t){var n=t.point.x-t.next.next.point.x,e=t.point.y-t.next.next.point.y;return S(e>=0,"unordered y"),n>=0||Math.abs(n)<e}function l(t,n){for(var e=0;3>e;++e)if(!n.delaunay_edge[e]){var i=n.getNeighbor(e);if(i){var o=n.getPoint(e),r=i.oppositePoint(n,o),s=i.index(r);if(i.constrained_edge[s]||i.delaunay_edge[s]){n.constrained_edge[e]=i.constrained_edge[s];continue}var p=c(o,n.pointCCW(o),n.pointCW(o),r);if(p){n.delaunay_edge[e]=!0,i.delaunay_edge[s]=!0,_(n,o,i,r);var a=!l(t,n);return a&&t.mapTriangleToNodes(n),a=!l(t,i),a&&t.mapTriangleToNodes(i),n.delaunay_edge[e]=!1,i.delaunay_edge[s]=!1,!0}}}return!1}function c(t,n,e,i){var o=t.x-i.x,r=t.y-i.y,s=n.x-i.x,p=n.y-i.y,a=o*p,h=s*r,u=a-h;if(0>=u)return!1;var d=e.x-i.x,g=e.y-i.y,f=d*r,l=o*g,c=f-l;if(0>=c)return!1;var _=s*g,y=d*p,x=o*o+r*r,v=s*s+p*p,C=d*d+g*g,b=x*(_-y)+v*c+C*u;return b>0}function _(t,n,e,i){var o,r,s,p;o=t.neighborCCW(n),r=t.neighborCW(n),s=e.neighborCCW(i),p=e.neighborCW(i);var a,h,u,d;a=t.getConstrainedEdgeCCW(n),h=t.getConstrainedEdgeCW(n),u=e.getConstrainedEdgeCCW(i),d=e.getConstrainedEdgeCW(i);var g,f,l,c;g=t.getDelaunayEdgeCCW(n),f=t.getDelaunayEdgeCW(n),l=e.getDelaunayEdgeCCW(i),c=e.getDelaunayEdgeCW(i),t.legalize(n,i),e.legalize(i,n),e.setDelaunayEdgeCCW(n,g),t.setDelaunayEdgeCW(n,f),t.setDelaunayEdgeCCW(i,l),e.setDelaunayEdgeCW(i,c),e.setConstrainedEdgeCCW(n,a),t.setConstrainedEdgeCW(n,h),t.setConstrainedEdgeCCW(i,u),e.setConstrainedEdgeCW(i,d),t.clearNeighbors(),e.clearNeighbors(),o&&e.markNeighbor(o),r&&t.markNeighbor(r),s&&t.markNeighbor(s),p&&e.markNeighbor(p),t.markNeighbor(e)}function y(t,n){for(t.basin.left_node=z(n.point,n.next.point,n.next.next.point)===M.CCW?n.next.next:n.next,t.basin.bottom_node=t.basin.left_node;t.basin.bottom_node.next&&t.basin.bottom_node.point.y>=t.basin.bottom_node.next.point.y;)t.basin.bottom_node=t.basin.bottom_node.next;if(t.basin.bottom_node!==t.basin.left_node){for(t.basin.right_node=t.basin.bottom_node;t.basin.right_node.next&&t.basin.right_node.point.y<t.basin.right_node.next.point.y;)t.basin.right_node=t.basin.right_node.next;t.basin.right_node!==t.basin.bottom_node&&(t.basin.width=t.basin.right_node.point.x-t.basin.left_node.point.x,t.basin.left_highest=t.basin.left_node.point.y>t.basin.right_node.point.y,x(t,t.basin.bottom_node))}}function x(t,n){if(!v(t,n)){d(t,n);var e;if(n.prev!==t.basin.left_node||n.next!==t.basin.right_node){if(n.prev===t.basin.left_node){if(e=z(n.point,n.next.point,n.next.next.point),e===M.CW)return;n=n.next}else if(n.next===t.basin.right_node){if(e=z(n.point,n.prev.point,n.prev.prev.point),e===M.CCW)return;n=n.prev}else n=n.prev.point.y<n.next.point.y?n.prev:n.next;x(t,n)}}}function v(t,n){var e;return e=t.basin.left_highest?t.basin.left_node.point.y-n.point.y:t.basin.right_node.point.y-n.point.y,t.basin.width>e?!0:!1}function C(t,n,e){t.edge_event.right?b(t,n,e):E(t,n,e)}function b(t,n,e){for(;e.next.point.x<n.p.x;)z(n.q,e.next.point,n.p)===M.CCW?m(t,n,e):e=e.next}function m(t,n,e){e.point.x<n.p.x&&(z(e.point,e.next.point,e.next.next.point)===M.CCW?W(t,n,e):(w(t,n,e),m(t,n,e)))}function W(t,n,e){d(t,e.next),e.next.point!==n.p&&z(n.q,e.next.point,n.p)===M.CCW&&z(e.point,e.next.point,e.next.next.point)===M.CCW&&W(t,n,e)}function w(t,n,e){z(e.next.point,e.next.next.point,e.next.next.next.point)===M.CCW?W(t,n,e.next):z(n.q,e.next.next.point,n.p)===M.CCW&&w(t,n,e.next)}function E(t,n,e){for(;e.prev.point.x>n.p.x;)z(n.q,e.prev.point,n.p)===M.CW?P(t,n,e):e=e.prev}function P(t,n,e){e.point.x>n.p.x&&(z(e.point,e.prev.point,e.prev.prev.point)===M.CW?T(t,n,e):(N(t,n,e),P(t,n,e)))}function N(t,n,e){z(e.prev.point,e.prev.prev.point,e.prev.prev.prev.point)===M.CW?T(t,n,e.prev):z(n.q,e.prev.prev.point,n.p)===M.CW&&N(t,n,e.prev)}function T(t,n,e){d(t,e.prev),e.prev.point!==n.p&&z(n.q,e.prev.point,n.p)===M.CW&&z(e.point,e.prev.point,e.prev.prev.point)===M.CW&&T(t,n,e)}function q(t,n,e,i,o){var r=i.neighborAcross(o);S(r,"FLIP failed due to missing triangle!");var s=r.oppositePoint(i,o);if(i.getConstrainedEdgeAcross(o)){var p=i.index(o);throw new D("poly2tri Intersecting Constraints",[o,s,i.getPoint((p+1)%3),i.getPoint((p+2)%3)])}if(H(o,i.pointCCW(o),i.pointCW(o),s))if(_(i,o,r,s),t.mapTriangleToNodes(i),t.mapTriangleToNodes(r),o===e&&s===n)e===t.edge_event.constrained_edge.q&&n===t.edge_event.constrained_edge.p&&(i.markConstrainedEdgeByPoints(n,e),r.markConstrainedEdgeByPoints(n,e),l(t,i),l(t,r));else{var h=z(e,s,n);i=I(t,h,i,r,o,s),q(t,n,e,i,o)}else{var u=k(n,e,r,s);A(t,n,e,i,r,u),a(t,n,e,i,o)}}function I(t,n,e,i,o,r){var s;return n===M.CCW?(s=i.edgeIndex(o,r),i.delaunay_edge[s]=!0,l(t,i),i.clearDelaunayEdges(),e):(s=e.edgeIndex(o,r),e.delaunay_edge[s]=!0,l(t,e),e.clearDelaunayEdges(),i)}function k(t,n,e,i){var o=z(n,i,t);if(o===M.CW)return e.pointCCW(i);if(o===M.CCW)return e.pointCW(i);throw new D("poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!",[n,i,t])}function A(t,n,e,i,o,r){var s=o.neighborAcross(r);S(s,"FLIP failed due to missing triangle");var p=s.oppositePoint(o,r);if(H(e,i.pointCCW(e),i.pointCW(e),p))q(t,e,p,s,p);else{var a=k(n,e,s,p);A(t,n,e,i,s,a)}}var S=t("./assert"),D=t("./pointerror"),O=t("./triangle"),B=t("./advancingfront").Node,L=t("./utils"),F=L.EPSILON,M=L.Orientation,z=L.orient2d,H=L.inScanArea,j=L.isAngleObtuse;e.triangulate=i},{"./advancingfront":2,"./assert":3,"./pointerror":5,"./triangle":9,"./utils":10}],8:[function(t,n){"use strict";var e=t("./pointerror"),i=t("./point"),o=t("./triangle"),r=t("./sweep"),s=t("./advancingfront"),p=s.Node,a=.3,h=function(t,n){if(this.p=t,this.q=n,t.y>n.y)this.q=t,this.p=n;else if(t.y===n.y)if(t.x>n.x)this.q=t,this.p=n;else if(t.x===n.x)throw new e("poly2tri Invalid Edge constructor: repeated points!",[t]);this.q._p2t_edge_list||(this.q._p2t_edge_list=[]),this.q._p2t_edge_list.push(this)},u=function(){this.left_node=null,this.bottom_node=null,this.right_node=null,this.width=0,this.left_highest=!1};u.prototype.clear=function(){this.left_node=null,this.bottom_node=null,this.right_node=null,this.width=0,this.left_highest=!1};var d=function(){this.constrained_edge=null,this.right=!1},g=function(t,n){n=n||{},this.triangles_=[],this.map_=[],this.points_=n.cloneArrays?t.slice(0):t,this.edge_list=[],this.pmin_=this.pmax_=null,this.front_=null,this.head_=null,this.tail_=null,this.af_head_=null,this.af_middle_=null,this.af_tail_=null,this.basin=new u,this.edge_event=new d,this.initEdges(this.points_)};g.prototype.addHole=function(t){this.initEdges(t);var n,e=t.length;for(n=0;e>n;n++)this.points_.push(t[n]);return this},g.prototype.AddHole=g.prototype.addHole,g.prototype.addHoles=function(t){var n,e=t.length;for(n=0;e>n;n++)this.initEdges(t[n]);return this.points_=this.points_.concat.apply(this.points_,t),this},g.prototype.addPoint=function(t){return this.points_.push(t),this},g.prototype.AddPoint=g.prototype.addPoint,g.prototype.addPoints=function(t){return this.points_=this.points_.concat(t),this},g.prototype.triangulate=function(){return r.triangulate(this),this},g.prototype.getBoundingBox=function(){return{min:this.pmin_,max:this.pmax_}},g.prototype.getTriangles=function(){return this.triangles_},g.prototype.GetTriangles=g.prototype.getTriangles,g.prototype.front=function(){return this.front_},g.prototype.pointCount=function(){return this.points_.length},g.prototype.head=function(){return this.head_},g.prototype.setHead=function(t){this.head_=t},g.prototype.tail=function(){return this.tail_},g.prototype.setTail=function(t){this.tail_=t},g.prototype.getMap=function(){return this.map_},g.prototype.initTriangulation=function(){var t,n=this.points_[0].x,e=this.points_[0].x,o=this.points_[0].y,r=this.points_[0].y,s=this.points_.length;for(t=1;s>t;t++){var p=this.points_[t];p.x>n&&(n=p.x),p.x<e&&(e=p.x),p.y>o&&(o=p.y),p.y<r&&(r=p.y)}this.pmin_=new i(e,r),this.pmax_=new i(n,o);var h=a*(n-e),u=a*(o-r);this.head_=new i(n+h,r-u),this.tail_=new i(e-h,r-u),this.points_.sort(i.compare)},g.prototype.initEdges=function(t){var n,e=t.length;for(n=0;e>n;++n)this.edge_list.push(new h(t[n],t[(n+1)%e]))},g.prototype.getPoint=function(t){return this.points_[t]},g.prototype.addToMap=function(t){this.map_.push(t)},g.prototype.locateNode=function(t){return this.front_.locateNode(t.x)},g.prototype.createAdvancingFront=function(){var t,n,e,i=new o(this.points_[0],this.tail_,this.head_);this.map_.push(i),t=new p(i.getPoint(1),i),n=new p(i.getPoint(0),i),e=new p(i.getPoint(2)),this.front_=new s(t,e),t.next=n,n.next=e,n.prev=t,e.prev=n},g.prototype.removeNode=function(){},g.prototype.mapTriangleToNodes=function(t){for(var n=0;3>n;++n)if(!t.getNeighbor(n)){var e=this.front_.locatePoint(t.pointCW(t.getPoint(n)));e&&(e.triangle=t)}},g.prototype.removeFromMap=function(t){var n,e=this.map_,i=e.length;for(n=0;i>n;n++)if(e[n]===t){e.splice(n,1);break}},g.prototype.meshClean=function(t){for(var n,e,i=[t];n=i.pop();)if(!n.isInterior())for(n.setInterior(!0),this.triangles_.push(n),e=0;3>e;e++)n.constrained_edge[e]||i.push(n.getNeighbor(e))},n.exports=g},{"./advancingfront":2,"./point":4,"./pointerror":5,"./sweep":7,"./triangle":9}],9:[function(t,n){"use strict";var e=t("./xy"),i=function(t,n,e){this.points_=[t,n,e],this.neighbors_=[null,null,null],this.interior_=!1,this.constrained_edge=[!1,!1,!1],this.delaunay_edge=[!1,!1,!1]},o=e.toString;i.prototype.toString=function(){return"["+o(this.points_[0])+o(this.points_[1])+o(this.points_[2])+"]"},i.prototype.getPoint=function(t){return this.points_[t]},i.prototype.GetPoint=i.prototype.getPoint,i.prototype.getPoints=function(){return this.points_},i.prototype.getNeighbor=function(t){return this.neighbors_[t]},i.prototype.containsPoint=function(t){var n=this.points_;return t===n[0]||t===n[1]||t===n[2]},i.prototype.containsEdge=function(t){return this.containsPoint(t.p)&&this.containsPoint(t.q)},i.prototype.containsPoints=function(t,n){return this.containsPoint(t)&&this.containsPoint(n)},i.prototype.isInterior=function(){return this.interior_},i.prototype.setInterior=function(t){return this.interior_=t,this},i.prototype.markNeighborPointers=function(t,n,e){var i=this.points_;if(t===i[2]&&n===i[1]||t===i[1]&&n===i[2])this.neighbors_[0]=e;else if(t===i[0]&&n===i[2]||t===i[2]&&n===i[0])this.neighbors_[1]=e;else{if(!(t===i[0]&&n===i[1]||t===i[1]&&n===i[0]))throw new Error("poly2tri Invalid Triangle.markNeighborPointers() call");this.neighbors_[2]=e}},i.prototype.markNeighbor=function(t){var n=this.points_;t.containsPoints(n[1],n[2])?(this.neighbors_[0]=t,t.markNeighborPointers(n[1],n[2],this)):t.containsPoints(n[0],n[2])?(this.neighbors_[1]=t,t.markNeighborPointers(n[0],n[2],this)):t.containsPoints(n[0],n[1])&&(this.neighbors_[2]=t,t.markNeighborPointers(n[0],n[1],this))},i.prototype.clearNeighbors=function(){this.neighbors_[0]=null,this.neighbors_[1]=null,this.neighbors_[2]=null},i.prototype.clearDelaunayEdges=function(){this.delaunay_edge[0]=!1,this.delaunay_edge[1]=!1,this.delaunay_edge[2]=!1},i.prototype.pointCW=function(t){var n=this.points_;return t===n[0]?n[2]:t===n[1]?n[0]:t===n[2]?n[1]:null},i.prototype.pointCCW=function(t){var n=this.points_;return t===n[0]?n[1]:t===n[1]?n[2]:t===n[2]?n[0]:null},i.prototype.neighborCW=function(t){return t===this.points_[0]?this.neighbors_[1]:t===this.points_[1]?this.neighbors_[2]:this.neighbors_[0]},i.prototype.neighborCCW=function(t){return t===this.points_[0]?this.neighbors_[2]:t===this.points_[1]?this.neighbors_[0]:this.neighbors_[1]},i.prototype.getConstrainedEdgeCW=function(t){return t===this.points_[0]?this.constrained_edge[1]:t===this.points_[1]?this.constrained_edge[2]:this.constrained_edge[0]},i.prototype.getConstrainedEdgeCCW=function(t){return t===this.points_[0]?this.constrained_edge[2]:t===this.points_[1]?this.constrained_edge[0]:this.constrained_edge[1]},i.prototype.getConstrainedEdgeAcross=function(t){return t===this.points_[0]?this.constrained_edge[0]:t===this.points_[1]?this.constrained_edge[1]:this.constrained_edge[2]},i.prototype.setConstrainedEdgeCW=function(t,n){t===this.points_[0]?this.constrained_edge[1]=n:t===this.points_[1]?this.constrained_edge[2]=n:this.constrained_edge[0]=n},i.prototype.setConstrainedEdgeCCW=function(t,n){t===this.points_[0]?this.constrained_edge[2]=n:t===this.points_[1]?this.constrained_edge[0]=n:this.constrained_edge[1]=n},i.prototype.getDelaunayEdgeCW=function(t){return t===this.points_[0]?this.delaunay_edge[1]:t===this.points_[1]?this.delaunay_edge[2]:this.delaunay_edge[0]},i.prototype.getDelaunayEdgeCCW=function(t){return t===this.points_[0]?this.delaunay_edge[2]:t===this.points_[1]?this.delaunay_edge[0]:this.delaunay_edge[1]},i.prototype.setDelaunayEdgeCW=function(t,n){t===this.points_[0]?this.delaunay_edge[1]=n:t===this.points_[1]?this.delaunay_edge[2]=n:this.delaunay_edge[0]=n},i.prototype.setDelaunayEdgeCCW=function(t,n){t===this.points_[0]?this.delaunay_edge[2]=n:t===this.points_[1]?this.delaunay_edge[0]=n:this.delaunay_edge[1]=n},i.prototype.neighborAcross=function(t){return t===this.points_[0]?this.neighbors_[0]:t===this.points_[1]?this.neighbors_[1]:this.neighbors_[2]},i.prototype.oppositePoint=function(t,n){var e=t.pointCW(n);return this.pointCW(e)},i.prototype.legalize=function(t,n){var e=this.points_;if(t===e[0])e[1]=e[0],e[0]=e[2],e[2]=n;else if(t===e[1])e[2]=e[1],e[1]=e[0],e[0]=n;else{if(t!==e[2])throw new Error("poly2tri Invalid Triangle.legalize() call");e[0]=e[2],e[2]=e[1],e[1]=n}},i.prototype.index=function(t){var n=this.points_;if(t===n[0])return 0;if(t===n[1])return 1;if(t===n[2])return 2;throw new Error("poly2tri Invalid Triangle.index() call")},i.prototype.edgeIndex=function(t,n){var e=this.points_;if(t===e[0]){if(n===e[1])return 2;if(n===e[2])return 1}else if(t===e[1]){if(n===e[2])return 0;if(n===e[0])return 2}else if(t===e[2]){if(n===e[0])return 1;if(n===e[1])return 0}return-1},i.prototype.markConstrainedEdgeByIndex=function(t){this.constrained_edge[t]=!0},i.prototype.markConstrainedEdgeByEdge=function(t){this.markConstrainedEdgeByPoints(t.p,t.q)},i.prototype.markConstrainedEdgeByPoints=function(t,n){var e=this.points_;n===e[0]&&t===e[1]||n===e[1]&&t===e[0]?this.constrained_edge[2]=!0:n===e[0]&&t===e[2]||n===e[2]&&t===e[0]?this.constrained_edge[1]=!0:(n===e[1]&&t===e[2]||n===e[2]&&t===e[1])&&(this.constrained_edge[0]=!0)},n.exports=i},{"./xy":11}],10:[function(t,n,e){"use strict";function i(t,n,e){var i=(t.x-e.x)*(n.y-e.y),o=(t.y-e.y)*(n.x-e.x),r=i-o;return r>-s&&s>r?p.COLLINEAR:r>0?p.CCW:p.CW}function o(t,n,e,i){var o=(t.x-n.x)*(i.y-n.y)-(i.x-n.x)*(t.y-n.y);if(o>=-s)return!1;var r=(t.x-e.x)*(i.y-e.y)-(i.x-e.x)*(t.y-e.y);return s>=r?!1:!0}function r(t,n,e){var i=n.x-t.x,o=n.y-t.y,r=e.x-t.x,s=e.y-t.y;return 0>i*r+o*s}var s=1e-12;e.EPSILON=s;var p={CW:1,CCW:-1,COLLINEAR:0};e.Orientation=p,e.orient2d=i,e.inScanArea=o,e.isAngleObtuse=r},{}],11:[function(t,n){"use strict";function e(t){return"("+t.x+";"+t.y+")"}function i(t){var n=t.toString();return"[object Object]"===n?e(t):n}function o(t,n){return t.y===n.y?t.x-n.x:t.y-n.y}function r(t,n){return t.x===n.x&&t.y===n.y}n.exports={toString:i,toStringBase:e,compare:o,equals:r}},{}]},{},[6])(6)});

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var Delaunay, noflo;

noflo = __webpack_require__(0);

Delaunay = __webpack_require__(178);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'toggle-up';
  c.description = 'Calculates Delaunay Triangulation for given points';
  c.inPorts.add('points', {
    datatype: 'array'
  });
  c.outPorts.add('paths', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var i, ids, j, k, path, paths, point, points, ref, v, vertices;
    if (!input.hasData('points')) {
      return;
    }
    points = input.getData('points');
    if (!(points.length > 2)) {
      output.done(new Error('points must contain more than 2 elements'));
      return;
    }
    vertices = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = points.length; k < len; k++) {
        point = points[k];
        results.push([point.x, point.y]);
      }
      return results;
    })();
    ids = Delaunay.triangulate(vertices);
    v = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = ids.length; k < len; k++) {
        i = ids[k];
        results.push(vertices[i]);
      }
      return results;
    })();
    paths = [];
    for (i = k = 0, ref = v.length; k < ref; i = k += 3) {
      path = {
        type: 'path',
        items: (function() {
          var l, results;
          results = [];
          for (j = l = 0; l < 3; j = ++l) {
            results.push({
              'type': 'point',
              'x': v[i + j][0],
              'y': v[i + j][1]
            });
          }
          return results;
        })()
      };
      paths.push(path);
    }
    return output.sendDone({
      paths: paths
    });
  });
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var Delaunay;

(function() {
  "use strict";

  var EPSILON = 1.0 / 1048576.0;

  function supertriangle(vertices) {
    var xmin = Number.POSITIVE_INFINITY,
        ymin = Number.POSITIVE_INFINITY,
        xmax = Number.NEGATIVE_INFINITY,
        ymax = Number.NEGATIVE_INFINITY,
        i, dx, dy, dmax, xmid, ymid;

    for(i = vertices.length; i--; ) {
      if(vertices[i][0] < xmin) xmin = vertices[i][0];
      if(vertices[i][0] > xmax) xmax = vertices[i][0];
      if(vertices[i][1] < ymin) ymin = vertices[i][1];
      if(vertices[i][1] > ymax) ymax = vertices[i][1];
    }

    dx = xmax - xmin;
    dy = ymax - ymin;
    dmax = Math.max(dx, dy);
    xmid = xmin + dx * 0.5;
    ymid = ymin + dy * 0.5;

    return [
      [xmid - 20 * dmax, ymid -      dmax],
      [xmid            , ymid + 20 * dmax],
      [xmid + 20 * dmax, ymid -      dmax]
    ];
  }

  function circumcircle(vertices, i, j, k) {
    var x1 = vertices[i][0],
        y1 = vertices[i][1],
        x2 = vertices[j][0],
        y2 = vertices[j][1],
        x3 = vertices[k][0],
        y3 = vertices[k][1],
        fabsy1y2 = Math.abs(y1 - y2),
        fabsy2y3 = Math.abs(y2 - y3),
        xc, yc, m1, m2, mx1, mx2, my1, my2, dx, dy;

    /* Check for coincident points */
    if(fabsy1y2 < EPSILON && fabsy2y3 < EPSILON)
      throw new Error("Eek! Coincident points!");

    if(fabsy1y2 < EPSILON) {
      m2  = -((x3 - x2) / (y3 - y2));
      mx2 = (x2 + x3) / 2.0;
      my2 = (y2 + y3) / 2.0;
      xc  = (x2 + x1) / 2.0;
      yc  = m2 * (xc - mx2) + my2;
    }

    else if(fabsy2y3 < EPSILON) {
      m1  = -((x2 - x1) / (y2 - y1));
      mx1 = (x1 + x2) / 2.0;
      my1 = (y1 + y2) / 2.0;
      xc  = (x3 + x2) / 2.0;
      yc  = m1 * (xc - mx1) + my1;
    }

    else {
      m1  = -((x2 - x1) / (y2 - y1));
      m2  = -((x3 - x2) / (y3 - y2));
      mx1 = (x1 + x2) / 2.0;
      mx2 = (x2 + x3) / 2.0;
      my1 = (y1 + y2) / 2.0;
      my2 = (y2 + y3) / 2.0;
      xc  = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);
      yc  = (fabsy1y2 > fabsy2y3) ?
        m1 * (xc - mx1) + my1 :
        m2 * (xc - mx2) + my2;
    }

    dx = x2 - xc;
    dy = y2 - yc;
    return {i: i, j: j, k: k, x: xc, y: yc, r: dx * dx + dy * dy};
  }

  function dedup(edges) {
    var i, j, a, b, m, n;

    for(j = edges.length; j; ) {
      b = edges[--j];
      a = edges[--j];

      for(i = j; i; ) {
        n = edges[--i];
        m = edges[--i];

        if((a === m && b === n) || (a === n && b === m)) {
          edges.splice(j, 2);
          edges.splice(i, 2);
          break;
        }
      }
    }
  }

  Delaunay = {
    triangulate: function(vertices, key) {
      var n = vertices.length,
          i, j, indices, st, open, closed, edges, dx, dy, a, b, c;

      /* Bail if there aren't enough vertices to form any triangles. */
      if(n < 3)
        return [];

      /* Slice out the actual vertices from the passed objects. (Duplicate the
       * array even if we don't, though, since we need to make a supertriangle
       * later on!) */
      vertices = vertices.slice(0);

      if(key)
        for(i = n; i--; )
          vertices[i] = vertices[i][key];

      /* Make an array of indices into the vertex array, sorted by the
       * vertices' x-position. */
      indices = new Array(n);

      for(i = n; i--; )
        indices[i] = i;

      indices.sort(function(i, j) {
        return vertices[j][0] - vertices[i][0];
      });

      /* Next, find the vertices of the supertriangle (which contains all other
       * triangles), and append them onto the end of a (copy of) the vertex
       * array. */
      st = supertriangle(vertices);
      vertices.push(st[0], st[1], st[2]);
      
      /* Initialize the open list (containing the supertriangle and nothing
       * else) and the closed list (which is empty since we havn't processed
       * any triangles yet). */
      open   = [circumcircle(vertices, n + 0, n + 1, n + 2)];
      closed = [];
      edges  = [];

      /* Incrementally add each vertex to the mesh. */
      for(i = indices.length; i--; edges.length = 0) {
        c = indices[i];

        /* For each open triangle, check to see if the current point is
         * inside it's circumcircle. If it is, remove the triangle and add
         * it's edges to an edge list. */
        for(j = open.length; j--; ) {
          /* If this point is to the right of this triangle's circumcircle,
           * then this triangle should never get checked again. Remove it
           * from the open list, add it to the closed list, and skip. */
          dx = vertices[c][0] - open[j].x;
          if(dx > 0.0 && dx * dx > open[j].r) {
            closed.push(open[j]);
            open.splice(j, 1);
            continue;
          }

          /* If we're outside the circumcircle, skip this triangle. */
          dy = vertices[c][1] - open[j].y;
          if(dx * dx + dy * dy - open[j].r > EPSILON)
            continue;

          /* Remove the triangle and add it's edges to the edge list. */
          edges.push(
            open[j].i, open[j].j,
            open[j].j, open[j].k,
            open[j].k, open[j].i
          );
          open.splice(j, 1);
        }

        /* Remove any doubled edges. */
        dedup(edges);

        /* Add a new triangle for each edge. */
        for(j = edges.length; j; ) {
          b = edges[--j];
          a = edges[--j];
          open.push(circumcircle(vertices, a, b, c));
        }
      }

      /* Copy any remaining open triangles to the closed list, and then
       * remove any triangles that share a vertex with the supertriangle,
       * building a list of triplets that represent triangles. */
      for(i = open.length; i--; )
        closed.push(open[i]);
      open.length = 0;

      for(i = closed.length; i--; )
        if(closed[i].i < n && closed[i].j < n && closed[i].k < n)
          open.push(closed[i].i, closed[i].j, closed[i].k);

      /* Yay, we're done! */
      return open;
    },
    contains: function(tri, p) {
      /* Bounding box test first, for quick rejections. */
      if((p[0] < tri[0][0] && p[0] < tri[1][0] && p[0] < tri[2][0]) ||
         (p[0] > tri[0][0] && p[0] > tri[1][0] && p[0] > tri[2][0]) ||
         (p[1] < tri[0][1] && p[1] < tri[1][1] && p[1] < tri[2][1]) ||
         (p[1] > tri[0][1] && p[1] > tri[1][1] && p[1] > tri[2][1]))
        return null;

      var a = tri[1][0] - tri[0][0],
          b = tri[2][0] - tri[0][0],
          c = tri[1][1] - tri[0][1],
          d = tri[2][1] - tri[0][1],
          i = a * d - b * c;

      /* Degenerate tri. */
      if(i === 0.0)
        return null;

      var u = (d * (p[0] - tri[0][0]) - b * (p[1] - tri[0][1])) / i,
          v = (a * (p[1] - tri[0][1]) - c * (p[0] - tri[0][0])) / i;

      /* If we're outside the tri, fail. */
      if(u < 0.0 || v < 0.0 || (u + v) > 1.0)
        return null;

      return [u, v];
    }
  };

  if(true)
    module.exports = Delaunay;
})();


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var Voronoi, noflo;

noflo = __webpack_require__(0);

Voronoi = __webpack_require__(180);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'location-arrow';
  c.description = 'Calculates Voronoi Diagram for given points';
  c.inPorts.add('points', {
    datatype: 'array'
  });
  c.inPorts.add('bbox', {
    datatype: 'object',
    description: 'bounding box as a rectangle (default: 200x200)',
    control: true
  });
  c.outPorts.add('paths', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var bbox, bboxData, cell, diagram, endpoint, halfedge, i, j, len, len1, paths, points, ref, ref1, sites, voronoi;
    if (!input.hasData('points')) {
      return;
    }
    sites = input.getData('points');
    if (!(sites.length > 2)) {
      output.done(new Error('points must contain more than 2 elements'));
      return;
    }
    if (input.hasData('bbox')) {
      bboxData = input.getData('bbox');
      bbox = {
        xl: bboxData.point.x,
        xr: bboxData.width,
        yt: bboxData.point.y,
        yb: bboxData.height
      };
    } else {
      bbox = {
        xl: 0,
        xr: 200,
        yt: 0,
        yb: 200
      };
    }
    voronoi = new Voronoi();
    diagram = voronoi.compute(sites, bbox);
    paths = [];
    ref = diagram.cells;
    for (i = 0, len = ref.length; i < len; i++) {
      cell = ref[i];
      points = [];
      ref1 = cell.halfedges;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        halfedge = ref1[j];
        endpoint = halfedge.getEndpoint();
        points.push({
          type: 'point',
          x: endpoint.x,
          y: endpoint.y
        });
      }
      if (points.length > 0) {
        paths.push({
          type: 'path',
          items: points
        });
      }
    }
    return output.sendDone({
      paths: paths
    });
  });
};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

/*!
Copyright (C) 2010-2013 Raymond Hill: https://github.com/gorhill/Javascript-Voronoi
MIT License: See https://github.com/gorhill/Javascript-Voronoi/LICENSE.md
*/
/*
Author: Raymond Hill (rhill@raymondhill.net)
Contributor: Jesse Morgan (morgajel@gmail.com)
File: rhill-voronoi-core.js
Version: 0.98
Date: January 21, 2013
Description: This is my personal Javascript implementation of
Steven Fortune's algorithm to compute Voronoi diagrams.

License: See https://github.com/gorhill/Javascript-Voronoi/LICENSE.md
Credits: See https://github.com/gorhill/Javascript-Voronoi/CREDITS.md
History: See https://github.com/gorhill/Javascript-Voronoi/CHANGELOG.md

## Usage:

  var sites = [{x:300,y:300}, {x:100,y:100}, {x:200,y:500}, {x:250,y:450}, {x:600,y:150}];
  // xl, xr means x left, x right
  // yt, yb means y top, y bottom
  var bbox = {xl:0, xr:800, yt:0, yb:600};
  var voronoi = new Voronoi();
  // pass an object which exhibits xl, xr, yt, yb properties. The bounding
  // box will be used to connect unbound edges, and to close open cells
  result = voronoi.compute(sites, bbox);
  // render, further analyze, etc.

Return value:
  An object with the following properties:

  result.vertices = an array of unordered, unique Voronoi.Vertex objects making
    up the Voronoi diagram.
  result.edges = an array of unordered, unique Voronoi.Edge objects making up
    the Voronoi diagram.
  result.cells = an array of Voronoi.Cell object making up the Voronoi diagram.
    A Cell object might have an empty array of halfedges, meaning no Voronoi
    cell could be computed for a particular cell.
  result.execTime = the time it took to compute the Voronoi diagram, in
    milliseconds.

Voronoi.Vertex object:
  x: The x position of the vertex.
  y: The y position of the vertex.

Voronoi.Edge object:
  lSite: the Voronoi site object at the left of this Voronoi.Edge object.
  rSite: the Voronoi site object at the right of this Voronoi.Edge object (can
    be null).
  va: an object with an 'x' and a 'y' property defining the start point
    (relative to the Voronoi site on the left) of this Voronoi.Edge object.
  vb: an object with an 'x' and a 'y' property defining the end point
    (relative to Voronoi site on the left) of this Voronoi.Edge object.

  For edges which are used to close open cells (using the supplied bounding
  box), the rSite property will be null.

Voronoi.Cell object:
  site: the Voronoi site object associated with the Voronoi cell.
  halfedges: an array of Voronoi.Halfedge objects, ordered counterclockwise,
    defining the polygon for this Voronoi cell.

Voronoi.Halfedge object:
  site: the Voronoi site object owning this Voronoi.Halfedge object.
  edge: a reference to the unique Voronoi.Edge object underlying this
    Voronoi.Halfedge object.
  getStartpoint(): a method returning an object with an 'x' and a 'y' property
    for the start point of this halfedge. Keep in mind halfedges are always
    countercockwise.
  getEndpoint(): a method returning an object with an 'x' and a 'y' property
    for the end point of this halfedge. Keep in mind halfedges are always
    countercockwise.

TODO: Identify opportunities for performance improvement.

TODO: Let the user close the Voronoi cells, do not do it automatically. Not only let
      him close the cells, but also allow him to close more than once using a different
      bounding box for the same Voronoi diagram.
*/

/*global Math */

// ---------------------------------------------------------------------------

function Voronoi() {
    this.vertices = null;
    this.edges = null;
    this.cells = null;
    this.toRecycle = null;
    this.beachsectionJunkyard = [];
    this.circleEventJunkyard = [];
    this.vertexJunkyard = [];
    this.edgeJunkyard = [];
    this.cellJunkyard = [];
    }

// ---------------------------------------------------------------------------

Voronoi.prototype.reset = function() {
    if (!this.beachline) {
        this.beachline = new this.RBTree();
        }
    // Move leftover beachsections to the beachsection junkyard.
    if (this.beachline.root) {
        var beachsection = this.beachline.getFirst(this.beachline.root);
        while (beachsection) {
            this.beachsectionJunkyard.push(beachsection); // mark for reuse
            beachsection = beachsection.rbNext;
            }
        }
    this.beachline.root = null;
    if (!this.circleEvents) {
        this.circleEvents = new this.RBTree();
        }
    this.circleEvents.root = this.firstCircleEvent = null;
    this.vertices = [];
    this.edges = [];
    this.cells = [];
    };

Voronoi.prototype.sqrt = Math.sqrt;
Voronoi.prototype.abs = Math.abs;
Voronoi.prototype.ε = Voronoi.ε = 1e-9;
Voronoi.prototype.invε = Voronoi.invε = 1.0 / Voronoi.ε;
Voronoi.prototype.equalWithEpsilon = function(a,b){return this.abs(a-b)<1e-9;};
Voronoi.prototype.greaterThanWithEpsilon = function(a,b){return a-b>1e-9;};
Voronoi.prototype.greaterThanOrEqualWithEpsilon = function(a,b){return b-a<1e-9;};
Voronoi.prototype.lessThanWithEpsilon = function(a,b){return b-a>1e-9;};
Voronoi.prototype.lessThanOrEqualWithEpsilon = function(a,b){return a-b<1e-9;};

// ---------------------------------------------------------------------------
// Red-Black tree code (based on C version of "rbtree" by Franck Bui-Huu
// https://github.com/fbuihuu/libtree/blob/master/rb.c

Voronoi.prototype.RBTree = function() {
    this.root = null;
    };

Voronoi.prototype.RBTree.prototype.rbInsertSuccessor = function(node, successor) {
    var parent;
    if (node) {
        // >>> rhill 2011-05-27: Performance: cache previous/next nodes
        successor.rbPrevious = node;
        successor.rbNext = node.rbNext;
        if (node.rbNext) {
            node.rbNext.rbPrevious = successor;
            }
        node.rbNext = successor;
        // <<<
        if (node.rbRight) {
            // in-place expansion of node.rbRight.getFirst();
            node = node.rbRight;
            while (node.rbLeft) {node = node.rbLeft;}
            node.rbLeft = successor;
            }
        else {
            node.rbRight = successor;
            }
        parent = node;
        }
    // rhill 2011-06-07: if node is null, successor must be inserted
    // to the left-most part of the tree
    else if (this.root) {
        node = this.getFirst(this.root);
        // >>> Performance: cache previous/next nodes
        successor.rbPrevious = null;
        successor.rbNext = node;
        node.rbPrevious = successor;
        // <<<
        node.rbLeft = successor;
        parent = node;
        }
    else {
        // >>> Performance: cache previous/next nodes
        successor.rbPrevious = successor.rbNext = null;
        // <<<
        this.root = successor;
        parent = null;
        }
    successor.rbLeft = successor.rbRight = null;
    successor.rbParent = parent;
    successor.rbRed = true;
    // Fixup the modified tree by recoloring nodes and performing
    // rotations (2 at most) hence the red-black tree properties are
    // preserved.
    var grandpa, uncle;
    node = successor;
    while (parent && parent.rbRed) {
        grandpa = parent.rbParent;
        if (parent === grandpa.rbLeft) {
            uncle = grandpa.rbRight;
            if (uncle && uncle.rbRed) {
                parent.rbRed = uncle.rbRed = false;
                grandpa.rbRed = true;
                node = grandpa;
                }
            else {
                if (node === parent.rbRight) {
                    this.rbRotateLeft(parent);
                    node = parent;
                    parent = node.rbParent;
                    }
                parent.rbRed = false;
                grandpa.rbRed = true;
                this.rbRotateRight(grandpa);
                }
            }
        else {
            uncle = grandpa.rbLeft;
            if (uncle && uncle.rbRed) {
                parent.rbRed = uncle.rbRed = false;
                grandpa.rbRed = true;
                node = grandpa;
                }
            else {
                if (node === parent.rbLeft) {
                    this.rbRotateRight(parent);
                    node = parent;
                    parent = node.rbParent;
                    }
                parent.rbRed = false;
                grandpa.rbRed = true;
                this.rbRotateLeft(grandpa);
                }
            }
        parent = node.rbParent;
        }
    this.root.rbRed = false;
    };

Voronoi.prototype.RBTree.prototype.rbRemoveNode = function(node) {
    // >>> rhill 2011-05-27: Performance: cache previous/next nodes
    if (node.rbNext) {
        node.rbNext.rbPrevious = node.rbPrevious;
        }
    if (node.rbPrevious) {
        node.rbPrevious.rbNext = node.rbNext;
        }
    node.rbNext = node.rbPrevious = null;
    // <<<
    var parent = node.rbParent,
        left = node.rbLeft,
        right = node.rbRight,
        next;
    if (!left) {
        next = right;
        }
    else if (!right) {
        next = left;
        }
    else {
        next = this.getFirst(right);
        }
    if (parent) {
        if (parent.rbLeft === node) {
            parent.rbLeft = next;
            }
        else {
            parent.rbRight = next;
            }
        }
    else {
        this.root = next;
        }
    // enforce red-black rules
    var isRed;
    if (left && right) {
        isRed = next.rbRed;
        next.rbRed = node.rbRed;
        next.rbLeft = left;
        left.rbParent = next;
        if (next !== right) {
            parent = next.rbParent;
            next.rbParent = node.rbParent;
            node = next.rbRight;
            parent.rbLeft = node;
            next.rbRight = right;
            right.rbParent = next;
            }
        else {
            next.rbParent = parent;
            parent = next;
            node = next.rbRight;
            }
        }
    else {
        isRed = node.rbRed;
        node = next;
        }
    // 'node' is now the sole successor's child and 'parent' its
    // new parent (since the successor can have been moved)
    if (node) {
        node.rbParent = parent;
        }
    // the 'easy' cases
    if (isRed) {return;}
    if (node && node.rbRed) {
        node.rbRed = false;
        return;
        }
    // the other cases
    var sibling;
    do {
        if (node === this.root) {
            break;
            }
        if (node === parent.rbLeft) {
            sibling = parent.rbRight;
            if (sibling.rbRed) {
                sibling.rbRed = false;
                parent.rbRed = true;
                this.rbRotateLeft(parent);
                sibling = parent.rbRight;
                }
            if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {
                if (!sibling.rbRight || !sibling.rbRight.rbRed) {
                    sibling.rbLeft.rbRed = false;
                    sibling.rbRed = true;
                    this.rbRotateRight(sibling);
                    sibling = parent.rbRight;
                    }
                sibling.rbRed = parent.rbRed;
                parent.rbRed = sibling.rbRight.rbRed = false;
                this.rbRotateLeft(parent);
                node = this.root;
                break;
                }
            }
        else {
            sibling = parent.rbLeft;
            if (sibling.rbRed) {
                sibling.rbRed = false;
                parent.rbRed = true;
                this.rbRotateRight(parent);
                sibling = parent.rbLeft;
                }
            if ((sibling.rbLeft && sibling.rbLeft.rbRed) || (sibling.rbRight && sibling.rbRight.rbRed)) {
                if (!sibling.rbLeft || !sibling.rbLeft.rbRed) {
                    sibling.rbRight.rbRed = false;
                    sibling.rbRed = true;
                    this.rbRotateLeft(sibling);
                    sibling = parent.rbLeft;
                    }
                sibling.rbRed = parent.rbRed;
                parent.rbRed = sibling.rbLeft.rbRed = false;
                this.rbRotateRight(parent);
                node = this.root;
                break;
                }
            }
        sibling.rbRed = true;
        node = parent;
        parent = parent.rbParent;
    } while (!node.rbRed);
    if (node) {node.rbRed = false;}
    };

Voronoi.prototype.RBTree.prototype.rbRotateLeft = function(node) {
    var p = node,
        q = node.rbRight, // can't be null
        parent = p.rbParent;
    if (parent) {
        if (parent.rbLeft === p) {
            parent.rbLeft = q;
            }
        else {
            parent.rbRight = q;
            }
        }
    else {
        this.root = q;
        }
    q.rbParent = parent;
    p.rbParent = q;
    p.rbRight = q.rbLeft;
    if (p.rbRight) {
        p.rbRight.rbParent = p;
        }
    q.rbLeft = p;
    };

Voronoi.prototype.RBTree.prototype.rbRotateRight = function(node) {
    var p = node,
        q = node.rbLeft, // can't be null
        parent = p.rbParent;
    if (parent) {
        if (parent.rbLeft === p) {
            parent.rbLeft = q;
            }
        else {
            parent.rbRight = q;
            }
        }
    else {
        this.root = q;
        }
    q.rbParent = parent;
    p.rbParent = q;
    p.rbLeft = q.rbRight;
    if (p.rbLeft) {
        p.rbLeft.rbParent = p;
        }
    q.rbRight = p;
    };

Voronoi.prototype.RBTree.prototype.getFirst = function(node) {
    while (node.rbLeft) {
        node = node.rbLeft;
        }
    return node;
    };

Voronoi.prototype.RBTree.prototype.getLast = function(node) {
    while (node.rbRight) {
        node = node.rbRight;
        }
    return node;
    };

// ---------------------------------------------------------------------------
// Diagram methods

Voronoi.prototype.Diagram = function(site) {
    this.site = site;
    };

// ---------------------------------------------------------------------------
// Cell methods

Voronoi.prototype.Cell = function(site) {
    this.site = site;
    this.halfedges = [];
    this.closeMe = false;
    };

Voronoi.prototype.Cell.prototype.init = function(site) {
    this.site = site;
    this.halfedges = [];
    this.closeMe = false;
    return this;
    };

Voronoi.prototype.createCell = function(site) {
    var cell = this.cellJunkyard.pop();
    if ( cell ) {
        return cell.init(site);
        }
    return new this.Cell(site);
    };

Voronoi.prototype.Cell.prototype.prepareHalfedges = function() {
    var halfedges = this.halfedges,
        iHalfedge = halfedges.length,
        edge;
    // get rid of unused halfedges
    // rhill 2011-05-27: Keep it simple, no point here in trying
    // to be fancy: dangling edges are a typically a minority.
    while (iHalfedge--) {
        edge = halfedges[iHalfedge].edge;
        if (!edge.vb || !edge.va) {
            halfedges.splice(iHalfedge,1);
            }
        }

    // rhill 2011-05-26: I tried to use a binary search at insertion
    // time to keep the array sorted on-the-fly (in Cell.addHalfedge()).
    // There was no real benefits in doing so, performance on
    // Firefox 3.6 was improved marginally, while performance on
    // Opera 11 was penalized marginally.
    halfedges.sort(function(a,b){return b.angle-a.angle;});
    return halfedges.length;
    };

// Return a list of the neighbor Ids
Voronoi.prototype.Cell.prototype.getNeighborIds = function() {
    var neighbors = [],
        iHalfedge = this.halfedges.length,
        edge;
    while (iHalfedge--){
        edge = this.halfedges[iHalfedge].edge;
        if (edge.lSite !== null && edge.lSite.voronoiId != this.site.voronoiId) {
            neighbors.push(edge.lSite.voronoiId);
            }
        else if (edge.rSite !== null && edge.rSite.voronoiId != this.site.voronoiId){
            neighbors.push(edge.rSite.voronoiId);
            }
        }
    return neighbors;
    };

// Compute bounding box
//
Voronoi.prototype.Cell.prototype.getBbox = function() {
    var halfedges = this.halfedges,
        iHalfedge = halfedges.length,
        xmin = Infinity,
        ymin = Infinity,
        xmax = -Infinity,
        ymax = -Infinity,
        v, vx, vy;
    while (iHalfedge--) {
        v = halfedges[iHalfedge].getStartpoint();
        vx = v.x;
        vy = v.y;
        if (vx < xmin) {xmin = vx;}
        if (vy < ymin) {ymin = vy;}
        if (vx > xmax) {xmax = vx;}
        if (vy > ymax) {ymax = vy;}
        // we dont need to take into account end point,
        // since each end point matches a start point
        }
    return {
        x: xmin,
        y: ymin,
        width: xmax-xmin,
        height: ymax-ymin
        };
    };

// Return whether a point is inside, on, or outside the cell:
//   -1: point is outside the perimeter of the cell
//    0: point is on the perimeter of the cell
//    1: point is inside the perimeter of the cell
//
Voronoi.prototype.Cell.prototype.pointIntersection = function(x, y) {
    // Check if point in polygon. Since all polygons of a Voronoi
    // diagram are convex, then:
    // http://paulbourke.net/geometry/polygonmesh/
    // Solution 3 (2D):
    //   "If the polygon is convex then one can consider the polygon
    //   "as a 'path' from the first vertex. A point is on the interior
    //   "of this polygons if it is always on the same side of all the
    //   "line segments making up the path. ...
    //   "(y - y0) (x1 - x0) - (x - x0) (y1 - y0)
    //   "if it is less than 0 then P is to the right of the line segment,
    //   "if greater than 0 it is to the left, if equal to 0 then it lies
    //   "on the line segment"
    var halfedges = this.halfedges,
        iHalfedge = halfedges.length,
        halfedge,
        p0, p1, r;
    while (iHalfedge--) {
        halfedge = halfedges[iHalfedge];
        p0 = halfedge.getStartpoint();
        p1 = halfedge.getEndpoint();
        r = (y-p0.y)*(p1.x-p0.x)-(x-p0.x)*(p1.y-p0.y);
        if (!r) {
            return 0;
            }
        if (r > 0) {
            return -1;
            }
        }
    return 1;
    };

// ---------------------------------------------------------------------------
// Edge methods
//

Voronoi.prototype.Vertex = function(x, y) {
    this.x = x;
    this.y = y;
    };

Voronoi.prototype.Edge = function(lSite, rSite) {
    this.lSite = lSite;
    this.rSite = rSite;
    this.va = this.vb = null;
    };

Voronoi.prototype.Halfedge = function(edge, lSite, rSite) {
    this.site = lSite;
    this.edge = edge;
    // 'angle' is a value to be used for properly sorting the
    // halfsegments counterclockwise. By convention, we will
    // use the angle of the line defined by the 'site to the left'
    // to the 'site to the right'.
    // However, border edges have no 'site to the right': thus we
    // use the angle of line perpendicular to the halfsegment (the
    // edge should have both end points defined in such case.)
    if (rSite) {
        this.angle = Math.atan2(rSite.y-lSite.y, rSite.x-lSite.x);
        }
    else {
        var va = edge.va,
            vb = edge.vb;
        // rhill 2011-05-31: used to call getStartpoint()/getEndpoint(),
        // but for performance purpose, these are expanded in place here.
        this.angle = edge.lSite === lSite ?
            Math.atan2(vb.x-va.x, va.y-vb.y) :
            Math.atan2(va.x-vb.x, vb.y-va.y);
        }
    };

Voronoi.prototype.createHalfedge = function(edge, lSite, rSite) {
    return new this.Halfedge(edge, lSite, rSite);
    };

Voronoi.prototype.Halfedge.prototype.getStartpoint = function() {
    return this.edge.lSite === this.site ? this.edge.va : this.edge.vb;
    };

Voronoi.prototype.Halfedge.prototype.getEndpoint = function() {
    return this.edge.lSite === this.site ? this.edge.vb : this.edge.va;
    };



// this create and add a vertex to the internal collection

Voronoi.prototype.createVertex = function(x, y) {
    var v = this.vertexJunkyard.pop();
    if ( !v ) {
        v = new this.Vertex(x, y);
        }
    else {
        v.x = x;
        v.y = y;
        }
    this.vertices.push(v);
    return v;
    };

// this create and add an edge to internal collection, and also create
// two halfedges which are added to each site's counterclockwise array
// of halfedges.

Voronoi.prototype.createEdge = function(lSite, rSite, va, vb) {
    var edge = this.edgeJunkyard.pop();
    if ( !edge ) {
        edge = new this.Edge(lSite, rSite);
        }
    else {
        edge.lSite = lSite;
        edge.rSite = rSite;
        edge.va = edge.vb = null;
        }

    this.edges.push(edge);
    if (va) {
        this.setEdgeStartpoint(edge, lSite, rSite, va);
        }
    if (vb) {
        this.setEdgeEndpoint(edge, lSite, rSite, vb);
        }
    this.cells[lSite.voronoiId].halfedges.push(this.createHalfedge(edge, lSite, rSite));
    this.cells[rSite.voronoiId].halfedges.push(this.createHalfedge(edge, rSite, lSite));
    return edge;
    };

Voronoi.prototype.createBorderEdge = function(lSite, va, vb) {
    var edge = this.edgeJunkyard.pop();
    if ( !edge ) {
        edge = new this.Edge(lSite, null);
        }
    else {
        edge.lSite = lSite;
        edge.rSite = null;
        }
    edge.va = va;
    edge.vb = vb;
    this.edges.push(edge);
    return edge;
    };

Voronoi.prototype.setEdgeStartpoint = function(edge, lSite, rSite, vertex) {
    if (!edge.va && !edge.vb) {
        edge.va = vertex;
        edge.lSite = lSite;
        edge.rSite = rSite;
        }
    else if (edge.lSite === rSite) {
        edge.vb = vertex;
        }
    else {
        edge.va = vertex;
        }
    };

Voronoi.prototype.setEdgeEndpoint = function(edge, lSite, rSite, vertex) {
    this.setEdgeStartpoint(edge, rSite, lSite, vertex);
    };

// ---------------------------------------------------------------------------
// Beachline methods

// rhill 2011-06-07: For some reasons, performance suffers significantly
// when instanciating a literal object instead of an empty ctor
Voronoi.prototype.Beachsection = function() {
    };

// rhill 2011-06-02: A lot of Beachsection instanciations
// occur during the computation of the Voronoi diagram,
// somewhere between the number of sites and twice the
// number of sites, while the number of Beachsections on the
// beachline at any given time is comparatively low. For this
// reason, we reuse already created Beachsections, in order
// to avoid new memory allocation. This resulted in a measurable
// performance gain.

Voronoi.prototype.createBeachsection = function(site) {
    var beachsection = this.beachsectionJunkyard.pop();
    if (!beachsection) {
        beachsection = new this.Beachsection();
        }
    beachsection.site = site;
    return beachsection;
    };

// calculate the left break point of a particular beach section,
// given a particular sweep line
Voronoi.prototype.leftBreakPoint = function(arc, directrix) {
    // http://en.wikipedia.org/wiki/Parabola
    // http://en.wikipedia.org/wiki/Quadratic_equation
    // h1 = x1,
    // k1 = (y1+directrix)/2,
    // h2 = x2,
    // k2 = (y2+directrix)/2,
    // p1 = k1-directrix,
    // a1 = 1/(4*p1),
    // b1 = -h1/(2*p1),
    // c1 = h1*h1/(4*p1)+k1,
    // p2 = k2-directrix,
    // a2 = 1/(4*p2),
    // b2 = -h2/(2*p2),
    // c2 = h2*h2/(4*p2)+k2,
    // x = (-(b2-b1) + Math.sqrt((b2-b1)*(b2-b1) - 4*(a2-a1)*(c2-c1))) / (2*(a2-a1))
    // When x1 become the x-origin:
    // h1 = 0,
    // k1 = (y1+directrix)/2,
    // h2 = x2-x1,
    // k2 = (y2+directrix)/2,
    // p1 = k1-directrix,
    // a1 = 1/(4*p1),
    // b1 = 0,
    // c1 = k1,
    // p2 = k2-directrix,
    // a2 = 1/(4*p2),
    // b2 = -h2/(2*p2),
    // c2 = h2*h2/(4*p2)+k2,
    // x = (-b2 + Math.sqrt(b2*b2 - 4*(a2-a1)*(c2-k1))) / (2*(a2-a1)) + x1

    // change code below at your own risk: care has been taken to
    // reduce errors due to computers' finite arithmetic precision.
    // Maybe can still be improved, will see if any more of this
    // kind of errors pop up again.
    var site = arc.site,
        rfocx = site.x,
        rfocy = site.y,
        pby2 = rfocy-directrix;
    // parabola in degenerate case where focus is on directrix
    if (!pby2) {
        return rfocx;
        }
    var lArc = arc.rbPrevious;
    if (!lArc) {
        return -Infinity;
        }
    site = lArc.site;
    var lfocx = site.x,
        lfocy = site.y,
        plby2 = lfocy-directrix;
    // parabola in degenerate case where focus is on directrix
    if (!plby2) {
        return lfocx;
        }
    var hl = lfocx-rfocx,
        aby2 = 1/pby2-1/plby2,
        b = hl/plby2;
    if (aby2) {
        return (-b+this.sqrt(b*b-2*aby2*(hl*hl/(-2*plby2)-lfocy+plby2/2+rfocy-pby2/2)))/aby2+rfocx;
        }
    // both parabolas have same distance to directrix, thus break point is midway
    return (rfocx+lfocx)/2;
    };

// calculate the right break point of a particular beach section,
// given a particular directrix
Voronoi.prototype.rightBreakPoint = function(arc, directrix) {
    var rArc = arc.rbNext;
    if (rArc) {
        return this.leftBreakPoint(rArc, directrix);
        }
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
    };

Voronoi.prototype.detachBeachsection = function(beachsection) {
    this.detachCircleEvent(beachsection); // detach potentially attached circle event
    this.beachline.rbRemoveNode(beachsection); // remove from RB-tree
    this.beachsectionJunkyard.push(beachsection); // mark for reuse
    };

Voronoi.prototype.removeBeachsection = function(beachsection) {
    var circle = beachsection.circleEvent,
        x = circle.x,
        y = circle.ycenter,
        vertex = this.createVertex(x, y),
        previous = beachsection.rbPrevious,
        next = beachsection.rbNext,
        disappearingTransitions = [beachsection],
        abs_fn = Math.abs;

    // remove collapsed beachsection from beachline
    this.detachBeachsection(beachsection);

    // there could be more than one empty arc at the deletion point, this
    // happens when more than two edges are linked by the same vertex,
    // so we will collect all those edges by looking up both sides of
    // the deletion point.
    // by the way, there is *always* a predecessor/successor to any collapsed
    // beach section, it's just impossible to have a collapsing first/last
    // beach sections on the beachline, since they obviously are unconstrained
    // on their left/right side.

    // look left
    var lArc = previous;
    while (lArc.circleEvent && abs_fn(x-lArc.circleEvent.x)<1e-9 && abs_fn(y-lArc.circleEvent.ycenter)<1e-9) {
        previous = lArc.rbPrevious;
        disappearingTransitions.unshift(lArc);
        this.detachBeachsection(lArc); // mark for reuse
        lArc = previous;
        }
    // even though it is not disappearing, I will also add the beach section
    // immediately to the left of the left-most collapsed beach section, for
    // convenience, since we need to refer to it later as this beach section
    // is the 'left' site of an edge for which a start point is set.
    disappearingTransitions.unshift(lArc);
    this.detachCircleEvent(lArc);

    // look right
    var rArc = next;
    while (rArc.circleEvent && abs_fn(x-rArc.circleEvent.x)<1e-9 && abs_fn(y-rArc.circleEvent.ycenter)<1e-9) {
        next = rArc.rbNext;
        disappearingTransitions.push(rArc);
        this.detachBeachsection(rArc); // mark for reuse
        rArc = next;
        }
    // we also have to add the beach section immediately to the right of the
    // right-most collapsed beach section, since there is also a disappearing
    // transition representing an edge's start point on its left.
    disappearingTransitions.push(rArc);
    this.detachCircleEvent(rArc);

    // walk through all the disappearing transitions between beach sections and
    // set the start point of their (implied) edge.
    var nArcs = disappearingTransitions.length,
        iArc;
    for (iArc=1; iArc<nArcs; iArc++) {
        rArc = disappearingTransitions[iArc];
        lArc = disappearingTransitions[iArc-1];
        this.setEdgeStartpoint(rArc.edge, lArc.site, rArc.site, vertex);
        }

    // create a new edge as we have now a new transition between
    // two beach sections which were previously not adjacent.
    // since this edge appears as a new vertex is defined, the vertex
    // actually define an end point of the edge (relative to the site
    // on the left)
    lArc = disappearingTransitions[0];
    rArc = disappearingTransitions[nArcs-1];
    rArc.edge = this.createEdge(lArc.site, rArc.site, undefined, vertex);

    // create circle events if any for beach sections left in the beachline
    // adjacent to collapsed sections
    this.attachCircleEvent(lArc);
    this.attachCircleEvent(rArc);
    };

Voronoi.prototype.addBeachsection = function(site) {
    var x = site.x,
        directrix = site.y;

    // find the left and right beach sections which will surround the newly
    // created beach section.
    // rhill 2011-06-01: This loop is one of the most often executed,
    // hence we expand in-place the comparison-against-epsilon calls.
    var lArc, rArc,
        dxl, dxr,
        node = this.beachline.root;

    while (node) {
        dxl = this.leftBreakPoint(node,directrix)-x;
        // x lessThanWithEpsilon xl => falls somewhere before the left edge of the beachsection
        if (dxl > 1e-9) {
            // this case should never happen
            // if (!node.rbLeft) {
            //    rArc = node.rbLeft;
            //    break;
            //    }
            node = node.rbLeft;
            }
        else {
            dxr = x-this.rightBreakPoint(node,directrix);
            // x greaterThanWithEpsilon xr => falls somewhere after the right edge of the beachsection
            if (dxr > 1e-9) {
                if (!node.rbRight) {
                    lArc = node;
                    break;
                    }
                node = node.rbRight;
                }
            else {
                // x equalWithEpsilon xl => falls exactly on the left edge of the beachsection
                if (dxl > -1e-9) {
                    lArc = node.rbPrevious;
                    rArc = node;
                    }
                // x equalWithEpsilon xr => falls exactly on the right edge of the beachsection
                else if (dxr > -1e-9) {
                    lArc = node;
                    rArc = node.rbNext;
                    }
                // falls exactly somewhere in the middle of the beachsection
                else {
                    lArc = rArc = node;
                    }
                break;
                }
            }
        }
    // at this point, keep in mind that lArc and/or rArc could be
    // undefined or null.

    // create a new beach section object for the site and add it to RB-tree
    var newArc = this.createBeachsection(site);
    this.beachline.rbInsertSuccessor(lArc, newArc);

    // cases:
    //

    // [null,null]
    // least likely case: new beach section is the first beach section on the
    // beachline.
    // This case means:
    //   no new transition appears
    //   no collapsing beach section
    //   new beachsection become root of the RB-tree
    if (!lArc && !rArc) {
        return;
        }

    // [lArc,rArc] where lArc == rArc
    // most likely case: new beach section split an existing beach
    // section.
    // This case means:
    //   one new transition appears
    //   the left and right beach section might be collapsing as a result
    //   two new nodes added to the RB-tree
    if (lArc === rArc) {
        // invalidate circle event of split beach section
        this.detachCircleEvent(lArc);

        // split the beach section into two separate beach sections
        rArc = this.createBeachsection(lArc.site);
        this.beachline.rbInsertSuccessor(newArc, rArc);

        // since we have a new transition between two beach sections,
        // a new edge is born
        newArc.edge = rArc.edge = this.createEdge(lArc.site, newArc.site);

        // check whether the left and right beach sections are collapsing
        // and if so create circle events, to be notified when the point of
        // collapse is reached.
        this.attachCircleEvent(lArc);
        this.attachCircleEvent(rArc);
        return;
        }

    // [lArc,null]
    // even less likely case: new beach section is the *last* beach section
    // on the beachline -- this can happen *only* if *all* the previous beach
    // sections currently on the beachline share the same y value as
    // the new beach section.
    // This case means:
    //   one new transition appears
    //   no collapsing beach section as a result
    //   new beach section become right-most node of the RB-tree
    if (lArc && !rArc) {
        newArc.edge = this.createEdge(lArc.site,newArc.site);
        return;
        }

    // [null,rArc]
    // impossible case: because sites are strictly processed from top to bottom,
    // and left to right, which guarantees that there will always be a beach section
    // on the left -- except of course when there are no beach section at all on
    // the beach line, which case was handled above.
    // rhill 2011-06-02: No point testing in non-debug version
    //if (!lArc && rArc) {
    //    throw "Voronoi.addBeachsection(): What is this I don't even";
    //    }

    // [lArc,rArc] where lArc != rArc
    // somewhat less likely case: new beach section falls *exactly* in between two
    // existing beach sections
    // This case means:
    //   one transition disappears
    //   two new transitions appear
    //   the left and right beach section might be collapsing as a result
    //   only one new node added to the RB-tree
    if (lArc !== rArc) {
        // invalidate circle events of left and right sites
        this.detachCircleEvent(lArc);
        this.detachCircleEvent(rArc);

        // an existing transition disappears, meaning a vertex is defined at
        // the disappearance point.
        // since the disappearance is caused by the new beachsection, the
        // vertex is at the center of the circumscribed circle of the left,
        // new and right beachsections.
        // http://mathforum.org/library/drmath/view/55002.html
        // Except that I bring the origin at A to simplify
        // calculation
        var lSite = lArc.site,
            ax = lSite.x,
            ay = lSite.y,
            bx=site.x-ax,
            by=site.y-ay,
            rSite = rArc.site,
            cx=rSite.x-ax,
            cy=rSite.y-ay,
            d=2*(bx*cy-by*cx),
            hb=bx*bx+by*by,
            hc=cx*cx+cy*cy,
            vertex = this.createVertex((cy*hb-by*hc)/d+ax, (bx*hc-cx*hb)/d+ay);

        // one transition disappear
        this.setEdgeStartpoint(rArc.edge, lSite, rSite, vertex);

        // two new transitions appear at the new vertex location
        newArc.edge = this.createEdge(lSite, site, undefined, vertex);
        rArc.edge = this.createEdge(site, rSite, undefined, vertex);

        // check whether the left and right beach sections are collapsing
        // and if so create circle events, to handle the point of collapse.
        this.attachCircleEvent(lArc);
        this.attachCircleEvent(rArc);
        return;
        }
    };

// ---------------------------------------------------------------------------
// Circle event methods

// rhill 2011-06-07: For some reasons, performance suffers significantly
// when instanciating a literal object instead of an empty ctor
Voronoi.prototype.CircleEvent = function() {
    // rhill 2013-10-12: it helps to state exactly what we are at ctor time.
    this.arc = null;
    this.rbLeft = null;
    this.rbNext = null;
    this.rbParent = null;
    this.rbPrevious = null;
    this.rbRed = false;
    this.rbRight = null;
    this.site = null;
    this.x = this.y = this.ycenter = 0;
    };

Voronoi.prototype.attachCircleEvent = function(arc) {
    var lArc = arc.rbPrevious,
        rArc = arc.rbNext;
    if (!lArc || !rArc) {return;} // does that ever happen?
    var lSite = lArc.site,
        cSite = arc.site,
        rSite = rArc.site;

    // If site of left beachsection is same as site of
    // right beachsection, there can't be convergence
    if (lSite===rSite) {return;}

    // Find the circumscribed circle for the three sites associated
    // with the beachsection triplet.
    // rhill 2011-05-26: It is more efficient to calculate in-place
    // rather than getting the resulting circumscribed circle from an
    // object returned by calling Voronoi.circumcircle()
    // http://mathforum.org/library/drmath/view/55002.html
    // Except that I bring the origin at cSite to simplify calculations.
    // The bottom-most part of the circumcircle is our Fortune 'circle
    // event', and its center is a vertex potentially part of the final
    // Voronoi diagram.
    var bx = cSite.x,
        by = cSite.y,
        ax = lSite.x-bx,
        ay = lSite.y-by,
        cx = rSite.x-bx,
        cy = rSite.y-by;

    // If points l->c->r are clockwise, then center beach section does not
    // collapse, hence it can't end up as a vertex (we reuse 'd' here, which
    // sign is reverse of the orientation, hence we reverse the test.
    // http://en.wikipedia.org/wiki/Curve_orientation#Orientation_of_a_simple_polygon
    // rhill 2011-05-21: Nasty finite precision error which caused circumcircle() to
    // return infinites: 1e-12 seems to fix the problem.
    var d = 2*(ax*cy-ay*cx);
    if (d >= -2e-12){return;}

    var ha = ax*ax+ay*ay,
        hc = cx*cx+cy*cy,
        x = (cy*ha-ay*hc)/d,
        y = (ax*hc-cx*ha)/d,
        ycenter = y+by;

    // Important: ybottom should always be under or at sweep, so no need
    // to waste CPU cycles by checking

    // recycle circle event object if possible
    var circleEvent = this.circleEventJunkyard.pop();
    if (!circleEvent) {
        circleEvent = new this.CircleEvent();
        }
    circleEvent.arc = arc;
    circleEvent.site = cSite;
    circleEvent.x = x+bx;
    circleEvent.y = ycenter+this.sqrt(x*x+y*y); // y bottom
    circleEvent.ycenter = ycenter;
    arc.circleEvent = circleEvent;

    // find insertion point in RB-tree: circle events are ordered from
    // smallest to largest
    var predecessor = null,
        node = this.circleEvents.root;
    while (node) {
        if (circleEvent.y < node.y || (circleEvent.y === node.y && circleEvent.x <= node.x)) {
            if (node.rbLeft) {
                node = node.rbLeft;
                }
            else {
                predecessor = node.rbPrevious;
                break;
                }
            }
        else {
            if (node.rbRight) {
                node = node.rbRight;
                }
            else {
                predecessor = node;
                break;
                }
            }
        }
    this.circleEvents.rbInsertSuccessor(predecessor, circleEvent);
    if (!predecessor) {
        this.firstCircleEvent = circleEvent;
        }
    };

Voronoi.prototype.detachCircleEvent = function(arc) {
    var circleEvent = arc.circleEvent;
    if (circleEvent) {
        if (!circleEvent.rbPrevious) {
            this.firstCircleEvent = circleEvent.rbNext;
            }
        this.circleEvents.rbRemoveNode(circleEvent); // remove from RB-tree
        this.circleEventJunkyard.push(circleEvent);
        arc.circleEvent = null;
        }
    };

// ---------------------------------------------------------------------------
// Diagram completion methods

// connect dangling edges (not if a cursory test tells us
// it is not going to be visible.
// return value:
//   false: the dangling endpoint couldn't be connected
//   true: the dangling endpoint could be connected
Voronoi.prototype.connectEdge = function(edge, bbox) {
    // skip if end point already connected
    var vb = edge.vb;
    if (!!vb) {return true;}

    // make local copy for performance purpose
    var va = edge.va,
        xl = bbox.xl,
        xr = bbox.xr,
        yt = bbox.yt,
        yb = bbox.yb,
        lSite = edge.lSite,
        rSite = edge.rSite,
        lx = lSite.x,
        ly = lSite.y,
        rx = rSite.x,
        ry = rSite.y,
        fx = (lx+rx)/2,
        fy = (ly+ry)/2,
        fm, fb;

    // if we reach here, this means cells which use this edge will need
    // to be closed, whether because the edge was removed, or because it
    // was connected to the bounding box.
    this.cells[lSite.voronoiId].closeMe = true;
    this.cells[rSite.voronoiId].closeMe = true;

    // get the line equation of the bisector if line is not vertical
    if (ry !== ly) {
        fm = (lx-rx)/(ry-ly);
        fb = fy-fm*fx;
        }

    // remember, direction of line (relative to left site):
    // upward: left.x < right.x
    // downward: left.x > right.x
    // horizontal: left.x == right.x
    // upward: left.x < right.x
    // rightward: left.y < right.y
    // leftward: left.y > right.y
    // vertical: left.y == right.y

    // depending on the direction, find the best side of the
    // bounding box to use to determine a reasonable start point

    // rhill 2013-12-02:
    // While at it, since we have the values which define the line,
    // clip the end of va if it is outside the bbox.
    // https://github.com/gorhill/Javascript-Voronoi/issues/15
    // TODO: Do all the clipping here rather than rely on Liang-Barsky
    // which does not do well sometimes due to loss of arithmetic
    // precision. The code here doesn't degrade if one of the vertex is
    // at a huge distance.

    // special case: vertical line
    if (fm === undefined) {
        // doesn't intersect with viewport
        if (fx < xl || fx >= xr) {return false;}
        // downward
        if (lx > rx) {
            if (!va || va.y < yt) {
                va = this.createVertex(fx, yt);
                }
            else if (va.y >= yb) {
                return false;
                }
            vb = this.createVertex(fx, yb);
            }
        // upward
        else {
            if (!va || va.y > yb) {
                va = this.createVertex(fx, yb);
                }
            else if (va.y < yt) {
                return false;
                }
            vb = this.createVertex(fx, yt);
            }
        }
    // closer to vertical than horizontal, connect start point to the
    // top or bottom side of the bounding box
    else if (fm < -1 || fm > 1) {
        // downward
        if (lx > rx) {
            if (!va || va.y < yt) {
                va = this.createVertex((yt-fb)/fm, yt);
                }
            else if (va.y >= yb) {
                return false;
                }
            vb = this.createVertex((yb-fb)/fm, yb);
            }
        // upward
        else {
            if (!va || va.y > yb) {
                va = this.createVertex((yb-fb)/fm, yb);
                }
            else if (va.y < yt) {
                return false;
                }
            vb = this.createVertex((yt-fb)/fm, yt);
            }
        }
    // closer to horizontal than vertical, connect start point to the
    // left or right side of the bounding box
    else {
        // rightward
        if (ly < ry) {
            if (!va || va.x < xl) {
                va = this.createVertex(xl, fm*xl+fb);
                }
            else if (va.x >= xr) {
                return false;
                }
            vb = this.createVertex(xr, fm*xr+fb);
            }
        // leftward
        else {
            if (!va || va.x > xr) {
                va = this.createVertex(xr, fm*xr+fb);
                }
            else if (va.x < xl) {
                return false;
                }
            vb = this.createVertex(xl, fm*xl+fb);
            }
        }
    edge.va = va;
    edge.vb = vb;

    return true;
    };

// line-clipping code taken from:
//   Liang-Barsky function by Daniel White
//   http://www.skytopia.com/project/articles/compsci/clipping.html
// Thanks!
// A bit modified to minimize code paths
Voronoi.prototype.clipEdge = function(edge, bbox) {
    var ax = edge.va.x,
        ay = edge.va.y,
        bx = edge.vb.x,
        by = edge.vb.y,
        t0 = 0,
        t1 = 1,
        dx = bx-ax,
        dy = by-ay;
    // left
    var q = ax-bbox.xl;
    if (dx===0 && q<0) {return false;}
    var r = -q/dx;
    if (dx<0) {
        if (r<t0) {return false;}
        if (r<t1) {t1=r;}
        }
    else if (dx>0) {
        if (r>t1) {return false;}
        if (r>t0) {t0=r;}
        }
    // right
    q = bbox.xr-ax;
    if (dx===0 && q<0) {return false;}
    r = q/dx;
    if (dx<0) {
        if (r>t1) {return false;}
        if (r>t0) {t0=r;}
        }
    else if (dx>0) {
        if (r<t0) {return false;}
        if (r<t1) {t1=r;}
        }
    // top
    q = ay-bbox.yt;
    if (dy===0 && q<0) {return false;}
    r = -q/dy;
    if (dy<0) {
        if (r<t0) {return false;}
        if (r<t1) {t1=r;}
        }
    else if (dy>0) {
        if (r>t1) {return false;}
        if (r>t0) {t0=r;}
        }
    // bottom        
    q = bbox.yb-ay;
    if (dy===0 && q<0) {return false;}
    r = q/dy;
    if (dy<0) {
        if (r>t1) {return false;}
        if (r>t0) {t0=r;}
        }
    else if (dy>0) {
        if (r<t0) {return false;}
        if (r<t1) {t1=r;}
        }

    // if we reach this point, Voronoi edge is within bbox

    // if t0 > 0, va needs to change
    // rhill 2011-06-03: we need to create a new vertex rather
    // than modifying the existing one, since the existing
    // one is likely shared with at least another edge
    if (t0 > 0) {
        edge.va = this.createVertex(ax+t0*dx, ay+t0*dy);
        }

    // if t1 < 1, vb needs to change
    // rhill 2011-06-03: we need to create a new vertex rather
    // than modifying the existing one, since the existing
    // one is likely shared with at least another edge
    if (t1 < 1) {
        edge.vb = this.createVertex(ax+t1*dx, ay+t1*dy);
        }

    // va and/or vb were clipped, thus we will need to close
    // cells which use this edge.
    if ( t0 > 0 || t1 < 1 ) {
        this.cells[edge.lSite.voronoiId].closeMe = true;
        this.cells[edge.rSite.voronoiId].closeMe = true;
    }

    return true;
    };

// Connect/cut edges at bounding box
Voronoi.prototype.clipEdges = function(bbox) {
    // connect all dangling edges to bounding box
    // or get rid of them if it can't be done
    var edges = this.edges,
        iEdge = edges.length,
        edge,
        abs_fn = Math.abs;

    // iterate backward so we can splice safely
    while (iEdge--) {
        edge = edges[iEdge];
        // edge is removed if:
        //   it is wholly outside the bounding box
        //   it is looking more like a point than a line
        if (!this.connectEdge(edge, bbox) ||
            !this.clipEdge(edge, bbox) ||
            (abs_fn(edge.va.x-edge.vb.x)<1e-9 && abs_fn(edge.va.y-edge.vb.y)<1e-9)) {
            edge.va = edge.vb = null;
            edges.splice(iEdge,1);
            }
        }
    };

// Close the cells.
// The cells are bound by the supplied bounding box.
// Each cell refers to its associated site, and a list
// of halfedges ordered counterclockwise.
Voronoi.prototype.closeCells = function(bbox) {
    var xl = bbox.xl,
        xr = bbox.xr,
        yt = bbox.yt,
        yb = bbox.yb,
        cells = this.cells,
        iCell = cells.length,
        cell,
        iLeft,
        halfedges, nHalfedges,
        edge,
        va, vb, vz,
        lastBorderSegment,
        abs_fn = Math.abs;

    while (iCell--) {
        cell = cells[iCell];
        // prune, order halfedges counterclockwise, then add missing ones
        // required to close cells
        if (!cell.prepareHalfedges()) {
            continue;
            }
        if (!cell.closeMe) {
            continue;
            }
        // find first 'unclosed' point.
        // an 'unclosed' point will be the end point of a halfedge which
        // does not match the start point of the following halfedge
        halfedges = cell.halfedges;
        nHalfedges = halfedges.length;
        // special case: only one site, in which case, the viewport is the cell
        // ...

        // all other cases
        iLeft = 0;
        while (iLeft < nHalfedges) {
            va = halfedges[iLeft].getEndpoint();
            vz = halfedges[(iLeft+1) % nHalfedges].getStartpoint();
            // if end point is not equal to start point, we need to add the missing
            // halfedge(s) up to vz
            if (abs_fn(va.x-vz.x)>=1e-9 || abs_fn(va.y-vz.y)>=1e-9) {

                // rhill 2013-12-02:
                // "Holes" in the halfedges are not necessarily always adjacent.
                // https://github.com/gorhill/Javascript-Voronoi/issues/16

                // find entry point:
                switch (true) {

                    // walk downward along left side
                    case this.equalWithEpsilon(va.x,xl) && this.lessThanWithEpsilon(va.y,yb):
                        lastBorderSegment = this.equalWithEpsilon(vz.x,xl);
                        vb = this.createVertex(xl, lastBorderSegment ? vz.y : yb);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        va = vb;
                        // fall through

                    // walk rightward along bottom side
                    case this.equalWithEpsilon(va.y,yb) && this.lessThanWithEpsilon(va.x,xr):
                        lastBorderSegment = this.equalWithEpsilon(vz.y,yb);
                        vb = this.createVertex(lastBorderSegment ? vz.x : xr, yb);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        va = vb;
                        // fall through

                    // walk upward along right side
                    case this.equalWithEpsilon(va.x,xr) && this.greaterThanWithEpsilon(va.y,yt):
                        lastBorderSegment = this.equalWithEpsilon(vz.x,xr);
                        vb = this.createVertex(xr, lastBorderSegment ? vz.y : yt);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        va = vb;
                        // fall through

                    // walk leftward along top side
                    case this.equalWithEpsilon(va.y,yt) && this.greaterThanWithEpsilon(va.x,xl):
                        lastBorderSegment = this.equalWithEpsilon(vz.y,yt);
                        vb = this.createVertex(lastBorderSegment ? vz.x : xl, yt);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        va = vb;
                        // fall through

                        // walk downward along left side
                        lastBorderSegment = this.equalWithEpsilon(vz.x,xl);
                        vb = this.createVertex(xl, lastBorderSegment ? vz.y : yb);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        va = vb;
                        // fall through

                        // walk rightward along bottom side
                        lastBorderSegment = this.equalWithEpsilon(vz.y,yb);
                        vb = this.createVertex(lastBorderSegment ? vz.x : xr, yb);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        va = vb;
                        // fall through

                        // walk upward along right side
                        lastBorderSegment = this.equalWithEpsilon(vz.x,xr);
                        vb = this.createVertex(xr, lastBorderSegment ? vz.y : yt);
                        edge = this.createBorderEdge(cell.site, va, vb);
                        iLeft++;
                        halfedges.splice(iLeft, 0, this.createHalfedge(edge, cell.site, null));
                        nHalfedges++;
                        if ( lastBorderSegment ) { break; }
                        // fall through

                    default:
                        throw "Voronoi.closeCells() > this makes no sense!";
                    }
                }
            iLeft++;
            }
        cell.closeMe = false;
        }
    };

// ---------------------------------------------------------------------------
// Debugging helper
/*
Voronoi.prototype.dumpBeachline = function(y) {
    console.log('Voronoi.dumpBeachline(%f) > Beachsections, from left to right:', y);
    if ( !this.beachline ) {
        console.log('  None');
        }
    else {
        var bs = this.beachline.getFirst(this.beachline.root);
        while ( bs ) {
            console.log('  site %d: xl: %f, xr: %f', bs.site.voronoiId, this.leftBreakPoint(bs, y), this.rightBreakPoint(bs, y));
            bs = bs.rbNext;
            }
        }
    };
*/

// ---------------------------------------------------------------------------
// Helper: Quantize sites

// rhill 2013-10-12:
// This is to solve https://github.com/gorhill/Javascript-Voronoi/issues/15
// Since not all users will end up using the kind of coord values which would
// cause the issue to arise, I chose to let the user decide whether or not
// he should sanitize his coord values through this helper. This way, for
// those users who uses coord values which are known to be fine, no overhead is
// added.

Voronoi.prototype.quantizeSites = function(sites) {
    var ε = this.ε,
        n = sites.length,
        site;
    while ( n-- ) {
        site = sites[n];
        site.x = Math.floor(site.x / ε) * ε;
        site.y = Math.floor(site.y / ε) * ε;
        }
    };

// ---------------------------------------------------------------------------
// Helper: Recycle diagram: all vertex, edge and cell objects are
// "surrendered" to the Voronoi object for reuse.
// TODO: rhill-voronoi-core v2: more performance to be gained
// when I change the semantic of what is returned.

Voronoi.prototype.recycle = function(diagram) {
    if ( diagram ) {
        if ( diagram instanceof this.Diagram ) {
            this.toRecycle = diagram;
            }
        else {
            throw 'Voronoi.recycleDiagram() > Need a Diagram object.';
            }
        }
    };

// ---------------------------------------------------------------------------
// Top-level Fortune loop

// rhill 2011-05-19:
//   Voronoi sites are kept client-side now, to allow
//   user to freely modify content. At compute time,
//   *references* to sites are copied locally.

Voronoi.prototype.compute = function(sites, bbox) {
    // to measure execution time
    var startTime = new Date();

    // init internal state
    this.reset();

    // any diagram data available for recycling?
    // I do that here so that this is included in execution time
    if ( this.toRecycle ) {
        this.vertexJunkyard = this.vertexJunkyard.concat(this.toRecycle.vertices);
        this.edgeJunkyard = this.edgeJunkyard.concat(this.toRecycle.edges);
        this.cellJunkyard = this.cellJunkyard.concat(this.toRecycle.cells);
        this.toRecycle = null;
        }

    // Initialize site event queue
    var siteEvents = sites.slice(0);
    siteEvents.sort(function(a,b){
        var r = b.y - a.y;
        if (r) {return r;}
        return b.x - a.x;
        });

    // process queue
    var site = siteEvents.pop(),
        siteid = 0,
        xsitex, // to avoid duplicate sites
        xsitey,
        cells = this.cells,
        circle;

    // main loop
    for (;;) {
        // we need to figure whether we handle a site or circle event
        // for this we find out if there is a site event and it is
        // 'earlier' than the circle event
        circle = this.firstCircleEvent;

        // add beach section
        if (site && (!circle || site.y < circle.y || (site.y === circle.y && site.x < circle.x))) {
            // only if site is not a duplicate
            if (site.x !== xsitex || site.y !== xsitey) {
                // first create cell for new site
                cells[siteid] = this.createCell(site);
                site.voronoiId = siteid++;
                // then create a beachsection for that site
                this.addBeachsection(site);
                // remember last site coords to detect duplicate
                xsitey = site.y;
                xsitex = site.x;
                }
            site = siteEvents.pop();
            }

        // remove beach section
        else if (circle) {
            this.removeBeachsection(circle.arc);
            }

        // all done, quit
        else {
            break;
            }
        }

    // wrapping-up:
    //   connect dangling edges to bounding box
    //   cut edges as per bounding box
    //   discard edges completely outside bounding box
    //   discard edges which are point-like
    this.clipEdges(bbox);

    //   add missing edges in order to close opened cells
    this.closeCells(bbox);

    // to measure execution time
    var stopTime = new Date();

    // prepare return values
    var diagram = new this.Diagram();
    diagram.cells = this.cells;
    diagram.edges = this.edges;
    diagram.vertices = this.vertices;
    diagram.execTime = stopTime.getTime()-startTime.getTime();

    // clean up
    this.reset();

    return diagram;
    };

if (true)
    module.exports = Voronoi;



/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Collect a stream of packets into object keyed by its groups';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to collect'
  });
  c.outPorts.add('out', {
    datatype: 'object',
    description: 'An object containing input IPs sorted by their group names'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var after, before, child, data, groups, i, len, oldData, packet, parents, stream;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in');
    if (stream[0].type === 'openBracket' && stream[0].data === null) {
      before = stream.shift();
      after = stream.pop();
    }
    data = {};
    groups = [];
    parents = [];
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      if (packet.type === 'openBracket') {
        if (packet.data === '$data') {
          output.done(new Error('groups cannot be named \'$data\''));
          return;
        }
        parents.push(data);
        groups.push(packet.data);
        data = {};
        continue;
      }
      if (packet.type === 'data') {
        if (data.$data == null) {
          data.$data = [];
        }
        data.$data.push(packet.data);
        continue;
      }
      if (packet.type === 'closeBracket') {
        oldData = data;
        data = parents.pop();
        child = groups.pop();
        if (!(child in data)) {
          if (!(child in data)) {
            data[child] = oldData;
          }
          continue;
        }
        if (Array.isArray(data[child])) {
          data[child].push(oldData);
          continue;
        }
        data[child] = [data[child], oldData];
      }
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, prepareContext;
  c = new noflo.Component;
  c.description = 'Collect packets to an object identified by keys organized by connection';
  c.inPorts.add('keys', {
    datatype: 'string',
    description: 'Comma-separated property names to be used for data based on connection index'
  });
  c.inPorts.add('allpackets', {
    datatype: 'string',
    description: 'Comma-separated property names to collect all packets for in an array'
  });
  c.inPorts.add('collect', {
    datatype: 'all',
    addressable: true,
    description: 'Data IPs to collect'
  });
  c.inPorts.add('release', {
    datatype: 'bang',
    description: 'Release all collected packets as an object'
  });
  c.inPorts.add('clear', {
    datatype: 'bang',
    description: 'Clear all collected data'
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.context = {};
  c.forwardBrackets = {};
  prepareContext = function(scope) {
    if (!c.context[scope]) {
      c.context[scope] = {
        data: {},
        groups: {},
        keys: [],
        allpackets: []
      };
    }
    return c.context[scope];
  };
  c.tearDown = function(callback) {
    c.context = {};
    return callback();
  };
  return c.process(function(input, output) {
    var context, indexesWithIps, keys;
    context = prepareContext(input.scope);
    if (input.hasData('keys')) {
      keys = input.getData('keys').split(',');
      if (keys.length > 1) {
        context.keys = [];
      }
      context.keys = context.keys.concat(keys);
      output.done();
      return;
    }
    if (input.hasData('allpackets')) {
      keys = input.getData('allpackets').split(',');
      if (keys.length > 1) {
        context.allpackets = [];
      }
      context.allpackets = context.allpackets.concat(keys);
      output.done();
      return;
    }
    if (input.hasData('release')) {
      input.getData('release');
      output.send({
        out: context.data
      });
      context.data = {};
      output.done();
      return;
    }
    if (input.hasData('clear')) {
      input.getData('clear');
      delete c.context[input.scope];
      output.done();
      return;
    }
    indexesWithIps = input.attached('collect').filter(function(idx) {
      return input.has(['collect', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    if (input.attached('keys').length && !context.keys.length) {
      return;
    }
    if (input.attached('allpackets').length && !context.allpackets.length) {
      return;
    }
    indexesWithIps.forEach(function(idx) {
      var data, groupId, key, packet;
      packet = input.get(['collect', idx]);
      if (!context.keys[idx]) {
        return;
      }
      if (!context.groups[idx]) {
        context.groups[idx] = [];
      }
      if (packet.type === 'openBracket') {
        context.groups[idx].push(packet.data);
        return;
      }
      if (packet.type === 'data') {
        key = context.keys[idx];
        if (context.groups[idx].length) {
          groupId = context.groups[idx][0];
          if (!context.data[groupId]) {
            context.data[groupId] = {};
          }
          data = context.data[groupId];
        } else {
          data = context.data;
        }
        if (context.allpackets[idx]) {
          if (!data[key]) {
            data[key] = [];
          }
          data[key].push(packet.data);
          return;
        }
        data[key] = packet.data;
        return;
      }
      if (packet.type === 'closeBracket') {
        context.groups[idx].pop();
      }
    });
    return output.done();
  });
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Collect a stream of packets into a simple tree structure';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('level', {
    datatype: 'integer',
    "default": 0,
    description: 'Number of groups (from outermost) to skip collection of',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var after, before, collectGroups, currentLevel, d, data, forwardGroups, g, group, i, idx, j, k, l, len, len1, len2, len3, level, packet, stream;
    if (!input.hasStream('in')) {
      return;
    }
    if (input.attached('level').length && !input.hasData('level')) {
      return;
    }
    level = input.hasData('level') ? input.getData('level') : 0;
    stream = input.getStream('in');
    if (stream[0].type === 'openBracket' && stream[0].data === null) {
      before = stream.shift();
      after = stream.pop();
    }
    data = {};
    currentLevel = 0;
    collectGroups = [];
    forwardGroups = [];
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      if (packet.type === 'openBracket') {
        if (currentLevel < level) {
          forwardGroups.push(packet.data);
        } else {
          collectGroups.push(packet.data);
        }
        currentLevel += 1;
        continue;
      }
      if (packet.type === 'data') {
        if (!collectGroups.length) {
          continue;
        }
        d = data;
        for (idx = j = 0, len1 = collectGroups.length; j < len1; idx = ++j) {
          g = collectGroups[idx];
          if (idx < collectGroups.length - 1) {
            if (!d[g]) {
              d[g] = {};
            }
            d = d[g];
            continue;
          }
        }
        if (!d[g]) {
          d[g] = packet.data;
          continue;
        }
        if (!Array.isArray(d[g])) {
          d[g] = [d[g]];
        }
        d[g].push(packet.data);
        continue;
      }
      if (packet.type === 'closeBracket') {
        if (currentLevel < level) {

        } else {
          collectGroups.pop();
        }
        currentLevel -= 1;
        continue;
      }
    }
    if (!Object.keys(data).length) {
      output.done(new Error('No tree information was collected'));
      return;
    }
    for (k = 0, len2 = forwardGroups.length; k < len2; k++) {
      group = forwardGroups[k];
      output.send({
        out: new noflo.IP('openBracket', group)
      });
    }
    output.send({
      out: data
    });
    forwardGroups.reverse();
    for (l = 0, len3 = forwardGroups.length; l < len3; l++) {
      group = forwardGroups[l];
      output.send({
        out: new noflo.IP('closeBracket', group)
      });
    }
    output.done();
  });
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureScope;
  c = new noflo.Component;
  c.description = "Given a RegExp string, filter out groups that do not match and their children data packets/groups. Forward only the content of the matching group.";
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to filter groups from',
    addressable: true
  });
  c.inPorts.add('regexp', {
    datatype: 'string',
    description: 'Regexp use as a filter for IPs',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('group', {
    datatype: 'string'
  });
  c.outPorts.add('empty', {
    datatype: 'bang'
  });
  c.scopes = {};
  c.tearDown = function(callback) {
    c.scopes = {};
    return callback();
  };
  ensureScope = function(scope, idx) {
    if (!c.scopes[scope]) {
      c.scopes[scope] = {};
    }
    if (c.scopes[scope][idx]) {
      return c.scopes[scope][idx];
    }
    c.scopes[scope][idx] = {
      level: 0,
      hasContent: false,
      matchedLevel: null
    };
    return c.scopes[scope][idx];
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps, regexp;
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    if (!input.hasData('regexp')) {
      return;
    }
    regexp = new RegExp(input.getData('regexp'));
    indexesWithIps.forEach(function(idx) {
      var packet, scope;
      scope = ensureScope(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        if (scope.matchedLevel != null) {
          output.send({
            out: new noflo.IP('openBracket', packet.data)
          });
        }
        scope.level++;
        if ((scope.matchedLevel == null) && (packet.data.match(regexp) != null)) {
          scope.matchedLevel = scope.level;
          output.send({
            group: packet.data
          });
        }
        return;
      }
      if (packet.type === 'data') {
        if (scope.matchedLevel == null) {
          return;
        }
        scope.hasContent = true;
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        if (scope.matchedLevel === scope.level) {
          scope.matchedLevel = null;
        }
        if (scope.matchedLevel != null) {
          output.send({
            out: new noflo.IP('closeBracket', packet.data)
          });
        }
        scope.level--;
        if (scope.level) {
          return;
        }
        if (!scope.hasContent) {
          return output.send({
            empty: null
          });
        }
      }
    });
    return output.done();
  });
};


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureDepth;
  c = new noflo.Component;
  c.description = 'Forward incoming IPs and filter groups except the first one';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.depth = {};
  c.tearDown = function(callback) {
    c.depth = {};
    return callback();
  };
  ensureDepth = function(scope, idx) {
    if (!c.depth[scope]) {
      c.depth[scope] = {};
    }
    if (!c.depth[scope][idx]) {
      c.depth[scope][idx] = 0;
    }
    return c.depth[scope][idx];
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps;
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    indexesWithIps.forEach(function(idx) {
      var depth, packet;
      depth = ensureDepth(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        if (depth === 0) {
          output.send({
            out: new noflo.IP('openBracket', packet.data)
          });
        }
        c.depth[input.scope][idx]++;
        return;
      }
      if (packet.type === 'data') {
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        c.depth[input.scope][idx]--;
        if (c.depth[input.scope][idx] === 0) {
          output.send({
            out: new noflo.IP('closeBracket', packet.data)
          });
        }
      }
    });
    return output.done();
  });
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, uuid;

noflo = __webpack_require__(0);

uuid = __webpack_require__(187);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Wrap IPs into a random UUID generated group';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data, identifier;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    identifier = uuid.v4();
    output.send({
      out: new noflo.IP('openBracket', identifier)
    });
    output.send({
      out: data
    });
    output.send({
      out: new noflo.IP('closeBracket', identifier)
    });
    return output.done();
  });
};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(188);
var v4 = __webpack_require__(189);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(28);
var bytesToUuid = __webpack_require__(29);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(28);
var bytesToUuid = __webpack_require__(29);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Surround data IPs brackets';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward'
  });
  c.inPorts.add('group', {
    datatype: 'string',
    description: 'Groups to encapsulate incoming packets into',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    description: 'Forwarded IPs with encapsulating groups'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var bracket, brackets, data, group, i, j, len, len1, ref;
    if (!input.hasData('in', 'group')) {
      return;
    }
    ref = input.getData('in', 'group'), data = ref[0], group = ref[1];
    if (Array.isArray(group)) {
      brackets = group.slice(0);
    } else {
      brackets = group.split(':');
    }
    for (i = 0, len = brackets.length; i < len; i++) {
      bracket = brackets[i];
      output.send({
        out: new noflo.IP('openBracket', bracket)
      });
    }
    output.send({
      out: data
    });
    brackets.reverse();
    for (j = 0, len1 = brackets.length; j < len1; j++) {
      bracket = brackets[j];
      output.send({
        out: new noflo.IP('closeBracket', bracket)
      });
    }
    return output.done();
  });
};


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Group IPs by a key in their payload';
  c.inPorts.add('in', {
    datatype: 'object'
  });
  c.inPorts.add('key', {
    datatype: 'string',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var data, group, key, ref;
    if (!input.hasData('in', 'key')) {
      return;
    }
    ref = input.getData('in', 'key'), data = ref[0], key = ref[1];
    if (typeof data !== 'object') {
      output.done(new Error('Data is not an object'));
      return;
    }
    group = data[key];
    if (typeof data[key] !== 'string') {
      group = 'undefined';
    }
    if (typeof data[key] === 'boolean') {
      if (data[key]) {
        group = key;
      }
    }
    output.send({
      out: new noflo.IP('openBracket', group)
    });
    output.send({
      out: data
    });
    output.send({
      out: new noflo.IP('closeBracket', group)
    });
    return output.done();
  });
};


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Group packets by a group in order received';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('group', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var data, group, ref;
    if (!input.hasData('in', 'group')) {
      return;
    }
    ref = input.getData('in', 'group'), data = ref[0], group = ref[1];
    output.send({
      out: new noflo.IP('openBracket', group)
    });
    output.send({
      out: data
    });
    output.send({
      out: new noflo.IP('closeBracket', group)
    });
    return output.done();
  });
};


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureDepth;
  c = new noflo.Component;
  c.description = 'Forward incoming IPs and filter groups except the last one';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.depth = {};
  c.tearDown = function(callback) {
    c.depth = {};
    return callback();
  };
  ensureDepth = function(scope, idx) {
    if (!c.depth[scope]) {
      c.depth[scope] = {};
    }
    if (c.depth[scope][idx]) {
      return c.depth[scope][idx];
    }
    c.depth[scope][idx] = [];
    return c.depth[scope][idx];
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps;
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    indexesWithIps.forEach(function(idx) {
      var depth, lastLevel, packet;
      depth = ensureDepth(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        depth.push({
          group: packet.data,
          hasData: false
        });
        return;
      }
      if (packet.type === 'data') {
        if (depth.length) {
          lastLevel = depth[depth.length - 1];
          if (!lastLevel.hasData) {
            output.send({
              out: new noflo.IP('openBracket', lastLevel.group)
            });
            lastLevel.hasData = true;
          }
        }
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        lastLevel = depth.pop();
        if (!lastLevel.hasData) {
          return;
        }
        output.send({
          out: new noflo.IP('closeBracket', lastLevel.group)
        });
      }
    });
    return output.done();
  });
};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Replace groups based on static or regexp map';
  c.inPorts.add('map', {
    datatype: 'all',
    control: true
  });
  c.inPorts.add('regexp', {
    datatype: 'all',
    control: true
  });
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var exp, expression, group, map, mapData, mapParts, matched, packet, ref, regexp, regexpData, regexpParts, replacement;
    if (!input.has('in')) {
      return;
    }
    if (input.attached('map').length && !input.hasData('map')) {
      return;
    }
    if (input.attached('regexp').length && !input.hasData('regexp')) {
      return;
    }
    map = {};
    regexp = {};
    if (input.hasData('map')) {
      mapData = input.getData('map');
      if (typeof mapData === 'object') {
        map = mapData;
      } else {
        mapParts = mapData.split('=');
        map[mapParts[0]] = mapParts[1];
      }
    }
    if (input.hasData('regexp')) {
      regexpData = input.getData('regexp');
      if (typeof regexpData === 'object') {
        regexp = regexpData;
      } else {
        regexpParts = regexpData.split('=');
        regexp[regexpParts[0]] = regexpParts[1];
      }
    }
    packet = input.get('in');
    if (packet.type === 'data') {
      output.sendDone({
        out: packet
      });
      return;
    }
    if ((ref = packet.type) === 'openBracket' || ref === 'closeBracket') {
      if (typeof packet.data !== 'string') {
        output.sendDone({
          out: packet
        });
        return;
      }
      if (map[packet.data]) {
        output.sendDone({
          out: new noflo.IP(packet.type, map[packet.data])
        });
        return;
      }
      group = packet.data;
      for (expression in regexp) {
        replacement = regexp[expression];
        exp = new RegExp(expression);
        matched = exp.exec(group);
        if (!matched) {
          continue;
        }
        group = group.replace(exp, replacement);
      }
      output.sendDone({
        out: new noflo.IP(packet.type, group)
      });
      return;
    }
    return output.done();
  });
};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureDepth;
  c = new noflo.Component;
  c.description = 'Flatten group tree to a single level';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.depth = {};
  c.tearDown = function(callback) {
    c.depth = {};
    return callback();
  };
  ensureDepth = function(scope, idx) {
    if (!c.depth[scope]) {
      c.depth[scope] = {};
    }
    if (c.depth[scope][idx]) {
      return c.depth[scope][idx];
    }
    c.depth[scope][idx] = {
      groups: [],
      dataGroups: []
    };
    return c.depth[scope][idx];
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps;
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    indexesWithIps.forEach(function(idx) {
      var depth, packet;
      depth = ensureDepth(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        depth.groups.push(packet.data);
        return;
      }
      if (packet.type === 'data') {
        if (depth.groups.length && !depth.dataGroups.length) {
          depth.dataGroups = depth.groups.slice(0);
          output.send({
            out: new noflo.IP('openBracket', depth.dataGroups.join(':'))
          });
        }
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        if (depth.groups.join(':') === depth.dataGroups.join(':')) {
          output.send({
            out: new noflo.IP('closeBracket', depth.dataGroups.join(':'))
          });
          depth.dataGroups = [];
        }
        depth.groups.pop();
      }
    });
    return output.done();
  });
};


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureMatches;
  c = new noflo.Component;
  c.description = "specify a regexp string, use the first match as the key of an object containing the data";
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.inPorts.add('regexp', {
    datatype: 'string',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  c.matches = {};
  c.tearDown = function(callback) {
    c.matches = {};
    return callback();
  };
  ensureMatches = function(scope, idx) {
    if (!c.matches[scope]) {
      c.matches[scope] = {};
    }
    if (!c.matches[scope][idx]) {
      c.matches[scope][idx] = null;
    }
    return c.matches[scope][idx];
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps, regexp;
    if (!input.hasData('regexp')) {
      return;
    }
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    regexp = new RegExp(input.getData('regexp'));
    indexesWithIps.forEach(function(idx) {
      var d, data, matches, packet;
      matches = ensureMatches(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        if (typeof packet.data === 'string' && packet.data.match(regexp)) {
          c.matches[input.scope][idx] = packet.data.match(regexp)[0];
        }
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'data') {
        if (matches != null) {
          d = packet.data;
          data = {};
          data[matches] = d;
          output.send({
            out: data
          });
          return;
        }
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        c.matches[input.scope][idx] = null;
        output.send({
          out: packet
        });
      }
    });
    return output.done();
  });
};


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureGroups;
  c = new noflo.Component;
  c.description = 'Send the groups surrounding a packet';
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('group', {
    datatype: 'string'
  });
  c.groups = {};
  ensureGroups = function(scope, idx) {
    if (!c.groups[scope]) {
      c.groups[scope] = {};
    }
    if (!c.groups[scope][idx]) {
      c.groups[scope][idx] = [];
    }
    return c.groups[scope][idx];
  };
  c.tearDown = function(callback) {
    c.groups = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps;
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    indexesWithIps.forEach(function(idx) {
      var groups, packet;
      groups = ensureGroups(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        groups.push(packet.data);
        output.send({
          out: packet,
          group: packet
        });
        return;
      }
      if (packet.type === 'data') {
        output.send({
          group: groups.join(':')
        });
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        groups.pop();
        output.send({
          out: packet,
          group: packet
        });
      }
    });
    return output.done();
  });
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ensureGroups;
  c = new noflo.Component;
  c.description = 'Send the groups surrounding a packet';
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.inPorts.add('strip', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.inPorts.add('threshold', {
    datatype: 'int',
    control: true,
    "default": 2e308
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('group', {
    datatype: 'string'
  });
  c.groups = {};
  ensureGroups = function(scope, idx) {
    if (!c.groups[scope]) {
      c.groups[scope] = {};
    }
    if (!c.groups[scope][idx]) {
      c.groups[scope][idx] = [];
    }
    return c.groups[scope][idx];
  };
  c.tearDown = function(callback) {
    c.groups = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithIps, strip, threshold;
    indexesWithIps = input.attached('in').filter(function(idx) {
      return input.has(['in', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    if (input.attached('strip').length && !input.hasData('strip')) {
      return;
    }
    if (input.attached('threshold').length && !input.hasData('threshold')) {
      return;
    }
    if (input.hasData('strip')) {
      strip = String(input.getData('strip')) === 'true';
    } else {
      strip = false;
    }
    if (input.hasData('threshold')) {
      threshold = parseInt(input.getData('threshold'));
    } else {
      threshold = 2e308;
    }
    indexesWithIps.forEach(function(idx) {
      var groups, packet;
      groups = ensureGroups(input.scope, idx);
      packet = input.get(['in', idx]);
      if (packet.type === 'openBracket') {
        groups.push(packet.data);
        if (groups.length > threshold) {
          output.send({
            out: packet
          });
          return;
        }
        output.send({
          group: packet.data
        });
        if (strip) {
          return;
        }
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'data') {
        output.send({
          out: packet
        });
        return;
      }
      if (packet.type === 'closeBracket') {
        if (groups.length > threshold || !strip) {
          output.send({
            out: packet
          });
        }
        groups.pop();
      }
    });
    return output.done();
  });
};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Forward all the data IPs, strip all groups, and replace them with groups from another connection";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('group', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.groups = {};
  c.tearDown = function(callback) {
    c.groups = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var data, group, groups, i, j, len, len1, ref;
    if (input.hasData('group')) {
      if (!c.groups[input.scope]) {
        c.groups[input.scope] = [];
      }
      c.groups[input.scope].push(input.getData('group'));
      output.done();
      return;
    }
    if (!input.hasData('in')) {
      return;
    }
    groups = [];
    if ((ref = c.groups[input.scope]) != null ? ref.length : void 0) {
      groups = c.groups[input.scope].slice(0);
    }
    data = input.getData('in');
    for (i = 0, len = groups.length; i < len; i++) {
      group = groups[i];
      output.send({
        out: new noflo.IP('openBracket', group)
      });
    }
    output.send({
      out: data
    });
    groups.reverse();
    for (j = 0, len1 = groups.length; j < len1; j++) {
      group = groups[j];
      output.send({
        out: new noflo.IP('closeBracket', group)
      });
    }
    return output.done();
  });
};


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Remove groups matching a string or a regex string, or all if no regexp given";
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'IPs to forward'
  });
  c.inPorts.add('regexp', {
    datatype: 'string',
    description: 'Regexp used to remove groups',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var packet, ref, regexp;
    if (!input.has('in')) {
      return;
    }
    if (input.attached('regexp').length && !input.hasData('regexp')) {
      return;
    }
    regexp = null;
    if (input.hasData('regexp')) {
      regexp = new RegExp(input.getData('regexp'));
    }
    packet = input.get('in');
    if ((ref = packet.type) === 'openBracket' || ref === 'closeBracket') {
      if (!regexp) {
        output.done();
        return;
      }
      if (typeof packet.data === 'string' && packet.data.match(regexp)) {
        output.done();
        return;
      }
      output.sendDone({
        out: packet
      });
      return;
    }
    if (packet.type === 'data') {
      output.sendDone({
        out: packet
      });
    }
  });
};


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var getIdentifier, noflo;

noflo = __webpack_require__(0);

getIdentifier = function(groups) {
  if (groups.length) {
    return groups.join(':');
  }
  return 'ungrouped';
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Send packet held in "data" when receiving matching set of groups in "in"';
  c.icon = 'share-square';
  c.inPorts.add('in', {
    datatype: 'bang',
    description: 'Signal to release IPs associated with the emitted group'
  });
  c.inPorts.add('data', {
    datatype: 'all',
    description: 'IP to store by group',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    description: 'IP associated with a group received on the in port'
  });
  c.stored = {};
  c.released = {};
  c.groups = [];
  c.tearDown = function(callback) {
    c.stored = {};
    c.released = {};
    c.groups = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var brackets, i, indexesWithIps, len, packet, release, stream;
    release = function(groups) {
      var closes, group, i, identifier, j, len, len1;
      identifier = getIdentifier(groups);
      if (!c.released[input.scope]) {
        c.released[input.scope] = {};
      }
      c.released[input.scope][identifier] = true;
      if (!c.stored[input.scope]) {
        return;
      }
      if (!c.stored[input.scope][identifier]) {
        return;
      }
      for (i = 0, len = groups.length; i < len; i++) {
        group = groups[i];
        output.send({
          out: new noflo.IP('openBracket', group)
        });
      }
      output.send({
        out: c.stored[input.scope][identifier]
      });
      closes = groups.slice(0);
      closes.reverse();
      for (j = 0, len1 = closes.length; j < len1; j++) {
        group = closes[j];
        output.send({
          out: new noflo.IP('closeBracket', group)
        });
      }
      c.released[input.scope][identifier] = false;
    };
    if (input.hasStream('in')) {
      stream = input.getStream('in');
      brackets = [];
      for (i = 0, len = stream.length; i < len; i++) {
        packet = stream[i];
        if (packet.type === 'openBracket') {
          brackets.push(packet.data);
          continue;
        }
        if (packet.type === 'data') {
          release(brackets);
          continue;
        }
        if (packet.type === 'closeBracket') {
          brackets.pop();
          continue;
        }
      }
      output.done();
      return;
    }
    indexesWithIps = input.attached('data').filter(function(idx) {
      return input.has(['data', idx]);
    });
    if (!indexesWithIps.length) {
      return;
    }
    indexesWithIps.forEach(function(idx) {
      var identifier, ref;
      if (!c.groups[input.scope]) {
        c.groups[input.scope] = {};
      }
      if (!c.groups[input.scope][idx]) {
        c.groups[input.scope][idx] = [];
      }
      packet = input.get(['data', idx]);
      if (packet.type === 'openBracket') {
        c.groups[input.scope][idx].push(packet.data);
        return;
      }
      if (packet.type === 'data') {
        identifier = getIdentifier(c.groups[input.scope][idx]);
        if (!c.stored[input.scope]) {
          c.stored[input.scope] = {};
        }
        c.stored[input.scope][identifier] = packet;
        if ((ref = c.released[input.scope]) != null ? ref[identifier] : void 0) {
          release(c.groups[input.scope][idx]);
        }
        return;
      }
      if (packet.type === 'closeBracket') {
        c.groups[input.scope][idx].pop();
      }
    });
    return output.done();
  });
};


/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = {
	"processes": {
		"Regexp": {
			"component": "core/Split"
		},
		"Objectify": {
			"component": "groups/Objectify"
		},
		"Remove": {
			"component": "groups/RemoveGroups"
		}
	},
	"connections": [
		{
			"src": {
				"process": "Regexp",
				"port": "out"
			},
			"tgt": {
				"process": "Objectify",
				"port": "regexp"
			}
		},
		{
			"src": {
				"process": "Objectify",
				"port": "out"
			},
			"tgt": {
				"process": "Remove",
				"port": "in"
			}
		},
		{
			"src": {
				"process": "Regexp",
				"port": "out"
			},
			"tgt": {
				"process": "Remove",
				"port": "regexp"
			}
		}
	],
	"inports": {
		"in": {
			"process": "Objectify",
			"port": "in"
		},
		"regexp": {
			"process": "Regexp",
			"port": "in"
		}
	},
	"outports": {
		"out": {
			"process": "Remove",
			"port": "out"
		}
	},
	"caseSensitive": false
};

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, ctx, stopStream, stream;
  c = new noflo.Component;
  c.description = 'initialize camera and/or microphone';
  c.icon = 'video-camera';
  c.inPorts.add('start', {
    datatype: 'bang'
  });
  c.inPorts.add('stop', {
    datatype: 'bang'
  });
  c.inPorts.add('video', {
    datatype: 'boolean',
    control: true,
    "default": true
  });
  c.inPorts.add('audio', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.outPorts.add('stream', {
    datatype: 'object'
  });
  c.outPorts.add('url', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  stream = null;
  ctx = null;
  stopStream = function() {
    if (stream && stream.stop) {
      stream.stop();
      stream = null;
    }
    if (ctx) {
      ctx.deactivate();
      return ctx = null;
    }
  };
  c.tearDown = function(callback) {
    stopStream();
    return callback();
  };
  return c.process(function(input, output, context) {
    var audio, video;
    if (input.hasData('stop')) {
      input.getData('stop');
      stopStream();
      output.done();
      return;
    }
    if (!input.hasData('start')) {
      return;
    }
    input.getData('start');
    stopStream();
    if (!(typeof navigator !== "undefined" && navigator !== null ? navigator.mediaDevices : void 0)) {
      output.done(new Error('navigator.mediaDevices not available.'));
      return;
    }
    if (!(typeof navigator !== "undefined" && navigator !== null ? navigator.mediaDevices.getUserMedia : void 0)) {
      output.done(new Error('navigator.mediaDevices.getUserMedia not available.'));
      return;
    }
    video = input.hasData('video') ? input.getData('video') : true;
    audio = input.hasData('audio') ? input.getData('audio') : false;
    return navigator.mediaDevices.getUserMedia({
      video: video,
      audio: audio
    }).then(function(mediaStream) {
      stream = mediaStream;
      ctx = context;
      if (window.URL == null) {
        window.URL = window.webkitURL || window.msURL || window.oURL || null;
      }
      if (window.URL.createObjectURL) {
        output.send({
          url: window.URL.createObjectURL(stream)
        });
      } else {
        output.send({
          url: stream
        });
      }
      return output.send({
        stream: stream
      });
    }, function(err) {
      return output.done(err);
    });
  });
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Adjust brightness level of a given image.';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('level', {
    datatype: 'number',
    control: true,
    "default": 10.0
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas']
  };
  return c.process(function(input, output) {
    var canvas, ctx, data, height, i, imageData, j, level, ref, width;
    if (!input.hasData('canvas')) {
      return;
    }
    if (input.attached('level').length && !input.hasData('level')) {
      return;
    }
    level = 10.0;
    if (input.hasData('level')) {
      level = input.getData('level');
    }
    canvas = input.getData('canvas');
    ctx = canvas.getContext('2d');
    width = canvas.width;
    height = canvas.height;
    imageData = ctx.getImageData(0, 0, width, height);
    data = imageData.data;
    level = Math.floor(255 * (level / 100));
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      data[i] += level;
      data[i + 1] += level;
      data[i + 2] += level;
    }
    ctx.putImageData(imageData, 0, 0);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Adjust contrast level of a given image.';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('level', {
    datatype: 'number',
    control: true,
    "default": 1.0
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas']
  };
  return c.process(function(input, output) {
    var canvas, ctx, data, height, i, imageData, j, level, ref, width;
    if (!input.hasData('canvas')) {
      return;
    }
    if (input.attached('level').length && !input.hasData('level')) {
      return;
    }
    level = 1.0;
    if (input.hasData('level')) {
      level = input.getData('level');
    }
    canvas = input.getData('canvas');
    ctx = canvas.getContext('2d');
    width = canvas.width;
    height = canvas.height;
    imageData = ctx.getImageData(0, 0, width, height);
    data = imageData.data;
    level = (parseFloat(level) || 0) + 1.0;
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      data[i] = ((((data[i] / 255) - 0.5) * level) + 0.5) * 255;
      data[i + 1] = ((((data[i + 1] / 255) - 0.5) * level) + 0.5) * 255;
      data[i + 2] = ((((data[i + 2] / 255) - 0.5) * level) + 0.5) * 255;
    }
    ctx.putImageData(imageData, 0, 0);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Adjust saturation level of a given image.';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('level', {
    datatype: 'number',
    control: true,
    "default": 100.0
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas']
  };
  return c.process(function(input, output) {
    var canvas, ctx, data, height, i, imageData, j, level, max, ref, width;
    if (!input.hasData('canvas')) {
      return;
    }
    if (input.attached('level').length && !input.hasData('level')) {
      return;
    }
    level = 100.0;
    if (input.hasData('level')) {
      level = input.getData('level');
    }
    canvas = input.getData('canvas');
    ctx = canvas.getContext('2d');
    width = canvas.width;
    height = canvas.height;
    imageData = ctx.getImageData(0, 0, width, height);
    data = imageData.data;
    level *= -0.01;
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      max = Math.max(data[i], data[i + 1], data[i + 2]);
      if (data[i] !== max) {
        data[i] += (max - data[i]) * level;
      }
      if (data[i + 1] !== max) {
        data[i + 1] += (max - data[i + 1]) * level;
      }
      if (data[i + 2] !== max) {
        data[i + 2] += (max - data[i + 2]) * level;
      }
    }
    ctx.putImageData(imageData, 0, 0);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Apply a RGBA adjustment curve to a given image.';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('curve', {
    datatype: 'object'
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas']
  };
  return c.process(function(input, output) {
    var canvas, ctx, curve, data, height, i, imageData, j, ref, ref1, width;
    if (!input.hasData('canvas', 'curve')) {
      return;
    }
    ref = input.getData('canvas', 'curve'), canvas = ref[0], curve = ref[1];
    width = canvas.width;
    height = canvas.height;
    ctx = canvas.getContext('2d');
    imageData = ctx.getImageData(0, 0, width, height);
    data = imageData.data;
    for (i = j = 0, ref1 = data.length; j < ref1; i = j += 4) {
      data[i] = curve.r[data[i]];
      data[i + 1] = curve.g[data[i + 1]];
      data[i + 2] = curve.b[data[i + 2]];
      data[i] = curve.a[data[i]];
      data[i + 1] = curve.a[data[i + 1]];
      data[i + 2] = curve.a[data[i + 2]];
    }
    ctx.putImageData(imageData, 0, 0);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Apply a vignette effect to a given image.';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas']
  };
  return c.process(function(input, output) {
    var canvas, ctx, data, gradient, height, imageData, outerRadius, width;
    if (!input.hasData('canvas')) {
      return;
    }
    canvas = input.getData('canvas');
    ctx = canvas.getContext('2d');
    width = canvas.width;
    height = canvas.height;
    imageData = ctx.getImageData(0, 0, width, height);
    data = imageData.data;
    outerRadius = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));
    ctx.globalCompositeOperation = 'source-over';
    gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, outerRadius);
    gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
    gradient.addColorStop(0.65, 'rgba(0, 0, 0, 0)');
    gradient.addColorStop(1, 'rgba(0, 0, 0, 0.9)');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    ctx.globalCompositeOperation = 'lighter';
    gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, outerRadius);
    gradient.addColorStop(0, 'rgba(255, 255, 255, 0.1)');
    gradient.addColorStop(0.65, 'rgba(255, 255, 255, 0)');
    gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var gcd, noflo;

noflo = __webpack_require__(0);

gcd = function(a, b) {
  if (b === 0) {
    return a;
  } else {
    return gcd(b, a % b);
  }
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'file-image-o';
  c.description = 'Calculate aspect ratio from image dimensions';
  c.inPorts.add('dimensions', {
    datatype: 'object'
  });
  c.outPorts.add('ratio', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'dimensions',
    out: 'ratio',
    forwardGroups: true,
    async: true
  }, function(packet, groups, out, callback) {
    var denominator, divisor, numerator;
    if (!((packet != null ? packet.width : void 0) > 0)) {
      return callback(new Error("Dimension is missing width"));
    }
    if (!((packet != null ? packet.height : void 0) > 0)) {
      return callback(new Error("Dimension is missing height"));
    }
    divisor = gcd(packet.width, packet.height);
    numerator = packet.width / divisor;
    denominator = packet.height / divisor;
    out.send({
      ratio: numerator + ":" + denominator,
      aspect: numerator / denominator
    });
    return callback();
  });
};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Crop the rectangle out of a given canvas';
  c.icon = 'file-image-o';
  c.inPorts = new noflo.InPorts({
    canvas: {
      datatype: 'object',
      required: true
    },
    rectangle: {
      datatype: 'object',
      description: 'A rectangle to crop out',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    canvas: {
      datatype: 'object'
    },
    error: {
      datatype: 'object'
    }
  });
  return noflo.helpers.WirePattern(c, {
    "in": ['canvas', 'rectangle'],
    out: 'canvas',
    forwardGroups: true,
    async: true
  }, function(input, groups, out, callback) {
    var Canvas, height, newCanvas, newCtx, originalCanvas, ref, width, x, y;
    if (input.rectangle == null) {
      return callback(new Error("Error when trying to crop the canvas given a rectangle. The rectangle is missing."));
    }
    if (input.canvas == null) {
      return callback(new Error("Error when trying to crop the canvas given a rectangle. The canvas is missing."));
    }
    if (!((input.rectangle.x != null) && (input.rectangle.y != null) && (input.rectangle.width != null) && (input.rectangle.height != null))) {
      return callback(new Error("Error when trying to crop the canvas given a rectangle. Rectangle is missing x, y, width or height"));
    }
    if (!(input.rectangle.width > 0 && input.rectangle.height > 0)) {
      return callback(new Error("Error when trying to crop the canvas given a rectangle. Rectangle width or height is not a positive value"));
    }
    if (!(input.canvas.width > 0 && input.canvas.height > 0)) {
      return callback(new Error("Error when trying to crop the canvas given a rectangle. Canvas is missing width or height"));
    }
    originalCanvas = input.canvas;
    ref = input.rectangle, x = ref.x, y = ref.y, width = ref.width, height = ref.height;
    if (width > originalCanvas.width) {
      width = Math.abs(originalCanvas.width - x);
    }
    if (height > originalCanvas.height) {
      height = Math.abs(originalCanvas.height - y);
    }
    if (x < 0) {
      x = 0;
    }
    if (y < 0) {
      y = 0;
    }
    if (noflo.isBrowser()) {
      newCanvas = document.createElement('canvas');
      newCanvas.width = width;
      newCanvas.height = height;
    } else {
      Canvas = __webpack_require__(14).canvas;
      newCanvas = new Canvas(width, height);
    }
    newCtx = newCanvas.getContext('2d');
    newCtx.drawImage(originalCanvas, x, y, width, height, 0, 0, width, height);
    if (originalCanvas.originalWidth != null) {
      newCanvas.originalWidth = originalCanvas.originalWidth;
    }
    if (originalCanvas.originalHeight != null) {
      newCanvas.originalHeight = originalCanvas.originalHeight;
    }
    out.send(newCanvas);
    callback();
  });
};


/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = require("canvas");

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'file-image-o';
  c.description = 'Extract global lightness of a given image. Light images will return values greater than zero.';
  c.outPorts.add('lightness', {
    datatype: 'number'
  });
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  return noflo.helpers.WirePattern(c, {
    "in": ['canvas'],
    out: ['lightness'],
    forwardGroups: true,
    async: true
  }, function(payload, groups, out, callback) {
    var b, canvas, ctx, darkPixels, data, g, i, imageArea, imageData, j, lightPixels, lightness, max, r, ref, threshold;
    canvas = payload;
    ctx = canvas.getContext('2d');
    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    data = imageData.data;
    lightPixels = 0;
    darkPixels = 0;
    threshold = 127;
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      r = data[i];
      g = data[i + 1];
      b = data[i + 2];
      max = Math.max(Math.max(r, g), b);
      if (max >= threshold) {
        lightPixels += 1;
      } else {
        darkPixels += 1;
      }
    }
    imageArea = canvas.width * canvas.height;
    lightness = (lightPixels - darkPixels) / imageArea;
    out.send(lightness);
    callback();
  });
};


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var calculateStartingPoints, findIndexForPoint, findRegions, growRectangle, noflo, spatialSortedIndices;

noflo = __webpack_require__(0);

calculateStartingPoints = function(bounds, segments) {
  var j, k, points, ref, ref1, sx, sy, x, y;
  points = [];
  for (sx = j = 1, ref = segments.x; 1 <= ref ? j <= ref : j >= ref; sx = 1 <= ref ? ++j : --j) {
    for (sy = k = 1, ref1 = segments.y; 1 <= ref1 ? k <= ref1 : k >= ref1; sy = 1 <= ref1 ? ++k : --k) {
      x = bounds.w * (sx / (segments.x + 1));
      y = bounds.h * (sy / (segments.y + 1));
      points.push({
        x: x,
        y: y
      });
    }
  }
  return points;
};

spatialSortedIndices = function(corners) {
  var indices, j, k, ref, ref1, results, results1, sortByX, sortByY;
  indices = {
    x: (function() {
      results = [];
      for (var j = 0, ref = corners.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this),
    y: (function() {
      results1 = [];
      for (var k = 0, ref1 = corners.length; 0 <= ref1 ? k < ref1 : k > ref1; 0 <= ref1 ? k++ : k--){ results1.push(k); }
      return results1;
    }).apply(this)
  };
  sortByX = function(a, b) {
    if (corners[a].x > corners[b].x) {
      return 1;
    }
    if (corners[a].x < corners[b].x) {
      return -1;
    }
    return 0;
  };
  sortByY = function(a, b) {
    if (corners[a].y > corners[b].y) {
      return 1;
    }
    if (corners[a].y < corners[b].y) {
      return -1;
    }
    return 0;
  };
  indices.x.sort(sortByX);
  indices.y.sort(sortByY);
  return indices;
};

findIndexForPoint = function(corners, indices, point) {
  var findIndexAxis, r;
  findIndexAxis = function(axis) {
    var i, idx, j, length, ref;
    length = indices[axis].length;
    if (point[axis] > corners[indices[axis][length - 1]][axis]) {
      return length;
    }
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      idx = indices[axis][i];
      if (corners[idx][axis] > point[axis]) {
        return i - 1;
      }
    }
    return -1;
  };
  r = {
    x: findIndexAxis('x'),
    y: findIndexAxis('y')
  };
  return r;
};

growRectangle = function(corners, indices, point, bounds, threshold) {
  var coordinateForIndex, expand, i, pointInRect, pointIndex, r, x, y;
  if (point.x > bounds.w || point.y > point.h) {
    throw new Error("Initial point is outside bounds");
  }
  pointIndex = findIndexForPoint(corners, indices, point);
  coordinateForIndex = function(axis, index) {
    var idx, p;
    if (index < 0) {
      return {
        x: 0,
        y: 0
      };
    }
    if (index >= indices[axis].length) {
      return {
        x: bounds.w,
        y: bounds.h
      };
    }
    idx = indices[axis][index];
    p = corners[idx];
    return p;
  };
  pointInRect = function(p, rect) {
    var in_x, in_y;
    in_x = p.x >= rect.x0 && p.x <= rect.x1;
    in_y = p.y >= rect.y0 && p.y <= rect.y1;
    return in_x && in_y;
  };
  r = {
    x0: point.x,
    x1: point.x,
    y0: point.y,
    y1: point.y
  };
  i = {
    x: pointIndex.x,
    y: pointIndex.y
  };
  while (true) {
    i.x = i.x + 1;
    i.y = i.y + 1;
    x = coordinateForIndex('x', i.x);
    y = coordinateForIndex('y', i.y);
    expand = false;
    if (!pointInRect(x, r)) {
      r.x1 = x.x;
      expand = true;
    }
    if (!pointInRect(y, r)) {
      r.y1 = y.y;
      expand = true;
    }
    if (!expand) {
      break;
    }
    if (i.x > indices.x.length) {
      break;
    }
    if (i.y > indices.y.length) {
      break;
    }
  }

  /*
   * Expand lower right
  i = {x: pointIndex.x, y: pointIndex.y}
  while true
    i.x=i.x-1
    x = coordinateForIndex 'x', i.x
    expand = false
    console.log i.x, 0, x
    if not pointInRect x, r
      r.x0 = x.x
      expand = true
    i.y=i.y-1
    y = coordinateForIndex 'y', i.y
    console.log i.y, 0, y
    if not pointInRect y, r
      r.y0 = y.y
      expand = true
    break if not expand
    break if i.x < 0
    break if i.y < 0
   */
  r = {
    x: r.x0,
    y: r.y0,
    width: r.x1 - r.x0,
    height: r.y1 - r.y0
  };
  return r;
};

findRegions = function(corners, bounds, seg) {
  var indices, j, len, point, ref, region, regions, segments, sortByArea, threshold;
  if (bounds.w > bounds.h) {
    segments = {
      x: seg,
      y: Math.floor(seg * (bounds.w / bounds.h))
    };
  } else {
    segments = {
      x: Math.floor(seg * (bounds.h / bounds.w)),
      y: seg
    };
  }
  threshold = 1;
  indices = spatialSortedIndices(corners);
  regions = [];
  ref = calculateStartingPoints(bounds, segments);
  for (j = 0, len = ref.length; j < len; j++) {
    point = ref[j];
    region = growRectangle(corners, indices, point, bounds, threshold);
    regions.push(region);
  }
  sortByArea = function(a, b) {
    var A, B;
    A = a.width * a.height;
    B = b.width * b.height;
    if (A > B) {
      return 1;
    }
    if (A < B) {
      return -1;
    }
    return 0;
  };
  regions.sort(sortByArea);
  return regions;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Extract feature corners of image (method: YAPE)';
  c.icon = 'file-image-o';
  c.inPorts.add('corners', {
    datatype: 'array'
  });
  c.inPorts.add('width', {
    datatype: 'int',
    control: true,
    "default": 0
  });
  c.inPorts.add('height', {
    datatype: 'int',
    control: true,
    "default": 0
  });
  c.inPorts.add('segments', {
    datatype: 'int',
    control: true,
    "default": 4
  });
  c.outPorts.add('areas', {
    datatype: 'array'
  });
  c.outPorts.add('corners', {
    datatype: 'array'
  });
  c.forwardBrackets = {
    corners: ['areas', 'corners']
  };
  return c.process(function(input, output) {
    var b, corners, height, regions, s, segments, width;
    if (!input.hasData('corners')) {
      return;
    }
    if (input.attached('width').length && !input.hasData('width')) {
      return;
    }
    if (input.attached('height').length && !input.hasData('height')) {
      return;
    }
    if (input.attached('segments').length && !input.hasData('segments')) {
      return;
    }
    width = 0;
    if (input.hasData('width')) {
      width = parseInt(input.getData('width'));
    }
    height = 0;
    if (input.hasData('height')) {
      height = parseInt(input.getData('height'));
    }
    segments = 4;
    if (input.hasData('segments')) {
      segments = parseInt(input.getData('segments'));
    }
    corners = input.getData('corners');
    b = {
      w: width,
      h: height
    };
    s = segments;
    regions = findRegions(corners, b, s);
    output.send({
      areas: regions,
      corners: corners
    });
    output.done();
  });
};

exports.calculateStartingPoints = calculateStartingPoints;

exports.spatialSortedIndices = spatialSortedIndices;

exports.findIndexForPoint = findIndexForPoint;

exports.growRectangle = growRectangle;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var allOnes, area, compute, fontAreas, noflo, pointInPolygon, polygonInPolygon, validGrid;

noflo = __webpack_require__(0);

validGrid = [];

fontAreas = {
  large: 1280,
  medium: 384,
  small: 228
};

area = function(x, y, xx, yy) {
  return (xx - x) * (yy - y);
};

allOnes = function(x, y, xx, yy) {
  var i, j, k, l, ref, ref1, ref2, ref3;
  for (i = k = ref = x, ref1 = xx; ref <= ref1 ? k < ref1 : k > ref1; i = ref <= ref1 ? ++k : --k) {
    for (j = l = ref2 = y, ref3 = yy; ref2 <= ref3 ? l < ref3 : l > ref3; j = ref2 <= ref3 ? ++l : --l) {
      if (validGrid[i][j] === 0) {
        return false;
      }
    }
  }
  return true;
};

pointInPolygon = function(point, polygon) {
  var hit, i, intersect, j, x, xi, xj, y, yi, yj;
  x = point[0];
  y = point[1];
  hit = false;
  i = 0;
  j = polygon.length - 1;
  while (i < polygon.length) {
    xi = polygon[i][0];
    yi = polygon[i][1];
    xj = polygon[j][0];
    yj = polygon[j][1];
    intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
    if (intersect) {
      hit = !hit;
    }
    j = i++;
  }
  return hit;
};

polygonInPolygon = function(polygon, otherPolygon) {
  var i, k, points, ref, stepX, stepY, x, y;
  x = polygon[0];
  y = polygon[1];
  stepX = polygon[2];
  stepY = polygon[3];
  points = [[x, y], [x + stepX, y], [x, y + stepY], [x + stepX, y + stepY]];
  for (i = k = 0, ref = points.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    if (pointInPolygon(points[i], otherPolygon) === true) {
      return true;
    }
  }
  return false;
};

compute = function(canvas, polygon, threshold, max) {
  var height, i, j, k, l, m, n, o, pi, pivot, pj, r, realArea, rectangles, ref, ref1, ref2, ref3, result, stepI, stepJ, validArea, validRect, validRects, width;
  width = canvas.width, height = canvas.height;
  n = 30;
  stepI = Math.ceil(width / n);
  stepJ = Math.ceil(height / n);
  rectangles = [];
  for (i = k = 0, ref = n; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    validGrid[i] = [];
    for (j = l = 0, ref1 = n; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
      validGrid[i][j] = 0;
    }
  }
  for (i = m = 0, ref2 = n; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
    for (j = o = 0, ref3 = n; 0 <= ref3 ? o < ref3 : o > ref3; j = 0 <= ref3 ? ++o : --o) {
      if (polygonInPolygon([i * stepI, j * stepJ, stepI, stepJ], polygon) === false) {
        validGrid[i][j] = 1;
      }
    }
  }
  validRects = [];
  pi = 0;
  while (pi < n) {
    pj = 0;
    while (pj < n) {
      pivot = [pi, pj];
      i = pivot[0];
      while (i < n) {
        j = pivot[1];
        while (j < n) {
          realArea = area(pivot[0] * stepI, pivot[1] * stepJ, i * stepI, j * stepJ);
          if ((allOnes(pivot[0], pivot[1], i, j) === true) && (realArea > threshold)) {
            validRects.push({
              x: pivot[0],
              y: pivot[1],
              width: i - pivot[0],
              height: j - pivot[1],
              area: realArea
            });
          }
          j += 1;
        }
        i += 1;
      }
      pj += 1;
    }
    pi += 1;
  }
  if (validRects.length === 0) {
    return [];
  }
  validRects.sort(function(a, b) {
    var keyA, keyB;
    keyA = a.area;
    keyB = b.area;
    if (keyA > keyB) {
      return -1;
    }
    if (keyA < keyB) {
      return 1;
    }
    return 0;
  });
  result = [];
  i = 0;
  while ((i < max) && (i < validRects.length)) {
    validRect = validRects[i];
    validArea = validRect.area;
    r = {
      x: validRect.x * stepI,
      y: validRect.y * stepJ,
      width: validRect.width * stepI,
      height: validRect.height * stepJ,
      text: {
        large: Math.round(validArea / fontAreas.large),
        medium: Math.round(validArea / fontAreas.medium),
        small: Math.round(validArea / fontAreas.small)
      }
    };
    result.push(r);
    i += 1;
  }
  return result;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'file-image-o';
  c.description = 'Find bounding rectangles of regions outside of the given polygon.';
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('polygon', {
    datatype: 'array'
  });
  c.inPorts.add('threshold', {
    datatype: 'number',
    required: true
  });
  c.inPorts.add('max', {
    datatype: 'number',
    required: true
  });
  return noflo.helpers.WirePattern(c, {
    "in": ['canvas', 'polygon'],
    params: ['threshold', 'max'],
    out: 'out',
    forwardGroups: true,
    async: true
  }, function(payload, groups, out, callback) {
    var canvas, max, polygon, ref, threshold, validRects;
    canvas = payload.canvas, polygon = payload.polygon;
    ref = c.params, threshold = ref.threshold, max = ref.max;
    validRects = compute(canvas, polygon, threshold, max);
    out.send(validRects);
    callback();
  });
};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var average, diffBetweenNeighbourPixels, isBorder, isHomogeneous, noflo;

noflo = __webpack_require__(0);

diffBetweenNeighbourPixels = function(array) {
  var count, diff, element, j, len, max, prev;
  count = 0;
  max = 0;
  prev = array[0];
  for (j = 0, len = array.length; j < len; j++) {
    element = array[j];
    diff = Math.abs(element - prev);
    count += diff;
    prev = element;
    if (diff > max) {
      max = diff;
    }
  }
  return {
    mean: count / array.length,
    max: max
  };
};

average = function(array) {
  var sum;
  if (array.length === 0) {
    return 0;
  }
  sum = array.reduce(function(s, i) {
    return s += i;
  });
  return sum / array.length;
};

isHomogeneous = function(array, threshold) {
  var diff;
  diff = diffBetweenNeighbourPixels(array);
  if (diff.mean <= threshold.mean && diff.max <= threshold.max) {
    return true;
  } else {
    return false;
  }
};

isBorder = function(array, prev, threshold) {
  var avg;
  avg = Math.abs(average(array) - average(prev));
  if (avg > threshold.avg) {
    return true;
  } else {
    return false;
  }
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Extract a bounding box with top and bottom borders removed (according to a certain threshold)';
  c.icon = 'file-image-o';
  c.inPorts = new noflo.InPorts({
    canvas: {
      datatype: 'object'
    },
    mean: {
      datatype: 'number',
      description: 'Mean difference between neighbours at same row'
    },
    max: {
      datatype: 'number',
      description: 'Maximal difference between neighbours at same row'
    },
    avg: {
      datatype: 'number',
      description: 'Average difference between columns\' neighbours'
    }
  });
  c.outPorts = new noflo.OutPorts({
    rectangle: {
      datatype: 'object'
    },
    error: {
      datatype: 'object'
    }
  });
  noflo.helpers.WirePattern(c, {
    "in": 'canvas',
    params: ['mean', 'max', 'avg'],
    out: 'rectangle',
    forwardGroups: true,
    async: true
  }, function(canvas, groups, out, callback) {
    var b, bbox, col, column, conversion, croppedBbox, ctx, data, diffPercentual, g, gray, horizontalVariation, i, imageData, j, k, l, line, m, maxPercentualCrop, n, newLength, next, o, p, percentualConsideredBorder, pos, prev, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t, threshold, verticalVariation;
    if (!((canvas != null ? canvas.width : void 0) > 0 && (canvas != null ? canvas.height : void 0) > 0)) {
      return callback(new Error("Error when trying to extract a bounding box. The canvas is missing."));
    }
    ctx = canvas.getContext('2d');
    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    data = imageData.data;
    if (!c.params.mean) {
      c.params.mean = 0.1;
    }
    if (!c.params.max) {
      c.params.max = 10;
    }
    if (!c.params.avg) {
      c.params.avg = 10;
    }
    threshold = c.params;
    diffPercentual = 0.25;
    maxPercentualCrop = 0.75;
    percentualConsideredBorder = 0.05;
    gray = [];
    for (i = j = 0, ref = data.length; j < ref; i = j += 4) {
      ref1 = [data[i], data[i + 1], data[i + 2]], r = ref1[0], g = ref1[1], b = ref1[2];
      conversion = 0.2126 * r + 0.7152 * g + 0.0722 * b;
      gray.push(conversion);
    }
    bbox = {
      x: 0,
      y: 0,
      width: canvas.width,
      height: canvas.height
    };
    prev = gray.slice(0, canvas.width);
    for (line = k = ref2 = canvas.width, ref3 = gray.length, ref4 = canvas.width; ref4 > 0 ? k < ref3 : k > ref3; line = k += ref4) {
      next = gray.slice(line, line + canvas.width);
      if (isHomogeneous(prev, threshold)) {
        bbox.y += 1;
        if (isBorder(prev, next, threshold)) {
          break;
        }
        prev = next;
      } else {
        break;
      }
    }
    prev = gray.slice(gray.length - canvas.width, gray.length);
    for (line = l = ref5 = gray.length - canvas.width, ref6 = -canvas.width; ref6 > 0 ? l < 0 : l > 0; line = l += ref6) {
      next = gray.slice(line - canvas.width, line);
      if (isHomogeneous(prev, threshold)) {
        bbox.height -= 1;
        if (isBorder(prev, next, threshold)) {
          break;
        }
        prev = next;
      } else {
        break;
      }
    }
    prev = [];
    for (col = m = 0, ref7 = gray.length, ref8 = canvas.width; ref8 > 0 ? m < ref7 : m > ref7; col = m += ref8) {
      prev.push(gray[col]);
    }
    for (column = n = 1, ref9 = canvas.width; 1 <= ref9 ? n < ref9 : n > ref9; column = 1 <= ref9 ? ++n : --n) {
      next = [];
      for (pos = o = ref10 = column, ref11 = gray.length, ref12 = canvas.width; ref12 > 0 ? o < ref11 : o > ref11; pos = o += ref12) {
        next.push(gray[pos]);
      }
      if (isHomogeneous(prev, threshold)) {
        bbox.x += 1;
        if (isBorder(prev, next, threshold)) {
          break;
        }
        prev = next;
      } else {
        break;
      }
    }
    prev = [];
    for (col = p = ref13 = gray.length - 1, ref14 = -canvas.width; ref14 > 0 ? p <= 0 : p >= 0; col = p += ref14) {
      prev.push(gray[col]);
    }
    for (column = q = 1, ref15 = canvas.width; 1 <= ref15 ? q < ref15 : q > ref15; column = 1 <= ref15 ? ++q : --q) {
      next = [];
      for (pos = t = ref16 = gray.length - 1 - column, ref17 = -canvas.width; ref17 > 0 ? t <= 0 : t >= 0; pos = t += ref17) {
        next.push(gray[pos]);
      }
      if (isHomogeneous(prev, threshold)) {
        bbox.width -= 1;
        if (isBorder(prev, next, threshold)) {
          break;
        }
        prev = next;
      } else {
        break;
      }
    }
    croppedBbox = {
      x: 0,
      y: 0,
      width: canvas.width,
      height: canvas.height
    };
    if ((Math.abs(bbox.y - (canvas.height - bbox.height))) < (Math.max(bbox.y, canvas.height - bbox.height)) * diffPercentual) {
      croppedBbox.y = bbox.y;
      croppedBbox.height = bbox.height - croppedBbox.y;
    }
    if ((Math.abs(bbox.x - (canvas.width - bbox.width))) < (Math.max(bbox.x, canvas.width - bbox.width)) * diffPercentual) {
      croppedBbox.x = bbox.x;
      croppedBbox.width = bbox.width - croppedBbox.x;
    }
    verticalVariation = Math.max(bbox.y, canvas.height - croppedBbox.height);
    horizontalVariation = Math.max(bbox.x, canvas.width - croppedBbox.width);
    newLength = (croppedBbox.height - croppedBbox.y) * (croppedBbox.width - croppedBbox.x);
    if ((newLength < ((1.0 - maxPercentualCrop) * gray.length)) || ((verticalVariation > percentualConsideredBorder * canvas.height) && (horizontalVariation > percentualConsideredBorder * canvas.width)) || croppedBbox.width < 0 || croppedBbox.height < 0) {
      croppedBbox = {
        x: 0,
        y: 0,
        width: canvas.width,
        height: canvas.height
      };
    }
    out.send(croppedBbox);
    return callback();
  });
  return c;
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var jsfeat, noflo;

noflo = __webpack_require__(0);

jsfeat = __webpack_require__(30);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Canny edge detector.';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('low', {
    datatype: 'number',
    control: true,
    "default": 20
  });
  c.inPorts.add('high', {
    datatype: 'number',
    control: true,
    "default": 50
  });
  c.inPorts.add('kernel', {
    datatype: 'number',
    control: true,
    "default": 6
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas']
  };
  return c.process(function(input, output) {
    var alpha, canvas, context, high, i, img, img_u32, img_u8, kernel, low, pix;
    if (!input.hasData('canvas')) {
      return;
    }
    if (input.attached('low').length && !input.hasData('low')) {
      return;
    }
    if (input.attached('high').length && !input.hasData('high')) {
      return;
    }
    if (input.attached('kernel').length && !input.hasData('kernel')) {
      return;
    }
    low = input.hasData('low') ? input.getData('low') : 20;
    high = input.hasData('high') ? input.getData('high') : 50;
    kernel = input.hasData('kernel') ? input.getData('kernel') : 6;
    canvas = input.getData('canvas');
    context = canvas.getContext('2d');
    img = context.getImageData(0, 0, canvas.width, canvas.height);
    img_u8 = new jsfeat.matrix_t(canvas.width, canvas.height, jsfeat.U8_t | jsfeat.C1_t);
    jsfeat.imgproc.grayscale(img.data, img_u8.data);
    jsfeat.imgproc.gaussian_blur(img_u8, img_u8, this.kernel, 0);
    jsfeat.imgproc.canny(img_u8, img_u8, this.low, this.high);
    img_u32 = new Uint32Array(img.data.buffer);
    alpha = 0xff << 24;
    i = img_u8.cols * img_u8.rows;
    pix = 0;
    while (--i >= 0) {
      pix = img_u8.data[i];
      img_u32[i] = alpha | (pix << 16) | (pix << 8) | pix;
    }
    context.putImageData(img, 0, 0);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var RgbQuant, noflo;

noflo = __webpack_require__(0);

RgbQuant = __webpack_require__(31);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Extract the dominant colors of an image';
  c.icon = 'file-image-o';
  c.inPorts = new noflo.InPorts({
    canvas: {
      datatype: 'object'
    },
    css: {
      datatype: 'boolean',
      "default": false
    },
    colors: {
      datatype: 'number',
      "default": 10
    },
    method: {
      datatype: 'int',
      "default": 1,
      values: [1, 2]
    }
  });
  c.outPorts = new noflo.OutPorts({
    colors: {
      datatype: 'array'
    },
    canvas: {
      datatype: 'array'
    },
    error: {
      datatype: 'object'
    }
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'canvas',
    out: ['colors', 'canvas'],
    params: ['css', 'colors', 'method'],
    forwardGroups: true,
    async: true
  }, function(data, groups, out, callback) {
    var colors, e, noSort, outputTuples, quant;
    if (!(((data != null ? data.height : void 0) != null) > 0 && ((data != null ? data.width : void 0) != null) > 0)) {
      return callback(new Error("Error when trying to get colors: canvas is undefined."));
    }
    if (c.params.colors == null) {
      c.params.colors = 10;
    }
    if (c.params.method == null) {
      c.params.method = 1;
    }
    try {
      quant = new RgbQuant({
        colors: c.params.colors,
        method: c.params.method,
        initColors: 4096
      });
      quant.sample(data);
      outputTuples = true;
      noSort = true;
      colors = quant.palette(outputTuples, noSort);
      if (c.params.css) {
        colors = colors.map(function(color) {
          return "rgb(" + color[0] + ", " + color[1] + ", " + color[2] + ")";
        });
      }
    } catch (error) {
      e = error;
      out.canvas.send(data);
      out.colors.send([]);
      console.warn("Error when trying to get colors: " + e + " Sending an empty array.");
      callback();
      return;
    }
    out.canvas.send(data);
    out.colors.send(colors);
    callback();
  });
};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var getColorFromPath, noflo;

noflo = __webpack_require__(0);

getColorFromPath = function(imageData, width, path) {
  var b, centroid, g, i, len, n, offset, paths, point, r, sumx, sumy;
  sumx = 0;
  sumy = 0;
  paths = path.items;
  n = paths.length;
  for (i = 0, len = paths.length; i < len; i++) {
    point = paths[i];
    sumx += point.x;
    sumy += point.y;
  }
  centroid = {
    x: Math.floor(sumx / n),
    y: Math.floor(sumy / n)
  };
  offset = (centroid.x + centroid.y * width) * 4;
  r = imageData.data[offset];
  g = imageData.data[offset + 1];
  b = imageData.data[offset + 2];
  return "rgb(" + r + ", " + g + ", " + b + ")";
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'file-image-o';
  c.description = 'Extract color of path\'s centroid.';
  c.outPorts.add('colors', {
    datatype: 'array'
  });
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('paths', {
    datatype: 'array'
  });
  return noflo.helpers.WirePattern(c, {
    "in": ['canvas', 'paths'],
    out: ['colors'],
    forwardGroups: true,
    async: true
  }, function(payload, groups, out, callback) {
    var canvas, colors, ctx, i, imageData, len, path, paths;
    canvas = payload.canvas, paths = payload.paths;
    ctx = canvas.getContext('2d');
    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    colors = [];
    for (i = 0, len = paths.length; i < len; i++) {
      path = paths[i];
      colors.push(getColorFromPath(imageData, canvas.width, path));
    }
    out.send(colors);
    callback();
  });
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var RgbQuant, noflo;

noflo = __webpack_require__(0);

RgbQuant = __webpack_require__(31);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'file-image-o';
  c.description = 'Extract colors from rectangle regions of a canvas.';
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.inPorts.add('rect', {
    datatype: 'array'
  });
  c.inPorts.add('css', {
    datatype: 'boolean',
    required: true
  });
  c.inPorts.add('colors', {
    datatype: 'number',
    required: true
  });
  return noflo.helpers.WirePattern(c, {
    "in": ['canvas', 'rect'],
    params: ['css', 'colors'],
    out: 'out',
    forwardGroups: true,
    async: true
  }, function(payload, groups, out, callback) {
    var Canvas, canvas, colors, css, ctx, e, extractedColors, i, j, len, len1, noSort, outputTuples, piece, pieces, piecesColors, quant, r, rect, ref;
    canvas = payload.canvas, rect = payload.rect;
    ref = c.params, css = ref.css, colors = ref.colors;
    if (noflo.isBrowser()) {
      piece = document.createElement('canvas');
      piece.width = 200;
      piece.height = 200;
    } else {
      Canvas = __webpack_require__(14).canvas;
      piece = new Canvas(200, 200);
    }
    ctx = piece.getContext('2d');
    pieces = [];
    for (i = 0, len = rect.length; i < len; i++) {
      r = rect[i];
      ctx.drawImage(canvas, r.x, r.y, r.width, r.height, 0, 0, 200, 200);
      pieces.push(piece);
    }
    try {
      outputTuples = true;
      noSort = true;
      piecesColors = [];
      for (j = 0, len1 = pieces.length; j < len1; j++) {
        piece = pieces[j];
        quant = new RgbQuant({
          colors: colors,
          method: 1,
          initColors: 4096
        });
        quant.sample(piece);
        extractedColors = quant.palette(outputTuples, noSort);
        if (css) {
          extractedColors = extractedColors.map(function(color) {
            return "rgb(" + color[0] + ", " + color[1] + ", " + color[2] + ")";
          });
        }
        piecesColors.push(extractedColors);
      }
    } catch (error) {
      e = error;
      callback(e);
      return;
    }
    out.send(piecesColors);
    callback();
  });
};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

var jsfeat, noflo;

noflo = __webpack_require__(0);

jsfeat = __webpack_require__(30);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Extract feature corners of image (method: YAPE)';
  c.icon = 'file-image-o';
  c.inPorts.add('canvas', {
    datatype: 'object'
  });
  c.outPorts.add('corners', {
    datatype: 'array'
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    canvas: ['canvas', 'corners']
  };
  return c.process(function(input, output) {
    var canvas, context, corners, count, i, img, img_u8, j, pixels, ref;
    if (!input.hasData('canvas')) {
      return;
    }
    canvas = input.getData('canvas');
    context = canvas.getContext('2d');
    img = context.getImageData(0, 0, canvas.width, canvas.height);
    jsfeat.yape06.laplacian_threshold = 30;
    jsfeat.yape06.min_eigen_value_threshold = 25;
    img_u8 = new jsfeat.matrix_t(canvas.width, canvas.height, jsfeat.U8_t | jsfeat.C1_t);
    jsfeat.imgproc.grayscale(img.data, canvas.width, canvas.height, img_u8);
    jsfeat.imgproc.box_blur_gray(img_u8, img_u8, 2, 0);
    corners = [];
    pixels = canvas.width * canvas.height;
    for (i = j = 0, ref = pixels; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      corners.push(new jsfeat.keypoint_t(0, 0, 0));
    }
    count = jsfeat.yape06.detect(img_u8, corners);
    output.sendDone({
      corners: corners.slice(0, count),
      canvas: canvas
    });
  });
};


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'file-image-o';
  c.description = 'Get orientation from image dimensions';
  c.inPorts.add('dimensions', {
    datatype: 'object'
  });
  c.outPorts.add('orientation', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'dimensions',
    out: 'orientation',
    forwardGroups: true,
    async: true
  }, function(packet, groups, out, callback) {
    var orientation;
    if (!((packet != null ? packet.width : void 0) > 0)) {
      return callback(new Error("Dimension is missing width"));
    }
    if (!((packet != null ? packet.height : void 0) > 0)) {
      return callback(new Error("Dimension is missing height"));
    }
    orientation = 'square';
    if (packet.width > packet.height) {
      orientation = 'landscape';
    }
    if (packet.width < packet.height) {
      orientation = 'portrait';
    }
    out.send({
      orientation: orientation
    });
    callback();
  });
};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, presets;

noflo = __webpack_require__(0);

presets = {
  '1977': {
    'a': [0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 146, 147, 148, 149, 150, 151, 152, 153, 153, 154, 155, 156, 157, 158, 159, 160, 160, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 171, 172, 172, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 182, 183, 183, 184, 185, 186, 187, 188, 188, 189, 190, 191, 192, 193, 193, 194, 195, 196, 197, 198, 199, 199, 200, 201, 202, 203, 204, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 215, 216, 217, 218, 219, 220, 221, 221, 222, 223, 224, 225, 226, 227, 227, 228, 229, 230, 231, 232, 233, 233, 234, 235, 236, 237, 238, 239, 240, 241, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 250, 251, 252, 253, 254, 255, 255],
    'r': [58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 60, 60, 61, 62, 62, 63, 63, 64, 64, 65, 66, 66, 67, 67, 68, 69, 69, 70, 70, 71, 72, 72, 73, 74, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 204, 205, 206, 206, 207, 208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 212, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 213, 213, 212, 212, 212, 212, 212],
    'g': [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 255],
    'b': [45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 53, 53, 54, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 188, 189, 190, 191, 192, 193, 193, 194, 195, 195, 196, 196, 196, 197, 197, 197, 197, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198, 198, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 198, 198, 198, 198, 198, 198, 198]
  },
  'brannan': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255],
    'r': [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 71, 72, 73, 73, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 83, 83, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 154, 156, 157, 159, 160, 162, 163, 164, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 196, 198, 199, 201, 203, 204, 206, 207, 209, 210, 212, 213, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 236, 237, 238, 239, 239, 240, 241, 241, 242, 243, 243, 244, 244, 245, 246, 246, 247, 247, 248, 248, 249, 249, 249, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254],
    'g': [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 61, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 87, 89, 91, 93, 95, 97, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 161, 163, 165, 167, 168, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 207, 207, 208, 208, 209, 210, 210, 211, 212, 212, 213, 214, 214, 215, 216, 217, 217, 218, 219, 219, 220, 221, 221, 222, 222, 223, 224, 224, 225, 225, 226, 226, 227, 228, 228, 229, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 233, 234, 234, 234, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 247, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252],
    'b': [48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 53, 53, 54, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61, 62, 62, 63, 64, 64, 65, 66, 66, 67, 68, 68, 69, 70, 71, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 141, 142, 143, 144, 145, 146, 146, 147, 148, 148, 149, 150, 151, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 182, 183, 183, 184, 184, 185, 185, 185, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 190, 190, 191, 191, 192, 193, 193, 194, 195, 195, 196, 197, 198, 199, 200, 200, 201, 202, 203, 204, 205, 206, 206, 207, 208, 209, 210, 211, 211, 212, 213, 214, 214, 215, 216, 216, 217, 218, 218, 219, 219, 220, 220, 221, 222, 222, 222, 223, 223, 224, 224, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225]
  },
  'gotham': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255],
    'r': [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 71, 72, 73, 73, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 83, 83, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 143, 144, 146, 147, 149, 150, 152, 153, 154, 156, 157, 159, 160, 162, 163, 164, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 196, 198, 199, 201, 203, 204, 206, 207, 209, 210, 212, 213, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 236, 237, 238, 239, 239, 240, 241, 241, 242, 243, 243, 244, 244, 245, 246, 246, 247, 247, 248, 248, 249, 249, 249, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254],
    'g': [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 61, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 87, 89, 91, 93, 95, 97, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 161, 163, 165, 167, 168, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 207, 207, 208, 208, 209, 210, 210, 211, 212, 212, 213, 214, 214, 215, 216, 217, 217, 218, 219, 219, 220, 221, 221, 222, 222, 223, 224, 224, 225, 225, 226, 226, 227, 228, 228, 229, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 233, 234, 234, 234, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 247, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252],
    'b': [48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 53, 53, 54, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61, 62, 62, 63, 64, 64, 65, 66, 66, 67, 68, 68, 69, 70, 71, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 141, 142, 143, 144, 145, 146, 146, 147, 148, 148, 149, 150, 151, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 182, 183, 183, 184, 184, 185, 185, 185, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 190, 190, 191, 191, 192, 193, 193, 194, 195, 195, 196, 197, 198, 199, 200, 200, 201, 202, 203, 204, 205, 206, 206, 207, 208, 209, 210, 211, 211, 212, 213, 214, 214, 215, 216, 216, 217, 218, 218, 219, 219, 220, 220, 221, 222, 222, 222, 223, 223, 224, 224, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225]
  },
  'hefe': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255],
    'r': [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 35, 36, 38, 39, 41, 43, 45, 48, 50, 52, 54, 56, 58, 60, 62, 64, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 117, 119, 121, 123, 125, 126, 128, 130, 132, 133, 135, 137, 139, 140, 142, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 160, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 190, 191, 192, 193, 194, 195, 196, 197, 197, 198, 199, 200, 201, 201, 202, 203, 204, 204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 225, 226, 226, 227, 227, 228, 228, 228, 229, 229, 230, 230, 231, 231, 231, 232, 232, 233, 233, 233, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 245, 245, 245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252],
    'g': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 44, 45, 47, 49, 50, 52, 54, 56, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 78, 80, 82, 85, 87, 89, 92, 94, 97, 99, 102, 104, 106, 109, 111, 114, 116, 118, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 146, 148, 150, 152, 154, 156, 157, 159, 161, 163, 164, 166, 168, 169, 171, 173, 174, 176, 178, 179, 181, 182, 184, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 205, 206, 207, 207, 208, 209, 209, 210, 210, 211, 211, 211, 212, 212, 213, 213, 213, 214, 214, 215, 215, 216, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 220, 221, 221, 222, 222, 222, 223, 223, 224, 224, 225, 225, 225, 226, 226, 227, 227, 228, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 239, 240, 240, 241, 241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252],
    'b': [2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 45, 47, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 87, 89, 91, 93, 95, 96, 98, 100, 101, 103, 105, 107, 108, 110, 112, 113, 115, 117, 118, 120, 122, 123, 125, 127, 128, 130, 131, 133, 135, 136, 138, 140, 141, 143, 145, 146, 148, 149, 151, 153, 154, 156, 158, 159, 161, 163, 164, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 195, 196, 197, 198, 198, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 207, 207, 207, 207, 208, 208, 209, 209, 209, 210, 210, 211, 211, 211, 212, 212, 213, 213, 214, 214, 214, 215, 215, 216, 216, 216, 217, 217, 218, 218, 218, 219, 219, 220, 220, 220, 221, 221, 222, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 227, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228]
  },
  'lordkelvin': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255],
    'r': [43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 69, 70, 72, 73, 75, 77, 78, 80, 81, 83, 85, 86, 88, 90, 91, 93, 95, 96, 98, 100, 102, 103, 105, 107, 109, 111, 112, 114, 116, 118, 120, 121, 123, 125, 127, 129, 130, 132, 134, 136, 137, 139, 141, 142, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 168, 169, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 202, 203, 204, 204, 205, 206, 207, 207, 208, 209, 210, 210, 211, 212, 212, 213, 214, 214, 215, 216, 217, 217, 218, 219, 219, 220, 221, 222, 222, 223, 224, 224, 225, 225, 226, 227, 227, 228, 228, 229, 229, 229, 230, 230, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 243, 244, 244, 244, 245, 245, 245, 245, 245, 246, 246, 246, 246, 246, 247, 247, 247, 247, 247, 248, 248, 248, 248, 248, 248, 249, 249, 249, 249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254],
    'g': [36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 40, 40, 41, 41, 42, 43, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 158, 159, 160, 160, 161, 161, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 168, 169, 169, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 182, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 186, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 191, 191, 192, 192, 192, 192, 192, 192, 192, 192, 193, 193, 193, 193, 193, 193, 193, 193, 194, 194, 194, 194, 194, 194, 194, 195, 195, 195, 195],
    'b': [69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 72, 72, 73, 73, 73, 74, 74, 75, 75, 76, 76, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 84, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 93, 93, 93, 94, 94, 95, 95, 96, 96, 96, 97, 97, 98, 99, 99, 100, 100, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 106, 107, 107, 107, 107, 108, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124]
  },
  'nashville': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255],
    'r': [56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 58, 58, 59, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 95, 96, 98, 100, 102, 104, 106, 108, 110, 113, 115, 117, 120, 122, 124, 127, 129, 131, 133, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 155, 157, 159, 160, 162, 164, 165, 167, 168, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 209, 210, 211, 212, 213, 214, 215, 216, 217, 217, 218, 219, 220, 220, 221, 222, 223, 223, 224, 225, 226, 226, 227, 228, 228, 229, 230, 230, 231, 231, 232, 233, 233, 234, 234, 235, 235, 236, 237, 237, 238, 238, 239, 239, 240, 240, 240, 241, 241, 242, 242, 243, 243, 243, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 250, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
    'g': [38, 39, 39, 40, 41, 41, 42, 42, 43, 44, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 158, 159, 160, 161, 162, 163, 163, 164, 165, 166, 166, 167, 168, 169, 169, 170, 171, 172, 172, 173, 174, 175, 176, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 185, 186, 187, 187, 188, 189, 189, 190, 191, 191, 192, 193, 193, 194, 194, 195, 195, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 202, 203, 203, 204, 204, 205, 205, 205, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 213, 213, 213, 213, 214, 214, 214, 214, 215, 215, 215, 215, 216, 216, 216, 216, 216, 217, 217, 217, 217, 217, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221],
    'b': [97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 104, 104, 105, 105, 106, 107, 107, 108, 109, 110, 110, 111, 112, 113, 114, 114, 115, 116, 116, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 124, 125, 125, 126, 126, 127, 127, 127, 128, 128, 129, 129, 129, 130, 130, 131, 131, 132, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 136, 137, 137, 138, 138, 139, 139, 139, 140, 140, 141, 141, 142, 142, 142, 143, 143, 144, 144, 144, 145, 145, 146, 146, 147, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 151, 152, 152, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 157, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 161, 161, 161, 162, 162, 162, 162, 163, 163, 163, 163, 164, 164, 164, 164, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 170, 170, 170, 170, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176]
  },
  'xproii': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255],
    'r': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 60, 62, 63, 65, 67, 68, 70, 72, 74, 76, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 172, 174, 176, 178, 180, 182, 184, 186, 188, 189, 191, 193, 194, 196, 198, 199, 201, 202, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 239, 240, 241, 242, 243, 243, 244, 245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255],
    'g': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 61, 62, 64, 66, 67, 69, 71, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 161, 163, 165, 167, 169, 171, 173, 175, 176, 178, 180, 182, 183, 185, 187, 189, 190, 192, 193, 195, 197, 198, 200, 201, 203, 204, 206, 207, 209, 210, 211, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 237, 238, 239, 240, 240, 241, 242, 243, 243, 244, 244, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
    'b': [24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44, 45, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 62, 63, 64, 64, 65, 66, 67, 67, 68, 69, 70, 70, 71, 72, 73, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 81, 82, 83, 84, 85, 86, 86, 87, 88, 89, 90, 91, 91, 92, 93, 94, 95, 96, 96, 97, 98, 99, 100, 101, 101, 102, 103, 104, 105, 106, 107, 107, 108, 109, 110, 111, 112, 113, 114, 114, 115, 116, 117, 118, 119, 119, 120, 121, 122, 123, 124, 124, 125, 126, 127, 127, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 134, 134, 135, 136, 137, 138, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 162, 163, 164, 165, 165, 166, 167, 168, 168, 169, 170, 171, 171, 172, 173, 173, 174, 175, 176, 176, 177, 178, 178, 179, 180, 181, 182, 182, 183, 184, 185, 185, 186, 187, 188, 189, 189, 190, 191, 192, 193, 193, 194, 195, 196, 197, 197, 198, 199, 200, 200, 201, 202, 203, 204, 204, 205, 206, 206, 207, 208, 208, 209, 210, 210, 211, 212, 212, 213, 214, 215, 215, 216, 217, 218, 218, 219, 220, 221, 221, 222, 223, 224, 225, 226, 226, 227, 228, 229]
  },
  'newkelvin': {
    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255],
    'b': [0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 30, 31, 32, 32, 33, 34, 34, 35, 36, 36, 37, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 81, 82, 83, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 162, 163, 165, 166, 168, 169, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 197, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 214, 215, 217, 219, 220, 222, 223, 225, 226, 228, 230, 231, 233, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 252, 253, 255],
    'g': [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 250, 251, 252, 253, 254, 255],
    'r': [0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 244, 245, 246, 247, 247, 248, 249, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]
  }
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get a preset for a RGBA adjustment curve.';
  c.icon = 'file-image-o';
  c.inPorts.add('presetname', {
    datatype: 'string'
  });
  c.outPorts.add('curve', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    presetname: ['curve']
  };
  return c.process(function(input, output) {
    var payload;
    if (!input.hasData('presetname')) {
      return;
    }
    payload = input.getData('presetname');
    if (!presets[payload]) {
      output.done(new Error("Preset '" + payload + "' not available"));
      return;
    }
    output.sendDone({
      curve: presets[payload]
    });
  });
};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Convert image to canvas.';
  c.icon = 'file-image-o';
  c.inPorts.add('image', {
    datatype: 'object'
  });
  c.outPorts.add('canvas', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    image: ['canvas']
  };
  return c.process(function(input, output) {
    var Canvas, canvas, context, image;
    if (!input.hasData('image')) {
      return;
    }
    image = input.getData('image');
    if (noflo.isBrowser()) {
      canvas = document.createElement('canvas');
      canvas.width = image.width;
      canvas.height = image.height;
    } else {
      Canvas = __webpack_require__(14).canvas;
      canvas = new Canvas(image.width, image.height);
    }
    context = canvas.getContext('2d');
    context.drawImage(image, 0, 0);
    output.sendDone({
      canvas: canvas
    });
  });
};


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var URI, convertFlickr, convertGravatar, convertImgflo, convertWikimedia, convertWordpress, noflo, superagent, timeout_HEAD, tryFindingFullscale, tryRedirect;

noflo = __webpack_require__(0);

superagent = __webpack_require__(225);

URI = __webpack_require__(231);

timeout_HEAD = 15000;

convertFlickr = function(url) {
  var format;
  format = url.match(/_(.)\.(gif|png|jpg)/);
  if (format) {
    if (format[1] === 'd') {
      return url.replace(/_(.)\.(gif|png|jpg)/, '.$2');
    }
    if (format[1] === 'o') {
      return url;
    }
    return url.replace(/_(.)\.(gif|png|jpg)/, '_b.$2');
  }
  return url.replace(/\.(gif|png|jpg)/, '_b.$1');
};

convertWordpress = function(url) {
  return url.replace(/\?w=[\d]+/, '');
};

convertWikimedia = function(url) {
  if (!url.match(/\/commons\/thumb\//)) {
    return url;
  }
  return url.replace(/\/commons\/(thumb)\/([0-9])\/([0-9][a-z])\/(.*)[\\\/][^\\\/]*/, '/commons/$2/$3/$4');
};

convertImgflo = function(url) {
  var params, uri;
  if (!url.match(/\/graph\//)) {
    return url;
  }
  uri = URI(url);
  params = uri.search(true);
  if (!(params != null ? params.input : void 0)) {
    return url;
  }
  return params.input;
};

convertGravatar = function(url) {
  var newSize, parts, q;
  if (!url.match(/\/avatar\//)) {
    return url;
  }
  newSize = '512';
  parts = URI.parse(url);
  q = URI.parseQuery(parts.query);
  if (q.s != null) {
    q.s = newSize;
  }
  if (q.size != null) {
    q.size = newSize;
  }
  if (((q.s != null) || q.size) == null) {
    q.size = newSize;
  }
  parts.query = URI.buildQuery(q);
  return URI.build(parts);
};

tryFindingFullscale = function(url) {
  return url.replace(/[-_](small|thumbnail|thumb|tm)/, '');
};

tryRedirect = function(original, redirected) {
  if ((original.indexOf('staticflickr.com') !== -1) && (redirected.indexOf('photo_unavailable') !== -1)) {
    return original;
  }
  return redirected;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Convert an image URL to potential URL of full-scale image';
  c.inPorts.add('url', {
    datatype: 'string'
  });
  c.outPorts.add('url', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'url',
    out: 'url',
    async: true,
    forwardGroups: true
  }, function(url, groups, out, callback) {
    var newUrl;
    newUrl = url;
    if (!url) {
      return callback(new Error('No image source provided'));
    }
    if (typeof url !== 'string') {
      return callback(new Error('URL is not a string'));
    }
    if (url.indexOf('staticflickr.com') !== -1) {
      newUrl = convertFlickr(url, callback);
    }
    if (url.indexOf('wordpress.com') !== -1) {
      newUrl = convertWordpress(url, callback);
    }
    if (url.indexOf('wikimedia.org') !== -1) {
      newUrl = convertWikimedia(url, callback);
    }
    if (url.indexOf('imgflo') !== -1) {
      newUrl = convertImgflo(url, callback);
    }
    if (url.indexOf('gravatar.com') !== -1) {
      newUrl = convertGravatar(url, callback);
    }
    if (url.match(/[-_](small|thumb)/)) {
      newUrl = tryFindingFullscale(url, callback);
    }
    if (newUrl !== url) {
      superagent.head(newUrl).redirects(1).timeout(timeout_HEAD).end(function(err, res) {
        var ref;
        if (!(res && res.statusCode === 200)) {
          out.send(url);
          callback();
          return;
        }
        if (((ref = res.redirects) != null ? ref.length : void 0) > 0) {
          newUrl = tryRedirect(url, res.redirects[0]);
        }
        out.send(newUrl);
        return callback();
      });
    } else {
      out.send(url);
      callback();
    }
  });
};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = __webpack_require__(226);
var RequestBase = __webpack_require__(227);
var isObject = __webpack_require__(32);
var ResponseBase = __webpack_require__(228);
var shouldRetry = __webpack_require__(230);

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    if (index === -1) { // could be empty line, just skip it
      continue;
    }
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
      status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str){
  var parse = request.parse[this.type];
  if(this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
      }
    } catch(custom_err) {
      new_err = custom_err; // ok() callback can throw
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      new_err.original = err;
      new_err.response = res;
      new_err.status = res.status;
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options
    options = pass;
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    }
  }

  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));
    break;

    case 'auto':
      this.username = user;
      this.password = pass;
    break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
    break;
  }
  return this;
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  // console.log(this._retries, this._maxRetries)
  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  }
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn){
  var req = request('OPTIONS', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn){
  var req = request('DELETE', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = __webpack_require__(32);

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  return this;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {
  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
      self.end(function(err, res){
        if (err) innerReject(err); else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
}

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
}

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {

  // name should be either a string or an object.
  if (null === name ||  undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on){
  // This is browser-only functionality. Node side is no-op.
  if(on==undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */
RequestBase.prototype.maxResponseSize = function(n){
  if ('number' !== typeof n) {
    throw TypeError("Invalid argument");
  }
  this._maxResponseSize = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function(){
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};


/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};


/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");}

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
}


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */

var utils = __webpack_require__(229);

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field){
    return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
module.exports = function shouldRetry(err, res) {
  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
  if (res && res.status && res.status >= 500) return true;
  // Superagent timeout
  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;
  if (err && 'crossDomain' in err) return true;
  return false;
};


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory(__webpack_require__(33), __webpack_require__(34), __webpack_require__(35));
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(33), __webpack_require__(34), __webpack_require__(35)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
}(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URI variable, if any
  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;
    var _baseSupplied = arguments.length >= 2;

    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    if (url === null) {
      if (_urlSupplied) {
        throw new TypeError('null is not a valid argument for URI');
      }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  function isInteger(value) {
    return /^[0-9]+$/.test(value);
  }

  URI.version = '1.19.0';

  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined
        || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */
      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length;

    // value may be string, number, array, regexp
    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    }

    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function() {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      preventInvalidHostname: URI.preventInvalidHostname,
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  };
  // state: throw on invalid hostname
  // see https://github.com/medialize/URI.js/pull/345
  // and https://github.com/medialize/URI.js/issues/354
  URI.preventInvalidHostname = false;
  // state: allow duplicate query parameters (a=1&a=1)
  URI.duplicateQueryParameters = false;
  // state: replaces + with %20 (space in query strings)
  URI.escapeQuerySpace = true;
  // static properties
  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\._-]/i;
  URI.punycode_expression = /(xn--)/i;
  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt
  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html
  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
    // balanced parens inclusion (), [], {}, <>
    parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g,
  };
  // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  };
  // list of protocols which always require a hostname
  URI.hostProtocols = [
    'http',
    'https'
  ];

  // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _
  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
  // map DOM Elements to their URI attribute
  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src', // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };
  URI.getDomAttribute = function(node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  }

  // encoding / decoding according to RFC3986
  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string)
      .replace(/[!'()*]/g, escapeForDumbFirefox36)
      .replace(/\*/g, '%2A');
  }
  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;
  URI.iso8859 = function() {
    URI.encode = escape;
    URI.decode = unescape;
  };
  URI.unicode = function() {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };
  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };
  URI.encodeQuery = function(string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };
  URI.decodeQuery = function(string, escapeQuerySpace) {
    string += '';
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch(e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  };
  // generate encode/decode path functions
  var _parts = {'encode':'encode', 'decode':'decode'};
  var _part;
  var generateAccessor = function(_group, _part) {
    return function(string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
    return function(string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;
      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function(string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  };

  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');

  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function(string, parts) {
    var pos;
    if (!parts) {
      parts = {
        preventInvalidHostname: URI.preventInvalidHostname
      };
    }
    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract protocol
    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2);
      // extract "user:pass@host:port"
      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');
      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;
        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3);

          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
  };
  URI.parseHost = function(string, parts) {
    if (!string) {
      string = '';
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/');

    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;
      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);
      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    if (parts.preventInvalidHostname) {
      URI.ensureValidHostname(parts.hostname, parts.protocol);
    }

    if (parts.port) {
      URI.ensureValidPort(parts.port);
    }

    return string.substring(pos) || '/';
  };
  URI.parseAuthority = function(string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };
  URI.parseUserinfo = function(string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t;

    // authority@ must come before /path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };
  URI.parseQuery = function(string, escapeQuerySpace) {
    if (!string) {
      return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function(parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += (URI.buildAuthority(parts) || '');

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }
    return t;
  };
  URI.buildHost = function(parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };
  URI.buildAuthority = function(parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };
  URI.buildUserinfo = function(parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);
    }

    if (parts.password) {
      t += ':' + URI.encode(parts.password);
    }

    if (t) {
      t += '@';
    }

    return t;
  };
  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = '';
    var unique, key, i, length;
    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};
          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };
  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };

  URI.setQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.setQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      data[name] = value === undefined ? null : value;
    } else {
      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');
    }
  };

  URI.removeQuery = function(data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };
  URI.hasQuery = function(data, name, value, withinArray) {
    switch (getType(name)) {
      case 'String':
        // Nothing to do here
        break;

      case 'RegExp':
        for (var key in data) {
          if (hasOwn.call(data, key)) {
            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
              return true;
            }
          }
        }

        return false;

      case 'Object':
        for (var _key in name) {
          if (hasOwn.call(name, _key)) {
            if (!URI.hasQuery(data, _key, name[_key])) {
              return false;
            }
          }
        }

        return true;

      default:
        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data; // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);
        /* falls through */
      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };


  URI.joinPaths = function() {
    var input = [];
    var segments = [];
    var nonEmptySegments = 0;

    for (var i = 0; i < arguments.length; i++) {
      var url = new URI(arguments[i]);
      input.push(url);
      var _segments = url.segment();
      for (var s = 0; s < _segments.length; s++) {
        if (typeof _segments[s] === 'string') {
          segments.push(_segments[s]);
        }

        if (_segments[s]) {
          nonEmptySegments++;
        }
      }
    }

    if (!segments.length || !nonEmptySegments) {
      return new URI('');
    }

    var uri = new URI('').segment(segments);

    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
      uri.path('/' + uri.path());
    }

    return uri.normalize();
  };

  URI.commonPath = function(one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }

    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function(string, callback, options) {
    options || (options = {});
    var _start = options.start || URI.findUri.start;
    var _end = options.end || URI.findUri.end;
    var _trim = options.trim || URI.findUri.trim;
    var _parens = options.parens || URI.findUri.parens;
    var _attributeOpen = /[a-z0-9-]=["']?$/i;

    _start.lastIndex = 0;
    while (true) {
      var match = _start.exec(string);
      if (!match) {
        break;
      }

      var start = match.index;
      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end);
      // make sure we include well balanced parens
      var parensEnd = -1;
      while (true) {
        var parensMatch = _parens.exec(slice);
        if (!parensMatch) {
          break;
        }

        var parensMatchEnd = parensMatch.index + parensMatch[0].length;
        parensEnd = Math.max(parensEnd, parensMatchEnd);
      }

      if (parensEnd > -1) {
        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
      } else {
        slice = slice.replace(_trim, '');
      }

      if (slice.length <= match[0].length) {
        // the extract only contains the starting marker of a URI,
        // e.g. "www" or "http://"
        continue;
      }

      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      if (result === undefined) {
        _start.lastIndex = end;
        continue;
      }

      result = String(result);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function(v, protocol) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    var hasHostname = !!v; // not null and not an empty string
    var hasProtocol = !!protocol;
    var rejectEmptyHostname = false;

    if (hasProtocol) {
      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
    }

    if (rejectEmptyHostname && !hasHostname) {
      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
    } else if (v && v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
      }
      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
      }
    }
  };

  URI.ensureValidPort = function (v) {
    if (!v) {
      return;
    }

    var port = Number(v);
    if (isInteger(port) && (port > 0) && (port < 65536)) {
      return;
    }

    throw new TypeError('Port "' + v + '" is not a valid port');
  };

  // noConflict
  URI.noConflict = function(removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function(deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function() {
    return new URI(this);
  };

  p.valueOf = p.toString = function() {
    return this.build(false)._string;
  };


  function generateSimpleAccessor(_part){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';
          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function(v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? ('?' + t) : t;
  };
  p.hash = function(v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? ('#' + t) : t;
  };

  p.pathname = function(v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }
      this.build(!build);
      return this;
    }
  };
  p.path = p.pathname;
  p.href = function(href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    }

    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;
      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  };

  // identification accessors
  p.is = function(what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;

      // hostname identification
      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  };

  // component specific input validation
  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function(v, build) {
    if (v) {
      // accept trailing ://
      v = v.replace(/:(\/\/)?$/, '');

      if (!v.match(URI.protocol_expression)) {
        throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
      }
    }

    return _protocol.call(this, v, build);
  };
  p.scheme = p.protocol;
  p.port = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';
        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        URI.ensureValidPort(v);
      }
    }
    return _port.call(this, v, build);
  };
  p.hostname = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
      var res = URI.parseHost(v, x);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
      if (this._parts.preventInvalidHostname) {
        URI.ensureValidHostname(v, this._parts.protocol);
      }
    }

    return _hostname.call(this, v, build);
  };

  // compound accessors
  p.origin = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) {
        return '';
      }

      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this
        .protocol(origin.protocol())
        .authority(origin.authority())
        .build(!build);
      return this;
    }
  };
  p.host = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.authority = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.userinfo = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var t = URI.buildUserinfo(this._parts);
      return t ? t.substring(0, t.length -1) : t;
    } else {
      if (v[v.length-1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.resource = function(v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  };

  // fraction accessors
  p.subdomain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // grab domain and add another segment
      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;
      var sub = this._parts.hostname.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v.indexOf(':') !== -1) {
        throw new TypeError('Domains cannot contain colons');
      }

      if (v) {
        URI.ensureValidHostname(v, this._parts.protocol);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.domain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // if hostname consists of 1 or 2 segments, it must be the domain
      var t = this._parts.hostname.match(/\./g);
      if (t && t.length < 2) {
        return this._parts.hostname;
      }

      // grab tld and add another segment
      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      if (v.indexOf(':') !== -1) {
        throw new TypeError('Domains cannot contain colons');
      }

      URI.ensureValidHostname(v, this._parts.protocol);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.tld = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');
      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.directory = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

      return v ? URI.decodePath(res) : res;

    } else {
      var e = this._parts.path.length - this.filename().length;
      var directory = this._parts.path.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(directory));

      // fully qualifier directories begin with a slash
      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      }

      // directories always end with a slash
      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.filename = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v !== 'string') {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');
      var res = this._parts.path.substring(pos+1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };
  p.suffix = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      }

      // suffix may only contain alnum characters (yup, I made this up.)
      s = filename.substring(pos+1);
      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.segment = function(segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined
        ? segments
        : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = [];
        // collapse empty elements within array
        for (var i=0, l=v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length -1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);
        if (segments[segments.length -1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length -1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };
  p.segmentCoded = function(segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);
      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  };

  // mutating query string
  var q = p.query;
  p.query = function(v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };
  p.setQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.addQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.removeQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.hasQuery = function(name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };
  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery;

  // sanitizing URLs
  p.normalize = function() {
    if (this._parts.urn) {
      return this
        .normalizeProtocol(false)
        .normalizePath(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
    }

    return this
      .normalizeProtocol(false)
      .normalizeHostname(false)
      .normalizePort(false)
      .normalizePath(false)
      .normalizeQuery(false)
      .normalizeFragment(false)
      .build();
  };
  p.normalizeProtocol = function(build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizeHostname = function(build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizePort = function(build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizePath = function(build) {
    var _path = this._parts.path;
    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    _path = URI.recodePath(_path);

    var _was_relative;
    var _leadingParents = '';
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    }

    // handle relative files (as opposed to directories)
    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    }

    // resolve simples
    _path = _path
      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
      .replace(/\/{2,}/g, '/');

    // remember leading parents
    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    }

    // resolve parents
    while (true) {
      _parent = _path.search(/\/\.\.(\/|$)/);
      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');
      if (_pos === -1) {
        _pos = _parent;
      }
      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    this._parts.path = _path;
    this.build(!build);
    return this;
  };
  p.normalizePathname = p.normalizePath;
  p.normalizeQuery = function(build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };
  p.normalizeFragment = function(build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function() {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.unicode = function() {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.readable = function() {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username('').password('').normalize();
    var t = '';
    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);
        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
      var q = '';
      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
          .replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
            .replace(/&/g, '%26');
        }
      }
      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  };

  // resolving relative and absolute URLs
  p.absoluteTo = function(base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (resolved._parts.protocol) {
      // Directly returns even if this._parts.hostname is empty.
      return resolved;
    } else {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; (p = properties[i]); i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;
      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else {
      if (resolved._parts.path.substring(-2) === '..') {
        resolved._parts.path += '/';
      }

      if (resolved.path().charAt(0) !== '/') {
        basedir = base.directory();
        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
        resolved.normalizePath();
      }
    }

    resolved.build();
    return resolved;
  };
  p.relativeTo = function(base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    }

    // determine common sub path
    common = URI.commonPath(relativePath, basePath);

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path
      .substring(common.length)
      .replace(/[^\/]*$/, '')
      .replace(/.*?\//g, '../');

    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';

    return relative.build();
  };

  // comparing URIs
  p.equals = function(uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
      return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query('');

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
      return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  };

  // state
  p.preventInvalidHostname = function(v) {
    this._parts.preventInvalidHostname = !!v;
    return this;
  };

  p.duplicateQueryParameters = function(v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function(v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
}));


/***/ }),
/* 232 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, requestAnimationFrame;

noflo = __webpack_require__(0);

if (noflo.isBrowser()) {
  requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  };
}

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Convert video to canvas.';
  c.icon = 'file-image-o';
  c.inPorts.add('video', {
    description: 'video element to draw to canvas',
    datatype: 'object',
    required: true
  });
  c.inPorts.add('canvas', {
    description: '(optional) if not hit, component will create canvas',
    datatype: 'object',
    required: false
  });
  c.outPorts.add('canvas', {
    description: 'will send canvas with each video frame drawn',
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    video: ['canvas']
  };
  return c.process(function(input, output) {
    var Canvas, canvas, context, extractFrame, lastTime, shutdownNextFrame, video;
    if (!input.hasData('video')) {
      return;
    }
    if (input.attached('canvas').length && !input.hasData('canvas')) {
      return;
    }
    video = input.getData('video');
    if ((video != null ? video.tagName : void 0) !== 'VIDEO') {
      output.done(new Error('Video must be a VIDEO DOM element'));
      return;
    }
    if (input.hasData('canvas')) {
      canvas = input.getData('canvas');
    } else {
      if (!video.videoWidth) {
        output.done('Video width not available');
        return;
      }
      if (noflo.isBrowser()) {
        canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
      } else {
        Canvas = __webpack_require__(14).canvas;
        canvas = new Canvas(video.videoWidth, video.videoHeight);
      }
    }
    context = canvas.getContext('2d');
    lastTime = -1;
    shutdownNextFrame = false;
    extractFrame = function() {
      if (lastTime === video.currentTime) {
        requestAnimationFrame(extractFrame);
        return;
      }
      if (video.currentTime < lastTime) {
        output.done();
        return;
      }
      if (video.currentTime === video.duration) {
        output.done();
        return;
      }
      lastTime = video.currentTime;
      context.drawImage(video, 0, 0);
      output.send({
        canvas: canvas
      });
      return requestAnimationFrame(extractFrame);
    };
    extractFrame();
  });
};


/***/ }),
/* 234 */
/***/ (function(module, exports) {

module.exports = {"properties":{"name":"UrlToCanvas","environment":{"type":"all"}},"inports":{"url":{"process":"img","port":"url","metadata":{"x":36,"y":144,"width":72,"height":72}},"crossorigin":{"process":"img","port":"crossorigin","metadata":{"x":36,"y":288,"width":72,"height":72}}},"outports":{"canvas":{"process":"canvas/Draw_n4cqh","port":"canvas","metadata":{"x":828,"y":180,"width":72,"height":72}},"error":{"process":"img","port":"error","metadata":{"x":828,"y":360,"width":72,"height":72}}},"groups":[],"processes":{"canvas/Draw_n4cqh":{"component":"canvas/Draw","metadata":{"label":"canvas/Draw","x":684,"y":180,"width":72,"height":72}},"drawImage":{"component":"canvas/DrawImage","metadata":{"label":"drawImage","x":504,"y":180,"width":72,"height":72}},"img":{"component":"image/CreateImage","metadata":{"label":"img","x":180,"y":216,"width":72,"height":72}},"canvas":{"component":"canvas/CreateCanvas","metadata":{"label":"canvas","x":504,"y":360,"width":72,"height":72}},"w":{"component":"objects/ExtractProperty","metadata":{"label":"w","x":324,"y":288,"width":72,"height":72}},"h":{"component":"objects/ExtractProperty","metadata":{"label":"h","x":324,"y":396,"width":72,"height":72}},"core/RepeatAsync_u0yan":{"component":"core/RepeatAsync","metadata":{"label":"core/RepeatAsync","x":504,"y":36,"width":72,"height":72}}},"connections":[{"src":{"process":"img","port":"image"},"tgt":{"process":"drawImage","port":"image"}},{"src":{"process":"w","port":"out"},"tgt":{"process":"canvas","port":"width"}},{"src":{"process":"h","port":"out"},"tgt":{"process":"canvas","port":"height"}},{"src":{"process":"img","port":"image"},"tgt":{"process":"w","port":"in"},"metadata":{"route":0}},{"src":{"process":"img","port":"image"},"tgt":{"process":"h","port":"in"},"metadata":{"route":0}},{"src":{"process":"drawImage","port":"drawimage"},"tgt":{"process":"canvas/Draw_n4cqh","port":"commands"}},{"src":{"process":"canvas","port":"canvas"},"tgt":{"process":"canvas/Draw_n4cqh","port":"canvas"}},{"src":{"process":"img","port":"image"},"tgt":{"process":"core/RepeatAsync_u0yan","port":"in"},"metadata":{"route":0}},{"src":{"process":"core/RepeatAsync_u0yan","port":"out"},"tgt":{"process":"canvas/Draw_n4cqh","port":"tick"}},{"data":"width","tgt":{"process":"w","port":"key"}},{"data":"height","tgt":{"process":"h","port":"key"}},{"data":{"x":0,"y":0},"tgt":{"process":"drawImage","port":"destpoint"}}]}

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Loads an image from given url, sends the element';
  c.icon = 'picture-o';
  c.inPorts.add('url', {
    datatype: 'string',
    description: 'Image URL'
  });
  c.inPorts.add('crossorigin', {
    datatype: 'string',
    description: 'crossorigin Anonymous for CORS-enabled server',
    required: false
  });
  c.outPorts.add('image', {
    datatype: 'object',
    description: 'Loaded image'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'url',
    params: 'crossorigin',
    out: 'image',
    forwardGroups: true,
    async: true
  }, function(url, groups, out, callback) {
    var image;
    image = new Image();
    if (c.params.crossorigin) {
      image.crossOrigin = c.params.crossorigin;
    }
    image.onload = function() {
      out.beginGroup(url);
      out.send(image);
      out.endGroup();
      callback();
    };
    image.onerror = function(err) {
      err.url = url;
      return callback(err);
    };
    image.src = url;
  });
};


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Load image from URL and get dimensions';
  c.icon = 'picture-o';
  c.inPorts.add('url', {
    datatype: 'string',
    description: 'URL to load image'
  });
  c.outPorts.add('dimensions', {
    datatype: 'object',
    description: 'Image dimensions'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return noflo.helpers.WirePattern(c, {
    "in": 'url',
    out: 'dimensions',
    forwardGroups: true,
    async: true
  }, function(url, groups, out, callback) {
    var image;
    image = new Image();
    image.onload = function() {
      var dimensions;
      if (((image.naturalWidth != null) && image.naturalWidth === 0) || image.width === 0) {
        image.onerror(new Error(url + " didn't come back as a valid image."));
        return;
      }
      dimensions = {
        width: image.width,
        height: image.height
      };
      out.beginGroup(url);
      out.send(dimensions);
      out.endGroup();
      return callback();
    };
    image.onerror = function(err) {
      err.url = url;
      return callback(err);
    };
    image.src = url;
  });
};


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Abort an IndexedDB transaction';
  c.inPorts.add('transaction', {
    datatype: 'object'
  });
  c.outPorts.add('transaction', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    transaction: ['transaction', 'error']
  };
  return c.process(function(input, output) {
    var transaction;
    if (!input.hasData('transaction')) {
      return;
    }
    transaction = input.getData('transaction');
    transaction.onerror = function(err) {
      return output.done(err);
    };
    transaction.onabort = function(err) {
      return output.sendDone({
        transaction: transaction
      });
    };
    return transaction.abort();
  });
};


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Start an IndexedDB transaction';
  c.inPorts.add('stores', {
    datatype: 'string'
  });
  c.inPorts.add('db', {
    datatype: 'object'
  });
  c.inPorts.add('mode', {
    datatype: 'string',
    "default": 'readwrite',
    control: true
  });
  c.outPorts.add('transaction', {
    datatype: 'object'
  });
  c.outPorts.add('db', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.outPorts.add('complete', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var db, e, mode, ref, stores, transaction;
    if (!input.hasData('db', 'stores')) {
      return;
    }
    mode = input.hasData('mode') ? input.getData('mode') : 'readwrite';
    ref = input.getData('db', 'stores'), db = ref[0], stores = ref[1];
    if (typeof stores === 'string') {
      stores = stores.split(',');
    }
    try {
      transaction = db.transaction(stores, mode);
    } catch (error) {
      e = error;
      return output.done(e);
    }
    transaction.oncomplete = function() {
      output.send({
        complete: true
      });
      transaction.onerror = null;
      transaction.oncomplete = null;
      return output.done();
    };
    transaction.onerror = function(err) {
      return output.done(err);
    };
    output.send({
      transaction: transaction
    });
    return output.send({
      db: db
    });
  });
};


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Close an IndexedDB database';
  c.inPorts.add('db', {
    datatype: 'object'
  });
  c.outPorts.add('closed', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var db;
    if (!input.hasData('db')) {
      return;
    }
    db = input.getData('db');
    db.onclose = function() {
      return output.sendDone({
        closed: true
      });
    };
    return db.close();
  });
};


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Add an index to an IndexedDB database';
  c.inPorts.add('store', {
    datatype: 'object'
  });
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.inPorts.add('keypath', {
    datatype: 'string'
  });
  c.inPorts.add('unique', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.inPorts.add('multientry', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.outPorts.add('index', {
    datatype: 'object'
  });
  c.outPorts.add('store', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var index, keyPath, multiEntry, name, ref, store, unique;
    if (!input.hasData('store', 'name', 'keypath')) {
      return;
    }
    unique = input.hasData('unique') ? input.getData('unique') : false;
    multiEntry = input.hasData('multientry') ? input.getData('multientry') : false;
    ref = input.getData('store', 'name', 'keypath'), store = ref[0], name = ref[1], keyPath = ref[2];
    store.onerror = function(err) {
      return output.done(err);
    };
    index = store.createIndex(name, keyPath, {
      unique: unique,
      multiEntry: multiEntry
    });
    store.onerror = null;
    output.send({
      index: index
    });
    return output.sendDone({
      store: store
    });
  });
};


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Add an object store to an IndexedDB database';
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.inPorts.add('db', {
    datatype: 'object'
  });
  c.inPorts.add('keypath', {
    datatype: 'string',
    control: true
  });
  c.inPorts.add('autoincrement', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.outPorts.add('store', {
    datatype: 'object'
  });
  c.outPorts.add('db', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var autoIncrement, db, keyPath, name, ref, store;
    if (!input.hasData('name', 'db')) {
      return;
    }
    keyPath = input.hasData('keypath') ? input.getData('keypath') : '';
    autoIncrement = input.hasData('autoincrement') ? input.getData('autoincrement') : false;
    ref = input.getData('name', 'db'), name = ref[0], db = ref[1];
    db.transaction.onerror = function(err) {
      return output.done(err);
    };
    store = db.createObjectStore(name, {
      keyPath: keyPath,
      autoIncrement: autoIncrement
    });
    db.transaction.onerror = null;
    output.send({
      store: store
    });
    output.send({
      db: db
    });
    return output.done();
  });
};


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Remove an item from an IndexedDB database';
  c.icon = 'trash';
  c.inPorts.add('store', {
    datatype: 'object'
  });
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('store', {
    datatype: 'object'
  });
  c.outPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var key, ref, req, store;
    if (!input.hasData('store', 'key')) {
      return;
    }
    ref = input.getData('store', 'key'), store = ref[0], key = ref[1];
    req = store["delete"](key);
    req.onerror = function(err) {
      return output.done(err);
    };
    return req.onsuccess = function(e) {
      output.send({
        store: store
      });
      output.send({
        key: key
      });
      return output.done();
    };
  });
};


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var indexedDB, noflo;

noflo = __webpack_require__(0);

indexedDB = __webpack_require__(36);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Delete an IndexedDB database';
  c.icon = 'trash';
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.outPorts.add('deleted', {
    datatype: 'bang'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var name, req;
    if (!input.hasData('name')) {
      return;
    }
    name = input.getData('name');
    req = indexedDB.deleteDatabase(name);
    req.onerror = function(err) {
      return output.done(err);
    };
    return req.onsuccess = function() {
      return output.sendDone({
        deleted: true
      });
    };
  });
};


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Delete an object store from an IndexedDB database';
  c.icon = 'trash';
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.inPorts.add('db', {
    datatype: 'object'
  });
  c.outPorts.add('db', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var db, name, ref;
    if (!input.hasData('name', 'db')) {
      return;
    }
    ref = input.getData('name', 'db'), name = ref[0], db = ref[1];
    db.transaction.onerror = function(err) {
      return output.done(err);
    };
    db.deleteObjectStore(name);
    db.transaction.onerror = null;
    return output.sendDone({
      db: db
    });
  });
};


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get an entry from an IndexedDB database';
  c.inPorts.add('store', {
    datatype: 'object'
  });
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('store', {
    datatype: 'object'
  });
  c.outPorts.add('item', {
    datatype: 'all'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var key, ref, req, store;
    if (!input.hasData('store', 'key')) {
      return;
    }
    ref = input.getData('store', 'key'), store = ref[0], key = ref[1];
    req = store.get(key);
    output.send({
      store: store
    });
    req.onerror = function(err) {
      return output.done(err);
    };
    return req.onsuccess = function(e) {
      return output.sendDone({
        item: e.target.result
      });
    };
  });
};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get an index from an IndexedDB database';
  c.inPorts.add('store', {
    datatype: 'object'
  });
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.outPorts.add('index', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var index, name, ref, store;
    if (!input.hasData('store', 'name')) {
      return;
    }
    ref = input.getData('store', 'name'), store = ref[0], name = ref[1];
    store.onerror = function(err) {
      return output.done(err);
    };
    index = store.index(name);
    store.onerror = null;
    return output.sendDone({
      index: index
    });
  });
};


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get an object store from an IndexedDB database';
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.inPorts.add('transaction', {
    datatype: 'object'
  });
  c.outPorts.add('store', {
    datatype: 'object'
  });
  c.outPorts.add('transaction', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var name, ref, store, transaction;
    if (!input.hasData('name', 'transaction')) {
      return;
    }
    ref = input.getData('name', 'transaction'), name = ref[0], transaction = ref[1];
    transaction.onerror = function(err) {
      return output.done(err);
    };
    store = transaction.objectStore(name);
    transaction.onerror = null;
    output.send({
      store: store
    });
    return output.sendDone({
      transaction: transaction
    });
  });
};


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

var indexedDB, noflo;

noflo = __webpack_require__(0);

indexedDB = __webpack_require__(36);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Open an IndexedDB database';
  c.inPorts.add('name', {
    datatype: 'string'
  });
  c.inPorts.add('version', {
    datatype: 'integer'
  });
  c.outPorts.add('upgrade', {
    datatype: 'object'
  });
  c.outPorts.add('db', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var name, ref, req, version;
    if (!input.hasData('name', 'version')) {
      return;
    }
    ref = input.getData('name', 'version'), name = ref[0], version = ref[1];
    req = indexedDB.open(name, parseInt(version));
    req.onerror = function(err) {
      return output.done(err);
    };
    req.onupgradeneeded = function(e) {
      return output.send({
        upgrade: {
          oldVersion: e.oldVersion,
          newVersion: parseInt(version),
          db: e.target.result
        }
      });
    };
    return req.onsuccess = function(e) {
      return output.sendDone({
        db: e.target.result
      });
    };
  });
};


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Store an object into an IndexedDB store';
  c.inPorts.add('store', {
    datatype: 'object'
  });
  c.inPorts.add('value', {
    datatype: 'all'
  });
  c.outPorts.add('store', {
    datatype: 'object'
  });
  c.outPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('value', {
    datatype: 'all'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var ref, req, store, value;
    if (!input.hasData('store', 'value')) {
      return;
    }
    ref = input.getData('store', 'value'), store = ref[0], value = ref[1];
    req = store.put(value);
    output.send({
      store: store
    });
    req.onerror = function(err) {
      return output.done(err);
    };
    return req.onsuccess = function(e) {
      output.send({
        key: e.target.result
      });
      return output.sendDone({
        value: value
      });
    };
  });
};


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'search';
  c.description = 'Query a store in an IndexedDB database';
  c.inPorts.add('store', {
    datatype: 'object'
  });
  c.inPorts.add('range', {
    datatype: 'object'
  });
  c.inPorts.add('all', {
    datatype: 'bang'
  });
  c.outPorts.add('item', {
    datatype: 'all'
  });
  c.outPorts.add('range', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var all, range, ref, ref1, req, step, store;
    if (!input.hasData('store')) {
      return;
    }
    step = function(e) {
      var cursor;
      cursor = e.target.result;
      if (!cursor) {
        return output.done();
      }
      output.send({
        item: cursor.value
      });
      return cursor["continue"]();
    };
    if (input.hasData('all')) {
      ref = input.getData('store', 'all'), store = ref[0], all = ref[1];
      req = store.openCursor();
      req.onerror = function(err) {
        return output.done(err);
      };
      req.onsuccess = step;
      return;
    }
    if (input.hasData('range')) {
      ref1 = input.getData('store', 'range'), store = ref1[0], range = ref1[1];
      output.send({
        range: range
      });
      req = store.openCursor(range);
      req.onerror = function(err) {
        return output.done(err);
      };
      return req.onsuccess = step;
    }
  });
};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'search';
  c.description = 'Query starting from a key in store in an IndexedDB database';
  c.inPorts.add('value', {
    datatype: 'all'
  });
  c.inPorts.add('including', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.outPorts.add('range', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var including, range, value;
    if (!input.hasData('value')) {
      return;
    }
    value = input.getData('value');
    including = input.hasData('including') ? input.getData('including') : false;
    range = IDBKeyRange.lowerBound(value, including);
    return output.sendDone({
      range: range
    });
  });
};


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'search';
  c.description = 'Query only a key in store in an IndexedDB database';
  c.inPorts.add('value', {
    datatype: 'all'
  });
  c.outPorts.add('range', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var range, value;
    if (!input.hasData('value')) {
      return;
    }
    value = input.getData('value');
    range = IDBKeyRange.only(value);
    return output.sendDone({
      range: range
    });
  });
};


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'search';
  c.description = 'Query up to a key in store in an IndexedDB database';
  c.inPorts.add('value', {
    datatype: 'all'
  });
  c.inPorts.add('including', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.outPorts.add('range', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var including, range, value;
    if (!input.hasData('value')) {
      return;
    }
    value = input.getData('value');
    including = input.hasData('including') ? input.getData('including') : false;
    range = IDBKeyRange.upperBound(value, including);
    return output.sendDone({
      range: range
    });
  });
};


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'code-fork';
  c.description = 'Route upgrades between IndexeDB database versions';
  c.inPorts.add('upgrade', {
    datatype: 'object'
  });
  c.outPorts.add('versions', {
    datatype: 'object',
    addressable: true
  });
  c.outPorts.add('missed', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    upgrade: ['versions', 'missed']
  };
  return c.process(function(input, output) {
    var migration, missed, upgrade;
    if (!input.hasData('upgrade')) {
      return;
    }
    upgrade = input.getData('upgrade');
    missed = false;
    migration = 0;
    while (migration < upgrade.newVersion) {
      if (migration < upgrade.oldVersion) {
        migration++;
        continue;
      }
      if (!c.outPorts.versions.isAttached(migration)) {
        migration++;
        missed = true;
        continue;
      }
      output.send({
        versions: new noflo.IP('data', upgrade.db, {
          index: migration
        })
      });
      migration++;
    }
    if (!missed) {
      return output.done();
    }
    return output.sendDone({
      missed: upgrade.db
    });
  });
};


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'i-cursor';
  c.description = 'focus element';
  c.inPorts.add('element', {
    datatype: 'object',
    description: 'element to be focused',
    control: true
  });
  c.inPorts.add('trigger', {
    datatype: 'bang',
    description: 'trigger focus'
  });
  c.outPorts.add('out', {
    datatype: 'bang'
  });
  return c.process(function(input, output) {
    var element;
    if (!input.hasData('element', 'trigger')) {
      return;
    }
    element = input.getData('element');
    input.getData('trigger');
    return window.setTimeout(function() {
      element.focus();
      return output.sendDone({
        out: true
      });
    }, 0);
  });
};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Listen to changes on an input element';
  c.icon = 'hourglass';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('value', {
    datatype: 'object'
  });
  c.elements = [];
  c.tearDown = function(callback) {
    var element, i, len, ref;
    ref = c.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      element = ref[i];
      element.el.removeEventListener('change', element.listener, false);
      element.ctx.deactivate();
    }
    c.elements = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var data;
    if (!input.hasData('element')) {
      return;
    }
    data = {
      el: input.getData('element'),
      listener: function(event) {
        event.preventDefault();
        event.stopPropagation();
        return output.send({
          value: event.target.value
        });
      },
      ctx: context
    };
    data.el.addEventListener('change', data.listener, false);
    c.elements.push(data);
  });
};


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Listen to drag events on a DOM element';
  c.icon = 'arrows';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('start', {
    datatype: 'object'
  });
  c.outPorts.add('movey', {
    datatype: 'number'
  });
  c.outPorts.add('movex', {
    datatype: 'number'
  });
  c.outPorts.add('end', {
    datatype: 'object'
  });
  c.elements = [];
  c.tearDown = function(callback) {
    var element, i, len, ref;
    ref = c.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      element = ref[i];
      element.el.removeEventListener('dragstart', element.dragstart, false);
      element.el.removeEventListener('drag', element.dragmove, false);
      element.el.removeEventListener('dragend', element.dragend, false);
      element.ctx.deactivate();
    }
    c.elements = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var data;
    if (!input.hasData('element')) {
      return;
    }
    data = {
      el: input.getData('element'),
      dragstart: function(event) {
        event.stopPropagation();
        return output.send({
          start: event
        });
      },
      dragmove: function(event) {
        event.preventDefault();
        event.stopPropagation();
        return output.send({
          movex: event.clientX,
          movey: event.clientY
        });
      },
      dragend: function(event) {
        event.preventDefault();
        event.stopPropagation();
        return output.send({
          end: event
        });
      },
      ctx: context
    };
    data.el.addEventListener('dragstart', data.dragstart, false);
    data.el.addEventListener('drag', data.dragmove, false);
    data.el.addEventListener('dragend', data.dragend, false);
    c.elements.push(data);
  });
};


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen for hash changes in browser\'s URL bar';
  c.icon = 'slack';
  c.inPorts.add('start', {
    datatype: 'bang',
    description: 'Start listening for hash changes'
  });
  c.inPorts.add('stop', {
    datatype: 'bang',
    description: 'Stop listening for hash changes'
  });
  c.outPorts.add('initial', {
    datatype: 'string'
  });
  c.outPorts.add('change', {
    datatype: 'string'
  });
  c.current = null;
  c.subscriber = null;
  unsubscribe = function() {
    if (!c.subscriber) {
      return;
    }
    window.removeEventListener('hashchange', c.subscriber.callback, false);
    c.subscriber.ctx.deactivate();
    return c.subscriber = null;
  };
  c.tearDown = function(callback) {
    c.current = null;
    unsubscribe();
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var sendHash;
    if (input.hasData('start')) {
      input.getData('start');
      unsubscribe();
      sendHash = function(port) {
        var oldHash, payload;
        oldHash = c.current;
        c.current = window.location.href.split('#')[1] || '';
        if (oldHash) {
          output.send({
            change: new noflo.IP('openBracket', oldHash)
          });
        }
        payload = {};
        payload[port] = c.current;
        output.send(payload);
        if (oldHash) {
          return output.send({
            change: new noflo.IP('closeBracket', oldHash)
          });
        }
      };
      c.subscriber = {
        callback: function(event) {
          return sendHash('change');
        },
        ctx: context
      };
      sendHash('initial');
      window.addEventListener('hashchange', c.subscriber.callback, false);
      return;
    }
    if (input.hasData('stop')) {
      input.getData('stop');
      unsubscribe();
      output.done();
    }
  });
};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubcribe;
  c = new noflo.Component;
  c.description = 'Listen for key presses on a given DOM element';
  c.icon = 'keyboard-o';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('stop', {
    datatype: 'object'
  });
  c.outPorts.add('keypress', {
    datatype: 'integer'
  });
  c.elements = [];
  unsubcribe = function(element) {
    element.el.removeEventListener('keypress', element.listener, false);
    return element.ctx.deactivate();
  };
  c.tearDown = function(callback) {
    var element, i, len, ref;
    ref = c.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      element = ref[i];
      unsubscribe(element);
    }
    c.elements = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var ctx, data, el, element, i, len, ref;
    if (input.hasData('element')) {
      data = {
        el: input.getData('element'),
        listener: function(event) {
          return output.send({
            keypress: event.keyCode
          });
        },
        ctx: context
      };
      data.el.addEventListener('keypress', data.listener, false);
      c.elements.push(data);
      return;
    }
    if (input.hasData('stop')) {
      element = input.getData('stop');
      ctx = null;
      ref = c.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        if (el.el !== element) {
          continue;
        }
        ctx = el;
      }
      if (!ctx) {
        return;
      }
      unsubscribe(ctx);
      return output.done();
    }
  });
};


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen for keyboard shortcuts and route them';
  c.icon = 'keyboard-o';
  c.inPorts.add('keys', {
    datatype: 'array'
  });
  c.inPorts.add('ignoreinput', {
    datatype: 'boolean',
    "default": true,
    control: true
  });
  c.inPorts.add('stop', {
    datatype: 'bang'
  });
  c.outPorts.add('shortcut', {
    datatype: 'bang',
    addressable: true
  });
  c.outPorts.add('missed', {
    datatype: 'integer'
  });
  c.subscriber = null;
  unsubscribe = function() {
    if (!c.subscriber) {
      return;
    }
    document.removeEventListener('keydown', c.subscriber.callback, false);
    c.subscriber.ctx.deactivate();
    return c.subscriber = null;
  };
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var i, ignoreInput, index, key, keys, len;
    if (input.hasData('keys')) {
      keys = input.getData('keys');
      unsubscribe();
      if (typeof keys === 'string') {
        keys = keys.split(',');
      }
      for (index = i = 0, len = keys.length; i < len; index = ++i) {
        key = keys[index];
        switch (key) {
          case '-':
            keys[index] = 189;
            break;
          case '=':
            keys[index] = 187;
            break;
          case '0':
            keys[index] = 48;
            break;
          case 'a':
            keys[index] = 65;
            break;
          case 'x':
            keys[index] = 88;
            break;
          case 'c':
            keys[index] = 67;
            break;
          case 'v':
            keys[index] = 86;
            break;
          case 'z':
            keys[index] = 90;
            break;
          case 'r':
            keys[index] = 82;
        }
      }
      ignoreInput = input.hasData('ignoreinput') ? input.getData('ignoreinput') : true;
      c.subscriber = {
        callback: function(event) {
          var route;
          if (!(event.ctrlKey || event.metaKey)) {
            return;
          }
          if (event.target.tagName === 'TEXTAREA' && ignoreInput) {
            return;
          }
          if (event.target.tagName === 'INPUT' && ignoreInput) {
            return;
          }
          if (String(event.target.contentEditable) === 'true' && ignoreInput) {
            return;
          }
          route = keys.indexOf(event.keyCode);
          if (route === -1) {
            output.send({
              missed: event.keyCode
            });
            return;
          }
          event.preventDefault();
          event.stopPropagation();
          return output.send({
            shortcut: new noflo.IP('data', event.keyCode, {
              index: route
            })
          });
        },
        ctx: context
      };
      document.addEventListener('keydown', c.subscriber.callback, false);
      return;
    }
    if (input.hasData('stop')) {
      input.getData('stop');
      unsubscribe();
      output.done();
    }
  });
};


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'mouse-pointer';
  c.description = 'Listen to mouse events on a DOM element';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('click', {
    datatype: 'object'
  });
  c.outPorts.add('dblclick', {
    datatype: 'object'
  });
  c.elements = [];
  c.tearDown = function(callback) {
    var element, i, len, ref;
    ref = c.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      element = ref[i];
      element.el.removeEventListener('click', element.click, false);
      element.el.removeEventListener('dblclick', element.dblclick, false);
      element.ctx.deactivate();
    }
    c.elements = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var data;
    if (!input.hasData('element')) {
      return;
    }
    data = {
      el: input.getData('element'),
      click: function(event) {
        event.preventDefault();
        event.stopPropagation();
        return output.send({
          click: event
        });
      },
      dblclick: function(event) {
        event.preventDefault();
        event.stopPropagation();
        return output.send({
          dblclick: event
        });
      },
      ctx: context
    };
    data.el.addEventListener('click', data.click, false);
    data.el.addEventListener('dblclick', data.dblclick, false);
    c.elements.push(data);
  });
};


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, event, events, i, len;
  c = new noflo.Component;
  c.description = 'Listen to pointer events on a DOM element';
  c.icon = 'pencil-square-o';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.inPorts.add('action', {
    datatype: 'string',
    "default": 'none',
    control: true
  });
  events = ['down', 'up', 'cancel', 'move', 'over', 'out', 'enter', 'leave'];
  for (i = 0, len = events.length; i < len; i++) {
    event = events[i];
    c.outPorts.add(event, {
      datatype: 'object',
      description: "Sends event on pointer" + event
    });
  }
  c.elements = [];
  c.tearDown = function(callback) {
    var element, j, k, len1, len2, ref;
    ref = c.elements;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      element = ref[j];
      if (element.el.removeAttribute) {
        element.el.removeAttribute('touch-action');
      }
      for (k = 0, len2 = events.length; k < len2; k++) {
        event = events[k];
        element.el.removeEventListener("pointer" + event, element["pointer" + event], false);
      }
      element.ctx.deactivate();
    }
    c.elements = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var action, data;
    if (!input.hasData('element')) {
      return;
    }
    action = input.hasData('action') ? input.getData('action') : 'none';
    data = {
      el: input.getData('element'),
      ctx: context
    };
    data.el.setAttribute('touch-action', action);
    events.forEach(function(event) {
      data["pointer" + event] = function(ev) {
        var payload;
        ev.preventDefault();
        ev.stopPropagation();
        payload = {};
        payload[event] = ev.target.value;
        return output.send(payload);
      };
      return data.el.addEventListener("pointer" + event, data["pointer" + event], false);
    });
    c.elements.push(data);
  });
};


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen to window resize events';
  c.icon = 'desktop';
  c.inPorts.add('start', {
    datatype: 'bang',
    description: 'Start listening for screen resizes'
  });
  c.inPorts.add('stop', {
    datatype: 'bang',
    description: 'Stop listening for screen resizes'
  });
  c.outPorts.add('width', {
    datatype: 'number'
  });
  c.outPorts.add('height', {
    datatype: 'number'
  });
  c.subscriber = null;
  unsubscribe = function() {
    if (!c.subscriber) {
      return;
    }
    window.removeEventListener('resize', c.subscriber.callback, false);
    c.subscriber.ctx.deactivate();
    return c.subscriber = null;
  };
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    if (input.hasData('start')) {
      input.getData('start');
      unsubscribe();
      c.subscriber = {
        callback: function(event) {
          return output.send({
            width: window.innerWidth,
            height: window.innerHeight
          });
        },
        ctx: context
      };
      output.send({
        width: window.innerWidth,
        height: window.innerHeight
      });
      window.addEventListener('resize', c.subscriber.callback, false);
      return;
    }
    if (input.hasData('stop')) {
      input.getData('stop');
      unsubscribe();
      output.done();
    }
  });
};


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen to scroll events on the browser window';
  c.icon = 'arrows-v';
  c.inPorts.add('start', {
    datatype: 'bang',
    description: 'Start listening for hash changes'
  });
  c.inPorts.add('stop', {
    datatype: 'bang',
    description: 'Stop listening for hash changes'
  });
  c.outPorts.add('top', {
    datatype: 'number'
  });
  c.outPorts.add('bottom', {
    datatype: 'number'
  });
  c.outPorts.add('left', {
    datatype: 'number'
  });
  c.outPorts.add('right', {
    datatype: 'number'
  });
  c.subscriber = null;
  unsubscribe = function() {
    if (!c.subscriber) {
      return;
    }
    window.removeEventListener('scroll', c.subscriber.callback, false);
    c.subscriber.ctx.deactivate();
    return c.subscriber = null;
  };
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    if (input.hasData('start')) {
      input.getData('start');
      unsubscribe();
      c.subscriber = {
        callback: function(event) {
          var left, top;
          top = window.scrollY;
          left = window.scrollX;
          return output.send({
            top: top,
            bottom: top + window.innerHeight,
            left: left,
            right: left.window.innerWidth
          });
        },
        ctx: context
      };
      window.addEventListener('scroll', c.subscriber.callback, false);
      return;
    }
    if (input.hasData('stop')) {
      input.getData('stop');
      unsubscribe();
      output.done();
    }
  });
};


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen for user\'s microphone and recognize phrases';
  c.icon = 'microphone';
  c.inPorts.add('start', {
    datatype: 'bang',
    description: 'Start listening for hash changes'
  });
  c.inPorts.add('stop', {
    datatype: 'bang',
    description: 'Stop listening for hash changes'
  });
  c.outPorts.add('result', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.subscriber = null;
  unsubscribe = function() {
    if (!c.subscriber) {
      return;
    }
    c.subscriber.recognition.stop();
    c.subscriber.ctx.deactivate();
    return c.subscriber = null;
  };
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    if (input.hasData('start')) {
      input.getData('start');
      unsubscribe();
      if (!window.webkitSpeechRecognition) {
        output.done(new Error('Speech recognition support not available'));
        return;
      }
      c.subscriber = {
        sent: [],
        callback: function(event) {
          var i, idx, len, ref, result, results;
          ref = event.results;
          results = [];
          for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
            result = ref[idx];
            if (!result.isFinal) {
              continue;
            }
            if (c.subscriber.sent.indexOf(idx) !== -1) {
              continue;
            }
            output.send({
              result: result[0].transcript
            });
            results.push(c.subscriber.sent.push(idx));
          }
          return results;
        },
        error: function(err) {
          return output.send({
            error: err
          });
        },
        ctx: context
      };
      c.subscriber.recognition = new window.webkitSpeechRecognition;
      c.subscriber.recognition.continuous = true;
      c.subscriber.recognition.start();
      c.subscriber.recognition.onresult = c.subscriber.callback;
      c.subscriber.recognition.onerror = c.subscriber.error;
      return;
    }
    if (input.hasData('stop')) {
      input.getData('stop');
      unsubscribe();
      output.done();
    }
  });
};


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Listen to touch events on a DOM element';
  c.icon = 'hand-o-up';
  c.inPorts.add('element', {
    datatype: 'object'
  });
  c.outPorts.add('start', {
    datatype: 'object'
  });
  c.outPorts.add('movex', {
    datatype: 'number'
  });
  c.outPorts.add('movey', {
    datatype: 'number'
  });
  c.outPorts.add('end', {
    datatype: 'object'
  });
  c.elements = [];
  c.tearDown = function(callback) {
    var element, i, len, ref;
    ref = c.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      element = ref[i];
      element.el.removeEventListener('touchstart', element.touchstart, false);
      element.el.removeEventListener('touchmove', element.touchmove, false);
      element.el.removeEventListener('touchend', element.touchend, false);
      element.ctx.deactivate();
    }
    c.elements = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var data;
    if (!input.hasData('element')) {
      return;
    }
    data = {
      el: input.getData('element'),
      touchstart: function(event) {
        var i, idx, len, ref, results, touch;
        event.preventDefault();
        event.stopPropagation();
        if (!event.changedTouches) {
          return;
        }
        if (!event.changedTouches.length) {
          return;
        }
        ref = event.changedTouches;
        results = [];
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          touch = ref[idx];
          results.push(output.send({
            start: new noflo.IP('data', event, {
              touch: idx
            })
          }));
        }
        return results;
      },
      touchmove: function(event) {
        var i, idx, len, ref, results, touch;
        event.preventDefault();
        event.stopPropagation();
        if (!event.changedTouches) {
          return;
        }
        if (!event.changedTouches.length) {
          return;
        }
        ref = event.changedTouches;
        results = [];
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          touch = ref[idx];
          results.push(output.send({
            movex: new noflo.IP('data', touch.pageX, {
              touch: idx
            }),
            movey: new noflo.IP('data', touch.pageY, {
              touch: idx
            })
          }));
        }
        return results;
      },
      touchend: function(event) {
        var i, idx, len, ref, results, touch;
        event.preventDefault();
        event.stopPropagation();
        if (!event.changedTouches) {
          return;
        }
        if (!event.changedTouches.length) {
          return;
        }
        ref = event.changedTouches;
        results = [];
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          touch = ref[idx];
          results.push(output.send({
            end: new noflo.IP('data', event, {
              touch: idx
            })
          }));
        }
        return results;
      },
      ctx: context
    };
    data.el.addEventListener('touchstart', data.touchstart, false);
    data.el.addEventListener('touchmove', data.touchmove, false);
    data.el.addEventListener('touchend', data.touchend, false);
    c.elements.push(data);
  });
};


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Read the coordinates from a DOM event';
  c.icon = 'map-marker';
  c.inPorts.add('event', {
    datatype: 'object'
  });
  c.outPorts.add('screen', {
    datatype: 'object'
  });
  c.outPorts.add('client', {
    datatype: 'object'
  });
  c.outPorts.add('page', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    event: ['screen', 'client', 'page']
  };
  return c.process(function(input, output) {
    var event;
    if (!input.hasData('event')) {
      return;
    }
    event = input.getData('event');
    return output.sendDone({
      screen: {
        x: event.screenX,
        y: event.screenY
      },
      client: {
        x: event.clientX,
        y: event.clientY
      },
      page: {
        x: event.pageX,
        y: event.pageY
      }
    });
  });
};


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Read the state of a gamepad';
  c.icon = 'gamepad';
  c.inPorts.add('gamepad', {
    datatype: 'integer'
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.lastTimestamps = {};
  c.tearDown = function(callback) {
    c.lastTimestamps = {};
    return callback();
  };
  return c.process(function(input, output) {
    var gamepad, gamepadState;
    if (!input.hasData('gamepad')) {
      return;
    }
    gamepad = input.getData('gamepad');
    if (!navigator.webkitGetGamepads) {
      output.done(new Error("No WebKit Gamepad API available"));
      return;
    }
    gamepadState = navigator.webkitGetGamepads()[gamepad];
    if (!gamepadState) {
      output.done(new Error("Gamepad '" + gamepad + "' not available"));
    }
    if (c.lastTimestamps[gamepad] = gamepadState.timestamp) {
      output.done();
      return;
    }
    c.lastTimestamps[gamepad] = gamepadState.timestamp;
    return output.sendDone({
      out: gamepadState
    });
  });
};


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Set the hash in browser\'s URL bar';
  c.icon = 'slack';
  c.inPorts.add('hash', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var hash;
    if (!input.hasData('hash')) {
      return;
    }
    hash = input.getData('hash');
    window.location.hash = "#" + hash;
    return output.sendDone({
      out: hash
    });
  });
};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get an item from LocalStorage';
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('item', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    key: ['item', 'error']
  };
  return c.process(function(input, output) {
    var key, value;
    if (!input.hasData('key')) {
      return;
    }
    key = input.getData('key');
    value = localStorage.getItem(key);
    if (!value) {
      output.done(new Error(key + " not found"));
      return;
    }
    output.sendDone({
      item: value
    });
  });
};


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Add an item to a list';
  c.inPorts.add('list', {
    datatype: 'string',
    control: true
  });
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('key', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    key: ['key']
  };
  return c.process(function(input, output) {
    var items, key, list, listKey, ref;
    if (!input.hasData('list', 'key')) {
      return;
    }
    ref = input.getData('list', 'key'), listKey = ref[0], key = ref[1];
    list = localStorage.getItem(listKey);
    if (list) {
      items = list.split(',');
    } else {
      items = [];
    }
    if (items.indexOf(key) === -1) {
      items.push(key);
      localStorage.setItem(listKey, items.join(','));
    }
    output.sendDone({
      key: key
    });
  });
};


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Get an item from a list';
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('items', {
    datatype: 'string'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    key: ['items', 'error']
  };
  return c.process(function(input, output) {
    var i, item, key, len, list, value;
    if (!input.hasData('key')) {
      return;
    }
    key = input.getData('key');
    value = localStorage.getItem(key);
    if (!value) {
      output.done(new Error(key + " not found"));
      return;
    }
    list = value.split(',');
    output.send({
      items: new noflo.IP('openBracket', key)
    });
    for (i = 0, len = list.length; i < len; i++) {
      item = list[i];
      output.send({
        items: item
      });
    }
    output.send({
      items: new noflo.IP('closeBracket', key)
    });
    output.done();
  });
};


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Remove an item from a list';
  c.icon = 'trash';
  c.inPorts.add('list', {
    datatype: 'string',
    control: true
  });
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('key', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    key: ['key']
  };
  return c.process(function(input, output) {
    var items, key, list, listKey, ref;
    if (!input.hasData('list', 'key')) {
      return;
    }
    ref = input.getData('list', 'key'), listKey = ref[0], key = ref[1];
    list = localStorage.getItem(listKey);
    if (list) {
      items = list.split(',');
    } else {
      items = [];
    }
    if (items.indexOf(key) !== -1) {
      items.splice(items.indexOf(key), 1);
      localStorage.setItem(listKey, items.join(','));
    }
    output.sendDone({
      key: key
    });
  });
};


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen for changes in localStorage';
  c.icon = 'hourglass';
  c.inPorts.add('start', {
    datatype: 'bang'
  });
  c.inPorts.add('stop', {
    datatype: 'bang'
  });
  c.outPorts.add('changed', {
    datatype: 'object'
  });
  c.outPorts.add('removed', {
    datatype: 'object'
  });
  c.listeners = {};
  unsubscribe = function(scope) {
    if (!c.listeners[scope]) {
      return;
    }
    window.removeEventListener('storage', c.listeners[scope].callback, false);
    return c.listeners[scope].ctx.deactivate();
  };
  c.tearDown = function(callback) {
    var ref, scope, val;
    ref = c.listeners;
    for (scope in ref) {
      val = ref[scope];
      unsubscribe(scope);
    }
    c.listeners = {};
    return callback();
  };
  return c.process(function(input, output, context) {
    var listener;
    if (input.hasData('stop')) {
      input.getData('stop');
      unsubscribe(input.scope);
      output.done();
      return;
    }
    if (input.hasData('start')) {
      input.getData('start');
      unsubscribe(input.scope);
      listener = {
        ctx: context,
        callback: function(event) {
          if (event.newValue === null) {
            output.send({
              removed: {
                key: event.key,
                value: null
              }
            });
            return;
          }
          output.send({
            changed: {
              key: event.key,
              value: event.newValue
            }
          });
        }
      };
      window.addEventListener('storage', listener.callback, false);
      c.listeners[input.scope] = listener;
    }
  });
};


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Remove an item from LocalStorage';
  c.icon = 'trash';
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.outPorts.add('item', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    key: ['item']
  };
  return c.process(function(input, output) {
    var key;
    if (!input.hasData('key')) {
      return;
    }
    key = input.getData('key');
    localStorage.removeItem(key);
    output.sendDone({
      item: null
    });
  });
};


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Save an item into LocalStorage';
  c.inPorts.add('key', {
    datatype: 'string'
  });
  c.inPorts.add('value', {
    datatype: 'string'
  });
  c.outPorts.add('item', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    key: ['item']
  };
  return c.process(function(input, output) {
    var key, ref, value;
    if (!input.hasData('key', 'value')) {
      return;
    }
    ref = input.getData('key', 'value'), key = ref[0], value = ref[1];
    localStorage.setItem(key, value);
    output.sendDone({
      item: value
    });
  });
};


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Accumulate numbers coming from the input port',
    inPorts: {
      "in": {
        datatype: 'number',
        description: 'Numbers to accumulate',
        required: true
      },
      reset: {
        datatype: 'bang',
        description: 'Reset accumulation counter'
      },
      emitreset: {
        datatype: 'boolean',
        description: 'Whether to emit an output upon reset',
        control: true,
        "default": false
      }
    },
    outPorts: {
      out: {
        datatype: 'number',
        required: true
      }
    }
  });
  c.forwardBrackets = {};
  c.counter = {};
  c.tearDown = function(callback) {
    c.counter = {};
    return callback();
  };
  return c.process(function(input, output) {
    var data, emitReset;
    if (input.hasData('reset')) {
      input.getData('reset');
      c.counter[input.scope] = 0;
      emitReset = false;
      if (input.hasData('emitreset')) {
        emitReset = input.getData('emitreset');
      }
      if (emitReset) {
        return output.sendDone(c.counter[input.scope]);
      }
      return output.done();
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (!c.counter[input.scope]) {
      c.counter[input.scope] = 0;
    }
    c.counter[input.scope] += data;
    return output.sendDone(c.counter[input.scope]);
  });
};


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'plus',
    inPorts: {
      augend: {
        datatype: 'number',
        required: true
      },
      addend: {
        datatype: 'number',
        required: true,
        control: true
      }
    },
    outPorts: {
      sum: {
        datatype: 'number'
      }
    }
  });
  return c.process(function(input, output) {
    var addend, augend, ref;
    if (!input.hasData('augend', 'addend')) {
      return;
    }
    ref = input.getData('augend', 'addend'), augend = ref[0], addend = ref[1];
    return output.sendDone({
      sum: Number(augend) + Number(addend)
    });
  });
};


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Calculate the angle between two points',
    icon: 'compass',
    inPorts: {
      origin: {
        datatype: 'object',
        required: true
      },
      destination: {
        datatype: 'object',
        required: true
      }
    },
    outPorts: {
      angle: {
        datatype: 'int',
        required: true
      }
    }
  });
  return c.process(function(input, output) {
    var angle, deltaX, deltaY, destination, origin, ref;
    if (!input.hasData('origin', 'destination')) {
      return;
    }
    ref = input.getData('origin', 'destination'), origin = ref[0], destination = ref[1];
    deltaX = destination.x - origin.x;
    deltaY = destination.y - origin.y;
    origin = null;
    destination = null;
    angle = (Math.atan2(deltaY, deltaX) * 180 / Math.PI) + 90;
    if (angle < 0) {
      angle = angle + 360;
    }
    return output.sendDone({
      angle: angle
    });
  });
};


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Calculate the distance between two points',
    icon: 'arrow-right',
    inPorts: {
      origin: {
        datatype: 'object',
        required: true
      },
      destination: {
        datatype: 'object',
        required: true
      }
    },
    outPorts: {
      distance: {
        datatype: 'int',
        required: true
      }
    }
  });
  return c.process(function(input, output) {
    var deltaX, deltaY, destination, distance, origin, ref;
    if (!input.hasData('origin', 'destination')) {
      return;
    }
    ref = input.getData('origin', 'destination'), origin = ref[0], destination = ref[1];
    deltaX = destination.x - origin.x;
    deltaY = destination.y - origin.y;
    origin = null;
    destination = null;
    distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    return output.sendDone({
      distance: distance
    });
  });
};


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'arrow-up',
    description: 'Round a number up',
    inPorts: {
      "in": {
        datatype: 'number'
      }
    },
    outPorts: {
      out: {
        datatype: 'int'
      }
    }
  });
  return c.process(function(input, output) {
    var data;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    return output.sendDone(Math.ceil(data));
  });
};


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    inPorts: {
      value: {
        datatype: 'number',
        required: true
      },
      comparison: {
        datatype: 'number',
        required: true
      },
      operator: {
        datatype: 'string',
        control: true,
        "default": '=='
      }
    },
    outPorts: {
      pass: {
        datatype: 'number'
      },
      fail: {
        datatype: 'number'
      }
    }
  });
  c.description = 'Compare two numbers';
  c.icon = 'check';
  c.forwardBrackets = {
    value: 'pass',
    comparison: 'pass',
    operator: 'pass'
  };
  return c.process(function(input, output) {
    var comparison, operator, value;
    if (!input.hasData('value', 'comparison')) {
      return;
    }
    value = input.getData('value');
    comparison = input.getData('comparison');
    operator = input.getData('operator') || '==';
    switch (operator) {
      case 'eq':
      case '==':
        if (value === comparison) {
          return output.sendDone({
            pass: value
          });
        }
        break;
      case 'ne':
      case '!=':
        if (value !== comparison) {
          return output.sendDone({
            pass: value
          });
        }
        break;
      case 'gt':
      case '>':
        if (value > comparison) {
          return output.sendDone({
            pass: value
          });
        }
        break;
      case 'lt':
      case '<':
        if (value < comparison) {
          return output.sendDone({
            pass: value
          });
        }
        break;
      case 'ge':
      case '>=':
        if (value >= comparison) {
          return output.sendDone({
            pass: value
          });
        }
        break;
      case 'le':
      case '<=':
        if (value <= comparison) {
          return output.sendDone({
            pass: value
          });
        }
    }
    return output.sendDone({
      fail: value
    });
  });
};


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Sum numbers coming from multiple inputs together',
    inPorts: {
      "in": {
        datatype: 'number',
        addressable: true
      }
    },
    outPorts: {
      out: {
        datatype: 'number'
      }
    }
  });
  c.forwardBrackets = {};
  return c.process(function(input, output, id) {
    var connection, i, indexesWithStream, len, packet, previous, stream, sum;
    indexesWithStream = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (!indexesWithStream.length) {
      return;
    }
    connection = ['in', indexesWithStream[0]];
    stream = input.getStream(connection).filter(function(ip) {
      return ip.type === 'data';
    });
    sum = 0;
    previous = 0;
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      sum += packet.data;
      if (packet.index === previous.index) {
        output.send({
          out: packet.data
        });
        sum = 0;
      } else {
        output.send({
          out: sum
        });
        sum = packet.data;
      }
      previous = packet;
    }
    return output.done();
  });
};


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'plus',
    inPorts: {
      dividend: {
        datatype: 'all',
        required: true
      },
      divisor: {
        datatype: 'all',
        required: true,
        control: true
      }
    },
    outPorts: {
      quotient: {
        datatype: 'all'
      }
    }
  });
  return c.process(function(input, output) {
    var dividend, divisor, ref;
    if (!input.hasData('dividend', 'divisor')) {
      return;
    }
    ref = input.getData('dividend', 'divisor'), dividend = ref[0], divisor = ref[1];
    return output.sendDone({
      quotient: dividend / divisor
    });
  });
};


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'caret';
  c.inPorts.add('base', {
    datatype: 'number',
    required: true
  });
  c.inPorts.add('exponent', {
    datatype: 'number',
    required: true,
    control: true
  });
  c.outPorts.add('power', {
    datatype: 'number'
  });
  return c.process(function(input, output) {
    var base, exponent, ref;
    if (!input.hasData('base', 'exponent')) {
      return;
    }
    ref = input.getData('base', 'exponent'), base = ref[0], exponent = ref[1];
    return output.sendDone({
      power: Math.pow(base, exponent)
    });
  });
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'arrow-down',
    description: 'Round a number down',
    inPorts: {
      "in": {
        datatype: 'number'
      }
    },
    outPorts: {
      out: {
        datatype: 'int'
      }
    }
  });
  return c.process(function(input, output) {
    var data;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    return output.sendDone(Math.floor(data));
  });
};


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    inPorts: {
      "in": {
        datatype: 'number',
        required: true
      },
      in_lower: {
        datatype: 'number',
        description: 'the lower bound of the input value',
        required: true,
        control: true
      },
      in_upper: {
        datatype: 'number',
        description: 'the uppwer bound of the input value',
        required: true,
        control: true
      },
      out_lower: {
        datatype: 'number',
        description: 'the lower bound of the output value',
        required: true,
        control: true
      },
      out_upper: {
        datatype: 'number',
        description: 'the uppwer bound of the output value',
        required: true,
        control: true
      }
    },
    outPorts: {
      out: {
        datatype: 'number'
      }
    }
  });
  c.icon = 'reorder';
  c.description = 'Map a number from a source range to a target reange.';
  return c.process(function(input, output) {
    var data, in_lower, in_lower_data, in_range, in_upper, in_upper_data, out_lower, out_lower_data, out_range, out_upper, out_upper_data, value;
    if (!input.hasData('in', 'in_lower', 'in_upper', 'out_upper', 'out_lower')) {
      return;
    }
    data = input.getData('in');
    in_lower_data = input.getData('in_lower');
    in_upper_data = input.getData('in_upper');
    out_upper_data = input.getData('out_upper');
    out_lower_data = input.getData('out_lower');
    in_lower = Math.min(in_lower_data, in_upper_data);
    in_upper = Math.max(in_lower_data, in_upper_data);
    in_range = in_upper - in_lower;
    out_lower = Math.min(out_lower_data, out_upper_data);
    out_upper = Math.max(out_lower_data, out_upper_data);
    out_range = out_upper - out_lower;
    value = out_lower + ((data - in_lower) * out_range / in_range);
    return output.sendDone(value);
  });
};


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    inPorts: {
      dividend: {
        datatype: 'all',
        required: true
      },
      divisor: {
        datatype: 'all',
        required: true,
        control: true
      }
    },
    outPorts: {
      remainder: {
        datatype: 'all'
      }
    }
  });
  return c.process(function(input, output) {
    var dividend, divisor, ref;
    if (!input.hasData('dividend', 'divisor')) {
      return;
    }
    ref = input.getData('dividend', 'divisor'), dividend = ref[0], divisor = ref[1];
    return output.sendDone(dividend % divisor);
  });
};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'asterisk',
    inPorts: {
      multiplicand: {
        datatype: 'all',
        required: true
      },
      multiplier: {
        datatype: 'all',
        required: true,
        control: true
      }
    },
    outPorts: {
      product: {
        datatype: 'all',
        required: true
      }
    }
  });
  return c.process(function(input, output) {
    var multiplicand, multiplier, ref;
    if (!input.hasData('multiplicand', 'multiplier')) {
      return;
    }
    ref = input.getData('multiplicand', 'multiplier'), multiplicand = ref[0], multiplier = ref[1];
    return output.sendDone({
      product: multiplicand * multiplier
    });
  });
};


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'random',
    description: 'Generate a random number between 0 and 1',
    inPorts: {
      "in": {
        datatype: 'bang'
      }
    },
    outPorts: {
      out: {
        datatype: 'number'
      }
    }
  });
  return c.process(function(input, output) {
    if (!input.hasData('in')) {
      return;
    }
    input.getData('in');
    return output.sendDone(Math.random());
  });
};


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    inPorts: {
      "in": {
        datatype: 'bang',
        required: true
      },
      lower: {
        datatype: 'number',
        description: 'the lower bound',
        control: true
      },
      upper: {
        datatype: 'number',
        description: 'the uppwer bound',
        control: true
      }
    },
    outPorts: {
      out: {
        datatype: 'number',
        required: true
      }
    }
  });
  c.icon = 'random';
  c.description = 'Generate a random number in the given range.';
  c.forwardBrackets = {
    "in": 'out',
    lower: 'out',
    upper: 'out'
  };
  return c.process(function(input, output) {
    var lower, range, upper, value;
    if (!input.hasData('in', 'lower', 'upper')) {
      return;
    }
    lower = input.getData('lower');
    upper = input.getData('upper');
    lower = Math.min(lower, upper);
    upper = Math.max(lower, upper);
    range = (0.5 + upper) - lower;
    value = lower + Math.random() * range;
    return output.sendDone(Math.floor(value));
  });
};


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    inPorts: {
      number: {
        datatype: 'number',
        required: true,
        control: true
      },
      "in": {
        datatype: 'bang',
        required: true
      }
    },
    outPorts: {
      out: {
        datatype: 'number',
        required: true
      }
    }
  });
  return c.process(function(input, output) {
    var data, number, ref;
    if (!input.hasData('in', 'number')) {
      return;
    }
    ref = input.getData('in', 'number'), data = ref[0], number = ref[1];
    return output.sendDone({
      out: number
    });
  });
};


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'plus',
    inPorts: {
      minuend: {
        datatype: 'all',
        required: true
      },
      subtrahend: {
        datatype: 'all',
        required: true,
        control: true
      }
    },
    outPorts: {
      difference: {
        datatype: 'all'
      }
    }
  });
  return c.process(function(input, output) {
    var minuend, ref, subtrahend;
    if (!input.hasData('minuend', 'subtrahend')) {
      return;
    }
    ref = input.getData('minuend', 'subtrahend'), minuend = ref[0], subtrahend = ref[1];
    return output.sendDone(minuend - subtrahend);
  });
};


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'call a method on an object';
  c.icon = 'gear';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object on which a method will be called',
      required: true
    },
    method: {
      datatype: 'string',
      description: 'Name of the method to call',
      required: true,
      control: true
    },
    "arguments": {
      datatype: 'all',
      description: 'Arguments given to the method (one argument per IP)'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Value returned by the method call',
      required: true
    },
    error: {
      datatype: 'object'
    }
  });
  return c.process(function(input, output) {
    var args, argsIn, data, method;
    if (!input.hasData('method', 'in')) {
      return;
    }
    if (input.attached('arguments').length > 0) {
      if (!input.hasData('arguments')) {
        return;
      }
    }
    args = [];
    argsIn = input.getStream('arguments').filter(function(ip) {
      return ip.type === 'data' && (ip.data != null);
    }).map(function(ip) {
      return ip.data;
    });
    args = args.concat(argsIn);
    data = input.getData('in');
    method = input.getData('method');
    if (!data[method]) {
      output.sendDone(new Error("Method '" + method + "' not available"));
      return;
    }
    return output.sendDone({
      out: data[method].apply(data, args)
    });
  });
};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Create a new Date object from string',
    icon: 'clock-o'
  });
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'string',
      description: 'A string representation of a date in RFC2822/IETF/ISO8601 format'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'A new Date object'
    }
  });
  return c.process(function(input, output) {
    var data, date;
    if (!input.has('in')) {
      return;
    }
    data = input.getData('in');
    if (data === 'now' || data === null || data === true) {
      date = new Date;
    } else {
      date = new Date(data);
    }
    return output.sendDone({
      out: date
    });
  });
};


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    inPorts: {
      start: {
        datatype: 'string'
      }
    },
    outPorts: {
      out: {
        datatype: 'object'
      }
    }
  });
  c.icon = 'bug';
  c.description = 'Create an Error object';
  c.forwardBrackets = {
    start: ['out']
  };
  return c.process(function(input, output) {
    var data, err;
    data = input.getData('start');
    if (typeof data === 'string') {
      err = new Error(data);
    } else {
      err = new Error('Error');
      err.context = data;
    }
    return output.sendDone({
      out: err
    });
  });
};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Create an empty object'
  });
  c.inPorts = new noflo.InPorts({
    start: {
      datatype: 'bang',
      description: 'Signal to create a new object'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'A new empty object'
    }
  });
  c.forwardBrackets = {
    start: ['out']
  };
  return c.process(function(input, output) {
    return output.sendDone({
      out: {}
    });
  });
};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    property: {
      datatype: 'all',
      required: true,
      control: true,
      description: 'property to duplicate'
    },
    separator: {
      datatype: 'string',
      "default": '/',
      control: true,
      description: 'separator to use to join property'
    },
    "in": {
      datatype: 'object',
      description: 'object to duplicate property on',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object'
    }
  });
  return c.process(function(input, output) {
    var data, i, len, newValues, newprop, original, originalProp, prop, propParts, properties, ref, sep, separator;
    if (!input.has('property', 'separator', 'in', function(ip) {
      return ip.type === 'data';
    })) {
      return;
    }
    ref = input.getData('property', 'separator', 'in'), prop = ref[0], sep = ref[1], data = ref[2];
    properties = {};
    separator = sep != null ? sep : '/';
    if (prop) {
      if (typeof prop === 'object') {
        return;
      }
      propParts = prop.split('=');
      if (propParts.length > 2) {
        properties[propParts.pop()] = propParts;
        return;
      }
      properties[propParts[1]] = propParts[0];
    }
    if (data) {
      for (newprop in properties) {
        original = properties[newprop];
        if (typeof original === 'string') {
          data[newprop] = data[original];
          continue;
        }
        newValues = [];
        for (i = 0, len = original.length; i < len; i++) {
          originalProp = original[i];
          newValues.push(data[originalProp]);
        }
        data[newprop] = newValues.join(separator);
      }
      return output.sendDone(data);
    }
  });
};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

var extend, noflo;

noflo = __webpack_require__(0);

extend = function(object, properties, other) {
  var key, val;
  for (key in properties) {
    val = properties[key];
    object[key] = val;
  }
  if (other != null) {
    for (key in other) {
      val = other[key];
      object[key] = val;
    }
  }
  return object;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Extend an incoming object to some predefined objects, optionally by a certain property'
  });
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to extend',
      required: true
    },
    base: {
      datatype: 'object',
      description: 'Objects to extend with (one object per IP)',
      required: true
    },
    key: {
      datatype: 'string',
      description: 'Property name to extend with',
      "default": false,
      control: true
    },
    reverse: {
      datatype: 'boolean',
      description: 'A string equal "true" if you want to reverse the order of extension algorithm',
      "default": false,
      control: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'The object received on port "in" extended',
      required: true
    }
  });
  return c.process(function(input, output) {
    var base, bases, data, i, key, len, out, reverse;
    if (!input.hasData('in')) {
      return;
    }
    if (!input.has('base')) {
      return;
    }
    if (input.attached('key').length > 0) {
      if (!input.hasData('key')) {
        return;
      }
    }
    if (input.attached('reverse').length > 0) {
      if (!input.hasData('reverse')) {
        return;
      }
    }
    reverse = false;
    key = input.getData('key');
    bases = input.getStream('base').filter(function(ip) {
      return ip.type === 'data';
    }).map(function(ip) {
      return ip.data;
    });
    data = input.getData('in');
    if (key === void 0) {
      key = null;
    }
    reverse = String(input.getData('reverse')) === 'true';
    out = {};
    for (i = 0, len = bases.length; i < len; i++) {
      base = bases[i];
      if ((key == null) || (data[key] != null) && data[key] === base[key]) {
        out = extend(out, base);
      }
    }
    if (reverse) {
      return output.sendDone(extend({}, data, out));
    } else {
      return output.sendDone(extend(out, data));
    }
  });
};


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    description: 'Given a key, return only the value matching that key in the incoming object'
  });
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'An object to extract property from',
      required: true
    },
    key: {
      datatype: 'string',
      description: 'Property names to extract (one property per IP)',
      required: true,
      control: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Values of the property extracted (each value sent as a separate IP)'
    }
  });
  return c.process(function(input, output) {
    var data, i, key, keys, len, value;
    if (!input.hasData('key', 'in')) {
      return;
    }
    keys = input.getStream('key').filter(function(ip) {
      return ip.type === 'data';
    }).map(function(ip) {
      return ip.data;
    });
    data = input.getData('in');
    value = data;
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value = value[key];
      output.send({
        out: value
      });
    }
    return output.done();
  });
};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

var deepCopy, noflo;

noflo = __webpack_require__(0);

deepCopy = __webpack_require__(19).deepCopy;

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'filter';
  c.description = 'Filter out some properties by matching RegExps against the keys of incoming objects';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to filter properties from',
      required: true
    },
    key: {
      datatype: 'string',
      description: 'Keys to filter (one key per IP)',
      required: true
    },
    recurse: {
      datatype: 'boolean',
      description: '"true" to recurse on the object\'s values',
      control: true,
      "default": false
    },
    keep: {
      datatype: 'boolean',
      description: '"true" if matching properties must be kept, otherwise removed',
      control: true,
      "default": false
    },
    accept: {
      datatype: 'all'
    },
    regexp: {
      datatype: 'all'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object'
    }
  });
  c.filter = function(object, keys, recurse, keep, input) {
    var filter, i, isMatched, keepButDontMatch, key, len, match, matchButDontKeep, results, value;
    results = [];
    for (key in object) {
      value = object[key];
      isMatched = false;
      for (i = 0, len = keys.length; i < len; i++) {
        filter = keys[i];
        match = key.match(filter);
        matchButDontKeep = !keep && match;
        keepButDontMatch = keep && !match;
        if (matchButDontKeep || keepButDontMatch) {
          delete object[key];
          isMatched = true;
          break;
        }
      }
      if (!isMatched && recurse && typeof value === 'object') {
        results.push(c.filter(value, keys, recurse, keep, input));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  c.keys = {};
  return c.process(function(input, output) {
    var accepts, data, expression, i, keep, keys, legacy, len, match, newData, property, recurse, ref, regex, regexp, value;
    if (input.hasStream('key')) {
      c.keys[input.scope] = input.getStream('key').filter(function(ip) {
        return ip.type === 'data' && (ip.data != null);
      }).map(function(ip) {
        return new RegExp(ip.data, "g");
      });
      return output.done();
    }
    if (!(input.hasData('in') && ((ref = c.keys[input.scope]) != null ? ref.length : void 0) > 0)) {
      return;
    }
    if (input.attached('recurse').length > 0) {
      if (!input.hasData('recurse')) {
        return;
      }
    }
    if (input.attached('keep').length > 0) {
      if (!input.hasData('keep')) {
        return;
      }
    }
    legacy = false;
    if (input.has('accept') || input.has('regexp')) {
      legacy = true;
      accepts = input.get('accept').data;
      regexp = input.get('regexp').data;
    }
    keys = c.keys[input.scope];
    data = input.getData('in');
    recurse = input.getData('recurse');
    keep = input.getData('keep');
    if ((keep != null) && typeof keep === 'object') {
      keep = keep.pop();
    }
    if (!legacy) {
      if (typeof data === 'object') {
        data = deepCopy(data);
        c.filter(data, keys, recurse, keep, input);
        return output.sendDone(data);
      } else {
        return output.done();
      }
    } else {
      newData = {};
      match = false;
      for (property in data) {
        value = data[property];
        if (accepts.indexOf(property) !== -1) {
          newData[property] = value;
          match = true;
          continue;
        }
        for (i = 0, len = regexp.length; i < len; i++) {
          expression = regexp[i];
          regex = new RegExp(expression);
          if (regex.exec(property)) {
            newData[property] = value;
            match = true;
          }
        }
      }
      if (!match) {
        return output.done();
      }
      return output.sendDone(newData);
    }
  });
};


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component({
    icon: 'filter',
    description: 'Filter out some values'
  });
  c.inPorts = new noflo.InPorts({
    accept: {
      datatype: 'all',
      description: 'property value to accept, can be more than one per object'
    },
    regexp: {
      datatype: 'string',
      description: 'regex properties to accept'
    },
    "in": {
      datatype: 'object',
      description: 'Object to filter properties from',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'Object including the filtered properties'
    },
    missed: {
      datatype: 'object',
      description: 'Object received as input if no key have been matched'
    }
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var accept, acceptData, accepts, data, e, i, index, j, len, len1, mapParts, match, newData, property, regexp, regexpData, regexps, stream, value;
    if (!input.hasStream('in')) {
      return;
    }
    if (input.attached('accept').length > 0) {
      if (!input.hasStream('accept')) {
        return;
      }
    }
    if (input.attached('regexp').length > 0) {
      if (!input.hasData('regexp')) {
        return;
      }
    }
    stream = input.getStream('in').filter(function(ip) {
      return ip.type === 'data';
    }).map(function(ip) {
      return ip.data;
    });
    regexps = {};
    accepts = {};
    if (input.has('accept')) {
      acceptData = input.getStream('accept').filter(function(ip) {
        return ip.type === 'data';
      }).map(function(ip) {
        return ip.data;
      });
      for (index = i = 0, len = acceptData.length; i < len; index = ++i) {
        accept = acceptData[index];
        if (typeof accept === 'object') {
          accepts = accept;
          break;
        }
        mapParts = accept.split('=');
        try {
          accepts[mapParts[0]] = eval(mapParts[1]);
        } catch (error) {
          e = error;
          if (e instanceof ReferenceError) {
            accepts[mapParts[0]] = mapParts[1];
          } else {
            return output.sendDone(e);
          }
        }
      }
    }
    if (input.has('regexp')) {
      regexpData = input.getStream('regexp').filter(function(ip) {
        return ip.type === 'data';
      }).map(function(ip) {
        return ip.data;
      });
      if (regexpData.length > 0) {
        mapParts = regexpData[0].split('=');
        regexps[mapParts[0]] = mapParts[1];
      }
    }
    for (j = 0, len1 = stream.length; j < len1; j++) {
      data = stream[j];
      if ((Object.keys(accepts)).length > 0 || (Object.keys(regexps)).length > 0) {
        newData = {};
        match = false;
        for (property in data) {
          value = data[property];
          if (accepts[property]) {
            if (accepts[property] !== value) {
              continue;
            }
            match = true;
          }
          if (regexps[property]) {
            regexp = new RegExp(regexps[property]);
            if (!regexp.exec(value)) {
              continue;
            }
            match = true;
          }
          newData[property] = value;
          continue;
        }
        if (!match) {
          output.send({
            missed: data
          });
        } else {
          output.send({
            out: newData
          });
        }
      } else {
        output.send({
          out: data
        });
      }
    }
    return output.done();
  });
};


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, flattenObject, mapKeys;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    map: {
      datatype: 'all',
      description: 'map to use to flatten the object',
      control: true
    },
    "in": {
      datatype: 'object',
      description: 'Object to flatten',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'array'
    }
  });
  mapKeys = function(object, maps) {
    var key, map;
    for (key in maps) {
      map = maps[key];
      object[map] = object.flattenedKeys[key];
    }
    delete object.flattenedKeys;
    return object;
  };
  flattenObject = function(object) {
    var flattened, flattenedValue, i, key, len, val, value;
    flattened = [];
    for (key in object) {
      value = object[key];
      if (typeof value === 'object') {
        flattenedValue = flattenObject(value);
        for (i = 0, len = flattenedValue.length; i < len; i++) {
          val = flattenedValue[i];
          val.flattenedKeys.push(key);
          flattened.push(val);
        }
        continue;
      }
      flattened.push({
        flattenedKeys: [key],
        value: value
      });
    }
    return flattened;
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var data, i, len, map, mapParts, maps, object, ref;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('map').length > 0) {
      if (!input.hasData('map')) {
        return;
      }
    }
    maps = {};
    if (input.hasData('map')) {
      map = input.getData('map');
      if (map != null) {
        if (typeof map === 'object') {
          maps = map;
        } else {
          mapParts = map.split('=');
          maps[mapParts[0]] = mapParts[1];
        }
      }
    }
    data = input.getData('in');
    output.send(new noflo.IP('openBracket'));
    ref = flattenObject(data);
    for (i = 0, len = ref.length; i < len; i++) {
      object = ref[i];
      output.send(mapKeys(object, maps));
    }
    output.send(new noflo.IP('closeBracket'));
    return output.done();
  });
};


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'clock-o';
  c.description = 'Send out the current timestamp';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'bang',
      description: 'Causes the current timestamp to be sent out'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'int'
    }
  });
  return c.process(function(input, output) {
    if (input.ip.type !== 'data') {
      return;
    }
    return output.sendDone({
      out: Date.now()
    });
  });
};


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'indent';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to get keys from',
      required: true
    },
    key: {
      datatype: 'string',
      description: 'Keys to extract from the object (one key per IP)',
      required: true
    },
    sendgroup: {
      datatype: 'boolean',
      description: 'true to send keys as groups around value IPs, false otherwise',
      control: true,
      "default": false
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Values extracts from the input object given the input keys (one value per IP, potentially grouped using the key names)'
    },
    object: {
      datatype: 'object',
      description: 'Object forwarded from input if at least one property matches the input keys'
    },
    missed: {
      datatype: 'object',
      description: 'Object forwarded from input if no property matches the input keys'
    }
  });
  return c.process(function(input, output) {
    var data, i, key, keys, len, sendGroup;
    if (!input.hasData('in')) {
      return;
    }
    if (!input.hasStream('key')) {
      return;
    }
    if (input.attached('sendgroup').length > 0) {
      if (!input.hasData('sendgroup')) {
        return;
      }
    }
    keys = input.getStream('key').filter(function(ip) {
      return ip.type === 'data';
    }).map(function(ip) {
      return ip.data;
    });
    data = input.getData('in');
    sendGroup = input.getData('sendgroup');
    sendGroup = sendGroup === 'true' || sendGroup === true;
    if (typeof data !== 'object') {
      output.sendDone(new Error('Data is not an object'));
      return;
    }
    if (data === null) {
      output.sendDone(new Error('Data is NULL'));
      return;
    }
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      if (data[key] === void 0) {
        if (sendGroup) {
          output.send({
            missed: new noflo.IP('openBracket', key)
          });
        }
        output.send({
          missed: new noflo.IP('data', data)
        });
        if (sendGroup) {
          output.send({
            missed: new noflo.IP('closeBracket', key)
          });
        }
      }
      if (sendGroup) {
        output.send({
          out: new noflo.IP('openBracket', key)
        });
      }
      output.send({
        out: new noflo.IP('data', data[key])
      });
      if (sendGroup) {
        output.send({
          out: new noflo.IP('closeBracket', key)
        });
      }
    }
    output.send({
      object: new noflo.IP('data', data)
    });
    return output.done();
  });
};


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Insert a property into incoming objects.';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'all',
      description: 'Object to insert property into',
      required: true
    },
    property: {
      datatype: 'all',
      description: 'Property to insert (property sent as group, value sent as IP)',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'Object received as input with added properties'
    }
  });
  c.forwardGroups = {};
  return c.process(function(input, output) {
    var data, i, ip, key, len, outputData, stream, val;
    if (!input.hasData('in')) {
      return;
    }
    if (!input.hasStream('property')) {
      return;
    }
    data = input.getData('in');
    stream = input.getStream('property');
    val = null;
    key = null;
    for (i = 0, len = stream.length; i < len; i++) {
      ip = stream[i];
      if (ip.type === 'openBracket') {
        key = ip.data;
      }
      if (ip.type === 'data') {
        val = ip.data;
      }
    }
    outputData = {};
    if (data instanceof Object) {
      outputData = data;
    }
    outputData[key] = val;
    return output.sendDone({
      out: outputData
    });
  });
};


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Join all values of a passed packet together as a string with a predefined delimiter';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to join values from',
      required: true
    },
    delimiter: {
      datatype: 'string',
      description: 'Delimiter to join values',
      control: true,
      "default": ','
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'string',
      description: 'String conversion of all values joined with delimiter into one string',
      required: true
    },
    error: {
      datatype: 'object'
    }
  });
  return c.process(function(input, output) {
    var data, delimiter, i, j, keys, length, ref, values;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('delimiter').length > 0) {
      if (!input.hasData('delimiter')) {
        return;
      }
    }
    delimiter = input.getData('delimiter' || ',');
    data = input.getData('in');
    if ((data != null) && typeof data === 'object') {
      keys = Object.keys(data);
      length = keys.length;
      values = Array(length);
      for (i = j = 0, ref = length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        values[i] = data[keys[i]];
      }
      return output.sendDone({
        out: values.join(delimiter)
      });
    } else {
      return output.sendDone({
        error: new Error(typeof data + ' is not a valid object to join')
      });
    }
  });
};


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'gets only the keys of an object and forward them as an array';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to get keys from'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'string',
      description: 'Keys from the incoming object (one per IP)'
    }
  });
  return c.process(function(input, output) {
    var data, i, key, len, ref;
    if (!input.has('in')) {
      return;
    }
    data = input.getData('in');
    ref = Object.keys(data);
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      output.send({
        out: new noflo.IP('data', key)
      });
    }
    return output.done();
  });
};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    map: {
      datatype: 'all',
      description: 'Map to use to map property on object'
    },
    regexp: {
      datatype: 'string',
      description: 'Regex to use to map property on object'
    },
    "in": {
      datatype: 'object',
      description: 'Object to map property on',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      required: true
    }
  });
  return c.process(function(input, output) {
    var data, expression, map, mapParts, matched, newData, property, regexPart, regexp, replacement, value;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('regexp').length > 0) {
      if (!input.hasData('regexp')) {
        return;
      }
    }
    if (input.attached('map').length > 0) {
      if (!input.hasData('map')) {
        return;
      }
    }
    data = input.getData('in');
    regexp = {};
    if (input.hasData('regexp')) {
      regexp = input.getData('regexp');
      regexPart = regexp.split('=');
      regexps[regexPart[0]] = regexPart[1];
    }
    map = {};
    if (input.hasData('map')) {
      map = input.getData('map');
      if (typeof map !== 'object') {
        mapParts = map.split('=');
        map[mapParts[0]] = mapParts[1];
      }
    }
    newData = {};
    for (property in data) {
      value = data[property];
      if (property in map) {
        property = map[property];
      }
      for (expression in regexp) {
        replacement = regexp[expression];
        regexp = new RegExp(expression);
        matched = regexp.exec(property);
        if (!matched) {
          continue;
        }
        property = property.replace(regexp, replacement);
      }
      if (property in newData) {
        if (Array.isArray(newData[property])) {
          newData[property].push(value);
        } else {
          newData[property] = [newData[property], value];
        }
      } else {
        newData[property] = value;
      }
    }
    return output.sendDone({
      out: newData
    });
  });
};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    map: {
      datatype: 'all',
      description: 'Map to use to map property value on object'
    },
    regexp: {
      datatype: 'string',
      description: 'Regex to use to map property value on object'
    },
    "in": {
      datatype: 'object',
      description: 'Object to map property value on',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      required: true
    }
  });
  return c.process(function(input, output) {
    var data, expression, map, mapAny, mapIn, mapParts, matched, property, ref, regexIn, regexParts, regexp, regexpAny, replacement, value;
    if (!input.hasData('in')) {
      return;
    }
    if (input.attached('regexp').length > 0) {
      if (!input.hasData('regexp')) {
        return;
      }
    }
    if (input.attached('map').length > 0) {
      if (!input.hasData('map')) {
        return;
      }
    }
    data = input.getData('in');
    mapAny = {};
    map = {};
    regexp = {};
    regexpAny = {};
    mapIn = input.hasData('map') ? input.getData('map') : {};
    if (typeof mapIn !== 'object') {
      mapParts = mapIn.split('=');
      if (mapParts.length === 3) {
        map[mapParts[0]] = {
          from: mapParts[1],
          to: mapParts[2]
        };
      } else {
        mapAny[mapParts[0]] = mapParts[1];
      }
    } else {
      mapAny = mapIn;
    }
    regexIn = input.hasData('regexp') ? input.getData('regexp') : {};
    if (typeof regexIn !== 'object') {
      regexParts = regexIn.split('=');
      if (regexParts.length === 3) {
        regexp[regexParts[0]] = {
          from: regexParts[1],
          to: regexParts[2]
        };
      }
      regexpAny[regexParts[0]] = regexParts[1];
    }
    for (property in data) {
      value = data[property];
      if (map[property] && map[property].from === value) {
        data[property] = map[property].to;
      }
      if (mapAny[value]) {
        data[property] = mapAny[value];
      }
      if (regexp[property]) {
        regexp = new RegExp(regexp[property].from);
        matched = regexp.exec(value);
        if (matched) {
          data[property] = value.replace(regexp, c.regexp[property].to);
        }
      }
      ref = c.regexpAny;
      for (expression in ref) {
        replacement = ref[expression];
        regexp = new RegExp(expression);
        matched = regexp.exec(value);
        if (!matched) {
          continue;
        }
        data[property] = value.replace(regexp, replacement);
      }
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, merge;
  c = new noflo.Component;
  c.description = 'merges all incoming objects into one';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Objects to merge (one per IP)'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'A new object containing the merge of input objects'
    }
  });
  merge = function(origin, object) {
    var key, oValue, value;
    for (key in object) {
      value = object[key];
      oValue = origin[key];
      if (oValue != null) {
        switch (toString.call(oValue)) {
          case "[object Array]":
            origin[key].push.apply(origin[key], value);
            break;
          case "[object Object]":
            origin[key] = merge(oValue, value);
            break;
          default:
            origin[key] = value;
        }
      } else {
        origin[key] = value;
      }
    }
    return origin;
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var inData;
    if (!input.hasStream('in')) {
      return;
    }
    inData = input.getStream('in').filter(function(ip) {
      return ip.type === 'data';
    }).map(function(ip) {
      return ip.data;
    });
    return output.sendDone(inData.reduce(merge, {}));
  });
};


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

var clone, noflo;

noflo = __webpack_require__(0);

clone = function(obj) {
  var key, temp;
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }
  temp = new obj.constructor();
  for (key in obj) {
    temp[key] = clone(obj[key]);
  }
  return temp;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'ban';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to remove properties from',
      required: true
    },
    property: {
      datatype: 'string',
      description: 'Properties to remove (one per IP)',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'Object forwarded from input'
    }
  });
  return c.process(function(input, output) {
    var data, i, ip, len, object, propData, property;
    if (!input.hasData('in')) {
      return;
    }
    if (!input.hasStream('property')) {
      return;
    }
    ip = input.get('in');
    data = ip.data;
    propData = input.getStream('property').filter(function(ip) {
      return ip.type === 'data';
    }).map(function(ip) {
      return ip.data;
    });
    if (ip.clonable) {
      object = clone(data);
    } else {
      object = data;
    }
    for (i = 0, len = propData.length; i < len; i++) {
      property = propData[i];
      delete object[property];
    }
    return output.sendDone({
      out: object
    });
  });
};


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'given a regexp matching any key of an incoming object as a data IP, replace the key with the provided string';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to replace a key from'
    },
    pattern: {
      datatype: 'all',
      description: 'pattern to use to replace key',
      control: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'Object forwared from input'
    }
  });
  return c.process(function(input, output) {
    var data, key, newKey, pattern, patterns, replace, value;
    if (!input.hasData('in', 'pattern')) {
      return;
    }
    data = input.getData('in');
    patterns = input.getData('pattern');
    newKey = null;
    for (key in data) {
      value = data[key];
      for (pattern in patterns) {
        replace = patterns[pattern];
        pattern = new RegExp(pattern);
        if (key.match(pattern) != null) {
          newKey = key.replace(pattern, replace);
          data[newKey] = value;
          delete data[key];
        }
      }
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    property: {
      datatype: 'all',
      description: 'All except for object',
      required: true
    },
    "in": {
      datatype: 'object',
      description: 'Object to set property on',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'Object forwared from input'
    }
  });
  return c.process(function(input, output) {
    var data, prop, propParts, properties, property, value;
    if (!input.hasData('in', 'property')) {
      return;
    }
    prop = input.getData('property');
    data = input.getData('in');
    properties = {};
    propParts = prop.split('=');
    properties[propParts[0]] = propParts[1];
    for (property in properties) {
      value = properties[property];
      data[property] = value;
    }
    return output.sendDone(data);
  });
};


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    property: {
      datatype: 'string',
      description: 'Property name to set value on',
      required: true
    },
    value: {
      datatype: 'all',
      description: 'Property value to set',
      required: true
    },
    "in": {
      datatype: 'object',
      description: 'Object to set property value on',
      required: true
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'object',
      description: 'Object forwarded from the input'
    }
  });
  return c.process(function(input, output) {
    var data, property, value;
    if (!input.hasData('property', 'value', 'in')) {
      return;
    }
    data = input.getData('in');
    property = input.getData('property');
    value = input.getData('value');
    data[property] = value;
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, simplify, simplifyObject;
  c = new noflo.Component;
  c.description = 'Simplify an objectgi';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'all',
      description: 'Object to simplify'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Simplified object'
    }
  });
  simplify = function(data) {
    if (Array.isArray(data)) {
      if (data.length === 1) {
        return data[0];
      }
      return data;
    }
    if (typeof data !== 'object') {
      return data;
    }
    return simplifyObject(data);
  };
  simplifyObject = function(data) {
    var key, keys, simplified, value;
    keys = Object.keys(data);
    if (keys.length === 1 && keys[0] === '$data') {
      return simplify(data['$data']);
    }
    simplified = {};
    for (key in data) {
      value = data[key];
      simplified[key] = simplify(value);
    }
    return simplified;
  };
  return c.process(function(input, output) {
    var data;
    data = input.getData('in');
    return output.sendDone({
      out: simplify(data)
    });
  });
};


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'gets the size of an object and sends that out as a number';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to measure the size of'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'int',
      description: 'Size of the input object'
    }
  });
  return c.process(function(input, output) {
    var data, size;
    data = input.getData('in');
    if (typeof data === 'object') {
      size = Object.keys(data).length;
    } else {
      size = data.length;
    }
    return output.sendDone({
      out: size
    });
  });
};


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'array',
      description: 'Array to slice',
      required: true
    },
    begin: {
      datatype: 'number',
      description: 'Beginning of the slicing',
      required: true
    },
    end: {
      datatype: 'number',
      description: 'End of the slicing'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'array',
      description: 'Result of the slice operation',
      required: true
    },
    error: {
      datatype: 'object'
    }
  });
  return c.process(function(input, output) {
    var begin, data, end, sliced;
    if (!input.hasData('in', 'begin')) {
      return;
    }
    if (input.attached('end').length > 0) {
      if (!input.hasData('end')) {
        return;
      }
    }
    data = input.getData('in');
    begin = input.getData('begin');
    if (!(data != null ? data.slice : void 0)) {
      return output.done(new Error("Data " + (typeof data) + " cannot be sliced"));
    }
    if (input.hasData('end')) {
      end = input.getData('end');
      sliced = data.slice(begin, end);
    } else {
      sliced = data.slice(begin);
    }
    return output.sendDone({
      out: sliced
    });
  });
};


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'splits a single array into multiple IPs, wrapped with the key as the group';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Array to split from'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Values from the split array'
    }
  });
  return c.process(function(input, output) {
    var data, i, item, key, len;
    data = input.getData('in');
    if (typeof data === 'object' && !Array.isArray(data)) {
      for (key in data) {
        item = data[key];
        output.send(new noflo.IP('openBracket', key));
        output.send(new noflo.IP('data', item));
        output.send(new noflo.IP('closeBracket', key));
      }
      output.done();
      return;
    }
    output.send(new noflo.IP('openBracket'));
    for (i = 0, len = data.length; i < len; i++) {
      item = data[i];
      output.send({
        out: item
      });
    }
    output.send(new noflo.IP('closeBracket'));
    return output.done();
  });
};


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'splits a single object into multiple IPs, wrapped with the key as the group';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'object',
      description: 'Object to split key/values from'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Values from the input object (one value per IP and its key sent as group)'
    }
  });
  return c.process(function(input, output) {
    var data, key, value;
    data = input.getData('in');
    for (key in data) {
      value = data[key];
      output.send(new noflo.IP('openBracket', key));
      output.send(new noflo.IP('data', value));
      output.send(new noflo.IP('closeBracket', key));
    }
    return output.done();
  });
};


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'empire';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'array',
      description: 'Array to get unique values from'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'array',
      description: 'Array containing only unique values from the input array'
    }
  });
  return c.process(function(input, output) {
    var data, i, len, member, newArray, seen;
    data = input.getData('in');
    seen = {};
    newArray = [];
    for (i = 0, len = data.length; i < len; i++) {
      member = data[i];
      seen[member] = member;
    }
    for (member in seen) {
      newArray.push(member);
    }
    return output.sendDone(newArray);
  });
};


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'gets only the values of an object and forward them as an array';
  c.inPorts = new noflo.InPorts({
    "in": {
      datatype: 'all',
      description: 'Object to extract values from'
    }
  });
  c.outPorts = new noflo.OutPorts({
    out: {
      datatype: 'all',
      description: 'Values extracted from the input object (one value per IP)'
    }
  });
  return c.process(function(input, output) {
    var data, i, index, j, key, keys, len, len1, value, values;
    data = input.getData('in');
    keys = Object.keys(data);
    values = Array(keys.length);
    for (index = i = 0, len = keys.length; i < len; index = ++i) {
      key = keys[index];
      values[index] = data[key];
    }
    output.send(new noflo.IP('openBracket'));
    for (j = 0, len1 = values.length; j < len1; j++) {
      value = values[j];
      output.send(new noflo.IP('data', value));
    }
    output.send(new noflo.IP('closeBracket'));
    return output.done();
  });
};


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Remove null";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  return c.process(function(input, output) {
    var data;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (data == null) {
      return output.done();
    }
    if (data.length === 0) {
      return output.done();
    }
    if (_.isObject(data) && _.isEmpty(data)) {
      return output.done();
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Count number of data IPs inside each stream';
  c.icon = 'sort-numeric-asc';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('count', {
    datatype: 'int'
  });
  c.counts = [0];
  c.tearDown = function(callback) {
    c.counts = [0];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var count, ip;
    if (!input.has('in')) {
      return;
    }
    ip = input.get('in');
    if (ip.type === 'openBracket') {
      c.counts.push(0);
      output.sendDone({
        out: ip,
        count: ip
      });
      return;
    }
    if (ip.type === 'closeBracket') {
      count = _.last(c.counts);
      c.counts.pop();
      output.send({
        count: count
      });
      output.sendDone({
        out: ip,
        count: ip
      });
      return;
    }
    c.counts[c.counts.length - 1]++;
    output.send({
      out: ip
    });
    if (c.counts.length === 1) {
      output.send({
        count: _.last(c.counts)
      });
      c.counts[c.counts.length - 1] = 0;
    }
    return output.done();
  });
};


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'send a number of packets received in a stream';
  c.icon = 'sort-numeric-asc';
  c.count = 0;
  c.brackets = [];
  c.tearDown = function(callback) {
    c.count = 0;
    c.brackets = [];
    return callback();
  };
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('immediate', {
    datatype: 'boolean',
    control: true,
    "default": false
  });
  c.inPorts.add('reset', {
    datatype: 'bang'
  });
  c.outPorts.add('count', {
    datatype: 'int'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var immediate, ip;
    if (input.hasData('reset')) {
      input.getData('reset');
      c.count = 0;
      return output.done();
    }
    if (!input.has('in')) {
      return;
    }
    ip = input.get('in');
    if (ip.type === 'openBracket') {
      c.brackets.push(ip.data);
      return output.sendDone({
        out: ip
      });
    }
    if (ip.type === 'closeBracket') {
      c.brackets.pop();
      output.send({
        out: ip
      });
      if (!c.brackets.length) {
        output.send({
          count: c.count
        });
        c.count = 0;
      }
      return output.done();
    }
    c.count++;
    output.send({
      out: ip
    });
    immediate = false;
    if (input.hasData('immediate')) {
      immediate = input.getData('immediate');
    }
    if (immediate || c.brackets.length === 0) {
      output.send({
        count: c.count
      });
      if (c.brackets.length === 0) {
        c.count = 0;
      }
    }
    return output.done();
  });
};


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "if incoming is short of the length of the default packets, send the default packets.";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('default', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.defaults = [];
  c.brackets = [];
  c.tearDown = function(callback) {
    c.defaults = [];
    c.brackets = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var data, def, defaulted, i, ip, len, packets;
    if (input.hasData('default')) {
      def = input.getData('default');
      c.defaults.push(def);
      output.done();
    }
    if (!input.has('in')) {
      return;
    }
    ip = input.get('in');
    if (ip.type === 'openBracket') {
      c.brackets.push([]);
      output.sendDone({
        out: ip
      });
      return;
    }
    if (ip.type === 'closeBracket') {
      packets = c.brackets.pop();
      defaulted = c.defaults.map(function(def, idx) {
        if (packets[idx] != null) {
          return packets[idx];
        }
        return def;
      });
      for (i = 0, len = defaulted.length; i < len; i++) {
        def = defaulted[i];
        output.send({
          out: def
        });
      }
      output.sendDone({
        out: ip
      });
      return;
    }
    if (!c.brackets.length) {
      data = ip.data != null ? ip.data : c.defaults[0];
      output.sendDone({
        out: data
      });
      return;
    }
    c.brackets[c.brackets.length - 1].push(ip.data);
    return output.done();
  });
};


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Filter packets based on their positions';
  c.icon = 'filter';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('filter', {
    datatype: 'boolean'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.filters = [];
  c.tearDown = function(callback) {
    c.filters = [];
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var filter, i, ip, len, packets, position;
    if (input.hasData('filter')) {
      filter = input.getData('filter');
      c.filters.push(filter);
      output.done();
    }
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in');
    position = 0;
    for (i = 0, len = packets.length; i < len; i++) {
      ip = packets[i];
      if (ip.type === 'openBracket') {
        position = 0;
        output.send({
          out: ip
        });
        continue;
      }
      if (ip.type === 'closeBracket') {
        position = 0;
        output.send({
          out: ip
        });
        continue;
      }
      if (!c.filters[position]) {
        position++;
        continue;
      }
      output.send({
        out: ip
      });
      position++;
      continue;
    }
    return output.done();
  });
};


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Filter packets based on their value";
  c.icon = 'filter';
  c.inPorts.add('in', {
    datatype: 'number'
  });
  c.inPorts.add('filtervalue', {
    datatype: 'number',
    control: true,
    required: true
  });
  c.outPorts.add('lower', {
    datatype: 'number'
  });
  c.outPorts.add('higher', {
    datatype: 'number'
  });
  c.outPorts.add('equal', {
    datatype: 'number'
  });
  c.forwardBrackets = {
    "in": ['lower', 'higher', 'equal']
  };
  return c.process(function(input, output) {
    var data, filterValue;
    if (!input.hasData('in', 'filtervalue')) {
      return;
    }
    filterValue = input.getData('filtervalue');
    data = input.getData('in');
    if (data < filterValue) {
      output.sendDone({
        lower: data
      });
      return;
    }
    if (data > filterValue) {
      output.sendDone({
        higher: data
      });
      return;
    }
    if (data === filterValue) {
      output.sendDone({
        equal: data
      });
      return;
    }
    return output.done();
  });
};


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Filter packets with regular expression';
  c.icon = 'filter';
  c.inPorts.add('in', {
    datatype: 'string'
  });
  c.inPorts.add('regexp', {
    datatype: 'string',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  c.outPorts.add('missed', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    "in": ['out', 'missed']
  };
  return c.process(function(input, output) {
    var data, regexp;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (!input.hasData('regexp')) {
      output.sendDone({
        out: data
      });
      return;
    }
    regexp = input.getData('regexp');
    if (typeof regexp === 'string') {
      regexp = new RegExp(regexp);
    }
    if (regexp.exec(data)) {
      output.sendDone({
        out: data
      });
      return;
    }
    return output.sendDone({
      missed: data
    });
  });
};


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Filter packets matching some RegExp strings";
  c.icon = 'filter';
  c.inPorts.add('in', {
    datatype: 'string'
  });
  c.inPorts.add('regexp', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  c.outPorts.add('missed', {
    datatype: 'string'
  });
  c.outPorts.add('passthru', {
    datatype: 'string'
  });
  c.forwardBrackets = {
    "in": ['out', 'missed', 'passthru']
  };
  c.regexps = [];
  c.tearDown = function(callback) {
    return c.regexps = [];
  };
  return c.process(function(input, output) {
    var data, reg;
    if (input.hasData('regexp')) {
      reg = input.getData('regexp');
      if (typeof reg === 'string') {
        reg = new RegExp(reg);
      }
      c.regexps.push(reg);
      output.done();
      return;
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (_.any(c.regexps, (function(regexp) {
      return data.match(regexp);
    }))) {
      output.sendDone({
        out: data,
        passthru: data
      });
      return;
    }
    return output.sendDone({
      missed: data,
      passthru: data
    });
  });
};


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Flatten the IP structure but preserve all groups (i.e. all groups are at the top level)";
  c.icon = 'list';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  c.lastBracket = {};
  c.tearDown = function(callback) {
    c.lastBracket = {};
    return callback();
  };
  return c.process(function(input, output) {
    var ip;
    if (!input.has('in')) {
      return;
    }
    ip = input.get('in');
    if (ip.type === 'openBracket') {
      if (c.lastBracket[input.scope]) {
        output.send({
          out: new noflo.IP('closeBracket', c.lastBracket[input.scope].data)
        });
      }
      output.send({
        out: ip
      });
      c.lastBracket[input.scope] = ip;
      return output.done();
    }
    if (ip.type === 'closeBracket') {
      if (!c.lastBracket[input.scope]) {
        return output.done();
      }
      output.send({
        out: ip
      });
      delete c.lastBracket[input.scope];
      return output.done();
    }
    output.send({
      out: ip
    });
    return output.done();
  });
};


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Surround each data packet by a bracket';
  c.icon = 'indent';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var datas, i, ip, len, packets;
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in');
    datas = 0;
    for (i = 0, len = packets.length; i < len; i++) {
      ip = packets[i];
      if (ip.type === 'openBracket') {
        datas = 0;
        output.send({
          out: ip
        });
        continue;
      }
      if (ip.type === 'closeBracket') {
        output.send({
          out: ip
        });
        continue;
      }
      output.send({
        out: new noflo.IP('openBracket', datas)
      });
      output.send({
        out: ip
      });
      output.send({
        out: new noflo.IP('closeBracket', datas)
      });
      datas++;
    }
    return output.done();
  });
};


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Send only the last packet of a stream';
  c.icon = 'caret-square-o-down';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var datas, packets;
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in');
    datas = packets.filter(function(ip) {
      return ip.type === 'data';
    });
    return output.sendDone({
      out: datas.pop()
    });
  });
};


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, prepareMap;

noflo = __webpack_require__(0);

prepareMap = function(orig) {
  var i, len, map, mapEntry, mapPart, mapParts, ref;
  if (typeof orig === 'object') {
    return orig;
  }
  map = {};
  ref = mapParts = orig.split(',');
  for (i = 0, len = ref.length; i < len; i++) {
    mapPart = ref[i];
    mapEntry = mapPart.split(':');
    if (mapEntry[0] && mapEntry[1]) {
      map[mapEntry[0].trim()] = mapEntry[1].trim();
    }
  }
  return map;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'table';
  c.description = 'Replace packets through a map. Data that is not in the map is replace with the default.';
  c.inPorts.add('data', {
    datatype: 'all',
    description: 'Data to be used as a key.'
  });
  c.inPorts.add('map', {
    datatype: 'all',
    description: 'A map with replacement values',
    control: true,
    required: true
  });
  c.inPorts.add('def', {
    datatype: 'all',
    description: 'A default value to return if the key is not in the map. If unset return the input.',
    control: true
  });
  c.outPorts.add('data', {
    datatype: 'all',
    description: 'The content of map[data].'
  });
  c.forwardBrackets = {
    data: ['data']
  };
  return c.process(function(input, output) {
    var data, def, map;
    if (!input.hasData('map', 'data')) {
      return;
    }
    map = prepareMap(input.getData('map'));
    data = input.getData('data');
    if (data in map) {
      output.sendDone({
        data: map[data]
      });
      return;
    }
    if (input.hasData('def')) {
      def = input.getData('def');
      output.sendDone({
        data: def
      });
      return;
    }
    return output.sendDone({
      data: data
    });
  });
};


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'filter';
  c.description = "only forward a specified number of packets in a stream";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('start', {
    datatype: 'int',
    control: true
  });
  c.inPorts.add('end', {
    datatype: 'int',
    control: true
  });
  c.inPorts.add('length', {
    datatype: 'int',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var end, i, ip, len, length, packets, ref, sent, start, total;
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in');
    start = -2e308;
    if (input.hasData('start')) {
      start = parseInt(input.getData('start'));
    }
    end = +2e308;
    if (input.hasData('end')) {
      end = parseInt(input.getData('end'));
    }
    length = +2e308;
    if (input.hasData('length')) {
      length = parseInt(input.getData('length'));
    }
    sent = 0;
    total = 0;
    for (i = 0, len = packets.length; i < len; i++) {
      ip = packets[i];
      if ((ref = ip.type) === 'openBracket' || ref === 'closeBracket') {
        sent = 0;
        total = 0;
        output.send({
          out: ip
        });
        continue;
      }
      total++;
      if (total > start && total < end && sent < length) {
        output.send({
          out: ip
        });
        sent++;
      }
      continue;
    }
    return output.done();
  });
};


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'clipboard';
  c.description = 'Replace incoming packets with something else if they match certain packets';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('match', {
    datatype: 'all'
  });
  c.inPorts.add('replace', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.matches = {};
  c.replacements = {};
  c.tearDown = function(callback) {
    c.matches = {};
    return c.replacements = {};
  };
  return c.process(function(input, output) {
    var data, index;
    if (input.hasData('match')) {
      if (!c.matches[input.scope]) {
        c.matches[input.scope] = [];
      }
      c.matches[input.scope].push(input.getData('match'));
      return output.done();
    }
    if (input.hasData('replace')) {
      if (!c.replacements[input.scope]) {
        c.replacements[input.scope] = [];
      }
      c.replacements[input.scope].push(input.getData('replace'));
      return output.done();
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (c.matches[input.scope] && c.replacements[input.scope]) {
      index = c.matches[input.scope].indexOf(data);
      if (index !== -1) {
        data = c.replacements[input.scope][index];
      }
    }
    return output.sendDone({
      out: data
    });
  });
};


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Always send the specified packets with incoming packets.";
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('with', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c["with"] = {};
  c.tearDown = function(callback) {
    c["with"] = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var datas, i, idx, ip, j, len, len1, packet, packets, ref;
    if (input.hasData('with')) {
      if (!c["with"][input.scope]) {
        c["with"][input.scope] = [];
      }
      c["with"][input.scope].push(input.getData('with'));
      return output.done();
    }
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in');
    datas = packets.filter(function(ip) {
      return ip.type === 'data';
    });
    for (idx = i = 0, len = packets.length; i < len; idx = ++i) {
      ip = packets[idx];
      output.send({
        out: ip
      });
      if (ip !== datas[datas.length - 1]) {
        continue;
      }
      if (!c["with"][input.scope]) {
        continue;
      }
      ref = c["with"][input.scope];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        packet = ref[j];
        output.send({
          out: packet
        });
      }
    }
    return output.done();
  });
};


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'A timestamp-value pattern sequencer';
  c.icon = 'bar-chart';
  c.inPorts.add('pattern', {
    datatype: 'string',
    description: 'Comma separated timestamp-value pairs. ' + 'Timestamps are in ms.'
  });
  c.outPorts.add('value', {
    datatype: 'string',
    description: 'Current value'
  });
  c.forwardBrackets = {};
  c.timers = {};
  c.tearDown = function(callback) {
    var context, ref, scope;
    ref = c.timers;
    for (scope in ref) {
      context = ref[scope];
      if (context.timeout) {
        clearTimeout(context.timeout);
      }
      context.deactivate();
    }
    return c.timers = {};
  };
  return c.process(function(input, output, context) {
    var ix, last_ts, last_val, pattern, sendNext;
    if (!input.hasData('pattern')) {
      return;
    }
    if (c.timers[input.scope]) {
      if (c.timers[input.scope].timeout) {
        clearTimeout(c.timers[input.scope].timeout);
      }
      c.timers[input.scope].deactivate();
    }
    pattern = input.getData('pattern');
    if (typeof pattern === 'string') {
      pattern = pattern.split(',');
    }
    if (!(pattern.length > 1)) {
      return output.done();
    }
    ix = 0;
    last_val = 0;
    last_ts = 0;
    sendNext = function() {
      last_ts = pattern[ix];
      last_val = pattern[ix + 1];
      output.send({
        value: last_val
      });
      ix += 2;
      if (ix < pattern.length) {
        return context.timeout = setTimeout(sendNext, pattern[ix] - last_ts);
      } else {
        return context.deactivate();
      }
    };
    context.timeout = setTimeout(sendNext, pattern[ix]);
    return c.timers[input.scope] = context;
  });
};


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.icon = 'filter';
  c.description = 'Send only packets that are unique';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('clear', {
    datatype: 'bang'
  });
  c.outPorts.add('out', {
    datatype: 'all'
  });
  c.outPorts.add('duplicate', {
    datatype: 'all'
  });
  c.seen = {};
  c.tearDown = function(callback) {
    c.seen = {};
    return callback();
  };
  c.forwardBrackets = {
    "in": ['out', 'duplicate']
  };
  return c.process(function(input, output) {
    var data;
    if (input.hasData('clear')) {
      input.getData('clear');
      c.seen = {};
      return output.done();
    }
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (!c.seen[input.scope]) {
      c.seen[input.scope] = [];
    }
    if (c.seen[input.scope].indexOf(data) === -1) {
      output.send({
        out: data
      });
      c.seen[input.scope].push(data);
      return output.done();
    }
    return output.sendDone({
      duplicate: data
    });
  });
};


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Send packets whose position upon receipt is even to the EVEN port, otherwise the ODD port.";
  c.icon = 'code-fork';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('odd', {
    datatype: 'all'
  });
  c.outPorts.add('even', {
    datatype: 'all'
  });
  c.count = {};
  c.tearDown = function(callback) {
    c.count = {};
    return callback();
  };
  c.forwardBrackets = {
    "in": ['odd', 'even']
  };
  return c.process(function(input, output) {
    var data;
    if (!input.hasData('in')) {
      return;
    }
    data = input.getData('in');
    if (!c.count[input.scope]) {
      c.count[input.scope] = 0;
    }
    c.count[input.scope]++;
    if (c.count[input.scope] % 2 === 0) {
      output.sendDone({
        even: data
      });
      return;
    }
    return output.sendDone({
      odd: data
    });
  });
};


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "zip through multiple IPs and output a series of zipped IPs just like how _.zip() works in Underscore.js";
  c.icon = 'file-archive-o';
  c.inPorts.add('in', {
    datatype: 'array'
  });
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var packets;
    if (!input.hasStream('in')) {
      return;
    }
    packets = input.getStream('in').filter(function(ip) {
      if (ip.type !== 'data') {
        return false;
      }
      if (!_.isArray(ip.data)) {
        return false;
      }
      return true;
    }).map(function(ip) {
      return ip.data;
    });
    if (_.isEmpty(packets)) {
      output.sendDone({
        out: []
      });
      return;
    }
    return output.sendDone({
      out: _.zip.apply(_, packets)
    });
  });
};


/***/ }),
/* 342 */
/***/ (function(module, exports) {

module.exports = {
	"processes": {
		"Range": {
			"component": "packets/Range"
		}
	},
	"connections": [
		{
			"data": "1",
			"tgt": {
				"process": "Range",
				"port": "length"
			}
		}
	],
	"inports": {
		"in": {
			"process": "Range",
			"port": "in"
		}
	},
	"outports": {
		"out": {
			"process": "Range",
			"port": "out"
		}
	},
	"caseSensitive": false
};

/***/ }),
/* 343 */
/***/ (function(module, exports) {

module.exports = {
	"processes": {
		"Merge": {
			"component": "Merge"
		},
		"Flatten": {
			"component": "packets/Flatten"
		}
	},
	"connections": [
		{
			"src": {
				"process": "Merge",
				"port": "out"
			},
			"tgt": {
				"process": "Flatten",
				"port": "in"
			}
		}
	],
	"inports": {
		"in": {
			"process": "Merge",
			"port": "in"
		}
	},
	"outports": {
		"out": {
			"process": "Flatten",
			"port": "out"
		}
	},
	"caseSensitive": false
};

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var noflo, requestAnimFrame, step;

noflo = __webpack_require__(0);

if (!noflo.isBrowser()) {
  requestAnimFrame = process.nextTick;
} else {
  requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
    return setTimeout(callback, 1);
  };
}

step = function(ctx, output, callback) {
  var acceleration, dampingForce, distance, previousPosition, springForce, totalForce;
  if (!ctx.moving) {
    return;
  }
  distance = ctx.massPosition - ctx.anchorPosition;
  dampingForce = -ctx.friction * ctx.speed;
  springForce = -ctx.stiffness * distance;
  totalForce = springForce + dampingForce;
  acceleration = totalForce / ctx.mass;
  ctx.speed += acceleration;
  previousPosition = ctx.massPosition;
  ctx.massPosition += ctx.speed / 100;
  if (Math.round(ctx.massPosition) !== Math.round(previousPosition)) {
    output.send(Math.round(ctx.massPosition));
  }
  if (Math.round(ctx.massPosition) === ctx.anchorPosition && Math.abs(ctx.speed) < 0.2) {
    return callback();
  } else {
    if (ctx.massPosition === 0) {
      return;
    }
    return requestAnimFrame(function() {
      return step(ctx, output, callback);
    });
  }
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Animates a directional spring';
  c.inPorts.add('in', {
    description: 'Initial position for the moving mass',
    datatype: 'number'
  });
  c.inPorts.add('anchor', {
    description: 'Position of the fixed point in the other end of the spring',
    datatype: 'number',
    "default": 0,
    control: true
  });
  c.inPorts.add('mass', {
    datatype: 'int',
    "default": 10,
    control: true
  });
  c.inPorts.add('stiffness', {
    datatype: 'int',
    "default": 120,
    control: true
  });
  c.inPorts.add('friction', {
    datatype: 'int',
    "default": 3,
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'number'
  });
  c.forwardBrackets = {};
  c.scopes = {};
  c.tearDown = function(callback) {
    var ref, scope, val;
    ref = c.scopes;
    for (scope in ref) {
      val = ref[scope];
      val.moving = false;
      val.context.deactivate();
    }
    c.scopes = {};
    return callback();
  };
  return c.process(function(input, output, context) {
    if (!input.has('in')) {
      return;
    }
    if (input.attached('anchor').length && !input.hasData('anchor')) {
      return;
    }
    if (input.attached('mass').length && !input.hasData('mass')) {
      return;
    }
    if (input.attached('stiffness').length && !input.hasData('stiffness')) {
      return;
    }
    if (input.attached('friction').length && !input.hasData('friction')) {
      return;
    }
    if (c.scopes[input.scope]) {
      c.scopes[input.scope].moving = false;
      c.scopes[input.scope].context.deactivate();
    }
    c.scopes[input.scope] = {
      moving: true,
      context: context,
      massPosition: input.getData('in'),
      anchorPosition: 0,
      mass: 10,
      stiffness: 120,
      friction: 3,
      speed: 0
    };
    if (input.hasData('anchor')) {
      c.scopes[input.scope].anchorPosition = input.getData('anchor');
    }
    if (input.hasData('mass')) {
      c.scopes[input.scope].mass = input.getData('mass');
    }
    if (input.hasData('stiffness')) {
      c.scopes[input.scope].stiffness = input.getData('stiffness');
    }
    if (input.hasData('friction')) {
      c.scopes[input.scope].friction = input.getData('friction');
    }
    step(c.scopes[input.scope], output, function() {
      if (!c.scopes[input.scope]) {
        return;
      }
      output.done();
      return delete c.scopes[input.scope];
    });
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Listen for events emitted by React components using the emitEvent property';
  c.inPorts.add('instance', {
    datatype: 'object',
    description: 'React component instance'
  });
  c.outPorts.add('event', {
    datatype: 'object'
  });
  c.subscribed = {};
  c.tearDown = function(callback) {
    var ctx, ref, scope;
    ref = c.subscribed;
    for (scope in ref) {
      ctx = ref[scope];
      ctx.deactivate();
    }
    c.subscribed = {};
    return callback();
  };
  return c.process(function(input, output, context) {
    var instance;
    if (!input.hasData('instance')) {
      return;
    }
    instance = input.getData('instance');
    instance.setProps({
      emitEvent: function(events, payload, metadata) {
        var closes, event, i, j, len, len1, results;
        if (typeof events === 'string') {
          events = [events];
        }
        for (i = 0, len = events.length; i < len; i++) {
          event = events[i];
          output.send({
            event: new noflo.IP('openBracket', event)
          });
        }
        output.send({
          event: payload
        });
        closes = events.slice(0);
        closes.reverse();
        results = [];
        for (j = 0, len1 = closes.length; j < len1; j++) {
          event = closes[j];
          results.push(output.send({
            event: new noflo.IP('closeBracket', event)
          }));
        }
        return results;
      }
    });
    return c.subscribed[input.scope] = context;
  });
};


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

var load, noflo;

noflo = __webpack_require__(0);

load = __webpack_require__(37);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Render a React component in the given mountpoint';
  c.inPorts.add('component', {
    datatype: 'function',
    description: 'The React component to mount'
  });
  c.inPorts.add('container', {
    datatype: 'object',
    description: 'DOM element to use for mounting the component'
  });
  c.outPorts.add('instance', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object',
    required: false
  });
  return c.process(function(input, output) {
    var component, container, ref;
    if (!input.hasData('component', 'container')) {
      return;
    }
    ref = input.getData('component', 'container'), component = ref[0], container = ref[1];
    load.getReact(function(err, React) {
      var e, instance;
      if (err) {
        output.done(err);
        return;
      }
      try {
        instance = React.renderComponent(component(), container);
      } catch (error) {
        e = error;
        output.done(e);
        return;
      }
      return output.sendDone({
        instance: instance
      });
    });
  });
};


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Set properties of a React component';
  c.inPorts.add('instance', {
    datatype: 'object',
    description: 'React component instance',
    control: true
  });
  c.inPorts.add('props', {
    datatype: 'object',
    description: 'Properties to set'
  });
  return c.process(function(input, output) {
    var instance, props;
    if (!input.hasData('instance', 'props')) {
      return;
    }
    instance = input.getData('instance');
    if (!instance.isMounted()) {
      output.done();
      return;
    }
    props = input.getData('props');
    if (typeof props !== 'object') {
      output.done();
      return;
    }
    instance.setProps(props);
    output.done();
  });
};


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

var load, noflo;

noflo = __webpack_require__(0);

load = __webpack_require__(37);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Unmount a React component from a given mountpoint';
  c.inPorts.add('container', {
    datatype: 'object',
    description: 'DOM element where a React component is mounted'
  });
  c.outPorts.add('unmounted', {
    datatype: 'boolean',
    required: false
  });
  c.outPorts.add('error', {
    datatype: 'object',
    required: false
  });
  return c.process(function(input, output) {
    var container;
    if (!input.hasData('container')) {
      return;
    }
    container = input.getData('container');
    load.getReact(function(err, React) {
      if (err) {
        output.done(err);
        return;
      }
      return output.sendDone({
        unmontainer: React.unmountComponentAtNode(container)
      });
    });
  });
};


/***/ }),
/* 349 */
/***/ (function(module, exports) {

module.exports = {
	"processes": {
		"Load": {
			"component": "amd/Require"
		},
		"Mount": {
			"component": "react/Mount"
		},
		"Listen": {
			"component": "react/ListenEvents"
		},
		"Props": {
			"component": "react/SetProps"
		},
		"Errors": {
			"component": "core/Merge"
		}
	},
	"connections": [
		{
			"src": {
				"process": "Load",
				"port": "module"
			},
			"tgt": {
				"process": "Mount",
				"port": "component"
			}
		},
		{
			"src": {
				"process": "Mount",
				"port": "instance"
			},
			"tgt": {
				"process": "Listen",
				"port": "instance"
			}
		},
		{
			"src": {
				"process": "Mount",
				"port": "instance"
			},
			"tgt": {
				"process": "Props",
				"port": "instance"
			}
		},
		{
			"src": {
				"process": "Load",
				"port": "error"
			},
			"tgt": {
				"process": "Errors",
				"port": "in"
			}
		},
		{
			"src": {
				"process": "Mount",
				"port": "error"
			},
			"tgt": {
				"process": "Errors",
				"port": "in"
			}
		}
	],
	"inports": {
		"module": {
			"process": "Load",
			"port": "path"
		},
		"container": {
			"process": "Mount",
			"port": "container"
		},
		"props": {
			"process": "Props",
			"port": "props"
		}
	},
	"outports": {
		"event": {
			"process": "Listen",
			"port": "event"
		},
		"error": {
			"process": "Errors",
			"port": "out"
		}
	},
	"caseSensitive": false
};

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Switch output to new connection every time "next" is sent';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('next', {
    datatype: 'bang'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.current = {};
  c.tearDown = function(callback) {
    c.current = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var attached, packet;
    if (input.hasData('next')) {
      input.getData('next');
      if (!c.current[input.scope]) {
        c.current[input.scope] = 0;
      }
      c.current[input.scope]++;
      if (c.current[input.scope] >= c.outPorts.out.listAttached().length) {
        c.current[input.scope] = 0;
      }
      output.done();
      return;
    }
    if (!input.has('in')) {
      return;
    }
    if (!c.current[input.scope]) {
      c.current[input.scope] = 0;
    }
    packet = input.get('in');
    attached = c.outPorts.out.listAttached();
    packet.index = attached[c.current[input.scope]];
    return output.sendDone({
      out: packet
    });
  });
};


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

var matchRoute, noflo;

noflo = __webpack_require__(0);

matchRoute = function(breadcrumbs, routes) {
  var group, i, index, j, len, len1, matched, route, step;
  for (index = i = 0, len = routes.length; i < len; index = ++i) {
    route = routes[index];
    matched = true;
    if (route.length > breadcrumbs.length) {
      matched = false;
      continue;
    }
    for (step = j = 0, len1 = breadcrumbs.length; j < len1; step = ++j) {
      group = breadcrumbs[step];
      if (!group.match(route[step])) {
        matched = false;
        break;
      }
    }
    if (matched) {
      return {
        index: index,
        route: route,
        level: breadcrumbs.length - 1
      };
    }
  }
  return {};
};

exports.getComponent = function() {
  var component, prepareScope;
  component = new noflo.Component;
  component.description = "routes IPs based on groups, which are matched and routed but not removed when forwarding";
  component.inPorts.add('route', {
    datatype: 'array',
    description: 'Array of route segments'
  });
  component.inPorts.add('routes', {
    datatype: 'string',
    description: 'Comma-separated list of route segments'
  });
  component.inPorts.add('reset', {
    datatype: 'bang',
    description: 'Remove configured routes'
  });
  component.inPorts.add('in', {
    datatype: 'all',
    description: 'Data to be routed by its groups'
  });
  component.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  component.outPorts.add('route', {
    datatype: 'string'
  });
  component.outPorts.add('missed', {
    datatype: 'all'
  });
  component.outPorts.add('error', {
    datatype: 'object'
  });
  component.scopes = {};
  prepareScope = function(scope) {
    if (component.scopes[scope]) {
      return component.scopes[scope];
    }
    component.scopes[scope] = {
      routes: [],
      breadcrumbs: [],
      match: {
        index: null,
        route: null,
        level: null
      }
    };
    return component.scopes[scope];
  };
  component.tearDown = function(callback) {
    component.scopes = {};
    return callback();
  };
  component.forwardBrackets = {};
  return component.process(function(input, output) {
    var bracketResult, packet, payload, scope;
    if (input.hasData('reset')) {
      input.getData('reset');
      delete component.scopes[input.scope];
      output.done();
      return;
    }
    if (input.hasData('route')) {
      scope = prepareScope(input.scope);
      payload = input.getData('route');
      if (Array.isArray(payload)) {
        scope.routes.push(payload.map(function(segment) {
          return new RegExp(segment);
        }));
        output.done();
        return;
      }
      if (typeof payload === 'string') {
        scope.routes.push([new RegExp(payload)]);
        output.done();
        reurn;
      }
      output.done(new Error("Route must be array of segments"));
      return;
    }
    if (input.hasData('routes')) {
      scope = prepareScope(input.scope);
      payload = input.getData('routes');
      if (typeof payload !== 'string') {
        output.done(new Error("Routes list must be a string"));
      }
      scope.routes = payload.split(',').map(function(route) {
        return route.split(':').map(function(segment) {
          return new RegExp(segment);
        });
      });
      output.done();
      return;
    }
    if (!input.has('in')) {
      return;
    }
    scope = prepareScope(input.scope);
    packet = input.get('in');
    switch (packet.type) {
      case 'openBracket':
        bracketResult = {
          group: packet.data
        };
        scope.breadcrumbs.push(bracketResult);
        if ((scope.match.level != null) && scope.match.level < scope.breadcrumbs.length) {
          packet.index = scope.match.index;
          output.sendDone({
            out: packet
          });
          return;
        }
        scope.match = matchRoute(scope.breadcrumbs.map(function(breadcrumb) {
          return breadcrumb.group;
        }), scope.routes);
        if (scope.match.route != null) {
          output.sendDone({
            route: scope.match.route
          });
          return;
        }
        bracketResult.missed = true;
        output.sendDone({
          missed: packet
        });
        break;
      case 'closeBracket':
        bracketResult = scope.breadcrumbs.pop();
        if (scope.match.level < scope.breadcrumbs.length) {
          packet.index = scope.match.index;
          output.sendDone({
            out: packet
          });
          return;
        }
        if (scope.match.level === scope.breadcrumbs.length) {
          scope.match = {};
          output.done();
          return;
        }
        if (!bracketResult.missed) {
          output.done();
          return;
        }
        output.sendDone({
          missed: packet
        });
        break;
      case 'data':
        if (scope.match.route != null) {
          packet.index = scope.match.index;
          output.sendDone({
            out: packet
          });
          return;
        }
        output.sendDone({
          missed: packet
        });
    }
  });
};


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Releases a stream to a specified index on prev/next/index';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.inPorts.add('index', {
    datatype: 'int'
  });
  c.inPorts.add('prev', {
    datatype: 'bang'
  });
  c.inPorts.add('next', {
    datatype: 'bang'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.current = {};
  c.tearDown = function(callback) {
    c.current = {};
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var sendToIndex;
    if (!input.hasStream('in')) {
      return;
    }
    if (!c.current[input.scope]) {
      c.current[input.scope] = 0;
    }
    sendToIndex = function() {
      var attached, i, idx, len, packet, results, stream;
      stream = input.getStream('in');
      attached = c.outPorts.out.listAttached();
      idx = attached[c.current[input.scope]];
      results = [];
      for (i = 0, len = stream.length; i < len; i++) {
        packet = stream[i];
        packet.index = idx;
        results.push(output.send({
          out: packet
        }));
      }
      return results;
    };
    if (input.hasData('next')) {
      input.getData('next');
      c.current[input.scope]++;
      if (c.current[input.scope] >= c.outPorts.out.listAttached().length) {
        c.current[input.scope] = 0;
      }
      sendToIndex();
      output.done();
      return;
    }
    if (input.hasData('prev')) {
      input.getData('prev');
      c.current[input.scope]--;
      if (c.current[input.scope] < 0) {
        c.current[input.scope] = c.outPorts.out.listAttached().length - 1;
      }
      sendToIndex();
      output.done();
      return;
    }
    if (input.hasData('index')) {
      c.current[input.scope] = parseInt(input.getData('index'));
      sendToIndex();
      output.done();
    }
  });
};


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Route IPs based on RegExp match on the IP content (strings only). The position of the RegExp determines which port to forward to.";
  c.inPorts.add('in', {
    datatype: 'string'
  });
  c.inPorts.add('route', {
    datatype: 'array',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string',
    addressable: true
  });
  c.outPorts.add('missed', {
    datatype: 'all'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.forwardBrackets = {
    "in": ['out', 'missed']
  };
  return c.process(function(input, output) {
    var data, i, idx, j, k, len, len1, len2, matchedIndexes, regexp, regexps, route, routes;
    if (!input.hasData('in', 'route')) {
      return;
    }
    routes = input.getData('route');
    if (!Array.isArray(routes)) {
      output.done(new Error('Route must be an array'));
      return;
    }
    regexps = [];
    for (i = 0, len = routes.length; i < len; i++) {
      route = routes[i];
      if (typeof route === 'string') {
        regexps.push(new RegExp(route));
        continue;
      }
      if (route instanceof RegExp) {
        regexps.push(route);
        continue;
      }
      output.done(new Error('Route array can only contain strings or RegExps'));
      return;
    }
    data = input.getData('in');
    if (typeof data !== 'string') {
      output.done(new Error('PacketRegexpRouter can only route strings'));
      return;
    }
    matchedIndexes = [];
    for (idx = j = 0, len1 = regexps.length; j < len1; idx = ++j) {
      regexp = regexps[idx];
      if (data.match(regexp)) {
        matchedIndexes.push(idx);
      }
    }
    if (!matchedIndexes.length) {
      output.sendDone({
        missed: data
      });
      return;
    }
    for (k = 0, len2 = matchedIndexes.length; k < len2; k++) {
      idx = matchedIndexes[k];
      output.send({
        out: new noflo.IP('data', data, {
          index: idx
        })
      });
    }
    output.done();
  });
};


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Routes IPs based on position in an incoming IP stream";
  c.inPorts.add('in', {
    datatype: 'all',
    addressable: true
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.outPorts.add('missed', {
    datatype: 'all'
  });
  c.outPorts.add('error');
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var indexesWithStreams;
    indexesWithStreams = input.attached('in').filter(function(idx) {
      return input.hasStream(['in', idx]);
    });
    if (!indexesWithStreams.length) {
      return;
    }
    indexesWithStreams.forEach(function(idx) {
      var after, attached, before, brackets, hadData, i, len, packet, position, results, stream;
      stream = input.getStream(['in', idx]);
      if (stream[0].type === 'openBracket' && stream[0].data === null) {
        before = stream.shift();
        after = stream.pop();
      }
      position = 0;
      brackets = [];
      hadData = false;
      results = [];
      for (i = 0, len = stream.length; i < len; i++) {
        packet = stream[i];
        if (packet.type === 'openBracket') {
          if (hadData && !brackets.length) {
            position++;
          }
          brackets.push(packet.data);
        }
        if (packet.type === 'closeBracket') {
          brackets.pop();
        }
        attached = c.outPorts.out.listAttached();
        if (attached.indexOf(position) === -1) {
          output.send({
            missed: packet
          });
          continue;
        }
        packet.index = position;
        output.send({
          out: packet
        });
        if (packet.type === 'data') {
          if (hadData && brackets.length) {
            continue;
          }
          position++;
          results.push(hadData = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    output.done();
  });
};


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Send each packet to one outport connection in sequence';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'all',
    addressable: true
  });
  c.current = 0;
  c.tearDown = function(callback) {
    c.current = 0;
    return callback();
  };
  return c.process(function(input, output) {
    var attached, packet;
    if (!input.hasData('in')) {
      return;
    }
    packet = new noflo.IP('data', input.getData('in'));
    attached = c.outPorts.out.listAttached();
    packet.index = attached[c.current];
    output.send({
      out: packet
    });
    c.current++;
    if (c.current >= c.outPorts.out.listAttached().length) {
      c.current = 0;
    }
    output.done();
  });
};


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

var fbpClient, noflo;

noflo = __webpack_require__(0);

fbpClient = __webpack_require__(17);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('definition', {
    datatype: 'object',
    description: 'Runtime definition object',
    required: true
  });
  c.inPorts.add('element', {
    datatype: 'object',
    description: 'DOM element to be set as Runtime parent element',
    required: false
  });
  c.inPorts.add('timeout', {
    datatype: 'number',
    description: 'How long to try connecting, in milliseconds',
    "default": 1000,
    required: false,
    control: true
  });
  c.outPorts.add('runtime', {
    datatype: 'object',
    description: 'FBP Runtime instance',
    required: false
  });
  c.outPorts.add('connected', {
    datatype: 'object',
    description: 'Connected FBP Runtime instance',
    required: false
  });
  c.outPorts.add('unavailable', {
    datatype: 'object',
    description: 'Unavailable FBP Runtime instance',
    required: false
  });
  c.outPorts.add('error', {
    datatype: 'object',
    description: 'Runtime connection error',
    required: false
  });
  return c.process(function(input, output) {
    var Runtime, definition, e, element, onCapabilities, onError, onTimeout, rt, timeout;
    if (!input.hasData('definition')) {
      return;
    }
    definition = input.getData('definition');
    if (!definition.protocol) {
      output.done(new Error('Protocol definition required'));
      return;
    }
    if (!definition.address) {
      output.done(new Error('Address definition required'));
      return;
    }
    timeout = input.hasData('timeout') ? input.getData('timeout') : 1000;
    element = input.hasData('element') ? input.getData('element') : null;
    try {
      Runtime = fbpClient.getTransport(definition.protocol);
    } catch (error) {
      e = error;
      output.done(new Error("Protocol " + definition.protocol + " is not supported"));
      return;
    }
    onError = function(e) {
      if (timeout) {
        clearTimeout(timeout);
      }
      rt.removeListener('capabilities', onCapabilities);
      if (rt && c.outPorts.unavailable.isAttached()) {
        output.send({
          unavailable: rt
        });
        return;
      }
      output.done(e);
    };
    onTimeout = function() {
      output.sendDone({
        unavailable: rt
      });
      rt.removeListener('error', onError);
      rt.removeListener('capabilities', onCapabilities);
      return rt.disconnect();
    };
    onCapabilities = function() {
      if (timeout) {
        clearTimeout(timeout);
      }
      rt.removeListener('error', onError);
      return output.sendDone({
        connected: rt
      });
    };
    rt = new Runtime(definition);
    if (element) {
      rt.setParentElement(element);
    }
    timeout = setTimeout(onTimeout, timeout);
    rt.once('capabilities', onCapabilities);
    rt.once('error', onError);
    output.send({
      runtime: rt
    });
    return rt.connect();
  });
};


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Switch a network's debug mode on or off";
  c.inPorts.add('runtime', {
    datatype: 'object',
    description: 'FBP runtime instance'
  });
  c.inPorts.add('graph', {
    datatype: 'object',
    description: 'Graph to debug'
  });
  c.inPorts.add('enable', {
    datatype: 'boolean',
    description: 'Whether to debug the graph'
  });
  c.outPorts.add('sent', {
    datatype: 'bang',
    description: 'Command sent to the runtime'
  });
  return c.process(function(input, output) {
    var enable, graph, ref, runtime;
    if (!input.hasData('runtime', 'graph', 'enable')) {
      return;
    }
    ref = input.getData('runtime', 'graph', 'enable'), runtime = ref[0], graph = ref[1], enable = ref[2];
    runtime.sendNetwork('debug', {
      graph: graph.name || graph.properties.id,
      enable: enable
    });
    return output.sendDone({
      sent: true
    });
  });
};


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, handleMessage;
  c = new noflo.Component;
  c.icon = 'code';
  c.inPorts.add('name', {
    datatype: 'string',
    description: 'Name of the component to get'
  });
  c.inPorts.add('runtime', {
    datatype: 'object',
    description: 'Runtime to communicate with'
  });
  c.outPorts.add('source', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.runtime = null;
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  ({
    unsubscribe: function() {
      if (!c.runtime) {
        return;
      }
      c.runtime.rt.removeListener('component', handleMessage);
      return c.runtime = null;
    }
  });
  handleMessage = function(message) {
    var componentName;
    if (!c.runtime) {
      return;
    }
    if (message.command !== 'source') {
      return;
    }
    componentName = [message.payload.library, message.payload.name].join('/');
    return c.runtime.sources[componentName] = message.payload;
  };
  return c.process(function(input, output) {
    var name, poll, rounds, runtime;
    if (input.hasData('runtime')) {
      runtime = input.getData('runtime');
      if (c.runtime) {
        if (c.runtime.rt === runtime) {
          return output.done();
        }
        unsubscribe();
      }
      if (runtime.isConnected() && !runtime.canDo('component:getsource')) {
        output.done(new Error("Runtime " + runtime.definition.id + " cannot get sources"));
        return;
      }
      c.runtime = {
        rt: runtime,
        sources: {}
      };
      runtime.on('component', handleMessage);
      output.done();
      return;
    }
    if (!input.hasData('name')) {
      return;
    }
    if (!c.runtime) {
      return;
    }
    name = input.getData('name');
    if (c.runtime.sources[name]) {
      output.sendDone({
        source: c.runtime.sources[name]
      });
      return;
    }
    c.runtime.rt.sendComponent('getsource', {
      name: name
    });
    rounds = 10;
    poll = function() {
      rounds--;
      if (c.runtime.sources[name]) {
        output.sendDone({
          source: c.runtime.sources[name]
        });
        return;
      }
      if (!rounds) {
        output.done(new Error("Runtime didn't provide source for " + name + " in time"));
      }
      return setTimeout(poll, 100);
    };
    return setTimeout(poll, 100);
  });
};


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, onRuntimeComponent, onRuntimeConnected, subscribe, unsubscribe;

noflo = __webpack_require__(0);

onRuntimeConnected = null;

onRuntimeComponent = null;

subscribe = function(runtime, output) {
  var requestListing;
  requestListing = function() {
    if (!runtime.canDo('protocol:component')) {
      return;
    }
    return runtime.sendComponent('list');
  };
  onRuntimeConnected = function() {
    return requestListing();
  };
  onRuntimeComponent = function(message) {
    var definition, ref, ref1;
    if (message.command !== 'component') {
      return;
    }
    if ((ref = message.payload.name) === 'Graph' || ref === 'ReadDocument') {
      return;
    }
    definition = {
      name: message.payload.name,
      description: message.payload.description,
      icon: message.payload.icon,
      subgraph: message.payload.subgraph || false,
      runtime: message.payload.runtime || ((ref1 = runtime.definition) != null ? ref1.id : void 0),
      inports: message.payload.inPorts.slice(0).map(function(port) {
        port.name = port.id;
        delete port.id;
        return port;
      }),
      outports: message.payload.outPorts.slice(0).map(function(port) {
        port.name = port.id;
        delete port.id;
        return port;
      })
    };
    return output.send({
      out: {
        componentDefinition: definition
      }
    });
  };
  runtime.on('capabilities', onRuntimeConnected);
  runtime.on('component', onRuntimeComponent);
  if (runtime.isConnected()) {
    return requestListing();
  }
};

unsubscribe = function(runtime, context) {
  if (onRuntimeConnected) {
    runtime.removeListener('capabilities', onRuntimeConnected);
  }
  if (onRuntimeComponent) {
    runtime.removeListener('component', onRuntimeComponent);
  }
  onRuntimeConnected = null;
  onRuntimeComponent = null;
  return context.deactivate();
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'List components available on a runtime';
  c.inPorts.add('runtime', {
    datatype: 'object'
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.runtime = null;
  c.tearDown = function(callback) {
    if (c.runtime) {
      unsubcribe(c.runtime.rt, c.runtime.ctx);
    }
    c.runtime = null;
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    var runtime;
    if (!input.hasData('runtime')) {
      return;
    }
    runtime = input.getData('runtime');
    if (c.runtime) {
      unsubscribe(c.runtime.rt, c.runtime.ctx);
    }
    c.runtime = {
      rt: runtime,
      ctx: context
    };
    return subscribe(c.runtime.rt, output);
  });
};


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.description = 'Listen to a network on a runtime';
  c.inPorts.add('runtime', {
    datatype: 'object',
    description: 'Runtime to listen from'
  });
  c.inPorts.add('graph', {
    datatype: 'object',
    description: 'Graph to listen to'
  });
  c.outPorts.add('started', {
    datatype: 'object'
  });
  c.outPorts.add('stopped', {
    datatype: 'object'
  });
  c.outPorts.add('status', {
    datatype: 'object'
  });
  c.outPorts.add('output', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.outPorts.add('processerror', {
    datatype: 'object'
  });
  c.outPorts.add('icon', {
    datatype: 'object'
  });
  c.outPorts.add('packet', {
    datatype: 'object'
  });
  unsubscribe = function(runtime) {
    if (!runtime) {
      return;
    }
    runtime.rt.removeListener('network', runtime.listener);
    return runtime.ctx.deactivate();
  };
  c.tearDown = function(callback) {
    if (c.runtime) {
      unsubscribe(c.runtime);
    }
    c.runtime = null;
    c.graph = null;
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    if (input.hasData('graph')) {
      c.graph = input.getData('graph');
      output.done();
      return;
    }
    if (input.hasData('runtime')) {
      if (c.runtime) {
        unsubscribe(c.runtime);
      }
      c.runtime = {
        rt: input.getData('runtime'),
        ctx: context,
        listener: function(arg) {
          var command, payload, ref, ref1, ref2, result;
          command = arg.command, payload = arg.payload;
          if (command === 'error') {
            output.send({
              error: payload
            });
            return;
          }
          if (payload.graph !== ((ref = c.graph) != null ? ref.name : void 0) && payload.graph !== ((ref1 = c.graph) != null ? (ref2 = ref1.properties) != null ? ref2.id : void 0 : void 0)) {
            return;
          }
          if (command === 'connect' || command === 'begingroup' || command === 'data' || command === 'endgroup' || command === 'disconnect') {
            output.send({
              packet: new noflo.IP('data', {
                edge: payload.id,
                src: payload.src,
                tgt: payload.tgt,
                type: command,
                group: payload.group != null ? payload.group : '',
                data: payload.data != null ? payload.data : '',
                subgraph: payload.subgraph != null ? payload.subgraph : '',
                runtime: c.runtime.rt.definition.id
              })
            });
            return;
          }
          if (command !== 'started' && command !== 'stopped' && command !== 'status' && command !== 'output' && command !== 'processerror' && command !== 'icon') {
            return;
          }
          result = {};
          result[command] = payload;
          output.send(result);
        }
      };
      c.runtime.rt.on('network', c.runtime.listener);
    }
  });
};


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c, unsubscribe;
  c = new noflo.Component;
  c.inPorts.add('runtime', {
    datatype: 'object',
    description: 'FBP Runtime instance'
  });
  c.outPorts.add('connected', {
    datatype: 'object',
    description: 'FBP Runtime instance'
  });
  c.outPorts.add('disconnected', {
    datatype: 'object',
    description: 'Runtime connection error'
  });
  c.outPorts.add('graph', {
    datatype: 'object',
    description: 'Changes to runtime graph'
  });
  c.runtime = null;
  unsubscribe = function() {
    if (!c.runtime) {
      return;
    }
    c.runtime.rt.removeListener('connected', c.runtime.onConnected);
    c.runtime.rt.removeListener('disconnected', c.runtime.onDisconnected);
    c.runtime.rt.removeListener('graph', c.runtime.onGraph);
    c.runtime.ctx.deactivate();
    return c.runtime = null;
  };
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  c.forwardBrackets = {};
  return c.process(function(input, output, context) {
    if (!input.hasData('runtime')) {
      return;
    }
    c.runtime = {
      rt: input.getData('runtime'),
      onConnected: function() {
        return output.send({
          connected: c.runtime.rt
        });
      },
      onDisconnected: function() {
        return output.send({
          disconnected: c.runtime.rt
        });
      },
      onGraph: function(data) {
        return output.send({
          graph: data
        });
      },
      ctx: context
    };
    c.runtime.rt.on('connected', c.runtime.onConnected);
    c.runtime.rt.on('disconnected', c.runtime.onDisconnected);
    return c.runtime.rt.on('graph', c.runtime.onGraph);
  });
};


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, sendComponent;

noflo = __webpack_require__(0);

sendComponent = function(component, runtime, callback) {
  var ref, runtimeType;
  if (!component.code) {
    return callback(new Error("No code available for component " + component.name));
  }
  runtimeType = component.code.match(/@runtime ([a-z\-]+)/);
  if (runtimeType) {
    if ((ref = runtimeType[1]) !== 'all' && ref !== runtime.definition.type) {
      return callback(new Error("Component type " + runtimeType + " doesn't match runtime type " + runtime.definition.type));
    }
  }
  if (!runtime.canDo('component:setsource')) {
    return callback(new Error('Runtime doesn\'t support setsource'));
  }
  runtime.sendComponent('source', {
    name: component.name,
    language: component.language,
    library: component.project || component.library,
    code: component.code,
    tests: component.tests
  });
  return callback();
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('component', {
    datatype: 'object'
  });
  c.inPorts.add('runtime', {
    datatype: 'object',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var component, ref, runtime;
    if (!input.hasData('component', 'runtime')) {
      return;
    }
    ref = input.getData('component', 'runtime'), component = ref[0], runtime = ref[1];
    if (!runtime.canDo) {
      output.done(new Error('Incorrect runtime instance'));
      return;
    }
    if (runtime.isConnected()) {
      sendComponent(component, runtime, function(err) {
        if (err) {
          output.done(err);
          return;
        }
        return output.sendDone({
          out: component
        });
      });
      return;
    }
    return runtime.once('capabilities', function() {
      return sendComponent(component, runtime, function(err) {
        if (err) {
          output.done(err);
          return;
        }
        return output.sendDone({
          out: component
        });
      });
    });
  });
};


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Send edges selected by user to runtime';
  c.inPorts.add('edges', {
    datatype: 'array'
  });
  c.inPorts.add('runtime', {
    datatype: 'object'
  });
  c.inPorts.add('graph', {
    datatype: 'object'
  });
  c.outPorts.add('out', {
    datatype: 'array'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var edges, graph, ref, ref1, runtime;
    if (!input.hasData('edges', 'runtime', 'graph')) {
      return;
    }
    ref = input.getData('edges', 'runtime', 'graph'), edges = ref[0], runtime = ref[1], graph = ref[2];
    if (!(runtime != null ? runtime.canDo : void 0)) {
      output.sendDone({
        out: edges
      });
      return;
    }
    if (!runtime.isConnected()) {
      output.sendDone({
        out: edges
      });
      return;
    }
    runtime.sendNetwork('edges', {
      edges: edges.map(function(edge) {
        var e;
        e = {
          src: edge.src || edge.from,
          tgt: edge.tgt || edge.to
        };
        return e;
      }),
      graph: graph.name || ((ref1 = graph.properties) != null ? ref1.id : void 0)
    });
    return output.sendDone({
      out: edges
    });
  });
};


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

var connection, noflo;

noflo = __webpack_require__(0);

connection = __webpack_require__(16);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('graph', {
    datatype: 'object'
  });
  c.inPorts.add('runtime', {
    datatype: 'object',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var graph, ref, runtime;
    if (!input.hasData('graph', 'runtime')) {
      return;
    }
    ref = input.getData('graph', 'runtime'), graph = ref[0], runtime = ref[1];
    if (!runtime.canDo) {
      output.done(new Error('Incorrect runtime instance'));
      return;
    }
    if (runtime.isConnected()) {
      connection.sendGraph(graph, runtime, function(err) {
        if (err) {
          output.done(err);
          return;
        }
        return output.sendDone({
          out: graph
        });
      });
      return;
    }
    return runtime.once('capabilities', function() {
      return connection.sendGraph(graph, runtime, function(err) {
        if (err) {
          output.done(err);
          return;
        }
        return output.sendDone({
          out: graph
        });
      });
    });
  });
};


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

var convertEvent, noflo,
  slice = [].slice;

noflo = __webpack_require__(0);

convertEvent = function(graph, event, data) {
  var msg, ref;
  msg = {
    command: event.toLowerCase(),
    payload: {}
  };
  switch (event) {
    case 'renameNode':
    case 'renameInport':
    case 'renameOutport':
    case 'renameGroup':
      msg.payload = {
        from: data[0],
        to: data[1]
      };
      break;
    case 'addEdge':
    case 'removeEdge':
    case 'changeEdge':
    case 'addInitial':
      msg.payload = {
        src: data[0].from,
        tgt: data[0].to,
        metadata: data[0].metadata
      };
      break;
    case 'removeInitial':
      msg.payload = {
        tgt: data[0].to
      };
      break;
    case 'addInport':
    case 'addOutport':
      msg.payload = {
        "public": data[0],
        node: data[1].process,
        port: data[1].port,
        metadata: data[1].metadata
      };
      break;
    case 'removeInport':
    case 'removeOutport':
      msg.payload = {
        "public": data[0]
      };
      break;
    default:
      msg.payload = data[0];
  }
  msg.payload.graph = graph.name || ((ref = graph.properties) != null ? ref.id : void 0);
  return msg;
};

exports.getComponent = function() {
  var c, events, unsubscribe;
  c = new noflo.Component;
  c.inPorts.add('runtime', {
    datatype: 'object',
    description: 'FBP Runtime instance'
  });
  c.inPorts.add('graph', {
    datatype: 'object',
    description: 'Graph to listen to'
  });
  c.outPorts.add('queued', {
    datatype: 'int',
    description: 'Number of changes in queue'
  });
  c.outPorts.add('sent', {
    datatype: 'bang',
    description: 'Notification that changes have been transmitted'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  events = ['addNode', 'removeNode', 'renameNode', 'changeNode', 'addEdge', 'removeEdge', 'changeEdge', 'addInitial', 'removeInitial', 'addInport', 'removeInport', 'renameInport', 'addOutport', 'removeOutport', 'renameOutport', 'addGroup', 'removeGroup', 'renameGroup', 'changeGroup'];
  c.current = null;
  unsubscribe = function() {
    var event, i, len;
    if (!c.current) {
      return;
    }
    for (i = 0, len = events.length; i < len; i++) {
      event = events[i];
      c.current.graph.removeListener(event, c.current[event]);
    }
    c.current.graph.removeListener('endTransaction', c.current.endTransaction);
    c.current.ctx.deactivate();
    return c.current = null;
  };
  c.tearDown = function(callback) {
    unsubscribe();
    return callback();
  };
  return c.process(function(input, output, context) {
    var graph, ref, runtime;
    if (!input.hasData('runtime', 'graph')) {
      return;
    }
    ref = input.getData('runtime', 'graph'), runtime = ref[0], graph = ref[1];
    unsubscribe();
    if (!runtime.canDo('protocol:graph')) {
      output.done(new Error("Runtime " + this.runtime.definition.id + " cannot update graphs"));
      return;
    }
    c.current = {
      graph: graph,
      rt: runtime,
      ctx: context,
      changes: []
    };
    events.forEach(function(event) {
      c.current[event] = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (c.current.graph !== graph) {
          return;
        }
        c.current.changes.push(convertEvent(graph, event, args));
        return output.send({
          queued: c.current.changes.length
        });
      };
      return graph.on(event, c.current[event]);
    });
    c.current.endTransaction = function() {
      var change;
      if (c.current.graph !== graph) {
        return;
      }
      while (c.current.changes.length) {
        change = c.current.changes.shift();
        c.current.rt.sendGraph(change.command, change.payload);
      }
      output.send({
        queued: c.current.changes.length
      });
      return output.send({
        sent: true
      });
    };
    graph.on('endTransaction', c.current.endTransaction);
  });
};


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var btoa, noflo;

noflo = __webpack_require__(0);

if (!noflo.isBrowser()) {
  btoa = __webpack_require__(367);
} else {
  btoa = window.btoa;
}

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'This component receives strings or Buffers and sends them out Base64-encoded';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Buffer or string to encode'
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Encoded input'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var bracket, brackets, i, j, k, len, len1, len2, packet, stream, string;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in');
    brackets = [];
    string = '';
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      if (packet.type === 'openBracket') {
        brackets.push(packet.data);
        continue;
      }
      if (packet.type === 'data') {
        if (!noflo.isBrowser() && packet.data instanceof Buffer) {
          string += packet.data.toString('utf-8');
          continue;
        }
        string += packet.data;
        continue;
      }
    }
    for (j = 0, len1 = brackets.length; j < len1; j++) {
      bracket = brackets[j];
      output.send({
        out: new noflo.IP('openBracket', bracket)
      });
    }
    output.send({
      out: btoa(string)
    });
    brackets.reverse();
    for (k = 0, len2 = brackets.length; k < len2; k++) {
      bracket = brackets[k];
      output.send({
        out: new noflo.IP('closeBracket', bracket)
      });
    }
    return output.done();
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).Buffer))

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {(function () {
  "use strict";

  function btoa(str) {
    var buffer
      ;

    if (str instanceof Buffer) {
      buffer = str;
    } else {
      buffer = new Buffer(str.toString(), 'binary');
    }

    return buffer.toString('base64');
  }

  module.exports = btoa;
}());

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).Buffer))

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Concatenate received strings with the given delimiter at the end of a stream';
  c.inPorts.add('delimiter', {
    datatype: 'string',
    description: 'String used to concatenate input strings',
    "default": "\n",
    control: true
  });
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'Strings to concatenate (one per IP)'
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Concatenation of input strings'
  });
  c.forwardBrackets = {};
  return c.process(function(input, output) {
    var bracket, brackets, delimiter, i, j, k, len, len1, len2, packet, stream, strings;
    if (!input.hasStream('in')) {
      return;
    }
    stream = input.getStream('in');
    brackets = [];
    strings = [];
    for (i = 0, len = stream.length; i < len; i++) {
      packet = stream[i];
      if (packet.type === 'openBracket') {
        brackets.push(packet.data);
        continue;
      }
      if (packet.type === 'data') {
        strings.push(packet.data);
        continue;
      }
    }
    delimiter = input.has('delimiter') ? input.getData('delimiter') : "\n";
    for (j = 0, len1 = brackets.length; j < len1; j++) {
      bracket = brackets[j];
      output.send({
        out: new noflo.IP('openBracket', bracket)
      });
    }
    output.send({
      out: strings.join(delimiter)
    });
    brackets.reverse();
    for (k = 0, len2 = brackets.length; k < len2; k++) {
      bracket = brackets[k];
      output.send({
        out: new noflo.IP('closeBracket', bracket)
      });
    }
    return output.done();
  });
};


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Convert a string or a buffer from one encoding to another. Default from UTF-8 to Base64';
  c.inPorts.add('in', {
    datatype: 'all',
    description: 'Buffer or string to be converted'
  });
  c.inPorts.add('from', {
    datatype: 'string',
    description: 'Input encoding',
    "default": 'utf8',
    control: true
  });
  c.inPorts.add('to', {
    datatype: 'string',
    description: 'Output encoding',
    "default": 'base64',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Converted string'
  });
  return c.process(function(input, output) {
    var data, from, result, to;
    if (!input.has('in')) {
      return;
    }
    from = input.has('from') ? input.getData('from') : 'utf8';
    to = input.has('to') ? input.getData('to') : 'base64';
    data = input.get('in');
    if (data.type !== 'data') {
      return;
    }
    result = '';
    if (data.data instanceof Buffer) {
      result += data.data.toString(from);
    } else if (typeof data.data === 'string') {
      result += new Buffer(data.data, from).toString();
    }
    return output.sendDone({
      out: new Buffer(result).toString(to)
    });
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).Buffer))

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Escape all quotes in a string";
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to escape quotes from'
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Escaped string'
  });
  return c.process(function(input, output) {
    var data;
    data = input.getData('in');
    return output.sendDone({
      out: data.replace(/\"/g, "\\\"")
    });
  });
};


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "filters an IP which is a string using a regex";
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to filter'
  });
  c.inPorts.add('pattern', {
    datatype: 'string',
    description: 'String representation of a regexp used as filter',
    control: true,
    required: true
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'String passing the filter'
  });
  c.outPorts.add('missed', {
    datatype: 'string',
    description: 'String failing the filter'
  });
  c.forwardBrackets = {
    "in": ['out', 'missed']
  };
  return c.process(function(input, output) {
    var data, regex;
    if (!input.has('in', 'pattern')) {
      return;
    }
    data = input.getData('in');
    if (!data) {
      return;
    }
    regex = new RegExp(input.getData('pattern'));
    if (typeof data !== 'string') {
      data = data.toString();
    }
    if ((regex != null) && ((data != null ? typeof data.match === "function" ? data.match(regex) : void 0 : void 0) != null)) {
      output.sendDone({
        out: data
      });
      return;
    }
    return output.sendDone({
      missed: data
    });
  });
};


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "JSONify all incoming, unless a raw flag is set to exclude data packets that are pure strings";
  c.inPorts.add('in', {
    datatype: 'object',
    description: 'Object to convert into a JSON representation'
  });
  c.inPorts.add('raw', {
    datatype: 'boolean',
    description: 'Whether to send strings as is',
    "default": false,
    control: true
  });
  c.inPorts.add('pretty', {
    datatype: 'boolean',
    description: 'Make JSON output pretty',
    "default": false,
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'JSON representation of the input object'
  });
  return c.process(function(input, output) {
    var data, pretty, raw;
    if (!input.has('in')) {
      return;
    }
    data = input.getData('in');
    if (!data) {
      return;
    }
    raw = false;
    if (input.has('raw')) {
      raw = String(input.getData('raw')) === 'true';
    }
    pretty = false;
    if (input.has('pretty')) {
      pretty = String(input.getData('pretty')) === 'true';
    }
    if (raw && typeof data === 'string') {
      output.sendDone({
        out: data
      });
      return;
    }
    if (pretty) {
      output.sendDone({
        out: JSON.stringify(data, null, 4)
      });
      return;
    }
    return output.sendDone({
      out: JSON.stringify(data)
    });
  });
};


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "toLowerCase on all incoming IPs (assuming they are strings)";
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'Mixed-case string'
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'All-lowercase string'
  });
  return c.process(function(input, output) {
    var data;
    data = input.getData('in');
    if (!data) {
      return;
    }
    return output.sendDone({
      out: data.toLowerCase()
    });
  });
};


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Replace string packets using a dictionary';
  c.inPorts.add('in', {
    datatype: 'string'
  });
  c.inPorts.add('match', {
    datatype: 'object',
    description: 'Dictionary object with key matching the input object and value being the replacement item',
    control: true,
    required: true
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var fromMatch, match, matchKeyIndex, matchKeys, matches, string, toMatch;
    if (!input.has('in', 'match')) {
      return;
    }
    match = input.getData('match');
    if (!match) {
      return;
    }
    if (!_.isObject(match)) {
      return;
    }
    string = input.getData('in');
    if (!string) {
      return;
    }
    matches = {};
    matchKeys = [];
    for (fromMatch in match) {
      toMatch = match[fromMatch];
      matches[fromMatch.toString()] = toMatch.toString();
    }
    matchKeys = _.keys(matches);
    matchKeyIndex = matchKeys.indexOf(string.toString());
    if (matchKeyIndex > -1) {
      string = matches[matchKeys[matchKeyIndex]];
    }
    return output.sendDone({
      out: string
    });
  });
};


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Parse a string to a float';
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to parse as Float representation'
  });
  c.outPorts.add('out', {
    datatype: 'number',
    description: 'Parsed number'
  });
  return c.process(function(input, output) {
    var data;
    data = input.getData('in');
    return output.sendDone({
      out: parseFloat(data)
    });
  });
};


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Parse a string to an integer';
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to parse as int representation'
  });
  c.inPorts.add('base', {
    datatype: 'number',
    description: 'Base used to parse the string representation',
    control: true,
    "default": 10
  });
  c.outPorts.add('out', {
    datatype: 'number',
    description: 'Parsed number'
  });
  return c.process(function(input, output) {
    var base, data;
    if (!input.has('in')) {
      return;
    }
    data = input.getData('in');
    base = input.has('base') ? input.getData('base') : 10;
    return output.sendDone({
      out: parseInt(data, base)
    });
  });
};


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Parse a JSON string';
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'JSON description to parse'
  });
  c.inPorts.add('try', {
    datatype: 'boolean',
    description: 'Deprecated'
  });
  c.outPorts.add('out', {
    datatype: 'object',
    description: 'Parsed object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  c.inPorts["try"].on('data', function(data) {
    return console.warn('ParseJson try port is deprecated');
  });
  return c.process(function(input, output) {
    var data, e, result;
    if (!input.has('in')) {
      return;
    }
    data = input.getData('in');
    if (!data) {
      return;
    }
    try {
      result = JSON.parse(data);
    } catch (error) {
      e = error;
      output.sendDone(e);
      return;
    }
    return output.sendDone({
      out: result
    });
  });
};


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "quote the incoming string IPs";
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to put quote around'
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Quoted input string'
  });
  return c.process(function(input, output) {
    var data;
    data = input.getData('in');
    if (!data) {
      return;
    }
    return output.sendDone({
      out: "'" + data + "'"
    });
  });
};


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Given a fixed pattern and its replacement, replace all occurrences in the incoming template.';
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to replace pattern in'
  });
  c.inPorts.add('pattern', {
    datatype: 'string',
    description: 'Pattern to replace',
    control: true
  });
  c.inPorts.add('replacement', {
    datatype: 'string',
    description: 'Replacement for the pattern',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var data, pattern, replacement;
    if (!input.has('in')) {
      return;
    }
    if (input.has('pattern')) {
      pattern = new RegExp(input.getData('pattern'), 'g');
    }
    replacement = '';
    if (input.has('replacement')) {
      replacement = input.getData('replacement').replace('\\\\n', "\n");
    }
    data = input.getData('in');
    if (!data) {
      return;
    }
    if (!pattern) {
      output.sendDone({
        out: data
      });
      return;
    }
    return output.sendDone({
      out: ("" + data).replace(pattern, replacement)
    });
  });
};


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Send a string when receiving a packet';
  c.inPorts.add('string', {
    datatype: 'string',
    description: 'String to send',
    control: true
  });
  c.inPorts.add('in', {
    datatype: 'bang',
    description: 'Send the string out'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var data;
    if (!input.has('string', 'in')) {
      return;
    }
    data = input.getData('in');
    return output.sendDone({
      out: input.getData('string')
    });
  });
};


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

var noflo, sift3;

noflo = __webpack_require__(0);

sift3 = function(s1, s2) {
  var c, i, lcs, maxOffset, offset1, offset2;
  if ((s1 == null) || s1.length === 0) {
    if ((s2 == null) || s2.length === 0) {
      return 0;
    } else {
      return s2.length;
    }
  }
  if ((s2 == null) || s2.length === 0) {
    return s1.length;
  }
  c = offset1 = offset2 = lcs = 0;
  maxOffset = 5;
  while ((c + offset1 < s1.length) && (c + offset2 < s2.length)) {
    if (s1[c + offset1] === s2[c + offset2]) {
      lcs++;
    } else {
      offset1 = offset2 = i = 0;
      while (i < maxOffset) {
        if ((c + i < s1.length) && (s1[c + i] === s2[c])) {
          offset1 = i;
          break;
        }
        if ((c + i < s2.length) && (s1[c] === s2[c + i])) {
          offset2 = i;
          break;
        }
        i++;
      }
    }
    c++;
  }
  return (s1.length + s2.length) / 2 - lcs;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "Compare distance between two strings using Sift3 algorithm";
  c.inPorts.add('string1', {
    datatype: 'string'
  });
  c.inPorts.add('string2', {
    datatype: 'string'
  });
  c.outPorts.add('out', {
    datatype: 'number'
  });
  c.forwardBrackets = {
    string2: ['out']
  };
  return c.process(function(input, output) {
    var s1, s2;
    if (!input.has('string1', 'string2')) {
      return;
    }
    s1 = input.get('string1');
    while (s1.type !== 'data') {
      s1 = input.get('string1');
    }
    if (s1.type !== 'data') {
      return;
    }
    s2 = input.get('string2');
    while (s2.type !== 'data') {
      s2 = input.get('string2');
    }
    if (s2.type !== 'data') {
      return;
    }
    return output.sendDone({
      out: sift3(s1.data, s2.data)
    });
  });
};


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "interlaces two arrays of string into a string";
  c.inPorts.add('in', {
    datatype: 'array',
    description: 'Array to interlace (2 consecutive IPs)'
  });
  c.inPorts.add('assoc', {
    datatype: 'string',
    control: true,
    "default": ':'
  });
  c.inPorts.add('delim', {
    datatype: 'string',
    control: true,
    "default": ','
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var assoc, buf, data, delim, packet, paired, port, strings;
    if (!input.has('in')) {
      return;
    }
    port = c.inPorts["in"];
    buf = input.scope ? port.scopedBuffer[input.scope] : port.buffer;
    data = buf.filter(function(ip) {
      return ip.type === 'data';
    });
    if (data.length < 2) {
      return;
    }
    strings = [];
    while (strings.length !== 2) {
      packet = input.get('in');
      if (packet.type !== 'data') {
        continue;
      }
      strings.push(packet.data);
    }
    assoc = input.has('assoc') ? input.getData('assoc') : ':';
    delim = input.has('delim') ? input.getData('delim') : ',';
    paired = _.zip(strings[0], strings[1]);
    strings = _.map(paired, (function(pair) {
      return pair.join(assoc);
    }));
    return output.sendDone({
      out: strings.join(delim)
    });
  });
};


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = ' The SplitStr component receives a string in the in port, splits it by string specified in the delimiter port, and send each part as a separate packet to the out port';
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to split'
  });
  c.inPorts.add('delimiter', {
    datatype: 'string',
    description: 'Delimiter used to split',
    control: true,
    "default": "\n"
  });
  c.outPorts.add('out', {
    datatype: 'string',
    description: 'Split off elements from the input string (one element per IP)'
  });
  return c.process(function(input, output) {
    var data, delimiter, first, i, last, len, string, strings;
    if (!input.hasData('in')) {
      return;
    }
    delimiter = input.has('delimiter') ? input.getData('delimiter') : "\n";
    first = delimiter.substr(0, 1);
    last = delimiter.substr(delimiter.length - 1, 1);
    if (first === '/' && last === '/' && delimiter.length > 1) {
      delimiter = new RegExp(delimiter.substr(1, delimiter.length - 2));
    }
    data = input.getData('in');
    strings = data.split(delimiter);
    for (i = 0, len = strings.length; i < len; i++) {
      string = strings[i];
      output.send({
        out: string
      });
    }
    return output.done();
  });
};


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Produce a string from input data with a given template';
  c.inPorts.add('template', {
    datatype: 'string',
    description: 'Templating string',
    control: true,
    required: true
  });
  c.inPorts.add('in', {
    datatype: 'object',
    description: 'Object containing key/value set used to run the template'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var data, template;
    if (!input.has('in', 'template')) {
      return;
    }
    data = input.get('in');
    if (data.type !== 'data') {
      return;
    }
    template = _.template(input.getData('template'));
    return output.sendDone({
      out: template(data.data)
    });
  });
};


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Produce a substring from a string';
  c.inPorts.add('index', {
    datatype: 'int',
    description: 'Index of the sub part ',
    control: true
  });
  c.inPorts.add('limit', {
    datatype: 'int',
    description: 'Limit of the sub part',
    control: true
  });
  c.inPorts.add('in', {
    datatype: 'string',
    description: 'String to extract a sub part from'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var data, index, limit;
    if (!input.has('in')) {
      return;
    }
    data = input.get('in');
    if (data.type !== 'data') {
      return;
    }
    index = input.has('index') ? input.getData('index') : 0;
    limit = input.has('limit') ? input.getData('limit') : void 0;
    return output.sendDone({
      out: data.data.substr(index, limit)
    });
  });
};


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

var _, noflo;

noflo = __webpack_require__(0);

_ = __webpack_require__(3);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = "The inverse of 'Replace': fix the template and pass in an object of patterns and replacements.";
  c.inPorts.add('in', {
    datatype: 'object'
  });
  c.inPorts.add('token', {
    datatype: 'string'
  });
  c.inPorts.add('template', {
    datatype: 'string',
    control: true
  });
  c.inPorts.add('default', {
    datatype: 'string',
    control: true
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var data, defaults, i, inputBuf, inputData, inputPort, len, packet, pattern, ref, replacement, result, string, strings, template, token, tokenBuf, tokenData, tokenPort, tokens;
    if (!input.has('template', 'in')) {
      return;
    }
    template = input.getData('template');
    if (!_.isString(template)) {
      return;
    }
    defaults = input.has('default') ? input.getData('default') : '';
    inputPort = c.inPorts["in"];
    inputBuf = input.scope ? inputPort.scopedBuffer[input.scope] : inputPort.buffer;
    inputData = inputBuf.filter(function(ip) {
      return ip.type === 'data';
    });
    if (!inputData.length) {
      return;
    }
    if (_.isObject(inputData[0].data)) {
      data = input.get('in');
      result = template;
      ref = data.data;
      for (pattern in ref) {
        replacement = ref[pattern];
        pattern = new RegExp(pattern, "g");
        result = result.replace(pattern, replacement);
      }
      output.sendDone({
        out: result
      });
      return;
    }
    c.autoOrdering = false;
    tokenPort = c.inPorts.token;
    tokenBuf = input.scope ? tokenPort.scopedBuffer[input.scope] : tokenPort.buffer;
    tokenData = tokenBuf.filter(function(ip) {
      return ip.type === 'data';
    });
    if (!tokenData.length) {
      return;
    }
    if (inputData.length < tokenData.length) {
      return;
    }
    strings = [];
    tokens = [];
    while (strings.length < tokenData.length) {
      packet = input.get('in');
      if (packet.type !== 'data') {
        continue;
      }
      strings.push(packet.data);
    }
    while (tokens.length < tokenData.length) {
      packet = input.get('token');
      if (packet.type !== 'data') {
        continue;
      }
      tokens.push(new RegExp(packet.data, 'g'));
    }
    result = template;
    for (i = 0, len = strings.length; i < len; i++) {
      string = strings[i];
      token = tokens.shift();
      replacement = _.isString(string) ? string : defaults;
      result = result.replace(token, replacement);
    }
    return output.sendDone({
      out: result
    });
  });
};


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Convert the input into a string using toString()';
  c.inPorts.add('in', {
    datatype: 'all'
  });
  c.outPorts.add('out', {
    datatype: 'string'
  });
  return c.process(function(input, output) {
    var data;
    data = input.getData('in');
    return output.sendDone({
      out: data.toString()
    });
  });
};


/***/ }),
/* 388 */
/***/ (function(module, exports) {

module.exports = {
	"processes": {
		"SendString": {
			"component": "strings/SendString"
		},
		"ParseJson": {
			"component": "strings/ParseJson"
		}
	},
	"connections": [
		{
			"src": {
				"process": "SendString",
				"port": "out"
			},
			"tgt": {
				"process": "ParseJson",
				"port": "in"
			}
		}
	],
	"inports": {
		"json": {
			"process": "SendString",
			"port": "string"
		},
		"in": {
			"process": "SendString",
			"port": "in"
		}
	},
	"outports": {
		"out": {
			"process": "ParseJson",
			"port": "out"
		},
		"error": {
			"process": "ParseJson",
			"port": "error"
		}
	},
	"caseSensitive": false
};

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

var ease, getEasing, noflo;

noflo = __webpack_require__(0);

ease = __webpack_require__(390);

getEasing = function(name) {
  return ease[name] || function(n) {
    return n;
  };
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Easing function component that takes a normalized value between 0 and 1 and outputs eased value between from and to inputs';
  c.icon = 'cogs';
  c.inPorts.add('from', {
    datatype: 'number',
    control: true
  });
  c.inPorts.add('to', {
    datatype: 'number',
    control: true
  });
  c.inPorts.add('type', {
    datatype: 'string',
    values: ['linear', 'in-quad', 'out-quad', 'in-out-quad', 'in-cube', 'out-cube', 'in-out-cube', 'in-quart', 'out-quart', 'in-out-quart', 'in-quint', 'out-quint', 'in-out-quint', 'in-sine', 'out-sine', 'in-out-sine', 'in-expo', 'out-expo', 'in-out-expo', 'in-circ', 'out-circ', 'in-out-circ', 'in-back', 'out-back', 'in-out-back', 'in-bounce', 'out-bounce', 'in-out-bounce'],
    "default": 'linear',
    control: true
  });
  c.inPorts.add('in', {
    datatype: 'number'
  });
  c.outPorts.add('out', {
    datatype: 'number'
  });
  return c.process(function(input, output) {
    var from, func, ref, to, type, val, value;
    if (!input.hasData('from', 'to', 'in')) {
      return;
    }
    if (input.attached('type').length && !input.hasData('type')) {
      return;
    }
    ref = input.getData('from', 'to', 'in'), from = ref[0], to = ref[1], value = ref[2];
    type = 'linear';
    if (input.hasData('type')) {
      type = input.getData('type');
    }
    func = getEasing(type);
    val = from + func(value) * (to - from);
    output.sendDone({
      out: val
    });
  });
};


/***/ }),
/* 390 */
/***/ (function(module, exports) {


// easing functions from "Tween.js"

exports.linear = function(n){
  return n;
};

exports.inQuad = function(n){
  return n * n;
};

exports.outQuad = function(n){
  return n * (2 - n);
};

exports.inOutQuad = function(n){
  n *= 2;
  if (n < 1) return 0.5 * n * n;
  return - 0.5 * (--n * (n - 2) - 1);
};

exports.inCube = function(n){
  return n * n * n;
};

exports.outCube = function(n){
  return --n * n * n + 1;
};

exports.inOutCube = function(n){
  n *= 2;
  if (n < 1) return 0.5 * n * n * n;
  return 0.5 * ((n -= 2 ) * n * n + 2);
};

exports.inQuart = function(n){
  return n * n * n * n;
};

exports.outQuart = function(n){
  return 1 - (--n * n * n * n);
};

exports.inOutQuart = function(n){
  n *= 2;
  if (n < 1) return 0.5 * n * n * n * n;
  return -0.5 * ((n -= 2) * n * n * n - 2);
};

exports.inQuint = function(n){
  return n * n * n * n * n;
}

exports.outQuint = function(n){
  return --n * n * n * n * n + 1;
}

exports.inOutQuint = function(n){
  n *= 2;
  if (n < 1) return 0.5 * n * n * n * n * n;
  return 0.5 * ((n -= 2) * n * n * n * n + 2);
};

exports.inSine = function(n){
  return 1 - Math.cos(n * Math.PI / 2 );
};

exports.outSine = function(n){
  return Math.sin(n * Math.PI / 2);
};

exports.inOutSine = function(n){
  return .5 * (1 - Math.cos(Math.PI * n));
};

exports.inExpo = function(n){
  return 0 == n ? 0 : Math.pow(1024, n - 1);
};

exports.outExpo = function(n){
  return 1 == n ? n : 1 - Math.pow(2, -10 * n);
};

exports.inOutExpo = function(n){
  if (0 == n) return 0;
  if (1 == n) return 1;
  if ((n *= 2) < 1) return .5 * Math.pow(1024, n - 1);
  return .5 * (-Math.pow(2, -10 * (n - 1)) + 2);
};

exports.inCirc = function(n){
  return 1 - Math.sqrt(1 - n * n);
};

exports.outCirc = function(n){
  return Math.sqrt(1 - (--n * n));
};

exports.inOutCirc = function(n){
  n *= 2
  if (n < 1) return -0.5 * (Math.sqrt(1 - n * n) - 1);
  return 0.5 * (Math.sqrt(1 - (n -= 2) * n) + 1);
};

exports.inBack = function(n){
  var s = 1.70158;
  return n * n * (( s + 1 ) * n - s);
};

exports.outBack = function(n){
  var s = 1.70158;
  return --n * n * ((s + 1) * n + s) + 1;
};

exports.inOutBack = function(n){
  var s = 1.70158 * 1.525;
  if ( ( n *= 2 ) < 1 ) return 0.5 * ( n * n * ( ( s + 1 ) * n - s ) );
  return 0.5 * ( ( n -= 2 ) * n * ( ( s + 1 ) * n + s ) + 2 );
};

exports.inBounce = function(n){
  return 1 - exports.outBounce(1 - n);
};

exports.outBounce = function(n){
  if ( n < ( 1 / 2.75 ) ) {
    return 7.5625 * n * n;
  } else if ( n < ( 2 / 2.75 ) ) {
    return 7.5625 * ( n -= ( 1.5 / 2.75 ) ) * n + 0.75;
  } else if ( n < ( 2.5 / 2.75 ) ) {
    return 7.5625 * ( n -= ( 2.25 / 2.75 ) ) * n + 0.9375;
  } else {
    return 7.5625 * ( n -= ( 2.625 / 2.75 ) ) * n + 0.984375;
  }
};

exports.inOutBounce = function(n){
  if (n < .5) return exports.inBounce(n * 2) * .5;
  return exports.outBounce(n * 2 - 1) * .5 + .5;
};

// aliases

exports['in-quad'] = exports.inQuad;
exports['out-quad'] = exports.outQuad;
exports['in-out-quad'] = exports.inOutQuad;
exports['in-cube'] = exports.inCube;
exports['out-cube'] = exports.outCube;
exports['in-out-cube'] = exports.inOutCube;
exports['in-quart'] = exports.inQuart;
exports['out-quart'] = exports.outQuart;
exports['in-out-quart'] = exports.inOutQuart;
exports['in-quint'] = exports.inQuint;
exports['out-quint'] = exports.outQuint;
exports['in-out-quint'] = exports.inOutQuint;
exports['in-sine'] = exports.inSine;
exports['out-sine'] = exports.outSine;
exports['in-out-sine'] = exports.inOutSine;
exports['in-expo'] = exports.inExpo;
exports['out-expo'] = exports.outExpo;
exports['in-out-expo'] = exports.inOutExpo;
exports['in-circ'] = exports.inCirc;
exports['out-circ'] = exports.outCirc;
exports['in-out-circ'] = exports.inOutCirc;
exports['in-back'] = exports.inBack;
exports['out-back'] = exports.outBack;
exports['in-out-back'] = exports.inOutBack;
exports['in-bounce'] = exports.inBounce;
exports['out-bounce'] = exports.outBounce;
exports['in-out-bounce'] = exports.inOutBounce;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

var advanceTimeline, getPosition, isComplete, noflo;

noflo = __webpack_require__(0);

getPosition = function(ctx) {
  var pos;
  pos = ctx.elapsedTime / ctx.duration;
  if (!ctx.direction) {
    pos = 1.0 - pos;
  }
  return pos;
};

isComplete = function(ctx) {
  if (ctx.repeat > 0) {
    return false;
  }
  if (ctx.elapsedTime < ctx.duration) {
    return false;
  }
  return true;
};

advanceTimeline = function(ctx, callback) {
  var delta, t;
  if (!ctx.running) {
    return callback(null);
  }
  t = Date.now();
  delta = t - ctx.lastTime;
  ctx.lastTime = t;
  ctx.elapsedTime += delta;
  if (isComplete(ctx)) {
    ctx.running = false;
    ctx.elapsedTime = ctx.duration;
    callback(null);
    return;
  }
  if (ctx.elapsedTime < ctx.duration) {
    callback(getPosition(ctx));
    return;
  }
  ctx.elapsedTime = ctx.elapsedTime - ctx.duration;
  if (ctx.autoreverse) {
    ctx.direction = !ctx.direction;
  }
  if (ctx.repeat > 0) {
    ctx.repeat -= 1;
  }
  return callback(getPosition(ctx));
};

exports.getComponent = function() {
  return new EaseTime;
};

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.description = 'Converts time to normalized value between 0 and 1 for Ease';
  c.icon = 'cogs';
  c.inPorts.add('tick', {
    datatype: 'bang'
  });
  c.inPorts.add('start', {
    datatype: 'bang'
  });
  c.inPorts.add('pause', {
    datatype: 'bang'
  });
  c.inPorts.add('unpause', {
    datatype: 'bang'
  });
  c.inPorts.add('stop', {
    datatype: 'bang'
  });
  c.inPorts.add('duration', {
    datatype: 'number',
    control: true
  });
  c.inPorts.add('repeat', {
    datatype: 'number',
    control: true
  });
  c.inPorts.add('reverse', {
    datatype: 'boolean',
    control: true
  });
  c.inPorts.add('autoreverse', {
    datatype: 'boolean',
    control: true
  });
  c.outPorts.add('started', {
    datatype: 'bang'
  });
  c.outPorts.add('stopped', {
    datatype: 'bang'
  });
  c.outPorts.add('paused', {
    datatype: 'bang'
  });
  c.outPorts.add('unpaused', {
    datatype: 'bang'
  });
  c.outPorts.add('value', {
    datatype: 'number'
  });
  c.forwardBrackets = {};
  c.scopes = {};
  c.tearDown = function(callback) {
    c.scopes = {};
    return callback();
  };
  return c.process(function(input, output) {
    var autoreverse, duration, ref, ref1, repeat, reverse;
    if (input.attached('duration').length && !input.hasData('duration')) {
      return;
    }
    if (input.attached('repeat').length && !input.hasData('repeat')) {
      return;
    }
    if (input.attached('reverse').length && !input.hasData('reverse')) {
      return;
    }
    if (input.attached('autoreverse').length && !input.hasData('autoreverse')) {
      return;
    }
    if (input.hasData('start')) {
      input.getData('start');
      duration = 500;
      if (input.hasData('duration')) {
        duration = input.getData('duration');
      }
      repeat = 0;
      if (input.hasData('repeat')) {
        repeat = input.getData('repeat');
      }
      reverse = false;
      if (input.hasData('reverse')) {
        reverse = input.getData('reverse');
      }
      autoreverse = false;
      if (input.hasData('autoreverse')) {
        autoreverse = input.getData('autoreverse');
      }
      c.scopes[input.scope] = {
        running: true,
        duration: duration,
        repeat: repeat,
        autoreverse: autoreverse,
        lastTime: Date.now(),
        elapsedTime: 0,
        direction: !reverse
      };
      output.send({
        started: true
      });
      return;
    }
    if (input.hasData('stop')) {
      input.getData('stop');
      if (c.scopes[input.scope]) {
        delete c.scopes[input.scope];
      }
      output.sendDone({
        stopped: true
      });
      return;
    }
    if (input.hasData('pause')) {
      input.getData('pause');
      if (!((ref = c.scopes[input.scope]) != null ? ref.running : void 0)) {
        output.done();
        return;
      }
      c.scopes[input.scope].running = false;
      output.sendDone({
        paused: true
      });
      return;
    }
    if (input.hasData('unpause')) {
      input.getData('unpause');
      if (!c.scopes[input.scope]) {
        output.done();
        return;
      }
      if (c.scopes[input.scope].running) {
        output.done();
        return;
      }
      c.scopes[input.scope].running = true;
      output.sendDone({
        unpaused: true
      });
      return;
    }
    if (input.hasData('tick')) {
      input.getData('tick');
      if (!((ref1 = c.scopes[input.scope]) != null ? ref1.running : void 0)) {
        output.done();
        return;
      }
      advanceTimeline(c.scopes[input.scope], function(pos) {
        if (pos === null) {
          output.done();
          return;
        }
        return output.sendDone({
          value: pos
        });
      });
    }
  });
};


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, AudioFile, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

AudioFile = (function(superClass) {
  extend(AudioFile, superClass);

  AudioFile.prototype.description = 'Create an audio source loading a sound file';

  AudioFile.prototype.icon = 'file-audio-o';

  function AudioFile() {
    var ports;
    ports = {
      file: {
        datatype: 'string',
        description: 'URL of file to load',
        required: true
      },
      play: {
        datatype: 'bang',
        description: 'plays the file right now'
      },
      start: {
        datatype: 'object',
        description: 'schedules to playback {time, offset, duration}'
      },
      stop: {
        datatype: 'number',
        description: 'schedules to stop at an exact time'
      }
    };
    ArrayableHelper(this, 'audiofile', ports);
  }

  return AudioFile;

})(noflo.Component);

exports.getComponent = function() {
  return new AudioFile;
};


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Chorus, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Chorus = (function(superClass) {
  extend(Chorus, superClass);

  Chorus.prototype.description = 'Basic chorus effect (TUNA)';

  Chorus.prototype.icon = 'group';

  function Chorus() {
    var ports;
    ports = {
      audionodes: {
        datatype: 'object',
        description: 'audio nodes (oscillators, buffer sources, ...)',
        addressable: true,
        required: true
      },
      rate: {
        datatyle: 'number',
        description: '(0.01...8+)',
        required: true
      },
      feedback: {
        datatyle: 'number',
        description: '(0...1+)',
        required: true
      },
      delay: {
        datatyle: 'number',
        description: '(0...1)',
        required: true
      },
      bypass: {
        datatyle: 'number',
        description: '(0 or 1)',
        required: true
      }
    };
    ArrayableHelper(this, 'chorus', ports);
  }

  return Chorus;

})(noflo.Component);

exports.getComponent = function() {
  return new Chorus;
};


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Convolver, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Convolver = (function(superClass) {
  extend(Convolver, superClass);

  Convolver.prototype.description = 'Applies impulse response data to a given audio signal';

  Convolver.prototype.icon = 'share-alt';

  function Convolver() {
    var ports;
    ports = {
      audionodes: {
        datatype: 'object',
        description: 'audio nodes (oscillators, buffer sources, ...)',
        addressable: true,
        required: true
      },
      impulse: {
        datatyle: 'string',
        description: 'impulse response filepath',
        required: true
      }
    };
    ArrayableHelper(this, 'convolver', ports);
  }

  return Convolver;

})(noflo.Component);

exports.getComponent = function() {
  return new Convolver;
};


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Gain, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Gain = (function(superClass) {
  extend(Gain, superClass);

  Gain.prototype.description = 'Multiplies the input audio signal by the given gain value, ' + 'changing its amplitude.';

  Gain.prototype.icon = 'filter';

  function Gain() {
    var ports;
    ports = {
      audionodes: {
        datatype: 'object',
        description: 'audio nodes (oscillators, buffer sources, ...)',
        addressable: true,
        required: true
      },
      gain: {
        datatyle: 'number',
        description: 'amount of gain to apply (0...1)',
        required: true
      }
    };
    ArrayableHelper(this, 'gain', ports);
  }

  return Gain;

})(noflo.Component);

exports.getComponent = function() {
  return new Gain;
};


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, MakeTime, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

MakeTime = (function(superClass) {
  extend(MakeTime, superClass);

  MakeTime.prototype.description = 'Creates one or more time events';

  MakeTime.prototype.icon = 'clock-o';

  function MakeTime() {
    var ports;
    ports = {
      time: {
        datatype: 'number',
        description: 'when in future (ms)'
      },
      offset: {
        datatype: 'number',
        description: 'distance from start (ms)'
      },
      duration: {
        datatype: 'number',
        description: 'how long (ms)'
      }
    };
    ArrayableHelper(this, 'time', ports);
  }

  return MakeTime;

})(noflo.Component);

exports.getComponent = function() {
  return new MakeTime;
};


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Oscillator, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Oscillator = (function(superClass) {
  extend(Oscillator, superClass);

  Oscillator.prototype.description = 'Create an audio source with a periodic waveform ' + '(sine, square, sawtooth, triangle, custom)';

  Oscillator.prototype.icon = 'volume-up';

  function Oscillator() {
    var ports;
    ports = {
      waveform: {
        datatype: 'string',
        description: 'sine, square, sawtooth, triangle, custom',
        required: true
      },
      frequency: {
        datatype: 'number',
        description: 'frequency of signal',
        required: true
      },
      start: {
        datatype: 'number',
        description: 'schedules to playback at an exact time'
      },
      stop: {
        datatype: 'number',
        description: 'schedules to stop at an exact time'
      }
    };
    ArrayableHelper(this, 'oscillator', ports);
  }

  return Oscillator;

})(noflo.Component);

exports.getComponent = function() {
  return new Oscillator;
};


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

var ArrayableHelper, Panner, noflo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

noflo = __webpack_require__(0);

ArrayableHelper = __webpack_require__(1);

Panner = (function(superClass) {
  extend(Panner, superClass);

  Panner.prototype.description = 'Changes the location of a given audio source';

  Panner.prototype.icon = 'compass';

  function Panner() {
    var ports;
    ports = {
      audionodes: {
        datatype: 'object',
        description: 'audio nodes (oscillators, buffer sources, ...)',
        addressable: true,
        required: true
      },
      position: {
        datatyle: 'object',
        description: 'a 2D or 3D point',
        required: true
      }
    };
    ArrayableHelper(this, 'panner', ports);
  }

  return Panner;

})(noflo.Component);

exports.getComponent = function() {
  return new Panner;
};


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

var PlayCommands, noflo,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

noflo = __webpack_require__(0);

PlayCommands = (function() {
  function PlayCommands(scope) {
    this.updateBuffer = bind(this.updateBuffer, this);
    this.audiofile = bind(this.audiofile, this);
    this.panner = bind(this.panner, this);
    this.oscillator = bind(this.oscillator, this);
    this.gain = bind(this.gain, this);
    this.parseThing = bind(this.parseThing, this);
    this.parseCommand = bind(this.parseCommand, this);
    this.create = bind(this.create, this);
    this.walk = bind(this.walk, this);
    this.parse = bind(this.parse, this);
    this.audionodes = scope.audionodes;
    this.table_audionodes = scope.table_audionodes;
    this.buffer_data = scope.buffer_data;
    this.context = scope.context;
  }

  PlayCommands.prototype.parse = function(audionodes) {
    return this.walk(audionodes, 0);
  };

  PlayCommands.prototype.walk = function(audionodes, level) {
    var audionode, children, created, i, len;
    for (i = 0, len = audionodes.length; i < len; i++) {
      audionode = audionodes[i];
      created = this.create(audionode);
      if (level === 0) {
        created.connect(this.context.destination);
      }
      if (audionode.audionodes != null) {
        children = audionode.audionodes;
        if (children instanceof Array) {
          this.walk(children, level + 1).connect(created);
        } else {
          this.walk([children], level + 1).connect(created);
        }
      } else {
        return created;
      }
    }
  };

  PlayCommands.prototype.create = function(audionode) {
    return this.parseCommand(audionode);
  };

  PlayCommands.prototype.parseCommand = function(commands) {
    if (!this.context) {
      return;
    }
    return this.parseThing(commands);
  };

  PlayCommands.prototype.parseThing = function(thing, before, after) {
    var i, item, len, results;
    if ((thing != null) && (thing.type != null) && (this[thing.type] != null)) {
      if (before != null) {
        before();
      }
      return this[thing.type](thing);
      if (after != null) {
        return after();
      }
    } else if (thing instanceof Array) {
      results = [];
      for (i = 0, len = thing.length; i < len; i++) {
        item = thing[i];
        if (item == null) {
          continue;
        }
        results.push(this.parseThing(item, before, after));
      }
      return results;
    }
  };

  PlayCommands.prototype.gain = function(params) {
    var audioNode;
    if (params.id in this.table_audionodes) {
      audioNode = this.table_audionodes[params.id];
    } else {
      audioNode = this.context.createGain();
      this.table_audionodes[params.id] = audioNode;
    }
    audioNode.gain.value = params.gain;
    return audioNode;
  };

  PlayCommands.prototype.oscillator = function(params) {
    var audioNode;
    if (params.id in this.table_audionodes) {
      audioNode = this.table_audionodes[params.id];
    } else {
      audioNode = this.context.createOscillator();
      audioNode.start(params.start);
      this.table_audionodes[params.id] = audioNode;
    }
    audioNode.type = params.waveform;
    audioNode.frequency.value = params.frequency;
    return audioNode;
  };

  PlayCommands.prototype.panner = function(params) {
    var audioNode;
    if (params.id in this.table_audionodes) {
      audioNode = this.table_audionodes[params.id];
    } else {
      audioNode = this.context.createPanner();
      this.table_audionodes[params.id] = audioNode;
    }
    audioNode.setPosition(params.position.x, params.position.y, 0);
    return audioNode;
  };

  PlayCommands.prototype.audiofile = function(params) {
    var audioNode, duration, offset, ref, request, time;
    if (params.id in this.table_audionodes) {
      audioNode = this.context.createBufferSource();
      this.table_audionodes[params.id] = audioNode;
      if (this.buffer_data[params.id] != null) {
        this.updateBuffer(audioNode, params.id);
        ref = params.start, time = ref.time, offset = ref.offset, duration = ref.duration;
        audioNode.start(time, offset, duration);
      }
    } else {
      audioNode = this.context.createBufferSource();
      this.table_audionodes[params.id] = audioNode;
      request = new XMLHttpRequest();
      request.open("GET", params.file, true);
      request.responseType = "arraybuffer";
      request.onload = (function(_this) {
        return function() {
          return _this.context.decodeAudioData(request.response, function(buffer) {
            _this.buffer_data[params.id] = buffer;
            return _this.updateBuffer(audioNode, params.id);
          });
        };
      })(this);
      request.send();
    }
    return audioNode;
  };

  PlayCommands.prototype.updateBuffer = function(audionode, id) {
    return audionode.buffer = this.buffer_data[id];
  };

  return PlayCommands;

})();

exports.getComponent = function() {
  var c, ensureScope;
  c = new noflo.Component;
  c.description = 'Plays given chains and patterns';
  c.icon = 'play';
  c.inPorts.add('audionodes', {
    datatype: 'object',
    addressable: true
  });
  c.scopes = {};
  c.tearDown = function(callback) {
    var ref, scope, scopes;
    scopes = Object.keys(c.scopes);
    if (!scopes.length) {
      callback();
      return;
    }
    scope = scopes[0];
    if (!((ref = c.scopes[scope]) != null ? ref.context : void 0)) {
      delete c.scopes[scope];
      c.tearDown(callback);
      return;
    }
    c.scopes[scope].context.close().then(function() {
      delete c.scopes[scope];
      return c.tearDown(callback);
    }, function(err) {
      return callback(err);
    });
  };
  ensureScope = function(scope) {
    var context;
    if (!c.scopes[scope]) {
      context = new AudioContext();
      c.scopes[scope] = {
        audionodes: [],
        table_audionodes: {},
        buffer_data: {},
        context: context
      };
    }
    return c.scopes[scope];
  };
  return c.process(function(input, output) {
    var indexesWithData, play, scope;
    scope = ensureScope(input.scope);
    indexesWithData = input.attached('audionodes').filter(function(idx) {
      return input.hasData(['audionodes', idx]);
    });
    if (!indexesWithData.length) {
      return;
    }
    play = new PlayCommands(scope);
    indexesWithData.forEach(function(idx) {
      scope.audionodes[idx] = input.getData(['audionodes', idx]);
      if (scope.audionodes[idx] instanceof Array) {
        return play.parse(scope.audionodes[idx]);
      } else {
        return play.parse([scope.audionodes[idx]]);
      }
    });
    output.done();
  });
};


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

var WsClient, noflo;

noflo = __webpack_require__(0);

WsClient = WebSocket;

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('url', {
    datatype: 'string'
  });
  c.inPorts.add('protocol', {
    datatype: 'string',
    "default": '',
    control: true
  });
  c.outPorts.add('connection', {
    datatype: 'object'
  });
  c.outPorts.add('error', {
    datatype: 'object'
  });
  return c.process(function(input, output) {
    var client, protocol, url;
    if (!input.hasData('url')) {
      return;
    }
    if (input.attached('protocol').length && !input.hasData('protocol')) {
      return;
    }
    protocol = '';
    if (input.hasData('protocol')) {
      protocol = input.getData('protocol');
    }
    url = input.getData('url');
    client = new WsClient(url, protocol);
    client.onerror = function(err) {
      return output.done(err);
    };
    client.onopen = function() {
      return output.sendDone({
        connection: client
      });
    };
  });
};


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('connection', {
    datatype: 'object'
  });
  c.outPorts.add('string', {
    datatype: 'string'
  });
  c.outPorts.add('binary', {
    datatype: 'buffer'
  });
  c.forwardBrackets = {};
  c.autoOrdering = false;
  return c.process(function(input, output) {
    var connection;
    if (!input.hasData('connection')) {
      return;
    }
    connection = input.getData('connection');
    if (noflo.isBrowser()) {
      connection.addEventListener('message', function(message) {
        return output.send({
          string: message.data
        });
      }, false);
      connection.addEventListener('close', function(message) {
        return output.done();
      }, false);
      return;
    }
    connection.on('message', function(message) {
      if (message.type === 'utf8') {
        output.send({
          string: message.utf8Data
        });
        return;
      }
      if (message.type === 'binary') {
        output.send({
          binary: message.binaryData
        });
      }
    });
    return connection.on('close', function() {
      return output.done();
    });
  });
};


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

var noflo;

noflo = __webpack_require__(0);

exports.getComponent = function() {
  var c;
  c = new noflo.Component;
  c.inPorts.add('connection', {
    datatype: 'object'
  });
  c.inPorts.add('string', {
    datatype: 'string'
  });
  c.connections = {};
  c.tearDown = function(callback) {
    c.connections = {};
    return callback();
  };
  return c.process(function(input, output) {
    var message;
    if (input.hasData('connection')) {
      c.connections[input.scope] = input.getData('connection');
      output.done();
      return;
    }
    if (!c.connections[input.scope]) {
      return;
    }
    if (!input.hasData('string')) {
      return;
    }
    message = input.getData('string');
    if (noflo.isBrowser()) {
      c.connections[input.scope].send(message);
      output.done();
      return;
    }
    c.connections[input.scope].sendUTF(message);
    output.done();
  });
};


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var AsyncComponent, component, platform, port,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  port = __webpack_require__(20);

  component = __webpack_require__(39);

  platform = __webpack_require__(9);

  AsyncComponent = (function(superClass) {
    extend(AsyncComponent, superClass);

    function AsyncComponent(inPortName, outPortName, errPortName) {
      this.inPortName = inPortName != null ? inPortName : "in";
      this.outPortName = outPortName != null ? outPortName : "out";
      this.errPortName = errPortName != null ? errPortName : "error";
      this.error = bind(this.error, this);
      platform.deprecated('noflo.AsyncComponent is deprecated. Please port to Process API');
      if (!this.inPorts[this.inPortName]) {
        throw new Error("no inPort named '" + this.inPortName + "'");
      }
      if (!this.outPorts[this.outPortName]) {
        throw new Error("no outPort named '" + this.outPortName + "'");
      }
      this.load = 0;
      this.q = [];
      this.errorGroups = [];
      this.outPorts.load = new port.Port();
      this.inPorts[this.inPortName].on("begingroup", (function(_this) {
        return function(group) {
          if (_this.load > 0) {
            return _this.q.push({
              name: "begingroup",
              data: group
            });
          }
          _this.errorGroups.push(group);
          return _this.outPorts[_this.outPortName].beginGroup(group);
        };
      })(this));
      this.inPorts[this.inPortName].on("endgroup", (function(_this) {
        return function() {
          if (_this.load > 0) {
            return _this.q.push({
              name: "endgroup"
            });
          }
          _this.errorGroups.pop();
          return _this.outPorts[_this.outPortName].endGroup();
        };
      })(this));
      this.inPorts[this.inPortName].on("disconnect", (function(_this) {
        return function() {
          if (_this.load > 0) {
            return _this.q.push({
              name: "disconnect"
            });
          }
          _this.outPorts[_this.outPortName].disconnect();
          _this.errorGroups = [];
          if (_this.outPorts.load.isAttached()) {
            return _this.outPorts.load.disconnect();
          }
        };
      })(this));
      this.inPorts[this.inPortName].on("data", (function(_this) {
        return function(data) {
          if (_this.q.length > 0) {
            return _this.q.push({
              name: "data",
              data: data
            });
          }
          return _this.processData(data);
        };
      })(this));
    }

    AsyncComponent.prototype.processData = function(data) {
      this.incrementLoad();
      return this.doAsync(data, (function(_this) {
        return function(err) {
          if (err) {
            _this.error(err, _this.errorGroups, _this.errPortName);
          }
          return _this.decrementLoad();
        };
      })(this));
    };

    AsyncComponent.prototype.incrementLoad = function() {
      this.load++;
      if (this.outPorts.load.isAttached()) {
        this.outPorts.load.send(this.load);
      }
      if (this.outPorts.load.isAttached()) {
        return this.outPorts.load.disconnect();
      }
    };

    AsyncComponent.prototype.doAsync = function(data, callback) {
      return callback(new Error("AsyncComponents must implement doAsync"));
    };

    AsyncComponent.prototype.decrementLoad = function() {
      if (this.load === 0) {
        throw new Error("load cannot be negative");
      }
      this.load--;
      if (this.outPorts.load.isAttached()) {
        this.outPorts.load.send(this.load);
      }
      if (this.outPorts.load.isAttached()) {
        this.outPorts.load.disconnect();
      }
      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
        return process.nextTick((function(_this) {
          return function() {
            return _this.processQueue();
          };
        })(this));
      } else {
        return setTimeout((function(_this) {
          return function() {
            return _this.processQueue();
          };
        })(this), 0);
      }
    };

    AsyncComponent.prototype.processQueue = function() {
      var event, processedData;
      if (this.load > 0) {
        return;
      }
      processedData = false;
      while (this.q.length > 0) {
        event = this.q[0];
        switch (event.name) {
          case "begingroup":
            if (processedData) {
              return;
            }
            this.outPorts[this.outPortName].beginGroup(event.data);
            this.errorGroups.push(event.data);
            this.q.shift();
            break;
          case "endgroup":
            if (processedData) {
              return;
            }
            this.outPorts[this.outPortName].endGroup();
            this.errorGroups.pop();
            this.q.shift();
            break;
          case "disconnect":
            if (processedData) {
              return;
            }
            this.outPorts[this.outPortName].disconnect();
            if (this.outPorts.load.isAttached()) {
              this.outPorts.load.disconnect();
            }
            this.errorGroups = [];
            this.q.shift();
            break;
          case "data":
            this.processData(event.data);
            this.q.shift();
            processedData = true;
        }
      }
    };

    AsyncComponent.prototype.tearDown = function(callback) {
      this.q = [];
      this.errorGroups = [];
      return callback();
    };

    AsyncComponent.prototype.error = function(e, groups, errorPort) {
      var group, i, j, len, len1;
      if (groups == null) {
        groups = [];
      }
      if (errorPort == null) {
        errorPort = 'error';
      }
      if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          this.outPorts[errorPort].beginGroup(group);
        }
        this.outPorts[errorPort].send(e);
        for (j = 0, len1 = groups.length; j < len1; j++) {
          group = groups[j];
          this.outPorts[errorPort].endGroup();
        }
        this.outPorts[errorPort].disconnect();
        return;
      }
      throw e;
    };

    return AsyncComponent;

  })(component.Component);

  exports.AsyncComponent = AsyncComponent;

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var IP, InternalSocket, OutPortWrapper, StreamReceiver, StreamSender, checkDeprecation, checkWirePatternPreconditions, checkWirePatternPreconditionsInput, checkWirePatternPreconditionsParams, debug, getGroupContext, getInputData, getOutputProxy, handleInputCollation, isArray, legacyWirePattern, platform, populateParams, processApiWirePattern, reorderBuffer, setupBracketForwarding, setupControlPorts, setupErrorHandler, setupSendDefaults, utils,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  StreamSender = __webpack_require__(21).StreamSender;

  StreamReceiver = __webpack_require__(21).StreamReceiver;

  InternalSocket = __webpack_require__(12);

  IP = __webpack_require__(7);

  platform = __webpack_require__(9);

  utils = __webpack_require__(38);

  debug = __webpack_require__(5)('noflo:helpers');

  isArray = function(obj) {
    if (Array.isArray) {
      return Array.isArray(obj);
    }
    return Object.prototype.toString.call(arg) === '[object Array]';
  };

  exports.MapComponent = function(component, func, config) {
    platform.deprecated('noflo.helpers.MapComponent is deprecated. Please port to Process API');
    if (!config) {
      config = {};
    }
    if (!config.inPort) {
      config.inPort = 'in';
    }
    if (!config.outPort) {
      config.outPort = 'out';
    }
    if (!component.forwardBrackets) {
      component.forwardBrackets = {};
    }
    component.forwardBrackets[config.inPort] = [config.outPort];
    return component.process(function(input, output) {
      var data, groups, outProxy;
      if (!input.hasData(config.inPort)) {
        return;
      }
      data = input.getData(config.inPort);
      groups = getGroupContext(component, config.inPort, input);
      outProxy = getOutputProxy([config.outPort], output);
      func(data, groups, outProxy);
      return output.done();
    });
  };

  exports.WirePattern = function(component, config, proc) {
    var inPorts, outPorts, ref, setup;
    inPorts = 'in' in config ? config["in"] : 'in';
    if (!isArray(inPorts)) {
      inPorts = [inPorts];
    }
    outPorts = 'out' in config ? config.out : 'out';
    if (!isArray(outPorts)) {
      outPorts = [outPorts];
    }
    if (!('error' in config)) {
      config.error = 'error';
    }
    if (!('async' in config)) {
      config.async = false;
    }
    if (!('ordered' in config)) {
      config.ordered = true;
    }
    if (!('group' in config)) {
      config.group = false;
    }
    if (!('field' in config)) {
      config.field = null;
    }
    if (!('forwardGroups' in config)) {
      config.forwardGroups = false;
    }
    if (config.forwardGroups) {
      if (typeof config.forwardGroups === 'string') {
        config.forwardGroups = [config.forwardGroups];
      }
      if (typeof config.forwardGroups === 'boolean') {
        config.forwardGroups = inPorts;
      }
    }
    if (!('receiveStreams' in config)) {
      config.receiveStreams = false;
    }
    if (config.receiveStreams) {
      throw new Error('WirePattern receiveStreams is deprecated');
    }
    if (!('sendStreams' in config)) {
      config.sendStreams = false;
    }
    if (config.sendStreams) {
      throw new Error('WirePattern sendStreams is deprecated');
    }
    if (config.async) {
      config.sendStreams = outPorts;
    }
    if (!('params' in config)) {
      config.params = [];
    }
    if (typeof config.params === 'string') {
      config.params = [config.params];
    }
    if (!('name' in config)) {
      config.name = '';
    }
    if (!('dropInput' in config)) {
      config.dropInput = false;
    }
    if (!('arrayPolicy' in config)) {
      config.arrayPolicy = {
        "in": 'any',
        params: 'all'
      };
    }
    config.inPorts = inPorts;
    config.outPorts = outPorts;
    checkDeprecation(config, proc);
    if (config.legacy || (typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.NOFLO_WIREPATTERN_LEGACY : void 0 : void 0)) {
      platform.deprecated('noflo.helpers.WirePattern legacy mode is deprecated');
      setup = legacyWirePattern;
    } else {
      setup = processApiWirePattern;
    }
    return setup(component, config, proc);
  };

  processApiWirePattern = function(component, config, func) {
    setupControlPorts(component, config);
    setupSendDefaults(component);
    setupBracketForwarding(component, config);
    component.ordered = config.ordered;
    return component.process(function(input, output, context) {
      var data, errorHandler, groups, outProxy, postpone, resume;
      if (!checkWirePatternPreconditions(config, input, output)) {
        return;
      }
      component.params = populateParams(config, input);
      data = getInputData(config, input);
      groups = getGroupContext(component, config.inPorts[0], input);
      outProxy = getOutputProxy(config.outPorts, output);
      debug("WirePattern Process API call with", data, groups, component.params, context.scope);
      postpone = function() {
        throw new Error('noflo.helpers.WirePattern postpone is deprecated');
      };
      resume = function() {
        throw new Error('noflo.helpers.WirePattern resume is deprecated');
      };
      if (!config.async) {
        errorHandler = setupErrorHandler(component, config, output);
        func.call(component, data, groups, outProxy, postpone, resume, input.scope);
        if (output.result.__resolved) {
          return;
        }
        errorHandler();
        output.done();
        return;
      }
      errorHandler = setupErrorHandler(component, config, output);
      return func.call(component, data, groups, outProxy, function(err) {
        errorHandler();
        return output.done(err);
      }, postpone, resume, input.scope);
    });
  };

  checkDeprecation = function(config, func) {
    if (config.group) {
      platform.deprecated('noflo.helpers.WirePattern group option is deprecated. Please port to Process API');
    }
    if (config.field) {
      platform.deprecated('noflo.helpers.WirePattern field option is deprecated. Please port to Process API');
    }
    if (func.length > 4) {
      platform.deprecated('noflo.helpers.WirePattern postpone and resume are deprecated. Please port to Process API');
    }
    if (!config.async) {
      platform.deprecated('noflo.helpers.WirePattern synchronous is deprecated. Please port to Process API');
    }
    if (config.error !== 'error') {
      platform.deprecated('noflo.helpers.WirePattern custom error port name is deprecated. Please switch to "error" or port to WirePattern');
    }
  };

  setupControlPorts = function(component, config) {
    var j, len, param, ref, results;
    ref = config.params;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      param = ref[j];
      results.push(component.inPorts[param].options.control = true);
    }
    return results;
  };

  setupBracketForwarding = function(component, config) {
    var inPort, inPorts, j, k, len, len1, outPort, ref;
    component.forwardBrackets = {};
    if (!config.forwardGroups) {
      return;
    }
    inPorts = config.inPorts;
    if (isArray(config.forwardGroups)) {
      inPorts = config.forwardGroups;
    }
    for (j = 0, len = inPorts.length; j < len; j++) {
      inPort = inPorts[j];
      component.forwardBrackets[inPort] = [];
      ref = config.outPorts;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        outPort = ref[k];
        component.forwardBrackets[inPort].push(outPort);
      }
      if (component.outPorts.error) {
        component.forwardBrackets[inPort].push('error');
      }
    }
  };

  setupErrorHandler = function(component, config, output) {
    var errorHandler, errors, failHandler, sendErrors;
    errors = [];
    errorHandler = function(e, groups) {
      if (groups == null) {
        groups = [];
      }
      platform.deprecated('noflo.helpers.WirePattern error method is deprecated. Please send error to callback instead');
      errors.push({
        err: e,
        groups: groups
      });
      return component.hasErrors = true;
    };
    failHandler = function(e, groups) {
      if (e == null) {
        e = null;
      }
      if (groups == null) {
        groups = [];
      }
      platform.deprecated('noflo.helpers.WirePattern fail method is deprecated. Please send error to callback instead');
      if (e) {
        errorHandler(e, groups);
      }
      sendErrors();
      return output.done();
    };
    sendErrors = function() {
      if (!errors.length) {
        return;
      }
      if (config.name) {
        output.sendIP('error', new IP('openBracket', config.name));
      }
      errors.forEach(function(e) {
        var grp, j, k, len, len1, ref, ref1, results;
        ref = e.groups;
        for (j = 0, len = ref.length; j < len; j++) {
          grp = ref[j];
          output.sendIP('error', new IP('openBracket', grp));
        }
        output.sendIP('error', new IP('data', e.err));
        ref1 = e.groups;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          grp = ref1[k];
          results.push(output.sendIP('error', new IP('closeBracket', grp)));
        }
        return results;
      });
      if (config.name) {
        output.sendIP('error', new IP('closeBracket', config.name));
      }
      component.hasErrors = false;
      return errors = [];
    };
    component.hasErrors = false;
    component.error = errorHandler;
    component.fail = failHandler;
    return sendErrors;
  };

  setupSendDefaults = function(component) {
    var portsWithDefaults;
    portsWithDefaults = Object.keys(component.inPorts.ports).filter(function(p) {
      if (!component.inPorts[p].options.control) {
        return false;
      }
      if (!component.inPorts[p].hasDefault()) {
        return false;
      }
      return true;
    });
    return component.sendDefaults = function() {
      platform.deprecated('noflo.helpers.WirePattern sendDefaults method is deprecated. Please start with a Network');
      return portsWithDefaults.forEach(function(port) {
        var tempSocket;
        tempSocket = InternalSocket.createSocket();
        component.inPorts[port].attach(tempSocket);
        tempSocket.send();
        tempSocket.disconnect();
        return component.inPorts[port].detach(tempSocket);
      });
    };
  };

  populateParams = function(config, input) {
    var idx, j, k, len, len1, paramPort, params, ref, ref1;
    if (!config.params.length) {
      return {};
    }
    params = {};
    ref = config.params;
    for (j = 0, len = ref.length; j < len; j++) {
      paramPort = ref[j];
      if (input.ports[paramPort].isAddressable()) {
        params[paramPort] = {};
        ref1 = input.attached(paramPort);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          idx = ref1[k];
          if (!input.hasData([paramPort, idx])) {
            continue;
          }
          params[paramPort][idx] = input.getData([paramPort, idx]);
        }
        continue;
      }
      params[paramPort] = input.getData(paramPort);
    }
    return params;
  };

  reorderBuffer = function(buffer, matcher) {
    var brackets, idx, ip, j, k, len, len1, results, substream, substreamBrackets, substreamIdx;
    substream = null;
    brackets = [];
    substreamBrackets = [];
    for (idx = j = 0, len = buffer.length; j < len; idx = ++j) {
      ip = buffer[idx];
      if (ip.type === 'openBracket') {
        brackets.push(ip.data);
        substreamBrackets.push(ip);
        continue;
      }
      if (ip.type === 'closeBracket') {
        brackets.pop();
        if (substream) {
          substream.push(ip);
        }
        if (substreamBrackets.length) {
          substreamBrackets.pop();
        }
        if (substream && !substreamBrackets.length) {
          break;
        }
        continue;
      }
      if (!matcher(ip, brackets)) {
        substreamBrackets = [];
        continue;
      }
      substream = substreamBrackets.slice(0);
      substream.push(ip);
    }
    substreamIdx = buffer.indexOf(substream[0]);
    if (substreamIdx === 0) {
      return;
    }
    buffer.splice(substreamIdx, substream.length);
    substream.reverse();
    results = [];
    for (k = 0, len1 = substream.length; k < len1; k++) {
      ip = substream[k];
      results.push(buffer.unshift(ip));
    }
    return results;
  };

  handleInputCollation = function(data, config, input, port, idx) {
    var buf;
    if (!config.group && !config.field) {
      return;
    }
    if (config.group) {
      buf = input.ports[port].getBuffer(input.scope, idx);
      reorderBuffer(buf, function(ip, brackets) {
        var grp, j, len, ref;
        ref = input.collatedBy.brackets;
        for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
          grp = ref[idx];
          if (brackets[idx] !== grp) {
            return false;
          }
        }
        return true;
      });
    }
    if (config.field) {
      data[config.field] = input.collatedBy.field;
      buf = input.ports[port].getBuffer(input.scope, idx);
      return reorderBuffer(buf, function(ip) {
        return ip.data[config.field] === data[config.field];
      });
    }
  };

  getInputData = function(config, input) {
    var data, idx, j, k, len, len1, port, ref, ref1;
    data = {};
    ref = config.inPorts;
    for (j = 0, len = ref.length; j < len; j++) {
      port = ref[j];
      if (input.ports[port].isAddressable()) {
        data[port] = {};
        ref1 = input.attached(port);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          idx = ref1[k];
          if (!input.hasData([port, idx])) {
            continue;
          }
          handleInputCollation(data, config, input, port, idx);
          data[port][idx] = input.getData([port, idx]);
        }
        continue;
      }
      if (!input.hasData(port)) {
        continue;
      }
      handleInputCollation(data, config, input, port);
      data[port] = input.getData(port);
    }
    if (config.inPorts.length === 1) {
      return data[config.inPorts[0]];
    }
    return data;
  };

  getGroupContext = function(component, port, input) {
    var ref, ref1;
    if (((ref = input.result.__bracketContext) != null ? ref[port] : void 0) == null) {
      return [];
    }
    if ((ref1 = input.collatedBy) != null ? ref1.brackets : void 0) {
      return input.collatedBy.brackets;
    }
    return input.result.__bracketContext[port].filter(function(c) {
      return c.source === port;
    }).map(function(c) {
      return c.ip.data;
    });
  };

  getOutputProxy = function(ports, output) {
    var outProxy;
    outProxy = {};
    ports.forEach(function(port) {
      return outProxy[port] = {
        connect: function() {},
        beginGroup: function(group, idx) {
          var ip;
          ip = new IP('openBracket', group);
          ip.index = idx;
          return output.sendIP(port, ip);
        },
        send: function(data, idx) {
          var ip;
          ip = new IP('data', data);
          ip.index = idx;
          return output.sendIP(port, ip);
        },
        endGroup: function(group, idx) {
          var ip;
          ip = new IP('closeBracket', group);
          ip.index = idx;
          return output.sendIP(port, ip);
        },
        disconnect: function() {}
      };
    });
    if (ports.length === 1) {
      return outProxy[ports[0]];
    }
    return outProxy;
  };

  checkWirePatternPreconditions = function(config, input, output) {
    var attached, idx, inputsOk, j, k, len, len1, packetsDropped, paramsOk, port, ref;
    paramsOk = checkWirePatternPreconditionsParams(config, input);
    inputsOk = checkWirePatternPreconditionsInput(config, input);
    if (config.dropInput && !paramsOk) {
      packetsDropped = false;
      ref = config.inPorts;
      for (j = 0, len = ref.length; j < len; j++) {
        port = ref[j];
        if (input.ports[port].isAddressable()) {
          attached = input.attached(port);
          if (!attached.length) {
            continue;
          }
          for (k = 0, len1 = attached.length; k < len1; k++) {
            idx = attached[k];
            while (input.has([port, idx])) {
              packetsDropped = true;
              input.get([port, idx]).drop();
            }
          }
          continue;
        }
        while (input.has(port)) {
          packetsDropped = true;
          input.get(port).drop();
        }
      }
      if (packetsDropped) {
        output.done();
      }
    }
    return inputsOk && paramsOk;
  };

  checkWirePatternPreconditionsParams = function(config, input) {
    var attached, j, len, param, ref, withData;
    ref = config.params;
    for (j = 0, len = ref.length; j < len; j++) {
      param = ref[j];
      if (!input.ports[param].isRequired()) {
        continue;
      }
      if (input.ports[param].isAddressable()) {
        attached = input.attached(param);
        if (!attached.length) {
          return false;
        }
        withData = attached.filter(function(idx) {
          return input.hasData([param, idx]);
        });
        if (config.arrayPolicy.params === 'all') {
          if (withData.length !== attached.length) {
            return false;
          }
          continue;
        }
        if (!withData.length) {
          return false;
        }
        continue;
      }
      if (!input.hasData(param)) {
        return false;
      }
    }
    return true;
  };

  checkWirePatternPreconditionsInput = function(config, input) {
    var attached, bracketsAtPorts, checkBrackets, checkPacket, checkPort, j, len, port, ref, withData;
    if (config.group) {
      bracketsAtPorts = {};
      input.collatedBy = {
        brackets: [],
        ready: false
      };
      checkBrackets = function(left, right) {
        var bracket, idx, j, len;
        for (idx = j = 0, len = left.length; j < len; idx = ++j) {
          bracket = left[idx];
          if (right[idx] !== bracket) {
            return false;
          }
        }
        return true;
      };
      checkPacket = function(ip, brackets) {
        var bracketId, bracketsToCheck;
        bracketsToCheck = brackets.slice(0);
        if (config.group instanceof RegExp) {
          bracketsToCheck = bracketsToCheck.slice(0, 1);
          if (!bracketsToCheck.length) {
            return false;
          }
          if (!config.group.test(bracketsToCheck[0])) {
            return false;
          }
        }
        if (input.collatedBy.ready) {
          return checkBrackets(input.collatedBy.brackets, bracketsToCheck);
        }
        bracketId = bracketsToCheck.join(':');
        if (!bracketsAtPorts[bracketId]) {
          bracketsAtPorts[bracketId] = [];
        }
        if (bracketsAtPorts[bracketId].indexOf(port) === -1) {
          bracketsAtPorts[bracketId].push(port);
        }
        if (config.inPorts.indexOf(port) !== config.inPorts.length - 1) {
          return true;
        }
        if (bracketsAtPorts[bracketId].length !== config.inPorts.length) {
          return false;
        }
        if (input.collatedBy.ready) {
          return false;
        }
        input.collatedBy.ready = true;
        input.collatedBy.brackets = bracketsToCheck;
        return true;
      };
    }
    if (config.field) {
      input.collatedBy = {
        field: void 0,
        ready: false
      };
    }
    checkPort = function(port) {
      var buf, dataBrackets, hasData, hasMatching, ip, j, len, portBrackets;
      if (!config.group && !config.field) {
        return input.hasData(port);
      }
      if (config.group) {
        portBrackets = [];
        dataBrackets = [];
        hasMatching = false;
        buf = input.ports[port].getBuffer(input.scope);
        for (j = 0, len = buf.length; j < len; j++) {
          ip = buf[j];
          if (ip.type === 'openBracket') {
            portBrackets.push(ip.data);
            continue;
          }
          if (ip.type === 'closeBracket') {
            portBrackets.pop();
            if (portBrackets.length) {
              continue;
            }
            if (!hasData) {
              continue;
            }
            hasMatching = true;
            continue;
          }
          hasData = checkPacket(ip, portBrackets);
          continue;
        }
        return hasMatching;
      }
      if (config.field) {
        return input.hasStream(port, function(ip) {
          if (!input.collatedBy.ready) {
            input.collatedBy.field = ip.data[config.field];
            input.collatedBy.ready = true;
            return true;
          }
          return ip.data[config.field] === input.collatedBy.field;
        });
      }
    };
    ref = config.inPorts;
    for (j = 0, len = ref.length; j < len; j++) {
      port = ref[j];
      if (input.ports[port].isAddressable()) {
        attached = input.attached(port);
        if (!attached.length) {
          return false;
        }
        withData = attached.filter(function(idx) {
          return checkPort([port, idx]);
        });
        if (config.arrayPolicy['in'] === 'all') {
          if (withData.length !== attached.length) {
            return false;
          }
          continue;
        }
        if (!withData.length) {
          return false;
        }
        continue;
      }
      if (!checkPort(port)) {
        return false;
      }
    }
    return true;
  };

  OutPortWrapper = (function() {
    function OutPortWrapper(port1, scope1) {
      this.port = port1;
      this.scope = scope1;
    }

    OutPortWrapper.prototype.connect = function(socketId) {
      if (socketId == null) {
        socketId = null;
      }
      return this.port.openBracket(null, {
        scope: this.scope
      }, socketId);
    };

    OutPortWrapper.prototype.beginGroup = function(group, socketId) {
      if (socketId == null) {
        socketId = null;
      }
      return this.port.openBracket(group, {
        scope: this.scope
      }, socketId);
    };

    OutPortWrapper.prototype.send = function(data, socketId) {
      if (socketId == null) {
        socketId = null;
      }
      return this.port.sendIP('data', data, {
        scope: this.scope
      }, socketId, false);
    };

    OutPortWrapper.prototype.endGroup = function(group, socketId) {
      if (socketId == null) {
        socketId = null;
      }
      return this.port.closeBracket(group, {
        scope: this.scope
      }, socketId);
    };

    OutPortWrapper.prototype.disconnect = function(socketId) {
      if (socketId == null) {
        socketId = null;
      }
      return this.endGroup(socketId);
    };

    OutPortWrapper.prototype.isConnected = function() {
      return this.port.isConnected();
    };

    OutPortWrapper.prototype.isAttached = function() {
      return this.port.isAttached();
    };

    return OutPortWrapper;

  })();

  legacyWirePattern = function(component, config, proc) {
    var _wp, baseTearDown, closeGroupOnOuts, collectGroups, disconnectOuts, fn, fn1, gc, j, k, l, len, len1, len2, len3, len4, m, n, name, port, processQueue, ref, ref1, ref2, ref3, ref4, resumeTaskQ, sendGroupToOuts, setParamsScope;
    if (!('gcFrequency' in config)) {
      config.gcFrequency = 100;
    }
    if (!('gcTimeout' in config)) {
      config.gcTimeout = 300;
    }
    collectGroups = config.forwardGroups;
    if (collectGroups !== false && config.group) {
      collectGroups = true;
    }
    ref = config.inPorts;
    for (j = 0, len = ref.length; j < len; j++) {
      name = ref[j];
      if (!component.inPorts[name]) {
        throw new Error("no inPort named '" + name + "'");
      }
    }
    ref1 = config.outPorts;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      name = ref1[k];
      if (!component.outPorts[name]) {
        throw new Error("no outPort named '" + name + "'");
      }
    }
    disconnectOuts = function() {
      var l, len2, p, ref2, results;
      ref2 = config.outPorts;
      results = [];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        p = ref2[l];
        if (component.outPorts[p].isConnected()) {
          results.push(component.outPorts[p].disconnect());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    sendGroupToOuts = function(grp) {
      var l, len2, p, ref2, results;
      ref2 = config.outPorts;
      results = [];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        p = ref2[l];
        results.push(component.outPorts[p].beginGroup(grp));
      }
      return results;
    };
    closeGroupOnOuts = function(grp) {
      var l, len2, p, ref2, results;
      ref2 = config.outPorts;
      results = [];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        p = ref2[l];
        results.push(component.outPorts[p].endGroup(grp));
      }
      return results;
    };
    component.requiredParams = [];
    component.defaultedParams = [];
    component.gcCounter = 0;
    component._wpData = {};
    _wp = function(scope) {
      if (!(scope in component._wpData)) {
        component._wpData[scope] = {};
        component._wpData[scope].groupedData = {};
        component._wpData[scope].groupedGroups = {};
        component._wpData[scope].groupedDisconnects = {};
        component._wpData[scope].outputQ = [];
        component._wpData[scope].taskQ = [];
        component._wpData[scope].params = {};
        component._wpData[scope].completeParams = [];
        component._wpData[scope].receivedParams = [];
        component._wpData[scope].defaultsSent = false;
        component._wpData[scope].disconnectData = {};
        component._wpData[scope].disconnectQ = [];
        component._wpData[scope].groupBuffers = {};
        component._wpData[scope].keyBuffers = {};
        component._wpData[scope].gcTimestamps = {};
      }
      return component._wpData[scope];
    };
    component.params = {};
    setParamsScope = function(scope) {
      return component.params = _wp(scope).params;
    };
    processQueue = function(scope) {
      var flushed, key, stream, streams, tmp;
      while (_wp(scope).outputQ.length > 0) {
        streams = _wp(scope).outputQ[0];
        flushed = false;
        if (streams === null) {
          disconnectOuts();
          flushed = true;
        } else {
          if (config.outPorts.length === 1) {
            tmp = {};
            tmp[config.outPorts[0]] = streams;
            streams = tmp;
          }
          for (key in streams) {
            stream = streams[key];
            if (stream.resolved) {
              stream.flush();
              flushed = true;
            }
          }
        }
        if (flushed) {
          _wp(scope).outputQ.shift();
        }
        if (!flushed) {
          return;
        }
      }
    };
    if (config.async) {
      if ('load' in component.outPorts) {
        component.load = 0;
      }
      component.beforeProcess = function(scope, outs) {
        if (config.ordered) {
          _wp(scope).outputQ.push(outs);
        }
        component.load++;
        component.emit('activate', component.load);
        if ('load' in component.outPorts && component.outPorts.load.isAttached()) {
          component.outPorts.load.send(component.load);
          return component.outPorts.load.disconnect();
        }
      };
      component.afterProcess = function(scope, err, outs) {
        processQueue(scope);
        component.load--;
        if ('load' in component.outPorts && component.outPorts.load.isAttached()) {
          component.outPorts.load.send(component.load);
          component.outPorts.load.disconnect();
        }
        return component.emit('deactivate', component.load);
      };
    }
    component.sendDefaults = function(scope) {
      var l, len2, param, ref2, tempSocket;
      if (component.defaultedParams.length > 0) {
        ref2 = component.defaultedParams;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          param = ref2[l];
          if (_wp(scope).receivedParams.indexOf(param) === -1) {
            tempSocket = InternalSocket.createSocket();
            component.inPorts[param].attach(tempSocket);
            tempSocket.send();
            tempSocket.disconnect();
            component.inPorts[param].detach(tempSocket);
          }
        }
      }
      return _wp(scope).defaultsSent = true;
    };
    resumeTaskQ = function(scope) {
      var results, task, temp;
      if (_wp(scope).completeParams.length === component.requiredParams.length && _wp(scope).taskQ.length > 0) {
        temp = _wp(scope).taskQ.slice(0);
        _wp(scope).taskQ = [];
        results = [];
        while (temp.length > 0) {
          task = temp.shift();
          results.push(task());
        }
        return results;
      }
    };
    ref2 = config.params;
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      port = ref2[l];
      if (!component.inPorts[port]) {
        throw new Error("no inPort named '" + port + "'");
      }
      if (component.inPorts[port].isRequired()) {
        component.requiredParams.push(port);
      }
      if (component.inPorts[port].hasDefault()) {
        component.defaultedParams.push(port);
      }
    }
    ref3 = config.params;
    fn = function(port) {
      var inPort;
      inPort = component.inPorts[port];
      return inPort.handle = function(ip) {
        var event, index, payload, scope;
        event = ip.type;
        payload = ip.data;
        scope = ip.scope;
        index = ip.index;
        if (event !== 'data') {
          return;
        }
        if (inPort.isAddressable()) {
          if (!(port in _wp(scope).params)) {
            _wp(scope).params[port] = {};
          }
          _wp(scope).params[port][index] = payload;
          if (config.arrayPolicy.params === 'all' && Object.keys(_wp(scope).params[port]).length < inPort.listAttached().length) {
            return;
          }
        } else {
          _wp(scope).params[port] = payload;
        }
        if (_wp(scope).completeParams.indexOf(port) === -1 && component.requiredParams.indexOf(port) > -1) {
          _wp(scope).completeParams.push(port);
        }
        _wp(scope).receivedParams.push(port);
        return resumeTaskQ(scope);
      };
    };
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      port = ref3[m];
      fn(port);
    }
    component.dropRequest = function(scope, key) {
      if (key in _wp(scope).disconnectData) {
        delete _wp(scope).disconnectData[key];
      }
      if (key in _wp(scope).groupedData) {
        delete _wp(scope).groupedData[key];
      }
      if (key in _wp(scope).groupedGroups) {
        return delete _wp(scope).groupedGroups[key];
      }
    };
    gc = function() {
      var current, key, len4, n, ref4, results, scope, val;
      component.gcCounter++;
      if (component.gcCounter % config.gcFrequency === 0) {
        ref4 = Object.keys(component._wpData);
        results = [];
        for (n = 0, len4 = ref4.length; n < len4; n++) {
          scope = ref4[n];
          current = new Date().getTime();
          results.push((function() {
            var ref5, results1;
            ref5 = _wp(scope).gcTimestamps;
            results1 = [];
            for (key in ref5) {
              val = ref5[key];
              if ((current - val) > (config.gcTimeout * 1000)) {
                component.dropRequest(scope, key);
                results1.push(delete _wp(scope).gcTimestamps[key]);
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          })());
        }
        return results;
      }
    };
    ref4 = config.inPorts;
    fn1 = function(port) {
      var inPort, needPortGroups;
      inPort = component.inPorts[port];
      needPortGroups = collectGroups instanceof Array && collectGroups.indexOf(port) !== -1;
      return inPort.handle = function(ip) {
        var data, foundGroup, g, groupLength, groups, grp, i, index, key, len5, len6, len7, len8, o, obj, out, outs, payload, postpone, postponedToQ, q, r, ref5, ref6, ref7, ref8, reqId, requiredLength, resume, s, scope, t, task, tmp, u, whenDone, whenDoneGroups, wrp;
        index = ip.index;
        payload = ip.data;
        scope = ip.scope;
        if (!(port in _wp(scope).groupBuffers)) {
          _wp(scope).groupBuffers[port] = [];
        }
        if (!(port in _wp(scope).keyBuffers)) {
          _wp(scope).keyBuffers[port] = null;
        }
        switch (ip.type) {
          case 'openBracket':
            if (payload === null) {
              return;
            }
            _wp(scope).groupBuffers[port].push(payload);
            if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {
              return sendGroupToOuts(payload);
            }
            break;
          case 'closeBracket':
            _wp(scope).groupBuffers[port] = _wp(scope).groupBuffers[port].slice(0, _wp(scope).groupBuffers[port].length - 1);
            if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {
              closeGroupOnOuts(payload);
            }
            if (_wp(scope).groupBuffers[port].length === 0) {
              if (config.inPorts.length === 1) {
                if (config.async || config.StreamSender) {
                  if (config.ordered) {
                    _wp(scope).outputQ.push(null);
                    return processQueue(scope);
                  } else {
                    return _wp(scope).disconnectQ.push(true);
                  }
                } else {
                  return disconnectOuts();
                }
              } else {
                foundGroup = false;
                key = _wp(scope).keyBuffers[port];
                if (!(key in _wp(scope).disconnectData)) {
                  _wp(scope).disconnectData[key] = [];
                }
                for (i = o = 0, ref5 = _wp(scope).disconnectData[key].length; 0 <= ref5 ? o < ref5 : o > ref5; i = 0 <= ref5 ? ++o : --o) {
                  if (!(port in _wp(scope).disconnectData[key][i])) {
                    foundGroup = true;
                    _wp(scope).disconnectData[key][i][port] = true;
                    if (Object.keys(_wp(scope).disconnectData[key][i]).length === config.inPorts.length) {
                      _wp(scope).disconnectData[key].shift();
                      if (config.async || config.StreamSender) {
                        if (config.ordered) {
                          _wp(scope).outputQ.push(null);
                          processQueue(scope);
                        } else {
                          _wp(scope).disconnectQ.push(true);
                        }
                      } else {
                        disconnectOuts();
                      }
                      if (_wp(scope).disconnectData[key].length === 0) {
                        delete _wp(scope).disconnectData[key];
                      }
                    }
                    break;
                  }
                }
                if (!foundGroup) {
                  obj = {};
                  obj[port] = true;
                  return _wp(scope).disconnectData[key].push(obj);
                }
              }
            }
            break;
          case 'data':
            if (config.inPorts.length === 1 && !inPort.isAddressable()) {
              data = payload;
              groups = _wp(scope).groupBuffers[port];
            } else {
              key = '';
              if (config.group && _wp(scope).groupBuffers[port].length > 0) {
                key = _wp(scope).groupBuffers[port].toString();
                if (config.group instanceof RegExp) {
                  reqId = null;
                  ref6 = _wp(scope).groupBuffers[port];
                  for (q = 0, len5 = ref6.length; q < len5; q++) {
                    grp = ref6[q];
                    if (config.group.test(grp)) {
                      reqId = grp;
                      break;
                    }
                  }
                  key = reqId ? reqId : '';
                }
              } else if (config.field && typeof payload === 'object' && config.field in payload) {
                key = payload[config.field];
              }
              _wp(scope).keyBuffers[port] = key;
              if (!(key in _wp(scope).groupedData)) {
                _wp(scope).groupedData[key] = [];
              }
              if (!(key in _wp(scope).groupedGroups)) {
                _wp(scope).groupedGroups[key] = [];
              }
              foundGroup = false;
              requiredLength = config.inPorts.length;
              if (config.field) {
                ++requiredLength;
              }
              for (i = r = 0, ref7 = _wp(scope).groupedData[key].length; 0 <= ref7 ? r < ref7 : r > ref7; i = 0 <= ref7 ? ++r : --r) {
                if (!(port in _wp(scope).groupedData[key][i]) || (component.inPorts[port].isAddressable() && config.arrayPolicy["in"] === 'all' && !(index in _wp(scope).groupedData[key][i][port]))) {
                  foundGroup = true;
                  if (component.inPorts[port].isAddressable()) {
                    if (!(port in _wp(scope).groupedData[key][i])) {
                      _wp(scope).groupedData[key][i][port] = {};
                    }
                    _wp(scope).groupedData[key][i][port][index] = payload;
                  } else {
                    _wp(scope).groupedData[key][i][port] = payload;
                  }
                  if (needPortGroups) {
                    _wp(scope).groupedGroups[key][i] = utils.unique(slice.call(_wp(scope).groupedGroups[key][i]).concat(slice.call(_wp(scope).groupBuffers[port])));
                  } else if (collectGroups === true) {
                    _wp(scope).groupedGroups[key][i][port] = _wp(scope).groupBuffers[port];
                  }
                  if (component.inPorts[port].isAddressable() && config.arrayPolicy["in"] === 'all' && Object.keys(_wp(scope).groupedData[key][i][port]).length < component.inPorts[port].listAttached().length) {
                    return;
                  }
                  groupLength = Object.keys(_wp(scope).groupedData[key][i]).length;
                  if (groupLength === requiredLength) {
                    data = (_wp(scope).groupedData[key].splice(i, 1))[0];
                    if (config.inPorts.length === 1 && inPort.isAddressable()) {
                      data = data[port];
                    }
                    groups = (_wp(scope).groupedGroups[key].splice(i, 1))[0];
                    if (collectGroups === true) {
                      groups = utils.intersection.apply(null, utils.getValues(groups));
                    }
                    if (_wp(scope).groupedData[key].length === 0) {
                      delete _wp(scope).groupedData[key];
                    }
                    if (_wp(scope).groupedGroups[key].length === 0) {
                      delete _wp(scope).groupedGroups[key];
                    }
                    if (config.group && key) {
                      delete _wp(scope).gcTimestamps[key];
                    }
                    break;
                  } else {
                    return;
                  }
                }
              }
              if (!foundGroup) {
                obj = {};
                if (config.field) {
                  obj[config.field] = key;
                }
                if (component.inPorts[port].isAddressable()) {
                  obj[port] = {};
                  obj[port][index] = payload;
                } else {
                  obj[port] = payload;
                }
                if (config.inPorts.length === 1 && component.inPorts[port].isAddressable() && (config.arrayPolicy["in"] === 'any' || component.inPorts[port].listAttached().length === 1)) {
                  data = obj[port];
                  groups = _wp(scope).groupBuffers[port];
                } else {
                  _wp(scope).groupedData[key].push(obj);
                  if (needPortGroups) {
                    _wp(scope).groupedGroups[key].push(_wp(scope).groupBuffers[port]);
                  } else if (collectGroups === true) {
                    tmp = {};
                    tmp[port] = _wp(scope).groupBuffers[port];
                    _wp(scope).groupedGroups[key].push(tmp);
                  } else {
                    _wp(scope).groupedGroups[key].push([]);
                  }
                  if (config.group && key) {
                    _wp(scope).gcTimestamps[key] = new Date().getTime();
                  }
                  return;
                }
              }
            }
            if (config.dropInput && _wp(scope).completeParams.length !== component.requiredParams.length) {
              return;
            }
            outs = {};
            ref8 = config.outPorts;
            for (s = 0, len6 = ref8.length; s < len6; s++) {
              name = ref8[s];
              wrp = new OutPortWrapper(component.outPorts[name], scope);
              if (config.async || config.sendStreams && config.sendStreams.indexOf(name) !== -1) {
                wrp;
                outs[name] = new StreamSender(wrp, config.ordered);
              } else {
                outs[name] = wrp;
              }
            }
            if (config.outPorts.length === 1) {
              outs = outs[config.outPorts[0]];
            }
            if (!groups) {
              groups = [];
            }
            groups = (function() {
              var len7, results, t;
              results = [];
              for (t = 0, len7 = groups.length; t < len7; t++) {
                g = groups[t];
                if (g !== null) {
                  results.push(g);
                }
              }
              return results;
            })();
            whenDoneGroups = groups.slice(0);
            whenDone = function(err) {
              var disconnect, len7, out, outputs, t;
              if (err) {
                component.error(err, whenDoneGroups, 'error', scope);
              }
              if (typeof component.fail === 'function' && component.hasErrors) {
                component.fail(null, [], scope);
              }
              outputs = outs;
              if (config.outPorts.length === 1) {
                outputs = {};
                outputs[port] = outs;
              }
              disconnect = false;
              if (_wp(scope).disconnectQ.length > 0) {
                _wp(scope).disconnectQ.shift();
                disconnect = true;
              }
              for (name in outputs) {
                out = outputs[name];
                if (config.forwardGroups && config.async) {
                  for (t = 0, len7 = whenDoneGroups.length; t < len7; t++) {
                    i = whenDoneGroups[t];
                    out.endGroup();
                  }
                }
                if (disconnect) {
                  out.disconnect();
                }
                if (config.async || config.StreamSender) {
                  out.done();
                }
              }
              if (typeof component.afterProcess === 'function') {
                return component.afterProcess(scope, err || component.hasErrors, outs);
              }
            };
            if (typeof component.beforeProcess === 'function') {
              component.beforeProcess(scope, outs);
            }
            if (config.forwardGroups && config.async) {
              if (config.outPorts.length === 1) {
                for (t = 0, len7 = groups.length; t < len7; t++) {
                  g = groups[t];
                  outs.beginGroup(g);
                }
              } else {
                for (name in outs) {
                  out = outs[name];
                  for (u = 0, len8 = groups.length; u < len8; u++) {
                    g = groups[u];
                    out.beginGroup(g);
                  }
                }
              }
            }
            exports.MultiError(component, config.name, config.error, groups, scope);
            debug("WirePattern Legacy API call with", data, groups, component.params, scope);
            if (config.async) {
              postpone = function() {};
              resume = function() {};
              postponedToQ = false;
              task = function() {
                setParamsScope(scope);
                return proc.call(component, data, groups, outs, whenDone, postpone, resume, scope);
              };
              postpone = function(backToQueue) {
                if (backToQueue == null) {
                  backToQueue = true;
                }
                postponedToQ = backToQueue;
                if (backToQueue) {
                  return _wp(scope).taskQ.push(task);
                }
              };
              resume = function() {
                if (postponedToQ) {
                  return resumeTaskQ();
                } else {
                  return task();
                }
              };
            } else {
              task = function() {
                setParamsScope(scope);
                proc.call(component, data, groups, outs, null, null, null, scope);
                return whenDone();
              };
            }
            _wp(scope).taskQ.push(task);
            resumeTaskQ(scope);
            return gc();
        }
      };
    };
    for (n = 0, len4 = ref4.length; n < len4; n++) {
      port = ref4[n];
      fn1(port);
    }
    baseTearDown = component.tearDown;
    component.tearDown = function(callback) {
      component.requiredParams = [];
      component.defaultedParams = [];
      component.gcCounter = 0;
      component._wpData = {};
      component.params = {};
      return baseTearDown.call(component, callback);
    };
    return component;
  };

  exports.GroupedInput = exports.WirePattern;

  exports.CustomError = function(message, options) {
    var err;
    err = new Error(message);
    return exports.CustomizeError(err, options);
  };

  exports.CustomizeError = function(err, options) {
    var key, val;
    for (key in options) {
      if (!hasProp.call(options, key)) continue;
      val = options[key];
      err[key] = val;
    }
    return err;
  };

  exports.MultiError = function(component, group, errorPort, forwardedGroups, scope) {
    var baseTearDown;
    if (group == null) {
      group = '';
    }
    if (errorPort == null) {
      errorPort = 'error';
    }
    if (forwardedGroups == null) {
      forwardedGroups = [];
    }
    if (scope == null) {
      scope = null;
    }
    platform.deprecated('noflo.helpers.MultiError is deprecated. Send errors to error port instead');
    component.hasErrors = false;
    component.errors = [];
    if (component.name && !group) {
      group = component.name;
    }
    if (!group) {
      group = 'Component';
    }
    component.error = function(e, groups) {
      if (groups == null) {
        groups = [];
      }
      component.errors.push({
        err: e,
        groups: forwardedGroups.concat(groups)
      });
      return component.hasErrors = true;
    };
    component.fail = function(e, groups) {
      var error, grp, j, k, l, len, len1, len2, ref, ref1, ref2;
      if (e == null) {
        e = null;
      }
      if (groups == null) {
        groups = [];
      }
      if (e) {
        component.error(e, groups);
      }
      if (!component.hasErrors) {
        return;
      }
      if (!(errorPort in component.outPorts)) {
        return;
      }
      if (!component.outPorts[errorPort].isAttached()) {
        return;
      }
      if (group) {
        component.outPorts[errorPort].openBracket(group, {
          scope: scope
        });
      }
      ref = component.errors;
      for (j = 0, len = ref.length; j < len; j++) {
        error = ref[j];
        ref1 = error.groups;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          grp = ref1[k];
          component.outPorts[errorPort].openBracket(grp, {
            scope: scope
          });
        }
        component.outPorts[errorPort].data(error.err, {
          scope: scope
        });
        ref2 = error.groups;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          grp = ref2[l];
          component.outPorts[errorPort].closeBracket(grp, {
            scope: scope
          });
        }
      }
      if (group) {
        component.outPorts[errorPort].closeBracket(group, {
          scope: scope
        });
      }
      component.hasErrors = false;
      return component.errors = [];
    };
    baseTearDown = component.tearDown;
    component.tearDown = function(callback) {
      component.hasErrors = false;
      component.errors = [];
      return baseTearDown.call(component, callback);
    };
    return component;
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var ArrayPort, platform, port,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  port = __webpack_require__(20);

  platform = __webpack_require__(9);

  ArrayPort = (function(superClass) {
    extend(ArrayPort, superClass);

    function ArrayPort(type) {
      this.type = type;
      platform.deprecated('noflo.ArrayPort is deprecated. Please port to noflo.InPort/noflo.OutPort and use addressable: true');
      ArrayPort.__super__.constructor.call(this, this.type);
    }

    ArrayPort.prototype.attach = function(socket, socketId) {
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        socketId = this.sockets.length;
      }
      this.sockets[socketId] = socket;
      return this.attachSocket(socket, socketId);
    };

    ArrayPort.prototype.connect = function(socketId) {
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        if (!this.sockets.length) {
          throw new Error((this.getId()) + ": No connections available");
        }
        this.sockets.forEach(function(socket) {
          if (!socket) {
            return;
          }
          return socket.connect();
        });
        return;
      }
      if (!this.sockets[socketId]) {
        throw new Error((this.getId()) + ": No connection '" + socketId + "' available");
      }
      return this.sockets[socketId].connect();
    };

    ArrayPort.prototype.beginGroup = function(group, socketId) {
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        if (!this.sockets.length) {
          throw new Error((this.getId()) + ": No connections available");
        }
        this.sockets.forEach((function(_this) {
          return function(socket, index) {
            if (!socket) {
              return;
            }
            return _this.beginGroup(group, index);
          };
        })(this));
        return;
      }
      if (!this.sockets[socketId]) {
        throw new Error((this.getId()) + ": No connection '" + socketId + "' available");
      }
      if (this.isConnected(socketId)) {
        return this.sockets[socketId].beginGroup(group);
      }
      this.sockets[socketId].once("connect", (function(_this) {
        return function() {
          return _this.sockets[socketId].beginGroup(group);
        };
      })(this));
      return this.sockets[socketId].connect();
    };

    ArrayPort.prototype.send = function(data, socketId) {
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        if (!this.sockets.length) {
          throw new Error((this.getId()) + ": No connections available");
        }
        this.sockets.forEach((function(_this) {
          return function(socket, index) {
            if (!socket) {
              return;
            }
            return _this.send(data, index);
          };
        })(this));
        return;
      }
      if (!this.sockets[socketId]) {
        throw new Error((this.getId()) + ": No connection '" + socketId + "' available");
      }
      if (this.isConnected(socketId)) {
        return this.sockets[socketId].send(data);
      }
      this.sockets[socketId].once("connect", (function(_this) {
        return function() {
          return _this.sockets[socketId].send(data);
        };
      })(this));
      return this.sockets[socketId].connect();
    };

    ArrayPort.prototype.endGroup = function(socketId) {
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        if (!this.sockets.length) {
          throw new Error((this.getId()) + ": No connections available");
        }
        this.sockets.forEach((function(_this) {
          return function(socket, index) {
            if (!socket) {
              return;
            }
            return _this.endGroup(index);
          };
        })(this));
        return;
      }
      if (!this.sockets[socketId]) {
        throw new Error((this.getId()) + ": No connection '" + socketId + "' available");
      }
      return this.sockets[socketId].endGroup();
    };

    ArrayPort.prototype.disconnect = function(socketId) {
      var i, len, ref, socket;
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        if (!this.sockets.length) {
          throw new Error((this.getId()) + ": No connections available");
        }
        ref = this.sockets;
        for (i = 0, len = ref.length; i < len; i++) {
          socket = ref[i];
          if (!socket) {
            return;
          }
          socket.disconnect();
        }
        return;
      }
      if (!this.sockets[socketId]) {
        return;
      }
      return this.sockets[socketId].disconnect();
    };

    ArrayPort.prototype.isConnected = function(socketId) {
      var connected;
      if (socketId == null) {
        socketId = null;
      }
      if (socketId === null) {
        connected = false;
        this.sockets.forEach(function(socket) {
          if (!socket) {
            return;
          }
          if (socket.isConnected()) {
            return connected = true;
          }
        });
        return connected;
      }
      if (!this.sockets[socketId]) {
        return false;
      }
      return this.sockets[socketId].isConnected();
    };

    ArrayPort.prototype.isAddressable = function() {
      return true;
    };

    ArrayPort.prototype.isAttached = function(socketId) {
      var i, len, ref, socket;
      if (socketId === void 0) {
        ref = this.sockets;
        for (i = 0, len = ref.length; i < len; i++) {
          socket = ref[i];
          if (socket) {
            return true;
          }
        }
        return false;
      }
      if (this.sockets[socketId]) {
        return true;
      }
      return false;
    };

    return ArrayPort;

  })(port.Port);

  exports.ArrayPort = ArrayPort;

}).call(this);


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var ComponentLoader, Graph, IP, Network, getType, internalSocket, normalizeOptions, normalizeOutput, prepareInputMap, prepareNetwork, runNetwork, sendOutputMap;

  ComponentLoader = __webpack_require__(15).ComponentLoader;

  Network = __webpack_require__(23).Network;

  IP = __webpack_require__(7);

  internalSocket = __webpack_require__(12);

  Graph = __webpack_require__(13).Graph;

  normalizeOptions = function(options, component) {
    if (!options) {
      options = {};
    }
    if (!options.name) {
      options.name = component;
    }
    if (options.loader) {
      options.baseDir = options.loader.baseDir;
    }
    if (!options.baseDir && process && process.cwd) {
      options.baseDir = process.cwd();
    }
    if (!options.loader) {
      options.loader = new ComponentLoader(options.baseDir);
    }
    if (!options.raw) {
      options.raw = false;
    }
    return options;
  };

  prepareNetwork = function(component, options, callback) {
    return options.loader.load(component, function(err, instance) {
      var def, graph, inPorts, network, nodeName, outPorts, port;
      if (err) {
        return callback(err);
      }
      graph = new Graph(options.name);
      nodeName = options.name;
      graph.addNode(nodeName, component);
      inPorts = instance.inPorts.ports || instance.inPorts;
      outPorts = instance.outPorts.ports || instance.outPorts;
      for (port in inPorts) {
        def = inPorts[port];
        graph.addInport(port, nodeName, port);
      }
      for (port in outPorts) {
        def = outPorts[port];
        graph.addOutport(port, nodeName, port);
      }
      graph.componentLoader = options.loader;
      network = new Network(graph, options);
      return network.connect(function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null, network);
      });
    });
  };

  runNetwork = function(network, inputs, options, callback) {
    var inPorts, inSockets, outPorts, outSockets, process, received;
    process = network.getNode(options.name);
    inPorts = Object.keys(network.graph.inports);
    inSockets = {};
    inPorts.forEach(function(inport) {
      inSockets[inport] = internalSocket.createSocket();
      return process.component.inPorts[inport].attach(inSockets[inport]);
    });
    received = [];
    outPorts = Object.keys(network.graph.outports);
    outSockets = {};
    outPorts.forEach(function(outport) {
      outSockets[outport] = internalSocket.createSocket();
      process.component.outPorts[outport].attach(outSockets[outport]);
      return outSockets[outport].on('ip', function(ip) {
        var res;
        res = {};
        res[outport] = ip;
        return received.push(res);
      });
    });
    network.once('end', function() {
      var port, socket;
      for (port in outSockets) {
        socket = outSockets[port];
        process.component.outPorts[port].detach(socket);
      }
      outSockets = {};
      inSockets = {};
      return callback(null, received);
    });
    return network.start(function(err) {
      var i, inputMap, len, port, results, value;
      if (err) {
        return callback(err);
      }
      results = [];
      for (i = 0, len = inputs.length; i < len; i++) {
        inputMap = inputs[i];
        results.push((function() {
          var results1;
          results1 = [];
          for (port in inputMap) {
            value = inputMap[port];
            if (IP.isIP(value)) {
              inSockets[port].post(value);
              continue;
            }
            results1.push(inSockets[port].post(new IP('data', value)));
          }
          return results1;
        })());
      }
      return results;
    });
  };

  getType = function(inputs, network) {
    var key, maps, value;
    if (typeof inputs !== 'object') {
      return 'simple';
    }
    if (Array.isArray(inputs)) {
      maps = inputs.filter(function(entry) {
        return getType(entry, network) === 'map';
      });
      if (maps.length === inputs.length) {
        return 'sequence';
      }
      return 'simple';
    }
    if (!Object.keys(inputs).length) {
      return 'simple';
    }
    for (key in inputs) {
      value = inputs[key];
      if (!network.graph.inports[key]) {
        return 'simple';
      }
    }
    return 'map';
  };

  prepareInputMap = function(inputs, inputType, network) {
    var inPort, map;
    if (inputType === 'sequence') {
      return inputs;
    }
    if (inputType === 'map') {
      return [inputs];
    }
    inPort = Object.keys(network.graph.inports)[0];
    if (network.graph.inports["in"]) {
      inPort = 'in';
    }
    map = {};
    map[inPort] = inputs;
    return [map];
  };

  normalizeOutput = function(values, options) {
    var current, i, len, packet, previous, result;
    if (options.raw) {
      return values;
    }
    result = [];
    previous = null;
    current = result;
    for (i = 0, len = values.length; i < len; i++) {
      packet = values[i];
      if (packet.type === 'openBracket') {
        previous = current;
        current = [];
        previous.push(current);
      }
      if (packet.type === 'data') {
        current.push(packet.data);
      }
      if (packet.type === 'closeBracket') {
        current = previous;
      }
    }
    if (result.length === 1) {
      return result[0];
    }
    return result;
  };

  sendOutputMap = function(outputs, resultType, options, callback) {
    var errors, i, key, len, map, mappedOutputs, outputKeys, packets, port, result, val, withValue;
    errors = outputs.filter(function(map) {
      return map.error != null;
    }).map(function(map) {
      return map.error;
    });
    if (errors.length) {
      return callback(normalizeOutput(errors, options));
    }
    if (resultType === 'sequence') {
      return callback(null, outputs.map(function(map) {
        var key, res, val;
        res = {};
        for (key in map) {
          val = map[key];
          if (options.raw) {
            res[key] = val;
            continue;
          }
          res[key] = normalizeOutput([val], options);
        }
        return res;
      }));
    }
    mappedOutputs = {};
    for (i = 0, len = outputs.length; i < len; i++) {
      map = outputs[i];
      for (key in map) {
        val = map[key];
        if (!mappedOutputs[key]) {
          mappedOutputs[key] = [];
        }
        mappedOutputs[key].push(val);
      }
    }
    outputKeys = Object.keys(mappedOutputs);
    withValue = outputKeys.filter(function(outport) {
      return mappedOutputs[outport].length > 0;
    });
    if (withValue.length === 0) {
      return callback(null);
    }
    if (withValue.length === 1 && resultType === 'simple') {
      return callback(null, normalizeOutput(mappedOutputs[withValue[0]], options));
    }
    result = {};
    for (port in mappedOutputs) {
      packets = mappedOutputs[port];
      result[port] = normalizeOutput(packets, options);
    }
    return callback(null, result);
  };

  exports.asCallback = function(component, options) {
    options = normalizeOptions(options, component);
    return function(inputs, callback) {
      return prepareNetwork(component, options, function(err, network) {
        var inputMap, resultType;
        if (err) {
          return callback(err);
        }
        resultType = getType(inputs, network);
        inputMap = prepareInputMap(inputs, resultType, network);
        return runNetwork(network, inputMap, options, function(err, outputMap) {
          if (err) {
            return callback(err);
          }
          return sendOutputMap(outputMap, resultType, options, callback);
        });
      });
    };
  };

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  iframe: __webpack_require__(408),
  opener: __webpack_require__(421)
};


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

(function (context) {
  var PostMessage = __webpack_require__(44);

  var IframeRuntime = function (options) {
    PostMessage.call(this, options);
    this.setClient(context.parent);
  };
  IframeRuntime.prototype = new PostMessage;

  module.exports = function (options) {
    options = PostMessage.normalizeOptions(options);
    var runtime = new IframeRuntime(options);
    PostMessage.subscribe(context, function (msg, metadata) {
      if (msg.protocol === 'iframe' && msg.command === 'setcontent') {
        document.body.innerHTML = msg.payload;
        return;
      }
      runtime.receive(msg.protocol, msg.command, msg.payload, {
        href: metadata.origin
      });
    });
    return runtime;
  };
})(window);


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var EventEmitter, RuntimeProtocol, findPort, noflo, portToPayload, portsPayload, sendToInport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  noflo = __webpack_require__(0);

  EventEmitter = __webpack_require__(4).EventEmitter;

  sendToInport = function(port, event, payload) {
    var socket;
    socket = noflo.internalSocket.createSocket();
    port.attach(socket);
    switch (event) {
      case 'connect':
        socket.connect();
        break;
      case 'disconnect':
        socket.disconnect();
        break;
      case 'begingroup':
        socket.beginGroup(payload);
        break;
      case 'endgroup':
        socket.endGroup(payload);
        break;
      case 'data':
        socket.send(payload);
    }
    return port.detach(socket);
  };

  findPort = function(network, name, inPort) {
    var component, internal, ref;
    if (!network.graph) {
      return;
    }
    if (inPort) {
      internal = network.graph.inports[name];
    } else {
      internal = network.graph.outports[name];
    }
    if (!(internal != null ? internal.process : void 0)) {
      return;
    }
    component = (ref = network.getNode(internal.process)) != null ? ref.component : void 0;
    if (!component) {
      return;
    }
    if (inPort) {
      return component.inPorts[internal.port];
    }
    return component.outPorts[internal.port];
  };

  portToPayload = function(pub, internal, network, inPort) {
    var def, port, ref, ref1;
    def = {
      id: pub,
      type: 'all',
      description: (ref = internal.metadata) != null ? ref.description : void 0,
      addressable: false,
      required: false
    };
    port = findPort(network, pub, inPort);
    if (!port) {
      return def;
    }
    def.type = port.getDataType();
    if (port.getSchema) {
      def.schema = port.getSchema();
    }
    def.description = ((ref1 = internal.metadata) != null ? ref1.description : void 0) || port.getDescription();
    def.addressable = port.isAddressable();
    def.required = port.isRequired();
    return def;
  };

  portsPayload = function(name, network) {
    var internal, payload, pub, ref, ref1;
    payload = {
      graph: name,
      inPorts: [],
      outPorts: []
    };
    if (!(network != null ? network.graph : void 0)) {
      return payload;
    }
    ref = network.graph.inports;
    for (pub in ref) {
      internal = ref[pub];
      payload.inPorts.push(portToPayload(pub, internal, network, true));
    }
    ref1 = network.graph.outports;
    for (pub in ref1) {
      internal = ref1[pub];
      payload.outPorts.push(portToPayload(pub, internal, network, false));
    }
    return payload;
  };

  RuntimeProtocol = (function(superClass) {
    extend(RuntimeProtocol, superClass);

    function RuntimeProtocol(transport) {
      this.transport = transport;
      this.outputSockets = {};
      this.mainGraph = null;
      this.transport.network.on('addnetwork', (function(_this) {
        return function(network, name) {
          _this.subscribeExportedPorts(name, network, true);
          _this.subscribeOutPorts(name, network);
          _this.sendPorts(name, network);
          if (network.isStarted()) {
            _this.subscribeOutdata(name, network, true);
          }
          return network.on('start', function() {
            return _this.subscribeOutdata(name, network, true);
          });
        };
      })(this));
      this.transport.network.on('removenetwork', (function(_this) {
        return function(network, name) {
          _this.subscribeOutdata(name, network, false);
          _this.subscribeOutPorts(name, network);
          _this.subscribeExportedPorts(name, network.graph, false);
          return _this.sendPorts(name, null);
        };
      })(this));
    }

    RuntimeProtocol.prototype.send = function(topic, payload, context) {
      return this.transport.send('runtime', topic, payload, context);
    };

    RuntimeProtocol.prototype.sendAll = function(topic, payload) {
      return this.transport.sendAll('runtime', topic, payload);
    };

    RuntimeProtocol.prototype.sendError = function(message, context) {
      return this.send('error', new Error(message), context);
    };

    RuntimeProtocol.prototype.receive = function(topic, payload, context) {
      if (topic === 'packet' && !this.transport.canDo('protocol:runtime', payload.secret)) {
        this.send('error', new Error(topic + " not permitted"), context);
        return;
      }
      switch (topic) {
        case 'getruntime':
          return this.getRuntime(payload, context);
        case 'packet':
          return this.sendPacket(payload, (function(_this) {
            return function(err) {
              if (err) {
                _this.sendError(err.message, context);
              }
            };
          })(this));
      }
    };

    RuntimeProtocol.prototype.getRuntime = function(payload, context) {
      var capabilities, name, network, permittedCapabilities, ref, results, type;
      type = this.transport.options.type;
      if (!type) {
        if (noflo.isBrowser()) {
          type = 'noflo-browser';
        } else {
          type = 'noflo-nodejs';
        }
      }
      capabilities = this.transport.options.capabilities;
      if (!capabilities) {
        capabilities = ['protocol:graph', 'protocol:component', 'protocol:network', 'protocol:runtime', 'component:setsource', 'component:getsource'];
      }
      permittedCapabilities = capabilities.filter((function(_this) {
        return function(capability) {
          return _this.transport.canDo(capability, payload.secret);
        };
      })(this));
      payload = {
        type: type,
        version: this.transport.version,
        capabilities: permittedCapabilities,
        allCapabilities: capabilities
      };
      if (this.mainGraph) {
        payload.graph = this.mainGraph;
      }
      if (this.transport.options.id) {
        payload.id = this.transport.options.id;
      }
      if (this.transport.options.label) {
        payload.label = this.transport.options.label;
      }
      if (this.transport.options.namespace) {
        payload.namespace = this.transport.options.namespace;
      }
      if (this.transport.options.repository) {
        payload.repository = this.transport.options.repository;
      }
      if (this.transport.options.repositoryVersion) {
        payload.repositoryVersion = this.transport.options.repositoryVersion;
      }
      this.send('runtime', payload, context);
      ref = this.transport.network.networks;
      results = [];
      for (name in ref) {
        network = ref[name];
        results.push(this.sendPorts(name, network, context));
      }
      return results;
    };

    RuntimeProtocol.prototype.sendPorts = function(name, network, context) {
      var payload;
      payload = portsPayload(name, network);
      this.emit('ports', payload);
      if (!context) {
        return this.sendAll('ports', payload);
      } else {
        return this.send('ports', payload, context);
      }
    };

    RuntimeProtocol.prototype.setMainGraph = function(id) {
      return this.mainGraph = id;
    };

    RuntimeProtocol.prototype.subscribeExportedPorts = function(name, network, add) {
      var d, dependencies, i, j, len, len1, results, sendExportedPorts;
      sendExportedPorts = (function(_this) {
        return function() {
          return _this.sendPorts(name, network);
        };
      })(this);
      dependencies = ['addInport', 'addOutport', 'removeInport', 'removeOutport'];
      for (i = 0, len = dependencies.length; i < len; i++) {
        d = dependencies[i];
        network.graph.removeListener(d, sendExportedPorts);
      }
      if (add) {
        results = [];
        for (j = 0, len1 = dependencies.length; j < len1; j++) {
          d = dependencies[j];
          results.push(network.graph.on(d, sendExportedPorts));
        }
        return results;
      }
    };

    RuntimeProtocol.prototype.subscribeOutPorts = function(name, network, add) {
      var graph, portAdded, portRemoved;
      portRemoved = (function(_this) {
        return function() {
          return _this.subscribeOutdata(name, network, false);
        };
      })(this);
      portAdded = (function(_this) {
        return function() {
          return _this.subscribeOutdata(name, network, true);
        };
      })(this);
      graph = network.graph;
      graph.removeListener('addOutport', portAdded);
      graph.removeListener('removeOutport', portRemoved);
      if (add) {
        graph.on('addOutport', portAdded);
        return graph.on('removeOutport', portRemoved);
      }
    };

    RuntimeProtocol.prototype.subscribeOutdata = function(graphName, network, add) {
      var event, events, graphSockets, i, len, pub, socket;
      events = ['data', 'begingroup', 'endgroup', 'connect', 'disconnect'];
      if (!this.outputSockets[graphName]) {
        this.outputSockets[graphName] = {};
      }
      graphSockets = this.outputSockets[graphName];
      for (pub in graphSockets) {
        socket = graphSockets[pub];
        for (i = 0, len = events.length; i < len; i++) {
          event = events[i];
          socket.removeAllListeners(event);
        }
      }
      graphSockets = {};
      if (!add) {
        return;
      }
      return Object.keys(network.graph.outports).forEach((function(_this) {
        return function(pub) {
          var component, internal, j, len1, results, sendFunc;
          internal = network.graph.outports[pub];
          socket = noflo.internalSocket.createSocket();
          graphSockets[pub] = socket;
          component = network.processes[internal.process].component;
          component.outPorts[internal.port].attach(socket);
          sendFunc = function(event) {
            return function(payload) {
              _this.emit('packet', {
                port: pub,
                event: event,
                graph: graphName,
                payload: payload
              });
              return _this.sendAll('packet', {
                port: pub,
                event: event,
                graph: graphName,
                payload: payload
              });
            };
          };
          results = [];
          for (j = 0, len1 = events.length; j < len1; j++) {
            event = events[j];
            results.push(socket.on(event, sendFunc(event)));
          }
          return results;
        };
      })(this));
    };

    RuntimeProtocol.prototype.sendPacket = function(payload, callback) {
      var network, port;
      network = this.transport.network.networks[payload.graph];
      if (!network) {
        return callback(new Error("Cannot find network for graph " + payload.graph));
      }
      port = findPort(network.network, payload.port, true);
      if (!port) {
        return callback(new Error("Cannot find internal port for " + payload.port));
      }
      return sendToInport(port, payload.event, payload.payload);
    };

    return RuntimeProtocol;

  })(EventEmitter);

  module.exports = RuntimeProtocol;

}).call(this);


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var GraphProtocol, noflo;

  noflo = __webpack_require__(0);

  GraphProtocol = (function() {
    function GraphProtocol(transport) {
      this.transport = transport;
      this.graphs = {};
    }

    GraphProtocol.prototype.send = function(topic, payload, context) {
      return this.transport.send('graph', topic, payload, context);
    };

    GraphProtocol.prototype.sendAll = function(topic, payload) {
      return this.transport.sendAll('graph', topic, payload);
    };

    GraphProtocol.prototype.receive = function(topic, payload, context) {
      var graph;
      if (!this.transport.canDo('protocol:graph', payload.secret)) {
        this.send('error', new Error(topic + " not permitted"), context);
        return;
      }
      if (topic !== 'clear') {
        graph = this.resolveGraph(payload, context);
        if (!graph) {
          this.send('error', new Error("Graph '" + payload.graph + "' not found"), context);
          return;
        }
      }
      switch (topic) {
        case 'clear':
          return this.initGraph(payload, context);
        case 'addnode':
          return this.addNode(graph, payload, context);
        case 'removenode':
          return this.removeNode(graph, payload, context);
        case 'renamenode':
          return this.renameNode(graph, payload, context);
        case 'changenode':
          return this.changeNode(graph, payload, context);
        case 'addedge':
          return this.addEdge(graph, payload, context);
        case 'removeedge':
          return this.removeEdge(graph, payload, context);
        case 'changeedge':
          return this.changeEdge(graph, payload, context);
        case 'addinitial':
          return this.addInitial(graph, payload, context);
        case 'removeinitial':
          return this.removeInitial(graph, payload, context);
        case 'addinport':
          return this.addInport(graph, payload, context);
        case 'removeinport':
          return this.removeInport(graph, payload, context);
        case 'renameinport':
          return this.renameInport(graph, payload, context);
        case 'addoutport':
          return this.addOutport(graph, payload, context);
        case 'removeoutport':
          return this.removeOutport(graph, payload, context);
        case 'renameoutport':
          return this.renameOutport(graph, payload, context);
        case 'addgroup':
          return this.addGroup(graph, payload, context);
        case 'removegroup':
          return this.removeGroup(graph, payload, context);
        case 'renamegroup':
          return this.renameGroup(graph, payload, context);
        case 'changegroup':
          return this.changeGroup(graph, payload, context);
      }
    };

    GraphProtocol.prototype.resolveGraph = function(payload, context) {
      if (!payload.graph) {
        this.send('error', new Error('No graph specified'), context);
        return;
      }
      if (!this.graphs[payload.graph]) {
        this.send('error', new Error('Requested graph not found'), context);
        return;
      }
      return this.graphs[payload.graph];
    };

    GraphProtocol.prototype.getLoader = function(baseDir) {
      return this.transport.component.getLoader(baseDir, this.transport.options);
    };

    GraphProtocol.prototype.sendGraph = function(id, graph, context) {
      var payload;
      payload = {
        graph: id,
        description: graph.toJSON()
      };
      return this.send('graph', payload, context);
    };

    GraphProtocol.prototype.initGraph = function(payload, context) {
      var fullName, graph;
      if (!payload.id) {
        this.send('error', new Error('No graph ID provided'), context);
        return;
      }
      if (!payload.name) {
        payload.name = 'NoFlo runtime';
      }
      graph = new noflo.Graph(payload.name);
      fullName = payload.id;
      if (payload.library) {
        payload.library = payload.library.replace('noflo-', '');
        graph.properties.library = payload.library;
        fullName = payload.library + "/" + fullName;
      }
      if (payload.icon) {
        graph.properties.icon = payload.icon;
      }
      if (payload.description) {
        graph.properties.description = payload.description;
      }
      graph.baseDir = this.transport.options.baseDir;
      this.subscribeGraph(payload.id, graph, context);
      if (payload.main) {
        this.transport.runtime.setMainGraph(fullName, graph, context);
      } else {
        this.transport.component.registerGraph(fullName, graph, context);
      }
      this.graphs[payload.id] = graph;
      return this.sendAll('clear', {
        id: payload.id,
        name: payload.name,
        library: payload.library,
        main: payload.main,
        icon: payload.icon,
        description: payload.description
      }, context);
    };

    GraphProtocol.prototype.registerGraph = function(id, graph) {
      if (id === 'default/main') {
        this.transport.runtime.setMainGraph(id, graph);
      }
      this.subscribeGraph(id, graph, '');
      return this.graphs[id] = graph;
    };

    GraphProtocol.prototype.subscribeGraph = function(id, graph, context) {
      graph.on('addNode', (function(_this) {
        return function(node) {
          node.graph = id;
          return _this.sendAll('addnode', node, context);
        };
      })(this));
      graph.on('removeNode', (function(_this) {
        return function(node) {
          var nodeData;
          nodeData = {
            id: node.id,
            graph: id
          };
          return _this.sendAll('removenode', nodeData, context);
        };
      })(this));
      graph.on('renameNode', (function(_this) {
        return function(oldId, newId) {
          return _this.sendAll('renamenode', {
            from: oldId,
            to: newId,
            graph: id
          }, context);
        };
      })(this));
      graph.on('changeNode', (function(_this) {
        return function(node, before) {
          return _this.sendAll('changenode', {
            id: node.id,
            metadata: node.metadata,
            graph: id
          }, context);
        };
      })(this));
      graph.on('addEdge', (function(_this) {
        return function(edge) {
          var edgeData;
          if (typeof edge.from.index !== 'number') {
            delete edge.from.index;
          }
          if (typeof edge.to.index !== 'number') {
            delete edge.to.index;
          }
          edgeData = {
            src: edge.from,
            tgt: edge.to,
            metadata: edge.metadata,
            graph: id
          };
          return _this.sendAll('addedge', edgeData, context);
        };
      })(this));
      graph.on('removeEdge', (function(_this) {
        return function(edge) {
          var edgeData;
          edgeData = {
            src: edge.from,
            tgt: edge.to,
            graph: id
          };
          return _this.sendAll('removeedge', edgeData, context);
        };
      })(this));
      graph.on('changeEdge', (function(_this) {
        return function(edge) {
          var edgeData;
          edgeData = {
            src: edge.from,
            tgt: edge.to,
            metadata: edge.metadata,
            graph: id
          };
          return _this.sendAll('changeedge', edgeData, context);
        };
      })(this));
      graph.on('addInitial', (function(_this) {
        return function(iip) {
          var iipData;
          iipData = {
            src: iip.from,
            tgt: iip.to,
            metadata: iip.metadata,
            graph: id
          };
          return _this.sendAll('addinitial', iipData, context);
        };
      })(this));
      graph.on('removeInitial', (function(_this) {
        return function(iip) {
          var iipData;
          iipData = {
            src: iip.from,
            tgt: iip.to,
            graph: id
          };
          return _this.sendAll('removeinitial', iipData, context);
        };
      })(this));
      graph.on('addGroup', (function(_this) {
        return function(group) {
          var groupData;
          groupData = {
            name: group.name,
            nodes: group.nodes,
            metadata: group.metadata,
            graph: id
          };
          return _this.sendAll('addgroup', groupData, context);
        };
      })(this));
      graph.on('removeGroup', (function(_this) {
        return function(group) {
          var groupData;
          groupData = {
            name: group.name,
            graph: id
          };
          return _this.sendAll('removegroup', groupData, context);
        };
      })(this));
      graph.on('renameGroup', (function(_this) {
        return function(oldName, newName) {
          var groupData;
          groupData = {
            from: oldName,
            to: newName,
            graph: id
          };
          return _this.sendAll('renamegroup', groupData, context);
        };
      })(this));
      graph.on('changeGroup', (function(_this) {
        return function(group) {
          var groupData;
          groupData = {
            name: group.name,
            metadata: group.metadata,
            graph: id
          };
          return _this.sendAll('changegroup', groupData, context);
        };
      })(this));
      graph.on('addInport', (function(_this) {
        return function(publicName, port) {
          var data;
          data = {
            "public": publicName,
            node: port.process,
            port: port.port,
            metadata: port.metadata,
            graph: id
          };
          return _this.sendAll('addinport', data, context);
        };
      })(this));
      graph.on('addOutport', (function(_this) {
        return function(publicName, port) {
          var data;
          data = {
            "public": publicName,
            node: port.process,
            port: port.port,
            metadata: port.metadata,
            graph: id
          };
          return _this.sendAll('addoutport', data, context);
        };
      })(this));
      graph.on('removeInport', (function(_this) {
        return function(publicName, port) {
          var data;
          data = {
            "public": publicName,
            graph: id
          };
          return _this.sendAll('removeinport', data, context);
        };
      })(this));
      return graph.on('removeOutport', (function(_this) {
        return function(publicName, port) {
          var data;
          data = {
            "public": publicName,
            graph: id
          };
          return _this.sendAll('removeoutport', data, context);
        };
      })(this));
    };

    GraphProtocol.prototype.addNode = function(graph, node, context) {
      if (!(node.id || node.component)) {
        this.send('error', new Error('No ID or component supplied'), context);
        return;
      }
      return graph.addNode(node.id, node.component, node.metadata);
    };

    GraphProtocol.prototype.removeNode = function(graph, payload, context) {
      if (!payload.id) {
        this.send('error', new Error('No ID supplied'), context);
        return;
      }
      return graph.removeNode(payload.id);
    };

    GraphProtocol.prototype.renameNode = function(graph, payload, context) {
      if (!(payload.from || payload.to)) {
        this.send('error', new Error('No from or to supplied'), context);
        return;
      }
      return graph.renameNode(payload.from, payload.to);
    };

    GraphProtocol.prototype.changeNode = function(graph, payload, context) {
      if (!(payload.id || payload.metadata)) {
        this.send('error', new Error('No id or metadata supplied'), context);
        return;
      }
      return graph.setNodeMetadata(payload.id, payload.metadata);
    };

    GraphProtocol.prototype.addEdge = function(graph, edge, context) {
      if (!(edge.src || edge.tgt)) {
        this.send('error', new Error('No src or tgt supplied'), context);
        return;
      }
      if (typeof edge.src.index === 'number' || typeof edge.tgt.index === 'number') {
        if (graph.addEdgeIndex) {
          graph.addEdgeIndex(edge.src.node, edge.src.port, edge.src.index, edge.tgt.node, edge.tgt.port, edge.tgt.index, edge.metadata);
          return;
        }
      }
      return graph.addEdge(edge.src.node, edge.src.port, edge.tgt.node, edge.tgt.port, edge.metadata);
    };

    GraphProtocol.prototype.removeEdge = function(graph, edge, context) {
      if (!(edge.src || edge.tgt)) {
        this.send('error', new Error('No src or tgt supplied'), context);
        return;
      }
      return graph.removeEdge(edge.src.node, edge.src.port, edge.tgt.node, edge.tgt.port);
    };

    GraphProtocol.prototype.changeEdge = function(graph, edge, context) {
      if (!(edge.src || edge.tgt)) {
        this.send('error', new Error('No src or tgt supplied'), context);
        return;
      }
      return graph.setEdgeMetadata(edge.src.node, edge.src.port, edge.tgt.node, edge.tgt.port, edge.metadata);
    };

    GraphProtocol.prototype.addInitial = function(graph, payload, context) {
      if (!(payload.src || payload.tgt)) {
        this.send('error', new Error('No src or tgt supplied'), context);
        return;
      }
      if (graph.addInitialIndex && typeof payload.tgt.index === 'number') {
        graph.addInitialIndex(payload.src.data, payload.tgt.node, payload.tgt.port, payload.tgt.index, payload.metadata);
        return;
      }
      return graph.addInitial(payload.src.data, payload.tgt.node, payload.tgt.port, payload.metadata);
    };

    GraphProtocol.prototype.removeInitial = function(graph, payload, context) {
      if (!payload.tgt) {
        this.send('error', new Error('No tgt supplied'), context);
        return;
      }
      return graph.removeInitial(payload.tgt.node, payload.tgt.port);
    };

    GraphProtocol.prototype.addInport = function(graph, payload, context) {
      if (!(payload["public"] || payload.node || payload.port)) {
        this.send('error', new Error('Missing exported inport information'), context);
        return;
      }
      return graph.addInport(payload["public"], payload.node, payload.port, payload.metadata);
    };

    GraphProtocol.prototype.removeInport = function(graph, payload, context) {
      if (!payload["public"]) {
        this.send('error', new Error('Missing exported inport name'), context);
        return;
      }
      return graph.removeInport(payload["public"]);
    };

    GraphProtocol.prototype.renameInport = function(graph, payload, context) {
      if (!(payload.from || payload.to)) {
        this.send('error', new Error('No from or to supplied'), context);
        return;
      }
      return graph.renameInport(payload.from, payload.to);
    };

    GraphProtocol.prototype.addOutport = function(graph, payload, context) {
      if (!(payload["public"] || payload.node || payload.port)) {
        this.send('error', new Error('Missing exported outport information'), context);
        return;
      }
      return graph.addOutport(payload["public"], payload.node, payload.port, payload.metadata);
    };

    GraphProtocol.prototype.removeOutport = function(graph, payload, context) {
      if (!payload["public"]) {
        this.send('error', new Error('Missing exported outport name'), context);
        return;
      }
      return graph.removeOutport(payload["public"]);
    };

    GraphProtocol.prototype.renameOutport = function(graph, payload, context) {
      if (!(payload.from || payload.to)) {
        this.send('error', new Error('No from or to supplied'), context);
        return;
      }
      return graph.renameOutport(payload.from, payload.to);
    };

    GraphProtocol.prototype.addGroup = function(graph, payload, context) {
      if (!(payload.name || payload.nodes || payload.metadata)) {
        this.send('error', new Error('No name or nodes or metadata supplied'), context);
        return;
      }
      return graph.addGroup(payload.name, payload.nodes, payload.metadata);
    };

    GraphProtocol.prototype.removeGroup = function(graph, payload, context) {
      if (!payload.name) {
        this.send('error', new Error('No name supplied'), context);
        return;
      }
      return graph.removeGroup(payload.name);
    };

    GraphProtocol.prototype.renameGroup = function(graph, payload, context) {
      if (!(payload.from || payload.to)) {
        this.send('error', new Error('No from or to supplied'), context);
        return;
      }
      return graph.renameGroup(payload.from, payload.to);
    };

    GraphProtocol.prototype.changeGroup = function(graph, payload, context) {
      if (!(payload.name || payload.metadata)) {
        this.send('error', new Error('No name or metadata supplied'), context);
        return;
      }
      return graph.setEdgeMetadata(payload.name, payload.metadata);
    };

    return GraphProtocol;

  })();

  module.exports = GraphProtocol;

}).call(this);


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {(function() {
  var EventEmitter, NetworkProtocol, getConnectionSignature, getEdgeSignature, getPortSignature, getSocketSignature, noflo, prepareSocketEvent,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  noflo = __webpack_require__(0);

  EventEmitter = __webpack_require__(4).EventEmitter;

  prepareSocketEvent = function(event, req) {
    var payload, ref, ref1, ref2;
    payload = {
      id: event.id,
      graph: req.graph
    };
    if (event.socket.from) {
      payload.src = {
        node: event.socket.from.process.id,
        port: event.socket.from.port
      };
    }
    if (event.socket.to) {
      payload.tgt = {
        node: event.socket.to.process.id,
        port: event.socket.to.port
      };
    }
    if (event.subgraph) {
      payload.subgraph = event.subgraph;
    }
    if (event.group) {
      payload.group = event.group;
    }
    if (event.datatype) {
      payload.type = event.datatype;
    }
    if (event.schema) {
      payload.schema = event.schema;
    }
    if (typeof event.data !== 'undefined') {
      if (!noflo.isBrowser()) {
        if (Buffer.isBuffer(event.data)) {
          event.data = event.data.slice(0, 20);
        }
      }
      if ((ref = event.data) != null ? ref.toJSON : void 0) {
        payload.data = event.data.toJSON();
      }
      if ((ref1 = event.data) != null ? ref1.toString : void 0) {
        payload.data = event.data.toString();
        if (payload.data === '[object Object]') {
          try {
            payload.data = JSON.parse(JSON.stringify(event.data));
          } catch (undefined) {}
        }
      } else {
        payload.data = event.data;
      }
      if ((ref2 = event.metadata) != null ? ref2.secure : void 0) {
        payload.data = 'DATA';
      }
    }
    return payload;
  };

  getPortSignature = function(item) {
    if (!item) {
      return '';
    }
    return item.process + '(' + item.port + ')';
  };

  getEdgeSignature = function(edge) {
    return getPortSignature(edge.src) + ' -> ' + getPortSignature(edge.tgt);
  };

  getConnectionSignature = function(connection) {
    if (!connection) {
      return '';
    }
    return connection.process.id + '(' + connection.port + ')';
  };

  getSocketSignature = function(socket) {
    return getConnectionSignature(socket.from) + ' -> ' + getConnectionSignature(socket.to);
  };

  NetworkProtocol = (function(superClass) {
    extend(NetworkProtocol, superClass);

    function NetworkProtocol(transport) {
      this.transport = transport;
      this.networks = {};
    }

    NetworkProtocol.prototype.send = function(topic, payload, context) {
      return this.transport.send('network', topic, payload, context);
    };

    NetworkProtocol.prototype.sendAll = function(topic, payload) {
      return this.transport.sendAll('network', topic, payload);
    };

    NetworkProtocol.prototype.receive = function(topic, payload, context) {
      var graph;
      if (!this.transport.canDo('protocol:network', payload.secret)) {
        this.send('error', new Error(topic + " not permitted"), context);
        return;
      }
      if (topic !== 'list') {
        graph = this.resolveGraph(payload, context);
        if (!graph) {
          return;
        }
      }
      switch (topic) {
        case 'start':
          return this.startNetwork(graph, payload, context);
        case 'stop':
          return this.stopNetwork(graph, payload, context);
        case 'edges':
          return this.updateEdgesFilter(graph, payload, context);
        case 'debug':
          return this.debugNetwork(graph, payload, context);
        case 'getstatus':
          return this.getStatus(graph, payload, context);
      }
    };

    NetworkProtocol.prototype.resolveGraph = function(payload, context) {
      if (!payload.graph) {
        this.send('error', new Error('No graph specified'), context);
        return;
      }
      if (!this.transport.graph.graphs[payload.graph]) {
        this.send('error', new Error('Requested graph not found'), context);
        return;
      }
      return this.transport.graph.graphs[payload.graph];
    };

    NetworkProtocol.prototype.updateEdgesFilter = function(graph, payload, context) {
      var edge, j, len, network, ref, signature;
      network = this.networks[payload.graph];
      if (network) {
        network.filters = {};
      } else {
        network = {
          network: null,
          filters: {}
        };
        this.networks[payload.graph] = network;
      }
      ref = payload.edges;
      for (j = 0, len = ref.length; j < len; j++) {
        edge = ref[j];
        signature = getEdgeSignature(edge);
        network.filters[signature] = true;
      }
      return this.send('edges', {
        graph: payload.graph,
        edges: payload.edges
      }, context);
    };

    NetworkProtocol.prototype.eventFiltered = function(graph, event) {
      var sign;
      if (!this.transport.options.filterData) {
        return true;
      }
      sign = getSocketSignature(event.socket);
      return this.networks[graph].filters[sign];
    };

    NetworkProtocol.prototype.initNetwork = function(graph, payload, context, callback) {
      var network, opts;
      if (this.networks[payload.graph] && this.networks[payload.graph].network) {
        network = this.networks[payload.graph].network;
        network.stop((function(_this) {
          return function(err) {
            if (err) {
              return callback(err);
            }
            delete _this.networks[payload.graph];
            _this.emit('removenetwork', network, payload.graph, _this.networks);
            return _this.initNetwork(graph, payload, context, callback);
          };
        })(this));
        return;
      }
      graph.componentLoader = this.transport.component.getLoader(graph.baseDir, this.transport.options);
      opts = JSON.parse(JSON.stringify(this.transport.options));
      opts.delay = true;
      return noflo.createNetwork(graph, (function(_this) {
        return function(err, network) {
          if (err) {
            return callback(err);
          }
          if (_this.networks[payload.graph] && _this.networks[payload.graph].network) {
            _this.networks[payload.graph].network = network;
          } else {
            _this.networks[payload.graph] = {
              network: network,
              filters: {}
            };
          }
          _this.emit('addnetwork', network, payload.graph, _this.networks);
          _this.subscribeNetwork(network, payload, context);
          return network.connect(callback);
        };
      })(this), opts);
    };

    NetworkProtocol.prototype.subscribeNetwork = function(network, payload, context) {
      network.on('start', (function(_this) {
        return function(event) {
          return _this.sendAll('started', {
            time: event.start,
            graph: payload.graph,
            running: network.isRunning(),
            started: network.isStarted()
          }, context);
        };
      })(this));
      network.on('end', (function(_this) {
        return function(event) {
          return _this.sendAll('stopped', {
            time: new Date,
            uptime: event.uptime,
            graph: payload.graph,
            running: network.isRunning(),
            started: network.isStarted()
          }, context);
        };
      })(this));
      network.on('icon', (function(_this) {
        return function(event) {
          event.graph = payload.graph;
          return _this.sendAll('icon', event, context);
        };
      })(this));
      network.on('connect', (function(_this) {
        return function(event) {
          if (!_this.eventFiltered(payload.graph, event)) {
            return;
          }
          return _this.sendAll('connect', prepareSocketEvent(event, payload), context);
        };
      })(this));
      network.on('ip', (function(_this) {
        return function(event) {
          var protocolEvent;
          if (!_this.eventFiltered(payload.graph, event)) {
            return;
          }
          protocolEvent = {
            id: event.id,
            socket: event.socket,
            subgraph: event.subgraph,
            metadata: event.metadata
          };
          switch (event.type) {
            case 'openBracket':
              protocolEvent.type = 'begingroup';
              protocolEvent.group = event.data;
              break;
            case 'data':
              protocolEvent.type = 'data';
              protocolEvent.data = event.data;
              protocolEvent.datatype = event.datatype;
              protocolEvent.schema = event.schema;
              break;
            case 'closeBracket':
              protocolEvent.type = 'endgroup';
              protocolEvent.group = event.data;
          }
          return _this.sendAll(protocolEvent.type, prepareSocketEvent(protocolEvent, payload), context);
        };
      })(this));
      network.on('disconnect', (function(_this) {
        return function(event) {
          if (!_this.eventFiltered(payload.graph, event)) {
            return;
          }
          return _this.sendAll('disconnect', prepareSocketEvent(event, payload), context);
        };
      })(this));
      return network.on('process-error', (function(_this) {
        return function(event) {
          var bt, error, i, j, ref;
          error = event.error.message;
          if (event.error.stack) {
            bt = event.error.stack.split('\n');
            for (i = j = 0, ref = Math.min(bt.length, 3); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
              error += "\n" + bt[i];
            }
          }
          return _this.sendAll('processerror', {
            id: event.id,
            error: error,
            graph: payload.graph
          }, context);
        };
      })(this));
    };

    NetworkProtocol.prototype.startNetwork = function(graph, payload, context) {
      var doStart, network;
      doStart = (function(_this) {
        return function(net) {
          return net.start(function(err) {
            if (err) {
              return _this.send('error', err, content);
            }
          });
        };
      })(this);
      network = this.networks[payload.graph];
      if (network && network.network) {
        doStart(network.network);
        return;
      }
      return this.initNetwork(graph, payload, context, (function(_this) {
        return function(err) {
          if (err) {
            return _this.send('error', err, context);
          }
          network = _this.networks[payload.graph];
          return doStart(network.network);
        };
      })(this));
    };

    NetworkProtocol.prototype.stopNetwork = function(graph, payload, context) {
      var net;
      if (!this.networks[payload.graph]) {
        return;
      }
      net = this.networks[payload.graph].network;
      if (!net) {
        return;
      }
      if (net.isStarted()) {
        this.networks[payload.graph].network.stop((function(_this) {
          return function(err) {
            if (err) {
              return _this.send('error', err, context);
            }
          };
        })(this));
        return;
      }
      return this.send('stopped', {
        time: new Date,
        graph: payload.graph,
        running: net.isRunning(),
        started: net.isStarted()
      }, context);
    };

    NetworkProtocol.prototype.debugNetwork = function(graph, payload, context) {
      var net;
      if (!this.networks[payload.graph]) {
        return;
      }
      net = this.networks[payload.graph].network;
      if (!net) {
        return;
      }
      if (net.setDebug != null) {
        return net.setDebug(payload.enable);
      } else {
        return console.log('Warning: Network.setDebug not supported. Update to newer NoFlo');
      }
    };

    NetworkProtocol.prototype.getStatus = function(graph, payload, context) {
      var net;
      if (!this.networks[payload.graph]) {
        return;
      }
      net = this.networks[payload.graph].network;
      if (!net) {
        return;
      }
      return this.send('status', {
        graph: payload.graph,
        running: net.isRunning(),
        started: net.isStarted()
      }, context);
    };

    return NetworkProtocol;

  })(EventEmitter);

  module.exports = NetworkProtocol;

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).Buffer))

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var ComponentProtocol, _, noflo;

  noflo = __webpack_require__(0);

  _ = __webpack_require__(3);

  ComponentProtocol = (function() {
    ComponentProtocol.prototype.loaders = {};

    function ComponentProtocol(transport) {
      this.transport = transport;
    }

    ComponentProtocol.prototype.send = function(topic, payload, context) {
      return this.transport.send('component', topic, payload, context);
    };

    ComponentProtocol.prototype.receive = function(topic, payload, context) {
      if (!this.transport.canDo('protocol:component', payload.secret)) {
        this.send('error', new Error(topic + " not permitted"), context);
        return;
      }
      if (topic === 'source' && !this.transport.canDo('component:setsource', payload.secret)) {
        this.send('error', new Error(topic + " not permitted"), context);
        return;
      }
      if (topic === 'getsource' && !this.transport.canDo('component:getsource', payload.secret)) {
        this.send('error', new Error(topic + " not permitted"), context);
        return;
      }
      switch (topic) {
        case 'list':
          return this.listComponents(payload, context);
        case 'getsource':
          return this.getSource(payload, context);
        case 'source':
          return this.setSource(payload, context);
      }
    };

    ComponentProtocol.prototype.getLoader = function(baseDir, options) {
      if (options == null) {
        options = {};
      }
      if (!this.loaders[baseDir]) {
        this.loaders[baseDir] = new noflo.ComponentLoader(baseDir, options);
      }
      return this.loaders[baseDir];
    };

    ComponentProtocol.prototype.listComponents = function(payload, context) {
      var baseDir, loader;
      baseDir = this.transport.options.baseDir;
      loader = this.getLoader(baseDir, this.transport.options);
      return loader.listComponents((function(_this) {
        return function(err, components) {
          var componentNames, processed;
          if (err) {
            _this.send('error', err, context);
            return;
          }
          componentNames = Object.keys(components);
          processed = 0;
          return componentNames.forEach(function(component) {
            return _this.processComponent(loader, component, context, function(err) {
              processed++;
              if (processed < componentNames.length) {
                return;
              }
              return _this.send('componentsready', processed, context);
            });
          });
        };
      })(this));
    };

    ComponentProtocol.prototype.getSource = function(payload, context) {
      var baseDir, loader;
      baseDir = this.transport.options.baseDir;
      loader = this.getLoader(baseDir, this.transport.options);
      return loader.getSource(payload.name, (function(_this) {
        return function(err, component) {
          var graph, nameParts;
          if (err) {
            graph = _this.transport.graph.graphs[payload.name];
            if (graph == null) {
              _this.send('error', err, context);
              return;
            }
            nameParts = payload.name.split('/');
            return _this.send('source', {
              name: nameParts[1],
              library: nameParts[0],
              code: JSON.stringify(graph.toJSON()),
              language: 'json'
            }, context);
          } else {
            return _this.send('source', component, context);
          }
        };
      })(this));
    };

    ComponentProtocol.prototype.setSource = function(payload, context) {
      var baseDir, loader;
      baseDir = this.transport.options.baseDir;
      loader = this.getLoader(baseDir, this.transport.options);
      return loader.setSource(payload.library, payload.name, payload.code, payload.language, (function(_this) {
        return function(err) {
          if (err) {
            _this.send('error', err, context);
            return;
          }
          return _this.processComponent(loader, loader.normalizeName(payload.library, payload.name), context);
        };
      })(this));
    };

    ComponentProtocol.prototype.processComponent = function(loader, component, context, callback) {
      if (!callback) {
        callback = function() {};
      }
      return loader.load(component, (function(_this) {
        return function(err, instance) {
          if (!instance) {
            if (err instanceof Error) {
              _this.send('error', err, context);
              return callback(err);
            }
            instance = err;
          }
          if (!instance.isReady()) {
            instance.once('ready', function() {
              _this.sendComponent(component, instance, context);
              return callback(null);
            });
            return;
          }
          _this.sendComponent(component, instance, context);
          return callback(null);
        };
      })(this), true);
    };

    ComponentProtocol.prototype.sendComponent = function(component, instance, context) {
      var icon, inPorts, outPorts, port, portName, ref, ref1;
      inPorts = [];
      outPorts = [];
      ref = instance.inPorts;
      for (portName in ref) {
        port = ref[portName];
        if (!port || typeof port === 'function' || !port.canAttach) {
          continue;
        }
        inPorts.push({
          id: portName,
          type: port.getDataType ? port.getDataType() : void 0,
          schema: port.getSchema ? port.getSchema() : void 0,
          required: port.isRequired ? port.isRequired() : void 0,
          addressable: port.isAddressable ? port.isAddressable() : void 0,
          description: port.getDescription ? port.getDescription() : void 0,
          values: port.options && port.options.values ? port.options.values : void 0,
          "default": port.options && port.options["default"] ? port.options["default"] : void 0
        });
      }
      ref1 = instance.outPorts;
      for (portName in ref1) {
        port = ref1[portName];
        if (!port || typeof port === 'function' || !port.canAttach) {
          continue;
        }
        outPorts.push({
          id: portName,
          type: port.getDataType ? port.getDataType() : void 0,
          schema: port.getSchema ? port.getSchema() : void 0,
          required: port.isRequired ? port.isRequired() : void 0,
          addressable: port.isAddressable ? port.isAddressable() : void 0,
          description: port.getDescription ? port.getDescription() : void 0
        });
      }
      icon = instance.getIcon ? instance.getIcon() : 'blank';
      return this.send('component', {
        name: component,
        description: instance.description,
        subgraph: instance.isSubgraph(),
        icon: icon,
        inPorts: inPorts,
        outPorts: outPorts
      }, context);
    };

    ComponentProtocol.prototype.registerGraph = function(id, graph, context) {
      var loader, send, sender;
      sender = (function(_this) {
        return function() {
          return _this.processComponent(loader, id, context);
        };
      })(this);
      send = _.debounce(sender, 10);
      loader = this.getLoader(graph.baseDir, this.transport.options);
      loader.listComponents((function(_this) {
        return function(err, components) {
          if (err) {
            _this.send('error', err, context);
            return;
          }
          loader.registerComponent('', id, graph);
          return send();
        };
      })(this));
      graph.on('addNode', send);
      graph.on('removeNode', send);
      graph.on('renameNode', send);
      graph.on('addEdge', send);
      graph.on('removeEdge', send);
      graph.on('addInitial', send);
      graph.on('removeInitial', send);
      graph.on('addInport', send);
      graph.on('removeInport', send);
      graph.on('renameInport', send);
      graph.on('addOutport', send);
      graph.on('removeOutport', send);
      return graph.on('renameOutport', send);
    };

    return ComponentProtocol;

  })();

  module.exports = ComponentProtocol;

}).call(this);


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var TraceBuffer, Tracer, clone, debug, e, error, jsonStringify, networkToTraceEvent, noflo, subscribeExportedOutports;

  noflo = __webpack_require__(0);

  debug = __webpack_require__(5)('noflo-runtime-base:trace');

  jsonStringify = JSON.stringify;

  try {
    jsonStringify = __webpack_require__(414);
  } catch (error) {
    e = error;
    console.log("WARN: failed to load json-stringify-safe, circular objects may cause fail.\n" + e.message);
  }

  clone = function(obj) {
    var s;
    s = jsonStringify(obj);
    return JSON.parse(s);
  };

  TraceBuffer = (function() {
    function TraceBuffer() {
      this.events = [];
    }

    TraceBuffer.prototype.add = function(event) {
      return this.events.push(event);
    };

    TraceBuffer.prototype.getAll = function(consumeFunc, doneFunc) {
      var i, len, ref;
      ref = this.events;
      for (i = 0, len = ref.length; i < len; i++) {
        e = ref[i];
        consumeFunc(e);
      }
      return doneFunc(null);
    };

    return TraceBuffer;

  })();

  subscribeExportedOutports = function(network, networkId, eventNames, subscribeFunc) {
    var component, event, graphSockets, i, internal, len, pub, ref, sendFunc, socket;
    graphSockets = {};
    ref = network.graph.outports;
    for (pub in ref) {
      internal = ref[pub];
      socket = noflo.internalSocket.createSocket();
      graphSockets[pub] = socket;
      component = network.processes[internal.process].component;
      component.outPorts[internal.port].attach(socket);
      sendFunc = function(event) {
        return function(payload) {
          var data;
          data = {
            id: "EXPORT: " + networkId + " " + (pub.toUpperCase()) + " ->",
            payload: payload,
            socket: {
              to: {
                process: {
                  id: networkId
                },
                port: pub
              }
            }
          };
          return subscribeFunc(event, data);
        };
      };
      for (i = 0, len = eventNames.length; i < len; i++) {
        event = eventNames[i];
        socket.on(event, sendFunc(event));
      }
    }
    return graphSockets;
  };

  networkToTraceEvent = function(networkId, type, data) {
    var error1, event, p, ref, ref1, ref2, ref3, serializeGroup, socket;
    debug('event', networkId, type, "'" + data.id + "'");
    socket = data.socket;
    event = {
      protocol: 'network',
      command: type,
      payload: {
        time: new Date().toISOString(),
        graph: networkId,
        error: null,
        src: {
          node: (ref = socket.from) != null ? ref.process.id : void 0,
          port: (ref1 = socket.from) != null ? ref1.port : void 0
        },
        tgt: {
          node: (ref2 = socket.to) != null ? ref2.process.id : void 0,
          port: (ref3 = socket.to) != null ? ref3.port : void 0
        },
        id: void 0,
        subgraph: void 0
      }
    };
    serializeGroup = function(p) {
      var error1;
      try {
        return p.group = data.group.toString();
      } catch (error1) {
        e = error1;
        debug('group serialization error', e);
        return p.error = e.message;
      }
    };
    p = event.payload;
    switch (type) {
      case 'connect':
        null;
        break;
      case 'disconnect':
        null;
        break;
      case 'begingroup':
        serializeGroup(event.payload);
        break;
      case 'endgroup':
        serializeGroup(event.payload);
        break;
      case 'data':
        try {
          p.data = clone(data.data);
        } catch (error1) {
          e = error1;
          debug('data serialization error', e);
          p.error = e.message;
        }
        break;
      default:
        throw new Error("trace: Unknown event type " + type);
    }
    debug('event done', networkId, type, "'" + data.id + "'");
    return event;
  };

  Tracer = (function() {
    function Tracer(options) {
      this.options = options;
      this.buffer = new TraceBuffer;
      this.header = {
        graphs: {}
      };
    }

    Tracer.prototype.attach = function(network) {
      var eventNames, netId, sockets;
      netId = network.graph.name || network.graph.properties.name || 'default';
      debug('attach', netId);
      eventNames = ['connect', 'begingroup', 'data', 'endgroup', 'disconnect'];
      eventNames.forEach((function(_this) {
        return function(event) {
          return network.on(event, function(data) {
            var payload;
            payload = networkToTraceEvent(netId, event, data);
            return _this.buffer.add(payload);
          });
        };
      })(this));
      sockets = subscribeExportedOutports(network, netId, eventNames, (function(_this) {
        return function(event, data) {
          var payload;
          payload = networkToTraceEvent(netId, event, data);
          return _this.buffer.add(payload);
        };
      })(this));
      return this.header.graphs[netId] = network.graph.toJSON();
    };

    Tracer.prototype.detach = function(network) {};

    Tracer.prototype.dumpString = function(callback) {
      var consume, events;
      events = [];
      consume = function(e) {
        return events.push(e);
      };
      return this.buffer.getAll(consume, (function(_this) {
        return function(err) {
          var trace;
          trace = {
            header: _this.header,
            events: events
          };
          return callback(err, JSON.stringify(trace, null, 2));
        };
      })(this));
    };

    Tracer.prototype.dumpFile = function(filepath, callback) {
      var fs, openFile, temp;
      fs = __webpack_require__(6);
      temp = __webpack_require__(415);
      openFile = function(cb) {
        return fs.open(filepath, 'w', function(err, fd) {
          return cb(err, {
            path: filepath,
            fd: fd
          });
        });
      };
      if (!filepath) {
        openFile = function(cb) {
          return temp.open({
            suffix: '.json'
          }, cb);
        };
      }
      return openFile((function(_this) {
        return function(err, info) {
          var events, header, write, writeEvent;
          if (err) {
            return callback(err);
          }
          events = 0;
          write = function(data, cb) {
            return fs.write(info.fd, data, {
              encoding: 'utf-8'
            }, cb);
          };
          writeEvent = function(e) {
            var s;
            s = events ? ',' : '';
            events += 1;
            s += JSON.stringify(e, null, 2);
            return write(s, function(err) {});
          };
          debug('streaming to file', info.path);
          header = JSON.stringify(_this.header, null, 2);
          return write("{\n \"header\": " + header + "\n, \"events\":\n[", function(err) {
            return _this.buffer.getAll(writeEvent, function(err) {
              if (err) {
                return callback(err);
              }
              debug("streamed " + events + " events");
              return write(']\n }', function(err) {
                debug("completed stream", info.path);
                return callback(err, info.path);
              });
            });
          });
        };
      })(this));
    };

    return Tracer;

  })();

  module.exports.Tracer = Tracer;

}).call(this);


/***/ }),
/* 414 */
/***/ (function(module, exports) {

exports = module.exports = stringify
exports.getSerialize = serializer

function stringify(obj, replacer, spaces, cycleReplacer) {
  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
}

function serializer(replacer, cycleReplacer) {
  var stack = [], keys = []

  if (cycleReplacer == null) cycleReplacer = function(key, value) {
    if (stack[0] === value) return "[Circular ~]"
    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]"
  }

  return function(key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this)
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)
      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)
    }
    else stack.push(value)

    return replacer == null ? value : replacer.call(this, key, value)
  }
}


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var fs   = __webpack_require__(6),
    path = __webpack_require__(18),
    cnst = __webpack_require__(416);

var rimraf     = __webpack_require__(417),
    osTmpdir   = __webpack_require__(419),
    rimrafSync = rimraf.sync;

/* HELPERS */

var RDWR_EXCL = cnst.O_CREAT | cnst.O_TRUNC | cnst.O_RDWR | cnst.O_EXCL;

var generateName = function(rawAffixes, defaultPrefix) {
  var affixes = parseAffixes(rawAffixes, defaultPrefix);
  var now = new Date();
  var name = [affixes.prefix,
              now.getYear(), now.getMonth(), now.getDate(),
              '-',
              process.pid,
              '-',
              (Math.random() * 0x100000000 + 1).toString(36),
              affixes.suffix].join('');
  return path.join(affixes.dir || exports.dir, name);
};

var parseAffixes = function(rawAffixes, defaultPrefix) {
  var affixes = {prefix: null, suffix: null};
  if(rawAffixes) {
    switch (typeof(rawAffixes)) {
    case 'string':
      affixes.prefix = rawAffixes;
      break;
    case 'object':
      affixes = rawAffixes;
      break;
    default:
      throw new Error("Unknown affix declaration: " + affixes);
    }
  } else {
    affixes.prefix = defaultPrefix;
  }
  return affixes;
};

/* -------------------------------------------------------------------------
 * Don't forget to call track() if you want file tracking and exit handlers!
 * -------------------------------------------------------------------------
 * When any temp file or directory is created, it is added to filesToDelete
 * or dirsToDelete. The first time any temp file is created, a listener is
 * added to remove all temp files and directories at exit.
 */
var tracking = false;
var track = function(value) {
  tracking = (value !== false);
  return module.exports; // chainable
};
var exitListenerAttached = false;
var filesToDelete = [];
var dirsToDelete = [];

function deleteFileOnExit(filePath) {
  if (!tracking) return false;
  attachExitListener();
  filesToDelete.push(filePath);
}

function deleteDirOnExit(dirPath) {
  if (!tracking) return false;
  attachExitListener();
  dirsToDelete.push(dirPath);
}

function attachExitListener() {
  if (!tracking) return false;
  if (!exitListenerAttached) {
    process.addListener('exit', cleanupSync);
    exitListenerAttached = true;
  }
}

function cleanupFilesSync() {
  if (!tracking) {
    return false;
  }
  var count = 0;
  var toDelete;
  while ((toDelete = filesToDelete.shift()) !== undefined) {
    rimrafSync(toDelete);
    count++;
  }
  return count;
}

function cleanupFiles(callback) {
  if (!tracking) {
    if (callback) {
      callback(new Error("not tracking"));
    }
    return;
  }
  var count = 0;
  var left = filesToDelete.length;
  if (!left) {
    if (callback) {
      callback(null, count);
    }
    return;
  }
  var toDelete;
  var rimrafCallback = function(err) {
    if (!left) {
      // Prevent processing if aborted
      return;
    }
    if (err) {
      // This shouldn't happen; pass error to callback and abort
      // processing
      if (callback) {
        callback(err);
      }
      left = 0;
      return;
    } else {
      count++;
    }
    left--;
    if (!left && callback) {
      callback(null, count);
    }
  };
  while ((toDelete = filesToDelete.shift()) !== undefined) {
    rimraf(toDelete, rimrafCallback);
  }
}

function cleanupDirsSync() {
  if (!tracking) {
    return false;
  }
  var count = 0;
  var toDelete;
  while ((toDelete = dirsToDelete.shift()) !== undefined) {
    rimrafSync(toDelete);
    count++;
  }
  return count;
}

function cleanupDirs(callback) {
  if (!tracking) {
    if (callback) {
      callback(new Error("not tracking"));
    }
    return;
  }
  var count = 0;
  var left = dirsToDelete.length;
  if (!left) {
    if (callback) {
      callback(null, count);
    }
    return;
  }
  var toDelete;
  var rimrafCallback = function (err) {
    if (!left) {
      // Prevent processing if aborted
      return;
    }
    if (err) {
      // rimraf handles most "normal" errors; pass the error to the
      // callback and abort processing
      if (callback) {
        callback(err, count);
      }
      left = 0;
      return;
    } else {
      count;
    }
    left--;
    if (!left && callback) {
      callback(null, count);
    }
  };
  while ((toDelete = dirsToDelete.shift()) !== undefined) {
    rimraf(toDelete, rimrafCallback);
  }
}

function cleanupSync() {
  if (!tracking) {
    return false;
  }
  var fileCount = cleanupFilesSync();
  var dirCount  = cleanupDirsSync();
  return {files: fileCount, dirs: dirCount};
}

function cleanup(callback) {
  if (!tracking) {
    if (callback) {
      callback(new Error("not tracking"));
    }
    return;
  }
  cleanupFiles(function(fileErr, fileCount) {
    if (fileErr) {
      if (callback) {
        callback(fileErr, {files: fileCount})
      }
    } else {
      cleanupDirs(function(dirErr, dirCount) {
        if (callback) {
          callback(dirErr, {files: fileCount, dirs: dirCount});
        }
      });
    }
  });
}

/* DIRECTORIES */

function mkdir(affixes, callback) {
  var dirPath = generateName(affixes, 'd-');
  fs.mkdir(dirPath, 0700, function(err) {
    if (!err) {
      deleteDirOnExit(dirPath);
    }
    if (callback) {
      callback(err, dirPath);
    }
  });
}

function mkdirSync(affixes) {
  var dirPath = generateName(affixes, 'd-');
  fs.mkdirSync(dirPath, 0700);
  deleteDirOnExit(dirPath);
  return dirPath;
}

/* FILES */

function open(affixes, callback) {
  var filePath = generateName(affixes, 'f-');
  fs.open(filePath, RDWR_EXCL, 0600, function(err, fd) {
    if (!err) {
      deleteFileOnExit(filePath);
    }
    if (callback) {
      callback(err, {path: filePath, fd: fd});
    }
  });
}

function openSync(affixes) {
  var filePath = generateName(affixes, 'f-');
  var fd = fs.openSync(filePath, RDWR_EXCL, 0600);
  deleteFileOnExit(filePath);
  return {path: filePath, fd: fd};
}

function createWriteStream(affixes) {
  var filePath = generateName(affixes, 's-');
  var stream = fs.createWriteStream(filePath, {flags: RDWR_EXCL, mode: 0600});
  deleteFileOnExit(filePath);
  return stream;
}

/* EXPORTS */
// Settings
exports.dir               = path.resolve(osTmpdir());
exports.track             = track;
// Functions
exports.mkdir             = mkdir;
exports.mkdirSync         = mkdirSync;
exports.open              = open;
exports.openSync          = openSync;
exports.path              = generateName;
exports.cleanup           = cleanup;
exports.cleanupSync       = cleanupSync;
exports.createWriteStream = createWriteStream;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 416 */
/***/ (function(module, exports) {

module.exports = {"O_RDONLY":0,"O_WRONLY":1,"O_RDWR":2,"S_IFMT":61440,"S_IFREG":32768,"S_IFDIR":16384,"S_IFCHR":8192,"S_IFBLK":24576,"S_IFIFO":4096,"S_IFLNK":40960,"S_IFSOCK":49152,"O_CREAT":512,"O_EXCL":2048,"O_NOCTTY":131072,"O_TRUNC":1024,"O_APPEND":8,"O_DIRECTORY":1048576,"O_NOFOLLOW":256,"O_SYNC":128,"O_SYMLINK":2097152,"O_NONBLOCK":4,"S_IRWXU":448,"S_IRUSR":256,"S_IWUSR":128,"S_IXUSR":64,"S_IRWXG":56,"S_IRGRP":32,"S_IWGRP":16,"S_IXGRP":8,"S_IRWXO":7,"S_IROTH":4,"S_IWOTH":2,"S_IXOTH":1,"E2BIG":7,"EACCES":13,"EADDRINUSE":48,"EADDRNOTAVAIL":49,"EAFNOSUPPORT":47,"EAGAIN":35,"EALREADY":37,"EBADF":9,"EBADMSG":94,"EBUSY":16,"ECANCELED":89,"ECHILD":10,"ECONNABORTED":53,"ECONNREFUSED":61,"ECONNRESET":54,"EDEADLK":11,"EDESTADDRREQ":39,"EDOM":33,"EDQUOT":69,"EEXIST":17,"EFAULT":14,"EFBIG":27,"EHOSTUNREACH":65,"EIDRM":90,"EILSEQ":92,"EINPROGRESS":36,"EINTR":4,"EINVAL":22,"EIO":5,"EISCONN":56,"EISDIR":21,"ELOOP":62,"EMFILE":24,"EMLINK":31,"EMSGSIZE":40,"EMULTIHOP":95,"ENAMETOOLONG":63,"ENETDOWN":50,"ENETRESET":52,"ENETUNREACH":51,"ENFILE":23,"ENOBUFS":55,"ENODATA":96,"ENODEV":19,"ENOENT":2,"ENOEXEC":8,"ENOLCK":77,"ENOLINK":97,"ENOMEM":12,"ENOMSG":91,"ENOPROTOOPT":42,"ENOSPC":28,"ENOSR":98,"ENOSTR":99,"ENOSYS":78,"ENOTCONN":57,"ENOTDIR":20,"ENOTEMPTY":66,"ENOTSOCK":38,"ENOTSUP":45,"ENOTTY":25,"ENXIO":6,"EOPNOTSUPP":102,"EOVERFLOW":84,"EPERM":1,"EPIPE":32,"EPROTO":100,"EPROTONOSUPPORT":43,"EPROTOTYPE":41,"ERANGE":34,"EROFS":30,"ESPIPE":29,"ESRCH":3,"ESTALE":70,"ETIME":101,"ETIMEDOUT":60,"ETXTBSY":26,"EWOULDBLOCK":35,"EXDEV":18,"SIGHUP":1,"SIGINT":2,"SIGQUIT":3,"SIGILL":4,"SIGTRAP":5,"SIGABRT":6,"SIGIOT":6,"SIGBUS":10,"SIGFPE":8,"SIGKILL":9,"SIGUSR1":30,"SIGSEGV":11,"SIGUSR2":31,"SIGPIPE":13,"SIGALRM":14,"SIGTERM":15,"SIGCHLD":20,"SIGCONT":19,"SIGSTOP":17,"SIGTSTP":18,"SIGTTIN":21,"SIGTTOU":22,"SIGURG":16,"SIGXCPU":24,"SIGXFSZ":25,"SIGVTALRM":26,"SIGPROF":27,"SIGWINCH":28,"SIGIO":23,"SIGSYS":12,"SSL_OP_ALL":2147486719,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION":262144,"SSL_OP_CIPHER_SERVER_PREFERENCE":4194304,"SSL_OP_CISCO_ANYCONNECT":32768,"SSL_OP_COOKIE_EXCHANGE":8192,"SSL_OP_CRYPTOPRO_TLSEXT_BUG":2147483648,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS":2048,"SSL_OP_EPHEMERAL_RSA":0,"SSL_OP_LEGACY_SERVER_CONNECT":4,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER":32,"SSL_OP_MICROSOFT_SESS_ID_BUG":1,"SSL_OP_MSIE_SSLV2_RSA_PADDING":0,"SSL_OP_NETSCAPE_CA_DN_BUG":536870912,"SSL_OP_NETSCAPE_CHALLENGE_BUG":2,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG":1073741824,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG":8,"SSL_OP_NO_COMPRESSION":131072,"SSL_OP_NO_QUERY_MTU":4096,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION":65536,"SSL_OP_NO_SSLv2":16777216,"SSL_OP_NO_SSLv3":33554432,"SSL_OP_NO_TICKET":16384,"SSL_OP_NO_TLSv1":67108864,"SSL_OP_NO_TLSv1_1":268435456,"SSL_OP_NO_TLSv1_2":134217728,"SSL_OP_PKCS1_CHECK_1":0,"SSL_OP_PKCS1_CHECK_2":0,"SSL_OP_SINGLE_DH_USE":1048576,"SSL_OP_SINGLE_ECDH_USE":524288,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG":128,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG":0,"SSL_OP_TLS_BLOCK_PADDING_BUG":512,"SSL_OP_TLS_D5_BUG":256,"SSL_OP_TLS_ROLLBACK_BUG":8388608,"ENGINE_METHOD_DSA":2,"ENGINE_METHOD_DH":4,"ENGINE_METHOD_RAND":8,"ENGINE_METHOD_ECDH":16,"ENGINE_METHOD_ECDSA":32,"ENGINE_METHOD_CIPHERS":64,"ENGINE_METHOD_DIGESTS":128,"ENGINE_METHOD_STORE":256,"ENGINE_METHOD_PKEY_METHS":512,"ENGINE_METHOD_PKEY_ASN1_METHS":1024,"ENGINE_METHOD_ALL":65535,"ENGINE_METHOD_NONE":0,"DH_CHECK_P_NOT_SAFE_PRIME":2,"DH_CHECK_P_NOT_PRIME":1,"DH_UNABLE_TO_CHECK_GENERATOR":4,"DH_NOT_SUITABLE_GENERATOR":8,"NPN_ENABLED":1,"RSA_PKCS1_PADDING":1,"RSA_SSLV23_PADDING":2,"RSA_NO_PADDING":3,"RSA_PKCS1_OAEP_PADDING":4,"RSA_X931_PADDING":5,"RSA_PKCS1_PSS_PADDING":6,"POINT_CONVERSION_COMPRESSED":2,"POINT_CONVERSION_UNCOMPRESSED":4,"POINT_CONVERSION_HYBRID":6,"F_OK":0,"R_OK":4,"W_OK":2,"X_OK":1,"UV_UDP_REUSEADDR":4}

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {module.exports = rimraf
rimraf.sync = rimrafSync

var assert = __webpack_require__(418)
var path = __webpack_require__(18)
var fs = __webpack_require__(6)

// for EMFILE handling
var timeout = 0
exports.EMFILE_MAX = 1000
exports.BUSYTRIES_MAX = 3

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  defaults(options)

  if (!cb) throw new Error("No callback passed to rimraf()")

  var busyTries = 0
  rimraf_(p, options, function CB (er) {
    if (er) {
      if (isWindows && (er.code === "EBUSY" || er.code === "ENOTEMPTY") &&
          busyTries < exports.BUSYTRIES_MAX) {
        busyTries ++
        var time = busyTries * 100
        // try again, with the same exact callback as this one.
        return setTimeout(function () {
          rimraf_(p, options, CB)
        }, time)
      }

      // this one won't happen if graceful-fs is used.
      if (er.code === "EMFILE" && timeout < exports.EMFILE_MAX) {
        return setTimeout(function () {
          rimraf_(p, options, CB)
        }, timeout ++)
      }

      // already gone
      if (er.code === "ENOENT") er = null
    }

    timeout = 0
    cb(er)
  })
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.unlink(p, function (er) {
    if (er) {
      if (er.code === "ENOENT")
        return cb(null)
      if (er.code === "EPERM")
        return (isWindows)
          ? fixWinEPERM(p, options, er, cb)
          : rmdir(p, options, er, cb)
      if (er.code === "EISDIR")
        return rmdir(p, options, er, cb)
    }
    return cb(er)
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, 666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, 666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p)
  assert(options)

  try {
    options.unlinkSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "EPERM")
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
    if (er.code !== "EISDIR")
      throw er
    rmdirSync(p, options, er)
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })
  options.rmdirSync(p, options)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(27);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
var isWindows = process.platform === 'win32';
var trailingSlashRe = isWindows ? /[^:]\\$/ : /.\/$/;

// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
module.exports = function () {
	var path;

	if (isWindows) {
		path = process.env.TEMP ||
			process.env.TMP ||
			(process.env.SystemRoot || process.env.windir) + '\\temp';
	} else {
		path = process.env.TMPDIR ||
			process.env.TMP ||
			process.env.TEMP ||
			'/tmp';
	}

	if (trailingSlashRe.test(path)) {
		path = path.slice(0, -1);
	}

	return path;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {(function() {
  var Base, DirectClient, DirectRuntime, EventEmitter, isBrowser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isBrowser = function() {
    return !(typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1);
  };

  Base = __webpack_require__(45);

  EventEmitter = __webpack_require__(4).EventEmitter;

  DirectRuntime = (function(superClass) {
    extend(DirectRuntime, superClass);

    function DirectRuntime(options) {
      DirectRuntime.__super__.constructor.call(this, options);
      this.clients = [];
    }

    DirectRuntime.prototype._connect = function(client) {
      this.clients.push(client);
      return client.on('send', (function(_this) {
        return function(msg) {
          return _this._receive(msg, {
            client: client
          });
        };
      })(this));
    };

    DirectRuntime.prototype._disconnect = function(client) {
      if (this.clients.indexOf(client) === -1) {
        return;
      }
      this.clients.splice(this.clients.indexOf(client), 1);
      return client.removeAllListeners('send');
    };

    DirectRuntime.prototype._receive = function(msg, context) {
      return this.receive(msg.protocol, msg.command, msg.payload, context);
    };

    DirectRuntime.prototype.send = function(protocol, topic, payload, context) {
      var m;
      if (!context.client) {
        return;
      }
      m = {
        protocol: protocol,
        command: topic,
        payload: payload
      };
      return context.client._receive(m);
    };

    DirectRuntime.prototype.sendAll = function(protocol, topic, payload) {
      var client, i, len, m, ref, results;
      m = {
        protocol: protocol,
        command: topic,
        payload: payload
      };
      ref = this.clients;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        client = ref[i];
        results.push(client._receive(m));
      }
      return results;
    };

    return DirectRuntime;

  })(Base);

  DirectClient = (function(superClass) {
    extend(DirectClient, superClass);

    function DirectClient(runtime, name) {
      this.name = name;
      DirectClient.__super__.constructor.call(this);
      this.runtime = runtime;
      if (!this.name) {
        this.name = 'Unnamed client';
      }
    }

    DirectClient.prototype.connect = function() {
      return this.runtime._connect(this);
    };

    DirectClient.prototype.disconnect = function() {
      return this.runtime._disconnect(this);
    };

    DirectClient.prototype.send = function(protocol, topic, payload) {
      var m;
      m = {
        protocol: protocol,
        command: topic,
        payload: payload
      };
      return this.emit('send', m);
    };

    DirectClient.prototype._receive = function(message) {
      return setTimeout((function(_this) {
        return function() {
          return _this.emit('message', message);
        };
      })(this), 1);
    };

    return DirectClient;

  })(EventEmitter);

  exports.Client = DirectClient;

  exports.Runtime = DirectRuntime;

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

(function (context) {
  var PostMessage = __webpack_require__(44);

  var OpenerRuntime = function (options, button) {
    PostMessage.call(this, options);
    if (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.openClient(button.getAttribute('href'));
      }.bind(this));
    }
  };
  OpenerRuntime.prototype = new PostMessage;

  OpenerRuntime.prototype.openClient = function (url) {
    var client = window.open(url, '_blank');
    if (!client) {
      throw new Error("Unable to open client window");
    }
    this.context = {
      href: '*'
    };
    var handleMessage = function (message) {
      var data;
      if (typeof message.data === 'string') {
        data = JSON.parse(message.data);
      } else {
        data = message.data;
      }

      if (!data.protocol || !data.command) {
        return;
      }
      this.receive(data.protocol, data.command, data.payload, this.context);
    }.bind(this);
    var closeCheck = setInterval(function () {
      if (!client || client.closed) {
        // Client window was closed
        this.setClient(null);
        window.removeEventListener('message', handleMessage);
        clearInterval(closeCheck);
      }
    }.bind(this), 1000);

    // Register client window and subscribe to messages
    this.setClient(client);
    window.addEventListener('message', handleMessage);
  };

  module.exports = function (options, button) {
    options = PostMessage.normalizeOptions(options);
    var runtime = new OpenerRuntime(options, button);
    return runtime;
  };
})(window);



/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * This file can be used for general library features of noflo-runtime.
 *
 * The library features can be made available as CommonJS modules that the
 * components in this project utilize.
 */
exports.ComponentLoader = __webpack_require__(24);
exports.RemoteSubGraph = __webpack_require__(25);
exports.connection = __webpack_require__(16);


/***/ })
/******/ ]);